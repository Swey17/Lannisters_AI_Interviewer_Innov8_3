[
  {
    "id": 2406,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Two Pointers",
      "Prefix Sum",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 2D integer array intervals where intervals[i] = [lefti, righti] represents the inclusive interval [lefti, righti].\nYou have to divide the intervals into one or more groups such that each interval is in exactly one group, and no two intervals that are in the same group intersect each other.\nReturn the minimum number of groups you need to make.\nTwo intervals intersect if there is at least one common number between them. For example, the intervals [1, 5] and [5, 8] intersect.\n\u00a0\nExample 1:\n\nInput: intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]\nOutput: 3\nExplanation: We can divide the intervals into the following groups:\n- Group 1: [1, 5], [6, 8].\n- Group 2: [2, 3], [5, 10].\n- Group 3: [1, 10].\nIt can be proven that it is not possible to divide the intervals into fewer than 3 groups.\n\nExample 2:\n\nInput: intervals = [[1,3],[5,6],[8,10],[11,13]]\nOutput: 1\nExplanation: None of the intervals overlap, so we can put all of them in one group.\n\n\u00a0\nConstraints:\n\n1 <= intervals.length <= 105\nintervals[i].length == 2\n1 <= lefti <= righti <= 106\n\n",
    "starterCode": "class Solution:\n    def minGroups(self, intervals: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "intervals = [[1,2],[3,4],[5,6],[7,8]]",
        "output": "1"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4],[4,5]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,1000000]]",
        "output": "1"
      },
      {
        "input": "intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,3],[5,6],[8,10],[11,13]]",
        "output": "1"
      },
      {
        "input": "intervals = [[1,100],[50,60],[60,90]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,10],[10,20],[20,30]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,2],[3,4],[5,6],[7,8],[9,10]]",
        "output": "1"
      },
      {
        "input": "intervals = [[1,2],[1,3],[1,4],[1,5]]",
        "output": "4"
      },
      {
        "input": "intervals = [[1,5],[2,9],[3,7],[4,10]]",
        "output": "4"
      },
      {
        "input": "intervals = [[1,100],[2,99],[3,98],[4,97]]",
        "output": "4"
      },
      {
        "input": "intervals = [[5,10],[11,15],[16,20],[21,25],[1,5],[6,10],[11,15],[16,20],[21,25]]",
        "output": "2"
      },
      {
        "input": "intervals = [[5,15],[10,20],[25,30],[5,10],[15,25],[20,25]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,10],[2,5],[3,8],[4,9],[5,10],[6,11]]",
        "output": "5"
      },
      {
        "input": "intervals = [[1,10],[10,20],[20,30],[5,15],[15,25]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1000,2000],[1500,2500],[2000,3000],[2500,3500],[3000,4000],[3500,4500]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,50],[2,49],[3,48],[4,47],[5,46],[6,45],[7,44],[8,43],[9,42],[10,41],[11,40],[12,39],[13,38],[14,37],[15,36],[16,35],[17,34],[18,33],[19,32],[20,31],[21,30],[22,29],[23,28],[24,27],[25,26]]",
        "output": "25"
      },
      {
        "input": "intervals = [[1,5],[2,5],[3,5],[4,5],[5,5]]",
        "output": "5"
      },
      {
        "input": "intervals = [[1,2],[1,3],[1,4],[1,5],[1,6]]",
        "output": "5"
      },
      {
        "input": "intervals = [[1,1000],[2,999],[3,998],[4,997],[5,996],[6,995],[7,994],[8,993],[9,992],[10,991]]",
        "output": "10"
      },
      {
        "input": "intervals = [[1,3],[2,5],[3,7],[4,9],[5,11],[6,13],[7,15]]",
        "output": "5"
      },
      {
        "input": "intervals = [[10,20],[15,25],[20,30],[25,35],[30,40],[35,45],[40,50]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,10],[2,9],[3,8],[4,7],[5,6]]",
        "output": "5"
      },
      {
        "input": "intervals = [[10,20],[15,25],[20,30],[25,35],[30,40],[35,45],[40,50],[45,55],[50,60],[55,65]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,10],[2,20],[3,30],[4,40],[5,50],[6,60],[7,70],[8,80],[9,90],[10,100],[1,50],[51,100]]",
        "output": "11"
      },
      {
        "input": "intervals = [[1,500000],[500001,1000000],[2,499999],[500002,999998],[3,499998],[500003,999997]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14]]",
        "output": "5"
      },
      {
        "input": "intervals = [[1,500000],[500001,1000000],[1,500000],[500001,1000000]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "1"
      },
      {
        "input": "intervals = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91]]",
        "output": "10"
      },
      {
        "input": "intervals = [[1,5],[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[35,40],[40,45],[45,50]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10]]",
        "output": "5"
      },
      {
        "input": "intervals = [[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]",
        "output": "10"
      },
      {
        "input": "intervals = [[1,100000],[2,99999],[3,99998],[4,99997],[5,99996],[6,99995],[7,99994],[8,99993],[9,99992],[10,99991]]",
        "output": "10"
      },
      {
        "input": "intervals = [[5,10],[15,20],[25,30],[10,15],[20,25],[30,35],[15,20],[25,30],[35,40],[20,25]]",
        "output": "4"
      },
      {
        "input": "intervals = [[1, 10], [11, 20], [1, 10], [11, 20], [1, 10], [11, 20]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,3],[2,6],[3,9],[4,12],[5,15]]",
        "output": "4"
      },
      {
        "input": "intervals = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]]",
        "output": "9"
      },
      {
        "input": "intervals = [[1,5],[6,10],[11,15],[16,20],[21,25],[26,30],[1,10],[6,15],[11,20],[16,25]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10]]",
        "output": "10"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,3],[3,5],[5,7],[7,9],[9,11],[11,13],[13,15],[15,17],[17,19]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,1000000],[2,999999],[3,999998],[4,999997]]",
        "output": "4"
      },
      {
        "input": "intervals = [[1, 5], [2, 6], [3, 7], [4, 8], [5, 9]]",
        "output": "5"
      },
      {
        "input": "intervals = [[1,5],[5,10],[10,15],[15,20],[20,25],[25,30]]",
        "output": "2"
      },
      {
        "input": "intervals = [[5,10],[15,20],[25,30],[5,20],[10,25],[15,30],[5,30]]",
        "output": "5"
      },
      {
        "input": "intervals = [[1,10],[2,11],[3,12],[4,13],[5,14],[6,15],[7,16],[8,17],[9,18],[10,19]]",
        "output": "10"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1]]",
        "output": "4"
      },
      {
        "input": "intervals = [[1,100000],[100000,200000],[200000,300000],[300000,400000],[400000,500000]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,10],[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90],[90,100]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]",
        "output": "6"
      },
      {
        "input": "intervals = [[1,100],[50,150],[100,200],[150,250],[200,300],[250,350],[300,400]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [1, 5], [5, 9], [9, 13]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,3],[2,5],[4,7],[6,9],[8,11],[10,13],[12,15]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1, 1000000], [1000000, 2000000], [1, 1000000], [1000000, 2000000], [1, 1000000], [1000000, 2000000]]",
        "output": "6"
      },
      {
        "input": "intervals = [[1,100],[50,150],[100,200],[150,250],[200,300],[250,350]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,5],[1,5],[1,5],[1,5],[1,5],[1,5],[1,5],[1,5],[1,5]]",
        "output": "9"
      },
      {
        "input": "intervals = [[1,10],[1,20],[1,30],[1,40],[1,50],[1,60],[1,70],[1,80],[1,90],[1,100]]",
        "output": "10"
      },
      {
        "input": "intervals = [[1,10],[11,20],[1,10],[11,20],[1,10],[11,20],[1,10],[11,20]]",
        "output": "4"
      },
      {
        "input": "intervals = [[1,2],[2,5],[5,10],[10,15],[15,20],[20,25],[25,30]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,5],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,1000000],[1,1000000],[1,1000000]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,5],[1,5],[1,5],[1,5],[1,5],[1,5]]",
        "output": "6"
      },
      {
        "input": "intervals = [[1,3],[1,3],[1,3],[2,4],[2,4],[2,4],[3,5],[3,5],[3,5],[4,6],[4,6],[4,6],[5,7],[5,7],[5,7]]",
        "output": "9"
      },
      {
        "input": "intervals = [[1,1000000],[2,999999],[3,999998],[4,999997],[5,999996]]",
        "output": "5"
      },
      {
        "input": "intervals = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,10],[10,20],[20,30],[30,40],[40,50]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,100000],[2,99999],[3,99998],[4,99997],[5,99996]]",
        "output": "5"
      },
      {
        "input": "intervals = [[1,1000],[500,1500],[1000,2000],[1500,2500],[2000,3000],[2500,3500],[3000,4000]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [1, 5], [2, 6], [3, 7], [4, 8], [5, 9]]",
        "output": "6"
      },
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18],[3,5],[6,9],[12,14]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,10],[11,20],[21,30],[31,40],[1,10],[11,20],[21,30],[31,40],[1,10]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1]]",
        "output": "6"
      },
      {
        "input": "intervals = [[10, 20], [20, 30], [30, 40], [10, 20], [20, 30], [30, 40], [10, 30], [20, 40], [30, 50]]",
        "output": "7"
      },
      {
        "input": "intervals = [[1,5],[5,10],[10,15],[15,20],[20,25],[25,30],[30,35]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,10],[1,10],[1,10],[10,20],[10,20],[10,20]]",
        "output": "6"
      },
      {
        "input": "intervals = [[1,2],[3,4],[5,6],[7,8],[9,10],[1,10],[2,9],[3,8],[4,7],[5,6]]",
        "output": "6"
      },
      {
        "input": "intervals = [[1,3],[2,4],[3,5],[4,6],[5,7]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4],[1,4],[2,5],[3,6],[4,7],[5,8],[6,9]]",
        "output": "5"
      },
      {
        "input": "intervals = [[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3]]",
        "output": "10"
      },
      {
        "input": "intervals = [[1,3],[1,4],[1,5],[2,6],[2,7],[3,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15]]",
        "output": "6"
      },
      {
        "input": "intervals = [[1, 100], [50, 150], [100, 200], [200, 300]]",
        "output": "3"
      },
      {
        "input": "intervals = [[5,10],[15,20],[25,30],[35,40],[10,15],[20,25],[30,35]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,10],[10,20],[20,30],[30,40],[40,50],[1,50]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,100],[50,150],[100,200],[150,250],[200,300]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1,20],[5,15],[10,25],[15,30],[20,35]]",
        "output": "4"
      },
      {
        "input": "intervals = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13]]",
        "output": "1"
      },
      {
        "input": "intervals = [[1, 3], [4, 7], [8, 10], [2, 5], [6, 9], [11, 13], [1, 4], [5, 8], [9, 12]]",
        "output": "3"
      },
      {
        "input": "intervals = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]",
        "output": "2"
      },
      {
        "input": "intervals = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[1,10],[2,9]]",
        "output": "3"
      }
    ]
  },
  {
    "id": 3170,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Greedy",
      "Hash Table",
      "String",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a string s. It may contain any number of '*' characters. Your task is to remove all '*' characters.\nWhile there is a '*', do the following operation:\n\nDelete the leftmost '*' and the smallest non-'*' character to its left. If there are several smallest characters, you can delete any of them.\n\nReturn the lexicographically smallest resulting string after removing all '*' characters.\n\u00a0\nExample 1:\n\nInput: s = \"aaba*\"\nOutput: \"aab\"\nExplanation:\nWe should delete one of the 'a' characters with '*'. If we choose s[3], s becomes the lexicographically smallest.\n\nExample 2:\n\nInput: s = \"abc\"\nOutput: \"abc\"\nExplanation:\nThere is no '*' in the string.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 105\ns consists only of lowercase English letters and '*'.\nThe input is generated such that it is possible to delete all '*' characters.\n\n",
    "starterCode": "class Solution:\n    def clearStars(self, s: str) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z\"",
        "output": "z"
      },
      {
        "input": "s = \"*a*b*c\"",
        "output": "c"
      },
      {
        "input": "s = \"aaba*\"",
        "output": "aab"
      },
      {
        "input": "s = \"z*z*z*z\"",
        "output": "z"
      },
      {
        "input": "s = \"a*b*c*a*b*c\"",
        "output": "c"
      },
      {
        "input": "s = \"zzzzzzzzz***zzzzz\"",
        "output": "zzzzzzzzzzz"
      },
      {
        "input": "s = \"abc***\"",
        "output": ""
      },
      {
        "input": "s = \"a*a*a*a*a*a*a*a*a*a\"",
        "output": "a"
      },
      {
        "input": "s = \"aaabbbccc***\"",
        "output": "bbbccc"
      },
      {
        "input": "s = \"ab*c*d*e\"",
        "output": "de"
      },
      {
        "input": "s = \"ab*ac*\"",
        "output": "bc"
      },
      {
        "input": "s = \"aaa*bbb*ccc\"",
        "output": "abbbccc"
      },
      {
        "input": "s = \"abcde*****fghij\"",
        "output": "fghij"
      },
      {
        "input": "s = \"a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z\"",
        "output": "z"
      },
      {
        "input": "s = \"a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*a\"",
        "output": "a"
      },
      {
        "input": "s = \"leetcode*e*et*c*o*\"",
        "output": "leetoeto"
      },
      {
        "input": "s = \"abcabcabc***abc\"",
        "output": "bcbcbcabc"
      },
      {
        "input": "s = \"a*a*a*a*a\"",
        "output": "a"
      },
      {
        "input": "s = \"abc\"",
        "output": "abc"
      },
      {
        "input": "s = \"z*z*z\"",
        "output": "z"
      },
      {
        "input": "s = \"aa*bb*c\"",
        "output": "bbc"
      },
      {
        "input": "s = \"abcdef*ghij*k*l*m*\"",
        "output": "fghijklm"
      },
      {
        "input": "s = \"*a*a*a*a*a*a*a*a*a*a\"",
        "output": "a"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba*\"",
        "output": "zyxwvutsrqponmlkjihgfedcb"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz*\"",
        "output": "bcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"abc*def*ghi*\"",
        "output": "defghi"
      },
      {
        "input": "s = \"*a*b*c*\"",
        "output": ""
      },
      {
        "input": "s = \"ab*cd*ef*gh*ij*kl*mn*op*qr*st*uv*wx*yz*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z\"",
        "output": "tuvwxyztuvwxyz"
      },
      {
        "input": "s = \"aaabbbccc*bbb*aaa*\"",
        "output": "abbbcccbbbaa"
      },
      {
        "input": "s = \"abc*d*efg*h*ijk*lmn*opq*rst*u*v*w*x*y*z*\"",
        "output": "opqrstuvwxyz"
      },
      {
        "input": "s = \"aabbaa*bb*a*aa*\"",
        "output": "aabbbba"
      },
      {
        "input": "s = \"aaabbbccc***bbb***aaa\"",
        "output": "bbbcccaaa"
      },
      {
        "input": "s = \"abracadabra*bra*bra*cad*a\"",
        "output": "abracadabrbrbrcda"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz*zyxwvutsrqponmlkjihgfedcba*\"",
        "output": "bcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcb"
      },
      {
        "input": "s = \"a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z\"",
        "output": "z"
      },
      {
        "input": "s = \"a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*\"",
        "output": ""
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz*\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"banana*na*na\"",
        "output": "banannna"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabc*abc*abc*abc*\"",
        "output": "abcabcabcabcabcabcbcbcbcbc"
      },
      {
        "input": "s = \"*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*\"",
        "output": ""
      },
      {
        "input": "s = \"mno*pqr*stu*vwx*yz*abc*def*ghi*jkl\"",
        "output": "rstuvwxyzdefghijkl"
      },
      {
        "input": "s = \"abcabcabcabc*abc*abc*abc*abc*abc*abc*abc*abc*\"",
        "output": "abcabcabcbcbcbcbcbcbcbcbcbc"
      },
      {
        "input": "s = \"abcdefghijk*lmnopqrst*uvwxyz*\"",
        "output": "defghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz***\"",
        "output": "bccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz"
      },
      {
        "input": "s = \"a*a*b*b*c*c*d*d*e*e*f*f*g*g*h*h*i*i*j*j*k*k*l*l*m*m*n*n*o*o*p*p*q*q*r*r*s*s*t*t*u*u*v*v*w*w*x*x*y*y*z*z\"",
        "output": "z"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz*\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"abc*def*ghi*jkl*mno*pqr*stu*vwx*yz*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z\"",
        "output": "rstuvwxyzrstuvwxyz"
      },
      {
        "input": "s = \"zzzzz*yyyyy*xxxxx*wwwww*vvvvv*uuuuu*ttttt*sssss*rrrrr*qqqqq*ppppp*ooooo*nnnnn*mmmmm*lllll*kkkkk*jjjjj*iiiii*h*\"",
        "output": "zzzzyyyyxxxxwwwwvvvvuuuuttttssssrrrrqqqqppppoooonnnnmmmmllllkkkkjjjjiiii"
      },
      {
        "input": "s = \"zzzzzzzzzzz*a*zzzzzzzzzz*b*zzzzzzzzzz*c*zzzzzzzzzz*d*zzzzzzzzzz*e*zzzzzzzzzz*f*zzzzzzzzzz*g*zzzzzzzzzz*h*zzzzzzzzzz*i*zzzzzzzzzz*j*zzzzzzzzzz*k*zzzzzzzzzz*l*zzzzzzzzzz*m*zzzzzzzzzz*n*zzzzzzzzzz*o*zzzzzzzzzz*p*zzzzzzzzzz*q*zzzzzzzzzz*r*zzzzzzzzzz*s*zzzzzzzzzz*t*zzzzzzzzzz*u*zzzzzzzzzz*v*zzzzzzzzzz*w*zzzzzzzzzz*x*zzzzzzzzzz*y*zzzzzzzzzz*z*\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"a*z*y*x*z*y*x*\"",
        "output": ""
      },
      {
        "input": "s = \"a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z\"",
        "output": "z"
      },
      {
        "input": "s = \"aaabbbccc*aa*bb*cc*\"",
        "output": "abbbcccbbcc"
      },
      {
        "input": "s = \"z*yz*yz*yz*y*z\"",
        "output": "zzzz"
      },
      {
        "input": "s = \"xyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyx***zyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyx***zyxzyxzyxzyxzyxzyxzyxzyxzyxzyx***\"",
        "output": "xyxzyxzyxzyxzyxzyxzyxzyxzyxzyzyzyzyxzyxzyxzyxzyxzyxzyxzyxzyxzyzyzyzyxzyxzyxzyxzyxzyxzyxzyzyzy"
      },
      {
        "input": "s = \"abc***def***ghi***jkl***mno***pqr***stu***vwx***yz*\"",
        "output": "z"
      },
      {
        "input": "s = \"zyxwvu*utsrqponmlkjihgfedcba*\"",
        "output": "zyxwvutsrqponmlkjihgfedcb"
      },
      {
        "input": "s = \"abcd*efgh*i*jklm*no*pqrst*uvw*x*y*z\"",
        "output": "jklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaab*aaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "aaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaa"
      },
      {
        "input": "s = \"z*z*z*z*z*z*z*z*z*z\"",
        "output": "z"
      },
      {
        "input": "s = \"z*z*z*z*z*z*z*z*z*z*z*z*z*z*z*z\"",
        "output": "z"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz*\"",
        "output": "aaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz"
      },
      {
        "input": "s = \"zzzzzzzzzzz*zzzzzzzzzz*zzzzzzzzzz*\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"*abcdefghijklmnopqrstuvwxyz*\"",
        "output": "bcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"mississippi*m*m*m*s*s*s*i*i*i*p*p*p\"",
        "output": "ssssppssspp"
      },
      {
        "input": "s = \"aabbccddeee***f***\"",
        "output": "ddeeef"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz*\"",
        "output": "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz"
      },
      {
        "input": "s = \"b*a*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*\"",
        "output": ""
      },
      {
        "input": "s = \"le*etco*de***\"",
        "output": "lto"
      },
      {
        "input": "s = \"zyxzyxzyx***\"",
        "output": "zyzyzy"
      },
      {
        "input": "s = \"zyx*zyx*zyx*\"",
        "output": "zyzyzy"
      }
    ]
  },
  {
    "id": 1519,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Hash Table",
      "Counting"
    ],
    "problemDescription": "You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. The root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. The node with the number i has the label labels[i]).\nThe edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.\nReturn an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i.\nA subtree of a tree T is the tree consisting of a node in T and all of its descendant nodes.\n\u00a0\nExample 1:\n\n\nInput: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"\nOutput: [2,1,1,1,1,1,1]\nExplanation: Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.\nNode 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself).\n\nExample 2:\n\n\nInput: n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"\nOutput: [4,2,1,1]\nExplanation: The sub-tree of node 2 contains only node 2, so the answer is 1.\nThe sub-tree of node 3 contains only node 3, so the answer is 1.\nThe sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.\nThe sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4.\n\nExample 3:\n\n\nInput: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"\nOutput: [3,2,1,1,1]\n\n\u00a0\nConstraints:\n\n1 <= n <= 105\nedges.length == n - 1\nedges[i].length == 2\n0 <= ai, bi < n\nai != bi\nlabels.length == n\nlabels is consisting of only of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def countSubTrees(self, n: int, edges: List[List[int]], labels: str) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"",
        "output": "[4, 2, 1, 1]"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], labels = \"cbabaa\"",
        "output": "[1, 2, 2, 1, 1, 1]"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], labels = \"cbabac\"",
        "output": "[2, 2, 1, 1, 1, 1]"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]], labels = \"babbbbabb\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], labels = \"aadbdbdbaa\"",
        "output": "[4, 3, 2, 2, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 3, edges = [[0,1],[0,2]], labels = \"aaa\"",
        "output": "[3, 1, 1]"
      },
      {
        "input": "n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"",
        "output": "[3, 2, 1, 1, 1]"
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"",
        "output": "[2, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 8, edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7]], labels = \"aebabacd\"",
        "output": "[3, 1, 2, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 1, edges = [], labels = \"a\"",
        "output": "[1]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], labels = \"abacabadabacaba\"",
        "output": "[8, 2, 4, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], labels = \"aabbccddeeffgghhiijj\"",
        "output": "[2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 26, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[8,20],[9,21],[10,22],[11,23],[12,24],[13,25]], labels = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[4,15],[5,16],[5,17],[6,18],[6,19],[7,20],[7,21],[8,22],[8,23],[9,24],[9,25],[10,26],[10,27],[11,28],[11,29]], labels = \"abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\"",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 26, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]], labels = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17],[10,18],[11,19],[12,20],[12,21],[13,22],[13,23],[14,24],[14,25],[15,26],[15,27],[16,28],[16,29]], labels = \"ababababababababababababababababab\"",
        "output": "[15, 8, 7, 5, 3, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19]], labels = \"abacabadabacabad\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], labels = \"abcabcabcabcabcabcabcabcabcabc\"",
        "output": "[7, 6, 4, 3, 3, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], labels = \"abcdefghij\"",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17],[10,18],[11,19]], labels = \"abacabadabacabadaba\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 100, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24],[10,25],[10,26],[11,27],[11,28],[12,29],[12,30],[13,31],[13,32],[14,33],[14,34],[15,35],[15,36],[16,37],[16,38],[17,39],[17,40],[18,41],[18,42],[19,43],[19,44],[20,45],[20,46],[21,47],[21,48],[22,49],[22,50],[23,51],[23,52],[24,53],[24,54],[25,55],[25,56],[26,57],[26,58],[27,59],[27,60],[28,61],[28,62],[29,63],[29,64],[30,65],[30,66],[31,67],[31,68],[32,69],[32,70],[33,71],[33,72],[34,73],[34,74],[35,75],[35,76],[36,77],[36,78],[37,79],[37,80],[38,81],[38,82],[39,83],[39,84],[40,85],[40,86],[41,87],[41,88],[42,89],[42,90],[43,91],[43,92],[44,93],[44,94],[45,95],[45,96],[46,97],[46,98],[47,99]], labels = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "[4, 2, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11],[7,12],[7,13],[8,14]], labels = \"babbbbbabbabb\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 40, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39]], labels = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefgh\"",
        "output": "[2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 21, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[8,20]], labels = \"ababababababababababa\"",
        "output": "[11, 5, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[9,19]], labels = \"bababababababababab\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[11,24],[11,25],[12,26],[12,27],[13,28],[13,29]], labels = \"bababbababababababababababababab\"",
        "output": "[16, 7, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], labels = \"acbacbacbacbacbacb\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24],[10,25],[10,26],[11,27],[11,28],[12,29]], labels = \"babababababababababababab\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], labels = \"bbbbbbbbbbbbbbbbbbbb\"",
        "output": "[20, 7, 7, 5, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[8,20],[9,21],[10,22],[11,23],[12,24],[13,25],[14,26],[15,27],[16,28],[17,29]], labels = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "[2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], labels = \"abcdefghij\"",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], labels = \"aaabbbcccddd\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 100, edges = [[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[1,10],[1,11],[1,12],[1,13],[1,14],[1,15],[1,16],[1,17],[1,18],[1,19],[2,20],[2,21],[2,22],[2,23],[2,24],[2,25],[2,26],[2,27],[2,28],[2,29],[3,30],[3,31],[3,32],[3,33],[3,34],[3,35],[3,36],[3,37],[3,38],[3,39],[4,40],[4,41],[4,42],[4,43],[4,44],[4,45],[4,46],[4,47],[4,48],[4,49],[5,50],[5,51],[5,52],[5,53],[5,54],[5,55],[5,56],[5,57],[5,58],[5,59],[6,60],[6,61],[6,62],[6,63],[6,64],[6,65],[6,66],[6,67],[6,68],[6,69],[7,70],[7,71],[7,72],[7,73],[7,74],[7,75],[7,76],[7,77],[7,78],[7,79],[8,80],[8,81],[8,82],[8,83],[8,84],[8,85],[8,86],[8,87],[8,88],[8,89],[9,90],[9,91],[9,92],[9,93],[9,94],[9,95],[9,96],[9,97],[9,98],[9,99]], labels = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "[4, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24],[10,25],[10,26],[11,27],[11,28],[12,29]], labels = \"aaaaaaaaaabbbbbbbbcccccccccc\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24],[10,25],[10,26],[11,27],[11,28],[12,29]], labels = \"bbbbbbbbbbbbbbbbbbbbbbbbb\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11],[6,12],[7,13],[8,14]], labels = \"bababbababababa\"",
        "output": "[8, 2, 3, 3, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 40, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[1,7],[2,8],[2,9],[2,10],[3,11],[3,12],[3,13],[4,14],[4,15],[4,16],[4,17],[5,18],[5,19],[6,20],[6,21],[6,22],[7,23],[7,24],[8,25],[8,26],[8,27],[9,28],[9,29],[10,30],[10,31],[11,32],[11,33],[11,34],[12,35],[12,36],[13,37],[13,38],[13,39]], labels = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "[40, 11, 11, 12, 5, 3, 4, 3, 4, 3, 3, 4, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[10,22],[10,23],[11,24]], labels = \"abcdefghijklmnopqrstuvwxyzabcde\"",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], labels = \"abcabcabcabcabcabcabcabc\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29]], labels = \"abcdefghijklmnopqrstuvwxyzabcde\"",
        "output": "[2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17],[10,18],[11,19]], labels = \"bbbbbbbbbbbbbbbbbb\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24],[10,25],[10,26],[11,27],[11,28],[12,29]], labels = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "[2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14]], labels = \"abcabcabcabcabc\"",
        "output": "[5, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[3,8],[4,9]], labels = \"aaaaaaaaaa\"",
        "output": "[10, 3, 2, 2, 2, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 50, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24],[11,25],[11,26],[12,27],[12,28],[13,29],[13,30],[14,31],[14,32],[15,33],[15,34],[16,35],[16,36],[17,37],[17,38],[18,39],[18,40],[19,41],[19,42],[20,43],[20,44],[21,45],[21,46],[22,47],[22,48],[23,49]], labels = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "[2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[8,20],[9,21],[10,22],[11,23],[12,24]], labels = \"abacabadabacabadaba\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 26, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[11,24],[11,25]], labels = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 26, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25]], labels = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 100, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24],[11,25],[11,26],[12,27],[12,28],[13,29],[13,30],[14,31],[14,32],[15,33],[15,34],[16,35],[16,36],[17,37],[17,38],[18,39],[18,40],[19,41],[19,42],[20,43],[20,44],[21,45],[21,46],[22,47],[22,48],[23,49],[23,50],[24,51],[24,52],[25,53],[25,54],[26,55],[26,56],[27,57],[27,58],[28,59],[28,60],[29,61],[29,62],[30,63],[30,64],[31,65],[31,66],[32,67],[32,68],[33,69],[33,70],[34,71],[34,72],[35,73],[35,74],[36,75],[36,76],[37,77],[37,78],[38,79],[38,80],[39,81],[39,82],[40,83],[40,84],[41,85],[41,86],[42,87],[42,88],[43,89],[43,90],[44,91],[44,92],[45,93],[45,94],[46,95],[46,96],[47,97],[47,98],[48,99]], labels = \"abacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabad\"",
        "output": "[50, 9, 16, 3, 8, 5, 8, 3, 8, 5, 4, 1, 4, 3, 4, 2, 4, 3, 4, 1, 4, 3, 3, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 27, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]], labels = \"abcdefghijklmnopqrstuvwxyzabcdef\"",
        "output": "[2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24],[10,25],[10,26],[11,27],[11,28],[12,29]], labels = \"aaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], labels = \"ababbbbaaaaabb\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 16, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15]], labels = \"aabbccddeeffgghh\"",
        "output": "[2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 100, edges = [[0,1],[0,2],[0,3],[0,4],[0,5],[1,6],[1,7],[2,8],[2,9],[3,10],[3,11],[4,12],[4,13],[5,14],[5,15],[6,16],[6,17],[7,18],[7,19],[8,20],[8,21],[9,22],[9,23],[10,24],[10,25],[11,26],[11,27],[12,28],[12,29],[13,30],[13,31],[14,32],[14,33],[15,34],[15,35],[16,36],[16,37],[17,38],[17,39],[18,40],[18,41],[19,42],[19,43],[20,44],[20,45],[21,46],[21,47],[22,48],[22,49],[23,50],[23,51],[24,52],[24,53],[25,54],[25,55],[26,56],[26,57],[27,58],[27,59],[28,60],[28,61],[29,62],[29,63],[30,64],[30,65],[31,66],[31,67],[32,68],[32,69],[33,70],[33,71],[34,72],[34,73],[35,74],[35,75],[36,76],[36,77],[37,78],[37,79],[38,80],[38,81],[39,82],[39,83],[40,84],[40,85],[41,86],[41,87],[42,88],[42,89],[43,90],[43,91],[44,92],[44,93],[45,94],[45,95],[46,96],[46,97],[47,98],[47,99]], labels = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17],[10,18],[11,19]], labels = \"aaaaaaaaaabbbbbbbbbb\"",
        "output": "[10, 6, 3, 3, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 40, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[4,15],[5,16],[5,17],[5,18],[6,19],[6,20],[6,21],[7,22],[7,23],[7,24],[8,25],[8,26],[8,27],[9,28],[9,29],[9,30],[10,31],[10,32],[10,33],[11,34],[11,35],[11,36],[12,37],[12,38],[12,39]], labels = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "[40, 13, 13, 13, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], labels = \"abababababababababab\"",
        "output": "[10, 4, 4, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29]], labels = \"abacabadabacabadabacabadab\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29]], labels = \"cccccccccccccccccccccccccccccc\"",
        "output": "[30, 15, 14, 7, 7, 7, 6, 3, 3, 3, 3, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], labels = \"aaaaaaaaaaaaaaaaaaaa\"",
        "output": "[20, 7, 7, 5, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 18, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[8,17]], labels = \"abcdefghijklmnopqr\"",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], labels = \"bababababababababa\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 50, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24],[10,25],[10,26],[11,27],[11,28],[12,29],[12,30],[13,31],[13,32],[14,33],[14,34],[15,35],[15,36],[16,37],[16,38],[17,39],[17,40],[18,41],[18,42],[19,43],[19,44],[20,45],[20,46],[21,47],[21,48],[22,49]], labels = \"ababababababababababababababababababababababab\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 27, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]], labels = \"abcdefghijklmnopqrstuvwxyzabc\"",
        "output": "[2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      }
    ]
  },
  {
    "id": 789,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math"
    ],
    "problemDescription": "You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. All inputs are integral coordinates.\nEach turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. All actions happen simultaneously.\nYou escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.\nReturn true if it is possible to escape regardless of how the ghosts move, otherwise return false.\n\u00a0\nExample 1:\n\nInput: ghosts = [[1,0],[0,3]], target = [0,1]\nOutput: true\nExplanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.\n\nExample 2:\n\nInput: ghosts = [[1,0]], target = [2,0]\nOutput: false\nExplanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\n\nExample 3:\n\nInput: ghosts = [[2,0]], target = [1,0]\nOutput: false\nExplanation: The ghost can reach the target at the same time as you.\n\n\u00a0\nConstraints:\n\n1 <= ghosts.length <= 100\nghosts[i].length == 2\n-104 <= xi, yi <= 104\nThere can be multiple ghosts in the same location.\ntarget.length == 2\n-104 <= xtarget, ytarget <= 104\n\n",
    "starterCode": "class Solution:\n    def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:\n        ",
    "testCases": [
      {
        "input": "ghosts = [[0,0],[0,0]], target = [1,1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1,-1]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[1,1],[2,2],[3,3]], target = [4,4]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,1],[2,2],[3,3],[4,4]], target = [5,5]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,0],[0,3]], target = [0,1]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-1,-1],[-2,-2]], target = [-3,-3]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,0],[0,0]], target = [0,0]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,1],[1,0],[0,-1],[-1,0]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-10000,-10000]], target = [-9999,-9999]",
        "output": "False"
      },
      {
        "input": "ghosts = [[100,100]], target = [-100,-100]",
        "output": "True"
      },
      {
        "input": "ghosts = [[10000,10000]], target = [-10000,-10000]",
        "output": "True"
      },
      {
        "input": "ghosts = [[10000,10000],[-10000,-10000]], target = [5000,5000]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,1],[0,-1],[1,0],[-1,0]], target = [1,1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,0]], target = [0,0]",
        "output": "False"
      },
      {
        "input": "ghosts = [[100,100],[99,100],[100,99]], target = [101,101]",
        "output": "False"
      },
      {
        "input": "ghosts = [[5,5],[5,6],[6,5],[6,6]], target = [5,5]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,1],[1,0]], target = [1,1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[2,0]], target = [1,0]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,0]], target = [1,1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,1],[2,2],[3,3]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[1,1],[2,2]], target = [3,3]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1,-1]], target = [-2,-2]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,1],[1,1]], target = [2,2]",
        "output": "False"
      },
      {
        "input": "ghosts = [[10000,10000]], target = [9999,9999]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1,-1],[2,2]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-2,-2],[-3,-3]], target = [-4,-4]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1,0],[0,-1]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[1,0]], target = [2,0]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1,0],[0,-1],[1,0],[0,1]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[1,0],[0,1],[1,1]], target = [-1,-1]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-5,5],[5,-5],[0,10]], target = [5,5]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0, 1], [0, -1], [1, 0], [-1, 0]], target = [0, 0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[5,5], [3,3], [-1,-1]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-1000, 0], [0, -1000], [1000, 0], [0, 1000]], target = [1001, 1001]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1,-2],[-2,-3],[-3,-4],[-4,-5],[-5,-6],[-6,-7]], target = [-7,-8]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1, 0], [0, 1]], target = [-1, -1]",
        "output": "True"
      },
      {
        "input": "ghosts = [[100,0],[0,100],[-100,0],[0,-100]], target = [50,50]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,0],[0,0],[0,0]], target = [1,1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-100, 100], [100, -100], [50, 50]], target = [0, 0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[10,10],[10,-10],[-10,10],[-10,-10]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5]], target = [2, 5]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1, -1], [1, 1]], target = [10000, 10000]",
        "output": "False"
      },
      {
        "input": "ghosts = [[10000,0],[0,10000],[-10000,0],[0,-10000]], target = [5000,5000]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[-8,-8],[-9,-9],[-10,-10]], target = [-1,-1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5]], target = [5,5]",
        "output": "True"
      },
      {
        "input": "ghosts = [[1,2],[3,4],[5,6],[7,8]], target = [-1,-2]",
        "output": "True"
      },
      {
        "input": "ghosts = [[0,1],[0,-1],[1,0],[-1,0],[1,1],[-1,-1]], target = [2,2]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], target = [9, 10]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], target = [6, 7]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1,0],[0,-1],[1,0],[0,1],[-2,0],[0,-2],[2,0],[0,2]], target = [3,3]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1, -1], [-1, 1], [1, -1], [1, 1]], target = [2, 2]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[10,10],[20,20],[30,30]], target = [15,15]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-10,10],[10,-10],[-10,-10]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[0,1],[0,-1],[1,0],[-1,0],[1,1],[-1,-1]], target = [10,10]",
        "output": "False"
      },
      {
        "input": "ghosts = [[5,5],[5,-5],[-5,5],[-5,-5]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-10,0],[0,-10],[10,0],[0,10]], target = [3,3]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-10000, -10000], [-10000, 10000], [10000, -10000], [10000, 10000]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[5,-5],[-5,5],[0,0]], target = [-3,3]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,2],[2,1],[3,3],[4,4],[5,5]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12]], target = [6,6]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1000,1000], [1001,1001], [999,999], [998,998]], target = [1002,1002]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1000, -1000], [-2000, -2000], [-1500, -1500], [-500, -500]], target = [-1500, -1500]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-5000, 5000], [5000, -5000], [0, 0], [1, 1]], target = [5000, 5000]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1000,1000],[2000,2000],[3000,3000]], target = [1500,1500]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,1],[2,2],[3,3],[4,4],[5,5]], target = [6,6]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-10, -20], [-30, -40], [-50, -60]], target = [-40, -50]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-5, 5], [5, -5], [-10, 10], [10, -10]], target = [0, 0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2]], target = [2, 2]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-100,-100],[100,100],[-50,50],[50,-50]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[10000,10000],[-10000,-10000],[10000,-10000],[-10000,10000]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-10000,-10000],[10000,10000]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-1,1],[-2,2],[-3,3],[-4,4]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[10, 10], [20, 20], [30, 30]], target = [15, 15]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,2],[3,4],[5,6]], target = [7,8]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0, 0], [0, 0]], target = [0, 0]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1000, 1000], [999, 1000], [1000, 999], [999, 999]], target = [1001, 1001]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,1],[1,-1],[-1,1],[-1,-1]], target = [2,2]",
        "output": "False"
      },
      {
        "input": "ghosts = [[5, 5], [5, -5], [-5, 5], [-5, -5]], target = [0, 0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[100,0],[0,100],[50,50],[0,0]], target = [50,50]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,0], [0,1], [0,2], [0,3], [0,4]], target = [0,5]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], target = [7,8]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,0],[0,0],[0,0],[0,0],[0,0]], target = [1,1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], target = [10,10]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5]], target = [-6,-6]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], target = [5,5]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1000,-1000],[-1000,1000]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[0,0],[0,1],[1,0],[1,1]], target = [10,10]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-5,-5], [-4,-4], [-3,-3], [-2,-2], [-1,-1]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[2,2],[3,3],[4,4],[5,5]], target = [1,1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,0], [0,0], [0,0], [0,0]], target = [1000,1000]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-50,-50],[-49,-49],[-48,-48],[-47,-47]], target = [-45,-45]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1000,-1000],[-1001,-1001],[-1002,-1002]], target = [-1003,-1003]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-1,-1],[-2,-2],[-3,-3],[-4,-4]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[0,10000],[10000,0],[-10000,0],[0,-10000]], target = [5000,5000]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,0],[2,0],[3,0],[4,0],[5,0]], target = [6,0]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-10000,0],[0,-10000],[10000,0],[0,10000]], target = [1,1]",
        "output": "True"
      },
      {
        "input": "ghosts = [[1,1],[1,1],[1,1],[1,1],[1,1]], target = [2,2]",
        "output": "False"
      },
      {
        "input": "ghosts = [[10,10],[20,20],[30,30]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[0,1],[1,2],[2,3],[3,4],[4,5]], target = [5,6]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-10, 10], [10, -10]], target = [5, 5]",
        "output": "True"
      },
      {
        "input": "ghosts = [[5,5],[5,-5],[-5,5],[-5,-5]], target = [10,10]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,0],[0,1],[0,0],[0,2],[2,0]], target = [2,2]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,1], [1,0], [0,-1], [-1,0]], target = [2,2]",
        "output": "False"
      },
      {
        "input": "ghosts = [[2,3], [4,5], [6,7], [8,9]], target = [10,10]",
        "output": "False"
      },
      {
        "input": "ghosts = [[5,5],[-5,-5],[5,-5],[-5,5]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-100, -100], [100, 100]], target = [0, 0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-1, 0], [0, -1], [1, 0], [0, 1], [0, 0]], target = [0, 0]",
        "output": "False"
      },
      {
        "input": "ghosts = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50]], target = [60, 60]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1, 2], [3, 4], [5, 6], [7, 8]], target = [4, 4]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-100,0],[0,-100],[100,0],[0,100]], target = [100,100]",
        "output": "False"
      },
      {
        "input": "ghosts = [[100,0],[100,0],[100,0]], target = [200,0]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-5, 0], [5, 0], [0, -5], [0, 5]], target = [3, 3]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1,1],[1,-1],[-1,-1]], target = [1,1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1000, 1000], [2000, 2000], [1500, 1500], [500, 500]], target = [1500, 1500]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,2],[3,4],[5,6]], target = [3,3]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,1],[1,2],[2,1],[2,2],[3,3]], target = [3,1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0, 0], [0, 0], [0, 0], [0, 0]], target = [1, 1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[100,0], [0,100], [-100,0], [0,-100]], target = [50,50]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,1],[0,2],[0,3],[0,4],[0,5]], target = [0,6]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5]], target = [-6, -6]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1000,0],[0,-1000],[1000,0],[0,1000]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-10, -10], [-9, -9], [-8, -8], [-7, -7], [-6, -6]], target = [-5, -5]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], target = [5,5]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-100,-100],[-200,-200],[-300,-300]], target = [-150,-150]",
        "output": "False"
      },
      {
        "input": "ghosts = [[5, 5], [5, 5], [5, 5]], target = [10, 10]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1, 0], [0, 1], [0, 0], [2, 2], [3, 3]], target = [2, 1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0,0],[0,0],[0,0],[0,0]], target = [1,1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[-8,-8],[-9,-9],[-10,-10]], target = [-5,-5]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,0],[0,1],[1,1],[2,0],[0,2]], target = [1,1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[0, 1], [1, 0], [0, -1], [-1, 0]], target = [10, 10]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], target = [1,1]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1,2], [3,4], [5,6], [7,8], [9,10]], target = [0,0]",
        "output": "True"
      },
      {
        "input": "ghosts = [[-1, 0], [0, -1]], target = [-10000, -10000]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]], target = [2, 2]",
        "output": "False"
      },
      {
        "input": "ghosts = [[1000,1000],[1001,1001],[1002,1002]], target = [1003,1003]",
        "output": "False"
      },
      {
        "input": "ghosts = [[-10,-10],[-20,-20],[-30,-30],[-40,-40]], target = [-15,-15]",
        "output": "False"
      }
    ]
  },
  {
    "id": 2456,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given two string arrays creators and ids, and an integer array views, all of length n. The ith video on a platform was created by creators[i], has an id of ids[i], and has views[i] views.\nThe popularity of a creator is the sum of the number of views on all of the creator's videos. Find the creator with the highest popularity and the id of their most viewed video.\n\nIf multiple creators have the highest popularity, find all of them.\nIf multiple videos have the highest view count for a creator, find the lexicographically smallest id.\n\nNote: It is possible for different videos to have the same id, meaning that ids do not uniquely identify a video. For example, two videos with the same ID are considered as distinct videos with their own viewcount.\nReturn a 2D array of strings answer where answer[i] = [creatorsi, idi] means that creatorsi has the highest popularity and idi is the id of their most popular video. The answer can be returned in any order.\n\u00a0\nExample 1:\n\nInput: creators = [\"alice\",\"bob\",\"alice\",\"chris\"], ids = [\"one\",\"two\",\"three\",\"four\"], views = [5,10,5,4]\nOutput: [[\"alice\",\"one\"],[\"bob\",\"two\"]]\nExplanation:\nThe popularity of alice is 5 + 5 = 10.\nThe popularity of bob is 10.\nThe popularity of chris is 4.\nalice and bob are the most popular creators.\nFor bob, the video with the highest view count is \"two\".\nFor alice, the videos with the highest view count are \"one\" and \"three\". Since \"one\" is lexicographically smaller than \"three\", it is included in the answer.\n\nExample 2:\n\nInput: creators = [\"alice\",\"alice\",\"alice\"], ids = [\"a\",\"b\",\"c\"], views = [1,2,2]\nOutput: [[\"alice\",\"b\"]]\nExplanation:\nThe videos with id \"b\" and \"c\" have the highest view count.\nSince \"b\" is lexicographically smaller than \"c\", it is included in the answer.\n\n\u00a0\nConstraints:\n\nn == creators.length == ids.length == views.length\n1 <= n <= 105\n1 <= creators[i].length, ids[i].length <= 5\ncreators[i] and ids[i] consist only of lowercase English letters.\n0 <= views[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def mostPopularCreator(self, creators: List[str], ids: List[str], views: List[int]) -> List[List[str]]:\n        ",
    "testCases": [
      {
        "input": "creators = [\"eve\",\"eve\",\"eve\",\"eve\"], ids = [\"a\",\"a\",\"b\",\"b\"], views = [10,20,20,10]",
        "output": "[['eve', 'a']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"chris\"], ids = [\"one\",\"two\",\"three\",\"four\"], views = [5,10,5,4]",
        "output": "[['alice', 'one'], ['bob', 'two']]"
      },
      {
        "input": "creators = [\"john\",\"john\",\"john\"], ids = [\"x\",\"y\",\"x\"], views = [10,10,10]",
        "output": "[['john', 'x']]"
      },
      {
        "input": "creators = [\"anna\",\"bob\",\"charlie\"], ids = [\"a\",\"b\",\"c\"], views = [100,200,300]",
        "output": "[['charlie', 'c']]"
      },
      {
        "input": "creators = [\"alice\",\"alice\",\"alice\"], ids = [\"a\",\"b\",\"c\"], views = [1,2,2]",
        "output": "[['alice', 'b']]"
      },
      {
        "input": "creators = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"], ids = [\"id\",\"id\",\"id\",\"id\",\"id\",\"id\",\"id\",\"id\",\"id\",\"id\"], views = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[['a', 'id']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"charlie\",\"dave\",\"eve\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\"], views = [100,200,300,400,500]",
        "output": "[['eve', 'e']]"
      },
      {
        "input": "creators = [\"frank\",\"frank\",\"frank\",\"frank\",\"frank\",\"frank\"], ids = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], views = [1000,1000,1000,1000,1000,1000]",
        "output": "[['frank', 'five']]"
      },
      {
        "input": "creators = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\"], ids = [\"x\",\"y\",\"z\",\"x\",\"y\",\"z\"], views = [10,20,30,30,20,10]",
        "output": "[['alice', 'z'], ['bob', 'x']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"chris\",\"alice\"], ids = [\"one\",\"two\",\"three\",\"four\",\"five\"], views = [5,10,5,4,15]",
        "output": "[['alice', 'five']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"charlie\",\"bob\",\"alice\"], ids = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], views = [5,10,5,4,10,15]",
        "output": "[['alice', 'six']]"
      },
      {
        "input": "creators = [\"dave\",\"dave\",\"dave\",\"eve\",\"eve\",\"eve\"], ids = [\"alpha\",\"beta\",\"gamma\",\"delta\",\"epsilon\",\"delta\"], views = [1,3,2,5,6,5]",
        "output": "[['eve', 'epsilon']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"bob\",\"charlie\",\"charlie\"], ids = [\"x\",\"y\",\"z\",\"x\",\"y\",\"z\"], views = [100,200,100,300,150,150]",
        "output": "[['bob', 'x']]"
      },
      {
        "input": "creators = [\"george\",\"harry\",\"george\",\"harry\",\"george\",\"harry\"], ids = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\"], views = [100,200,100,200,150,150]",
        "output": "[['harry', 'def']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"bob\",\"alice\",\"bob\",\"alice\"], ids = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\"], views = [10,20,10,20,30,40,50]",
        "output": "[['alice', 'stu']]"
      },
      {
        "input": "creators = [\"dave\",\"eve\",\"eve\",\"eve\",\"dave\"], ids = [\"x\",\"y\",\"z\",\"y\",\"x\"], views = [30,20,30,40,10]",
        "output": "[['eve', 'y']]"
      },
      {
        "input": "creators = [\"alice\",\"alice\",\"alice\",\"alice\",\"alice\"], ids = [\"z\",\"y\",\"x\",\"w\",\"v\"], views = [5,5,5,5,5]",
        "output": "[['alice', 'v']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"bob\",\"alice\",\"bob\"], ids = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], views = [5,15,10,10,5,5]",
        "output": "[['bob', 'two']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"charlie\",\"alice\",\"bob\",\"charlie\",\"alice\",\"bob\",\"charlie\"], ids = [\"a1\",\"a2\",\"a3\",\"a4\",\"a5\",\"a6\",\"a7\",\"a8\",\"a9\"], views = [1,2,3,4,5,6,7,8,9]",
        "output": "[['charlie', 'a9']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"charlie\",\"bob\",\"alice\"], ids = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], views = [15,25,15,35,25,15]",
        "output": "[['bob', 'five']]"
      },
      {
        "input": "creators = [\"karen\",\"karen\",\"karen\",\"karen\",\"karen\",\"karen\",\"karen\",\"karen\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"], views = [100,200,100,200,100,200,100,200]",
        "output": "[['karen', 'b']]"
      },
      {
        "input": "creators = [\"mike\",\"mike\",\"mike\",\"mike\",\"mike\",\"mike\",\"mike\"], ids = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\"], views = [10,20,30,40,50,60,70]",
        "output": "[['mike', 'seven']]"
      },
      {
        "input": "creators = [\"eve\",\"eve\",\"eve\",\"eve\",\"eve\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\"], views = [10,20,10,10,20]",
        "output": "[['eve', 'b']]"
      },
      {
        "input": "creators = [\"a\",\"b\",\"a\",\"b\",\"a\",\"b\"], ids = [\"aaa\",\"bbb\",\"aaa\",\"bbb\",\"aaa\",\"bbb\"], views = [1,2,3,4,5,6]",
        "output": "[['b', 'bbb']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"charlie\",\"bob\",\"alice\"], ids = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], views = [10,20,5,30,20,15]",
        "output": "[['bob', 'five']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"charlie\",\"bob\",\"alice\",\"alice\"], ids = [\"aaa\",\"bbb\",\"ccc\",\"ddd\",\"eee\",\"fff\",\"ggg\"], views = [1,2,1,3,2,1,2]",
        "output": "[['alice', 'ggg']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"chris\",\"bob\"], ids = [\"one\",\"two\",\"three\",\"four\",\"five\"], views = [5,15,5,4,15]",
        "output": "[['bob', 'five']]"
      },
      {
        "input": "creators = [\"rachel\",\"sam\",\"rachel\",\"sam\",\"rachel\",\"sam\"], ids = [\"pqr\",\"stu\",\"vwx\",\"yza\",\"bcd\",\"efg\"], views = [5,5,5,5,5,5]",
        "output": "[['rachel', 'bcd'], ['sam', 'efg']]"
      },
      {
        "input": "creators = [\"anna\",\"anna\",\"anna\",\"anna\",\"anna\",\"anna\"], ids = [\"x\",\"y\",\"z\",\"x\",\"y\",\"z\"], views = [10,20,30,40,50,60]",
        "output": "[['anna', 'z']]"
      },
      {
        "input": "creators = [\"creatorA\",\"creatorB\",\"creatorC\",\"creatorA\",\"creatorB\",\"creatorC\"], ids = [\"videoA\",\"videoB\",\"videoC\",\"videoA\",\"videoB\",\"videoC\"], views = [1000,2000,1500,1000,2500,1500]",
        "output": "[['creatorB', 'videoB']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"charlie\",\"bob\",\"alice\"], ids = [\"aaaaa\",\"bbbbb\",\"ccccc\",\"ddddd\",\"eeeee\",\"fffff\"], views = [1,2,3,4,5,6]",
        "output": "[['alice', 'fffff']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"charlie\",\"bob\",\"alice\"], ids = [\"x\",\"y\",\"z\",\"a\",\"b\",\"c\"], views = [15,25,15,35,35,10]",
        "output": "[['bob', 'b']]"
      },
      {
        "input": "creators = [\"anna\",\"bob\",\"charlie\",\"dave\",\"eve\"], ids = [\"aaa\",\"bbb\",\"ccc\",\"ddd\",\"eee\"], views = [100,200,300,400,500]",
        "output": "[['eve', 'eee']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"chris\",\"bob\",\"alice\",\"chris\",\"eve\",\"eve\",\"eve\"], ids = [\"one\",\"two\",\"three\",\"four\",\"two\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\"], views = [5,10,5,4,10,15,1,20,20,5]",
        "output": "[['eve', 'eight']]"
      },
      {
        "input": "creators = [\"frank\",\"frank\",\"frank\",\"frank\",\"frank\"], ids = [\"a\",\"b\",\"a\",\"c\",\"b\"], views = [100,200,300,100,200]",
        "output": "[['frank', 'a']]"
      },
      {
        "input": "creators = [\"anna\",\"anna\",\"anna\",\"bob\",\"bob\",\"bob\",\"charlie\",\"charlie\",\"charlie\"], ids = [\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"], views = [100,200,300,100,200,300,100,200,300]",
        "output": "[['anna', 'c'], ['bob', 'c'], ['charlie', 'c']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"chris\",\"bob\",\"alice\"], ids = [\"one\",\"two\",\"three\",\"four\",\"two\",\"six\"], views = [5,10,5,4,10,15]",
        "output": "[['alice', 'six']]"
      },
      {
        "input": "creators = [\"eve\",\"eve\",\"eve\",\"eve\",\"eve\",\"eve\",\"eve\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"], views = [10,10,10,10,10,10,10]",
        "output": "[['eve', 'a']]"
      },
      {
        "input": "creators = [\"alice\",\"alice\",\"alice\",\"alice\",\"alice\"], ids = [\"a\",\"a\",\"b\",\"b\",\"c\"], views = [10,10,20,20,30]",
        "output": "[['alice', 'c']]"
      },
      {
        "input": "creators = [\"ivan\",\"ivan\",\"ivan\",\"ivan\",\"ivan\",\"ivan\",\"ivan\"], ids = [\"vid1\",\"vid2\",\"vid3\",\"vid4\",\"vid5\",\"vid6\",\"vid7\"], views = [1,2,3,4,5,6,7]",
        "output": "[['ivan', 'vid7']]"
      },
      {
        "input": "creators = [\"eve\",\"eve\",\"eve\",\"eve\",\"eve\",\"eve\"], ids = [\"aaa\",\"aab\",\"aac\",\"aad\",\"aae\",\"aaf\"], views = [10,10,10,10,10,10]",
        "output": "[['eve', 'aaa']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"bob\",\"alice\",\"bob\"], ids = [\"a\",\"b\",\"a\",\"b\",\"a\",\"b\"], views = [10,15,10,20,10,25]",
        "output": "[['bob', 'b']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"bob\",\"alice\",\"bob\"], ids = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"], views = [10,20,30,40,50,60]",
        "output": "[['bob', 'c']]"
      },
      {
        "input": "creators = [\"nina\",\"oliver\",\"nina\",\"oliver\",\"nina\",\"oliver\"], ids = [\"x\",\"y\",\"x\",\"y\",\"x\",\"y\"], views = [1000,1000,1000,1000,1000,1000]",
        "output": "[['nina', 'x'], ['oliver', 'y']]"
      },
      {
        "input": "creators = [\"anna\",\"bob\",\"charlie\",\"bob\",\"anna\"], ids = [\"aaa\",\"bbb\",\"ccc\",\"bbb\",\"aaa\"], views = [150,250,350,250,150]",
        "output": "[['bob', 'bbb']]"
      },
      {
        "input": "creators = [\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"c\"], ids = [\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\"], views = [100,200,150,300,400,400,500,600]",
        "output": "[['b', 'q'], ['c', 't']]"
      },
      {
        "input": "creators = [\"grace\",\"heidi\",\"grace\",\"heidi\",\"grace\",\"heidi\"], ids = [\"film1\",\"film2\",\"film3\",\"film4\",\"film5\",\"film6\"], views = [500,500,600,600,700,700]",
        "output": "[['grace', 'film5'], ['heidi', 'film6']]"
      },
      {
        "input": "creators = [\"ivan\",\"ivan\",\"ivan\",\"ivan\",\"ivan\",\"ivan\"], ids = [\"m\",\"n\",\"m\",\"n\",\"m\",\"n\"], views = [10,20,10,20,10,20]",
        "output": "[['ivan', 'n']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"chris\",\"chris\",\"bob\"], ids = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], views = [5,10,5,4,3,15]",
        "output": "[['bob', 'six']]"
      },
      {
        "input": "creators = [\"alice\",\"alice\",\"alice\",\"alice\",\"alice\",\"alice\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], views = [100000,99999,99998,99997,99996,99995]",
        "output": "[['alice', 'a']]"
      },
      {
        "input": "creators = [\"nina\",\"nina\",\"nina\",\"nina\",\"nina\",\"nina\",\"nina\"], ids = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"d\"], views = [10,20,30,20,30,40,50]",
        "output": "[['nina', 'd']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"charlie\",\"bob\",\"alice\",\"alice\"], ids = [\"abc\",\"bcd\",\"abc\",\"xyz\",\"bcd\",\"abc\",\"xyz\"], views = [10,20,10,30,20,10,30]",
        "output": "[['alice', 'xyz']]"
      },
      {
        "input": "creators = [\"dave\",\"eve\",\"frank\",\"dave\",\"eve\",\"frank\"], ids = [\"alpha\",\"beta\",\"gamma\",\"alpha\",\"beta\",\"gamma\"], views = [10,20,10,5,25,15]",
        "output": "[['eve', 'beta']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"charlie\"], ids = [\"aaaaa\",\"bbbbb\",\"ccccc\"], views = [100000,100000,100000]",
        "output": "[['alice', 'aaaaa'], ['bob', 'bbbbb'], ['charlie', 'ccccc']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"chris\",\"alice\"], ids = [\"one\",\"two\",\"three\",\"four\",\"five\"], views = [5,10,15,4,10]",
        "output": "[['alice', 'three']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"charlie\",\"alice\",\"bob\",\"charlie\"], ids = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\"], views = [100,100,100,100,100,100]",
        "output": "[['alice', 'abc'], ['bob', 'def'], ['charlie', 'ghi']]"
      },
      {
        "input": "creators = [\"dave\",\"dave\",\"dave\",\"dave\"], ids = [\"abc\",\"abcd\",\"abcde\",\"abcdef\"], views = [100,100,100,100]",
        "output": "[['dave', 'abc']]"
      },
      {
        "input": "creators = [\"isaac\",\"jack\",\"isaac\",\"jack\",\"isaac\",\"jack\"], ids = [\"aaa\",\"bbb\",\"ccc\",\"ddd\",\"eee\",\"fff\"], views = [1,2,1,2,1,2]",
        "output": "[['jack', 'bbb']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"chris\",\"bob\",\"alice\",\"chris\"], ids = [\"one\",\"two\",\"three\",\"four\",\"two\",\"six\",\"seven\"], views = [5,10,5,4,10,15,1]",
        "output": "[['alice', 'six']]"
      },
      {
        "input": "creators = [\"tom\",\"jerry\",\"spike\",\"tom\",\"jerry\",\"spike\"], ids = [\"q\",\"w\",\"e\",\"r\",\"t\",\"y\"], views = [100,200,150,100,200,150]",
        "output": "[['jerry', 't']]"
      },
      {
        "input": "creators = [\"karen\",\"karen\",\"karen\",\"karen\",\"karen\",\"karen\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], views = [1,2,3,4,5,6]",
        "output": "[['karen', 'f']]"
      },
      {
        "input": "creators = [\"anna\",\"anna\",\"anna\",\"anna\"], ids = [\"aaa\",\"bbb\",\"aaa\",\"bbb\"], views = [50,50,50,50]",
        "output": "[['anna', 'aaa']]"
      },
      {
        "input": "creators = [\"leo\",\"leo\",\"leo\",\"leo\",\"leo\"], ids = [\"z\",\"y\",\"x\",\"w\",\"v\"], views = [1000,1000,1000,1000,1000]",
        "output": "[['leo', 'v']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"charlie\",\"bob\",\"alice\",\"alice\"], ids = [\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\"], views = [10,20,10,30,20,10,10]",
        "output": "[['alice', 'x'], ['bob', 'y']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"charlie\",\"bob\",\"alice\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], views = [0,0,0,0,0,0]",
        "output": "[['alice', 'a'], ['bob', 'b'], ['charlie', 'd']]"
      },
      {
        "input": "creators = [\"anna\",\"bob\",\"charlie\",\"anna\",\"bob\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\"], views = [100,200,300,50,200]",
        "output": "[['bob', 'b']]"
      },
      {
        "input": "creators = [\"tom\",\"ulysses\",\"tom\",\"ulysses\",\"tom\",\"ulysses\"], ids = [\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"], views = [1000,2000,3000,4000,5000,6000]",
        "output": "[['ulysses', 'world']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"charlie\",\"alice\",\"bob\",\"charlie\"], ids = [\"aaa\",\"bbb\",\"ccc\",\"ddd\",\"eee\",\"fff\"], views = [1,1,1,1,1,1]",
        "output": "[['alice', 'aaa'], ['bob', 'bbb'], ['charlie', 'ccc']]"
      },
      {
        "input": "creators = [\"anna\",\"anna\",\"bob\",\"bob\",\"charlie\",\"charlie\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], views = [5,15,10,20,25,30]",
        "output": "[['charlie', 'f']]"
      },
      {
        "input": "creators = [\"nina\",\"nina\",\"nina\",\"nina\",\"nina\",\"nina\",\"nina\",\"nina\",\"nina\",\"nina\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"], views = [10,20,10,20,10,20,10,20,10,20]",
        "output": "[['nina', 'b']]"
      },
      {
        "input": "creators = [\"anna\",\"anna\",\"anna\",\"anna\"], ids = [\"aaa\",\"aab\",\"aac\",\"aad\"], views = [5,5,5,5]",
        "output": "[['anna', 'aaa']]"
      },
      {
        "input": "creators = [\"peter\",\"peter\",\"peter\",\"peter\",\"peter\"], ids = [\"video1\",\"video2\",\"video3\",\"video4\",\"video5\"], views = [500,1000,1000,500,250]",
        "output": "[['peter', 'video2']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"bob\",\"alice\",\"bob\"], ids = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"], views = [10,20,20,10,30,30]",
        "output": "[['alice', 'c'], ['bob', 'c']]"
      },
      {
        "input": "creators = [\"alice\",\"alice\",\"bob\",\"bob\",\"alice\",\"bob\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], views = [10,20,30,30,40,10]",
        "output": "[['alice', 'e'], ['bob', 'c']]"
      },
      {
        "input": "creators = [\"dave\",\"dave\",\"dave\",\"dave\"], ids = [\"aaa\",\"aab\",\"aac\",\"aad\"], views = [1000,1000,1000,1000]",
        "output": "[['dave', 'aaa']]"
      },
      {
        "input": "creators = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\"], ids = [\"id1\",\"id1\",\"id2\",\"id2\",\"id2\"], views = [10,20,10,5,15]",
        "output": "[['alice', 'id1']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"charlie\",\"bob\",\"alice\"], ids = [\"apple\",\"banana\",\"cherry\",\"date\",\"elderberry\",\"fig\"], views = [100,120,100,130,120,100]",
        "output": "[['alice', 'apple']]"
      },
      {
        "input": "creators = [\"leo\",\"mike\",\"leo\",\"mike\",\"leo\",\"mike\",\"leo\",\"mike\"], ids = [\"video1\",\"video2\",\"video3\",\"video4\",\"video5\",\"video6\",\"video7\",\"video8\"], views = [100,200,100,200,100,200,100,200]",
        "output": "[['mike', 'video2']]"
      },
      {
        "input": "creators = [\"james\",\"james\",\"james\",\"james\",\"james\",\"james\",\"james\"], ids = [\"v1\",\"v1\",\"v1\",\"v1\",\"v1\",\"v1\",\"v1\"], views = [1000,2000,3000,4000,5000,6000,7000]",
        "output": "[['james', 'v1']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"charlie\",\"bob\",\"anna\",\"charlie\",\"anna\",\"bob\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"], views = [100,200,300,200,100,300,100,200]",
        "output": "[['bob', 'b'], ['charlie', 'c']]"
      },
      {
        "input": "creators = [\"alice\",\"alice\",\"bob\",\"bob\",\"bob\"], ids = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\"], views = [50,50,60,60,60]",
        "output": "[['bob', 'ghi']]"
      },
      {
        "input": "creators = [\"grace\",\"heidi\",\"grace\",\"heidi\",\"grace\"], ids = [\"alpha\",\"beta\",\"gamma\",\"delta\",\"epsilon\"], views = [500,500,400,300,500]",
        "output": "[['grace', 'alpha']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"bob\",\"alice\",\"chris\"], ids = [\"a\",\"b\",\"c\",\"a\",\"d\"], views = [10,20,20,30,5]",
        "output": "[['alice', 'a'], ['bob', 'b']]"
      },
      {
        "input": "creators = [\"dave\",\"eve\",\"dave\",\"eve\",\"dave\"], ids = [\"movie\",\"movie\",\"series\",\"series\",\"episode\"], views = [100,100,200,200,50]",
        "output": "[['dave', 'series']]"
      },
      {
        "input": "creators = [\"eve\",\"eve\",\"eve\",\"eve\",\"eve\",\"eve\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], views = [5,10,15,20,25,30]",
        "output": "[['eve', 'f']]"
      },
      {
        "input": "creators = [\"karen\",\"leo\",\"mike\",\"leo\",\"karen\",\"mike\"], ids = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], views = [30,40,30,40,30,40]",
        "output": "[['leo', 'b']]"
      },
      {
        "input": "creators = [\"eve\",\"eve\",\"eve\",\"eve\",\"eve\"], ids = [\"x\",\"y\",\"z\",\"x\",\"y\"], views = [10,20,30,10,20]",
        "output": "[['eve', 'z']]"
      },
      {
        "input": "creators = [\"jane\",\"jane\",\"jane\",\"jane\",\"jane\",\"jane\"], ids = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], views = [10,10,10,10,10,10]",
        "output": "[['jane', 'five']]"
      },
      {
        "input": "creators = [\"dave\",\"eve\",\"frank\",\"dave\",\"eve\",\"frank\"], ids = [\"m\",\"n\",\"o\",\"p\",\"q\",\"r\"], views = [100,200,150,250,175,225]",
        "output": "[['eve', 'n'], ['frank', 'r']]"
      },
      {
        "input": "creators = [\"eve\",\"eve\",\"eve\",\"eve\",\"eve\"], ids = [\"x\",\"y\",\"z\",\"x\",\"y\"], views = [10,20,10,20,10]",
        "output": "[['eve', 'x']]"
      },
      {
        "input": "creators = [\"creator1\",\"creator2\",\"creator1\",\"creator2\",\"creator3\"], ids = [\"video1\",\"video2\",\"video3\",\"video4\",\"video5\"], views = [100000,100000,100000,100000,100000]",
        "output": "[['creator1', 'video1'], ['creator2', 'video2']]"
      },
      {
        "input": "creators = [\"anna\",\"anna\",\"anna\",\"bob\",\"bob\"], ids = [\"a\",\"b\",\"c\",\"a\",\"b\"], views = [100,100,150,200,200]",
        "output": "[['bob', 'a']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"charlie\",\"bob\",\"alice\",\"alice\"], ids = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\"], views = [5,10,5,4,10,5,10]",
        "output": "[['alice', 'seven']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"bob\",\"alice\"], ids = [\"x\",\"y\",\"z\",\"x\",\"y\"], views = [10,20,10,20,30]",
        "output": "[['alice', 'y']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"bob\",\"alice\",\"bob\",\"alice\",\"bob\"], ids = [\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"], views = [1,2,3,4,5,6,7,8]",
        "output": "[['bob', 'a']]"
      },
      {
        "input": "creators = [\"mike\",\"mike\",\"mike\",\"mike\",\"mike\",\"mike\"], ids = [\"same\",\"same\",\"same\",\"same\",\"same\",\"same\"], views = [5,5,5,5,5,5]",
        "output": "[['mike', 'same']]"
      },
      {
        "input": "creators = [\"x\",\"y\",\"z\",\"x\",\"y\",\"z\"], ids = [\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"], views = [10,10,10,20,20,20]",
        "output": "[['x', 'a'], ['y', 'b'], ['z', 'c']]"
      },
      {
        "input": "creators = [\"peter\",\"quinn\",\"peter\",\"quinn\",\"peter\",\"quinn\"], ids = [\"zero\",\"one\",\"zero\",\"one\",\"zero\",\"one\"], views = [500,600,700,800,900,1000]",
        "output": "[['quinn', 'one']]"
      },
      {
        "input": "creators = [\"anna\",\"anna\",\"anna\",\"anna\",\"anna\"], ids = [\"z\",\"y\",\"x\",\"w\",\"v\"], views = [5,5,5,5,5]",
        "output": "[['anna', 'v']]"
      },
      {
        "input": "creators = [\"anna\",\"bob\",\"charlie\",\"anna\",\"bob\",\"anna\"], ids = [\"x\",\"y\",\"z\",\"x\",\"y\",\"z\"], views = [100,200,300,150,250,50]",
        "output": "[['bob', 'y']]"
      },
      {
        "input": "creators = [\"z\",\"z\",\"z\",\"y\",\"y\",\"y\",\"x\",\"x\",\"x\"], ids = [\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"], views = [100,200,150,300,400,400,500,600,650]",
        "output": "[['x', 'c']]"
      },
      {
        "input": "creators = [\"alice\",\"bob\",\"alice\",\"charlie\",\"bob\",\"alice\"], ids = [\"abc\",\"bcd\",\"cba\",\"xyz\",\"zyx\",\"bac\"], views = [50,75,50,100,75,50]",
        "output": "[['alice', 'abc'], ['bob', 'bcd']]"
      }
    ]
  },
  {
    "id": 1508,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "You are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.\nReturn the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 109 + 7.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,3,4], n = 4, left = 1, right = 5\nOutput: 13 \nExplanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. \n\nExample 2:\n\nInput: nums = [1,2,3,4], n = 4, left = 3, right = 4\nOutput: 6\nExplanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.\n\nExample 3:\n\nInput: nums = [1,2,3,4], n = 4, left = 1, right = 10\nOutput: 50\n\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= nums.length <= 1000\n1 <= nums[i] <= 100\n1 <= left <= right <= n * (n + 1) / 2\n\n",
    "starterCode": "class Solution:\n    def rangeSum(self, nums: List[int], n: int, left: int, right: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,2,3,4], n = 4, left = 3, right = 4",
        "output": "6"
      },
      {
        "input": "nums = [10,20,30], n = 3, left = 1, right = 3",
        "output": "60"
      },
      {
        "input": "nums = [5,1,2], n = 3, left = 1, right = 4",
        "output": "11"
      },
      {
        "input": "nums = [1,2,3,4], n = 4, left = 1, right = 5",
        "output": "13"
      },
      {
        "input": "nums = [3,3,3,3], n = 4, left = 2, right = 8",
        "output": "36"
      },
      {
        "input": "nums = [1,2,3,4], n = 4, left = 1, right = 10",
        "output": "50"
      },
      {
        "input": "nums = [3,3,3], n = 3, left = 2, right = 5",
        "output": "18"
      },
      {
        "input": "nums = [5,2,1,4], n = 4, left = 3, right = 7",
        "output": "24"
      },
      {
        "input": "nums = [10,20,30], n = 3, left = 2, right = 5",
        "output": "130"
      },
      {
        "input": "nums = [5,1,4], n = 3, left = 1, right = 6",
        "output": "31"
      },
      {
        "input": "nums = [5,1,2,3], n = 4, left = 2, right = 6",
        "output": "18"
      },
      {
        "input": "nums = [10,20,30], n = 3, left = 1, right = 5",
        "output": "140"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155], n = 15, left = 60, right = 120",
        "output": "46215"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], n = 10, left = 25, right = 50",
        "output": "756"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], n = 10, left = 20, right = 30",
        "output": "36"
      },
      {
        "input": "nums = [5, 15, 10, 20, 25], n = 5, left = 1, right = 15",
        "output": "520"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29], n = 10, left = 25, right = 55",
        "output": "2334"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], n = 10, left = 15, right = 45",
        "output": "6700"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], n = 10, left = 25, right = 75",
        "output": "10110"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], n = 5, left = 10, right = 20",
        "output": "6900"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], n = 10, left = 1, right = 100",
        "output": "2200"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10], n = 5, left = 5, right = 15",
        "output": "960"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5], n = 11, left = 15, right = 45",
        "output": "460"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], n = 20, left = 100, right = 200",
        "output": "11368"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], n = 15, left = 50, right = 100",
        "output": "5098"
      },
      {
        "input": "nums = [23, 34, 45, 56, 67, 78, 89, 90, 100, 110], n = 10, left = 25, right = 60",
        "output": "12693"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], n = 9, left = 25, right = 35",
        "output": "250"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], n = 5, left = 3, right = 12",
        "output": "610"
      },
      {
        "input": "nums = [5, 15, 10, 20], n = 4, left = 5, right = 12",
        "output": "200"
      },
      {
        "input": "nums = [31,28,31,30,31,30,31,31,30,31,30,31], n = 12, left = 30, right = 75",
        "output": "8471"
      },
      {
        "input": "nums = [30, 20, 10, 40, 50, 60, 70, 80, 90, 100], n = 10, left = 25, right = 75",
        "output": "9910"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13], n = 7, left = 1, right = 28",
        "output": "588"
      },
      {
        "input": "nums = [9,7,5,3,1], n = 5, left = 6, right = 16",
        "output": "155"
      },
      {
        "input": "nums = [5,6,7,8,9], n = 5, left = 3, right = 7",
        "output": "48"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], n = 10, left = 1, right = 55",
        "output": "220"
      },
      {
        "input": "nums = [5,1,7,3,8], n = 5, left = 3, right = 7",
        "output": "34"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], n = 10, left = 15, right = 40",
        "output": "497"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6], n = 10, left = 1, right = 100",
        "output": "1210"
      },
      {
        "input": "nums = [99, 100, 98, 97, 96], n = 5, left = 10, right = 20",
        "output": "2158"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], n = 15, left = 50, right = 150",
        "output": "9416"
      },
      {
        "input": "nums = [42,53,64,75,86,97,108,119,130,141], n = 10, left = 15, right = 45",
        "output": "11216"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], n = 10, left = 30, right = 70",
        "output": "9190"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], n = 10, left = 30, right = 50",
        "output": "664"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], n = 20, left = 150, right = 250",
        "output": "46005"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], n = 11, left = 20, right = 40",
        "output": "310"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], n = 10, left = 25, right = 50",
        "output": "7560"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], n = 5, left = 1, right = 15",
        "output": "10500"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], n = 10, left = 10, right = 30",
        "output": "496"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], n = 10, left = 50, right = 100",
        "output": "30000"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5], n = 5, left = 1, right = 15",
        "output": "245"
      },
      {
        "input": "nums = [9, 18, 27, 36, 45, 54], n = 6, left = 10, right = 20",
        "output": "1260"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], n = 10, left = 15, right = 30",
        "output": "46"
      },
      {
        "input": "nums = [100,200,300,400,500,600], n = 6, left = 10, right = 30",
        "output": "16100"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], n = 10, left = 20, right = 40",
        "output": "44500"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7], n = 10, left = 50, right = 75",
        "output": "364"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n = 10, left = 30, right = 50",
        "output": "664"
      },
      {
        "input": "nums = [7, 3, 8, 6, 2, 5, 4, 9, 1], n = 9, left = 20, right = 40",
        "output": "480"
      },
      {
        "input": "nums = [99, 98, 97, 96, 95, 94], n = 6, left = 20, right = 30",
        "output": "1064"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], n = 20, left = 150, right = 250",
        "output": "9201"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91], n = 10, left = 10, right = 30",
        "output": "5233"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], n = 15, left = 50, right = 60",
        "output": "379"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], n = 10, left = 20, right = 50",
        "output": "1036"
      },
      {
        "input": "nums = [10,20,30,40,50,60], n = 6, left = 10, right = 20",
        "output": "1400"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], n = 10, left = 25, right = 35",
        "output": "421"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], n = 5, left = 1, right = 25",
        "output": "1050"
      },
      {
        "input": "nums = [34, 78, 12, 56, 90, 23, 45, 67, 89, 10], n = 10, left = 30, right = 60",
        "output": "8474"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60], n = 6, left = 10, right = 20",
        "output": "1400"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], n = 11, left = 5, right = 20",
        "output": "95"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], n = 10, left = 1, right = 100",
        "output": "2200"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], n = 10, left = 30, right = 40",
        "output": "2810"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], n = 10, left = 30, right = 45",
        "output": "908"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10], n = 10, left = 55, right = 85",
        "output": "550"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10], n = 5, left = 10, right = 20",
        "output": "690"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1], n = 5, left = 8, right = 12",
        "output": "68"
      },
      {
        "input": "nums = [7, 6, 5, 4, 3, 2, 1], n = 7, left = 15, right = 25",
        "output": "179"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], n = 15, left = 100, right = 200",
        "output": "2074"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10], n = 5, left = 1, right = 15",
        "output": "1050"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], n = 15, left = 50, right = 100",
        "output": "2715"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], n = 10, left = 45, right = 75",
        "output": "5010"
      },
      {
        "input": "nums = [9,3,5,7,2,8], n = 6, left = 4, right = 12",
        "output": "89"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], n = 10, left = 25, right = 50",
        "output": "133"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,20], n = 20, left = 50, right = 150",
        "output": "6400"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], n = 20, left = 100, right = 150",
        "output": "8103"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45], n = 5, left = 7, right = 14",
        "output": "610"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], n = 20, left = 50, right = 100",
        "output": "232"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], n = 5, left = 1, right = 15",
        "output": "105"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5], n = 10, left = 25, right = 50",
        "output": "410"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], n = 10, left = 55, right = 75",
        "output": "550"
      },
      {
        "input": "nums = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], n = 10, left = 5, right = 55",
        "output": "21600"
      },
      {
        "input": "nums = [5,15,25,35,45], n = 5, left = 5, right = 15",
        "output": "810"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], n = 15, left = 50, right = 100",
        "output": "5098"
      },
      {
        "input": "nums = [8,6,4,2,0,8,6,4,2,0], n = 10, left = 20, right = 40",
        "output": "344"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], n = 9, left = 10, right = 30",
        "output": "291"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], n = 10, left = 25, right = 45",
        "output": "97"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60], n = 12, left = 50, right = 75",
        "output": "6660"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 55, 65], n = 7, left = 15, right = 25",
        "output": "1585"
      },
      {
        "input": "nums = [5,15,10,20,25], n = 5, left = 4, right = 10",
        "output": "195"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10, 5, 2, 1], n = 8, left = 10, right = 35",
        "output": "2000"
      },
      {
        "input": "nums = [100, 100, 100, 100, 100, 100], n = 6, left = 20, right = 30",
        "output": "1100"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], n = 15, left = 50, right = 100",
        "output": "5430"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], n = 15, left = 100, right = 150",
        "output": "2074"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], n = 10, left = 5, right = 20",
        "output": "27"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84], n = 12, left = 40, right = 80",
        "output": "13083"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91], n = 10, left = 5, right = 15",
        "output": "1520"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], n = 20, left = 120, right = 200",
        "output": "19092"
      }
    ]
  },
  {
    "id": 445,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Linked List",
      "Math"
    ],
    "problemDescription": "You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\u00a0\nExample 1:\n\n\nInput: l1 = [7,2,4,3], l2 = [5,6,4]\nOutput: [7,8,0,7]\n\nExample 2:\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [8,0,7]\n\nExample 3:\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\n\u00a0\nConstraints:\n\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.\n\n\u00a0\nFollow up:\u00a0Could you solve it without reversing the input lists?\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "l1 = [1], l2 = [9,9,9]",
        "output": "[1, 0, 0, 0]"
      },
      {
        "input": "l1 = [1,2,3], l2 = [9,8,7]",
        "output": "[1, 1, 1, 0]"
      },
      {
        "input": "l1 = [7,2,4,3], l2 = [5,6,4]",
        "output": "[7, 8, 0, 7]"
      },
      {
        "input": "l1 = [2,4,3], l2 = [5,6,4]",
        "output": "[8, 0, 7]"
      },
      {
        "input": "l1 = [0], l2 = [0]",
        "output": "[0]"
      },
      {
        "input": "l1 = [5], l2 = [5]",
        "output": "[1, 0]"
      },
      {
        "input": "l1 = [9,9,9], l2 = [1]",
        "output": "[1, 0, 0, 0]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5]",
        "output": "[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [5,6,4]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 5]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], l2 = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "l1 = [5], l2 = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 0]"
      },
      {
        "input": "l1 = [1,2,3], l2 = [4,5,6,7,8,9]",
        "output": "[4, 5, 6, 9, 1, 2]"
      },
      {
        "input": "l1 = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0], l2 = [1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1]"
      },
      {
        "input": "l1 = [1], l2 = [1,2,3,4,5,6,7,8,9]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 9, 0]"
      },
      {
        "input": "l1 = [9,9,9,9], l2 = [1,1,1,1]",
        "output": "[1, 1, 1, 1, 0]"
      },
      {
        "input": "l1 = [3,2,1], l2 = [6,5,4,3,2,1]",
        "output": "[6, 5, 4, 6, 4, 2]"
      },
      {
        "input": "l1 = [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6], l2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], l2 = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "l1 = [9,0,9], l2 = [1,0,1]",
        "output": "[1, 0, 1, 0]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6]",
        "output": "[6, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 7]"
      },
      {
        "input": "l1 = [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], l2 = [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [2,3,5,7,11,13,17,19], l2 = [23,29,31,37,41,43,47,53]",
        "output": "[2, 8, 6, 0, 9, 8, 3, 1, 2]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [9,9,9], l2 = [1,0,0,0]",
        "output": "[1, 9, 9, 9]"
      },
      {
        "input": "l1 = [1,2,3,4,5], l2 = [6,7,8,9,0]",
        "output": "[8, 0, 2, 3, 5]"
      },
      {
        "input": "l1 = [9,9,9,9,9], l2 = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 2, 1, 1, 1, 1, 0]"
      },
      {
        "input": "l1 = [1], l2 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2], l2 = [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2]",
        "output": "[4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]"
      },
      {
        "input": "l1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], l2 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]",
        "output": "[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]"
      },
      {
        "input": "l1 = [1,2,3,4,5], l2 = [6,7,8,9,0,1]",
        "output": "[6, 9, 1, 2, 4, 6]"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9], l2 = [1]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9,9,9,9]",
        "output": "[1, 9, 9, 9, 9, 9, 9, 8]"
      },
      {
        "input": "l1 = [1], l2 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9], l2 = [1]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9], l2 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8]"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9], l2 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8]"
      },
      {
        "input": "l1 = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9], l2 = [9,8,7,6,5,4,3,2,1,0,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "l1 = [1,2,3], l2 = [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[4, 5, 6, 7, 9, 0, 1, 2, 3, 4, 5, 6, 7, 9, 0, 1, 2, 3, 4, 5, 6, 7, 9, 0, 2, 4, 3]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9], l2 = [1]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [1,0,1,0,1,0,1,0,1,0], l2 = [9,0,9,0,9,0,9,0,9,0]",
        "output": "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0]"
      },
      {
        "input": "l1 = [1], l2 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [5,4,3,2,1], l2 = [1,2,3,4,5]",
        "output": "[6, 6, 6, 6, 6]"
      },
      {
        "input": "l1 = [1,2,3,4,5], l2 = [9,8,7,6,5,4,3,2,1]",
        "output": "[9, 8, 7, 6, 6, 6, 6, 6, 6]"
      },
      {
        "input": "l1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], l2 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]",
        "output": "[8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9], l2 = [1]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9], l2 = [1]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [1], l2 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0], l2 = [1]",
        "output": "[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]",
        "output": "[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]"
      },
      {
        "input": "l1 = [9,9], l2 = [1,1,1]",
        "output": "[2, 1, 0]"
      },
      {
        "input": "l1 = [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0], l2 = [9,8,7,6,5,4,3,2,1,0,9,8,7,6,5,4,3,2,1,0]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0]"
      },
      {
        "input": "l1 = [9,9,9], l2 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]",
        "output": "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]"
      },
      {
        "input": "l1 = [1,2,3,4,5], l2 = [5,4,3,2,1,0,9,8,7,6,5,4,3,2,1,0,9,8,7,6,5,4,3,2,1]",
        "output": "[5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 6, 6, 6, 6, 6]"
      },
      {
        "input": "l1 = [1,2,3,4,5,6,7,8,9], l2 = [9,8,7,6,5,4,3,2,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "l1 = [1,2,3,4,5,6,7,8,9,0], l2 = [1,2,3,4,5,6,7,8,9,0]",
        "output": "[2, 4, 6, 9, 1, 3, 5, 7, 8, 0]"
      }
    ]
  },
  {
    "id": 314,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Hash Table",
      "Binary Tree",
      "Sorting"
    ],
    "problemDescription": "Given the root of a binary tree, return the vertical order traversal of its nodes' values. (i.e., from top to bottom, column by column).\nIf two nodes are in the same row and column, the order should be from left to right.\n\u00a0\nExample 1:\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]\n\nExample 2:\n\n\nInput: root = [3,9,8,4,0,1,7]\nOutput: [[4],[9],[3,0,1],[8],[7]]\n\nExample 3:\n\n\nInput: root = [1,2,3,4,10,9,11,null,5,null,null,null,null,null,null,null,6]\nOutput: [[4],[2,5],[1,10,9,6],[3],[11]]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "root = [1,null,2,null,3,null,4,null,5]",
        "output": "[[1], [2], [3], [4], [5]]"
      },
      {
        "input": "root = [1,3,2,5,3,null,9]",
        "output": "[[5], [3], [1, 3], [2], [9]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[[8], [4], [2, 9, 10, 12], [1, 5, 6], [3, 11, 13, 14], [7], [15]]"
      },
      {
        "input": "root = [0,2,1,3,null,null,null,4,5,null,7,6,null,10,8,11,9]",
        "output": "[[4, 10, 11], [3, 7, 6], [2, 5, 8, 9], [0], [1]]"
      },
      {
        "input": "root = [3,9,8,4,0,1,7]",
        "output": "[[4], [9], [3, 0, 1], [8], [7]]"
      },
      {
        "input": "root = [1,2,3,4,10,9,11,null,5,null,null,null,null,null,null,null,6]",
        "output": "[[4], [2, 5], [1, 10, 9, 6], [3], [11]]"
      },
      {
        "input": "root = [0]",
        "output": "[[0]]"
      },
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "[[9], [3, 15], [20], [7]]"
      },
      {
        "input": "root = [1]",
        "output": "[[1]]"
      },
      {
        "input": "root = []",
        "output": "[]"
      },
      {
        "input": "root = [7,3,15,1,5,9,20,0,2,4,6,8,12,18,22,null,null,null,null,null,null,null,3,11,13,null,14,null,null,null,null,10,null,null,null,null,null,null,null,null,null,16,17,null,null,null,null,19,null,null,null,null,null,21,null,null,null,null,null,null,null,null,23,null,null,null,null,null,null,24,null,null,null,null,null,25,null,null,null,null,null,null,null,null,null,null,null,null,26]",
        "output": "[[0], [1, 11], [3, 2, 4, 8], [7, 5, 9, 13], [15, 6, 12, 18, 10], [20, 3, 14], [22]]"
      },
      {
        "input": "root = [10,-5,-3,9,1,null,-2,7,3,null,-4,null,null,null,null,null,null]",
        "output": "[[7], [9], [-5, 3], [10, 1], [-3, -4], [-2]]"
      },
      {
        "input": "root = [15,8,21,7,11,18,24,6,9,12,17,20,23,5,8,10,13,16,19,22,25,null,4,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2]",
        "output": "[[10], [6], [7, 13, 16, 22], [8, 9, 12, 20], [15, 11, 18, 19, 25], [21, 17, 23, 5], [24, 4], [8]]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,18,23,27,32,38,null,4,6,8,11,13,17,19,22,24,26,28,30,31,33,36,39,null,1,3,9,14,16,21,29,34,37,null,null,3,14,18,20,25,27,31,35,38,null,null,5,10,12,13,17,19,23,26,28,32,34,36,39,null,null,6,7,8,9,11,15,16,21,22,24,29,30,33,37,null,null,null,null,21,22,null,null,null,null,null,null,null,null,null,null,null,34,37,null,null,null,null]",
        "output": "[[23, 28, 7, 37], [2, 39, 1, 16, 14], [5, 4, 6, 11, 22, 26, 32, 34, 39, 8, 9, 15, 24], [10, 7, 12, 23, 3, 9, 21, 29, 37, 18, 20, 27], [20, 15, 25, 8, 13, 17, 24, 26, 30, 36, 11, 16, 21, 29, 21, 22], [30, 18, 27, 32, 14, 34, 25, 31, 35, 5, 12], [35, 19, 28, 31, 33, 6, 22, 30, 34], [38, 3, 38, 10, 13, 17], [36, 33, 37], [19]]"
      },
      {
        "input": "root = [8,5,9,3,6,10,15,1,4,7,11,13,16,null,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12,14,17,18]",
        "output": "[[1], [3], [5, 4, 7, 13], [8, 6, 10], [9, 11, 16], [15], [2]]"
      },
      {
        "input": "root = [7,3,15,2,5,null,16,1,4,6,8,null,null,null,null,null,17]",
        "output": "[[1], [2], [3, 4, 6], [7, 5, 17], [15, 8], [16]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "[[32], [16], [8, 33, 34, 36, 40], [4, 17, 18, 20, 24], [2, 9, 10, 12, 35, 37, 38], [1, 5, 6, 19, 21, 22, 25, 26, 28], [3, 11, 13, 14, 39], [7, 23, 27, 29, 30], [15], [31]]"
      },
      {
        "input": "root = [5,3,6,2,4,null,7,1,null,null,null,8,null,9,null,null,10,null,11,null,null,null,null,null,null,null,null,null,12]",
        "output": "[[9], [1, 11], [2], [3], [5, 4], [6, 8], [7, 10]]"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,40,60,90,110,140,160,190,5,15,35,45,55,65,85,95,105,115,135,145,155,165,185,195,3,7,13,23,37,43,47,53,57,63,67,73,77,83,87,93,97,103,107,113,117,123,127,133,137,143,147,153,157,163,167,173,177,183,187,193,197]",
        "output": "[[177], [3], [5, 183, 187, 197], [10, 7, 13, 37, 57, 97], [25, 15, 35, 55, 105, 193], [50, 40, 60, 110, 23, 43, 47, 63, 67, 77, 103, 107, 117, 137], [100, 75, 125, 45, 65, 85, 115, 135, 155], [150, 90, 140, 160, 53, 73, 83, 87, 113, 123, 127, 143, 147, 157], [175, 95, 145, 165, 185], [190, 93, 133, 153, 163, 167], [195], [173]]"
      },
      {
        "input": "root = [15,7,20,3,11,17,23,2,5,9,13,16,18,22,24,1,4,6,8,10,12,14,19,21,25,27,3,28,29,30]",
        "output": "[[1], [2], [3, 4, 6, 10, 21], [7, 5, 9, 16], [15, 11, 17, 8, 12, 14, 25, 27, 28], [20, 13, 18, 22], [23, 19, 3, 29, 30], [24]]"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,null,6,null,11,14,null,null,12]",
        "output": "[[12], [1], [3], [5, 6, 11], [10, 7, 13], [15, 14], [18]]"
      },
      {
        "input": "root = [50,30,70,20,40,60,80,10,null,null,25,35,55,65,75,5,15,null,null,null,22,28,null,null,32,38,52,58,null,null,null,62,68,72,78,null,null,85,null,90,null,null,null,null,null,null,null,null,95]",
        "output": "[[58], [5], [10], [20, 15], [30, 35, 62, 72], [50, 40, 60, 22, 28, 95], [70, 25, 55, 65, 68, 78, 85], [80, 32, 38], [75, 90], [52]]"
      },
      {
        "input": "root = [6,2,8,0,4,7,9,null,null,3,5]",
        "output": "[[0], [2, 3], [6, 4, 7], [8, 5], [9]]"
      },
      {
        "input": "root = [8,5,9,4,6,10,11,3,7,12,13,14,15,16,17]",
        "output": "[[3], [4], [5, 7, 12, 14], [8, 6, 10], [9, 13, 15, 16], [11], [17]]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,7,null,12,null,22,27,40,null,3,6,8,9,11,13,14,18,19,21,23,26,28,29,31,32,33,34,36,37,38,39,41,42,43,44,45,46,47,48,49]",
        "output": "[[1, 26, 29], [5, 3, 6], [10, 7, 28, 31, 32, 34, 39, 44], [20, 15, 25, 8, 9, 13, 18], [30, 12, 22, 27, 33, 36, 37, 41, 42, 45, 46, 48], [35, 11, 14, 19, 21], [40, 38, 43, 47, 49], [23]]"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15]",
        "output": "[[1], [2], [4, 3, 5, 9], [8, 6, 10], [12, 7, 11, 13], [14], [15]]"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,5,12,18,22,28,32,38,45]",
        "output": "[[5], [10], [15, 12, 18, 28], [25, 20, 30], [35, 22, 32, 38], [40], [45]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,null,null,8,9,10,11,12,null,13,14,15]",
        "output": "[[4], [2], [1, 5, 6, 11], [3, 8, 9], [7, 12, 13, 14], [10], [15]]"
      },
      {
        "input": "root = [12,7,20,3,9,15,23,1,5,8,11,13,18,21,24,null,2,4,6,null,10,null,null,null,null,null,14,16,null,17,19,22,null,null,25,null,null,null,null,null,26]",
        "output": "[[1, 22], [3, 2, 4], [7, 5, 8, 13, 25], [12, 9, 15, 6, 10, 16], [20, 11, 18, 21], [23, 14, 17], [24, 26], [19]]"
      },
      {
        "input": "root = [6,2,8,0,4,7,9,null,3,5,null,null,null,null,null,null,null]",
        "output": "[[0], [2, 3, 5], [6, 4, 7], [8], [9]]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,18,23,27,32,38,1,3,6,8,11,13,17,19,22,26,28,31,33,37,39,40]",
        "output": "[[1], [2], [5, 3, 6, 11, 22], [10, 7, 12, 23], [20, 15, 25, 8, 13, 17, 26, 28, 33], [30, 18, 27, 32], [35, 19, 31, 37, 39], [38], [40]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]",
        "output": "[[16], [8], [4, 17, 18, 20, 24], [2, 9, 10, 12], [1, 5, 6, 19, 21, 22, 25, 26, 28], [3, 11, 13, 14], [7, 23, 27, 29, 30], [15], [31]]"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,5,12,null,18,27,32,null,11,14,17,19,23,26,29,31,33,34,36,37,38,39]",
        "output": "[[39], [14], [5], [10, 17, 19, 31], [15, 12, 27], [25, 20, 30, 23, 26, 33, 34], [35, 18, 32], [40, 29, 36, 37], [11], [38]]"
      },
      {
        "input": "root = [5,4,8,11,null,17,4,7,1,null,null,null,5,3]",
        "output": "[[3], [7], [11], [4, 1], [5, 17], [8], [4], [5]]"
      },
      {
        "input": "root = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "[[31], [15], [7, 32, 33, 35, 39, 47], [3, 16, 17, 19, 23], [1, 8, 9, 11, 34, 36, 37, 40, 41, 43, 48, 49], [0, 4, 5, 18, 20, 21, 24, 25, 27], [2, 10, 12, 13, 38, 42, 44, 45, 50], [6, 22, 26, 28, 29], [14, 46], [30]]"
      },
      {
        "input": "root = [7,3,15,1,5,9,20,null,null,4,6,8,12,17,22]",
        "output": "[[1], [3, 4, 8], [7, 5, 9], [15, 6, 12, 17], [20], [22]]"
      },
      {
        "input": "root = [3,2,3,null,3,null,1,5,4,null,7,2,null,null,9,6,10]",
        "output": "[[2], [2, 5], [3, 3], [3, 4], [1, 9, 6], [7], [10]]"
      },
      {
        "input": "root = [5,3,6,2,4,null,7,1,null,null,null,8,9]",
        "output": "[[1], [2], [3], [5, 4], [6, 8], [7], [9]]"
      },
      {
        "input": "root = [3,9,8,4,0,1,7,null,null,null,2,5,null,null,6,null,null,null,null,null,null,null,null,10,11]",
        "output": "[[4], [9, 5], [3, 0, 1], [8, 2], [7], [6]]"
      },
      {
        "input": "root = [12,6,18,3,9,15,21,1,5,7,11,13,17,19,23]",
        "output": "[[1], [3], [6, 5, 7, 13], [12, 9, 15], [18, 11, 17, 19], [21], [23]]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,8,17,20,16,null,null,null,null,null,null,null,null,null,null,null,null,19]",
        "output": "[[16], [1], [3], [5, 6], [10, 7], [15, 8, 17], [18], [20]]"
      },
      {
        "input": "root = [8,5,9,4,6,10,11,3,7,null,null,null,null,12,null,null,null,null,13,null,14,null,null,null,null,15,null,null,null,null,null,null,null,null,16]",
        "output": "[[3], [4], [5, 7], [8, 6, 10, 13], [9, 12], [11, 14]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[[16], [8], [4, 17, 18, 20, 24], [2, 9, 10, 12], [1, 5, 6, 19, 21, 22, 25, 26, 28], [3, 11, 13, 14], [7, 23, 27, 29, 30], [15]]"
      },
      {
        "input": "root = [15,7,23,3,11,19,29,1,5,9,13,17,21,25,27,31,33,35,37]",
        "output": "[[31], [1], [3, 33, 35], [7, 5, 9, 17], [15, 11, 19, 37], [23, 13, 21, 25], [29], [27]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,16,null,null,null,17,null,null,null,null,18,null,null,null,null,19,null,20,null,null,null,null,null,null,null,21,null,null,null,null,null,null,null,22]",
        "output": "[[8], [4], [2, 9, 10, 12], [1, 5, 6, 16, 17], [3, 11, 13, 14, 19], [7, 18], [15, 20]]"
      },
      {
        "input": "root = [10,-5,15,-8,-3,12,20,-10,1,null,-4,11,16,null,null,13,14]",
        "output": "[[13], [-10], [-8, 14], [-5, 1, 11], [10, -3, 12], [15, -4, 16], [20]]"
      },
      {
        "input": "root = [5,3,8,1,4,7,9,-2,2,3.5,null,null,null,null,null,null,null]",
        "output": "[[-2], [1], [3, 2, 3.5], [5, 4, 7], [8], [9]]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,18,22,27,32,37]",
        "output": "[[2], [5], [10, 7, 12, 22], [20, 15, 25], [30, 18, 27, 32], [35], [37]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "[[16], [8], [4, 17, 18, 20, 24], [2, 9, 10, 12], [1, 5, 6, 19, 21, 22, 25], [3, 11, 13, 14], [7, 23], [15]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "[[32], [16], [8, 33, 34, 36, 40, 48], [4, 17, 18, 20, 24], [2, 9, 10, 12, 35, 37, 38, 41, 42, 44, 49, 50], [1, 5, 6, 19, 21, 22, 25, 26, 28], [3, 11, 13, 14, 39, 43, 45, 46], [7, 23, 27, 29, 30], [15, 47], [31]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,16,null,null,null,17,null,null,null,18,null,null,null,19,null,null,null,null,null,null,20,null,null,null,null,null,null,21,null,null,null,null,null,null,null,null,22,null,null,null,null,null,null,null,null,23,null,null,null,null,null,null,null,null,24,null,null,null,null,null,null,null,null,25]",
        "output": "[[8], [4], [2, 9, 10, 12], [1, 5, 6, 16, 17], [3, 11, 13, 14, 19], [7, 18], [15]]"
      },
      {
        "input": "root = [8,5,12,4,7,10,14,2,null,6,null,9,11,13,null,15,null,null,null,null,null,null,null,16]",
        "output": "[[15], [2], [4], [5, 6, 9], [8, 7, 10, 16], [12, 11, 13], [14]]"
      },
      {
        "input": "root = [5,2,6,1,3,null,8,0,4,9,null,null,null,12]",
        "output": "[[12], [0], [1], [2, 4, 9], [5, 3], [6], [8]]"
      },
      {
        "input": "root = [5,3,6,2,4,null,7,1,null,null,null,null,null,8,9]",
        "output": "[[8], [1], [2, 9], [3], [5, 4], [6], [7]]"
      },
      {
        "input": "root = [10,5,15,null,7,12,20,null,6,8,null,null,18,null,null,null,null,16,17,null,null,null,null,null,null,null,null,null,19,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21,null,null,null,null,22]",
        "output": "[[5, 8], [10, 7, 12], [15, 6], [20, 16], [18], [17]]"
      },
      {
        "input": "root = [10,5,15,3,7,12,18,1,4,6,8,11,13,17,20]",
        "output": "[[1], [3], [5, 4, 6, 11], [10, 7, 12], [15, 8, 13, 17], [18], [20]]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,9,null,null,null,12]",
        "output": "[[1], [3, 12], [5, 6], [10, 7], [15, 9], [18]]"
      },
      {
        "input": "root = [7,3,15,null,null,9,20,8,10,11,12,13,14,16,17,18,19]",
        "output": "[[13], [3, 8], [7, 9, 14, 16, 18], [15, 10, 11], [20, 17, 19], [12]]"
      },
      {
        "input": "root = [10,5,15,3,7,12,20,1,4,6,8,11,13,18,25,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,9,10,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,14,16,17,19,21,22,23,24]",
        "output": "[[1], [3], [5, 4, 6, 11, 10], [10, 7, 12, 2], [15, 8, 13, 18], [20], [25], [9]]"
      },
      {
        "input": "root = [10,5,15,3,7,12,20,1,null,6,8,11,13,18,25]",
        "output": "[[1], [3], [5, 6, 11], [10, 7, 12], [15, 8, 13, 18], [20], [25]]"
      },
      {
        "input": "root = [3,9,8,4,0,1,7,-6,5,2,null,null,null,null,8,10,null,null,null,null,null,null]",
        "output": "[[10], [-6], [4], [9, 5, 2], [3, 0, 1], [8], [7], [8]]"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,5,12,18,22,28,32,38,45,3,7,11,14,16,19,21,23,27,29,31,33,37,39,43,47,null,4,6,8,9,13,15,17,20,24,26,30,34,36,40,42,46,50,2,1,5,10,18,25,35,45,null,null,null,null,null,null,null,null,50,49,48,47,46,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,4,3,2,1]",
        "output": "[[3, 50, 46, 37, 21], [5, 4, 6, 9, 20, 46], [10, 7, 11, 16, 27, 49, 48, 44, 43, 41, 36, 35, 33, 29, 20, 19, 17, 13, 4], [15, 12, 18, 28, 8, 13, 15, 24, 26, 34, 50, 2, 5, 35], [25, 20, 30, 14, 19, 21, 29, 31, 37, 47, 42, 40, 39, 34, 32, 31, 28, 27, 25, 18, 16, 15, 12, 11, 9, 3, 2], [35, 22, 32, 38, 17, 30, 36, 40, 1, 10, 18, 45], [40, 23, 33, 39, 43, 38, 30, 26, 24, 23, 14, 10, 8, 7, 1], [45, 42, 25], [47, 22, 6]]"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,12,null,null,null,16,null,null,null,13,null,null,null,14]",
        "output": "[[16], [9, 12], [3, 15], [20], [7]]"
      },
      {
        "input": "root = [5,2,13,null,3,7,14,1,4,6,8,10,15,null,null,9,11,null,12,16,17]",
        "output": "[[2, 1, 6], [5, 3, 7, 9, 12, 16], [13, 4, 8, 10], [14, 11, 17], [15]]"
      },
      {
        "input": "root = [5,1,6,null,3,null,null,2,4]",
        "output": "[[1, 2], [5, 3], [6, 4]]"
      },
      {
        "input": "root = [20,15,25,10,17,22,30,5,12,16,18,21,23,null,24,26,35,null,null,null,null,null,null,null,null,32]",
        "output": "[[26], [5], [10, 35], [15, 12, 16, 21], [20, 17, 22, 32], [25, 18, 23], [30], [24]]"
      },
      {
        "input": "root = [5,3,6,2,4,null,8,1,null,null,null,7,9]",
        "output": "[[1], [2], [3], [5, 4], [6, 7], [8], [9]]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,8,13,17,null,null,12,14,16,null,null,null,null,null,19]",
        "output": "[[1, 19], [3, 12], [5, 6], [10, 7, 14, 16], [15, 8, 13], [18], [17]]"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,35,60,85,110,140,160,185,5,15,28,45,55,65,70,80,90,105,115,130,135,145,155,165,170,180,190,195,200]",
        "output": "[[170], [5], [10, 180, 190, 200], [25, 15, 28, 55, 90], [50, 35, 60, 110, 195], [100, 75, 125, 45, 65, 70, 105, 115, 135], [150, 85, 140, 160], [175, 80, 130, 145, 155], [185], [165]]"
      },
      {
        "input": "root = [50,20,30,10,25,27,35,5,15,null,null,26,33,37,40,null,6,9,12,18,null,null,null,null,null,null,29,null,31,null,36,null,null,null,null,null,null,null,null]",
        "output": "[[5], [10, 6, 9, 18], [20, 15, 26, 31, 36], [50, 25, 27, 12], [30, 33, 37], [35], [40], [29]]"
      },
      {
        "input": "root = [7,3,15,1,5,9,20,null,2,null,4,8,13,18,null,10,11,12,14,16,17,19]",
        "output": "[[1, 10, 16], [3, 2, 8], [7, 5, 9, 11, 12, 17, 19], [15, 4, 13, 18], [20, 14]]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13]",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13]]"
      },
      {
        "input": "root = [50,25,75,12,37,62,87,6,18,31,43,56,68,81,93,3,9,15,21,28,34,40,46,53,60,65,72,79,84,89,96]",
        "output": "[[3], [6], [12, 9, 15, 28, 53], [25, 18, 31, 56], [50, 37, 62, 21, 34, 40, 60, 65, 79], [75, 43, 68, 81], [87, 46, 72, 84, 89], [93], [96]]"
      },
      {
        "input": "root = [1,-10,10,-20,20,-30,30,-40,40,-50,50,-60,60,-70,70,-80,80,-90,90,-100,100]",
        "output": "[[-80], [-40], [-20, 80, -90, -100], [-10, 40, -50, -60], [1, 20, -30, 90, 100], [10, 50, 60, -70], [30], [70]]"
      },
      {
        "input": "root = [8,5,12,4,7,10,15,3,6,9,11,13,16,18,20]",
        "output": "[[3], [4], [5, 6, 9, 13], [8, 7, 10], [12, 11, 16, 18], [15], [20]]"
      },
      {
        "input": "root = [20,15,25,10,18,22,30,5,12,null,19,21,24,null,7,null,null,null,null,null,null,11,null,null,23,null,null,null,null,null,6,null,null,8,null,null,13,null,14,null,16,null,17,null,null,null,null,null,null,null,9]",
        "output": "[[5], [10, 11], [15, 12, 21], [20, 18, 22], [25, 19, 24], [30, 23], [7, 6]]"
      },
      {
        "input": "root = [7,3,9,1,5,8,10,0,2,4,6,null,9]",
        "output": "[[0], [1], [3, 2, 4], [7, 5, 8], [9, 6, 9], [10]]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,8,16,20,null,null,null,null,null,19]",
        "output": "[[1], [3], [5, 6], [10, 7], [15, 8, 16], [18, 19], [20]]"
      },
      {
        "input": "root = [8,5,9,4,7,8,10,3,null,6,null,null,9,null,null,11,null,12]",
        "output": "[[11], [3], [4, 12], [5, 6], [8, 7, 8], [9, 9], [10]]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,18,22,27,32,37,0,4,8,14,16,24,26,31,34,36,39,41,43]",
        "output": "[[0], [2], [5, 4, 8, 16, 34], [10, 7, 12, 22], [20, 15, 25, 14, 24, 26, 36, 39, 43], [30, 18, 27, 32], [35, 31, 41], [37]]"
      },
      {
        "input": "root = [-10,-20,-30,-40,-50,-60,-70,-80,-90,-100]",
        "output": "[[-80], [-40], [-20, -90, -100], [-10, -50, -60], [-30], [-70]]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,18,22,27,32,37,1,3,6,8,11,13,17,19,21,23,26,28,31,33,36,38,null,4,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9]",
        "output": "[[1], [2, 4], [5, 3, 6, 11, 21], [10, 7, 12, 22], [20, 15, 25, 8, 13, 17, 23, 26, 31], [30, 18, 27, 32], [35, 19, 28, 33, 36], [37], [38]]"
      },
      {
        "input": "root = [7,6,8,5,7,7,9,4,null,null,null,null,6,8,10,null,null,null,null,null,null,null,null,null,null,5,9,11]",
        "output": "[[4], [5], [6], [7, 7, 7], [8, 6, 8], [9], [10]]"
      },
      {
        "input": "root = [50,25,75,10,35,60,85,5,15,30,40,55,65,80,90,1,7,12,18,28,38,48,52,58,62,68,78,82,88,92,98,null,6,11,13,17,21,27,32,37,42,47,51,54,57,61,64,67,72,77,81,84,87,91,95,99,null,null,null,null,null,null,null,null,null,null,null,null,14,16,19,22,26,31,36,41,46,50,53,56,60,63,66,71,76,80,83,86,90,94,98,null,9,11,18,25,34,43,52,61,70,79,88,97,null,8,20,29,39,49,59,69,78,87,96,null,null,null,null,null,null,3,24,38,48,58,68,77,86,95,null,null,null,null,null,null,2,23,37,47,57,67,76,85,94,null,null,null,null,null,null,null,21,36,46,56,66,75,84,93,null,null,null,null,null,null,null,null,22,35,45,55,65,74,83,92,null,null,null,null,null,null,null,null,null,26,34,44,54,64,73,82,91,null,null,null,null,null,null,null,null,null,null,27,33,43,53,63,72,81,90,null,null,null,null,null,null,null,null,null,null,null,28,32,42,52,62,71,80,89,null,null,null,null,null,null,null,null,null,null,null,null,30,31,41,51,61,70,79,88,null,null,null,null,null,null,null,null,null,null,null,null,null,39,40,49,59,69,78,87,96,null,null,null,null,null,null,null,null,null,null,null,null,null,null,50,60,70,80,90]",
        "output": "[[87, 95, 93], [1, 16, 50, 11, 69], [5, 6, 11, 17, 37, 67, 96, 3, 23, 92, 64, 50, 90], [10, 7, 12, 28, 58, 19, 22, 31, 53, 56, 63, 80, 18, 25, 43, 79, 49, 27, 43, 81, 28, 32, 52, 89, 78], [25, 15, 30, 55, 13, 21, 27, 42, 47, 54, 72, 77, 84, 99, 69, 24, 38, 58, 37, 47, 67, 36, 22, 35, 55, 73, 82, 60, 70], [50, 35, 60, 18, 38, 48, 62, 68, 82, 14, 26, 36, 41, 60, 66, 71, 83, 86, 94, 34, 52, 61, 88, 97, 8, 59, 33, 53, 63, 90, 42, 62, 71, 31, 39, 87], [75, 40, 65, 80, 32, 51, 57, 61, 81, 87, 91, 78, 48, 68, 77, 2, 57, 76, 85, 46, 56, 45, 65, 74, 26, 91, 80], [85, 52, 78, 88, 92, 46, 76, 90, 98, 70, 20, 29, 72, 80, 30, 41, 51, 70, 40, 49, 96], [90, 64, 95, 86, 94, 21, 66, 75, 83, 34, 44], [98, 9, 39, 61, 79, 88, 59], [84, 54]]"
      },
      {
        "input": "root = [0,-3,9,-10,null,5,10,null,-1,null,3,8,15,-4,-2,7,12,null,null,null,null,null,null,null,null,-6]",
        "output": "[[-10, -4], [-3, -1, -6], [0, 5, -2, 7], [9, 3, 8], [10, 12], [15]]"
      },
      {
        "input": "root = [5,3,6,2,4,null,7,1,null,null,null,null,8]",
        "output": "[[1], [2], [3], [5, 4], [6], [7], [8]]"
      }
    ]
  },
  {
    "id": 2093,
    "difficulty": "Medium",
    "tags": [
      "Graph",
      "Shortest Path",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "A series of highways connect n cities numbered from 0 to n - 1. You are given a 2D integer array highways where highways[i] = [city1i, city2i, tolli] indicates that there is a highway that connects city1i and city2i, allowing a car to go from city1i to city2i and vice versa for a cost of tolli.\nYou are also given an integer discounts which represents the number of discounts you have. You can use a discount to travel across the ith highway for a cost of tolli / 2 (integer division). Each discount may only be used once, and you can only use at most one discount per highway.\nReturn the minimum total cost to go from city 0 to city n - 1, or -1 if it is not possible to go from city 0 to city n - 1.\n\u00a0\nExample 1:\n\n\nInput: n = 5, highways = [[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]], discounts = 1\nOutput: 9\nExplanation:\nGo from 0 to 1 for a cost of 4.\nGo from 1 to 4 and use a discount for a cost of 11 / 2 = 5.\nThe minimum cost to go from 0 to 4 is 4 + 5 = 9.\n\nExample 2:\n\n\nInput: n = 4, highways = [[1,3,17],[1,2,7],[3,2,5],[0,1,6],[3,0,20]], discounts = 20\nOutput: 8\nExplanation:\nGo from 0 to 1 and use a discount for a cost of 6 / 2 = 3.\nGo from 1 to 2 and use a discount for a cost of 7 / 2 = 3.\nGo from 2 to 3 and use a discount for a cost of 5 / 2 = 2.\nThe minimum cost to go from 0 to 3 is 3 + 3 + 2 = 8.\n\nExample 3:\n\n\nInput: n = 4, highways = [[0,1,3],[2,3,2]], discounts = 0\nOutput: -1\nExplanation:\nIt is impossible to go from 0 to 3 so return -1.\n\n\u00a0\nConstraints:\n\n2 <= n <= 1000\n1 <= highways.length <= 1000\nhighways[i].length == 3\n0 <= city1i, city2i <= n - 1\ncity1i != city2i\n0 <= tolli <= 105\n0 <= discounts <= 500\nThere are no duplicate highways.\n\n",
    "starterCode": "class Solution:\n    def minimumCost(self, n: int, highways: List[List[int]], discounts: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 5, highways = [[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]], discounts = 1",
        "output": "9"
      },
      {
        "input": "n = 4, highways = [[1,3,17],[1,2,7],[3,2,5],[0,1,6],[3,0,20]], discounts = 20",
        "output": "8"
      },
      {
        "input": "n = 6, highways = [[0,1,5],[1,2,4],[2,3,3],[3,4,2],[4,5,1]], discounts = 3",
        "output": "8"
      },
      {
        "input": "n = 3, highways = [[0,1,10],[1,2,10]], discounts = 1",
        "output": "15"
      },
      {
        "input": "n = 4, highways = [[0,1,3],[2,3,2]], discounts = 0",
        "output": "-1"
      },
      {
        "input": "n = 6, highways = [[0,1,5],[1,2,4],[2,3,8],[3,4,10],[4,5,6]], discounts = 2",
        "output": "24"
      },
      {
        "input": "n = 6, highways = [[0,1,5],[1,2,4],[2,3,8],[0,4,3],[4,5,7]], discounts = 2",
        "output": "4"
      },
      {
        "input": "n = 12, highways = [[0,1,100],[1,2,200],[2,3,300],[3,4,400],[4,5,500],[5,6,600],[6,7,700],[7,8,800],[8,9,900],[9,10,1000],[10,11,1100]], discounts = 5",
        "output": "4350"
      },
      {
        "input": "n = 9, highways = [[0,1,100],[1,2,200],[2,3,300],[3,4,400],[4,5,500],[5,6,600],[6,7,700],[7,8,800],[0,4,350],[1,5,450],[2,6,550],[3,7,650],[0,5,550],[1,6,650],[2,7,750],[3,8,850],[0,6,750],[1,7,850],[2,8,950]], discounts = 5",
        "output": "625"
      },
      {
        "input": "n = 8, highways = [[0,1,20],[0,2,15],[1,2,10],[1,3,25],[1,4,30],[2,3,12],[2,4,20],[3,4,18],[3,5,35],[3,6,40],[4,5,24],[4,6,28],[5,7,50],[6,7,32]], discounts = 5",
        "output": "47"
      },
      {
        "input": "n = 7, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[0,3,9],[1,4,10],[2,5,11],[0,4,12],[1,5,13],[2,6,14],[0,5,15],[1,6,16],[0,6,17]], discounts = 7",
        "output": "8"
      },
      {
        "input": "n = 8, highways = [[0,1,100],[1,2,150],[2,3,200],[3,4,250],[4,5,300],[5,6,350],[6,7,400],[7,0,450],[1,4,50],[2,5,100],[3,6,150],[4,7,200]], discounts = 5",
        "output": "175"
      },
      {
        "input": "n = 15, highways = [[0,1,10],[0,4,20],[1,2,30],[1,5,40],[2,3,50],[2,6,60],[3,7,70],[4,5,80],[4,8,90],[5,6,100],[5,9,110],[6,7,120],[6,10,130],[7,11,140],[8,9,150],[8,12,160],[9,10,170],[9,13,180],[10,11,190],[10,14,200],[11,12,210],[12,13,220],[13,14,230]], discounts = 10",
        "output": "215"
      },
      {
        "input": "n = 10, highways = [[0,1,5],[0,2,3],[1,3,8],[1,4,7],[2,4,6],[3,5,9],[3,6,10],[4,6,11],[5,7,12],[5,8,13],[6,8,14],[6,9,15],[7,9,16]], discounts = 3",
        "output": "18"
      },
      {
        "input": "n = 10, highways = [[0,1,5],[1,2,7],[2,3,8],[3,4,9],[4,5,6],[5,6,5],[6,7,4],[7,8,3],[8,9,2]], discounts = 3",
        "output": "36"
      },
      {
        "input": "n = 6, highways = [[0,1,25],[1,2,15],[2,3,10],[3,4,5],[4,5,30],[0,2,50],[2,4,20],[0,3,30],[1,4,10],[3,5,15]], discounts = 2",
        "output": "22"
      },
      {
        "input": "n = 9, highways = [[0,1,8],[0,2,6],[0,3,10],[1,2,4],[1,3,12],[1,4,14],[2,4,5],[2,5,7],[3,4,9],[3,5,11],[3,6,13],[4,5,3],[4,6,15],[4,7,17],[5,6,6],[5,7,8],[5,8,10],[6,7,2],[6,8,4],[7,8,1]], discounts = 6",
        "output": "10"
      },
      {
        "input": "n = 12, highways = [[0,1,10],[0,5,15],[1,2,20],[1,6,25],[2,3,30],[2,7,35],[3,4,40],[3,8,45],[4,9,50],[5,6,55],[5,10,60],[6,7,65],[6,11,70],[7,8,75],[8,9,80],[9,10,85],[10,11,90]], discounts = 7",
        "output": "52"
      },
      {
        "input": "n = 10, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[0,9,10]], discounts = 5",
        "output": "5"
      },
      {
        "input": "n = 10, highways = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45],[0,9,50]], discounts = 5",
        "output": "25"
      },
      {
        "input": "n = 7, highways = [[0,1,30],[0,2,40],[1,2,10],[1,3,50],[2,4,60],[3,4,20],[3,5,80],[4,5,90],[4,6,30],[5,6,70]], discounts = 2",
        "output": "80"
      },
      {
        "input": "n = 8, highways = [[0,1,100],[0,2,150],[1,3,50],[2,3,60],[3,4,30],[4,5,20],[5,6,10],[6,7,5]], discounts = 4",
        "output": "115"
      },
      {
        "input": "n = 10, highways = [[0,1,5],[1,2,4],[2,3,3],[3,4,2],[4,5,1],[5,6,2],[6,7,3],[7,8,4],[8,9,5]], discounts = 3",
        "output": "21"
      },
      {
        "input": "n = 8, highways = [[0,1,10],[1,2,15],[2,3,20],[3,4,25],[4,5,30],[5,6,35],[6,7,40],[0,7,100],[1,6,60],[2,5,50]], discounts = 4",
        "output": "50"
      },
      {
        "input": "n = 15, highways = [[0,1,150],[0,2,250],[1,2,200],[2,3,200],[3,4,150],[4,5,140],[5,6,130],[6,7,120],[7,8,110],[8,9,100],[9,10,90],[10,11,80],[11,12,70],[12,13,60],[13,14,50]], discounts = 12",
        "output": "800"
      },
      {
        "input": "n = 15, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100],[10,11,110],[11,12,120],[12,13,130],[13,14,140],[0,14,150]], discounts = 7",
        "output": "75"
      },
      {
        "input": "n = 9, highways = [[0,1,10],[0,3,20],[1,2,30],[1,4,40],[2,5,50],[3,4,60],[3,6,70],[4,7,80],[5,8,90],[5,6,100],[6,7,110],[7,8,120]], discounts = 5",
        "output": "90"
      },
      {
        "input": "n = 8, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[0,7,100],[1,6,100],[2,5,100],[3,4,100]], discounts = 5",
        "output": "14"
      },
      {
        "input": "n = 6, highways = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,0,7],[0,3,8],[1,4,9],[2,5,10]], discounts = 2",
        "output": "3"
      },
      {
        "input": "n = 6, highways = [[0,1,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[0,2,10],[1,3,10],[2,4,10],[3,5,10],[0,3,15],[1,4,15],[2,5,15]], discounts = 0",
        "output": "25"
      },
      {
        "input": "n = 6, highways = [[0,1,100],[1,2,200],[2,3,150],[3,4,100],[4,5,50],[5,0,250],[1,4,75],[2,5,125],[0,3,225]], discounts = 4",
        "output": "112"
      },
      {
        "input": "n = 8, highways = [[0,1,15],[1,2,20],[2,3,25],[3,4,30],[4,5,35],[5,6,40],[6,7,45],[7,0,50]], discounts = 2",
        "output": "25"
      },
      {
        "input": "n = 10, highways = [[0,1,10],[0,2,15],[1,3,20],[2,4,25],[3,5,30],[4,6,35],[5,7,40],[6,8,45],[7,9,50],[1,5,5],[3,7,10],[2,6,20]], discounts = 3",
        "output": "50"
      },
      {
        "input": "n = 8, highways = [[0,1,100],[1,2,200],[2,3,300],[3,4,400],[4,5,500],[5,6,600],[6,7,700]], discounts = 0",
        "output": "2800"
      },
      {
        "input": "n = 15, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100],[10,11,110],[11,12,120],[12,13,130],[13,14,140]], discounts = 7",
        "output": "665"
      },
      {
        "input": "n = 7, highways = [[0,1,50],[0,2,30],[0,3,20],[1,2,10],[1,3,40],[2,4,60],[2,5,70],[3,4,50],[3,5,60],[4,5,30],[4,6,40],[5,6,20]], discounts = 4",
        "output": "50"
      },
      {
        "input": "n = 8, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[0,4,100],[1,5,110],[2,6,120],[3,7,130]], discounts = 3",
        "output": "100"
      },
      {
        "input": "n = 7, highways = [[0,1,1],[1,2,1],[2,3,1],[3,4,1],[4,5,1],[5,6,1]], discounts = 5",
        "output": "1"
      },
      {
        "input": "n = 13, highways = [[0,1,130],[1,2,120],[2,3,110],[3,4,100],[4,5,90],[5,6,80],[6,7,70],[7,8,60],[8,9,50],[9,10,40],[10,11,30],[11,12,20]], discounts = 10",
        "output": "475"
      },
      {
        "input": "n = 12, highways = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45],[9,10,50],[10,11,55],[0,11,100]], discounts = 6",
        "output": "50"
      },
      {
        "input": "n = 12, highways = [[0,1,500],[1,2,400],[2,3,300],[3,4,200],[4,5,100],[5,6,50],[6,7,25],[7,8,10],[8,9,5],[9,10,2],[10,11,1],[0,11,800],[1,10,750],[2,9,700],[3,8,650],[4,7,600],[5,6,550]], discounts = 6",
        "output": "400"
      },
      {
        "input": "n = 20, highways = [[0,1,100],[0,2,200],[1,2,50],[1,3,150],[2,4,100],[3,4,200],[3,5,50],[4,6,150],[5,6,100],[5,7,200],[6,8,50],[7,8,150],[7,9,100],[8,10,200],[9,10,50],[9,11,150],[10,12,100],[11,12,200],[11,13,50],[12,14,150],[13,14,100],[13,15,200],[14,16,50],[15,16,150],[15,17,100],[16,18,200],[17,18,50],[17,19,150],[18,19,100]], discounts = 20",
        "output": "625"
      },
      {
        "input": "n = 11, highways = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45],[9,10,50],[0,10,100],[1,9,100],[2,8,100],[3,7,100],[4,6,100],[5,0,100]], discounts = 6",
        "output": "50"
      },
      {
        "input": "n = 20, highways = [[0,1,50],[1,2,30],[2,3,20],[3,4,10],[4,5,5],[5,6,35],[6,7,25],[7,8,15],[8,9,10],[9,10,5],[10,11,40],[11,12,30],[12,13,20],[13,14,10],[14,15,5],[15,16,35],[16,17,25],[17,18,15],[18,19,10],[0,19,80]], discounts = 10",
        "output": "40"
      },
      {
        "input": "n = 9, highways = [[0,1,500],[1,2,400],[2,3,300],[3,4,200],[4,5,100],[5,6,50],[6,7,25],[7,8,10],[0,8,800],[1,7,450],[2,6,350],[3,5,250],[0,4,600]], discounts = 3",
        "output": "400"
      },
      {
        "input": "n = 12, highways = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,10,10],[10,11,10]], discounts = 10",
        "output": "60"
      },
      {
        "input": "n = 9, highways = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10]], discounts = 4",
        "output": "60"
      },
      {
        "input": "n = 12, highways = [[0,1,120],[1,2,110],[2,3,100],[3,4,90],[4,5,80],[5,6,70],[6,7,60],[7,8,50],[8,9,40],[9,10,30],[10,11,20]], discounts = 8",
        "output": "430"
      },
      {
        "input": "n = 7, highways = [[0,1,1000],[1,2,2000],[2,3,3000],[3,4,4000],[4,5,5000],[5,6,6000],[0,3,1500],[2,5,2500],[1,4,3500]], discounts = 0",
        "output": "11500"
      },
      {
        "input": "n = 8, highways = [[0,1,5],[0,2,10],[1,3,15],[2,3,5],[3,4,20],[4,5,10],[5,6,25],[6,7,30],[7,0,15]], discounts = 5",
        "output": "7"
      },
      {
        "input": "n = 10, highways = [[0,9,50],[0,1,20],[1,2,20],[2,3,20],[3,4,20],[4,5,20],[5,6,20],[6,7,20],[7,8,20],[8,9,20]], discounts = 5",
        "output": "25"
      },
      {
        "input": "n = 9, highways = [[0,1,10],[0,2,20],[0,3,30],[1,4,10],[2,4,20],[3,4,30],[4,5,10],[4,6,20],[4,7,30],[5,8,10],[6,8,20],[7,8,30]], discounts = 5",
        "output": "20"
      },
      {
        "input": "n = 10, highways = [[0,1,200],[1,2,150],[2,3,100],[3,4,50],[4,5,25],[5,6,10],[6,7,5],[7,8,2],[8,9,1],[0,9,400],[1,8,350],[2,7,300],[3,6,250],[4,5,200]], discounts = 5",
        "output": "200"
      },
      {
        "input": "n = 7, highways = [[0,1,15],[0,2,20],[1,3,9],[2,3,11],[3,4,5],[4,5,7],[5,6,4]], discounts = 3",
        "output": "23"
      },
      {
        "input": "n = 50, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19],[19,20,20],[20,21,21],[21,22,22],[22,23,23],[23,24,24],[24,25,25],[25,26,26],[26,27,27],[27,28,28],[28,29,29],[29,30,30],[30,31,31],[31,32,32],[32,33,33],[33,34,34],[34,35,35],[35,36,36],[36,37,37],[37,38,38],[38,39,39],[39,40,40],[40,41,41],[41,42,42],[42,43,43],[43,44,44],[44,45,45],[45,46,46],[46,47,47],[47,48,48],[48,49,49]], discounts = 25",
        "output": "756"
      },
      {
        "input": "n = 8, highways = [[0,1,150],[0,2,200],[1,3,175],[2,3,125],[2,4,100],[3,5,50],[4,5,60],[5,6,70],[6,7,90],[0,7,300],[1,7,250],[3,6,80],[4,6,40]], discounts = 5",
        "output": "150"
      },
      {
        "input": "n = 10, highways = [[0,1,100],[0,2,200],[1,2,150],[2,3,130],[3,4,120],[4,5,110],[5,6,100],[6,7,90],[7,8,80],[8,9,70]], discounts = 10",
        "output": "450"
      },
      {
        "input": "n = 6, highways = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,0,10],[0,2,15],[1,3,15],[2,4,15],[3,5,15],[4,0,15],[5,1,15]], discounts = 5",
        "output": "5"
      },
      {
        "input": "n = 7, highways = [[0,3,15],[0,1,5],[1,2,10],[2,4,8],[3,4,6],[4,5,20],[5,6,10],[6,0,30]], discounts = 2",
        "output": "15"
      },
      {
        "input": "n = 10, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90]], discounts = 2",
        "output": "365"
      },
      {
        "input": "n = 10, highways = [[0,1,1000],[1,2,900],[2,3,800],[3,4,700],[4,5,600],[5,6,500],[6,7,400],[7,8,300],[8,9,200]], discounts = 6",
        "output": "3150"
      },
      {
        "input": "n = 12, highways = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45],[9,10,50],[10,11,55],[11,0,60]], discounts = 6",
        "output": "30"
      },
      {
        "input": "n = 10, highways = [[0,1,5],[0,2,3],[1,3,7],[2,3,4],[3,4,10],[4,5,6],[5,6,8],[6,7,9],[7,8,2],[8,9,1]], discounts = 3",
        "output": "29"
      },
      {
        "input": "n = 10, highways = [[0,1,10],[0,2,20],[0,3,30],[1,4,40],[1,5,50],[2,6,60],[2,7,70],[3,8,80],[3,9,90],[4,5,5],[6,7,7],[8,9,9]], discounts = 5",
        "output": "59"
      },
      {
        "input": "n = 10, highways = [[0,1,5],[1,2,3],[2,3,8],[3,4,2],[4,5,7],[5,6,6],[6,7,4],[7,8,9],[8,9,1]], discounts = 3",
        "output": "32"
      },
      {
        "input": "n = 12, highways = [[0,1,100],[0,2,200],[0,3,300],[1,2,50],[1,3,150],[1,4,250],[1,5,350],[2,3,100],[2,4,150],[2,5,250],[2,6,350],[3,4,50],[3,5,150],[3,6,250],[3,7,350],[4,5,100],[4,6,150],[4,7,250],[4,8,350],[5,6,50],[5,7,150],[5,8,250],[5,9,350],[6,7,100],[6,8,150],[6,9,250],[6,10,350],[7,8,50],[7,9,150],[7,10,250],[7,11,350],[8,9,100],[8,10,150],[8,11,250],[9,10,50],[9,11,150],[10,11,100]], discounts = 10",
        "output": "425"
      },
      {
        "input": "n = 25, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100],[10,11,110],[11,12,120],[12,13,130],[13,14,140],[14,15,150],[15,16,160],[16,17,170],[17,18,180],[18,19,190],[19,20,200],[20,21,210],[21,22,220],[22,23,230],[23,24,240],[24,0,250]], discounts = 15",
        "output": "125"
      },
      {
        "input": "n = 7, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,0,7],[1,5,100],[2,6,100],[3,0,100],[4,1,100]], discounts = 3",
        "output": "3"
      },
      {
        "input": "n = 15, highways = [[0,1,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5],[6,7,5],[7,8,5],[8,9,5],[9,10,5],[10,11,5],[11,12,5],[12,13,5],[13,14,5]], discounts = 7",
        "output": "49"
      },
      {
        "input": "n = 9, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80]], discounts = 5",
        "output": "210"
      },
      {
        "input": "n = 6, highways = [[0,1,100],[1,2,200],[2,3,300],[3,4,400],[4,5,500],[5,0,600],[0,2,150],[1,3,250],[2,4,350],[3,5,450],[4,0,550],[5,1,650]], discounts = 10",
        "output": "300"
      },
      {
        "input": "n = 6, highways = [[0,1,5],[0,2,10],[1,3,15],[2,3,20],[3,4,25],[4,5,30],[0,5,40]], discounts = 3",
        "output": "20"
      },
      {
        "input": "n = 15, highways = [[0,1,2],[1,2,2],[2,3,2],[3,4,2],[4,5,2],[5,6,2],[6,7,2],[7,8,2],[8,9,2],[9,10,2],[10,11,2],[11,12,2],[12,13,2],[13,14,2],[0,14,10]], discounts = 10",
        "output": "5"
      },
      {
        "input": "n = 11, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100]], discounts = 4",
        "output": "380"
      },
      {
        "input": "n = 10, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[0,9,100],[0,8,100],[0,7,100],[0,6,100],[0,5,100],[0,4,100],[0,3,100],[0,2,100],[0,1,100]], discounts = 10",
        "output": "20"
      },
      {
        "input": "n = 6, highways = [[0,1,5],[0,2,10],[1,3,2],[2,3,8],[3,4,6],[4,5,3]], discounts = 2",
        "output": "10"
      },
      {
        "input": "n = 6, highways = [[0,1,10],[0,2,20],[0,3,30],[1,2,15],[1,3,25],[1,4,35],[2,3,5],[2,4,15],[2,5,25],[3,4,10],[3,5,20],[4,5,5]], discounts = 2",
        "output": "22"
      },
      {
        "input": "n = 6, highways = [[0,1,100],[1,2,200],[2,3,300],[3,4,400],[4,5,500]], discounts = 2",
        "output": "1050"
      },
      {
        "input": "n = 9, highways = [[0,1,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5],[6,7,5],[7,8,5]], discounts = 4",
        "output": "28"
      },
      {
        "input": "n = 15, highways = [[0,1,20],[1,2,15],[2,3,10],[3,4,12],[4,5,8],[5,6,14],[6,7,5],[7,8,7],[8,9,11],[9,10,9],[10,11,3],[11,12,6],[12,13,4],[13,14,1],[0,13,18]], discounts = 5",
        "output": "9"
      },
      {
        "input": "n = 11, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100]], discounts = 5",
        "output": "350"
      },
      {
        "input": "n = 10, highways = [[0,1,5],[1,2,3],[2,3,7],[3,4,2],[4,5,6],[5,6,8],[6,7,4],[7,8,9],[8,9,10]], discounts = 3",
        "output": "40"
      },
      {
        "input": "n = 9, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,0,90],[1,3,100],[2,4,100],[3,5,100],[4,6,100],[5,7,100],[6,8,100],[7,0,100],[8,1,100]], discounts = 4",
        "output": "45"
      },
      {
        "input": "n = 7, highways = [[0,1,100],[0,2,300],[1,2,50],[1,3,150],[1,4,200],[2,3,100],[2,5,80],[3,4,50],[3,5,120],[4,6,150],[5,6,60]], discounts = 5",
        "output": "145"
      }
    ]
  },
  {
    "id": 2436,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Math",
      "Dynamic Programming",
      "Number Theory"
    ],
    "problemDescription": "You are given an array nums consisting of positive integers.\nSplit the array into one or more disjoint subarrays such that:\n\nEach element of the array belongs to exactly one subarray, and\nThe GCD of the elements of each subarray is strictly greater than 1.\n\nReturn the minimum number of subarrays that can be obtained after the split.\nNote that:\n\nThe GCD of a subarray is the largest positive integer that evenly divides all the elements of the subarray.\nA subarray is a contiguous part of the array.\n\n\u00a0\nExample 1:\n\nInput: nums = [12,6,3,14,8]\nOutput: 2\nExplanation: We can split the array into the subarrays: [12,6,3] and [14,8].\n- The GCD of 12, 6 and 3 is 3, which is strictly greater than 1.\n- The GCD of 14 and 8 is 2, which is strictly greater than 1.\nIt can be shown that splitting the array into one subarray will make the GCD = 1.\n\nExample 2:\n\nInput: nums = [4,12,6,14]\nOutput: 1\nExplanation: We can split the array into only one subarray, which is the whole array.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 2000\n2 <= nums[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def minimumSplits(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [100,200,300,400]",
        "output": "1"
      },
      {
        "input": "nums = [30,60,90,120]",
        "output": "1"
      },
      {
        "input": "nums = [2,3,5,7,11]",
        "output": "5"
      },
      {
        "input": "nums = [18,9,6,12]",
        "output": "1"
      },
      {
        "input": "nums = [4,12,6,14]",
        "output": "1"
      },
      {
        "input": "nums = [18,9,27,81,3]",
        "output": "1"
      },
      {
        "input": "nums = [30,20,10,5]",
        "output": "1"
      },
      {
        "input": "nums = [5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [7,7,7,7,7,7]",
        "output": "1"
      },
      {
        "input": "nums = [60,120,180,240]",
        "output": "1"
      },
      {
        "input": "nums = [7,7,7,7,7]",
        "output": "1"
      },
      {
        "input": "nums = [12,6,3,14,8]",
        "output": "2"
      },
      {
        "input": "nums = [8,4,2,16]",
        "output": "1"
      },
      {
        "input": "nums = [100,50,25,10]",
        "output": "1"
      },
      {
        "input": "nums = [5,10,15,20,25]",
        "output": "1"
      },
      {
        "input": "nums = [18,9,3,6,2,12]",
        "output": "2"
      },
      {
        "input": "nums = [18,9,27,36,54]",
        "output": "1"
      },
      {
        "input": "nums = [3,9,27,81]",
        "output": "1"
      },
      {
        "input": "nums = [2,2,2,2,2]",
        "output": "1"
      },
      {
        "input": "nums = [16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96]",
        "output": "1"
      },
      {
        "input": "nums = [121, 132, 143, 154, 165, 176, 187, 198, 209]",
        "output": "1"
      },
      {
        "input": "nums = [81, 27, 9, 3, 1]",
        "output": "2"
      },
      {
        "input": "nums = [33, 66, 99, 132, 165, 198, 231, 264, 297, 330]",
        "output": "1"
      },
      {
        "input": "nums = [100, 50, 25, 125, 200]",
        "output": "1"
      },
      {
        "input": "nums = [54, 81, 162, 243, 324]",
        "output": "1"
      },
      {
        "input": "nums = [72, 84, 12, 6, 3, 9]",
        "output": "1"
      },
      {
        "input": "nums = [45, 90, 135, 180, 225, 270, 315, 360]",
        "output": "1"
      },
      {
        "input": "nums = [36, 72, 108, 144, 180, 216, 252, 288, 324, 360, 396, 432, 468, 504, 540]",
        "output": "1"
      },
      {
        "input": "nums = [44100, 88200, 132300, 176400, 220500]",
        "output": "1"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65, 78, 91]",
        "output": "1"
      },
      {
        "input": "nums = [9, 36, 81, 144, 225, 324, 441, 576, 729, 900]",
        "output": "1"
      },
      {
        "input": "nums = [101, 202, 303, 404, 505, 606, 707, 808, 909, 1010, 1111, 1212, 1313, 1414, 1515, 1616, 1717, 1818, 1919, 2020]",
        "output": "1"
      },
      {
        "input": "nums = [1024, 512, 256, 128, 64]",
        "output": "1"
      },
      {
        "input": "nums = [36, 72, 108, 144, 180]",
        "output": "1"
      },
      {
        "input": "nums = [121, 242, 484, 968, 1936, 3872]",
        "output": "1"
      },
      {
        "input": "nums = [315, 270, 585, 1035, 2070, 4140]",
        "output": "1"
      },
      {
        "input": "nums = [28, 14, 7, 35, 49]",
        "output": "1"
      },
      {
        "input": "nums = [121, 242, 363, 484, 605, 726, 847, 968, 1089, 1210]",
        "output": "1"
      },
      {
        "input": "nums = [77, 154, 308, 616, 1232, 2464, 4928]",
        "output": "1"
      },
      {
        "input": "nums = [360, 180, 90, 45, 15, 5, 1]",
        "output": "2"
      },
      {
        "input": "nums = [144, 180, 216, 252, 288, 324, 360]",
        "output": "1"
      },
      {
        "input": "nums = [315, 210, 105, 70, 35]",
        "output": "1"
      },
      {
        "input": "nums = [1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216]",
        "output": "1"
      },
      {
        "input": "nums = [30, 45, 60, 90, 120, 150]",
        "output": "1"
      },
      {
        "input": "nums = [100, 50, 25, 125, 625, 3125, 15625]",
        "output": "1"
      },
      {
        "input": "nums = [100, 25, 50, 125, 200]",
        "output": "1"
      },
      {
        "input": "nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]",
        "output": "1"
      },
      {
        "input": "nums = [28, 56, 84, 112, 140, 168, 196, 224, 252, 280]",
        "output": "1"
      },
      {
        "input": "nums = [60, 48, 36, 24, 12, 6]",
        "output": "1"
      },
      {
        "input": "nums = [504, 252, 126, 63, 21, 7]",
        "output": "1"
      },
      {
        "input": "nums = [33, 66, 99, 132, 165]",
        "output": "1"
      },
      {
        "input": "nums = [1024, 2048, 4096, 8192, 16384, 32768, 65536]",
        "output": "1"
      },
      {
        "input": "nums = [49, 98, 147, 196, 245, 294, 343, 392, 441, 490]",
        "output": "1"
      },
      {
        "input": "nums = [105, 210, 315, 420, 525, 630, 735]",
        "output": "1"
      },
      {
        "input": "nums = [17, 34, 51, 68, 85, 102, 119, 136]",
        "output": "1"
      },
      {
        "input": "nums = [15, 30, 45, 60, 75, 90]",
        "output": "1"
      },
      {
        "input": "nums = [60, 120, 180, 240, 300]",
        "output": "1"
      },
      {
        "input": "nums = [120, 180, 240, 300, 360, 420]",
        "output": "1"
      },
      {
        "input": "nums = [120, 180, 240, 300, 360, 420, 480, 540, 600]",
        "output": "1"
      },
      {
        "input": "nums = [42, 7, 14, 28, 35, 70]",
        "output": "1"
      },
      {
        "input": "nums = [180, 120, 60, 30, 15, 5, 1]",
        "output": "2"
      },
      {
        "input": "nums = [9, 27, 81, 243, 729]",
        "output": "1"
      },
      {
        "input": "nums = [30, 60, 90, 120, 150, 180]",
        "output": "1"
      },
      {
        "input": "nums = [49, 7, 14, 21, 28, 35]",
        "output": "1"
      },
      {
        "input": "nums = [15, 30, 45, 60, 75, 90, 105, 120, 135, 150]",
        "output": "1"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500]",
        "output": "1"
      },
      {
        "input": "nums = [1024, 2048, 4096, 8192, 16384]",
        "output": "1"
      },
      {
        "input": "nums = [65535, 32767, 16383, 8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1]",
        "output": "16"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65, 78, 91, 104, 117, 130]",
        "output": "1"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390]",
        "output": "1"
      },
      {
        "input": "nums = [121, 110, 99, 88, 77, 66, 55]",
        "output": "1"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65, 78, 91, 104]",
        "output": "1"
      },
      {
        "input": "nums = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]",
        "output": "1"
      },
      {
        "input": "nums = [1000000000, 500000000, 250000000, 125000000, 62500000]",
        "output": "1"
      },
      {
        "input": "nums = [840, 1260, 70, 210, 105]",
        "output": "1"
      },
      {
        "input": "nums = [101, 202, 303, 404, 505, 606, 707]",
        "output": "1"
      },
      {
        "input": "nums = [77, 154, 231, 308, 385]",
        "output": "1"
      },
      {
        "input": "nums = [30, 45, 60, 75, 90]",
        "output": "1"
      },
      {
        "input": "nums = [1369, 2738, 4107, 5476, 6845]",
        "output": "1"
      },
      {
        "input": "nums = [10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80, 80]",
        "output": "1"
      },
      {
        "input": "nums = [21, 42, 63, 84, 105, 126, 147, 168, 189, 210, 231, 252, 273, 294, 315, 336, 357, 378, 399, 420]",
        "output": "1"
      },
      {
        "input": "nums = [121, 242, 363, 484, 605, 726, 847]",
        "output": "1"
      },
      {
        "input": "nums = [60, 12, 18, 24, 30, 36]",
        "output": "1"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55, 65, 75, 85, 95, 105]",
        "output": "1"
      },
      {
        "input": "nums = [49, 98, 147, 196, 245, 294]",
        "output": "1"
      },
      {
        "input": "nums = [11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165]",
        "output": "1"
      },
      {
        "input": "nums = [72, 96, 120, 144, 168, 192]",
        "output": "1"
      },
      {
        "input": "nums = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2]",
        "output": "1"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195]",
        "output": "1"
      },
      {
        "input": "nums = [60, 120, 180, 240, 300, 360, 420]",
        "output": "1"
      },
      {
        "input": "nums = [49, 42, 35, 28, 21, 14, 7]",
        "output": "1"
      },
      {
        "input": "nums = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200]",
        "output": "1"
      },
      {
        "input": "nums = [100, 50, 25, 125, 250, 625, 3125]",
        "output": "1"
      },
      {
        "input": "nums = [60, 40, 20, 10, 5, 1]",
        "output": "2"
      },
      {
        "input": "nums = [1001, 2002, 3003, 4004, 5005]",
        "output": "1"
      },
      {
        "input": "nums = [42, 56, 98, 14, 21, 28, 35]",
        "output": "1"
      },
      {
        "input": "nums = [210, 105, 35, 70, 140]",
        "output": "1"
      },
      {
        "input": "nums = [22, 44, 66, 88, 110, 132]",
        "output": "1"
      },
      {
        "input": "nums = [24, 36, 48, 60, 72, 84, 96, 108, 120]",
        "output": "1"
      },
      {
        "input": "nums = [100, 150, 200, 250, 300]",
        "output": "1"
      },
      {
        "input": "nums = [252, 168, 84, 42, 21, 14, 7]",
        "output": "1"
      },
      {
        "input": "nums = [104, 130, 156, 182, 208, 234, 260, 286, 312, 338]",
        "output": "1"
      },
      {
        "input": "nums = [3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049]",
        "output": "1"
      },
      {
        "input": "nums = [105, 210, 315, 420, 525, 630, 735, 840, 945, 1050]",
        "output": "1"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600]",
        "output": "1"
      },
      {
        "input": "nums = [55, 110, 165, 220, 275, 330, 385, 440, 495, 550]",
        "output": "1"
      },
      {
        "input": "nums = [40, 80, 120, 160, 200]",
        "output": "1"
      },
      {
        "input": "nums = [1001, 2002, 3003, 4004, 5005, 6006, 7007, 8008, 9009, 10010]",
        "output": "1"
      },
      {
        "input": "nums = [121, 220, 330, 440, 550, 660, 770, 880, 990]",
        "output": "1"
      },
      {
        "input": "nums = [144, 288, 432, 576, 720, 864, 1008, 1152, 1296, 1440, 1584, 1728, 1872, 2016, 2160]",
        "output": "1"
      },
      {
        "input": "nums = [60, 30, 15, 75, 105]",
        "output": "1"
      },
      {
        "input": "nums = [21, 14, 7, 35, 49, 28, 56, 98, 196, 42]",
        "output": "1"
      },
      {
        "input": "nums = [3, 9, 27, 81, 243, 729]",
        "output": "1"
      },
      {
        "input": "nums = [42, 84, 126, 168, 210, 252]",
        "output": "1"
      },
      {
        "input": "nums = [42, 84, 168, 336, 672, 1344, 2688]",
        "output": "1"
      },
      {
        "input": "nums = [8, 16, 32, 64, 128, 256, 512]",
        "output": "1"
      },
      {
        "input": "nums = [2, 4, 8, 16, 32, 64, 128]",
        "output": "1"
      },
      {
        "input": "nums = [24, 48, 72, 96, 120, 144, 168, 192, 216, 240, 264, 288, 312, 336, 360, 384]",
        "output": "1"
      },
      {
        "input": "nums = [140, 70, 35, 175, 875, 4375]",
        "output": "1"
      },
      {
        "input": "nums = [60, 45, 90, 135, 180, 225]",
        "output": "1"
      },
      {
        "input": "nums = [110, 220, 330, 440, 550, 660, 770, 880, 990]",
        "output": "1"
      },
      {
        "input": "nums = [84, 140, 196, 252, 308, 364, 420]",
        "output": "1"
      },
      {
        "input": "nums = [2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2]",
        "output": "1"
      },
      {
        "input": "nums = [101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]",
        "output": "21"
      },
      {
        "input": "nums = [33, 66, 99, 132, 165, 198, 231, 264, 297, 330, 363, 396, 429, 462, 495, 528, 561, 594, 627, 660]",
        "output": "1"
      },
      {
        "input": "nums = [60, 120, 180, 240, 300, 360, 420, 480, 540, 600, 660, 720, 780, 840, 900, 960, 1020, 1080, 1140, 1200]",
        "output": "1"
      },
      {
        "input": "nums = [60, 45, 90, 105, 75]",
        "output": "1"
      },
      {
        "input": "nums = [210, 330, 165, 220, 110, 55]",
        "output": "1"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98]",
        "output": "1"
      },
      {
        "input": "nums = [44, 88, 132, 176, 220, 264, 308, 352, 396, 440]",
        "output": "1"
      },
      {
        "input": "nums = [90, 120, 150, 180, 210]",
        "output": "1"
      },
      {
        "input": "nums = [147, 294, 441, 588, 735]",
        "output": "1"
      },
      {
        "input": "nums = [210, 420, 630, 840, 1050]",
        "output": "1"
      },
      {
        "input": "nums = [135, 270, 405, 540, 675]",
        "output": "1"
      },
      {
        "input": "nums = [100, 200, 400, 800, 1600, 3200]",
        "output": "1"
      },
      {
        "input": "nums = [126, 63, 21, 7, 1]",
        "output": "2"
      },
      {
        "input": "nums = [84, 126, 42, 70, 56]",
        "output": "1"
      },
      {
        "input": "nums = [72, 108, 144, 180, 216, 252]",
        "output": "1"
      },
      {
        "input": "nums = [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]",
        "output": "1"
      },
      {
        "input": "nums = [42, 84, 126, 168, 210, 252, 294, 336, 378, 420, 462, 504]",
        "output": "1"
      },
      {
        "input": "nums = [12, 18, 24, 30, 36, 42, 48, 54, 60, 66]",
        "output": "1"
      },
      {
        "input": "nums = [24, 48, 72, 96, 120, 144, 168, 192, 216, 240]",
        "output": "1"
      },
      {
        "input": "nums = [56, 112, 168, 224, 280, 336]",
        "output": "1"
      },
      {
        "input": "nums = [500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500]",
        "output": "1"
      },
      {
        "input": "nums = [112, 224, 336, 448, 560]",
        "output": "1"
      },
      {
        "input": "nums = [14, 28, 42, 56, 70, 84, 98, 112, 126, 140]",
        "output": "1"
      },
      {
        "input": "nums = [9, 27, 81, 243, 729, 2187, 6561, 19683]",
        "output": "1"
      },
      {
        "input": "nums = [16, 32, 64, 128, 256]",
        "output": "1"
      },
      {
        "input": "nums = [243, 81, 27, 9, 3]",
        "output": "1"
      },
      {
        "input": "nums = [81, 162, 324, 648, 1296, 2592, 5184, 10368, 20736, 41472]",
        "output": "1"
      },
      {
        "input": "nums = [300, 600, 900, 1200, 1500, 1800, 2100]",
        "output": "1"
      },
      {
        "input": "nums = [315, 630, 945, 1260, 1575, 1890, 2205, 2520, 2835, 3150, 3465, 3780, 4095, 4410, 4725, 5040, 5355, 5670, 5985, 6300]",
        "output": "1"
      },
      {
        "input": "nums = [30, 45, 60, 75, 90, 105, 120]",
        "output": "1"
      },
      {
        "input": "nums = [101, 202, 303, 404, 505, 606, 707, 808, 909, 1010]",
        "output": "1"
      },
      {
        "input": "nums = [101, 103, 107, 109, 113, 127, 131, 137]",
        "output": "8"
      },
      {
        "input": "nums = [27, 81, 243, 729, 2187, 6561, 19683]",
        "output": "1"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]",
        "output": "1"
      },
      {
        "input": "nums = [81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, 14348907, 43046721, 129140163, 387420489]",
        "output": "1"
      },
      {
        "input": "nums = [48, 24, 12, 6, 3]",
        "output": "1"
      },
      {
        "input": "nums = [42, 84, 126, 168, 210, 252, 294, 336, 378, 420, 462, 504, 546, 588, 630, 672, 714, 756, 798, 840]",
        "output": "1"
      }
    ]
  },
  {
    "id": 78,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Backtracking"
    ],
    "problemDescription": "Given an integer array nums of unique elements, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n\nExample 2:\n\nInput: nums = [0]\nOutput: [[],[0]]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10\n-10 <= nums[i] <= 10\nAll the numbers of\u00a0nums are unique.\n\n",
    "starterCode": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "nums = [6,1,5,2,4]",
        "output": "[[], [4], [2], [2, 4], [5], [5, 4], [5, 2], [5, 2, 4], [1], [1, 4], [1, 2], [1, 2, 4], [1, 5], [1, 5, 4], [1, 5, 2], [1, 5, 2, 4], [6], [6, 4], [6, 2], [6, 2, 4], [6, 5], [6, 5, 4], [6, 5, 2], [6, 5, 2, 4], [6, 1], [6, 1, 4], [6, 1, 2], [6, 1, 2, 4], [6, 1, 5], [6, 1, 5, 4], [6, 1, 5, 2], [6, 1, 5, 2, 4]]"
      },
      {
        "input": "nums = [-2,-1,0,1,2]",
        "output": "[[], [2], [1], [1, 2], [0], [0, 2], [0, 1], [0, 1, 2], [-1], [-1, 2], [-1, 1], [-1, 1, 2], [-1, 0], [-1, 0, 2], [-1, 0, 1], [-1, 0, 1, 2], [-2], [-2, 2], [-2, 1], [-2, 1, 2], [-2, 0], [-2, 0, 2], [-2, 0, 1], [-2, 0, 1, 2], [-2, -1], [-2, -1, 2], [-2, -1, 1], [-2, -1, 1, 2], [-2, -1, 0], [-2, -1, 0, 2], [-2, -1, 0, 1], [-2, -1, 0, 1, 2]]"
      },
      {
        "input": "nums = [-2,-3,-1,0]",
        "output": "[[], [0], [-1], [-1, 0], [-3], [-3, 0], [-3, -1], [-3, -1, 0], [-2], [-2, 0], [-2, -1], [-2, -1, 0], [-2, -3], [-2, -3, 0], [-2, -3, -1], [-2, -3, -1, 0]]"
      },
      {
        "input": "nums = [-2,-3,-1]",
        "output": "[[], [-1], [-3], [-3, -1], [-2], [-2, -1], [-2, -3], [-2, -3, -1]]"
      },
      {
        "input": "nums = [6,2,8,1,3]",
        "output": "[[], [3], [1], [1, 3], [8], [8, 3], [8, 1], [8, 1, 3], [2], [2, 3], [2, 1], [2, 1, 3], [2, 8], [2, 8, 3], [2, 8, 1], [2, 8, 1, 3], [6], [6, 3], [6, 1], [6, 1, 3], [6, 8], [6, 8, 3], [6, 8, 1], [6, 8, 1, 3], [6, 2], [6, 2, 3], [6, 2, 1], [6, 2, 1, 3], [6, 2, 8], [6, 2, 8, 3], [6, 2, 8, 1], [6, 2, 8, 1, 3]]"
      },
      {
        "input": "nums = [2,4,6,8,10]",
        "output": "[[], [10], [8], [8, 10], [6], [6, 10], [6, 8], [6, 8, 10], [4], [4, 10], [4, 8], [4, 8, 10], [4, 6], [4, 6, 10], [4, 6, 8], [4, 6, 8, 10], [2], [2, 10], [2, 8], [2, 8, 10], [2, 6], [2, 6, 10], [2, 6, 8], [2, 6, 8, 10], [2, 4], [2, 4, 10], [2, 4, 8], [2, 4, 8, 10], [2, 4, 6], [2, 4, 6, 10], [2, 4, 6, 8], [2, 4, 6, 8, 10]]"
      },
      {
        "input": "nums = [1,3,5,7,9]",
        "output": "[[], [9], [7], [7, 9], [5], [5, 9], [5, 7], [5, 7, 9], [3], [3, 9], [3, 7], [3, 7, 9], [3, 5], [3, 5, 9], [3, 5, 7], [3, 5, 7, 9], [1], [1, 9], [1, 7], [1, 7, 9], [1, 5], [1, 5, 9], [1, 5, 7], [1, 5, 7, 9], [1, 3], [1, 3, 9], [1, 3, 7], [1, 3, 7, 9], [1, 3, 5], [1, 3, 5, 9], [1, 3, 5, 7], [1, 3, 5, 7, 9]]"
      },
      {
        "input": "nums = [10]",
        "output": "[[], [10]]"
      },
      {
        "input": "nums = [1]",
        "output": "[[], [1]]"
      },
      {
        "input": "nums = [-5,0,5]",
        "output": "[[], [5], [0], [0, 5], [-5], [-5, 5], [-5, 0], [-5, 0, 5]]"
      },
      {
        "input": "nums = [1,2,3,4]",
        "output": "[[], [4], [3], [3, 4], [2], [2, 4], [2, 3], [2, 3, 4], [1], [1, 4], [1, 3], [1, 3, 4], [1, 2], [1, 2, 4], [1, 2, 3], [1, 2, 3, 4]]"
      },
      {
        "input": "nums = [-5,-4,-3,-2,-1]",
        "output": "[[], [-1], [-2], [-2, -1], [-3], [-3, -1], [-3, -2], [-3, -2, -1], [-4], [-4, -1], [-4, -2], [-4, -2, -1], [-4, -3], [-4, -3, -1], [-4, -3, -2], [-4, -3, -2, -1], [-5], [-5, -1], [-5, -2], [-5, -2, -1], [-5, -3], [-5, -3, -1], [-5, -3, -2], [-5, -3, -2, -1], [-5, -4], [-5, -4, -1], [-5, -4, -2], [-5, -4, -2, -1], [-5, -4, -3], [-5, -4, -3, -1], [-5, -4, -3, -2], [-5, -4, -3, -2, -1]]"
      },
      {
        "input": "nums = [1,3,5,7,9,11]",
        "output": "[[], [11], [9], [9, 11], [7], [7, 11], [7, 9], [7, 9, 11], [5], [5, 11], [5, 9], [5, 9, 11], [5, 7], [5, 7, 11], [5, 7, 9], [5, 7, 9, 11], [3], [3, 11], [3, 9], [3, 9, 11], [3, 7], [3, 7, 11], [3, 7, 9], [3, 7, 9, 11], [3, 5], [3, 5, 11], [3, 5, 9], [3, 5, 9, 11], [3, 5, 7], [3, 5, 7, 11], [3, 5, 7, 9], [3, 5, 7, 9, 11], [1], [1, 11], [1, 9], [1, 9, 11], [1, 7], [1, 7, 11], [1, 7, 9], [1, 7, 9, 11], [1, 5], [1, 5, 11], [1, 5, 9], [1, 5, 9, 11], [1, 5, 7], [1, 5, 7, 11], [1, 5, 7, 9], [1, 5, 7, 9, 11], [1, 3], [1, 3, 11], [1, 3, 9], [1, 3, 9, 11], [1, 3, 7], [1, 3, 7, 11], [1, 3, 7, 9], [1, 3, 7, 9, 11], [1, 3, 5], [1, 3, 5, 11], [1, 3, 5, 9], [1, 3, 5, 9, 11], [1, 3, 5, 7], [1, 3, 5, 7, 11], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9, 11]]"
      },
      {
        "input": "nums = [5,-1,4]",
        "output": "[[], [4], [-1], [-1, 4], [5], [5, 4], [5, -1], [5, -1, 4]]"
      },
      {
        "input": "nums = [0]",
        "output": "[[], [0]]"
      },
      {
        "input": "nums = [-10,10]",
        "output": "[[], [10], [-10], [-10, 10]]"
      },
      {
        "input": "nums = [5,10,15]",
        "output": "[[], [15], [10], [10, 15], [5], [5, 15], [5, 10], [5, 10, 15]]"
      },
      {
        "input": "nums = [5,-1,2]",
        "output": "[[], [2], [-1], [-1, 2], [5], [5, 2], [5, -1], [5, -1, 2]]"
      },
      {
        "input": "nums = [10,-5,0,3]",
        "output": "[[], [3], [0], [0, 3], [-5], [-5, 3], [-5, 0], [-5, 0, 3], [10], [10, 3], [10, 0], [10, 0, 3], [10, -5], [10, -5, 3], [10, -5, 0], [10, -5, 0, 3]]"
      },
      {
        "input": "nums = [1,2]",
        "output": "[[], [2], [1], [1, 2]]"
      },
      {
        "input": "nums = [10,-10,0]",
        "output": "[[], [0], [-10], [-10, 0], [10], [10, 0], [10, -10], [10, -10, 0]]"
      },
      {
        "input": "nums = [1,2,3]",
        "output": "[[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]]"
      },
      {
        "input": "nums = [5,-1,3]",
        "output": "[[], [3], [-1], [-1, 3], [5], [5, 3], [5, -1], [5, -1, 3]]"
      },
      {
        "input": "nums = [7]",
        "output": "[[], [7]]"
      },
      {
        "input": "nums = [5,-3,7,1]",
        "output": "[[], [1], [7], [7, 1], [-3], [-3, 1], [-3, 7], [-3, 7, 1], [5], [5, 1], [5, 7], [5, 7, 1], [5, -3], [5, -3, 1], [5, -3, 7], [5, -3, 7, 1]]"
      },
      {
        "input": "nums = [3,1,2]",
        "output": "[[], [2], [1], [1, 2], [3], [3, 2], [3, 1], [3, 1, 2]]"
      },
      {
        "input": "nums = [-1,0,1]",
        "output": "[[], [1], [0], [0, 1], [-1], [-1, 1], [-1, 0], [-1, 0, 1]]"
      },
      {
        "input": "nums = [-2,-4,-6,-8]",
        "output": "[[], [-8], [-6], [-6, -8], [-4], [-4, -8], [-4, -6], [-4, -6, -8], [-2], [-2, -8], [-2, -6], [-2, -6, -8], [-2, -4], [-2, -4, -8], [-2, -4, -6], [-2, -4, -6, -8]]"
      },
      {
        "input": "nums = [2,4,6,8]",
        "output": "[[], [8], [6], [6, 8], [4], [4, 8], [4, 6], [4, 6, 8], [2], [2, 8], [2, 6], [2, 6, 8], [2, 4], [2, 4, 8], [2, 4, 6], [2, 4, 6, 8]]"
      },
      {
        "input": "nums = [-10, -5, -3, -1, 0, 1, 3, 5, 10]",
        "output": "[[], [10], [5], [5, 10], [3], [3, 10], [3, 5], [3, 5, 10], [1], [1, 10], [1, 5], [1, 5, 10], [1, 3], [1, 3, 10], [1, 3, 5], [1, 3, 5, 10], [0], [0, 10], [0, 5], [0, 5, 10], [0, 3], [0, 3, 10], [0, 3, 5], [0, 3, 5, 10], [0, 1], [0, 1, 10], [0, 1, 5], [0, 1, 5, 10], [0, 1, 3], [0, 1, 3, 10], [0, 1, 3, 5], [0, 1, 3, 5, 10], [-1], [-1, 10], [-1, 5], [-1, 5, 10], [-1, 3], [-1, 3, 10], [-1, 3, 5], [-1, 3, 5, 10], [-1, 1], [-1, 1, 10], [-1, 1, 5], [-1, 1, 5, 10], [-1, 1, 3], [-1, 1, 3, 10], [-1, 1, 3, 5], [-1, 1, 3, 5, 10], [-1, 0], [-1, 0, 10], [-1, 0, 5], [-1, 0, 5, 10], [-1, 0, 3], [-1, 0, 3, 10], [-1, 0, 3, 5], [-1, 0, 3, 5, 10], [-1, 0, 1], [-1, 0, 1, 10], [-1, 0, 1, 5], [-1, 0, 1, 5, 10], [-1, 0, 1, 3], [-1, 0, 1, 3, 10], [-1, 0, 1, 3, 5], [-1, 0, 1, 3, 5, 10], [-3], [-3, 10], [-3, 5], [-3, 5, 10], [-3, 3], [-3, 3, 10], [-3, 3, 5], [-3, 3, 5, 10], [-3, 1], [-3, 1, 10], [-3, 1, 5], [-3, 1, 5, 10], [-3, 1, 3], [-3, 1, 3, 10], [-3, 1, 3, 5], [-3, 1, 3, 5, 10], [-3, 0], [-3, 0, 10], [-3, 0, 5], [-3, 0, 5, 10], [-3, 0, 3], [-3, 0, 3, 10], [-3, 0, 3, 5], [-3, 0, 3, 5, 10], [-3, 0, 1], [-3, 0, 1, 10], [-3, 0, 1, 5], [-3, 0, 1, 5, 10], [-3, 0, 1, 3], [-3, 0, 1, 3, 10], [-3, 0, 1, 3, 5], [-3, 0, 1, 3, 5, 10], [-3, -1], [-3, -1, 10], [-3, -1, 5], [-3, -1, 5, 10], [-3, -1, 3], [-3, -1, 3, 10], [-3, -1, 3, 5], [-3, -1, 3, 5, 10], [-3, -1, 1], [-3, -1, 1, 10], [-3, -1, 1, 5], [-3, -1, 1, 5, 10], [-3, -1, 1, 3], [-3, -1, 1, 3, 10], [-3, -1, 1, 3, 5], [-3, -1, 1, 3, 5, 10], [-3, -1, 0], [-3, -1, 0, 10], [-3, -1, 0, 5], [-3, -1, 0, 5, 10], [-3, -1, 0, 3], [-3, -1, 0, 3, 10], [-3, -1, 0, 3, 5], [-3, -1, 0, 3, 5, 10], [-3, -1, 0, 1], [-3, -1, 0, 1, 10], [-3, -1, 0, 1, 5], [-3, -1, 0, 1, 5, 10], [-3, -1, 0, 1, 3], [-3, -1, 0, 1, 3, 10], [-3, -1, 0, 1, 3, 5], [-3, -1, 0, 1, 3, 5, 10], [-5], [-5, 10], [-5, 5], [-5, 5, 10], [-5, 3], [-5, 3, 10], [-5, 3, 5], [-5, 3, 5, 10], [-5, 1], [-5, 1, 10], [-5, 1, 5], [-5, 1, 5, 10], [-5, 1, 3], [-5, 1, 3, 10], [-5, 1, 3, 5], [-5, 1, 3, 5, 10], [-5, 0], [-5, 0, 10], [-5, 0, 5], [-5, 0, 5, 10], [-5, 0, 3], [-5, 0, 3, 10], [-5, 0, 3, 5], [-5, 0, 3, 5, 10], [-5, 0, 1], [-5, 0, 1, 10], [-5, 0, 1, 5], [-5, 0, 1, 5, 10], [-5, 0, 1, 3], [-5, 0, 1, 3, 10], [-5, 0, 1, 3, 5], [-5, 0, 1, 3, 5, 10], [-5, -1], [-5, -1, 10], [-5, -1, 5], [-5, -1, 5, 10], [-5, -1, 3], [-5, -1, 3, 10], [-5, -1, 3, 5], [-5, -1, 3, 5, 10], [-5, -1, 1], [-5, -1, 1, 10], [-5, -1, 1, 5], [-5, -1, 1, 5, 10], [-5, -1, 1, 3], [-5, -1, 1, 3, 10], [-5, -1, 1, 3, 5], [-5, -1, 1, 3, 5, 10], [-5, -1, 0], [-5, -1, 0, 10], [-5, -1, 0, 5], [-5, -1, 0, 5, 10], [-5, -1, 0, 3], [-5, -1, 0, 3, 10], [-5, -1, 0, 3, 5], [-5, -1, 0, 3, 5, 10], [-5, -1, 0, 1], [-5, -1, 0, 1, 10], [-5, -1, 0, 1, 5], [-5, -1, 0, 1, 5, 10], [-5, -1, 0, 1, 3], [-5, -1, 0, 1, 3, 10], [-5, -1, 0, 1, 3, 5], [-5, -1, 0, 1, 3, 5, 10], [-5, -3], [-5, -3, 10], [-5, -3, 5], [-5, -3, 5, 10], [-5, -3, 3], [-5, -3, 3, 10], [-5, -3, 3, 5], [-5, -3, 3, 5, 10], [-5, -3, 1], [-5, -3, 1, 10], [-5, -3, 1, 5], [-5, -3, 1, 5, 10], [-5, -3, 1, 3], [-5, -3, 1, 3, 10], [-5, -3, 1, 3, 5], [-5, -3, 1, 3, 5, 10], [-5, -3, 0], [-5, -3, 0, 10], [-5, -3, 0, 5], [-5, -3, 0, 5, 10], [-5, -3, 0, 3], [-5, -3, 0, 3, 10], [-5, -3, 0, 3, 5], [-5, -3, 0, 3, 5, 10], [-5, -3, 0, 1], [-5, -3, 0, 1, 10], [-5, -3, 0, 1, 5], [-5, -3, 0, 1, 5, 10], [-5, -3, 0, 1, 3], [-5, -3, 0, 1, 3, 10], [-5, -3, 0, 1, 3, 5], [-5, -3, 0, 1, 3, 5, 10], [-5, -3, -1], [-5, -3, -1, 10], [-5, -3, -1, 5], [-5, -3, -1, 5, 10], [-5, -3, -1, 3], [-5, -3, -1, 3, 10], [-5, -3, -1, 3, 5], [-5, -3, -1, 3, 5, 10], [-5, -3, -1, 1], [-5, -3, -1, 1, 10], [-5, -3, -1, 1, 5], [-5, -3, -1, 1, 5, 10], [-5, -3, -1, 1, 3], [-5, -3, -1, 1, 3, 10], [-5, -3, -1, 1, 3, 5], [-5, -3, -1, 1, 3, 5, 10], [-5, -3, -1, 0], [-5, -3, -1, 0, 10], [-5, -3, -1, 0, 5], [-5, -3, -1, 0, 5, 10], [-5, -3, -1, 0, 3], [-5, -3, -1, 0, 3, 10], [-5, -3, -1, 0, 3, 5], [-5, -3, -1, 0, 3, 5, 10], [-5, -3, -1, 0, 1], [-5, -3, -1, 0, 1, 10], [-5, -3, -1, 0, 1, 5], [-5, -3, -1, 0, 1, 5, 10], [-5, -3, -1, 0, 1, 3], [-5, -3, -1, 0, 1, 3, 10], [-5, -3, -1, 0, 1, 3, 5], [-5, -3, -1, 0, 1, 3, 5, 10], [-10], [-10, 10], [-10, 5], [-10, 5, 10], [-10, 3], [-10, 3, 10], [-10, 3, 5], [-10, 3, 5, 10], [-10, 1], [-10, 1, 10], [-10, 1, 5], [-10, 1, 5, 10], [-10, 1, 3], [-10, 1, 3, 10], [-10, 1, 3, 5], [-10, 1, 3, 5, 10], [-10, 0], [-10, 0, 10], [-10, 0, 5], [-10, 0, 5, 10], [-10, 0, 3], [-10, 0, 3, 10], [-10, 0, 3, 5], [-10, 0, 3, 5, 10], [-10, 0, 1], [-10, 0, 1, 10], [-10, 0, 1, 5], [-10, 0, 1, 5, 10], [-10, 0, 1, 3], [-10, 0, 1, 3, 10], [-10, 0, 1, 3, 5], [-10, 0, 1, 3, 5, 10], [-10, -1], [-10, -1, 10], [-10, -1, 5], [-10, -1, 5, 10], [-10, -1, 3], [-10, -1, 3, 10], [-10, -1, 3, 5], [-10, -1, 3, 5, 10], [-10, -1, 1], [-10, -1, 1, 10], [-10, -1, 1, 5], [-10, -1, 1, 5, 10], [-10, -1, 1, 3], [-10, -1, 1, 3, 10], [-10, -1, 1, 3, 5], [-10, -1, 1, 3, 5, 10], [-10, -1, 0], [-10, -1, 0, 10], [-10, -1, 0, 5], [-10, -1, 0, 5, 10], [-10, -1, 0, 3], [-10, -1, 0, 3, 10], [-10, -1, 0, 3, 5], [-10, -1, 0, 3, 5, 10], [-10, -1, 0, 1], [-10, -1, 0, 1, 10], [-10, -1, 0, 1, 5], [-10, -1, 0, 1, 5, 10], [-10, -1, 0, 1, 3], [-10, -1, 0, 1, 3, 10], [-10, -1, 0, 1, 3, 5], [-10, -1, 0, 1, 3, 5, 10], [-10, -3], [-10, -3, 10], [-10, -3, 5], [-10, -3, 5, 10], [-10, -3, 3], [-10, -3, 3, 10], [-10, -3, 3, 5], [-10, -3, 3, 5, 10], [-10, -3, 1], [-10, -3, 1, 10], [-10, -3, 1, 5], [-10, -3, 1, 5, 10], [-10, -3, 1, 3], [-10, -3, 1, 3, 10], [-10, -3, 1, 3, 5], [-10, -3, 1, 3, 5, 10], [-10, -3, 0], [-10, -3, 0, 10], [-10, -3, 0, 5], [-10, -3, 0, 5, 10], [-10, -3, 0, 3], [-10, -3, 0, 3, 10], [-10, -3, 0, 3, 5], [-10, -3, 0, 3, 5, 10], [-10, -3, 0, 1], [-10, -3, 0, 1, 10], [-10, -3, 0, 1, 5], [-10, -3, 0, 1, 5, 10], [-10, -3, 0, 1, 3], [-10, -3, 0, 1, 3, 10], [-10, -3, 0, 1, 3, 5], [-10, -3, 0, 1, 3, 5, 10], [-10, -3, -1], [-10, -3, -1, 10], [-10, -3, -1, 5], [-10, -3, -1, 5, 10], [-10, -3, -1, 3], [-10, -3, -1, 3, 10], [-10, -3, -1, 3, 5], [-10, -3, -1, 3, 5, 10], [-10, -3, -1, 1], [-10, -3, -1, 1, 10], [-10, -3, -1, 1, 5], [-10, -3, -1, 1, 5, 10], [-10, -3, -1, 1, 3], [-10, -3, -1, 1, 3, 10], [-10, -3, -1, 1, 3, 5], [-10, -3, -1, 1, 3, 5, 10], [-10, -3, -1, 0], [-10, -3, -1, 0, 10], [-10, -3, -1, 0, 5], [-10, -3, -1, 0, 5, 10], [-10, -3, -1, 0, 3], [-10, -3, -1, 0, 3, 10], [-10, -3, -1, 0, 3, 5], [-10, -3, -1, 0, 3, 5, 10], [-10, -3, -1, 0, 1], [-10, -3, -1, 0, 1, 10], [-10, -3, -1, 0, 1, 5], [-10, -3, -1, 0, 1, 5, 10], [-10, -3, -1, 0, 1, 3], [-10, -3, -1, 0, 1, 3, 10], [-10, -3, -1, 0, 1, 3, 5], [-10, -3, -1, 0, 1, 3, 5, 10], [-10, -5], [-10, -5, 10], [-10, -5, 5], [-10, -5, 5, 10], [-10, -5, 3], [-10, -5, 3, 10], [-10, -5, 3, 5], [-10, -5, 3, 5, 10], [-10, -5, 1], [-10, -5, 1, 10], [-10, -5, 1, 5], [-10, -5, 1, 5, 10], [-10, -5, 1, 3], [-10, -5, 1, 3, 10], [-10, -5, 1, 3, 5], [-10, -5, 1, 3, 5, 10], [-10, -5, 0], [-10, -5, 0, 10], [-10, -5, 0, 5], [-10, -5, 0, 5, 10], [-10, -5, 0, 3], [-10, -5, 0, 3, 10], [-10, -5, 0, 3, 5], [-10, -5, 0, 3, 5, 10], [-10, -5, 0, 1], [-10, -5, 0, 1, 10], [-10, -5, 0, 1, 5], [-10, -5, 0, 1, 5, 10], [-10, -5, 0, 1, 3], [-10, -5, 0, 1, 3, 10], [-10, -5, 0, 1, 3, 5], [-10, -5, 0, 1, 3, 5, 10], [-10, -5, -1], [-10, -5, -1, 10], [-10, -5, -1, 5], [-10, -5, -1, 5, 10], [-10, -5, -1, 3], [-10, -5, -1, 3, 10], [-10, -5, -1, 3, 5], [-10, -5, -1, 3, 5, 10], [-10, -5, -1, 1], [-10, -5, -1, 1, 10], [-10, -5, -1, 1, 5], [-10, -5, -1, 1, 5, 10], [-10, -5, -1, 1, 3], [-10, -5, -1, 1, 3, 10], [-10, -5, -1, 1, 3, 5], [-10, -5, -1, 1, 3, 5, 10], [-10, -5, -1, 0], [-10, -5, -1, 0, 10], [-10, -5, -1, 0, 5], [-10, -5, -1, 0, 5, 10], [-10, -5, -1, 0, 3], [-10, -5, -1, 0, 3, 10], [-10, -5, -1, 0, 3, 5], [-10, -5, -1, 0, 3, 5, 10], [-10, -5, -1, 0, 1], [-10, -5, -1, 0, 1, 10], [-10, -5, -1, 0, 1, 5], [-10, -5, -1, 0, 1, 5, 10], [-10, -5, -1, 0, 1, 3], [-10, -5, -1, 0, 1, 3, 10], [-10, -5, -1, 0, 1, 3, 5], [-10, -5, -1, 0, 1, 3, 5, 10], [-10, -5, -3], [-10, -5, -3, 10], [-10, -5, -3, 5], [-10, -5, -3, 5, 10], [-10, -5, -3, 3], [-10, -5, -3, 3, 10], [-10, -5, -3, 3, 5], [-10, -5, -3, 3, 5, 10], [-10, -5, -3, 1], [-10, -5, -3, 1, 10], [-10, -5, -3, 1, 5], [-10, -5, -3, 1, 5, 10], [-10, -5, -3, 1, 3], [-10, -5, -3, 1, 3, 10], [-10, -5, -3, 1, 3, 5], [-10, -5, -3, 1, 3, 5, 10], [-10, -5, -3, 0], [-10, -5, -3, 0, 10], [-10, -5, -3, 0, 5], [-10, -5, -3, 0, 5, 10], [-10, -5, -3, 0, 3], [-10, -5, -3, 0, 3, 10], [-10, -5, -3, 0, 3, 5], [-10, -5, -3, 0, 3, 5, 10], [-10, -5, -3, 0, 1], [-10, -5, -3, 0, 1, 10], [-10, -5, -3, 0, 1, 5], [-10, -5, -3, 0, 1, 5, 10], [-10, -5, -3, 0, 1, 3], [-10, -5, -3, 0, 1, 3, 10], [-10, -5, -3, 0, 1, 3, 5], [-10, -5, -3, 0, 1, 3, 5, 10], [-10, -5, -3, -1], [-10, -5, -3, -1, 10], [-10, -5, -3, -1, 5], [-10, -5, -3, -1, 5, 10], [-10, -5, -3, -1, 3], [-10, -5, -3, -1, 3, 10], [-10, -5, -3, -1, 3, 5], [-10, -5, -3, -1, 3, 5, 10], [-10, -5, -3, -1, 1], [-10, -5, -3, -1, 1, 10], [-10, -5, -3, -1, 1, 5], [-10, -5, -3, -1, 1, 5, 10], [-10, -5, -3, -1, 1, 3], [-10, -5, -3, -1, 1, 3, 10], [-10, -5, -3, -1, 1, 3, 5], [-10, -5, -3, -1, 1, 3, 5, 10], [-10, -5, -3, -1, 0], [-10, -5, -3, -1, 0, 10], [-10, -5, -3, -1, 0, 5], [-10, -5, -3, -1, 0, 5, 10], [-10, -5, -3, -1, 0, 3], [-10, -5, -3, -1, 0, 3, 10], [-10, -5, -3, -1, 0, 3, 5], [-10, -5, -3, -1, 0, 3, 5, 10], [-10, -5, -3, -1, 0, 1], [-10, -5, -3, -1, 0, 1, 10], [-10, -5, -3, -1, 0, 1, 5], [-10, -5, -3, -1, 0, 1, 5, 10], [-10, -5, -3, -1, 0, 1, 3], [-10, -5, -3, -1, 0, 1, 3, 10], [-10, -5, -3, -1, 0, 1, 3, 5], [-10, -5, -3, -1, 0, 1, 3, 5, 10]]"
      },
      {
        "input": "nums = [10,-5,0,7]",
        "output": "[[], [7], [0], [0, 7], [-5], [-5, 7], [-5, 0], [-5, 0, 7], [10], [10, 7], [10, 0], [10, 0, 7], [10, -5], [10, -5, 7], [10, -5, 0], [10, -5, 0, 7]]"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000]",
        "output": "[[], [10000], [1000], [1000, 10000], [100], [100, 10000], [100, 1000], [100, 1000, 10000], [10], [10, 10000], [10, 1000], [10, 1000, 10000], [10, 100], [10, 100, 10000], [10, 100, 1000], [10, 100, 1000, 10000], [1], [1, 10000], [1, 1000], [1, 1000, 10000], [1, 100], [1, 100, 10000], [1, 100, 1000], [1, 100, 1000, 10000], [1, 10], [1, 10, 10000], [1, 10, 1000], [1, 10, 1000, 10000], [1, 10, 100], [1, 10, 100, 10000], [1, 10, 100, 1000], [1, 10, 100, 1000, 10000]]"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, -1, -3, -5, -7, -9]",
        "output": "[[], [-9], [-7], [-7, -9], [-5], [-5, -9], [-5, -7], [-5, -7, -9], [-3], [-3, -9], [-3, -7], [-3, -7, -9], [-3, -5], [-3, -5, -9], [-3, -5, -7], [-3, -5, -7, -9], [-1], [-1, -9], [-1, -7], [-1, -7, -9], [-1, -5], [-1, -5, -9], [-1, -5, -7], [-1, -5, -7, -9], [-1, -3], [-1, -3, -9], [-1, -3, -7], [-1, -3, -7, -9], [-1, -3, -5], [-1, -3, -5, -9], [-1, -3, -5, -7], [-1, -3, -5, -7, -9], [1], [1, -9], [1, -7], [1, -7, -9], [1, -5], [1, -5, -9], [1, -5, -7], [1, -5, -7, -9], [1, -3], [1, -3, -9], [1, -3, -7], [1, -3, -7, -9], [1, -3, -5], [1, -3, -5, -9], [1, -3, -5, -7], [1, -3, -5, -7, -9], [1, -1], [1, -1, -9], [1, -1, -7], [1, -1, -7, -9], [1, -1, -5], [1, -1, -5, -9], [1, -1, -5, -7], [1, -1, -5, -7, -9], [1, -1, -3], [1, -1, -3, -9], [1, -1, -3, -7], [1, -1, -3, -7, -9], [1, -1, -3, -5], [1, -1, -3, -5, -9], [1, -1, -3, -5, -7], [1, -1, -3, -5, -7, -9], [3], [3, -9], [3, -7], [3, -7, -9], [3, -5], [3, -5, -9], [3, -5, -7], [3, -5, -7, -9], [3, -3], [3, -3, -9], [3, -3, -7], [3, -3, -7, -9], [3, -3, -5], [3, -3, -5, -9], [3, -3, -5, -7], [3, -3, -5, -7, -9], [3, -1], [3, -1, -9], [3, -1, -7], [3, -1, -7, -9], [3, -1, -5], [3, -1, -5, -9], [3, -1, -5, -7], [3, -1, -5, -7, -9], [3, -1, -3], [3, -1, -3, -9], [3, -1, -3, -7], [3, -1, -3, -7, -9], [3, -1, -3, -5], [3, -1, -3, -5, -9], [3, -1, -3, -5, -7], [3, -1, -3, -5, -7, -9], [3, 1], [3, 1, -9], [3, 1, -7], [3, 1, -7, -9], [3, 1, -5], [3, 1, -5, -9], [3, 1, -5, -7], [3, 1, -5, -7, -9], [3, 1, -3], [3, 1, -3, -9], [3, 1, -3, -7], [3, 1, -3, -7, -9], [3, 1, -3, -5], [3, 1, -3, -5, -9], [3, 1, -3, -5, -7], [3, 1, -3, -5, -7, -9], [3, 1, -1], [3, 1, -1, -9], [3, 1, -1, -7], [3, 1, -1, -7, -9], [3, 1, -1, -5], [3, 1, -1, -5, -9], [3, 1, -1, -5, -7], [3, 1, -1, -5, -7, -9], [3, 1, -1, -3], [3, 1, -1, -3, -9], [3, 1, -1, -3, -7], [3, 1, -1, -3, -7, -9], [3, 1, -1, -3, -5], [3, 1, -1, -3, -5, -9], [3, 1, -1, -3, -5, -7], [3, 1, -1, -3, -5, -7, -9], [5], [5, -9], [5, -7], [5, -7, -9], [5, -5], [5, -5, -9], [5, -5, -7], [5, -5, -7, -9], [5, -3], [5, -3, -9], [5, -3, -7], [5, -3, -7, -9], [5, -3, -5], [5, -3, -5, -9], [5, -3, -5, -7], [5, -3, -5, -7, -9], [5, -1], [5, -1, -9], [5, -1, -7], [5, -1, -7, -9], [5, -1, -5], [5, -1, -5, -9], [5, -1, -5, -7], [5, -1, -5, -7, -9], [5, -1, -3], [5, -1, -3, -9], [5, -1, -3, -7], [5, -1, -3, -7, -9], [5, -1, -3, -5], [5, -1, -3, -5, -9], [5, -1, -3, -5, -7], [5, -1, -3, -5, -7, -9], [5, 1], [5, 1, -9], [5, 1, -7], [5, 1, -7, -9], [5, 1, -5], [5, 1, -5, -9], [5, 1, -5, -7], [5, 1, -5, -7, -9], [5, 1, -3], [5, 1, -3, -9], [5, 1, -3, -7], [5, 1, -3, -7, -9], [5, 1, -3, -5], [5, 1, -3, -5, -9], [5, 1, -3, -5, -7], [5, 1, -3, -5, -7, -9], [5, 1, -1], [5, 1, -1, -9], [5, 1, -1, -7], [5, 1, -1, -7, -9], [5, 1, -1, -5], [5, 1, -1, -5, -9], [5, 1, -1, -5, -7], [5, 1, -1, -5, -7, -9], [5, 1, -1, -3], [5, 1, -1, -3, -9], [5, 1, -1, -3, -7], [5, 1, -1, -3, -7, -9], [5, 1, -1, -3, -5], [5, 1, -1, -3, -5, -9], [5, 1, -1, -3, -5, -7], [5, 1, -1, -3, -5, -7, -9], [5, 3], [5, 3, -9], [5, 3, -7], [5, 3, -7, -9], [5, 3, -5], [5, 3, -5, -9], [5, 3, -5, -7], [5, 3, -5, -7, -9], [5, 3, -3], [5, 3, -3, -9], [5, 3, -3, -7], [5, 3, -3, -7, -9], [5, 3, -3, -5], [5, 3, -3, -5, -9], [5, 3, -3, -5, -7], [5, 3, -3, -5, -7, -9], [5, 3, -1], [5, 3, -1, -9], [5, 3, -1, -7], [5, 3, -1, -7, -9], [5, 3, -1, -5], [5, 3, -1, -5, -9], [5, 3, -1, -5, -7], [5, 3, -1, -5, -7, -9], [5, 3, -1, -3], [5, 3, -1, -3, -9], [5, 3, -1, -3, -7], [5, 3, -1, -3, -7, -9], [5, 3, -1, -3, -5], [5, 3, -1, -3, -5, -9], [5, 3, -1, -3, -5, -7], [5, 3, -1, -3, -5, -7, -9], [5, 3, 1], [5, 3, 1, -9], [5, 3, 1, -7], [5, 3, 1, -7, -9], [5, 3, 1, -5], [5, 3, 1, -5, -9], [5, 3, 1, -5, -7], [5, 3, 1, -5, -7, -9], [5, 3, 1, -3], [5, 3, 1, -3, -9], [5, 3, 1, -3, -7], [5, 3, 1, -3, -7, -9], [5, 3, 1, -3, -5], [5, 3, 1, -3, -5, -9], [5, 3, 1, -3, -5, -7], [5, 3, 1, -3, -5, -7, -9], [5, 3, 1, -1], [5, 3, 1, -1, -9], [5, 3, 1, -1, -7], [5, 3, 1, -1, -7, -9], [5, 3, 1, -1, -5], [5, 3, 1, -1, -5, -9], [5, 3, 1, -1, -5, -7], [5, 3, 1, -1, -5, -7, -9], [5, 3, 1, -1, -3], [5, 3, 1, -1, -3, -9], [5, 3, 1, -1, -3, -7], [5, 3, 1, -1, -3, -7, -9], [5, 3, 1, -1, -3, -5], [5, 3, 1, -1, -3, -5, -9], [5, 3, 1, -1, -3, -5, -7], [5, 3, 1, -1, -3, -5, -7, -9], [7], [7, -9], [7, -7], [7, -7, -9], [7, -5], [7, -5, -9], [7, -5, -7], [7, -5, -7, -9], [7, -3], [7, -3, -9], [7, -3, -7], [7, -3, -7, -9], [7, -3, -5], [7, -3, -5, -9], [7, -3, -5, -7], [7, -3, -5, -7, -9], [7, -1], [7, -1, -9], [7, -1, -7], [7, -1, -7, -9], [7, -1, -5], [7, -1, -5, -9], [7, -1, -5, -7], [7, -1, -5, -7, -9], [7, -1, -3], [7, -1, -3, -9], [7, -1, -3, -7], [7, -1, -3, -7, -9], [7, -1, -3, -5], [7, -1, -3, -5, -9], [7, -1, -3, -5, -7], [7, -1, -3, -5, -7, -9], [7, 1], [7, 1, -9], [7, 1, -7], [7, 1, -7, -9], [7, 1, -5], [7, 1, -5, -9], [7, 1, -5, -7], [7, 1, -5, -7, -9], [7, 1, -3], [7, 1, -3, -9], [7, 1, -3, -7], [7, 1, -3, -7, -9], [7, 1, -3, -5], [7, 1, -3, -5, -9], [7, 1, -3, -5, -7], [7, 1, -3, -5, -7, -9], [7, 1, -1], [7, 1, -1, -9], [7, 1, -1, -7], [7, 1, -1, -7, -9], [7, 1, -1, -5], [7, 1, -1, -5, -9], [7, 1, -1, -5, -7], [7, 1, -1, -5, -7, -9], [7, 1, -1, -3], [7, 1, -1, -3, -9], [7, 1, -1, -3, -7], [7, 1, -1, -3, -7, -9], [7, 1, -1, -3, -5], [7, 1, -1, -3, -5, -9], [7, 1, -1, -3, -5, -7], [7, 1, -1, -3, -5, -7, -9], [7, 3], [7, 3, -9], [7, 3, -7], [7, 3, -7, -9], [7, 3, -5], [7, 3, -5, -9], [7, 3, -5, -7], [7, 3, -5, -7, -9], [7, 3, -3], [7, 3, -3, -9], [7, 3, -3, -7], [7, 3, -3, -7, -9], [7, 3, -3, -5], [7, 3, -3, -5, -9], [7, 3, -3, -5, -7], [7, 3, -3, -5, -7, -9], [7, 3, -1], [7, 3, -1, -9], [7, 3, -1, -7], [7, 3, -1, -7, -9], [7, 3, -1, -5], [7, 3, -1, -5, -9], [7, 3, -1, -5, -7], [7, 3, -1, -5, -7, -9], [7, 3, -1, -3], [7, 3, -1, -3, -9], [7, 3, -1, -3, -7], [7, 3, -1, -3, -7, -9], [7, 3, -1, -3, -5], [7, 3, -1, -3, -5, -9], [7, 3, -1, -3, -5, -7], [7, 3, -1, -3, -5, -7, -9], [7, 3, 1], [7, 3, 1, -9], [7, 3, 1, -7], [7, 3, 1, -7, -9], [7, 3, 1, -5], [7, 3, 1, -5, -9], [7, 3, 1, -5, -7], [7, 3, 1, -5, -7, -9], [7, 3, 1, -3], [7, 3, 1, -3, -9], [7, 3, 1, -3, -7], [7, 3, 1, -3, -7, -9], [7, 3, 1, -3, -5], [7, 3, 1, -3, -5, -9], [7, 3, 1, -3, -5, -7], [7, 3, 1, -3, -5, -7, -9], [7, 3, 1, -1], [7, 3, 1, -1, -9], [7, 3, 1, -1, -7], [7, 3, 1, -1, -7, -9], [7, 3, 1, -1, -5], [7, 3, 1, -1, -5, -9], [7, 3, 1, -1, -5, -7], [7, 3, 1, -1, -5, -7, -9], [7, 3, 1, -1, -3], [7, 3, 1, -1, -3, -9], [7, 3, 1, -1, -3, -7], [7, 3, 1, -1, -3, -7, -9], [7, 3, 1, -1, -3, -5], [7, 3, 1, -1, -3, -5, -9], [7, 3, 1, -1, -3, -5, -7], [7, 3, 1, -1, -3, -5, -7, -9], [7, 5], [7, 5, -9], [7, 5, -7], [7, 5, -7, -9], [7, 5, -5], [7, 5, -5, -9], [7, 5, -5, -7], [7, 5, -5, -7, -9], [7, 5, -3], [7, 5, -3, -9], [7, 5, -3, -7], [7, 5, -3, -7, -9], [7, 5, -3, -5], [7, 5, -3, -5, -9], [7, 5, -3, -5, -7], [7, 5, -3, -5, -7, -9], [7, 5, -1], [7, 5, -1, -9], [7, 5, -1, -7], [7, 5, -1, -7, -9], [7, 5, -1, -5], [7, 5, -1, -5, -9], [7, 5, -1, -5, -7], [7, 5, -1, -5, -7, -9], [7, 5, -1, -3], [7, 5, -1, -3, -9], [7, 5, -1, -3, -7], [7, 5, -1, -3, -7, -9], [7, 5, -1, -3, -5], [7, 5, -1, -3, -5, -9], [7, 5, -1, -3, -5, -7], [7, 5, -1, -3, -5, -7, -9], [7, 5, 1], [7, 5, 1, -9], [7, 5, 1, -7], [7, 5, 1, -7, -9], [7, 5, 1, -5], [7, 5, 1, -5, -9], [7, 5, 1, -5, -7], [7, 5, 1, -5, -7, -9], [7, 5, 1, -3], [7, 5, 1, -3, -9], [7, 5, 1, -3, -7], [7, 5, 1, -3, -7, -9], [7, 5, 1, -3, -5], [7, 5, 1, -3, -5, -9], [7, 5, 1, -3, -5, -7], [7, 5, 1, -3, -5, -7, -9], [7, 5, 1, -1], [7, 5, 1, -1, -9], [7, 5, 1, -1, -7], [7, 5, 1, -1, -7, -9], [7, 5, 1, -1, -5], [7, 5, 1, -1, -5, -9], [7, 5, 1, -1, -5, -7], [7, 5, 1, -1, -5, -7, -9], [7, 5, 1, -1, -3], [7, 5, 1, -1, -3, -9], [7, 5, 1, -1, -3, -7], [7, 5, 1, -1, -3, -7, -9], [7, 5, 1, -1, -3, -5], [7, 5, 1, -1, -3, -5, -9], [7, 5, 1, -1, -3, -5, -7], [7, 5, 1, -1, -3, -5, -7, -9], [7, 5, 3], [7, 5, 3, -9], [7, 5, 3, -7], [7, 5, 3, -7, -9], [7, 5, 3, -5], [7, 5, 3, -5, -9], [7, 5, 3, -5, -7], [7, 5, 3, -5, -7, -9], [7, 5, 3, -3], [7, 5, 3, -3, -9], [7, 5, 3, -3, -7], [7, 5, 3, -3, -7, -9], [7, 5, 3, -3, -5], [7, 5, 3, -3, -5, -9], [7, 5, 3, -3, -5, -7], [7, 5, 3, -3, -5, -7, -9], [7, 5, 3, -1], [7, 5, 3, -1, -9], [7, 5, 3, -1, -7], [7, 5, 3, -1, -7, -9], [7, 5, 3, -1, -5], [7, 5, 3, -1, -5, -9], [7, 5, 3, -1, -5, -7], [7, 5, 3, -1, -5, -7, -9], [7, 5, 3, -1, -3], [7, 5, 3, -1, -3, -9], [7, 5, 3, -1, -3, -7], [7, 5, 3, -1, -3, -7, -9], [7, 5, 3, -1, -3, -5], [7, 5, 3, -1, -3, -5, -9], [7, 5, 3, -1, -3, -5, -7], [7, 5, 3, -1, -3, -5, -7, -9], [7, 5, 3, 1], [7, 5, 3, 1, -9], [7, 5, 3, 1, -7], [7, 5, 3, 1, -7, -9], [7, 5, 3, 1, -5], [7, 5, 3, 1, -5, -9], [7, 5, 3, 1, -5, -7], [7, 5, 3, 1, -5, -7, -9], [7, 5, 3, 1, -3], [7, 5, 3, 1, -3, -9], [7, 5, 3, 1, -3, -7], [7, 5, 3, 1, -3, -7, -9], [7, 5, 3, 1, -3, -5], [7, 5, 3, 1, -3, -5, -9], [7, 5, 3, 1, -3, -5, -7], [7, 5, 3, 1, -3, -5, -7, -9], [7, 5, 3, 1, -1], [7, 5, 3, 1, -1, -9], [7, 5, 3, 1, -1, -7], [7, 5, 3, 1, -1, -7, -9], [7, 5, 3, 1, -1, -5], [7, 5, 3, 1, -1, -5, -9], [7, 5, 3, 1, -1, -5, -7], [7, 5, 3, 1, -1, -5, -7, -9], [7, 5, 3, 1, -1, -3], [7, 5, 3, 1, -1, -3, -9], [7, 5, 3, 1, -1, -3, -7], [7, 5, 3, 1, -1, -3, -7, -9], [7, 5, 3, 1, -1, -3, -5], [7, 5, 3, 1, -1, -3, -5, -9], [7, 5, 3, 1, -1, -3, -5, -7], [7, 5, 3, 1, -1, -3, -5, -7, -9], [9], [9, -9], [9, -7], [9, -7, -9], [9, -5], [9, -5, -9], [9, -5, -7], [9, -5, -7, -9], [9, -3], [9, -3, -9], [9, -3, -7], [9, -3, -7, -9], [9, -3, -5], [9, -3, -5, -9], [9, -3, -5, -7], [9, -3, -5, -7, -9], [9, -1], [9, -1, -9], [9, -1, -7], [9, -1, -7, -9], [9, -1, -5], [9, -1, -5, -9], [9, -1, -5, -7], [9, -1, -5, -7, -9], [9, -1, -3], [9, -1, -3, -9], [9, -1, -3, -7], [9, -1, -3, -7, -9], [9, -1, -3, -5], [9, -1, -3, -5, -9], [9, -1, -3, -5, -7], [9, -1, -3, -5, -7, -9], [9, 1], [9, 1, -9], [9, 1, -7], [9, 1, -7, -9], [9, 1, -5], [9, 1, -5, -9], [9, 1, -5, -7], [9, 1, -5, -7, -9], [9, 1, -3], [9, 1, -3, -9], [9, 1, -3, -7], [9, 1, -3, -7, -9], [9, 1, -3, -5], [9, 1, -3, -5, -9], [9, 1, -3, -5, -7], [9, 1, -3, -5, -7, -9], [9, 1, -1], [9, 1, -1, -9], [9, 1, -1, -7], [9, 1, -1, -7, -9], [9, 1, -1, -5], [9, 1, -1, -5, -9], [9, 1, -1, -5, -7], [9, 1, -1, -5, -7, -9], [9, 1, -1, -3], [9, 1, -1, -3, -9], [9, 1, -1, -3, -7], [9, 1, -1, -3, -7, -9], [9, 1, -1, -3, -5], [9, 1, -1, -3, -5, -9], [9, 1, -1, -3, -5, -7], [9, 1, -1, -3, -5, -7, -9], [9, 3], [9, 3, -9], [9, 3, -7], [9, 3, -7, -9], [9, 3, -5], [9, 3, -5, -9], [9, 3, -5, -7], [9, 3, -5, -7, -9], [9, 3, -3], [9, 3, -3, -9], [9, 3, -3, -7], [9, 3, -3, -7, -9], [9, 3, -3, -5], [9, 3, -3, -5, -9], [9, 3, -3, -5, -7], [9, 3, -3, -5, -7, -9], [9, 3, -1], [9, 3, -1, -9], [9, 3, -1, -7], [9, 3, -1, -7, -9], [9, 3, -1, -5], [9, 3, -1, -5, -9], [9, 3, -1, -5, -7], [9, 3, -1, -5, -7, -9], [9, 3, -1, -3], [9, 3, -1, -3, -9], [9, 3, -1, -3, -7], [9, 3, -1, -3, -7, -9], [9, 3, -1, -3, -5], [9, 3, -1, -3, -5, -9], [9, 3, -1, -3, -5, -7], [9, 3, -1, -3, -5, -7, -9], [9, 3, 1], [9, 3, 1, -9], [9, 3, 1, -7], [9, 3, 1, -7, -9], [9, 3, 1, -5], [9, 3, 1, -5, -9], [9, 3, 1, -5, -7], [9, 3, 1, -5, -7, -9], [9, 3, 1, -3], [9, 3, 1, -3, -9], [9, 3, 1, -3, -7], [9, 3, 1, -3, -7, -9], [9, 3, 1, -3, -5], [9, 3, 1, -3, -5, -9], [9, 3, 1, -3, -5, -7], [9, 3, 1, -3, -5, -7, -9], [9, 3, 1, -1], [9, 3, 1, -1, -9], [9, 3, 1, -1, -7], [9, 3, 1, -1, -7, -9], [9, 3, 1, -1, -5], [9, 3, 1, -1, -5, -9], [9, 3, 1, -1, -5, -7], [9, 3, 1, -1, -5, -7, -9], [9, 3, 1, -1, -3], [9, 3, 1, -1, -3, -9], [9, 3, 1, -1, -3, -7], [9, 3, 1, -1, -3, -7, -9], [9, 3, 1, -1, -3, -5], [9, 3, 1, -1, -3, -5, -9], [9, 3, 1, -1, -3, -5, -7], [9, 3, 1, -1, -3, -5, -7, -9], [9, 5], [9, 5, -9], [9, 5, -7], [9, 5, -7, -9], [9, 5, -5], [9, 5, -5, -9], [9, 5, -5, -7], [9, 5, -5, -7, -9], [9, 5, -3], [9, 5, -3, -9], [9, 5, -3, -7], [9, 5, -3, -7, -9], [9, 5, -3, -5], [9, 5, -3, -5, -9], [9, 5, -3, -5, -7], [9, 5, -3, -5, -7, -9], [9, 5, -1], [9, 5, -1, -9], [9, 5, -1, -7], [9, 5, -1, -7, -9], [9, 5, -1, -5], [9, 5, -1, -5, -9], [9, 5, -1, -5, -7], [9, 5, -1, -5, -7, -9], [9, 5, -1, -3], [9, 5, -1, -3, -9], [9, 5, -1, -3, -7], [9, 5, -1, -3, -7, -9], [9, 5, -1, -3, -5], [9, 5, -1, -3, -5, -9], [9, 5, -1, -3, -5, -7], [9, 5, -1, -3, -5, -7, -9], [9, 5, 1], [9, 5, 1, -9], [9, 5, 1, -7], [9, 5, 1, -7, -9], [9, 5, 1, -5], [9, 5, 1, -5, -9], [9, 5, 1, -5, -7], [9, 5, 1, -5, -7, -9], [9, 5, 1, -3], [9, 5, 1, -3, -9], [9, 5, 1, -3, -7], [9, 5, 1, -3, -7, -9], [9, 5, 1, -3, -5], [9, 5, 1, -3, -5, -9], [9, 5, 1, -3, -5, -7], [9, 5, 1, -3, -5, -7, -9], [9, 5, 1, -1], [9, 5, 1, -1, -9], [9, 5, 1, -1, -7], [9, 5, 1, -1, -7, -9], [9, 5, 1, -1, -5], [9, 5, 1, -1, -5, -9], [9, 5, 1, -1, -5, -7], [9, 5, 1, -1, -5, -7, -9], [9, 5, 1, -1, -3], [9, 5, 1, -1, -3, -9], [9, 5, 1, -1, -3, -7], [9, 5, 1, -1, -3, -7, -9], [9, 5, 1, -1, -3, -5], [9, 5, 1, -1, -3, -5, -9], [9, 5, 1, -1, -3, -5, -7], [9, 5, 1, -1, -3, -5, -7, -9], [9, 5, 3], [9, 5, 3, -9], [9, 5, 3, -7], [9, 5, 3, -7, -9], [9, 5, 3, -5], [9, 5, 3, -5, -9], [9, 5, 3, -5, -7], [9, 5, 3, -5, -7, -9], [9, 5, 3, -3], [9, 5, 3, -3, -9], [9, 5, 3, -3, -7], [9, 5, 3, -3, -7, -9], [9, 5, 3, -3, -5], [9, 5, 3, -3, -5, -9], [9, 5, 3, -3, -5, -7], [9, 5, 3, -3, -5, -7, -9], [9, 5, 3, -1], [9, 5, 3, -1, -9], [9, 5, 3, -1, -7], [9, 5, 3, -1, -7, -9], [9, 5, 3, -1, -5], [9, 5, 3, -1, -5, -9], [9, 5, 3, -1, -5, -7], [9, 5, 3, -1, -5, -7, -9], [9, 5, 3, -1, -3], [9, 5, 3, -1, -3, -9], [9, 5, 3, -1, -3, -7], [9, 5, 3, -1, -3, -7, -9], [9, 5, 3, -1, -3, -5], [9, 5, 3, -1, -3, -5, -9], [9, 5, 3, -1, -3, -5, -7], [9, 5, 3, -1, -3, -5, -7, -9], [9, 5, 3, 1], [9, 5, 3, 1, -9], [9, 5, 3, 1, -7], [9, 5, 3, 1, -7, -9], [9, 5, 3, 1, -5], [9, 5, 3, 1, -5, -9], [9, 5, 3, 1, -5, -7], [9, 5, 3, 1, -5, -7, -9], [9, 5, 3, 1, -3], [9, 5, 3, 1, -3, -9], [9, 5, 3, 1, -3, -7], [9, 5, 3, 1, -3, -7, -9], [9, 5, 3, 1, -3, -5], [9, 5, 3, 1, -3, -5, -9], [9, 5, 3, 1, -3, -5, -7], [9, 5, 3, 1, -3, -5, -7, -9], [9, 5, 3, 1, -1], [9, 5, 3, 1, -1, -9], [9, 5, 3, 1, -1, -7], [9, 5, 3, 1, -1, -7, -9], [9, 5, 3, 1, -1, -5], [9, 5, 3, 1, -1, -5, -9], [9, 5, 3, 1, -1, -5, -7], [9, 5, 3, 1, -1, -5, -7, -9], [9, 5, 3, 1, -1, -3], [9, 5, 3, 1, -1, -3, -9], [9, 5, 3, 1, -1, -3, -7], [9, 5, 3, 1, -1, -3, -7, -9], [9, 5, 3, 1, -1, -3, -5], [9, 5, 3, 1, -1, -3, -5, -9], [9, 5, 3, 1, -1, -3, -5, -7], [9, 5, 3, 1, -1, -3, -5, -7, -9], [9, 7], [9, 7, -9], [9, 7, -7], [9, 7, -7, -9], [9, 7, -5], [9, 7, -5, -9], [9, 7, -5, -7], [9, 7, -5, -7, -9], [9, 7, -3], [9, 7, -3, -9], [9, 7, -3, -7], [9, 7, -3, -7, -9], [9, 7, -3, -5], [9, 7, -3, -5, -9], [9, 7, -3, -5, -7], [9, 7, -3, -5, -7, -9], [9, 7, -1], [9, 7, -1, -9], [9, 7, -1, -7], [9, 7, -1, -7, -9], [9, 7, -1, -5], [9, 7, -1, -5, -9], [9, 7, -1, -5, -7], [9, 7, -1, -5, -7, -9], [9, 7, -1, -3], [9, 7, -1, -3, -9], [9, 7, -1, -3, -7], [9, 7, -1, -3, -7, -9], [9, 7, -1, -3, -5], [9, 7, -1, -3, -5, -9], [9, 7, -1, -3, -5, -7], [9, 7, -1, -3, -5, -7, -9], [9, 7, 1], [9, 7, 1, -9], [9, 7, 1, -7], [9, 7, 1, -7, -9], [9, 7, 1, -5], [9, 7, 1, -5, -9], [9, 7, 1, -5, -7], [9, 7, 1, -5, -7, -9], [9, 7, 1, -3], [9, 7, 1, -3, -9], [9, 7, 1, -3, -7], [9, 7, 1, -3, -7, -9], [9, 7, 1, -3, -5], [9, 7, 1, -3, -5, -9], [9, 7, 1, -3, -5, -7], [9, 7, 1, -3, -5, -7, -9], [9, 7, 1, -1], [9, 7, 1, -1, -9], [9, 7, 1, -1, -7], [9, 7, 1, -1, -7, -9], [9, 7, 1, -1, -5], [9, 7, 1, -1, -5, -9], [9, 7, 1, -1, -5, -7], [9, 7, 1, -1, -5, -7, -9], [9, 7, 1, -1, -3], [9, 7, 1, -1, -3, -9], [9, 7, 1, -1, -3, -7], [9, 7, 1, -1, -3, -7, -9], [9, 7, 1, -1, -3, -5], [9, 7, 1, -1, -3, -5, -9], [9, 7, 1, -1, -3, -5, -7], [9, 7, 1, -1, -3, -5, -7, -9], [9, 7, 3], [9, 7, 3, -9], [9, 7, 3, -7], [9, 7, 3, -7, -9], [9, 7, 3, -5], [9, 7, 3, -5, -9], [9, 7, 3, -5, -7], [9, 7, 3, -5, -7, -9], [9, 7, 3, -3], [9, 7, 3, -3, -9], [9, 7, 3, -3, -7], [9, 7, 3, -3, -7, -9], [9, 7, 3, -3, -5], [9, 7, 3, -3, -5, -9], [9, 7, 3, -3, -5, -7], [9, 7, 3, -3, -5, -7, -9], [9, 7, 3, -1], [9, 7, 3, -1, -9], [9, 7, 3, -1, -7], [9, 7, 3, -1, -7, -9], [9, 7, 3, -1, -5], [9, 7, 3, -1, -5, -9], [9, 7, 3, -1, -5, -7], [9, 7, 3, -1, -5, -7, -9], [9, 7, 3, -1, -3], [9, 7, 3, -1, -3, -9], [9, 7, 3, -1, -3, -7], [9, 7, 3, -1, -3, -7, -9], [9, 7, 3, -1, -3, -5], [9, 7, 3, -1, -3, -5, -9], [9, 7, 3, -1, -3, -5, -7], [9, 7, 3, -1, -3, -5, -7, -9], [9, 7, 3, 1], [9, 7, 3, 1, -9], [9, 7, 3, 1, -7], [9, 7, 3, 1, -7, -9], [9, 7, 3, 1, -5], [9, 7, 3, 1, -5, -9], [9, 7, 3, 1, -5, -7], [9, 7, 3, 1, -5, -7, -9], [9, 7, 3, 1, -3], [9, 7, 3, 1, -3, -9], [9, 7, 3, 1, -3, -7], [9, 7, 3, 1, -3, -7, -9], [9, 7, 3, 1, -3, -5], [9, 7, 3, 1, -3, -5, -9], [9, 7, 3, 1, -3, -5, -7], [9, 7, 3, 1, -3, -5, -7, -9], [9, 7, 3, 1, -1], [9, 7, 3, 1, -1, -9], [9, 7, 3, 1, -1, -7], [9, 7, 3, 1, -1, -7, -9], [9, 7, 3, 1, -1, -5], [9, 7, 3, 1, -1, -5, -9], [9, 7, 3, 1, -1, -5, -7], [9, 7, 3, 1, -1, -5, -7, -9], [9, 7, 3, 1, -1, -3], [9, 7, 3, 1, -1, -3, -9], [9, 7, 3, 1, -1, -3, -7], [9, 7, 3, 1, -1, -3, -7, -9], [9, 7, 3, 1, -1, -3, -5], [9, 7, 3, 1, -1, -3, -5, -9], [9, 7, 3, 1, -1, -3, -5, -7], [9, 7, 3, 1, -1, -3, -5, -7, -9], [9, 7, 5], [9, 7, 5, -9], [9, 7, 5, -7], [9, 7, 5, -7, -9], [9, 7, 5, -5], [9, 7, 5, -5, -9], [9, 7, 5, -5, -7], [9, 7, 5, -5, -7, -9], [9, 7, 5, -3], [9, 7, 5, -3, -9], [9, 7, 5, -3, -7], [9, 7, 5, -3, -7, -9], [9, 7, 5, -3, -5], [9, 7, 5, -3, -5, -9], [9, 7, 5, -3, -5, -7], [9, 7, 5, -3, -5, -7, -9], [9, 7, 5, -1], [9, 7, 5, -1, -9], [9, 7, 5, -1, -7], [9, 7, 5, -1, -7, -9], [9, 7, 5, -1, -5], [9, 7, 5, -1, -5, -9], [9, 7, 5, -1, -5, -7], [9, 7, 5, -1, -5, -7, -9], [9, 7, 5, -1, -3], [9, 7, 5, -1, -3, -9], [9, 7, 5, -1, -3, -7], [9, 7, 5, -1, -3, -7, -9], [9, 7, 5, -1, -3, -5], [9, 7, 5, -1, -3, -5, -9], [9, 7, 5, -1, -3, -5, -7], [9, 7, 5, -1, -3, -5, -7, -9], [9, 7, 5, 1], [9, 7, 5, 1, -9], [9, 7, 5, 1, -7], [9, 7, 5, 1, -7, -9], [9, 7, 5, 1, -5], [9, 7, 5, 1, -5, -9], [9, 7, 5, 1, -5, -7], [9, 7, 5, 1, -5, -7, -9], [9, 7, 5, 1, -3], [9, 7, 5, 1, -3, -9], [9, 7, 5, 1, -3, -7], [9, 7, 5, 1, -3, -7, -9], [9, 7, 5, 1, -3, -5], [9, 7, 5, 1, -3, -5, -9], [9, 7, 5, 1, -3, -5, -7], [9, 7, 5, 1, -3, -5, -7, -9], [9, 7, 5, 1, -1], [9, 7, 5, 1, -1, -9], [9, 7, 5, 1, -1, -7], [9, 7, 5, 1, -1, -7, -9], [9, 7, 5, 1, -1, -5], [9, 7, 5, 1, -1, -5, -9], [9, 7, 5, 1, -1, -5, -7], [9, 7, 5, 1, -1, -5, -7, -9], [9, 7, 5, 1, -1, -3], [9, 7, 5, 1, -1, -3, -9], [9, 7, 5, 1, -1, -3, -7], [9, 7, 5, 1, -1, -3, -7, -9], [9, 7, 5, 1, -1, -3, -5], [9, 7, 5, 1, -1, -3, -5, -9], [9, 7, 5, 1, -1, -3, -5, -7], [9, 7, 5, 1, -1, -3, -5, -7, -9], [9, 7, 5, 3], [9, 7, 5, 3, -9], [9, 7, 5, 3, -7], [9, 7, 5, 3, -7, -9], [9, 7, 5, 3, -5], [9, 7, 5, 3, -5, -9], [9, 7, 5, 3, -5, -7], [9, 7, 5, 3, -5, -7, -9], [9, 7, 5, 3, -3], [9, 7, 5, 3, -3, -9], [9, 7, 5, 3, -3, -7], [9, 7, 5, 3, -3, -7, -9], [9, 7, 5, 3, -3, -5], [9, 7, 5, 3, -3, -5, -9], [9, 7, 5, 3, -3, -5, -7], [9, 7, 5, 3, -3, -5, -7, -9], [9, 7, 5, 3, -1], [9, 7, 5, 3, -1, -9], [9, 7, 5, 3, -1, -7], [9, 7, 5, 3, -1, -7, -9], [9, 7, 5, 3, -1, -5], [9, 7, 5, 3, -1, -5, -9], [9, 7, 5, 3, -1, -5, -7], [9, 7, 5, 3, -1, -5, -7, -9], [9, 7, 5, 3, -1, -3], [9, 7, 5, 3, -1, -3, -9], [9, 7, 5, 3, -1, -3, -7], [9, 7, 5, 3, -1, -3, -7, -9], [9, 7, 5, 3, -1, -3, -5], [9, 7, 5, 3, -1, -3, -5, -9], [9, 7, 5, 3, -1, -3, -5, -7], [9, 7, 5, 3, -1, -3, -5, -7, -9], [9, 7, 5, 3, 1], [9, 7, 5, 3, 1, -9], [9, 7, 5, 3, 1, -7], [9, 7, 5, 3, 1, -7, -9], [9, 7, 5, 3, 1, -5], [9, 7, 5, 3, 1, -5, -9], [9, 7, 5, 3, 1, -5, -7], [9, 7, 5, 3, 1, -5, -7, -9], [9, 7, 5, 3, 1, -3], [9, 7, 5, 3, 1, -3, -9], [9, 7, 5, 3, 1, -3, -7], [9, 7, 5, 3, 1, -3, -7, -9], [9, 7, 5, 3, 1, -3, -5], [9, 7, 5, 3, 1, -3, -5, -9], [9, 7, 5, 3, 1, -3, -5, -7], [9, 7, 5, 3, 1, -3, -5, -7, -9], [9, 7, 5, 3, 1, -1], [9, 7, 5, 3, 1, -1, -9], [9, 7, 5, 3, 1, -1, -7], [9, 7, 5, 3, 1, -1, -7, -9], [9, 7, 5, 3, 1, -1, -5], [9, 7, 5, 3, 1, -1, -5, -9], [9, 7, 5, 3, 1, -1, -5, -7], [9, 7, 5, 3, 1, -1, -5, -7, -9], [9, 7, 5, 3, 1, -1, -3], [9, 7, 5, 3, 1, -1, -3, -9], [9, 7, 5, 3, 1, -1, -3, -7], [9, 7, 5, 3, 1, -1, -3, -7, -9], [9, 7, 5, 3, 1, -1, -3, -5], [9, 7, 5, 3, 1, -1, -3, -5, -9], [9, 7, 5, 3, 1, -1, -3, -5, -7], [9, 7, 5, 3, 1, -1, -3, -5, -7, -9]]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35]",
        "output": "[[], [35], [30], [30, 35], [25], [25, 35], [25, 30], [25, 30, 35], [20], [20, 35], [20, 30], [20, 30, 35], [20, 25], [20, 25, 35], [20, 25, 30], [20, 25, 30, 35], [15], [15, 35], [15, 30], [15, 30, 35], [15, 25], [15, 25, 35], [15, 25, 30], [15, 25, 30, 35], [15, 20], [15, 20, 35], [15, 20, 30], [15, 20, 30, 35], [15, 20, 25], [15, 20, 25, 35], [15, 20, 25, 30], [15, 20, 25, 30, 35], [10], [10, 35], [10, 30], [10, 30, 35], [10, 25], [10, 25, 35], [10, 25, 30], [10, 25, 30, 35], [10, 20], [10, 20, 35], [10, 20, 30], [10, 20, 30, 35], [10, 20, 25], [10, 20, 25, 35], [10, 20, 25, 30], [10, 20, 25, 30, 35], [10, 15], [10, 15, 35], [10, 15, 30], [10, 15, 30, 35], [10, 15, 25], [10, 15, 25, 35], [10, 15, 25, 30], [10, 15, 25, 30, 35], [10, 15, 20], [10, 15, 20, 35], [10, 15, 20, 30], [10, 15, 20, 30, 35], [10, 15, 20, 25], [10, 15, 20, 25, 35], [10, 15, 20, 25, 30], [10, 15, 20, 25, 30, 35], [5], [5, 35], [5, 30], [5, 30, 35], [5, 25], [5, 25, 35], [5, 25, 30], [5, 25, 30, 35], [5, 20], [5, 20, 35], [5, 20, 30], [5, 20, 30, 35], [5, 20, 25], [5, 20, 25, 35], [5, 20, 25, 30], [5, 20, 25, 30, 35], [5, 15], [5, 15, 35], [5, 15, 30], [5, 15, 30, 35], [5, 15, 25], [5, 15, 25, 35], [5, 15, 25, 30], [5, 15, 25, 30, 35], [5, 15, 20], [5, 15, 20, 35], [5, 15, 20, 30], [5, 15, 20, 30, 35], [5, 15, 20, 25], [5, 15, 20, 25, 35], [5, 15, 20, 25, 30], [5, 15, 20, 25, 30, 35], [5, 10], [5, 10, 35], [5, 10, 30], [5, 10, 30, 35], [5, 10, 25], [5, 10, 25, 35], [5, 10, 25, 30], [5, 10, 25, 30, 35], [5, 10, 20], [5, 10, 20, 35], [5, 10, 20, 30], [5, 10, 20, 30, 35], [5, 10, 20, 25], [5, 10, 20, 25, 35], [5, 10, 20, 25, 30], [5, 10, 20, 25, 30, 35], [5, 10, 15], [5, 10, 15, 35], [5, 10, 15, 30], [5, 10, 15, 30, 35], [5, 10, 15, 25], [5, 10, 15, 25, 35], [5, 10, 15, 25, 30], [5, 10, 15, 25, 30, 35], [5, 10, 15, 20], [5, 10, 15, 20, 35], [5, 10, 15, 20, 30], [5, 10, 15, 20, 30, 35], [5, 10, 15, 20, 25], [5, 10, 15, 20, 25, 35], [5, 10, 15, 20, 25, 30], [5, 10, 15, 20, 25, 30, 35]]"
      },
      {
        "input": "nums = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]",
        "output": "[[], [91], [81], [81, 91], [71], [71, 91], [71, 81], [71, 81, 91], [61], [61, 91], [61, 81], [61, 81, 91], [61, 71], [61, 71, 91], [61, 71, 81], [61, 71, 81, 91], [51], [51, 91], [51, 81], [51, 81, 91], [51, 71], [51, 71, 91], [51, 71, 81], [51, 71, 81, 91], [51, 61], [51, 61, 91], [51, 61, 81], [51, 61, 81, 91], [51, 61, 71], [51, 61, 71, 91], [51, 61, 71, 81], [51, 61, 71, 81, 91], [41], [41, 91], [41, 81], [41, 81, 91], [41, 71], [41, 71, 91], [41, 71, 81], [41, 71, 81, 91], [41, 61], [41, 61, 91], [41, 61, 81], [41, 61, 81, 91], [41, 61, 71], [41, 61, 71, 91], [41, 61, 71, 81], [41, 61, 71, 81, 91], [41, 51], [41, 51, 91], [41, 51, 81], [41, 51, 81, 91], [41, 51, 71], [41, 51, 71, 91], [41, 51, 71, 81], [41, 51, 71, 81, 91], [41, 51, 61], [41, 51, 61, 91], [41, 51, 61, 81], [41, 51, 61, 81, 91], [41, 51, 61, 71], [41, 51, 61, 71, 91], [41, 51, 61, 71, 81], [41, 51, 61, 71, 81, 91], [31], [31, 91], [31, 81], [31, 81, 91], [31, 71], [31, 71, 91], [31, 71, 81], [31, 71, 81, 91], [31, 61], [31, 61, 91], [31, 61, 81], [31, 61, 81, 91], [31, 61, 71], [31, 61, 71, 91], [31, 61, 71, 81], [31, 61, 71, 81, 91], [31, 51], [31, 51, 91], [31, 51, 81], [31, 51, 81, 91], [31, 51, 71], [31, 51, 71, 91], [31, 51, 71, 81], [31, 51, 71, 81, 91], [31, 51, 61], [31, 51, 61, 91], [31, 51, 61, 81], [31, 51, 61, 81, 91], [31, 51, 61, 71], [31, 51, 61, 71, 91], [31, 51, 61, 71, 81], [31, 51, 61, 71, 81, 91], [31, 41], [31, 41, 91], [31, 41, 81], [31, 41, 81, 91], [31, 41, 71], [31, 41, 71, 91], [31, 41, 71, 81], [31, 41, 71, 81, 91], [31, 41, 61], [31, 41, 61, 91], [31, 41, 61, 81], [31, 41, 61, 81, 91], [31, 41, 61, 71], [31, 41, 61, 71, 91], [31, 41, 61, 71, 81], [31, 41, 61, 71, 81, 91], [31, 41, 51], [31, 41, 51, 91], [31, 41, 51, 81], [31, 41, 51, 81, 91], [31, 41, 51, 71], [31, 41, 51, 71, 91], [31, 41, 51, 71, 81], [31, 41, 51, 71, 81, 91], [31, 41, 51, 61], [31, 41, 51, 61, 91], [31, 41, 51, 61, 81], [31, 41, 51, 61, 81, 91], [31, 41, 51, 61, 71], [31, 41, 51, 61, 71, 91], [31, 41, 51, 61, 71, 81], [31, 41, 51, 61, 71, 81, 91], [21], [21, 91], [21, 81], [21, 81, 91], [21, 71], [21, 71, 91], [21, 71, 81], [21, 71, 81, 91], [21, 61], [21, 61, 91], [21, 61, 81], [21, 61, 81, 91], [21, 61, 71], [21, 61, 71, 91], [21, 61, 71, 81], [21, 61, 71, 81, 91], [21, 51], [21, 51, 91], [21, 51, 81], [21, 51, 81, 91], [21, 51, 71], [21, 51, 71, 91], [21, 51, 71, 81], [21, 51, 71, 81, 91], [21, 51, 61], [21, 51, 61, 91], [21, 51, 61, 81], [21, 51, 61, 81, 91], [21, 51, 61, 71], [21, 51, 61, 71, 91], [21, 51, 61, 71, 81], [21, 51, 61, 71, 81, 91], [21, 41], [21, 41, 91], [21, 41, 81], [21, 41, 81, 91], [21, 41, 71], [21, 41, 71, 91], [21, 41, 71, 81], [21, 41, 71, 81, 91], [21, 41, 61], [21, 41, 61, 91], [21, 41, 61, 81], [21, 41, 61, 81, 91], [21, 41, 61, 71], [21, 41, 61, 71, 91], [21, 41, 61, 71, 81], [21, 41, 61, 71, 81, 91], [21, 41, 51], [21, 41, 51, 91], [21, 41, 51, 81], [21, 41, 51, 81, 91], [21, 41, 51, 71], [21, 41, 51, 71, 91], [21, 41, 51, 71, 81], [21, 41, 51, 71, 81, 91], [21, 41, 51, 61], [21, 41, 51, 61, 91], [21, 41, 51, 61, 81], [21, 41, 51, 61, 81, 91], [21, 41, 51, 61, 71], [21, 41, 51, 61, 71, 91], [21, 41, 51, 61, 71, 81], [21, 41, 51, 61, 71, 81, 91], [21, 31], [21, 31, 91], [21, 31, 81], [21, 31, 81, 91], [21, 31, 71], [21, 31, 71, 91], [21, 31, 71, 81], [21, 31, 71, 81, 91], [21, 31, 61], [21, 31, 61, 91], [21, 31, 61, 81], [21, 31, 61, 81, 91], [21, 31, 61, 71], [21, 31, 61, 71, 91], [21, 31, 61, 71, 81], [21, 31, 61, 71, 81, 91], [21, 31, 51], [21, 31, 51, 91], [21, 31, 51, 81], [21, 31, 51, 81, 91], [21, 31, 51, 71], [21, 31, 51, 71, 91], [21, 31, 51, 71, 81], [21, 31, 51, 71, 81, 91], [21, 31, 51, 61], [21, 31, 51, 61, 91], [21, 31, 51, 61, 81], [21, 31, 51, 61, 81, 91], [21, 31, 51, 61, 71], [21, 31, 51, 61, 71, 91], [21, 31, 51, 61, 71, 81], [21, 31, 51, 61, 71, 81, 91], [21, 31, 41], [21, 31, 41, 91], [21, 31, 41, 81], [21, 31, 41, 81, 91], [21, 31, 41, 71], [21, 31, 41, 71, 91], [21, 31, 41, 71, 81], [21, 31, 41, 71, 81, 91], [21, 31, 41, 61], [21, 31, 41, 61, 91], [21, 31, 41, 61, 81], [21, 31, 41, 61, 81, 91], [21, 31, 41, 61, 71], [21, 31, 41, 61, 71, 91], [21, 31, 41, 61, 71, 81], [21, 31, 41, 61, 71, 81, 91], [21, 31, 41, 51], [21, 31, 41, 51, 91], [21, 31, 41, 51, 81], [21, 31, 41, 51, 81, 91], [21, 31, 41, 51, 71], [21, 31, 41, 51, 71, 91], [21, 31, 41, 51, 71, 81], [21, 31, 41, 51, 71, 81, 91], [21, 31, 41, 51, 61], [21, 31, 41, 51, 61, 91], [21, 31, 41, 51, 61, 81], [21, 31, 41, 51, 61, 81, 91], [21, 31, 41, 51, 61, 71], [21, 31, 41, 51, 61, 71, 91], [21, 31, 41, 51, 61, 71, 81], [21, 31, 41, 51, 61, 71, 81, 91], [11], [11, 91], [11, 81], [11, 81, 91], [11, 71], [11, 71, 91], [11, 71, 81], [11, 71, 81, 91], [11, 61], [11, 61, 91], [11, 61, 81], [11, 61, 81, 91], [11, 61, 71], [11, 61, 71, 91], [11, 61, 71, 81], [11, 61, 71, 81, 91], [11, 51], [11, 51, 91], [11, 51, 81], [11, 51, 81, 91], [11, 51, 71], [11, 51, 71, 91], [11, 51, 71, 81], [11, 51, 71, 81, 91], [11, 51, 61], [11, 51, 61, 91], [11, 51, 61, 81], [11, 51, 61, 81, 91], [11, 51, 61, 71], [11, 51, 61, 71, 91], [11, 51, 61, 71, 81], [11, 51, 61, 71, 81, 91], [11, 41], [11, 41, 91], [11, 41, 81], [11, 41, 81, 91], [11, 41, 71], [11, 41, 71, 91], [11, 41, 71, 81], [11, 41, 71, 81, 91], [11, 41, 61], [11, 41, 61, 91], [11, 41, 61, 81], [11, 41, 61, 81, 91], [11, 41, 61, 71], [11, 41, 61, 71, 91], [11, 41, 61, 71, 81], [11, 41, 61, 71, 81, 91], [11, 41, 51], [11, 41, 51, 91], [11, 41, 51, 81], [11, 41, 51, 81, 91], [11, 41, 51, 71], [11, 41, 51, 71, 91], [11, 41, 51, 71, 81], [11, 41, 51, 71, 81, 91], [11, 41, 51, 61], [11, 41, 51, 61, 91], [11, 41, 51, 61, 81], [11, 41, 51, 61, 81, 91], [11, 41, 51, 61, 71], [11, 41, 51, 61, 71, 91], [11, 41, 51, 61, 71, 81], [11, 41, 51, 61, 71, 81, 91], [11, 31], [11, 31, 91], [11, 31, 81], [11, 31, 81, 91], [11, 31, 71], [11, 31, 71, 91], [11, 31, 71, 81], [11, 31, 71, 81, 91], [11, 31, 61], [11, 31, 61, 91], [11, 31, 61, 81], [11, 31, 61, 81, 91], [11, 31, 61, 71], [11, 31, 61, 71, 91], [11, 31, 61, 71, 81], [11, 31, 61, 71, 81, 91], [11, 31, 51], [11, 31, 51, 91], [11, 31, 51, 81], [11, 31, 51, 81, 91], [11, 31, 51, 71], [11, 31, 51, 71, 91], [11, 31, 51, 71, 81], [11, 31, 51, 71, 81, 91], [11, 31, 51, 61], [11, 31, 51, 61, 91], [11, 31, 51, 61, 81], [11, 31, 51, 61, 81, 91], [11, 31, 51, 61, 71], [11, 31, 51, 61, 71, 91], [11, 31, 51, 61, 71, 81], [11, 31, 51, 61, 71, 81, 91], [11, 31, 41], [11, 31, 41, 91], [11, 31, 41, 81], [11, 31, 41, 81, 91], [11, 31, 41, 71], [11, 31, 41, 71, 91], [11, 31, 41, 71, 81], [11, 31, 41, 71, 81, 91], [11, 31, 41, 61], [11, 31, 41, 61, 91], [11, 31, 41, 61, 81], [11, 31, 41, 61, 81, 91], [11, 31, 41, 61, 71], [11, 31, 41, 61, 71, 91], [11, 31, 41, 61, 71, 81], [11, 31, 41, 61, 71, 81, 91], [11, 31, 41, 51], [11, 31, 41, 51, 91], [11, 31, 41, 51, 81], [11, 31, 41, 51, 81, 91], [11, 31, 41, 51, 71], [11, 31, 41, 51, 71, 91], [11, 31, 41, 51, 71, 81], [11, 31, 41, 51, 71, 81, 91], [11, 31, 41, 51, 61], [11, 31, 41, 51, 61, 91], [11, 31, 41, 51, 61, 81], [11, 31, 41, 51, 61, 81, 91], [11, 31, 41, 51, 61, 71], [11, 31, 41, 51, 61, 71, 91], [11, 31, 41, 51, 61, 71, 81], [11, 31, 41, 51, 61, 71, 81, 91], [11, 21], [11, 21, 91], [11, 21, 81], [11, 21, 81, 91], [11, 21, 71], [11, 21, 71, 91], [11, 21, 71, 81], [11, 21, 71, 81, 91], [11, 21, 61], [11, 21, 61, 91], [11, 21, 61, 81], [11, 21, 61, 81, 91], [11, 21, 61, 71], [11, 21, 61, 71, 91], [11, 21, 61, 71, 81], [11, 21, 61, 71, 81, 91], [11, 21, 51], [11, 21, 51, 91], [11, 21, 51, 81], [11, 21, 51, 81, 91], [11, 21, 51, 71], [11, 21, 51, 71, 91], [11, 21, 51, 71, 81], [11, 21, 51, 71, 81, 91], [11, 21, 51, 61], [11, 21, 51, 61, 91], [11, 21, 51, 61, 81], [11, 21, 51, 61, 81, 91], [11, 21, 51, 61, 71], [11, 21, 51, 61, 71, 91], [11, 21, 51, 61, 71, 81], [11, 21, 51, 61, 71, 81, 91], [11, 21, 41], [11, 21, 41, 91], [11, 21, 41, 81], [11, 21, 41, 81, 91], [11, 21, 41, 71], [11, 21, 41, 71, 91], [11, 21, 41, 71, 81], [11, 21, 41, 71, 81, 91], [11, 21, 41, 61], [11, 21, 41, 61, 91], [11, 21, 41, 61, 81], [11, 21, 41, 61, 81, 91], [11, 21, 41, 61, 71], [11, 21, 41, 61, 71, 91], [11, 21, 41, 61, 71, 81], [11, 21, 41, 61, 71, 81, 91], [11, 21, 41, 51], [11, 21, 41, 51, 91], [11, 21, 41, 51, 81], [11, 21, 41, 51, 81, 91], [11, 21, 41, 51, 71], [11, 21, 41, 51, 71, 91], [11, 21, 41, 51, 71, 81], [11, 21, 41, 51, 71, 81, 91], [11, 21, 41, 51, 61], [11, 21, 41, 51, 61, 91], [11, 21, 41, 51, 61, 81], [11, 21, 41, 51, 61, 81, 91], [11, 21, 41, 51, 61, 71], [11, 21, 41, 51, 61, 71, 91], [11, 21, 41, 51, 61, 71, 81], [11, 21, 41, 51, 61, 71, 81, 91], [11, 21, 31], [11, 21, 31, 91], [11, 21, 31, 81], [11, 21, 31, 81, 91], [11, 21, 31, 71], [11, 21, 31, 71, 91], [11, 21, 31, 71, 81], [11, 21, 31, 71, 81, 91], [11, 21, 31, 61], [11, 21, 31, 61, 91], [11, 21, 31, 61, 81], [11, 21, 31, 61, 81, 91], [11, 21, 31, 61, 71], [11, 21, 31, 61, 71, 91], [11, 21, 31, 61, 71, 81], [11, 21, 31, 61, 71, 81, 91], [11, 21, 31, 51], [11, 21, 31, 51, 91], [11, 21, 31, 51, 81], [11, 21, 31, 51, 81, 91], [11, 21, 31, 51, 71], [11, 21, 31, 51, 71, 91], [11, 21, 31, 51, 71, 81], [11, 21, 31, 51, 71, 81, 91], [11, 21, 31, 51, 61], [11, 21, 31, 51, 61, 91], [11, 21, 31, 51, 61, 81], [11, 21, 31, 51, 61, 81, 91], [11, 21, 31, 51, 61, 71], [11, 21, 31, 51, 61, 71, 91], [11, 21, 31, 51, 61, 71, 81], [11, 21, 31, 51, 61, 71, 81, 91], [11, 21, 31, 41], [11, 21, 31, 41, 91], [11, 21, 31, 41, 81], [11, 21, 31, 41, 81, 91], [11, 21, 31, 41, 71], [11, 21, 31, 41, 71, 91], [11, 21, 31, 41, 71, 81], [11, 21, 31, 41, 71, 81, 91], [11, 21, 31, 41, 61], [11, 21, 31, 41, 61, 91], [11, 21, 31, 41, 61, 81], [11, 21, 31, 41, 61, 81, 91], [11, 21, 31, 41, 61, 71], [11, 21, 31, 41, 61, 71, 91], [11, 21, 31, 41, 61, 71, 81], [11, 21, 31, 41, 61, 71, 81, 91], [11, 21, 31, 41, 51], [11, 21, 31, 41, 51, 91], [11, 21, 31, 41, 51, 81], [11, 21, 31, 41, 51, 81, 91], [11, 21, 31, 41, 51, 71], [11, 21, 31, 41, 51, 71, 91], [11, 21, 31, 41, 51, 71, 81], [11, 21, 31, 41, 51, 71, 81, 91], [11, 21, 31, 41, 51, 61], [11, 21, 31, 41, 51, 61, 91], [11, 21, 31, 41, 51, 61, 81], [11, 21, 31, 41, 51, 61, 81, 91], [11, 21, 31, 41, 51, 61, 71], [11, 21, 31, 41, 51, 61, 71, 91], [11, 21, 31, 41, 51, 61, 71, 81], [11, 21, 31, 41, 51, 61, 71, 81, 91], [1], [1, 91], [1, 81], [1, 81, 91], [1, 71], [1, 71, 91], [1, 71, 81], [1, 71, 81, 91], [1, 61], [1, 61, 91], [1, 61, 81], [1, 61, 81, 91], [1, 61, 71], [1, 61, 71, 91], [1, 61, 71, 81], [1, 61, 71, 81, 91], [1, 51], [1, 51, 91], [1, 51, 81], [1, 51, 81, 91], [1, 51, 71], [1, 51, 71, 91], [1, 51, 71, 81], [1, 51, 71, 81, 91], [1, 51, 61], [1, 51, 61, 91], [1, 51, 61, 81], [1, 51, 61, 81, 91], [1, 51, 61, 71], [1, 51, 61, 71, 91], [1, 51, 61, 71, 81], [1, 51, 61, 71, 81, 91], [1, 41], [1, 41, 91], [1, 41, 81], [1, 41, 81, 91], [1, 41, 71], [1, 41, 71, 91], [1, 41, 71, 81], [1, 41, 71, 81, 91], [1, 41, 61], [1, 41, 61, 91], [1, 41, 61, 81], [1, 41, 61, 81, 91], [1, 41, 61, 71], [1, 41, 61, 71, 91], [1, 41, 61, 71, 81], [1, 41, 61, 71, 81, 91], [1, 41, 51], [1, 41, 51, 91], [1, 41, 51, 81], [1, 41, 51, 81, 91], [1, 41, 51, 71], [1, 41, 51, 71, 91], [1, 41, 51, 71, 81], [1, 41, 51, 71, 81, 91], [1, 41, 51, 61], [1, 41, 51, 61, 91], [1, 41, 51, 61, 81], [1, 41, 51, 61, 81, 91], [1, 41, 51, 61, 71], [1, 41, 51, 61, 71, 91], [1, 41, 51, 61, 71, 81], [1, 41, 51, 61, 71, 81, 91], [1, 31], [1, 31, 91], [1, 31, 81], [1, 31, 81, 91], [1, 31, 71], [1, 31, 71, 91], [1, 31, 71, 81], [1, 31, 71, 81, 91], [1, 31, 61], [1, 31, 61, 91], [1, 31, 61, 81], [1, 31, 61, 81, 91], [1, 31, 61, 71], [1, 31, 61, 71, 91], [1, 31, 61, 71, 81], [1, 31, 61, 71, 81, 91], [1, 31, 51], [1, 31, 51, 91], [1, 31, 51, 81], [1, 31, 51, 81, 91], [1, 31, 51, 71], [1, 31, 51, 71, 91], [1, 31, 51, 71, 81], [1, 31, 51, 71, 81, 91], [1, 31, 51, 61], [1, 31, 51, 61, 91], [1, 31, 51, 61, 81], [1, 31, 51, 61, 81, 91], [1, 31, 51, 61, 71], [1, 31, 51, 61, 71, 91], [1, 31, 51, 61, 71, 81], [1, 31, 51, 61, 71, 81, 91], [1, 31, 41], [1, 31, 41, 91], [1, 31, 41, 81], [1, 31, 41, 81, 91], [1, 31, 41, 71], [1, 31, 41, 71, 91], [1, 31, 41, 71, 81], [1, 31, 41, 71, 81, 91], [1, 31, 41, 61], [1, 31, 41, 61, 91], [1, 31, 41, 61, 81], [1, 31, 41, 61, 81, 91], [1, 31, 41, 61, 71], [1, 31, 41, 61, 71, 91], [1, 31, 41, 61, 71, 81], [1, 31, 41, 61, 71, 81, 91], [1, 31, 41, 51], [1, 31, 41, 51, 91], [1, 31, 41, 51, 81], [1, 31, 41, 51, 81, 91], [1, 31, 41, 51, 71], [1, 31, 41, 51, 71, 91], [1, 31, 41, 51, 71, 81], [1, 31, 41, 51, 71, 81, 91], [1, 31, 41, 51, 61], [1, 31, 41, 51, 61, 91], [1, 31, 41, 51, 61, 81], [1, 31, 41, 51, 61, 81, 91], [1, 31, 41, 51, 61, 71], [1, 31, 41, 51, 61, 71, 91], [1, 31, 41, 51, 61, 71, 81], [1, 31, 41, 51, 61, 71, 81, 91], [1, 21], [1, 21, 91], [1, 21, 81], [1, 21, 81, 91], [1, 21, 71], [1, 21, 71, 91], [1, 21, 71, 81], [1, 21, 71, 81, 91], [1, 21, 61], [1, 21, 61, 91], [1, 21, 61, 81], [1, 21, 61, 81, 91], [1, 21, 61, 71], [1, 21, 61, 71, 91], [1, 21, 61, 71, 81], [1, 21, 61, 71, 81, 91], [1, 21, 51], [1, 21, 51, 91], [1, 21, 51, 81], [1, 21, 51, 81, 91], [1, 21, 51, 71], [1, 21, 51, 71, 91], [1, 21, 51, 71, 81], [1, 21, 51, 71, 81, 91], [1, 21, 51, 61], [1, 21, 51, 61, 91], [1, 21, 51, 61, 81], [1, 21, 51, 61, 81, 91], [1, 21, 51, 61, 71], [1, 21, 51, 61, 71, 91], [1, 21, 51, 61, 71, 81], [1, 21, 51, 61, 71, 81, 91], [1, 21, 41], [1, 21, 41, 91], [1, 21, 41, 81], [1, 21, 41, 81, 91], [1, 21, 41, 71], [1, 21, 41, 71, 91], [1, 21, 41, 71, 81], [1, 21, 41, 71, 81, 91], [1, 21, 41, 61], [1, 21, 41, 61, 91], [1, 21, 41, 61, 81], [1, 21, 41, 61, 81, 91], [1, 21, 41, 61, 71], [1, 21, 41, 61, 71, 91], [1, 21, 41, 61, 71, 81], [1, 21, 41, 61, 71, 81, 91], [1, 21, 41, 51], [1, 21, 41, 51, 91], [1, 21, 41, 51, 81], [1, 21, 41, 51, 81, 91], [1, 21, 41, 51, 71], [1, 21, 41, 51, 71, 91], [1, 21, 41, 51, 71, 81], [1, 21, 41, 51, 71, 81, 91], [1, 21, 41, 51, 61], [1, 21, 41, 51, 61, 91], [1, 21, 41, 51, 61, 81], [1, 21, 41, 51, 61, 81, 91], [1, 21, 41, 51, 61, 71], [1, 21, 41, 51, 61, 71, 91], [1, 21, 41, 51, 61, 71, 81], [1, 21, 41, 51, 61, 71, 81, 91], [1, 21, 31], [1, 21, 31, 91], [1, 21, 31, 81], [1, 21, 31, 81, 91], [1, 21, 31, 71], [1, 21, 31, 71, 91], [1, 21, 31, 71, 81], [1, 21, 31, 71, 81, 91], [1, 21, 31, 61], [1, 21, 31, 61, 91], [1, 21, 31, 61, 81], [1, 21, 31, 61, 81, 91], [1, 21, 31, 61, 71], [1, 21, 31, 61, 71, 91], [1, 21, 31, 61, 71, 81], [1, 21, 31, 61, 71, 81, 91], [1, 21, 31, 51], [1, 21, 31, 51, 91], [1, 21, 31, 51, 81], [1, 21, 31, 51, 81, 91], [1, 21, 31, 51, 71], [1, 21, 31, 51, 71, 91], [1, 21, 31, 51, 71, 81], [1, 21, 31, 51, 71, 81, 91], [1, 21, 31, 51, 61], [1, 21, 31, 51, 61, 91], [1, 21, 31, 51, 61, 81], [1, 21, 31, 51, 61, 81, 91], [1, 21, 31, 51, 61, 71], [1, 21, 31, 51, 61, 71, 91], [1, 21, 31, 51, 61, 71, 81], [1, 21, 31, 51, 61, 71, 81, 91], [1, 21, 31, 41], [1, 21, 31, 41, 91], [1, 21, 31, 41, 81], [1, 21, 31, 41, 81, 91], [1, 21, 31, 41, 71], [1, 21, 31, 41, 71, 91], [1, 21, 31, 41, 71, 81], [1, 21, 31, 41, 71, 81, 91], [1, 21, 31, 41, 61], [1, 21, 31, 41, 61, 91], [1, 21, 31, 41, 61, 81], [1, 21, 31, 41, 61, 81, 91], [1, 21, 31, 41, 61, 71], [1, 21, 31, 41, 61, 71, 91], [1, 21, 31, 41, 61, 71, 81], [1, 21, 31, 41, 61, 71, 81, 91], [1, 21, 31, 41, 51], [1, 21, 31, 41, 51, 91], [1, 21, 31, 41, 51, 81], [1, 21, 31, 41, 51, 81, 91], [1, 21, 31, 41, 51, 71], [1, 21, 31, 41, 51, 71, 91], [1, 21, 31, 41, 51, 71, 81], [1, 21, 31, 41, 51, 71, 81, 91], [1, 21, 31, 41, 51, 61], [1, 21, 31, 41, 51, 61, 91], [1, 21, 31, 41, 51, 61, 81], [1, 21, 31, 41, 51, 61, 81, 91], [1, 21, 31, 41, 51, 61, 71], [1, 21, 31, 41, 51, 61, 71, 91], [1, 21, 31, 41, 51, 61, 71, 81], [1, 21, 31, 41, 51, 61, 71, 81, 91], [1, 11], [1, 11, 91], [1, 11, 81], [1, 11, 81, 91], [1, 11, 71], [1, 11, 71, 91], [1, 11, 71, 81], [1, 11, 71, 81, 91], [1, 11, 61], [1, 11, 61, 91], [1, 11, 61, 81], [1, 11, 61, 81, 91], [1, 11, 61, 71], [1, 11, 61, 71, 91], [1, 11, 61, 71, 81], [1, 11, 61, 71, 81, 91], [1, 11, 51], [1, 11, 51, 91], [1, 11, 51, 81], [1, 11, 51, 81, 91], [1, 11, 51, 71], [1, 11, 51, 71, 91], [1, 11, 51, 71, 81], [1, 11, 51, 71, 81, 91], [1, 11, 51, 61], [1, 11, 51, 61, 91], [1, 11, 51, 61, 81], [1, 11, 51, 61, 81, 91], [1, 11, 51, 61, 71], [1, 11, 51, 61, 71, 91], [1, 11, 51, 61, 71, 81], [1, 11, 51, 61, 71, 81, 91], [1, 11, 41], [1, 11, 41, 91], [1, 11, 41, 81], [1, 11, 41, 81, 91], [1, 11, 41, 71], [1, 11, 41, 71, 91], [1, 11, 41, 71, 81], [1, 11, 41, 71, 81, 91], [1, 11, 41, 61], [1, 11, 41, 61, 91], [1, 11, 41, 61, 81], [1, 11, 41, 61, 81, 91], [1, 11, 41, 61, 71], [1, 11, 41, 61, 71, 91], [1, 11, 41, 61, 71, 81], [1, 11, 41, 61, 71, 81, 91], [1, 11, 41, 51], [1, 11, 41, 51, 91], [1, 11, 41, 51, 81], [1, 11, 41, 51, 81, 91], [1, 11, 41, 51, 71], [1, 11, 41, 51, 71, 91], [1, 11, 41, 51, 71, 81], [1, 11, 41, 51, 71, 81, 91], [1, 11, 41, 51, 61], [1, 11, 41, 51, 61, 91], [1, 11, 41, 51, 61, 81], [1, 11, 41, 51, 61, 81, 91], [1, 11, 41, 51, 61, 71], [1, 11, 41, 51, 61, 71, 91], [1, 11, 41, 51, 61, 71, 81], [1, 11, 41, 51, 61, 71, 81, 91], [1, 11, 31], [1, 11, 31, 91], [1, 11, 31, 81], [1, 11, 31, 81, 91], [1, 11, 31, 71], [1, 11, 31, 71, 91], [1, 11, 31, 71, 81], [1, 11, 31, 71, 81, 91], [1, 11, 31, 61], [1, 11, 31, 61, 91], [1, 11, 31, 61, 81], [1, 11, 31, 61, 81, 91], [1, 11, 31, 61, 71], [1, 11, 31, 61, 71, 91], [1, 11, 31, 61, 71, 81], [1, 11, 31, 61, 71, 81, 91], [1, 11, 31, 51], [1, 11, 31, 51, 91], [1, 11, 31, 51, 81], [1, 11, 31, 51, 81, 91], [1, 11, 31, 51, 71], [1, 11, 31, 51, 71, 91], [1, 11, 31, 51, 71, 81], [1, 11, 31, 51, 71, 81, 91], [1, 11, 31, 51, 61], [1, 11, 31, 51, 61, 91], [1, 11, 31, 51, 61, 81], [1, 11, 31, 51, 61, 81, 91], [1, 11, 31, 51, 61, 71], [1, 11, 31, 51, 61, 71, 91], [1, 11, 31, 51, 61, 71, 81], [1, 11, 31, 51, 61, 71, 81, 91], [1, 11, 31, 41], [1, 11, 31, 41, 91], [1, 11, 31, 41, 81], [1, 11, 31, 41, 81, 91], [1, 11, 31, 41, 71], [1, 11, 31, 41, 71, 91], [1, 11, 31, 41, 71, 81], [1, 11, 31, 41, 71, 81, 91], [1, 11, 31, 41, 61], [1, 11, 31, 41, 61, 91], [1, 11, 31, 41, 61, 81], [1, 11, 31, 41, 61, 81, 91], [1, 11, 31, 41, 61, 71], [1, 11, 31, 41, 61, 71, 91], [1, 11, 31, 41, 61, 71, 81], [1, 11, 31, 41, 61, 71, 81, 91], [1, 11, 31, 41, 51], [1, 11, 31, 41, 51, 91], [1, 11, 31, 41, 51, 81], [1, 11, 31, 41, 51, 81, 91], [1, 11, 31, 41, 51, 71], [1, 11, 31, 41, 51, 71, 91], [1, 11, 31, 41, 51, 71, 81], [1, 11, 31, 41, 51, 71, 81, 91], [1, 11, 31, 41, 51, 61], [1, 11, 31, 41, 51, 61, 91], [1, 11, 31, 41, 51, 61, 81], [1, 11, 31, 41, 51, 61, 81, 91], [1, 11, 31, 41, 51, 61, 71], [1, 11, 31, 41, 51, 61, 71, 91], [1, 11, 31, 41, 51, 61, 71, 81], [1, 11, 31, 41, 51, 61, 71, 81, 91], [1, 11, 21], [1, 11, 21, 91], [1, 11, 21, 81], [1, 11, 21, 81, 91], [1, 11, 21, 71], [1, 11, 21, 71, 91], [1, 11, 21, 71, 81], [1, 11, 21, 71, 81, 91], [1, 11, 21, 61], [1, 11, 21, 61, 91], [1, 11, 21, 61, 81], [1, 11, 21, 61, 81, 91], [1, 11, 21, 61, 71], [1, 11, 21, 61, 71, 91], [1, 11, 21, 61, 71, 81], [1, 11, 21, 61, 71, 81, 91], [1, 11, 21, 51], [1, 11, 21, 51, 91], [1, 11, 21, 51, 81], [1, 11, 21, 51, 81, 91], [1, 11, 21, 51, 71], [1, 11, 21, 51, 71, 91], [1, 11, 21, 51, 71, 81], [1, 11, 21, 51, 71, 81, 91], [1, 11, 21, 51, 61], [1, 11, 21, 51, 61, 91], [1, 11, 21, 51, 61, 81], [1, 11, 21, 51, 61, 81, 91], [1, 11, 21, 51, 61, 71], [1, 11, 21, 51, 61, 71, 91], [1, 11, 21, 51, 61, 71, 81], [1, 11, 21, 51, 61, 71, 81, 91], [1, 11, 21, 41], [1, 11, 21, 41, 91], [1, 11, 21, 41, 81], [1, 11, 21, 41, 81, 91], [1, 11, 21, 41, 71], [1, 11, 21, 41, 71, 91], [1, 11, 21, 41, 71, 81], [1, 11, 21, 41, 71, 81, 91], [1, 11, 21, 41, 61], [1, 11, 21, 41, 61, 91], [1, 11, 21, 41, 61, 81], [1, 11, 21, 41, 61, 81, 91], [1, 11, 21, 41, 61, 71], [1, 11, 21, 41, 61, 71, 91], [1, 11, 21, 41, 61, 71, 81], [1, 11, 21, 41, 61, 71, 81, 91], [1, 11, 21, 41, 51], [1, 11, 21, 41, 51, 91], [1, 11, 21, 41, 51, 81], [1, 11, 21, 41, 51, 81, 91], [1, 11, 21, 41, 51, 71], [1, 11, 21, 41, 51, 71, 91], [1, 11, 21, 41, 51, 71, 81], [1, 11, 21, 41, 51, 71, 81, 91], [1, 11, 21, 41, 51, 61], [1, 11, 21, 41, 51, 61, 91], [1, 11, 21, 41, 51, 61, 81], [1, 11, 21, 41, 51, 61, 81, 91], [1, 11, 21, 41, 51, 61, 71], [1, 11, 21, 41, 51, 61, 71, 91], [1, 11, 21, 41, 51, 61, 71, 81], [1, 11, 21, 41, 51, 61, 71, 81, 91], [1, 11, 21, 31], [1, 11, 21, 31, 91], [1, 11, 21, 31, 81], [1, 11, 21, 31, 81, 91], [1, 11, 21, 31, 71], [1, 11, 21, 31, 71, 91], [1, 11, 21, 31, 71, 81], [1, 11, 21, 31, 71, 81, 91], [1, 11, 21, 31, 61], [1, 11, 21, 31, 61, 91], [1, 11, 21, 31, 61, 81], [1, 11, 21, 31, 61, 81, 91], [1, 11, 21, 31, 61, 71], [1, 11, 21, 31, 61, 71, 91], [1, 11, 21, 31, 61, 71, 81], [1, 11, 21, 31, 61, 71, 81, 91], [1, 11, 21, 31, 51], [1, 11, 21, 31, 51, 91], [1, 11, 21, 31, 51, 81], [1, 11, 21, 31, 51, 81, 91], [1, 11, 21, 31, 51, 71], [1, 11, 21, 31, 51, 71, 91], [1, 11, 21, 31, 51, 71, 81], [1, 11, 21, 31, 51, 71, 81, 91], [1, 11, 21, 31, 51, 61], [1, 11, 21, 31, 51, 61, 91], [1, 11, 21, 31, 51, 61, 81], [1, 11, 21, 31, 51, 61, 81, 91], [1, 11, 21, 31, 51, 61, 71], [1, 11, 21, 31, 51, 61, 71, 91], [1, 11, 21, 31, 51, 61, 71, 81], [1, 11, 21, 31, 51, 61, 71, 81, 91], [1, 11, 21, 31, 41], [1, 11, 21, 31, 41, 91], [1, 11, 21, 31, 41, 81], [1, 11, 21, 31, 41, 81, 91], [1, 11, 21, 31, 41, 71], [1, 11, 21, 31, 41, 71, 91], [1, 11, 21, 31, 41, 71, 81], [1, 11, 21, 31, 41, 71, 81, 91], [1, 11, 21, 31, 41, 61], [1, 11, 21, 31, 41, 61, 91], [1, 11, 21, 31, 41, 61, 81], [1, 11, 21, 31, 41, 61, 81, 91], [1, 11, 21, 31, 41, 61, 71], [1, 11, 21, 31, 41, 61, 71, 91], [1, 11, 21, 31, 41, 61, 71, 81], [1, 11, 21, 31, 41, 61, 71, 81, 91], [1, 11, 21, 31, 41, 51], [1, 11, 21, 31, 41, 51, 91], [1, 11, 21, 31, 41, 51, 81], [1, 11, 21, 31, 41, 51, 81, 91], [1, 11, 21, 31, 41, 51, 71], [1, 11, 21, 31, 41, 51, 71, 91], [1, 11, 21, 31, 41, 51, 71, 81], [1, 11, 21, 31, 41, 51, 71, 81, 91], [1, 11, 21, 31, 41, 51, 61], [1, 11, 21, 31, 41, 51, 61, 91], [1, 11, 21, 31, 41, 51, 61, 81], [1, 11, 21, 31, 41, 51, 61, 81, 91], [1, 11, 21, 31, 41, 51, 61, 71], [1, 11, 21, 31, 41, 51, 61, 71, 91], [1, 11, 21, 31, 41, 51, 61, 71, 81], [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "[[], [1000], [900], [900, 1000], [800], [800, 1000], [800, 900], [800, 900, 1000], [700], [700, 1000], [700, 900], [700, 900, 1000], [700, 800], [700, 800, 1000], [700, 800, 900], [700, 800, 900, 1000], [600], [600, 1000], [600, 900], [600, 900, 1000], [600, 800], [600, 800, 1000], [600, 800, 900], [600, 800, 900, 1000], [600, 700], [600, 700, 1000], [600, 700, 900], [600, 700, 900, 1000], [600, 700, 800], [600, 700, 800, 1000], [600, 700, 800, 900], [600, 700, 800, 900, 1000], [500], [500, 1000], [500, 900], [500, 900, 1000], [500, 800], [500, 800, 1000], [500, 800, 900], [500, 800, 900, 1000], [500, 700], [500, 700, 1000], [500, 700, 900], [500, 700, 900, 1000], [500, 700, 800], [500, 700, 800, 1000], [500, 700, 800, 900], [500, 700, 800, 900, 1000], [500, 600], [500, 600, 1000], [500, 600, 900], [500, 600, 900, 1000], [500, 600, 800], [500, 600, 800, 1000], [500, 600, 800, 900], [500, 600, 800, 900, 1000], [500, 600, 700], [500, 600, 700, 1000], [500, 600, 700, 900], [500, 600, 700, 900, 1000], [500, 600, 700, 800], [500, 600, 700, 800, 1000], [500, 600, 700, 800, 900], [500, 600, 700, 800, 900, 1000], [400], [400, 1000], [400, 900], [400, 900, 1000], [400, 800], [400, 800, 1000], [400, 800, 900], [400, 800, 900, 1000], [400, 700], [400, 700, 1000], [400, 700, 900], [400, 700, 900, 1000], [400, 700, 800], [400, 700, 800, 1000], [400, 700, 800, 900], [400, 700, 800, 900, 1000], [400, 600], [400, 600, 1000], [400, 600, 900], [400, 600, 900, 1000], [400, 600, 800], [400, 600, 800, 1000], [400, 600, 800, 900], [400, 600, 800, 900, 1000], [400, 600, 700], [400, 600, 700, 1000], [400, 600, 700, 900], [400, 600, 700, 900, 1000], [400, 600, 700, 800], [400, 600, 700, 800, 1000], [400, 600, 700, 800, 900], [400, 600, 700, 800, 900, 1000], [400, 500], [400, 500, 1000], [400, 500, 900], [400, 500, 900, 1000], [400, 500, 800], [400, 500, 800, 1000], [400, 500, 800, 900], [400, 500, 800, 900, 1000], [400, 500, 700], [400, 500, 700, 1000], [400, 500, 700, 900], [400, 500, 700, 900, 1000], [400, 500, 700, 800], [400, 500, 700, 800, 1000], [400, 500, 700, 800, 900], [400, 500, 700, 800, 900, 1000], [400, 500, 600], [400, 500, 600, 1000], [400, 500, 600, 900], [400, 500, 600, 900, 1000], [400, 500, 600, 800], [400, 500, 600, 800, 1000], [400, 500, 600, 800, 900], [400, 500, 600, 800, 900, 1000], [400, 500, 600, 700], [400, 500, 600, 700, 1000], [400, 500, 600, 700, 900], [400, 500, 600, 700, 900, 1000], [400, 500, 600, 700, 800], [400, 500, 600, 700, 800, 1000], [400, 500, 600, 700, 800, 900], [400, 500, 600, 700, 800, 900, 1000], [300], [300, 1000], [300, 900], [300, 900, 1000], [300, 800], [300, 800, 1000], [300, 800, 900], [300, 800, 900, 1000], [300, 700], [300, 700, 1000], [300, 700, 900], [300, 700, 900, 1000], [300, 700, 800], [300, 700, 800, 1000], [300, 700, 800, 900], [300, 700, 800, 900, 1000], [300, 600], [300, 600, 1000], [300, 600, 900], [300, 600, 900, 1000], [300, 600, 800], [300, 600, 800, 1000], [300, 600, 800, 900], [300, 600, 800, 900, 1000], [300, 600, 700], [300, 600, 700, 1000], [300, 600, 700, 900], [300, 600, 700, 900, 1000], [300, 600, 700, 800], [300, 600, 700, 800, 1000], [300, 600, 700, 800, 900], [300, 600, 700, 800, 900, 1000], [300, 500], [300, 500, 1000], [300, 500, 900], [300, 500, 900, 1000], [300, 500, 800], [300, 500, 800, 1000], [300, 500, 800, 900], [300, 500, 800, 900, 1000], [300, 500, 700], [300, 500, 700, 1000], [300, 500, 700, 900], [300, 500, 700, 900, 1000], [300, 500, 700, 800], [300, 500, 700, 800, 1000], [300, 500, 700, 800, 900], [300, 500, 700, 800, 900, 1000], [300, 500, 600], [300, 500, 600, 1000], [300, 500, 600, 900], [300, 500, 600, 900, 1000], [300, 500, 600, 800], [300, 500, 600, 800, 1000], [300, 500, 600, 800, 900], [300, 500, 600, 800, 900, 1000], [300, 500, 600, 700], [300, 500, 600, 700, 1000], [300, 500, 600, 700, 900], [300, 500, 600, 700, 900, 1000], [300, 500, 600, 700, 800], [300, 500, 600, 700, 800, 1000], [300, 500, 600, 700, 800, 900], [300, 500, 600, 700, 800, 900, 1000], [300, 400], [300, 400, 1000], [300, 400, 900], [300, 400, 900, 1000], [300, 400, 800], [300, 400, 800, 1000], [300, 400, 800, 900], [300, 400, 800, 900, 1000], [300, 400, 700], [300, 400, 700, 1000], [300, 400, 700, 900], [300, 400, 700, 900, 1000], [300, 400, 700, 800], [300, 400, 700, 800, 1000], [300, 400, 700, 800, 900], [300, 400, 700, 800, 900, 1000], [300, 400, 600], [300, 400, 600, 1000], [300, 400, 600, 900], [300, 400, 600, 900, 1000], [300, 400, 600, 800], [300, 400, 600, 800, 1000], [300, 400, 600, 800, 900], [300, 400, 600, 800, 900, 1000], [300, 400, 600, 700], [300, 400, 600, 700, 1000], [300, 400, 600, 700, 900], [300, 400, 600, 700, 900, 1000], [300, 400, 600, 700, 800], [300, 400, 600, 700, 800, 1000], [300, 400, 600, 700, 800, 900], [300, 400, 600, 700, 800, 900, 1000], [300, 400, 500], [300, 400, 500, 1000], [300, 400, 500, 900], [300, 400, 500, 900, 1000], [300, 400, 500, 800], [300, 400, 500, 800, 1000], [300, 400, 500, 800, 900], [300, 400, 500, 800, 900, 1000], [300, 400, 500, 700], [300, 400, 500, 700, 1000], [300, 400, 500, 700, 900], [300, 400, 500, 700, 900, 1000], [300, 400, 500, 700, 800], [300, 400, 500, 700, 800, 1000], [300, 400, 500, 700, 800, 900], [300, 400, 500, 700, 800, 900, 1000], [300, 400, 500, 600], [300, 400, 500, 600, 1000], [300, 400, 500, 600, 900], [300, 400, 500, 600, 900, 1000], [300, 400, 500, 600, 800], [300, 400, 500, 600, 800, 1000], [300, 400, 500, 600, 800, 900], [300, 400, 500, 600, 800, 900, 1000], [300, 400, 500, 600, 700], [300, 400, 500, 600, 700, 1000], [300, 400, 500, 600, 700, 900], [300, 400, 500, 600, 700, 900, 1000], [300, 400, 500, 600, 700, 800], [300, 400, 500, 600, 700, 800, 1000], [300, 400, 500, 600, 700, 800, 900], [300, 400, 500, 600, 700, 800, 900, 1000], [200], [200, 1000], [200, 900], [200, 900, 1000], [200, 800], [200, 800, 1000], [200, 800, 900], [200, 800, 900, 1000], [200, 700], [200, 700, 1000], [200, 700, 900], [200, 700, 900, 1000], [200, 700, 800], [200, 700, 800, 1000], [200, 700, 800, 900], [200, 700, 800, 900, 1000], [200, 600], [200, 600, 1000], [200, 600, 900], [200, 600, 900, 1000], [200, 600, 800], [200, 600, 800, 1000], [200, 600, 800, 900], [200, 600, 800, 900, 1000], [200, 600, 700], [200, 600, 700, 1000], [200, 600, 700, 900], [200, 600, 700, 900, 1000], [200, 600, 700, 800], [200, 600, 700, 800, 1000], [200, 600, 700, 800, 900], [200, 600, 700, 800, 900, 1000], [200, 500], [200, 500, 1000], [200, 500, 900], [200, 500, 900, 1000], [200, 500, 800], [200, 500, 800, 1000], [200, 500, 800, 900], [200, 500, 800, 900, 1000], [200, 500, 700], [200, 500, 700, 1000], [200, 500, 700, 900], [200, 500, 700, 900, 1000], [200, 500, 700, 800], [200, 500, 700, 800, 1000], [200, 500, 700, 800, 900], [200, 500, 700, 800, 900, 1000], [200, 500, 600], [200, 500, 600, 1000], [200, 500, 600, 900], [200, 500, 600, 900, 1000], [200, 500, 600, 800], [200, 500, 600, 800, 1000], [200, 500, 600, 800, 900], [200, 500, 600, 800, 900, 1000], [200, 500, 600, 700], [200, 500, 600, 700, 1000], [200, 500, 600, 700, 900], [200, 500, 600, 700, 900, 1000], [200, 500, 600, 700, 800], [200, 500, 600, 700, 800, 1000], [200, 500, 600, 700, 800, 900], [200, 500, 600, 700, 800, 900, 1000], [200, 400], [200, 400, 1000], [200, 400, 900], [200, 400, 900, 1000], [200, 400, 800], [200, 400, 800, 1000], [200, 400, 800, 900], [200, 400, 800, 900, 1000], [200, 400, 700], [200, 400, 700, 1000], [200, 400, 700, 900], [200, 400, 700, 900, 1000], [200, 400, 700, 800], [200, 400, 700, 800, 1000], [200, 400, 700, 800, 900], [200, 400, 700, 800, 900, 1000], [200, 400, 600], [200, 400, 600, 1000], [200, 400, 600, 900], [200, 400, 600, 900, 1000], [200, 400, 600, 800], [200, 400, 600, 800, 1000], [200, 400, 600, 800, 900], [200, 400, 600, 800, 900, 1000], [200, 400, 600, 700], [200, 400, 600, 700, 1000], [200, 400, 600, 700, 900], [200, 400, 600, 700, 900, 1000], [200, 400, 600, 700, 800], [200, 400, 600, 700, 800, 1000], [200, 400, 600, 700, 800, 900], [200, 400, 600, 700, 800, 900, 1000], [200, 400, 500], [200, 400, 500, 1000], [200, 400, 500, 900], [200, 400, 500, 900, 1000], [200, 400, 500, 800], [200, 400, 500, 800, 1000], [200, 400, 500, 800, 900], [200, 400, 500, 800, 900, 1000], [200, 400, 500, 700], [200, 400, 500, 700, 1000], [200, 400, 500, 700, 900], [200, 400, 500, 700, 900, 1000], [200, 400, 500, 700, 800], [200, 400, 500, 700, 800, 1000], [200, 400, 500, 700, 800, 900], [200, 400, 500, 700, 800, 900, 1000], [200, 400, 500, 600], [200, 400, 500, 600, 1000], [200, 400, 500, 600, 900], [200, 400, 500, 600, 900, 1000], [200, 400, 500, 600, 800], [200, 400, 500, 600, 800, 1000], [200, 400, 500, 600, 800, 900], [200, 400, 500, 600, 800, 900, 1000], [200, 400, 500, 600, 700], [200, 400, 500, 600, 700, 1000], [200, 400, 500, 600, 700, 900], [200, 400, 500, 600, 700, 900, 1000], [200, 400, 500, 600, 700, 800], [200, 400, 500, 600, 700, 800, 1000], [200, 400, 500, 600, 700, 800, 900], [200, 400, 500, 600, 700, 800, 900, 1000], [200, 300], [200, 300, 1000], [200, 300, 900], [200, 300, 900, 1000], [200, 300, 800], [200, 300, 800, 1000], [200, 300, 800, 900], [200, 300, 800, 900, 1000], [200, 300, 700], [200, 300, 700, 1000], [200, 300, 700, 900], [200, 300, 700, 900, 1000], [200, 300, 700, 800], [200, 300, 700, 800, 1000], [200, 300, 700, 800, 900], [200, 300, 700, 800, 900, 1000], [200, 300, 600], [200, 300, 600, 1000], [200, 300, 600, 900], [200, 300, 600, 900, 1000], [200, 300, 600, 800], [200, 300, 600, 800, 1000], [200, 300, 600, 800, 900], [200, 300, 600, 800, 900, 1000], [200, 300, 600, 700], [200, 300, 600, 700, 1000], [200, 300, 600, 700, 900], [200, 300, 600, 700, 900, 1000], [200, 300, 600, 700, 800], [200, 300, 600, 700, 800, 1000], [200, 300, 600, 700, 800, 900], [200, 300, 600, 700, 800, 900, 1000], [200, 300, 500], [200, 300, 500, 1000], [200, 300, 500, 900], [200, 300, 500, 900, 1000], [200, 300, 500, 800], [200, 300, 500, 800, 1000], [200, 300, 500, 800, 900], [200, 300, 500, 800, 900, 1000], [200, 300, 500, 700], [200, 300, 500, 700, 1000], [200, 300, 500, 700, 900], [200, 300, 500, 700, 900, 1000], [200, 300, 500, 700, 800], [200, 300, 500, 700, 800, 1000], [200, 300, 500, 700, 800, 900], [200, 300, 500, 700, 800, 900, 1000], [200, 300, 500, 600], [200, 300, 500, 600, 1000], [200, 300, 500, 600, 900], [200, 300, 500, 600, 900, 1000], [200, 300, 500, 600, 800], [200, 300, 500, 600, 800, 1000], [200, 300, 500, 600, 800, 900], [200, 300, 500, 600, 800, 900, 1000], [200, 300, 500, 600, 700], [200, 300, 500, 600, 700, 1000], [200, 300, 500, 600, 700, 900], [200, 300, 500, 600, 700, 900, 1000], [200, 300, 500, 600, 700, 800], [200, 300, 500, 600, 700, 800, 1000], [200, 300, 500, 600, 700, 800, 900], [200, 300, 500, 600, 700, 800, 900, 1000], [200, 300, 400], [200, 300, 400, 1000], [200, 300, 400, 900], [200, 300, 400, 900, 1000], [200, 300, 400, 800], [200, 300, 400, 800, 1000], [200, 300, 400, 800, 900], [200, 300, 400, 800, 900, 1000], [200, 300, 400, 700], [200, 300, 400, 700, 1000], [200, 300, 400, 700, 900], [200, 300, 400, 700, 900, 1000], [200, 300, 400, 700, 800], [200, 300, 400, 700, 800, 1000], [200, 300, 400, 700, 800, 900], [200, 300, 400, 700, 800, 900, 1000], [200, 300, 400, 600], [200, 300, 400, 600, 1000], [200, 300, 400, 600, 900], [200, 300, 400, 600, 900, 1000], [200, 300, 400, 600, 800], [200, 300, 400, 600, 800, 1000], [200, 300, 400, 600, 800, 900], [200, 300, 400, 600, 800, 900, 1000], [200, 300, 400, 600, 700], [200, 300, 400, 600, 700, 1000], [200, 300, 400, 600, 700, 900], [200, 300, 400, 600, 700, 900, 1000], [200, 300, 400, 600, 700, 800], [200, 300, 400, 600, 700, 800, 1000], [200, 300, 400, 600, 700, 800, 900], [200, 300, 400, 600, 700, 800, 900, 1000], [200, 300, 400, 500], [200, 300, 400, 500, 1000], [200, 300, 400, 500, 900], [200, 300, 400, 500, 900, 1000], [200, 300, 400, 500, 800], [200, 300, 400, 500, 800, 1000], [200, 300, 400, 500, 800, 900], [200, 300, 400, 500, 800, 900, 1000], [200, 300, 400, 500, 700], [200, 300, 400, 500, 700, 1000], [200, 300, 400, 500, 700, 900], [200, 300, 400, 500, 700, 900, 1000], [200, 300, 400, 500, 700, 800], [200, 300, 400, 500, 700, 800, 1000], [200, 300, 400, 500, 700, 800, 900], [200, 300, 400, 500, 700, 800, 900, 1000], [200, 300, 400, 500, 600], [200, 300, 400, 500, 600, 1000], [200, 300, 400, 500, 600, 900], [200, 300, 400, 500, 600, 900, 1000], [200, 300, 400, 500, 600, 800], [200, 300, 400, 500, 600, 800, 1000], [200, 300, 400, 500, 600, 800, 900], [200, 300, 400, 500, 600, 800, 900, 1000], [200, 300, 400, 500, 600, 700], [200, 300, 400, 500, 600, 700, 1000], [200, 300, 400, 500, 600, 700, 900], [200, 300, 400, 500, 600, 700, 900, 1000], [200, 300, 400, 500, 600, 700, 800], [200, 300, 400, 500, 600, 700, 800, 1000], [200, 300, 400, 500, 600, 700, 800, 900], [200, 300, 400, 500, 600, 700, 800, 900, 1000], [100], [100, 1000], [100, 900], [100, 900, 1000], [100, 800], [100, 800, 1000], [100, 800, 900], [100, 800, 900, 1000], [100, 700], [100, 700, 1000], [100, 700, 900], [100, 700, 900, 1000], [100, 700, 800], [100, 700, 800, 1000], [100, 700, 800, 900], [100, 700, 800, 900, 1000], [100, 600], [100, 600, 1000], [100, 600, 900], [100, 600, 900, 1000], [100, 600, 800], [100, 600, 800, 1000], [100, 600, 800, 900], [100, 600, 800, 900, 1000], [100, 600, 700], [100, 600, 700, 1000], [100, 600, 700, 900], [100, 600, 700, 900, 1000], [100, 600, 700, 800], [100, 600, 700, 800, 1000], [100, 600, 700, 800, 900], [100, 600, 700, 800, 900, 1000], [100, 500], [100, 500, 1000], [100, 500, 900], [100, 500, 900, 1000], [100, 500, 800], [100, 500, 800, 1000], [100, 500, 800, 900], [100, 500, 800, 900, 1000], [100, 500, 700], [100, 500, 700, 1000], [100, 500, 700, 900], [100, 500, 700, 900, 1000], [100, 500, 700, 800], [100, 500, 700, 800, 1000], [100, 500, 700, 800, 900], [100, 500, 700, 800, 900, 1000], [100, 500, 600], [100, 500, 600, 1000], [100, 500, 600, 900], [100, 500, 600, 900, 1000], [100, 500, 600, 800], [100, 500, 600, 800, 1000], [100, 500, 600, 800, 900], [100, 500, 600, 800, 900, 1000], [100, 500, 600, 700], [100, 500, 600, 700, 1000], [100, 500, 600, 700, 900], [100, 500, 600, 700, 900, 1000], [100, 500, 600, 700, 800], [100, 500, 600, 700, 800, 1000], [100, 500, 600, 700, 800, 900], [100, 500, 600, 700, 800, 900, 1000], [100, 400], [100, 400, 1000], [100, 400, 900], [100, 400, 900, 1000], [100, 400, 800], [100, 400, 800, 1000], [100, 400, 800, 900], [100, 400, 800, 900, 1000], [100, 400, 700], [100, 400, 700, 1000], [100, 400, 700, 900], [100, 400, 700, 900, 1000], [100, 400, 700, 800], [100, 400, 700, 800, 1000], [100, 400, 700, 800, 900], [100, 400, 700, 800, 900, 1000], [100, 400, 600], [100, 400, 600, 1000], [100, 400, 600, 900], [100, 400, 600, 900, 1000], [100, 400, 600, 800], [100, 400, 600, 800, 1000], [100, 400, 600, 800, 900], [100, 400, 600, 800, 900, 1000], [100, 400, 600, 700], [100, 400, 600, 700, 1000], [100, 400, 600, 700, 900], [100, 400, 600, 700, 900, 1000], [100, 400, 600, 700, 800], [100, 400, 600, 700, 800, 1000], [100, 400, 600, 700, 800, 900], [100, 400, 600, 700, 800, 900, 1000], [100, 400, 500], [100, 400, 500, 1000], [100, 400, 500, 900], [100, 400, 500, 900, 1000], [100, 400, 500, 800], [100, 400, 500, 800, 1000], [100, 400, 500, 800, 900], [100, 400, 500, 800, 900, 1000], [100, 400, 500, 700], [100, 400, 500, 700, 1000], [100, 400, 500, 700, 900], [100, 400, 500, 700, 900, 1000], [100, 400, 500, 700, 800], [100, 400, 500, 700, 800, 1000], [100, 400, 500, 700, 800, 900], [100, 400, 500, 700, 800, 900, 1000], [100, 400, 500, 600], [100, 400, 500, 600, 1000], [100, 400, 500, 600, 900], [100, 400, 500, 600, 900, 1000], [100, 400, 500, 600, 800], [100, 400, 500, 600, 800, 1000], [100, 400, 500, 600, 800, 900], [100, 400, 500, 600, 800, 900, 1000], [100, 400, 500, 600, 700], [100, 400, 500, 600, 700, 1000], [100, 400, 500, 600, 700, 900], [100, 400, 500, 600, 700, 900, 1000], [100, 400, 500, 600, 700, 800], [100, 400, 500, 600, 700, 800, 1000], [100, 400, 500, 600, 700, 800, 900], [100, 400, 500, 600, 700, 800, 900, 1000], [100, 300], [100, 300, 1000], [100, 300, 900], [100, 300, 900, 1000], [100, 300, 800], [100, 300, 800, 1000], [100, 300, 800, 900], [100, 300, 800, 900, 1000], [100, 300, 700], [100, 300, 700, 1000], [100, 300, 700, 900], [100, 300, 700, 900, 1000], [100, 300, 700, 800], [100, 300, 700, 800, 1000], [100, 300, 700, 800, 900], [100, 300, 700, 800, 900, 1000], [100, 300, 600], [100, 300, 600, 1000], [100, 300, 600, 900], [100, 300, 600, 900, 1000], [100, 300, 600, 800], [100, 300, 600, 800, 1000], [100, 300, 600, 800, 900], [100, 300, 600, 800, 900, 1000], [100, 300, 600, 700], [100, 300, 600, 700, 1000], [100, 300, 600, 700, 900], [100, 300, 600, 700, 900, 1000], [100, 300, 600, 700, 800], [100, 300, 600, 700, 800, 1000], [100, 300, 600, 700, 800, 900], [100, 300, 600, 700, 800, 900, 1000], [100, 300, 500], [100, 300, 500, 1000], [100, 300, 500, 900], [100, 300, 500, 900, 1000], [100, 300, 500, 800], [100, 300, 500, 800, 1000], [100, 300, 500, 800, 900], [100, 300, 500, 800, 900, 1000], [100, 300, 500, 700], [100, 300, 500, 700, 1000], [100, 300, 500, 700, 900], [100, 300, 500, 700, 900, 1000], [100, 300, 500, 700, 800], [100, 300, 500, 700, 800, 1000], [100, 300, 500, 700, 800, 900], [100, 300, 500, 700, 800, 900, 1000], [100, 300, 500, 600], [100, 300, 500, 600, 1000], [100, 300, 500, 600, 900], [100, 300, 500, 600, 900, 1000], [100, 300, 500, 600, 800], [100, 300, 500, 600, 800, 1000], [100, 300, 500, 600, 800, 900], [100, 300, 500, 600, 800, 900, 1000], [100, 300, 500, 600, 700], [100, 300, 500, 600, 700, 1000], [100, 300, 500, 600, 700, 900], [100, 300, 500, 600, 700, 900, 1000], [100, 300, 500, 600, 700, 800], [100, 300, 500, 600, 700, 800, 1000], [100, 300, 500, 600, 700, 800, 900], [100, 300, 500, 600, 700, 800, 900, 1000], [100, 300, 400], [100, 300, 400, 1000], [100, 300, 400, 900], [100, 300, 400, 900, 1000], [100, 300, 400, 800], [100, 300, 400, 800, 1000], [100, 300, 400, 800, 900], [100, 300, 400, 800, 900, 1000], [100, 300, 400, 700], [100, 300, 400, 700, 1000], [100, 300, 400, 700, 900], [100, 300, 400, 700, 900, 1000], [100, 300, 400, 700, 800], [100, 300, 400, 700, 800, 1000], [100, 300, 400, 700, 800, 900], [100, 300, 400, 700, 800, 900, 1000], [100, 300, 400, 600], [100, 300, 400, 600, 1000], [100, 300, 400, 600, 900], [100, 300, 400, 600, 900, 1000], [100, 300, 400, 600, 800], [100, 300, 400, 600, 800, 1000], [100, 300, 400, 600, 800, 900], [100, 300, 400, 600, 800, 900, 1000], [100, 300, 400, 600, 700], [100, 300, 400, 600, 700, 1000], [100, 300, 400, 600, 700, 900], [100, 300, 400, 600, 700, 900, 1000], [100, 300, 400, 600, 700, 800], [100, 300, 400, 600, 700, 800, 1000], [100, 300, 400, 600, 700, 800, 900], [100, 300, 400, 600, 700, 800, 900, 1000], [100, 300, 400, 500], [100, 300, 400, 500, 1000], [100, 300, 400, 500, 900], [100, 300, 400, 500, 900, 1000], [100, 300, 400, 500, 800], [100, 300, 400, 500, 800, 1000], [100, 300, 400, 500, 800, 900], [100, 300, 400, 500, 800, 900, 1000], [100, 300, 400, 500, 700], [100, 300, 400, 500, 700, 1000], [100, 300, 400, 500, 700, 900], [100, 300, 400, 500, 700, 900, 1000], [100, 300, 400, 500, 700, 800], [100, 300, 400, 500, 700, 800, 1000], [100, 300, 400, 500, 700, 800, 900], [100, 300, 400, 500, 700, 800, 900, 1000], [100, 300, 400, 500, 600], [100, 300, 400, 500, 600, 1000], [100, 300, 400, 500, 600, 900], [100, 300, 400, 500, 600, 900, 1000], [100, 300, 400, 500, 600, 800], [100, 300, 400, 500, 600, 800, 1000], [100, 300, 400, 500, 600, 800, 900], [100, 300, 400, 500, 600, 800, 900, 1000], [100, 300, 400, 500, 600, 700], [100, 300, 400, 500, 600, 700, 1000], [100, 300, 400, 500, 600, 700, 900], [100, 300, 400, 500, 600, 700, 900, 1000], [100, 300, 400, 500, 600, 700, 800], [100, 300, 400, 500, 600, 700, 800, 1000], [100, 300, 400, 500, 600, 700, 800, 900], [100, 300, 400, 500, 600, 700, 800, 900, 1000], [100, 200], [100, 200, 1000], [100, 200, 900], [100, 200, 900, 1000], [100, 200, 800], [100, 200, 800, 1000], [100, 200, 800, 900], [100, 200, 800, 900, 1000], [100, 200, 700], [100, 200, 700, 1000], [100, 200, 700, 900], [100, 200, 700, 900, 1000], [100, 200, 700, 800], [100, 200, 700, 800, 1000], [100, 200, 700, 800, 900], [100, 200, 700, 800, 900, 1000], [100, 200, 600], [100, 200, 600, 1000], [100, 200, 600, 900], [100, 200, 600, 900, 1000], [100, 200, 600, 800], [100, 200, 600, 800, 1000], [100, 200, 600, 800, 900], [100, 200, 600, 800, 900, 1000], [100, 200, 600, 700], [100, 200, 600, 700, 1000], [100, 200, 600, 700, 900], [100, 200, 600, 700, 900, 1000], [100, 200, 600, 700, 800], [100, 200, 600, 700, 800, 1000], [100, 200, 600, 700, 800, 900], [100, 200, 600, 700, 800, 900, 1000], [100, 200, 500], [100, 200, 500, 1000], [100, 200, 500, 900], [100, 200, 500, 900, 1000], [100, 200, 500, 800], [100, 200, 500, 800, 1000], [100, 200, 500, 800, 900], [100, 200, 500, 800, 900, 1000], [100, 200, 500, 700], [100, 200, 500, 700, 1000], [100, 200, 500, 700, 900], [100, 200, 500, 700, 900, 1000], [100, 200, 500, 700, 800], [100, 200, 500, 700, 800, 1000], [100, 200, 500, 700, 800, 900], [100, 200, 500, 700, 800, 900, 1000], [100, 200, 500, 600], [100, 200, 500, 600, 1000], [100, 200, 500, 600, 900], [100, 200, 500, 600, 900, 1000], [100, 200, 500, 600, 800], [100, 200, 500, 600, 800, 1000], [100, 200, 500, 600, 800, 900], [100, 200, 500, 600, 800, 900, 1000], [100, 200, 500, 600, 700], [100, 200, 500, 600, 700, 1000], [100, 200, 500, 600, 700, 900], [100, 200, 500, 600, 700, 900, 1000], [100, 200, 500, 600, 700, 800], [100, 200, 500, 600, 700, 800, 1000], [100, 200, 500, 600, 700, 800, 900], [100, 200, 500, 600, 700, 800, 900, 1000], [100, 200, 400], [100, 200, 400, 1000], [100, 200, 400, 900], [100, 200, 400, 900, 1000], [100, 200, 400, 800], [100, 200, 400, 800, 1000], [100, 200, 400, 800, 900], [100, 200, 400, 800, 900, 1000], [100, 200, 400, 700], [100, 200, 400, 700, 1000], [100, 200, 400, 700, 900], [100, 200, 400, 700, 900, 1000], [100, 200, 400, 700, 800], [100, 200, 400, 700, 800, 1000], [100, 200, 400, 700, 800, 900], [100, 200, 400, 700, 800, 900, 1000], [100, 200, 400, 600], [100, 200, 400, 600, 1000], [100, 200, 400, 600, 900], [100, 200, 400, 600, 900, 1000], [100, 200, 400, 600, 800], [100, 200, 400, 600, 800, 1000], [100, 200, 400, 600, 800, 900], [100, 200, 400, 600, 800, 900, 1000], [100, 200, 400, 600, 700], [100, 200, 400, 600, 700, 1000], [100, 200, 400, 600, 700, 900], [100, 200, 400, 600, 700, 900, 1000], [100, 200, 400, 600, 700, 800], [100, 200, 400, 600, 700, 800, 1000], [100, 200, 400, 600, 700, 800, 900], [100, 200, 400, 600, 700, 800, 900, 1000], [100, 200, 400, 500], [100, 200, 400, 500, 1000], [100, 200, 400, 500, 900], [100, 200, 400, 500, 900, 1000], [100, 200, 400, 500, 800], [100, 200, 400, 500, 800, 1000], [100, 200, 400, 500, 800, 900], [100, 200, 400, 500, 800, 900, 1000], [100, 200, 400, 500, 700], [100, 200, 400, 500, 700, 1000], [100, 200, 400, 500, 700, 900], [100, 200, 400, 500, 700, 900, 1000], [100, 200, 400, 500, 700, 800], [100, 200, 400, 500, 700, 800, 1000], [100, 200, 400, 500, 700, 800, 900], [100, 200, 400, 500, 700, 800, 900, 1000], [100, 200, 400, 500, 600], [100, 200, 400, 500, 600, 1000], [100, 200, 400, 500, 600, 900], [100, 200, 400, 500, 600, 900, 1000], [100, 200, 400, 500, 600, 800], [100, 200, 400, 500, 600, 800, 1000], [100, 200, 400, 500, 600, 800, 900], [100, 200, 400, 500, 600, 800, 900, 1000], [100, 200, 400, 500, 600, 700], [100, 200, 400, 500, 600, 700, 1000], [100, 200, 400, 500, 600, 700, 900], [100, 200, 400, 500, 600, 700, 900, 1000], [100, 200, 400, 500, 600, 700, 800], [100, 200, 400, 500, 600, 700, 800, 1000], [100, 200, 400, 500, 600, 700, 800, 900], [100, 200, 400, 500, 600, 700, 800, 900, 1000], [100, 200, 300], [100, 200, 300, 1000], [100, 200, 300, 900], [100, 200, 300, 900, 1000], [100, 200, 300, 800], [100, 200, 300, 800, 1000], [100, 200, 300, 800, 900], [100, 200, 300, 800, 900, 1000], [100, 200, 300, 700], [100, 200, 300, 700, 1000], [100, 200, 300, 700, 900], [100, 200, 300, 700, 900, 1000], [100, 200, 300, 700, 800], [100, 200, 300, 700, 800, 1000], [100, 200, 300, 700, 800, 900], [100, 200, 300, 700, 800, 900, 1000], [100, 200, 300, 600], [100, 200, 300, 600, 1000], [100, 200, 300, 600, 900], [100, 200, 300, 600, 900, 1000], [100, 200, 300, 600, 800], [100, 200, 300, 600, 800, 1000], [100, 200, 300, 600, 800, 900], [100, 200, 300, 600, 800, 900, 1000], [100, 200, 300, 600, 700], [100, 200, 300, 600, 700, 1000], [100, 200, 300, 600, 700, 900], [100, 200, 300, 600, 700, 900, 1000], [100, 200, 300, 600, 700, 800], [100, 200, 300, 600, 700, 800, 1000], [100, 200, 300, 600, 700, 800, 900], [100, 200, 300, 600, 700, 800, 900, 1000], [100, 200, 300, 500], [100, 200, 300, 500, 1000], [100, 200, 300, 500, 900], [100, 200, 300, 500, 900, 1000], [100, 200, 300, 500, 800], [100, 200, 300, 500, 800, 1000], [100, 200, 300, 500, 800, 900], [100, 200, 300, 500, 800, 900, 1000], [100, 200, 300, 500, 700], [100, 200, 300, 500, 700, 1000], [100, 200, 300, 500, 700, 900], [100, 200, 300, 500, 700, 900, 1000], [100, 200, 300, 500, 700, 800], [100, 200, 300, 500, 700, 800, 1000], [100, 200, 300, 500, 700, 800, 900], [100, 200, 300, 500, 700, 800, 900, 1000], [100, 200, 300, 500, 600], [100, 200, 300, 500, 600, 1000], [100, 200, 300, 500, 600, 900], [100, 200, 300, 500, 600, 900, 1000], [100, 200, 300, 500, 600, 800], [100, 200, 300, 500, 600, 800, 1000], [100, 200, 300, 500, 600, 800, 900], [100, 200, 300, 500, 600, 800, 900, 1000], [100, 200, 300, 500, 600, 700], [100, 200, 300, 500, 600, 700, 1000], [100, 200, 300, 500, 600, 700, 900], [100, 200, 300, 500, 600, 700, 900, 1000], [100, 200, 300, 500, 600, 700, 800], [100, 200, 300, 500, 600, 700, 800, 1000], [100, 200, 300, 500, 600, 700, 800, 900], [100, 200, 300, 500, 600, 700, 800, 900, 1000], [100, 200, 300, 400], [100, 200, 300, 400, 1000], [100, 200, 300, 400, 900], [100, 200, 300, 400, 900, 1000], [100, 200, 300, 400, 800], [100, 200, 300, 400, 800, 1000], [100, 200, 300, 400, 800, 900], [100, 200, 300, 400, 800, 900, 1000], [100, 200, 300, 400, 700], [100, 200, 300, 400, 700, 1000], [100, 200, 300, 400, 700, 900], [100, 200, 300, 400, 700, 900, 1000], [100, 200, 300, 400, 700, 800], [100, 200, 300, 400, 700, 800, 1000], [100, 200, 300, 400, 700, 800, 900], [100, 200, 300, 400, 700, 800, 900, 1000], [100, 200, 300, 400, 600], [100, 200, 300, 400, 600, 1000], [100, 200, 300, 400, 600, 900], [100, 200, 300, 400, 600, 900, 1000], [100, 200, 300, 400, 600, 800], [100, 200, 300, 400, 600, 800, 1000], [100, 200, 300, 400, 600, 800, 900], [100, 200, 300, 400, 600, 800, 900, 1000], [100, 200, 300, 400, 600, 700], [100, 200, 300, 400, 600, 700, 1000], [100, 200, 300, 400, 600, 700, 900], [100, 200, 300, 400, 600, 700, 900, 1000], [100, 200, 300, 400, 600, 700, 800], [100, 200, 300, 400, 600, 700, 800, 1000], [100, 200, 300, 400, 600, 700, 800, 900], [100, 200, 300, 400, 600, 700, 800, 900, 1000], [100, 200, 300, 400, 500], [100, 200, 300, 400, 500, 1000], [100, 200, 300, 400, 500, 900], [100, 200, 300, 400, 500, 900, 1000], [100, 200, 300, 400, 500, 800], [100, 200, 300, 400, 500, 800, 1000], [100, 200, 300, 400, 500, 800, 900], [100, 200, 300, 400, 500, 800, 900, 1000], [100, 200, 300, 400, 500, 700], [100, 200, 300, 400, 500, 700, 1000], [100, 200, 300, 400, 500, 700, 900], [100, 200, 300, 400, 500, 700, 900, 1000], [100, 200, 300, 400, 500, 700, 800], [100, 200, 300, 400, 500, 700, 800, 1000], [100, 200, 300, 400, 500, 700, 800, 900], [100, 200, 300, 400, 500, 700, 800, 900, 1000], [100, 200, 300, 400, 500, 600], [100, 200, 300, 400, 500, 600, 1000], [100, 200, 300, 400, 500, 600, 900], [100, 200, 300, 400, 500, 600, 900, 1000], [100, 200, 300, 400, 500, 600, 800], [100, 200, 300, 400, 500, 600, 800, 1000], [100, 200, 300, 400, 500, 600, 800, 900], [100, 200, 300, 400, 500, 600, 800, 900, 1000], [100, 200, 300, 400, 500, 600, 700], [100, 200, 300, 400, 500, 600, 700, 1000], [100, 200, 300, 400, 500, 600, 700, 900], [100, 200, 300, 400, 500, 600, 700, 900, 1000], [100, 200, 300, 400, 500, 600, 700, 800], [100, 200, 300, 400, 500, 600, 700, 800, 1000], [100, 200, 300, 400, 500, 600, 700, 800, 900], [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60]",
        "output": "[[], [60], [50], [50, 60], [40], [40, 60], [40, 50], [40, 50, 60], [30], [30, 60], [30, 50], [30, 50, 60], [30, 40], [30, 40, 60], [30, 40, 50], [30, 40, 50, 60], [20], [20, 60], [20, 50], [20, 50, 60], [20, 40], [20, 40, 60], [20, 40, 50], [20, 40, 50, 60], [20, 30], [20, 30, 60], [20, 30, 50], [20, 30, 50, 60], [20, 30, 40], [20, 30, 40, 60], [20, 30, 40, 50], [20, 30, 40, 50, 60], [10], [10, 60], [10, 50], [10, 50, 60], [10, 40], [10, 40, 60], [10, 40, 50], [10, 40, 50, 60], [10, 30], [10, 30, 60], [10, 30, 50], [10, 30, 50, 60], [10, 30, 40], [10, 30, 40, 60], [10, 30, 40, 50], [10, 30, 40, 50, 60], [10, 20], [10, 20, 60], [10, 20, 50], [10, 20, 50, 60], [10, 20, 40], [10, 20, 40, 60], [10, 20, 40, 50], [10, 20, 40, 50, 60], [10, 20, 30], [10, 20, 30, 60], [10, 20, 30, 50], [10, 20, 30, 50, 60], [10, 20, 30, 40], [10, 20, 30, 40, 60], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50, 60]]"
      },
      {
        "input": "nums = [-2, 0, 2, 4, 6, 8, 10, 12, 14, 16]",
        "output": "[[], [16], [14], [14, 16], [12], [12, 16], [12, 14], [12, 14, 16], [10], [10, 16], [10, 14], [10, 14, 16], [10, 12], [10, 12, 16], [10, 12, 14], [10, 12, 14, 16], [8], [8, 16], [8, 14], [8, 14, 16], [8, 12], [8, 12, 16], [8, 12, 14], [8, 12, 14, 16], [8, 10], [8, 10, 16], [8, 10, 14], [8, 10, 14, 16], [8, 10, 12], [8, 10, 12, 16], [8, 10, 12, 14], [8, 10, 12, 14, 16], [6], [6, 16], [6, 14], [6, 14, 16], [6, 12], [6, 12, 16], [6, 12, 14], [6, 12, 14, 16], [6, 10], [6, 10, 16], [6, 10, 14], [6, 10, 14, 16], [6, 10, 12], [6, 10, 12, 16], [6, 10, 12, 14], [6, 10, 12, 14, 16], [6, 8], [6, 8, 16], [6, 8, 14], [6, 8, 14, 16], [6, 8, 12], [6, 8, 12, 16], [6, 8, 12, 14], [6, 8, 12, 14, 16], [6, 8, 10], [6, 8, 10, 16], [6, 8, 10, 14], [6, 8, 10, 14, 16], [6, 8, 10, 12], [6, 8, 10, 12, 16], [6, 8, 10, 12, 14], [6, 8, 10, 12, 14, 16], [4], [4, 16], [4, 14], [4, 14, 16], [4, 12], [4, 12, 16], [4, 12, 14], [4, 12, 14, 16], [4, 10], [4, 10, 16], [4, 10, 14], [4, 10, 14, 16], [4, 10, 12], [4, 10, 12, 16], [4, 10, 12, 14], [4, 10, 12, 14, 16], [4, 8], [4, 8, 16], [4, 8, 14], [4, 8, 14, 16], [4, 8, 12], [4, 8, 12, 16], [4, 8, 12, 14], [4, 8, 12, 14, 16], [4, 8, 10], [4, 8, 10, 16], [4, 8, 10, 14], [4, 8, 10, 14, 16], [4, 8, 10, 12], [4, 8, 10, 12, 16], [4, 8, 10, 12, 14], [4, 8, 10, 12, 14, 16], [4, 6], [4, 6, 16], [4, 6, 14], [4, 6, 14, 16], [4, 6, 12], [4, 6, 12, 16], [4, 6, 12, 14], [4, 6, 12, 14, 16], [4, 6, 10], [4, 6, 10, 16], [4, 6, 10, 14], [4, 6, 10, 14, 16], [4, 6, 10, 12], [4, 6, 10, 12, 16], [4, 6, 10, 12, 14], [4, 6, 10, 12, 14, 16], [4, 6, 8], [4, 6, 8, 16], [4, 6, 8, 14], [4, 6, 8, 14, 16], [4, 6, 8, 12], [4, 6, 8, 12, 16], [4, 6, 8, 12, 14], [4, 6, 8, 12, 14, 16], [4, 6, 8, 10], [4, 6, 8, 10, 16], [4, 6, 8, 10, 14], [4, 6, 8, 10, 14, 16], [4, 6, 8, 10, 12], [4, 6, 8, 10, 12, 16], [4, 6, 8, 10, 12, 14], [4, 6, 8, 10, 12, 14, 16], [2], [2, 16], [2, 14], [2, 14, 16], [2, 12], [2, 12, 16], [2, 12, 14], [2, 12, 14, 16], [2, 10], [2, 10, 16], [2, 10, 14], [2, 10, 14, 16], [2, 10, 12], [2, 10, 12, 16], [2, 10, 12, 14], [2, 10, 12, 14, 16], [2, 8], [2, 8, 16], [2, 8, 14], [2, 8, 14, 16], [2, 8, 12], [2, 8, 12, 16], [2, 8, 12, 14], [2, 8, 12, 14, 16], [2, 8, 10], [2, 8, 10, 16], [2, 8, 10, 14], [2, 8, 10, 14, 16], [2, 8, 10, 12], [2, 8, 10, 12, 16], [2, 8, 10, 12, 14], [2, 8, 10, 12, 14, 16], [2, 6], [2, 6, 16], [2, 6, 14], [2, 6, 14, 16], [2, 6, 12], [2, 6, 12, 16], [2, 6, 12, 14], [2, 6, 12, 14, 16], [2, 6, 10], [2, 6, 10, 16], [2, 6, 10, 14], [2, 6, 10, 14, 16], [2, 6, 10, 12], [2, 6, 10, 12, 16], [2, 6, 10, 12, 14], [2, 6, 10, 12, 14, 16], [2, 6, 8], [2, 6, 8, 16], [2, 6, 8, 14], [2, 6, 8, 14, 16], [2, 6, 8, 12], [2, 6, 8, 12, 16], [2, 6, 8, 12, 14], [2, 6, 8, 12, 14, 16], [2, 6, 8, 10], [2, 6, 8, 10, 16], [2, 6, 8, 10, 14], [2, 6, 8, 10, 14, 16], [2, 6, 8, 10, 12], [2, 6, 8, 10, 12, 16], [2, 6, 8, 10, 12, 14], [2, 6, 8, 10, 12, 14, 16], [2, 4], [2, 4, 16], [2, 4, 14], [2, 4, 14, 16], [2, 4, 12], [2, 4, 12, 16], [2, 4, 12, 14], [2, 4, 12, 14, 16], [2, 4, 10], [2, 4, 10, 16], [2, 4, 10, 14], [2, 4, 10, 14, 16], [2, 4, 10, 12], [2, 4, 10, 12, 16], [2, 4, 10, 12, 14], [2, 4, 10, 12, 14, 16], [2, 4, 8], [2, 4, 8, 16], [2, 4, 8, 14], [2, 4, 8, 14, 16], [2, 4, 8, 12], [2, 4, 8, 12, 16], [2, 4, 8, 12, 14], [2, 4, 8, 12, 14, 16], [2, 4, 8, 10], [2, 4, 8, 10, 16], [2, 4, 8, 10, 14], [2, 4, 8, 10, 14, 16], [2, 4, 8, 10, 12], [2, 4, 8, 10, 12, 16], [2, 4, 8, 10, 12, 14], [2, 4, 8, 10, 12, 14, 16], [2, 4, 6], [2, 4, 6, 16], [2, 4, 6, 14], [2, 4, 6, 14, 16], [2, 4, 6, 12], [2, 4, 6, 12, 16], [2, 4, 6, 12, 14], [2, 4, 6, 12, 14, 16], [2, 4, 6, 10], [2, 4, 6, 10, 16], [2, 4, 6, 10, 14], [2, 4, 6, 10, 14, 16], [2, 4, 6, 10, 12], [2, 4, 6, 10, 12, 16], [2, 4, 6, 10, 12, 14], [2, 4, 6, 10, 12, 14, 16], [2, 4, 6, 8], [2, 4, 6, 8, 16], [2, 4, 6, 8, 14], [2, 4, 6, 8, 14, 16], [2, 4, 6, 8, 12], [2, 4, 6, 8, 12, 16], [2, 4, 6, 8, 12, 14], [2, 4, 6, 8, 12, 14, 16], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10, 16], [2, 4, 6, 8, 10, 14], [2, 4, 6, 8, 10, 14, 16], [2, 4, 6, 8, 10, 12], [2, 4, 6, 8, 10, 12, 16], [2, 4, 6, 8, 10, 12, 14], [2, 4, 6, 8, 10, 12, 14, 16], [0], [0, 16], [0, 14], [0, 14, 16], [0, 12], [0, 12, 16], [0, 12, 14], [0, 12, 14, 16], [0, 10], [0, 10, 16], [0, 10, 14], [0, 10, 14, 16], [0, 10, 12], [0, 10, 12, 16], [0, 10, 12, 14], [0, 10, 12, 14, 16], [0, 8], [0, 8, 16], [0, 8, 14], [0, 8, 14, 16], [0, 8, 12], [0, 8, 12, 16], [0, 8, 12, 14], [0, 8, 12, 14, 16], [0, 8, 10], [0, 8, 10, 16], [0, 8, 10, 14], [0, 8, 10, 14, 16], [0, 8, 10, 12], [0, 8, 10, 12, 16], [0, 8, 10, 12, 14], [0, 8, 10, 12, 14, 16], [0, 6], [0, 6, 16], [0, 6, 14], [0, 6, 14, 16], [0, 6, 12], [0, 6, 12, 16], [0, 6, 12, 14], [0, 6, 12, 14, 16], [0, 6, 10], [0, 6, 10, 16], [0, 6, 10, 14], [0, 6, 10, 14, 16], [0, 6, 10, 12], [0, 6, 10, 12, 16], [0, 6, 10, 12, 14], [0, 6, 10, 12, 14, 16], [0, 6, 8], [0, 6, 8, 16], [0, 6, 8, 14], [0, 6, 8, 14, 16], [0, 6, 8, 12], [0, 6, 8, 12, 16], [0, 6, 8, 12, 14], [0, 6, 8, 12, 14, 16], [0, 6, 8, 10], [0, 6, 8, 10, 16], [0, 6, 8, 10, 14], [0, 6, 8, 10, 14, 16], [0, 6, 8, 10, 12], [0, 6, 8, 10, 12, 16], [0, 6, 8, 10, 12, 14], [0, 6, 8, 10, 12, 14, 16], [0, 4], [0, 4, 16], [0, 4, 14], [0, 4, 14, 16], [0, 4, 12], [0, 4, 12, 16], [0, 4, 12, 14], [0, 4, 12, 14, 16], [0, 4, 10], [0, 4, 10, 16], [0, 4, 10, 14], [0, 4, 10, 14, 16], [0, 4, 10, 12], [0, 4, 10, 12, 16], [0, 4, 10, 12, 14], [0, 4, 10, 12, 14, 16], [0, 4, 8], [0, 4, 8, 16], [0, 4, 8, 14], [0, 4, 8, 14, 16], [0, 4, 8, 12], [0, 4, 8, 12, 16], [0, 4, 8, 12, 14], [0, 4, 8, 12, 14, 16], [0, 4, 8, 10], [0, 4, 8, 10, 16], [0, 4, 8, 10, 14], [0, 4, 8, 10, 14, 16], [0, 4, 8, 10, 12], [0, 4, 8, 10, 12, 16], [0, 4, 8, 10, 12, 14], [0, 4, 8, 10, 12, 14, 16], [0, 4, 6], [0, 4, 6, 16], [0, 4, 6, 14], [0, 4, 6, 14, 16], [0, 4, 6, 12], [0, 4, 6, 12, 16], [0, 4, 6, 12, 14], [0, 4, 6, 12, 14, 16], [0, 4, 6, 10], [0, 4, 6, 10, 16], [0, 4, 6, 10, 14], [0, 4, 6, 10, 14, 16], [0, 4, 6, 10, 12], [0, 4, 6, 10, 12, 16], [0, 4, 6, 10, 12, 14], [0, 4, 6, 10, 12, 14, 16], [0, 4, 6, 8], [0, 4, 6, 8, 16], [0, 4, 6, 8, 14], [0, 4, 6, 8, 14, 16], [0, 4, 6, 8, 12], [0, 4, 6, 8, 12, 16], [0, 4, 6, 8, 12, 14], [0, 4, 6, 8, 12, 14, 16], [0, 4, 6, 8, 10], [0, 4, 6, 8, 10, 16], [0, 4, 6, 8, 10, 14], [0, 4, 6, 8, 10, 14, 16], [0, 4, 6, 8, 10, 12], [0, 4, 6, 8, 10, 12, 16], [0, 4, 6, 8, 10, 12, 14], [0, 4, 6, 8, 10, 12, 14, 16], [0, 2], [0, 2, 16], [0, 2, 14], [0, 2, 14, 16], [0, 2, 12], [0, 2, 12, 16], [0, 2, 12, 14], [0, 2, 12, 14, 16], [0, 2, 10], [0, 2, 10, 16], [0, 2, 10, 14], [0, 2, 10, 14, 16], [0, 2, 10, 12], [0, 2, 10, 12, 16], [0, 2, 10, 12, 14], [0, 2, 10, 12, 14, 16], [0, 2, 8], [0, 2, 8, 16], [0, 2, 8, 14], [0, 2, 8, 14, 16], [0, 2, 8, 12], [0, 2, 8, 12, 16], [0, 2, 8, 12, 14], [0, 2, 8, 12, 14, 16], [0, 2, 8, 10], [0, 2, 8, 10, 16], [0, 2, 8, 10, 14], [0, 2, 8, 10, 14, 16], [0, 2, 8, 10, 12], [0, 2, 8, 10, 12, 16], [0, 2, 8, 10, 12, 14], [0, 2, 8, 10, 12, 14, 16], [0, 2, 6], [0, 2, 6, 16], [0, 2, 6, 14], [0, 2, 6, 14, 16], [0, 2, 6, 12], [0, 2, 6, 12, 16], [0, 2, 6, 12, 14], [0, 2, 6, 12, 14, 16], [0, 2, 6, 10], [0, 2, 6, 10, 16], [0, 2, 6, 10, 14], [0, 2, 6, 10, 14, 16], [0, 2, 6, 10, 12], [0, 2, 6, 10, 12, 16], [0, 2, 6, 10, 12, 14], [0, 2, 6, 10, 12, 14, 16], [0, 2, 6, 8], [0, 2, 6, 8, 16], [0, 2, 6, 8, 14], [0, 2, 6, 8, 14, 16], [0, 2, 6, 8, 12], [0, 2, 6, 8, 12, 16], [0, 2, 6, 8, 12, 14], [0, 2, 6, 8, 12, 14, 16], [0, 2, 6, 8, 10], [0, 2, 6, 8, 10, 16], [0, 2, 6, 8, 10, 14], [0, 2, 6, 8, 10, 14, 16], [0, 2, 6, 8, 10, 12], [0, 2, 6, 8, 10, 12, 16], [0, 2, 6, 8, 10, 12, 14], [0, 2, 6, 8, 10, 12, 14, 16], [0, 2, 4], [0, 2, 4, 16], [0, 2, 4, 14], [0, 2, 4, 14, 16], [0, 2, 4, 12], [0, 2, 4, 12, 16], [0, 2, 4, 12, 14], [0, 2, 4, 12, 14, 16], [0, 2, 4, 10], [0, 2, 4, 10, 16], [0, 2, 4, 10, 14], [0, 2, 4, 10, 14, 16], [0, 2, 4, 10, 12], [0, 2, 4, 10, 12, 16], [0, 2, 4, 10, 12, 14], [0, 2, 4, 10, 12, 14, 16], [0, 2, 4, 8], [0, 2, 4, 8, 16], [0, 2, 4, 8, 14], [0, 2, 4, 8, 14, 16], [0, 2, 4, 8, 12], [0, 2, 4, 8, 12, 16], [0, 2, 4, 8, 12, 14], [0, 2, 4, 8, 12, 14, 16], [0, 2, 4, 8, 10], [0, 2, 4, 8, 10, 16], [0, 2, 4, 8, 10, 14], [0, 2, 4, 8, 10, 14, 16], [0, 2, 4, 8, 10, 12], [0, 2, 4, 8, 10, 12, 16], [0, 2, 4, 8, 10, 12, 14], [0, 2, 4, 8, 10, 12, 14, 16], [0, 2, 4, 6], [0, 2, 4, 6, 16], [0, 2, 4, 6, 14], [0, 2, 4, 6, 14, 16], [0, 2, 4, 6, 12], [0, 2, 4, 6, 12, 16], [0, 2, 4, 6, 12, 14], [0, 2, 4, 6, 12, 14, 16], [0, 2, 4, 6, 10], [0, 2, 4, 6, 10, 16], [0, 2, 4, 6, 10, 14], [0, 2, 4, 6, 10, 14, 16], [0, 2, 4, 6, 10, 12], [0, 2, 4, 6, 10, 12, 16], [0, 2, 4, 6, 10, 12, 14], [0, 2, 4, 6, 10, 12, 14, 16], [0, 2, 4, 6, 8], [0, 2, 4, 6, 8, 16], [0, 2, 4, 6, 8, 14], [0, 2, 4, 6, 8, 14, 16], [0, 2, 4, 6, 8, 12], [0, 2, 4, 6, 8, 12, 16], [0, 2, 4, 6, 8, 12, 14], [0, 2, 4, 6, 8, 12, 14, 16], [0, 2, 4, 6, 8, 10], [0, 2, 4, 6, 8, 10, 16], [0, 2, 4, 6, 8, 10, 14], [0, 2, 4, 6, 8, 10, 14, 16], [0, 2, 4, 6, 8, 10, 12], [0, 2, 4, 6, 8, 10, 12, 16], [0, 2, 4, 6, 8, 10, 12, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16], [-2], [-2, 16], [-2, 14], [-2, 14, 16], [-2, 12], [-2, 12, 16], [-2, 12, 14], [-2, 12, 14, 16], [-2, 10], [-2, 10, 16], [-2, 10, 14], [-2, 10, 14, 16], [-2, 10, 12], [-2, 10, 12, 16], [-2, 10, 12, 14], [-2, 10, 12, 14, 16], [-2, 8], [-2, 8, 16], [-2, 8, 14], [-2, 8, 14, 16], [-2, 8, 12], [-2, 8, 12, 16], [-2, 8, 12, 14], [-2, 8, 12, 14, 16], [-2, 8, 10], [-2, 8, 10, 16], [-2, 8, 10, 14], [-2, 8, 10, 14, 16], [-2, 8, 10, 12], [-2, 8, 10, 12, 16], [-2, 8, 10, 12, 14], [-2, 8, 10, 12, 14, 16], [-2, 6], [-2, 6, 16], [-2, 6, 14], [-2, 6, 14, 16], [-2, 6, 12], [-2, 6, 12, 16], [-2, 6, 12, 14], [-2, 6, 12, 14, 16], [-2, 6, 10], [-2, 6, 10, 16], [-2, 6, 10, 14], [-2, 6, 10, 14, 16], [-2, 6, 10, 12], [-2, 6, 10, 12, 16], [-2, 6, 10, 12, 14], [-2, 6, 10, 12, 14, 16], [-2, 6, 8], [-2, 6, 8, 16], [-2, 6, 8, 14], [-2, 6, 8, 14, 16], [-2, 6, 8, 12], [-2, 6, 8, 12, 16], [-2, 6, 8, 12, 14], [-2, 6, 8, 12, 14, 16], [-2, 6, 8, 10], [-2, 6, 8, 10, 16], [-2, 6, 8, 10, 14], [-2, 6, 8, 10, 14, 16], [-2, 6, 8, 10, 12], [-2, 6, 8, 10, 12, 16], [-2, 6, 8, 10, 12, 14], [-2, 6, 8, 10, 12, 14, 16], [-2, 4], [-2, 4, 16], [-2, 4, 14], [-2, 4, 14, 16], [-2, 4, 12], [-2, 4, 12, 16], [-2, 4, 12, 14], [-2, 4, 12, 14, 16], [-2, 4, 10], [-2, 4, 10, 16], [-2, 4, 10, 14], [-2, 4, 10, 14, 16], [-2, 4, 10, 12], [-2, 4, 10, 12, 16], [-2, 4, 10, 12, 14], [-2, 4, 10, 12, 14, 16], [-2, 4, 8], [-2, 4, 8, 16], [-2, 4, 8, 14], [-2, 4, 8, 14, 16], [-2, 4, 8, 12], [-2, 4, 8, 12, 16], [-2, 4, 8, 12, 14], [-2, 4, 8, 12, 14, 16], [-2, 4, 8, 10], [-2, 4, 8, 10, 16], [-2, 4, 8, 10, 14], [-2, 4, 8, 10, 14, 16], [-2, 4, 8, 10, 12], [-2, 4, 8, 10, 12, 16], [-2, 4, 8, 10, 12, 14], [-2, 4, 8, 10, 12, 14, 16], [-2, 4, 6], [-2, 4, 6, 16], [-2, 4, 6, 14], [-2, 4, 6, 14, 16], [-2, 4, 6, 12], [-2, 4, 6, 12, 16], [-2, 4, 6, 12, 14], [-2, 4, 6, 12, 14, 16], [-2, 4, 6, 10], [-2, 4, 6, 10, 16], [-2, 4, 6, 10, 14], [-2, 4, 6, 10, 14, 16], [-2, 4, 6, 10, 12], [-2, 4, 6, 10, 12, 16], [-2, 4, 6, 10, 12, 14], [-2, 4, 6, 10, 12, 14, 16], [-2, 4, 6, 8], [-2, 4, 6, 8, 16], [-2, 4, 6, 8, 14], [-2, 4, 6, 8, 14, 16], [-2, 4, 6, 8, 12], [-2, 4, 6, 8, 12, 16], [-2, 4, 6, 8, 12, 14], [-2, 4, 6, 8, 12, 14, 16], [-2, 4, 6, 8, 10], [-2, 4, 6, 8, 10, 16], [-2, 4, 6, 8, 10, 14], [-2, 4, 6, 8, 10, 14, 16], [-2, 4, 6, 8, 10, 12], [-2, 4, 6, 8, 10, 12, 16], [-2, 4, 6, 8, 10, 12, 14], [-2, 4, 6, 8, 10, 12, 14, 16], [-2, 2], [-2, 2, 16], [-2, 2, 14], [-2, 2, 14, 16], [-2, 2, 12], [-2, 2, 12, 16], [-2, 2, 12, 14], [-2, 2, 12, 14, 16], [-2, 2, 10], [-2, 2, 10, 16], [-2, 2, 10, 14], [-2, 2, 10, 14, 16], [-2, 2, 10, 12], [-2, 2, 10, 12, 16], [-2, 2, 10, 12, 14], [-2, 2, 10, 12, 14, 16], [-2, 2, 8], [-2, 2, 8, 16], [-2, 2, 8, 14], [-2, 2, 8, 14, 16], [-2, 2, 8, 12], [-2, 2, 8, 12, 16], [-2, 2, 8, 12, 14], [-2, 2, 8, 12, 14, 16], [-2, 2, 8, 10], [-2, 2, 8, 10, 16], [-2, 2, 8, 10, 14], [-2, 2, 8, 10, 14, 16], [-2, 2, 8, 10, 12], [-2, 2, 8, 10, 12, 16], [-2, 2, 8, 10, 12, 14], [-2, 2, 8, 10, 12, 14, 16], [-2, 2, 6], [-2, 2, 6, 16], [-2, 2, 6, 14], [-2, 2, 6, 14, 16], [-2, 2, 6, 12], [-2, 2, 6, 12, 16], [-2, 2, 6, 12, 14], [-2, 2, 6, 12, 14, 16], [-2, 2, 6, 10], [-2, 2, 6, 10, 16], [-2, 2, 6, 10, 14], [-2, 2, 6, 10, 14, 16], [-2, 2, 6, 10, 12], [-2, 2, 6, 10, 12, 16], [-2, 2, 6, 10, 12, 14], [-2, 2, 6, 10, 12, 14, 16], [-2, 2, 6, 8], [-2, 2, 6, 8, 16], [-2, 2, 6, 8, 14], [-2, 2, 6, 8, 14, 16], [-2, 2, 6, 8, 12], [-2, 2, 6, 8, 12, 16], [-2, 2, 6, 8, 12, 14], [-2, 2, 6, 8, 12, 14, 16], [-2, 2, 6, 8, 10], [-2, 2, 6, 8, 10, 16], [-2, 2, 6, 8, 10, 14], [-2, 2, 6, 8, 10, 14, 16], [-2, 2, 6, 8, 10, 12], [-2, 2, 6, 8, 10, 12, 16], [-2, 2, 6, 8, 10, 12, 14], [-2, 2, 6, 8, 10, 12, 14, 16], [-2, 2, 4], [-2, 2, 4, 16], [-2, 2, 4, 14], [-2, 2, 4, 14, 16], [-2, 2, 4, 12], [-2, 2, 4, 12, 16], [-2, 2, 4, 12, 14], [-2, 2, 4, 12, 14, 16], [-2, 2, 4, 10], [-2, 2, 4, 10, 16], [-2, 2, 4, 10, 14], [-2, 2, 4, 10, 14, 16], [-2, 2, 4, 10, 12], [-2, 2, 4, 10, 12, 16], [-2, 2, 4, 10, 12, 14], [-2, 2, 4, 10, 12, 14, 16], [-2, 2, 4, 8], [-2, 2, 4, 8, 16], [-2, 2, 4, 8, 14], [-2, 2, 4, 8, 14, 16], [-2, 2, 4, 8, 12], [-2, 2, 4, 8, 12, 16], [-2, 2, 4, 8, 12, 14], [-2, 2, 4, 8, 12, 14, 16], [-2, 2, 4, 8, 10], [-2, 2, 4, 8, 10, 16], [-2, 2, 4, 8, 10, 14], [-2, 2, 4, 8, 10, 14, 16], [-2, 2, 4, 8, 10, 12], [-2, 2, 4, 8, 10, 12, 16], [-2, 2, 4, 8, 10, 12, 14], [-2, 2, 4, 8, 10, 12, 14, 16], [-2, 2, 4, 6], [-2, 2, 4, 6, 16], [-2, 2, 4, 6, 14], [-2, 2, 4, 6, 14, 16], [-2, 2, 4, 6, 12], [-2, 2, 4, 6, 12, 16], [-2, 2, 4, 6, 12, 14], [-2, 2, 4, 6, 12, 14, 16], [-2, 2, 4, 6, 10], [-2, 2, 4, 6, 10, 16], [-2, 2, 4, 6, 10, 14], [-2, 2, 4, 6, 10, 14, 16], [-2, 2, 4, 6, 10, 12], [-2, 2, 4, 6, 10, 12, 16], [-2, 2, 4, 6, 10, 12, 14], [-2, 2, 4, 6, 10, 12, 14, 16], [-2, 2, 4, 6, 8], [-2, 2, 4, 6, 8, 16], [-2, 2, 4, 6, 8, 14], [-2, 2, 4, 6, 8, 14, 16], [-2, 2, 4, 6, 8, 12], [-2, 2, 4, 6, 8, 12, 16], [-2, 2, 4, 6, 8, 12, 14], [-2, 2, 4, 6, 8, 12, 14, 16], [-2, 2, 4, 6, 8, 10], [-2, 2, 4, 6, 8, 10, 16], [-2, 2, 4, 6, 8, 10, 14], [-2, 2, 4, 6, 8, 10, 14, 16], [-2, 2, 4, 6, 8, 10, 12], [-2, 2, 4, 6, 8, 10, 12, 16], [-2, 2, 4, 6, 8, 10, 12, 14], [-2, 2, 4, 6, 8, 10, 12, 14, 16], [-2, 0], [-2, 0, 16], [-2, 0, 14], [-2, 0, 14, 16], [-2, 0, 12], [-2, 0, 12, 16], [-2, 0, 12, 14], [-2, 0, 12, 14, 16], [-2, 0, 10], [-2, 0, 10, 16], [-2, 0, 10, 14], [-2, 0, 10, 14, 16], [-2, 0, 10, 12], [-2, 0, 10, 12, 16], [-2, 0, 10, 12, 14], [-2, 0, 10, 12, 14, 16], [-2, 0, 8], [-2, 0, 8, 16], [-2, 0, 8, 14], [-2, 0, 8, 14, 16], [-2, 0, 8, 12], [-2, 0, 8, 12, 16], [-2, 0, 8, 12, 14], [-2, 0, 8, 12, 14, 16], [-2, 0, 8, 10], [-2, 0, 8, 10, 16], [-2, 0, 8, 10, 14], [-2, 0, 8, 10, 14, 16], [-2, 0, 8, 10, 12], [-2, 0, 8, 10, 12, 16], [-2, 0, 8, 10, 12, 14], [-2, 0, 8, 10, 12, 14, 16], [-2, 0, 6], [-2, 0, 6, 16], [-2, 0, 6, 14], [-2, 0, 6, 14, 16], [-2, 0, 6, 12], [-2, 0, 6, 12, 16], [-2, 0, 6, 12, 14], [-2, 0, 6, 12, 14, 16], [-2, 0, 6, 10], [-2, 0, 6, 10, 16], [-2, 0, 6, 10, 14], [-2, 0, 6, 10, 14, 16], [-2, 0, 6, 10, 12], [-2, 0, 6, 10, 12, 16], [-2, 0, 6, 10, 12, 14], [-2, 0, 6, 10, 12, 14, 16], [-2, 0, 6, 8], [-2, 0, 6, 8, 16], [-2, 0, 6, 8, 14], [-2, 0, 6, 8, 14, 16], [-2, 0, 6, 8, 12], [-2, 0, 6, 8, 12, 16], [-2, 0, 6, 8, 12, 14], [-2, 0, 6, 8, 12, 14, 16], [-2, 0, 6, 8, 10], [-2, 0, 6, 8, 10, 16], [-2, 0, 6, 8, 10, 14], [-2, 0, 6, 8, 10, 14, 16], [-2, 0, 6, 8, 10, 12], [-2, 0, 6, 8, 10, 12, 16], [-2, 0, 6, 8, 10, 12, 14], [-2, 0, 6, 8, 10, 12, 14, 16], [-2, 0, 4], [-2, 0, 4, 16], [-2, 0, 4, 14], [-2, 0, 4, 14, 16], [-2, 0, 4, 12], [-2, 0, 4, 12, 16], [-2, 0, 4, 12, 14], [-2, 0, 4, 12, 14, 16], [-2, 0, 4, 10], [-2, 0, 4, 10, 16], [-2, 0, 4, 10, 14], [-2, 0, 4, 10, 14, 16], [-2, 0, 4, 10, 12], [-2, 0, 4, 10, 12, 16], [-2, 0, 4, 10, 12, 14], [-2, 0, 4, 10, 12, 14, 16], [-2, 0, 4, 8], [-2, 0, 4, 8, 16], [-2, 0, 4, 8, 14], [-2, 0, 4, 8, 14, 16], [-2, 0, 4, 8, 12], [-2, 0, 4, 8, 12, 16], [-2, 0, 4, 8, 12, 14], [-2, 0, 4, 8, 12, 14, 16], [-2, 0, 4, 8, 10], [-2, 0, 4, 8, 10, 16], [-2, 0, 4, 8, 10, 14], [-2, 0, 4, 8, 10, 14, 16], [-2, 0, 4, 8, 10, 12], [-2, 0, 4, 8, 10, 12, 16], [-2, 0, 4, 8, 10, 12, 14], [-2, 0, 4, 8, 10, 12, 14, 16], [-2, 0, 4, 6], [-2, 0, 4, 6, 16], [-2, 0, 4, 6, 14], [-2, 0, 4, 6, 14, 16], [-2, 0, 4, 6, 12], [-2, 0, 4, 6, 12, 16], [-2, 0, 4, 6, 12, 14], [-2, 0, 4, 6, 12, 14, 16], [-2, 0, 4, 6, 10], [-2, 0, 4, 6, 10, 16], [-2, 0, 4, 6, 10, 14], [-2, 0, 4, 6, 10, 14, 16], [-2, 0, 4, 6, 10, 12], [-2, 0, 4, 6, 10, 12, 16], [-2, 0, 4, 6, 10, 12, 14], [-2, 0, 4, 6, 10, 12, 14, 16], [-2, 0, 4, 6, 8], [-2, 0, 4, 6, 8, 16], [-2, 0, 4, 6, 8, 14], [-2, 0, 4, 6, 8, 14, 16], [-2, 0, 4, 6, 8, 12], [-2, 0, 4, 6, 8, 12, 16], [-2, 0, 4, 6, 8, 12, 14], [-2, 0, 4, 6, 8, 12, 14, 16], [-2, 0, 4, 6, 8, 10], [-2, 0, 4, 6, 8, 10, 16], [-2, 0, 4, 6, 8, 10, 14], [-2, 0, 4, 6, 8, 10, 14, 16], [-2, 0, 4, 6, 8, 10, 12], [-2, 0, 4, 6, 8, 10, 12, 16], [-2, 0, 4, 6, 8, 10, 12, 14], [-2, 0, 4, 6, 8, 10, 12, 14, 16], [-2, 0, 2], [-2, 0, 2, 16], [-2, 0, 2, 14], [-2, 0, 2, 14, 16], [-2, 0, 2, 12], [-2, 0, 2, 12, 16], [-2, 0, 2, 12, 14], [-2, 0, 2, 12, 14, 16], [-2, 0, 2, 10], [-2, 0, 2, 10, 16], [-2, 0, 2, 10, 14], [-2, 0, 2, 10, 14, 16], [-2, 0, 2, 10, 12], [-2, 0, 2, 10, 12, 16], [-2, 0, 2, 10, 12, 14], [-2, 0, 2, 10, 12, 14, 16], [-2, 0, 2, 8], [-2, 0, 2, 8, 16], [-2, 0, 2, 8, 14], [-2, 0, 2, 8, 14, 16], [-2, 0, 2, 8, 12], [-2, 0, 2, 8, 12, 16], [-2, 0, 2, 8, 12, 14], [-2, 0, 2, 8, 12, 14, 16], [-2, 0, 2, 8, 10], [-2, 0, 2, 8, 10, 16], [-2, 0, 2, 8, 10, 14], [-2, 0, 2, 8, 10, 14, 16], [-2, 0, 2, 8, 10, 12], [-2, 0, 2, 8, 10, 12, 16], [-2, 0, 2, 8, 10, 12, 14], [-2, 0, 2, 8, 10, 12, 14, 16], [-2, 0, 2, 6], [-2, 0, 2, 6, 16], [-2, 0, 2, 6, 14], [-2, 0, 2, 6, 14, 16], [-2, 0, 2, 6, 12], [-2, 0, 2, 6, 12, 16], [-2, 0, 2, 6, 12, 14], [-2, 0, 2, 6, 12, 14, 16], [-2, 0, 2, 6, 10], [-2, 0, 2, 6, 10, 16], [-2, 0, 2, 6, 10, 14], [-2, 0, 2, 6, 10, 14, 16], [-2, 0, 2, 6, 10, 12], [-2, 0, 2, 6, 10, 12, 16], [-2, 0, 2, 6, 10, 12, 14], [-2, 0, 2, 6, 10, 12, 14, 16], [-2, 0, 2, 6, 8], [-2, 0, 2, 6, 8, 16], [-2, 0, 2, 6, 8, 14], [-2, 0, 2, 6, 8, 14, 16], [-2, 0, 2, 6, 8, 12], [-2, 0, 2, 6, 8, 12, 16], [-2, 0, 2, 6, 8, 12, 14], [-2, 0, 2, 6, 8, 12, 14, 16], [-2, 0, 2, 6, 8, 10], [-2, 0, 2, 6, 8, 10, 16], [-2, 0, 2, 6, 8, 10, 14], [-2, 0, 2, 6, 8, 10, 14, 16], [-2, 0, 2, 6, 8, 10, 12], [-2, 0, 2, 6, 8, 10, 12, 16], [-2, 0, 2, 6, 8, 10, 12, 14], [-2, 0, 2, 6, 8, 10, 12, 14, 16], [-2, 0, 2, 4], [-2, 0, 2, 4, 16], [-2, 0, 2, 4, 14], [-2, 0, 2, 4, 14, 16], [-2, 0, 2, 4, 12], [-2, 0, 2, 4, 12, 16], [-2, 0, 2, 4, 12, 14], [-2, 0, 2, 4, 12, 14, 16], [-2, 0, 2, 4, 10], [-2, 0, 2, 4, 10, 16], [-2, 0, 2, 4, 10, 14], [-2, 0, 2, 4, 10, 14, 16], [-2, 0, 2, 4, 10, 12], [-2, 0, 2, 4, 10, 12, 16], [-2, 0, 2, 4, 10, 12, 14], [-2, 0, 2, 4, 10, 12, 14, 16], [-2, 0, 2, 4, 8], [-2, 0, 2, 4, 8, 16], [-2, 0, 2, 4, 8, 14], [-2, 0, 2, 4, 8, 14, 16], [-2, 0, 2, 4, 8, 12], [-2, 0, 2, 4, 8, 12, 16], [-2, 0, 2, 4, 8, 12, 14], [-2, 0, 2, 4, 8, 12, 14, 16], [-2, 0, 2, 4, 8, 10], [-2, 0, 2, 4, 8, 10, 16], [-2, 0, 2, 4, 8, 10, 14], [-2, 0, 2, 4, 8, 10, 14, 16], [-2, 0, 2, 4, 8, 10, 12], [-2, 0, 2, 4, 8, 10, 12, 16], [-2, 0, 2, 4, 8, 10, 12, 14], [-2, 0, 2, 4, 8, 10, 12, 14, 16], [-2, 0, 2, 4, 6], [-2, 0, 2, 4, 6, 16], [-2, 0, 2, 4, 6, 14], [-2, 0, 2, 4, 6, 14, 16], [-2, 0, 2, 4, 6, 12], [-2, 0, 2, 4, 6, 12, 16], [-2, 0, 2, 4, 6, 12, 14], [-2, 0, 2, 4, 6, 12, 14, 16], [-2, 0, 2, 4, 6, 10], [-2, 0, 2, 4, 6, 10, 16], [-2, 0, 2, 4, 6, 10, 14], [-2, 0, 2, 4, 6, 10, 14, 16], [-2, 0, 2, 4, 6, 10, 12], [-2, 0, 2, 4, 6, 10, 12, 16], [-2, 0, 2, 4, 6, 10, 12, 14], [-2, 0, 2, 4, 6, 10, 12, 14, 16], [-2, 0, 2, 4, 6, 8], [-2, 0, 2, 4, 6, 8, 16], [-2, 0, 2, 4, 6, 8, 14], [-2, 0, 2, 4, 6, 8, 14, 16], [-2, 0, 2, 4, 6, 8, 12], [-2, 0, 2, 4, 6, 8, 12, 16], [-2, 0, 2, 4, 6, 8, 12, 14], [-2, 0, 2, 4, 6, 8, 12, 14, 16], [-2, 0, 2, 4, 6, 8, 10], [-2, 0, 2, 4, 6, 8, 10, 16], [-2, 0, 2, 4, 6, 8, 10, 14], [-2, 0, 2, 4, 6, 8, 10, 14, 16], [-2, 0, 2, 4, 6, 8, 10, 12], [-2, 0, 2, 4, 6, 8, 10, 12, 16], [-2, 0, 2, 4, 6, 8, 10, 12, 14], [-2, 0, 2, 4, 6, 8, 10, 12, 14, 16]]"
      },
      {
        "input": "nums = [-3, -2, -1, 0, 1, 2, 3]",
        "output": "[[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3], [0], [0, 3], [0, 2], [0, 2, 3], [0, 1], [0, 1, 3], [0, 1, 2], [0, 1, 2, 3], [-1], [-1, 3], [-1, 2], [-1, 2, 3], [-1, 1], [-1, 1, 3], [-1, 1, 2], [-1, 1, 2, 3], [-1, 0], [-1, 0, 3], [-1, 0, 2], [-1, 0, 2, 3], [-1, 0, 1], [-1, 0, 1, 3], [-1, 0, 1, 2], [-1, 0, 1, 2, 3], [-2], [-2, 3], [-2, 2], [-2, 2, 3], [-2, 1], [-2, 1, 3], [-2, 1, 2], [-2, 1, 2, 3], [-2, 0], [-2, 0, 3], [-2, 0, 2], [-2, 0, 2, 3], [-2, 0, 1], [-2, 0, 1, 3], [-2, 0, 1, 2], [-2, 0, 1, 2, 3], [-2, -1], [-2, -1, 3], [-2, -1, 2], [-2, -1, 2, 3], [-2, -1, 1], [-2, -1, 1, 3], [-2, -1, 1, 2], [-2, -1, 1, 2, 3], [-2, -1, 0], [-2, -1, 0, 3], [-2, -1, 0, 2], [-2, -1, 0, 2, 3], [-2, -1, 0, 1], [-2, -1, 0, 1, 3], [-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2, 3], [-3], [-3, 3], [-3, 2], [-3, 2, 3], [-3, 1], [-3, 1, 3], [-3, 1, 2], [-3, 1, 2, 3], [-3, 0], [-3, 0, 3], [-3, 0, 2], [-3, 0, 2, 3], [-3, 0, 1], [-3, 0, 1, 3], [-3, 0, 1, 2], [-3, 0, 1, 2, 3], [-3, -1], [-3, -1, 3], [-3, -1, 2], [-3, -1, 2, 3], [-3, -1, 1], [-3, -1, 1, 3], [-3, -1, 1, 2], [-3, -1, 1, 2, 3], [-3, -1, 0], [-3, -1, 0, 3], [-3, -1, 0, 2], [-3, -1, 0, 2, 3], [-3, -1, 0, 1], [-3, -1, 0, 1, 3], [-3, -1, 0, 1, 2], [-3, -1, 0, 1, 2, 3], [-3, -2], [-3, -2, 3], [-3, -2, 2], [-3, -2, 2, 3], [-3, -2, 1], [-3, -2, 1, 3], [-3, -2, 1, 2], [-3, -2, 1, 2, 3], [-3, -2, 0], [-3, -2, 0, 3], [-3, -2, 0, 2], [-3, -2, 0, 2, 3], [-3, -2, 0, 1], [-3, -2, 0, 1, 3], [-3, -2, 0, 1, 2], [-3, -2, 0, 1, 2, 3], [-3, -2, -1], [-3, -2, -1, 3], [-3, -2, -1, 2], [-3, -2, -1, 2, 3], [-3, -2, -1, 1], [-3, -2, -1, 1, 3], [-3, -2, -1, 1, 2], [-3, -2, -1, 1, 2, 3], [-3, -2, -1, 0], [-3, -2, -1, 0, 3], [-3, -2, -1, 0, 2], [-3, -2, -1, 0, 2, 3], [-3, -2, -1, 0, 1], [-3, -2, -1, 0, 1, 3], [-3, -2, -1, 0, 1, 2], [-3, -2, -1, 0, 1, 2, 3]]"
      },
      {
        "input": "nums = [10, -5, 0, 7]",
        "output": "[[], [7], [0], [0, 7], [-5], [-5, 7], [-5, 0], [-5, 0, 7], [10], [10, 7], [10, 0], [10, 0, 7], [10, -5], [10, -5, 7], [10, -5, 0], [10, -5, 0, 7]]"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50, -60, -70]",
        "output": "[[], [-70], [-60], [-60, -70], [-50], [-50, -70], [-50, -60], [-50, -60, -70], [-40], [-40, -70], [-40, -60], [-40, -60, -70], [-40, -50], [-40, -50, -70], [-40, -50, -60], [-40, -50, -60, -70], [-30], [-30, -70], [-30, -60], [-30, -60, -70], [-30, -50], [-30, -50, -70], [-30, -50, -60], [-30, -50, -60, -70], [-30, -40], [-30, -40, -70], [-30, -40, -60], [-30, -40, -60, -70], [-30, -40, -50], [-30, -40, -50, -70], [-30, -40, -50, -60], [-30, -40, -50, -60, -70], [-20], [-20, -70], [-20, -60], [-20, -60, -70], [-20, -50], [-20, -50, -70], [-20, -50, -60], [-20, -50, -60, -70], [-20, -40], [-20, -40, -70], [-20, -40, -60], [-20, -40, -60, -70], [-20, -40, -50], [-20, -40, -50, -70], [-20, -40, -50, -60], [-20, -40, -50, -60, -70], [-20, -30], [-20, -30, -70], [-20, -30, -60], [-20, -30, -60, -70], [-20, -30, -50], [-20, -30, -50, -70], [-20, -30, -50, -60], [-20, -30, -50, -60, -70], [-20, -30, -40], [-20, -30, -40, -70], [-20, -30, -40, -60], [-20, -30, -40, -60, -70], [-20, -30, -40, -50], [-20, -30, -40, -50, -70], [-20, -30, -40, -50, -60], [-20, -30, -40, -50, -60, -70], [-10], [-10, -70], [-10, -60], [-10, -60, -70], [-10, -50], [-10, -50, -70], [-10, -50, -60], [-10, -50, -60, -70], [-10, -40], [-10, -40, -70], [-10, -40, -60], [-10, -40, -60, -70], [-10, -40, -50], [-10, -40, -50, -70], [-10, -40, -50, -60], [-10, -40, -50, -60, -70], [-10, -30], [-10, -30, -70], [-10, -30, -60], [-10, -30, -60, -70], [-10, -30, -50], [-10, -30, -50, -70], [-10, -30, -50, -60], [-10, -30, -50, -60, -70], [-10, -30, -40], [-10, -30, -40, -70], [-10, -30, -40, -60], [-10, -30, -40, -60, -70], [-10, -30, -40, -50], [-10, -30, -40, -50, -70], [-10, -30, -40, -50, -60], [-10, -30, -40, -50, -60, -70], [-10, -20], [-10, -20, -70], [-10, -20, -60], [-10, -20, -60, -70], [-10, -20, -50], [-10, -20, -50, -70], [-10, -20, -50, -60], [-10, -20, -50, -60, -70], [-10, -20, -40], [-10, -20, -40, -70], [-10, -20, -40, -60], [-10, -20, -40, -60, -70], [-10, -20, -40, -50], [-10, -20, -40, -50, -70], [-10, -20, -40, -50, -60], [-10, -20, -40, -50, -60, -70], [-10, -20, -30], [-10, -20, -30, -70], [-10, -20, -30, -60], [-10, -20, -30, -60, -70], [-10, -20, -30, -50], [-10, -20, -30, -50, -70], [-10, -20, -30, -50, -60], [-10, -20, -30, -50, -60, -70], [-10, -20, -30, -40], [-10, -20, -30, -40, -70], [-10, -20, -30, -40, -60], [-10, -20, -30, -40, -60, -70], [-10, -20, -30, -40, -50], [-10, -20, -30, -40, -50, -70], [-10, -20, -30, -40, -50, -60], [-10, -20, -30, -40, -50, -60, -70]]"
      },
      {
        "input": "nums = [-1, 0, 1, -2, 2, -3, 3]",
        "output": "[[], [3], [-3], [-3, 3], [2], [2, 3], [2, -3], [2, -3, 3], [-2], [-2, 3], [-2, -3], [-2, -3, 3], [-2, 2], [-2, 2, 3], [-2, 2, -3], [-2, 2, -3, 3], [1], [1, 3], [1, -3], [1, -3, 3], [1, 2], [1, 2, 3], [1, 2, -3], [1, 2, -3, 3], [1, -2], [1, -2, 3], [1, -2, -3], [1, -2, -3, 3], [1, -2, 2], [1, -2, 2, 3], [1, -2, 2, -3], [1, -2, 2, -3, 3], [0], [0, 3], [0, -3], [0, -3, 3], [0, 2], [0, 2, 3], [0, 2, -3], [0, 2, -3, 3], [0, -2], [0, -2, 3], [0, -2, -3], [0, -2, -3, 3], [0, -2, 2], [0, -2, 2, 3], [0, -2, 2, -3], [0, -2, 2, -3, 3], [0, 1], [0, 1, 3], [0, 1, -3], [0, 1, -3, 3], [0, 1, 2], [0, 1, 2, 3], [0, 1, 2, -3], [0, 1, 2, -3, 3], [0, 1, -2], [0, 1, -2, 3], [0, 1, -2, -3], [0, 1, -2, -3, 3], [0, 1, -2, 2], [0, 1, -2, 2, 3], [0, 1, -2, 2, -3], [0, 1, -2, 2, -3, 3], [-1], [-1, 3], [-1, -3], [-1, -3, 3], [-1, 2], [-1, 2, 3], [-1, 2, -3], [-1, 2, -3, 3], [-1, -2], [-1, -2, 3], [-1, -2, -3], [-1, -2, -3, 3], [-1, -2, 2], [-1, -2, 2, 3], [-1, -2, 2, -3], [-1, -2, 2, -3, 3], [-1, 1], [-1, 1, 3], [-1, 1, -3], [-1, 1, -3, 3], [-1, 1, 2], [-1, 1, 2, 3], [-1, 1, 2, -3], [-1, 1, 2, -3, 3], [-1, 1, -2], [-1, 1, -2, 3], [-1, 1, -2, -3], [-1, 1, -2, -3, 3], [-1, 1, -2, 2], [-1, 1, -2, 2, 3], [-1, 1, -2, 2, -3], [-1, 1, -2, 2, -3, 3], [-1, 0], [-1, 0, 3], [-1, 0, -3], [-1, 0, -3, 3], [-1, 0, 2], [-1, 0, 2, 3], [-1, 0, 2, -3], [-1, 0, 2, -3, 3], [-1, 0, -2], [-1, 0, -2, 3], [-1, 0, -2, -3], [-1, 0, -2, -3, 3], [-1, 0, -2, 2], [-1, 0, -2, 2, 3], [-1, 0, -2, 2, -3], [-1, 0, -2, 2, -3, 3], [-1, 0, 1], [-1, 0, 1, 3], [-1, 0, 1, -3], [-1, 0, 1, -3, 3], [-1, 0, 1, 2], [-1, 0, 1, 2, 3], [-1, 0, 1, 2, -3], [-1, 0, 1, 2, -3, 3], [-1, 0, 1, -2], [-1, 0, 1, -2, 3], [-1, 0, 1, -2, -3], [-1, 0, 1, -2, -3, 3], [-1, 0, 1, -2, 2], [-1, 0, 1, -2, 2, 3], [-1, 0, 1, -2, 2, -3], [-1, 0, 1, -2, 2, -3, 3]]"
      },
      {
        "input": "nums = [8, 6, 4, 2, 0, -2, -4, -6, -8]",
        "output": "[[], [-8], [-6], [-6, -8], [-4], [-4, -8], [-4, -6], [-4, -6, -8], [-2], [-2, -8], [-2, -6], [-2, -6, -8], [-2, -4], [-2, -4, -8], [-2, -4, -6], [-2, -4, -6, -8], [0], [0, -8], [0, -6], [0, -6, -8], [0, -4], [0, -4, -8], [0, -4, -6], [0, -4, -6, -8], [0, -2], [0, -2, -8], [0, -2, -6], [0, -2, -6, -8], [0, -2, -4], [0, -2, -4, -8], [0, -2, -4, -6], [0, -2, -4, -6, -8], [2], [2, -8], [2, -6], [2, -6, -8], [2, -4], [2, -4, -8], [2, -4, -6], [2, -4, -6, -8], [2, -2], [2, -2, -8], [2, -2, -6], [2, -2, -6, -8], [2, -2, -4], [2, -2, -4, -8], [2, -2, -4, -6], [2, -2, -4, -6, -8], [2, 0], [2, 0, -8], [2, 0, -6], [2, 0, -6, -8], [2, 0, -4], [2, 0, -4, -8], [2, 0, -4, -6], [2, 0, -4, -6, -8], [2, 0, -2], [2, 0, -2, -8], [2, 0, -2, -6], [2, 0, -2, -6, -8], [2, 0, -2, -4], [2, 0, -2, -4, -8], [2, 0, -2, -4, -6], [2, 0, -2, -4, -6, -8], [4], [4, -8], [4, -6], [4, -6, -8], [4, -4], [4, -4, -8], [4, -4, -6], [4, -4, -6, -8], [4, -2], [4, -2, -8], [4, -2, -6], [4, -2, -6, -8], [4, -2, -4], [4, -2, -4, -8], [4, -2, -4, -6], [4, -2, -4, -6, -8], [4, 0], [4, 0, -8], [4, 0, -6], [4, 0, -6, -8], [4, 0, -4], [4, 0, -4, -8], [4, 0, -4, -6], [4, 0, -4, -6, -8], [4, 0, -2], [4, 0, -2, -8], [4, 0, -2, -6], [4, 0, -2, -6, -8], [4, 0, -2, -4], [4, 0, -2, -4, -8], [4, 0, -2, -4, -6], [4, 0, -2, -4, -6, -8], [4, 2], [4, 2, -8], [4, 2, -6], [4, 2, -6, -8], [4, 2, -4], [4, 2, -4, -8], [4, 2, -4, -6], [4, 2, -4, -6, -8], [4, 2, -2], [4, 2, -2, -8], [4, 2, -2, -6], [4, 2, -2, -6, -8], [4, 2, -2, -4], [4, 2, -2, -4, -8], [4, 2, -2, -4, -6], [4, 2, -2, -4, -6, -8], [4, 2, 0], [4, 2, 0, -8], [4, 2, 0, -6], [4, 2, 0, -6, -8], [4, 2, 0, -4], [4, 2, 0, -4, -8], [4, 2, 0, -4, -6], [4, 2, 0, -4, -6, -8], [4, 2, 0, -2], [4, 2, 0, -2, -8], [4, 2, 0, -2, -6], [4, 2, 0, -2, -6, -8], [4, 2, 0, -2, -4], [4, 2, 0, -2, -4, -8], [4, 2, 0, -2, -4, -6], [4, 2, 0, -2, -4, -6, -8], [6], [6, -8], [6, -6], [6, -6, -8], [6, -4], [6, -4, -8], [6, -4, -6], [6, -4, -6, -8], [6, -2], [6, -2, -8], [6, -2, -6], [6, -2, -6, -8], [6, -2, -4], [6, -2, -4, -8], [6, -2, -4, -6], [6, -2, -4, -6, -8], [6, 0], [6, 0, -8], [6, 0, -6], [6, 0, -6, -8], [6, 0, -4], [6, 0, -4, -8], [6, 0, -4, -6], [6, 0, -4, -6, -8], [6, 0, -2], [6, 0, -2, -8], [6, 0, -2, -6], [6, 0, -2, -6, -8], [6, 0, -2, -4], [6, 0, -2, -4, -8], [6, 0, -2, -4, -6], [6, 0, -2, -4, -6, -8], [6, 2], [6, 2, -8], [6, 2, -6], [6, 2, -6, -8], [6, 2, -4], [6, 2, -4, -8], [6, 2, -4, -6], [6, 2, -4, -6, -8], [6, 2, -2], [6, 2, -2, -8], [6, 2, -2, -6], [6, 2, -2, -6, -8], [6, 2, -2, -4], [6, 2, -2, -4, -8], [6, 2, -2, -4, -6], [6, 2, -2, -4, -6, -8], [6, 2, 0], [6, 2, 0, -8], [6, 2, 0, -6], [6, 2, 0, -6, -8], [6, 2, 0, -4], [6, 2, 0, -4, -8], [6, 2, 0, -4, -6], [6, 2, 0, -4, -6, -8], [6, 2, 0, -2], [6, 2, 0, -2, -8], [6, 2, 0, -2, -6], [6, 2, 0, -2, -6, -8], [6, 2, 0, -2, -4], [6, 2, 0, -2, -4, -8], [6, 2, 0, -2, -4, -6], [6, 2, 0, -2, -4, -6, -8], [6, 4], [6, 4, -8], [6, 4, -6], [6, 4, -6, -8], [6, 4, -4], [6, 4, -4, -8], [6, 4, -4, -6], [6, 4, -4, -6, -8], [6, 4, -2], [6, 4, -2, -8], [6, 4, -2, -6], [6, 4, -2, -6, -8], [6, 4, -2, -4], [6, 4, -2, -4, -8], [6, 4, -2, -4, -6], [6, 4, -2, -4, -6, -8], [6, 4, 0], [6, 4, 0, -8], [6, 4, 0, -6], [6, 4, 0, -6, -8], [6, 4, 0, -4], [6, 4, 0, -4, -8], [6, 4, 0, -4, -6], [6, 4, 0, -4, -6, -8], [6, 4, 0, -2], [6, 4, 0, -2, -8], [6, 4, 0, -2, -6], [6, 4, 0, -2, -6, -8], [6, 4, 0, -2, -4], [6, 4, 0, -2, -4, -8], [6, 4, 0, -2, -4, -6], [6, 4, 0, -2, -4, -6, -8], [6, 4, 2], [6, 4, 2, -8], [6, 4, 2, -6], [6, 4, 2, -6, -8], [6, 4, 2, -4], [6, 4, 2, -4, -8], [6, 4, 2, -4, -6], [6, 4, 2, -4, -6, -8], [6, 4, 2, -2], [6, 4, 2, -2, -8], [6, 4, 2, -2, -6], [6, 4, 2, -2, -6, -8], [6, 4, 2, -2, -4], [6, 4, 2, -2, -4, -8], [6, 4, 2, -2, -4, -6], [6, 4, 2, -2, -4, -6, -8], [6, 4, 2, 0], [6, 4, 2, 0, -8], [6, 4, 2, 0, -6], [6, 4, 2, 0, -6, -8], [6, 4, 2, 0, -4], [6, 4, 2, 0, -4, -8], [6, 4, 2, 0, -4, -6], [6, 4, 2, 0, -4, -6, -8], [6, 4, 2, 0, -2], [6, 4, 2, 0, -2, -8], [6, 4, 2, 0, -2, -6], [6, 4, 2, 0, -2, -6, -8], [6, 4, 2, 0, -2, -4], [6, 4, 2, 0, -2, -4, -8], [6, 4, 2, 0, -2, -4, -6], [6, 4, 2, 0, -2, -4, -6, -8], [8], [8, -8], [8, -6], [8, -6, -8], [8, -4], [8, -4, -8], [8, -4, -6], [8, -4, -6, -8], [8, -2], [8, -2, -8], [8, -2, -6], [8, -2, -6, -8], [8, -2, -4], [8, -2, -4, -8], [8, -2, -4, -6], [8, -2, -4, -6, -8], [8, 0], [8, 0, -8], [8, 0, -6], [8, 0, -6, -8], [8, 0, -4], [8, 0, -4, -8], [8, 0, -4, -6], [8, 0, -4, -6, -8], [8, 0, -2], [8, 0, -2, -8], [8, 0, -2, -6], [8, 0, -2, -6, -8], [8, 0, -2, -4], [8, 0, -2, -4, -8], [8, 0, -2, -4, -6], [8, 0, -2, -4, -6, -8], [8, 2], [8, 2, -8], [8, 2, -6], [8, 2, -6, -8], [8, 2, -4], [8, 2, -4, -8], [8, 2, -4, -6], [8, 2, -4, -6, -8], [8, 2, -2], [8, 2, -2, -8], [8, 2, -2, -6], [8, 2, -2, -6, -8], [8, 2, -2, -4], [8, 2, -2, -4, -8], [8, 2, -2, -4, -6], [8, 2, -2, -4, -6, -8], [8, 2, 0], [8, 2, 0, -8], [8, 2, 0, -6], [8, 2, 0, -6, -8], [8, 2, 0, -4], [8, 2, 0, -4, -8], [8, 2, 0, -4, -6], [8, 2, 0, -4, -6, -8], [8, 2, 0, -2], [8, 2, 0, -2, -8], [8, 2, 0, -2, -6], [8, 2, 0, -2, -6, -8], [8, 2, 0, -2, -4], [8, 2, 0, -2, -4, -8], [8, 2, 0, -2, -4, -6], [8, 2, 0, -2, -4, -6, -8], [8, 4], [8, 4, -8], [8, 4, -6], [8, 4, -6, -8], [8, 4, -4], [8, 4, -4, -8], [8, 4, -4, -6], [8, 4, -4, -6, -8], [8, 4, -2], [8, 4, -2, -8], [8, 4, -2, -6], [8, 4, -2, -6, -8], [8, 4, -2, -4], [8, 4, -2, -4, -8], [8, 4, -2, -4, -6], [8, 4, -2, -4, -6, -8], [8, 4, 0], [8, 4, 0, -8], [8, 4, 0, -6], [8, 4, 0, -6, -8], [8, 4, 0, -4], [8, 4, 0, -4, -8], [8, 4, 0, -4, -6], [8, 4, 0, -4, -6, -8], [8, 4, 0, -2], [8, 4, 0, -2, -8], [8, 4, 0, -2, -6], [8, 4, 0, -2, -6, -8], [8, 4, 0, -2, -4], [8, 4, 0, -2, -4, -8], [8, 4, 0, -2, -4, -6], [8, 4, 0, -2, -4, -6, -8], [8, 4, 2], [8, 4, 2, -8], [8, 4, 2, -6], [8, 4, 2, -6, -8], [8, 4, 2, -4], [8, 4, 2, -4, -8], [8, 4, 2, -4, -6], [8, 4, 2, -4, -6, -8], [8, 4, 2, -2], [8, 4, 2, -2, -8], [8, 4, 2, -2, -6], [8, 4, 2, -2, -6, -8], [8, 4, 2, -2, -4], [8, 4, 2, -2, -4, -8], [8, 4, 2, -2, -4, -6], [8, 4, 2, -2, -4, -6, -8], [8, 4, 2, 0], [8, 4, 2, 0, -8], [8, 4, 2, 0, -6], [8, 4, 2, 0, -6, -8], [8, 4, 2, 0, -4], [8, 4, 2, 0, -4, -8], [8, 4, 2, 0, -4, -6], [8, 4, 2, 0, -4, -6, -8], [8, 4, 2, 0, -2], [8, 4, 2, 0, -2, -8], [8, 4, 2, 0, -2, -6], [8, 4, 2, 0, -2, -6, -8], [8, 4, 2, 0, -2, -4], [8, 4, 2, 0, -2, -4, -8], [8, 4, 2, 0, -2, -4, -6], [8, 4, 2, 0, -2, -4, -6, -8], [8, 6], [8, 6, -8], [8, 6, -6], [8, 6, -6, -8], [8, 6, -4], [8, 6, -4, -8], [8, 6, -4, -6], [8, 6, -4, -6, -8], [8, 6, -2], [8, 6, -2, -8], [8, 6, -2, -6], [8, 6, -2, -6, -8], [8, 6, -2, -4], [8, 6, -2, -4, -8], [8, 6, -2, -4, -6], [8, 6, -2, -4, -6, -8], [8, 6, 0], [8, 6, 0, -8], [8, 6, 0, -6], [8, 6, 0, -6, -8], [8, 6, 0, -4], [8, 6, 0, -4, -8], [8, 6, 0, -4, -6], [8, 6, 0, -4, -6, -8], [8, 6, 0, -2], [8, 6, 0, -2, -8], [8, 6, 0, -2, -6], [8, 6, 0, -2, -6, -8], [8, 6, 0, -2, -4], [8, 6, 0, -2, -4, -8], [8, 6, 0, -2, -4, -6], [8, 6, 0, -2, -4, -6, -8], [8, 6, 2], [8, 6, 2, -8], [8, 6, 2, -6], [8, 6, 2, -6, -8], [8, 6, 2, -4], [8, 6, 2, -4, -8], [8, 6, 2, -4, -6], [8, 6, 2, -4, -6, -8], [8, 6, 2, -2], [8, 6, 2, -2, -8], [8, 6, 2, -2, -6], [8, 6, 2, -2, -6, -8], [8, 6, 2, -2, -4], [8, 6, 2, -2, -4, -8], [8, 6, 2, -2, -4, -6], [8, 6, 2, -2, -4, -6, -8], [8, 6, 2, 0], [8, 6, 2, 0, -8], [8, 6, 2, 0, -6], [8, 6, 2, 0, -6, -8], [8, 6, 2, 0, -4], [8, 6, 2, 0, -4, -8], [8, 6, 2, 0, -4, -6], [8, 6, 2, 0, -4, -6, -8], [8, 6, 2, 0, -2], [8, 6, 2, 0, -2, -8], [8, 6, 2, 0, -2, -6], [8, 6, 2, 0, -2, -6, -8], [8, 6, 2, 0, -2, -4], [8, 6, 2, 0, -2, -4, -8], [8, 6, 2, 0, -2, -4, -6], [8, 6, 2, 0, -2, -4, -6, -8], [8, 6, 4], [8, 6, 4, -8], [8, 6, 4, -6], [8, 6, 4, -6, -8], [8, 6, 4, -4], [8, 6, 4, -4, -8], [8, 6, 4, -4, -6], [8, 6, 4, -4, -6, -8], [8, 6, 4, -2], [8, 6, 4, -2, -8], [8, 6, 4, -2, -6], [8, 6, 4, -2, -6, -8], [8, 6, 4, -2, -4], [8, 6, 4, -2, -4, -8], [8, 6, 4, -2, -4, -6], [8, 6, 4, -2, -4, -6, -8], [8, 6, 4, 0], [8, 6, 4, 0, -8], [8, 6, 4, 0, -6], [8, 6, 4, 0, -6, -8], [8, 6, 4, 0, -4], [8, 6, 4, 0, -4, -8], [8, 6, 4, 0, -4, -6], [8, 6, 4, 0, -4, -6, -8], [8, 6, 4, 0, -2], [8, 6, 4, 0, -2, -8], [8, 6, 4, 0, -2, -6], [8, 6, 4, 0, -2, -6, -8], [8, 6, 4, 0, -2, -4], [8, 6, 4, 0, -2, -4, -8], [8, 6, 4, 0, -2, -4, -6], [8, 6, 4, 0, -2, -4, -6, -8], [8, 6, 4, 2], [8, 6, 4, 2, -8], [8, 6, 4, 2, -6], [8, 6, 4, 2, -6, -8], [8, 6, 4, 2, -4], [8, 6, 4, 2, -4, -8], [8, 6, 4, 2, -4, -6], [8, 6, 4, 2, -4, -6, -8], [8, 6, 4, 2, -2], [8, 6, 4, 2, -2, -8], [8, 6, 4, 2, -2, -6], [8, 6, 4, 2, -2, -6, -8], [8, 6, 4, 2, -2, -4], [8, 6, 4, 2, -2, -4, -8], [8, 6, 4, 2, -2, -4, -6], [8, 6, 4, 2, -2, -4, -6, -8], [8, 6, 4, 2, 0], [8, 6, 4, 2, 0, -8], [8, 6, 4, 2, 0, -6], [8, 6, 4, 2, 0, -6, -8], [8, 6, 4, 2, 0, -4], [8, 6, 4, 2, 0, -4, -8], [8, 6, 4, 2, 0, -4, -6], [8, 6, 4, 2, 0, -4, -6, -8], [8, 6, 4, 2, 0, -2], [8, 6, 4, 2, 0, -2, -8], [8, 6, 4, 2, 0, -2, -6], [8, 6, 4, 2, 0, -2, -6, -8], [8, 6, 4, 2, 0, -2, -4], [8, 6, 4, 2, 0, -2, -4, -8], [8, 6, 4, 2, 0, -2, -4, -6], [8, 6, 4, 2, 0, -2, -4, -6, -8]]"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35]",
        "output": "[[], [35], [28], [28, 35], [21], [21, 35], [21, 28], [21, 28, 35], [14], [14, 35], [14, 28], [14, 28, 35], [14, 21], [14, 21, 35], [14, 21, 28], [14, 21, 28, 35], [7], [7, 35], [7, 28], [7, 28, 35], [7, 21], [7, 21, 35], [7, 21, 28], [7, 21, 28, 35], [7, 14], [7, 14, 35], [7, 14, 28], [7, 14, 28, 35], [7, 14, 21], [7, 14, 21, 35], [7, 14, 21, 28], [7, 14, 21, 28, 35]]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "[[], [19], [17], [17, 19], [15], [15, 19], [15, 17], [15, 17, 19], [13], [13, 19], [13, 17], [13, 17, 19], [13, 15], [13, 15, 19], [13, 15, 17], [13, 15, 17, 19], [11], [11, 19], [11, 17], [11, 17, 19], [11, 15], [11, 15, 19], [11, 15, 17], [11, 15, 17, 19], [11, 13], [11, 13, 19], [11, 13, 17], [11, 13, 17, 19], [11, 13, 15], [11, 13, 15, 19], [11, 13, 15, 17], [11, 13, 15, 17, 19], [9], [9, 19], [9, 17], [9, 17, 19], [9, 15], [9, 15, 19], [9, 15, 17], [9, 15, 17, 19], [9, 13], [9, 13, 19], [9, 13, 17], [9, 13, 17, 19], [9, 13, 15], [9, 13, 15, 19], [9, 13, 15, 17], [9, 13, 15, 17, 19], [9, 11], [9, 11, 19], [9, 11, 17], [9, 11, 17, 19], [9, 11, 15], [9, 11, 15, 19], [9, 11, 15, 17], [9, 11, 15, 17, 19], [9, 11, 13], [9, 11, 13, 19], [9, 11, 13, 17], [9, 11, 13, 17, 19], [9, 11, 13, 15], [9, 11, 13, 15, 19], [9, 11, 13, 15, 17], [9, 11, 13, 15, 17, 19], [7], [7, 19], [7, 17], [7, 17, 19], [7, 15], [7, 15, 19], [7, 15, 17], [7, 15, 17, 19], [7, 13], [7, 13, 19], [7, 13, 17], [7, 13, 17, 19], [7, 13, 15], [7, 13, 15, 19], [7, 13, 15, 17], [7, 13, 15, 17, 19], [7, 11], [7, 11, 19], [7, 11, 17], [7, 11, 17, 19], [7, 11, 15], [7, 11, 15, 19], [7, 11, 15, 17], [7, 11, 15, 17, 19], [7, 11, 13], [7, 11, 13, 19], [7, 11, 13, 17], [7, 11, 13, 17, 19], [7, 11, 13, 15], [7, 11, 13, 15, 19], [7, 11, 13, 15, 17], [7, 11, 13, 15, 17, 19], [7, 9], [7, 9, 19], [7, 9, 17], [7, 9, 17, 19], [7, 9, 15], [7, 9, 15, 19], [7, 9, 15, 17], [7, 9, 15, 17, 19], [7, 9, 13], [7, 9, 13, 19], [7, 9, 13, 17], [7, 9, 13, 17, 19], [7, 9, 13, 15], [7, 9, 13, 15, 19], [7, 9, 13, 15, 17], [7, 9, 13, 15, 17, 19], [7, 9, 11], [7, 9, 11, 19], [7, 9, 11, 17], [7, 9, 11, 17, 19], [7, 9, 11, 15], [7, 9, 11, 15, 19], [7, 9, 11, 15, 17], [7, 9, 11, 15, 17, 19], [7, 9, 11, 13], [7, 9, 11, 13, 19], [7, 9, 11, 13, 17], [7, 9, 11, 13, 17, 19], [7, 9, 11, 13, 15], [7, 9, 11, 13, 15, 19], [7, 9, 11, 13, 15, 17], [7, 9, 11, 13, 15, 17, 19], [5], [5, 19], [5, 17], [5, 17, 19], [5, 15], [5, 15, 19], [5, 15, 17], [5, 15, 17, 19], [5, 13], [5, 13, 19], [5, 13, 17], [5, 13, 17, 19], [5, 13, 15], [5, 13, 15, 19], [5, 13, 15, 17], [5, 13, 15, 17, 19], [5, 11], [5, 11, 19], [5, 11, 17], [5, 11, 17, 19], [5, 11, 15], [5, 11, 15, 19], [5, 11, 15, 17], [5, 11, 15, 17, 19], [5, 11, 13], [5, 11, 13, 19], [5, 11, 13, 17], [5, 11, 13, 17, 19], [5, 11, 13, 15], [5, 11, 13, 15, 19], [5, 11, 13, 15, 17], [5, 11, 13, 15, 17, 19], [5, 9], [5, 9, 19], [5, 9, 17], [5, 9, 17, 19], [5, 9, 15], [5, 9, 15, 19], [5, 9, 15, 17], [5, 9, 15, 17, 19], [5, 9, 13], [5, 9, 13, 19], [5, 9, 13, 17], [5, 9, 13, 17, 19], [5, 9, 13, 15], [5, 9, 13, 15, 19], [5, 9, 13, 15, 17], [5, 9, 13, 15, 17, 19], [5, 9, 11], [5, 9, 11, 19], [5, 9, 11, 17], [5, 9, 11, 17, 19], [5, 9, 11, 15], [5, 9, 11, 15, 19], [5, 9, 11, 15, 17], [5, 9, 11, 15, 17, 19], [5, 9, 11, 13], [5, 9, 11, 13, 19], [5, 9, 11, 13, 17], [5, 9, 11, 13, 17, 19], [5, 9, 11, 13, 15], [5, 9, 11, 13, 15, 19], [5, 9, 11, 13, 15, 17], [5, 9, 11, 13, 15, 17, 19], [5, 7], [5, 7, 19], [5, 7, 17], [5, 7, 17, 19], [5, 7, 15], [5, 7, 15, 19], [5, 7, 15, 17], [5, 7, 15, 17, 19], [5, 7, 13], [5, 7, 13, 19], [5, 7, 13, 17], [5, 7, 13, 17, 19], [5, 7, 13, 15], [5, 7, 13, 15, 19], [5, 7, 13, 15, 17], [5, 7, 13, 15, 17, 19], [5, 7, 11], [5, 7, 11, 19], [5, 7, 11, 17], [5, 7, 11, 17, 19], [5, 7, 11, 15], [5, 7, 11, 15, 19], [5, 7, 11, 15, 17], [5, 7, 11, 15, 17, 19], [5, 7, 11, 13], [5, 7, 11, 13, 19], [5, 7, 11, 13, 17], [5, 7, 11, 13, 17, 19], [5, 7, 11, 13, 15], [5, 7, 11, 13, 15, 19], [5, 7, 11, 13, 15, 17], [5, 7, 11, 13, 15, 17, 19], [5, 7, 9], [5, 7, 9, 19], [5, 7, 9, 17], [5, 7, 9, 17, 19], [5, 7, 9, 15], [5, 7, 9, 15, 19], [5, 7, 9, 15, 17], [5, 7, 9, 15, 17, 19], [5, 7, 9, 13], [5, 7, 9, 13, 19], [5, 7, 9, 13, 17], [5, 7, 9, 13, 17, 19], [5, 7, 9, 13, 15], [5, 7, 9, 13, 15, 19], [5, 7, 9, 13, 15, 17], [5, 7, 9, 13, 15, 17, 19], [5, 7, 9, 11], [5, 7, 9, 11, 19], [5, 7, 9, 11, 17], [5, 7, 9, 11, 17, 19], [5, 7, 9, 11, 15], [5, 7, 9, 11, 15, 19], [5, 7, 9, 11, 15, 17], [5, 7, 9, 11, 15, 17, 19], [5, 7, 9, 11, 13], [5, 7, 9, 11, 13, 19], [5, 7, 9, 11, 13, 17], [5, 7, 9, 11, 13, 17, 19], [5, 7, 9, 11, 13, 15], [5, 7, 9, 11, 13, 15, 19], [5, 7, 9, 11, 13, 15, 17], [5, 7, 9, 11, 13, 15, 17, 19], [3], [3, 19], [3, 17], [3, 17, 19], [3, 15], [3, 15, 19], [3, 15, 17], [3, 15, 17, 19], [3, 13], [3, 13, 19], [3, 13, 17], [3, 13, 17, 19], [3, 13, 15], [3, 13, 15, 19], [3, 13, 15, 17], [3, 13, 15, 17, 19], [3, 11], [3, 11, 19], [3, 11, 17], [3, 11, 17, 19], [3, 11, 15], [3, 11, 15, 19], [3, 11, 15, 17], [3, 11, 15, 17, 19], [3, 11, 13], [3, 11, 13, 19], [3, 11, 13, 17], [3, 11, 13, 17, 19], [3, 11, 13, 15], [3, 11, 13, 15, 19], [3, 11, 13, 15, 17], [3, 11, 13, 15, 17, 19], [3, 9], [3, 9, 19], [3, 9, 17], [3, 9, 17, 19], [3, 9, 15], [3, 9, 15, 19], [3, 9, 15, 17], [3, 9, 15, 17, 19], [3, 9, 13], [3, 9, 13, 19], [3, 9, 13, 17], [3, 9, 13, 17, 19], [3, 9, 13, 15], [3, 9, 13, 15, 19], [3, 9, 13, 15, 17], [3, 9, 13, 15, 17, 19], [3, 9, 11], [3, 9, 11, 19], [3, 9, 11, 17], [3, 9, 11, 17, 19], [3, 9, 11, 15], [3, 9, 11, 15, 19], [3, 9, 11, 15, 17], [3, 9, 11, 15, 17, 19], [3, 9, 11, 13], [3, 9, 11, 13, 19], [3, 9, 11, 13, 17], [3, 9, 11, 13, 17, 19], [3, 9, 11, 13, 15], [3, 9, 11, 13, 15, 19], [3, 9, 11, 13, 15, 17], [3, 9, 11, 13, 15, 17, 19], [3, 7], [3, 7, 19], [3, 7, 17], [3, 7, 17, 19], [3, 7, 15], [3, 7, 15, 19], [3, 7, 15, 17], [3, 7, 15, 17, 19], [3, 7, 13], [3, 7, 13, 19], [3, 7, 13, 17], [3, 7, 13, 17, 19], [3, 7, 13, 15], [3, 7, 13, 15, 19], [3, 7, 13, 15, 17], [3, 7, 13, 15, 17, 19], [3, 7, 11], [3, 7, 11, 19], [3, 7, 11, 17], [3, 7, 11, 17, 19], [3, 7, 11, 15], [3, 7, 11, 15, 19], [3, 7, 11, 15, 17], [3, 7, 11, 15, 17, 19], [3, 7, 11, 13], [3, 7, 11, 13, 19], [3, 7, 11, 13, 17], [3, 7, 11, 13, 17, 19], [3, 7, 11, 13, 15], [3, 7, 11, 13, 15, 19], [3, 7, 11, 13, 15, 17], [3, 7, 11, 13, 15, 17, 19], [3, 7, 9], [3, 7, 9, 19], [3, 7, 9, 17], [3, 7, 9, 17, 19], [3, 7, 9, 15], [3, 7, 9, 15, 19], [3, 7, 9, 15, 17], [3, 7, 9, 15, 17, 19], [3, 7, 9, 13], [3, 7, 9, 13, 19], [3, 7, 9, 13, 17], [3, 7, 9, 13, 17, 19], [3, 7, 9, 13, 15], [3, 7, 9, 13, 15, 19], [3, 7, 9, 13, 15, 17], [3, 7, 9, 13, 15, 17, 19], [3, 7, 9, 11], [3, 7, 9, 11, 19], [3, 7, 9, 11, 17], [3, 7, 9, 11, 17, 19], [3, 7, 9, 11, 15], [3, 7, 9, 11, 15, 19], [3, 7, 9, 11, 15, 17], [3, 7, 9, 11, 15, 17, 19], [3, 7, 9, 11, 13], [3, 7, 9, 11, 13, 19], [3, 7, 9, 11, 13, 17], [3, 7, 9, 11, 13, 17, 19], [3, 7, 9, 11, 13, 15], [3, 7, 9, 11, 13, 15, 19], [3, 7, 9, 11, 13, 15, 17], [3, 7, 9, 11, 13, 15, 17, 19], [3, 5], [3, 5, 19], [3, 5, 17], [3, 5, 17, 19], [3, 5, 15], [3, 5, 15, 19], [3, 5, 15, 17], [3, 5, 15, 17, 19], [3, 5, 13], [3, 5, 13, 19], [3, 5, 13, 17], [3, 5, 13, 17, 19], [3, 5, 13, 15], [3, 5, 13, 15, 19], [3, 5, 13, 15, 17], [3, 5, 13, 15, 17, 19], [3, 5, 11], [3, 5, 11, 19], [3, 5, 11, 17], [3, 5, 11, 17, 19], [3, 5, 11, 15], [3, 5, 11, 15, 19], [3, 5, 11, 15, 17], [3, 5, 11, 15, 17, 19], [3, 5, 11, 13], [3, 5, 11, 13, 19], [3, 5, 11, 13, 17], [3, 5, 11, 13, 17, 19], [3, 5, 11, 13, 15], [3, 5, 11, 13, 15, 19], [3, 5, 11, 13, 15, 17], [3, 5, 11, 13, 15, 17, 19], [3, 5, 9], [3, 5, 9, 19], [3, 5, 9, 17], [3, 5, 9, 17, 19], [3, 5, 9, 15], [3, 5, 9, 15, 19], [3, 5, 9, 15, 17], [3, 5, 9, 15, 17, 19], [3, 5, 9, 13], [3, 5, 9, 13, 19], [3, 5, 9, 13, 17], [3, 5, 9, 13, 17, 19], [3, 5, 9, 13, 15], [3, 5, 9, 13, 15, 19], [3, 5, 9, 13, 15, 17], [3, 5, 9, 13, 15, 17, 19], [3, 5, 9, 11], [3, 5, 9, 11, 19], [3, 5, 9, 11, 17], [3, 5, 9, 11, 17, 19], [3, 5, 9, 11, 15], [3, 5, 9, 11, 15, 19], [3, 5, 9, 11, 15, 17], [3, 5, 9, 11, 15, 17, 19], [3, 5, 9, 11, 13], [3, 5, 9, 11, 13, 19], [3, 5, 9, 11, 13, 17], [3, 5, 9, 11, 13, 17, 19], [3, 5, 9, 11, 13, 15], [3, 5, 9, 11, 13, 15, 19], [3, 5, 9, 11, 13, 15, 17], [3, 5, 9, 11, 13, 15, 17, 19], [3, 5, 7], [3, 5, 7, 19], [3, 5, 7, 17], [3, 5, 7, 17, 19], [3, 5, 7, 15], [3, 5, 7, 15, 19], [3, 5, 7, 15, 17], [3, 5, 7, 15, 17, 19], [3, 5, 7, 13], [3, 5, 7, 13, 19], [3, 5, 7, 13, 17], [3, 5, 7, 13, 17, 19], [3, 5, 7, 13, 15], [3, 5, 7, 13, 15, 19], [3, 5, 7, 13, 15, 17], [3, 5, 7, 13, 15, 17, 19], [3, 5, 7, 11], [3, 5, 7, 11, 19], [3, 5, 7, 11, 17], [3, 5, 7, 11, 17, 19], [3, 5, 7, 11, 15], [3, 5, 7, 11, 15, 19], [3, 5, 7, 11, 15, 17], [3, 5, 7, 11, 15, 17, 19], [3, 5, 7, 11, 13], [3, 5, 7, 11, 13, 19], [3, 5, 7, 11, 13, 17], [3, 5, 7, 11, 13, 17, 19], [3, 5, 7, 11, 13, 15], [3, 5, 7, 11, 13, 15, 19], [3, 5, 7, 11, 13, 15, 17], [3, 5, 7, 11, 13, 15, 17, 19], [3, 5, 7, 9], [3, 5, 7, 9, 19], [3, 5, 7, 9, 17], [3, 5, 7, 9, 17, 19], [3, 5, 7, 9, 15], [3, 5, 7, 9, 15, 19], [3, 5, 7, 9, 15, 17], [3, 5, 7, 9, 15, 17, 19], [3, 5, 7, 9, 13], [3, 5, 7, 9, 13, 19], [3, 5, 7, 9, 13, 17], [3, 5, 7, 9, 13, 17, 19], [3, 5, 7, 9, 13, 15], [3, 5, 7, 9, 13, 15, 19], [3, 5, 7, 9, 13, 15, 17], [3, 5, 7, 9, 13, 15, 17, 19], [3, 5, 7, 9, 11], [3, 5, 7, 9, 11, 19], [3, 5, 7, 9, 11, 17], [3, 5, 7, 9, 11, 17, 19], [3, 5, 7, 9, 11, 15], [3, 5, 7, 9, 11, 15, 19], [3, 5, 7, 9, 11, 15, 17], [3, 5, 7, 9, 11, 15, 17, 19], [3, 5, 7, 9, 11, 13], [3, 5, 7, 9, 11, 13, 19], [3, 5, 7, 9, 11, 13, 17], [3, 5, 7, 9, 11, 13, 17, 19], [3, 5, 7, 9, 11, 13, 15], [3, 5, 7, 9, 11, 13, 15, 19], [3, 5, 7, 9, 11, 13, 15, 17], [3, 5, 7, 9, 11, 13, 15, 17, 19], [1], [1, 19], [1, 17], [1, 17, 19], [1, 15], [1, 15, 19], [1, 15, 17], [1, 15, 17, 19], [1, 13], [1, 13, 19], [1, 13, 17], [1, 13, 17, 19], [1, 13, 15], [1, 13, 15, 19], [1, 13, 15, 17], [1, 13, 15, 17, 19], [1, 11], [1, 11, 19], [1, 11, 17], [1, 11, 17, 19], [1, 11, 15], [1, 11, 15, 19], [1, 11, 15, 17], [1, 11, 15, 17, 19], [1, 11, 13], [1, 11, 13, 19], [1, 11, 13, 17], [1, 11, 13, 17, 19], [1, 11, 13, 15], [1, 11, 13, 15, 19], [1, 11, 13, 15, 17], [1, 11, 13, 15, 17, 19], [1, 9], [1, 9, 19], [1, 9, 17], [1, 9, 17, 19], [1, 9, 15], [1, 9, 15, 19], [1, 9, 15, 17], [1, 9, 15, 17, 19], [1, 9, 13], [1, 9, 13, 19], [1, 9, 13, 17], [1, 9, 13, 17, 19], [1, 9, 13, 15], [1, 9, 13, 15, 19], [1, 9, 13, 15, 17], [1, 9, 13, 15, 17, 19], [1, 9, 11], [1, 9, 11, 19], [1, 9, 11, 17], [1, 9, 11, 17, 19], [1, 9, 11, 15], [1, 9, 11, 15, 19], [1, 9, 11, 15, 17], [1, 9, 11, 15, 17, 19], [1, 9, 11, 13], [1, 9, 11, 13, 19], [1, 9, 11, 13, 17], [1, 9, 11, 13, 17, 19], [1, 9, 11, 13, 15], [1, 9, 11, 13, 15, 19], [1, 9, 11, 13, 15, 17], [1, 9, 11, 13, 15, 17, 19], [1, 7], [1, 7, 19], [1, 7, 17], [1, 7, 17, 19], [1, 7, 15], [1, 7, 15, 19], [1, 7, 15, 17], [1, 7, 15, 17, 19], [1, 7, 13], [1, 7, 13, 19], [1, 7, 13, 17], [1, 7, 13, 17, 19], [1, 7, 13, 15], [1, 7, 13, 15, 19], [1, 7, 13, 15, 17], [1, 7, 13, 15, 17, 19], [1, 7, 11], [1, 7, 11, 19], [1, 7, 11, 17], [1, 7, 11, 17, 19], [1, 7, 11, 15], [1, 7, 11, 15, 19], [1, 7, 11, 15, 17], [1, 7, 11, 15, 17, 19], [1, 7, 11, 13], [1, 7, 11, 13, 19], [1, 7, 11, 13, 17], [1, 7, 11, 13, 17, 19], [1, 7, 11, 13, 15], [1, 7, 11, 13, 15, 19], [1, 7, 11, 13, 15, 17], [1, 7, 11, 13, 15, 17, 19], [1, 7, 9], [1, 7, 9, 19], [1, 7, 9, 17], [1, 7, 9, 17, 19], [1, 7, 9, 15], [1, 7, 9, 15, 19], [1, 7, 9, 15, 17], [1, 7, 9, 15, 17, 19], [1, 7, 9, 13], [1, 7, 9, 13, 19], [1, 7, 9, 13, 17], [1, 7, 9, 13, 17, 19], [1, 7, 9, 13, 15], [1, 7, 9, 13, 15, 19], [1, 7, 9, 13, 15, 17], [1, 7, 9, 13, 15, 17, 19], [1, 7, 9, 11], [1, 7, 9, 11, 19], [1, 7, 9, 11, 17], [1, 7, 9, 11, 17, 19], [1, 7, 9, 11, 15], [1, 7, 9, 11, 15, 19], [1, 7, 9, 11, 15, 17], [1, 7, 9, 11, 15, 17, 19], [1, 7, 9, 11, 13], [1, 7, 9, 11, 13, 19], [1, 7, 9, 11, 13, 17], [1, 7, 9, 11, 13, 17, 19], [1, 7, 9, 11, 13, 15], [1, 7, 9, 11, 13, 15, 19], [1, 7, 9, 11, 13, 15, 17], [1, 7, 9, 11, 13, 15, 17, 19], [1, 5], [1, 5, 19], [1, 5, 17], [1, 5, 17, 19], [1, 5, 15], [1, 5, 15, 19], [1, 5, 15, 17], [1, 5, 15, 17, 19], [1, 5, 13], [1, 5, 13, 19], [1, 5, 13, 17], [1, 5, 13, 17, 19], [1, 5, 13, 15], [1, 5, 13, 15, 19], [1, 5, 13, 15, 17], [1, 5, 13, 15, 17, 19], [1, 5, 11], [1, 5, 11, 19], [1, 5, 11, 17], [1, 5, 11, 17, 19], [1, 5, 11, 15], [1, 5, 11, 15, 19], [1, 5, 11, 15, 17], [1, 5, 11, 15, 17, 19], [1, 5, 11, 13], [1, 5, 11, 13, 19], [1, 5, 11, 13, 17], [1, 5, 11, 13, 17, 19], [1, 5, 11, 13, 15], [1, 5, 11, 13, 15, 19], [1, 5, 11, 13, 15, 17], [1, 5, 11, 13, 15, 17, 19], [1, 5, 9], [1, 5, 9, 19], [1, 5, 9, 17], [1, 5, 9, 17, 19], [1, 5, 9, 15], [1, 5, 9, 15, 19], [1, 5, 9, 15, 17], [1, 5, 9, 15, 17, 19], [1, 5, 9, 13], [1, 5, 9, 13, 19], [1, 5, 9, 13, 17], [1, 5, 9, 13, 17, 19], [1, 5, 9, 13, 15], [1, 5, 9, 13, 15, 19], [1, 5, 9, 13, 15, 17], [1, 5, 9, 13, 15, 17, 19], [1, 5, 9, 11], [1, 5, 9, 11, 19], [1, 5, 9, 11, 17], [1, 5, 9, 11, 17, 19], [1, 5, 9, 11, 15], [1, 5, 9, 11, 15, 19], [1, 5, 9, 11, 15, 17], [1, 5, 9, 11, 15, 17, 19], [1, 5, 9, 11, 13], [1, 5, 9, 11, 13, 19], [1, 5, 9, 11, 13, 17], [1, 5, 9, 11, 13, 17, 19], [1, 5, 9, 11, 13, 15], [1, 5, 9, 11, 13, 15, 19], [1, 5, 9, 11, 13, 15, 17], [1, 5, 9, 11, 13, 15, 17, 19], [1, 5, 7], [1, 5, 7, 19], [1, 5, 7, 17], [1, 5, 7, 17, 19], [1, 5, 7, 15], [1, 5, 7, 15, 19], [1, 5, 7, 15, 17], [1, 5, 7, 15, 17, 19], [1, 5, 7, 13], [1, 5, 7, 13, 19], [1, 5, 7, 13, 17], [1, 5, 7, 13, 17, 19], [1, 5, 7, 13, 15], [1, 5, 7, 13, 15, 19], [1, 5, 7, 13, 15, 17], [1, 5, 7, 13, 15, 17, 19], [1, 5, 7, 11], [1, 5, 7, 11, 19], [1, 5, 7, 11, 17], [1, 5, 7, 11, 17, 19], [1, 5, 7, 11, 15], [1, 5, 7, 11, 15, 19], [1, 5, 7, 11, 15, 17], [1, 5, 7, 11, 15, 17, 19], [1, 5, 7, 11, 13], [1, 5, 7, 11, 13, 19], [1, 5, 7, 11, 13, 17], [1, 5, 7, 11, 13, 17, 19], [1, 5, 7, 11, 13, 15], [1, 5, 7, 11, 13, 15, 19], [1, 5, 7, 11, 13, 15, 17], [1, 5, 7, 11, 13, 15, 17, 19], [1, 5, 7, 9], [1, 5, 7, 9, 19], [1, 5, 7, 9, 17], [1, 5, 7, 9, 17, 19], [1, 5, 7, 9, 15], [1, 5, 7, 9, 15, 19], [1, 5, 7, 9, 15, 17], [1, 5, 7, 9, 15, 17, 19], [1, 5, 7, 9, 13], [1, 5, 7, 9, 13, 19], [1, 5, 7, 9, 13, 17], [1, 5, 7, 9, 13, 17, 19], [1, 5, 7, 9, 13, 15], [1, 5, 7, 9, 13, 15, 19], [1, 5, 7, 9, 13, 15, 17], [1, 5, 7, 9, 13, 15, 17, 19], [1, 5, 7, 9, 11], [1, 5, 7, 9, 11, 19], [1, 5, 7, 9, 11, 17], [1, 5, 7, 9, 11, 17, 19], [1, 5, 7, 9, 11, 15], [1, 5, 7, 9, 11, 15, 19], [1, 5, 7, 9, 11, 15, 17], [1, 5, 7, 9, 11, 15, 17, 19], [1, 5, 7, 9, 11, 13], [1, 5, 7, 9, 11, 13, 19], [1, 5, 7, 9, 11, 13, 17], [1, 5, 7, 9, 11, 13, 17, 19], [1, 5, 7, 9, 11, 13, 15], [1, 5, 7, 9, 11, 13, 15, 19], [1, 5, 7, 9, 11, 13, 15, 17], [1, 5, 7, 9, 11, 13, 15, 17, 19], [1, 3], [1, 3, 19], [1, 3, 17], [1, 3, 17, 19], [1, 3, 15], [1, 3, 15, 19], [1, 3, 15, 17], [1, 3, 15, 17, 19], [1, 3, 13], [1, 3, 13, 19], [1, 3, 13, 17], [1, 3, 13, 17, 19], [1, 3, 13, 15], [1, 3, 13, 15, 19], [1, 3, 13, 15, 17], [1, 3, 13, 15, 17, 19], [1, 3, 11], [1, 3, 11, 19], [1, 3, 11, 17], [1, 3, 11, 17, 19], [1, 3, 11, 15], [1, 3, 11, 15, 19], [1, 3, 11, 15, 17], [1, 3, 11, 15, 17, 19], [1, 3, 11, 13], [1, 3, 11, 13, 19], [1, 3, 11, 13, 17], [1, 3, 11, 13, 17, 19], [1, 3, 11, 13, 15], [1, 3, 11, 13, 15, 19], [1, 3, 11, 13, 15, 17], [1, 3, 11, 13, 15, 17, 19], [1, 3, 9], [1, 3, 9, 19], [1, 3, 9, 17], [1, 3, 9, 17, 19], [1, 3, 9, 15], [1, 3, 9, 15, 19], [1, 3, 9, 15, 17], [1, 3, 9, 15, 17, 19], [1, 3, 9, 13], [1, 3, 9, 13, 19], [1, 3, 9, 13, 17], [1, 3, 9, 13, 17, 19], [1, 3, 9, 13, 15], [1, 3, 9, 13, 15, 19], [1, 3, 9, 13, 15, 17], [1, 3, 9, 13, 15, 17, 19], [1, 3, 9, 11], [1, 3, 9, 11, 19], [1, 3, 9, 11, 17], [1, 3, 9, 11, 17, 19], [1, 3, 9, 11, 15], [1, 3, 9, 11, 15, 19], [1, 3, 9, 11, 15, 17], [1, 3, 9, 11, 15, 17, 19], [1, 3, 9, 11, 13], [1, 3, 9, 11, 13, 19], [1, 3, 9, 11, 13, 17], [1, 3, 9, 11, 13, 17, 19], [1, 3, 9, 11, 13, 15], [1, 3, 9, 11, 13, 15, 19], [1, 3, 9, 11, 13, 15, 17], [1, 3, 9, 11, 13, 15, 17, 19], [1, 3, 7], [1, 3, 7, 19], [1, 3, 7, 17], [1, 3, 7, 17, 19], [1, 3, 7, 15], [1, 3, 7, 15, 19], [1, 3, 7, 15, 17], [1, 3, 7, 15, 17, 19], [1, 3, 7, 13], [1, 3, 7, 13, 19], [1, 3, 7, 13, 17], [1, 3, 7, 13, 17, 19], [1, 3, 7, 13, 15], [1, 3, 7, 13, 15, 19], [1, 3, 7, 13, 15, 17], [1, 3, 7, 13, 15, 17, 19], [1, 3, 7, 11], [1, 3, 7, 11, 19], [1, 3, 7, 11, 17], [1, 3, 7, 11, 17, 19], [1, 3, 7, 11, 15], [1, 3, 7, 11, 15, 19], [1, 3, 7, 11, 15, 17], [1, 3, 7, 11, 15, 17, 19], [1, 3, 7, 11, 13], [1, 3, 7, 11, 13, 19], [1, 3, 7, 11, 13, 17], [1, 3, 7, 11, 13, 17, 19], [1, 3, 7, 11, 13, 15], [1, 3, 7, 11, 13, 15, 19], [1, 3, 7, 11, 13, 15, 17], [1, 3, 7, 11, 13, 15, 17, 19], [1, 3, 7, 9], [1, 3, 7, 9, 19], [1, 3, 7, 9, 17], [1, 3, 7, 9, 17, 19], [1, 3, 7, 9, 15], [1, 3, 7, 9, 15, 19], [1, 3, 7, 9, 15, 17], [1, 3, 7, 9, 15, 17, 19], [1, 3, 7, 9, 13], [1, 3, 7, 9, 13, 19], [1, 3, 7, 9, 13, 17], [1, 3, 7, 9, 13, 17, 19], [1, 3, 7, 9, 13, 15], [1, 3, 7, 9, 13, 15, 19], [1, 3, 7, 9, 13, 15, 17], [1, 3, 7, 9, 13, 15, 17, 19], [1, 3, 7, 9, 11], [1, 3, 7, 9, 11, 19], [1, 3, 7, 9, 11, 17], [1, 3, 7, 9, 11, 17, 19], [1, 3, 7, 9, 11, 15], [1, 3, 7, 9, 11, 15, 19], [1, 3, 7, 9, 11, 15, 17], [1, 3, 7, 9, 11, 15, 17, 19], [1, 3, 7, 9, 11, 13], [1, 3, 7, 9, 11, 13, 19], [1, 3, 7, 9, 11, 13, 17], [1, 3, 7, 9, 11, 13, 17, 19], [1, 3, 7, 9, 11, 13, 15], [1, 3, 7, 9, 11, 13, 15, 19], [1, 3, 7, 9, 11, 13, 15, 17], [1, 3, 7, 9, 11, 13, 15, 17, 19], [1, 3, 5], [1, 3, 5, 19], [1, 3, 5, 17], [1, 3, 5, 17, 19], [1, 3, 5, 15], [1, 3, 5, 15, 19], [1, 3, 5, 15, 17], [1, 3, 5, 15, 17, 19], [1, 3, 5, 13], [1, 3, 5, 13, 19], [1, 3, 5, 13, 17], [1, 3, 5, 13, 17, 19], [1, 3, 5, 13, 15], [1, 3, 5, 13, 15, 19], [1, 3, 5, 13, 15, 17], [1, 3, 5, 13, 15, 17, 19], [1, 3, 5, 11], [1, 3, 5, 11, 19], [1, 3, 5, 11, 17], [1, 3, 5, 11, 17, 19], [1, 3, 5, 11, 15], [1, 3, 5, 11, 15, 19], [1, 3, 5, 11, 15, 17], [1, 3, 5, 11, 15, 17, 19], [1, 3, 5, 11, 13], [1, 3, 5, 11, 13, 19], [1, 3, 5, 11, 13, 17], [1, 3, 5, 11, 13, 17, 19], [1, 3, 5, 11, 13, 15], [1, 3, 5, 11, 13, 15, 19], [1, 3, 5, 11, 13, 15, 17], [1, 3, 5, 11, 13, 15, 17, 19], [1, 3, 5, 9], [1, 3, 5, 9, 19], [1, 3, 5, 9, 17], [1, 3, 5, 9, 17, 19], [1, 3, 5, 9, 15], [1, 3, 5, 9, 15, 19], [1, 3, 5, 9, 15, 17], [1, 3, 5, 9, 15, 17, 19], [1, 3, 5, 9, 13], [1, 3, 5, 9, 13, 19], [1, 3, 5, 9, 13, 17], [1, 3, 5, 9, 13, 17, 19], [1, 3, 5, 9, 13, 15], [1, 3, 5, 9, 13, 15, 19], [1, 3, 5, 9, 13, 15, 17], [1, 3, 5, 9, 13, 15, 17, 19], [1, 3, 5, 9, 11], [1, 3, 5, 9, 11, 19], [1, 3, 5, 9, 11, 17], [1, 3, 5, 9, 11, 17, 19], [1, 3, 5, 9, 11, 15], [1, 3, 5, 9, 11, 15, 19], [1, 3, 5, 9, 11, 15, 17], [1, 3, 5, 9, 11, 15, 17, 19], [1, 3, 5, 9, 11, 13], [1, 3, 5, 9, 11, 13, 19], [1, 3, 5, 9, 11, 13, 17], [1, 3, 5, 9, 11, 13, 17, 19], [1, 3, 5, 9, 11, 13, 15], [1, 3, 5, 9, 11, 13, 15, 19], [1, 3, 5, 9, 11, 13, 15, 17], [1, 3, 5, 9, 11, 13, 15, 17, 19], [1, 3, 5, 7], [1, 3, 5, 7, 19], [1, 3, 5, 7, 17], [1, 3, 5, 7, 17, 19], [1, 3, 5, 7, 15], [1, 3, 5, 7, 15, 19], [1, 3, 5, 7, 15, 17], [1, 3, 5, 7, 15, 17, 19], [1, 3, 5, 7, 13], [1, 3, 5, 7, 13, 19], [1, 3, 5, 7, 13, 17], [1, 3, 5, 7, 13, 17, 19], [1, 3, 5, 7, 13, 15], [1, 3, 5, 7, 13, 15, 19], [1, 3, 5, 7, 13, 15, 17], [1, 3, 5, 7, 13, 15, 17, 19], [1, 3, 5, 7, 11], [1, 3, 5, 7, 11, 19], [1, 3, 5, 7, 11, 17], [1, 3, 5, 7, 11, 17, 19], [1, 3, 5, 7, 11, 15], [1, 3, 5, 7, 11, 15, 19], [1, 3, 5, 7, 11, 15, 17], [1, 3, 5, 7, 11, 15, 17, 19], [1, 3, 5, 7, 11, 13], [1, 3, 5, 7, 11, 13, 19], [1, 3, 5, 7, 11, 13, 17], [1, 3, 5, 7, 11, 13, 17, 19], [1, 3, 5, 7, 11, 13, 15], [1, 3, 5, 7, 11, 13, 15, 19], [1, 3, 5, 7, 11, 13, 15, 17], [1, 3, 5, 7, 11, 13, 15, 17, 19], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9, 19], [1, 3, 5, 7, 9, 17], [1, 3, 5, 7, 9, 17, 19], [1, 3, 5, 7, 9, 15], [1, 3, 5, 7, 9, 15, 19], [1, 3, 5, 7, 9, 15, 17], [1, 3, 5, 7, 9, 15, 17, 19], [1, 3, 5, 7, 9, 13], [1, 3, 5, 7, 9, 13, 19], [1, 3, 5, 7, 9, 13, 17], [1, 3, 5, 7, 9, 13, 17, 19], [1, 3, 5, 7, 9, 13, 15], [1, 3, 5, 7, 9, 13, 15, 19], [1, 3, 5, 7, 9, 13, 15, 17], [1, 3, 5, 7, 9, 13, 15, 17, 19], [1, 3, 5, 7, 9, 11], [1, 3, 5, 7, 9, 11, 19], [1, 3, 5, 7, 9, 11, 17], [1, 3, 5, 7, 9, 11, 17, 19], [1, 3, 5, 7, 9, 11, 15], [1, 3, 5, 7, 9, 11, 15, 19], [1, 3, 5, 7, 9, 11, 15, 17], [1, 3, 5, 7, 9, 11, 15, 17, 19], [1, 3, 5, 7, 9, 11, 13], [1, 3, 5, 7, 9, 11, 13, 19], [1, 3, 5, 7, 9, 11, 13, 17], [1, 3, 5, 7, 9, 11, 13, 17, 19], [1, 3, 5, 7, 9, 11, 13, 15], [1, 3, 5, 7, 9, 11, 13, 15, 19], [1, 3, 5, 7, 9, 11, 13, 15, 17], [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]]"
      },
      {
        "input": "nums = [7, 14, 28, 56, 112]",
        "output": "[[], [112], [56], [56, 112], [28], [28, 112], [28, 56], [28, 56, 112], [14], [14, 112], [14, 56], [14, 56, 112], [14, 28], [14, 28, 112], [14, 28, 56], [14, 28, 56, 112], [7], [7, 112], [7, 56], [7, 56, 112], [7, 28], [7, 28, 112], [7, 28, 56], [7, 28, 56, 112], [7, 14], [7, 14, 112], [7, 14, 56], [7, 14, 56, 112], [7, 14, 28], [7, 14, 28, 112], [7, 14, 28, 56], [7, 14, 28, 56, 112]]"
      },
      {
        "input": "nums = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8]",
        "output": "[[], [8], [6], [6, 8], [4], [4, 8], [4, 6], [4, 6, 8], [2], [2, 8], [2, 6], [2, 6, 8], [2, 4], [2, 4, 8], [2, 4, 6], [2, 4, 6, 8], [0], [0, 8], [0, 6], [0, 6, 8], [0, 4], [0, 4, 8], [0, 4, 6], [0, 4, 6, 8], [0, 2], [0, 2, 8], [0, 2, 6], [0, 2, 6, 8], [0, 2, 4], [0, 2, 4, 8], [0, 2, 4, 6], [0, 2, 4, 6, 8], [-2], [-2, 8], [-2, 6], [-2, 6, 8], [-2, 4], [-2, 4, 8], [-2, 4, 6], [-2, 4, 6, 8], [-2, 2], [-2, 2, 8], [-2, 2, 6], [-2, 2, 6, 8], [-2, 2, 4], [-2, 2, 4, 8], [-2, 2, 4, 6], [-2, 2, 4, 6, 8], [-2, 0], [-2, 0, 8], [-2, 0, 6], [-2, 0, 6, 8], [-2, 0, 4], [-2, 0, 4, 8], [-2, 0, 4, 6], [-2, 0, 4, 6, 8], [-2, 0, 2], [-2, 0, 2, 8], [-2, 0, 2, 6], [-2, 0, 2, 6, 8], [-2, 0, 2, 4], [-2, 0, 2, 4, 8], [-2, 0, 2, 4, 6], [-2, 0, 2, 4, 6, 8], [-4], [-4, 8], [-4, 6], [-4, 6, 8], [-4, 4], [-4, 4, 8], [-4, 4, 6], [-4, 4, 6, 8], [-4, 2], [-4, 2, 8], [-4, 2, 6], [-4, 2, 6, 8], [-4, 2, 4], [-4, 2, 4, 8], [-4, 2, 4, 6], [-4, 2, 4, 6, 8], [-4, 0], [-4, 0, 8], [-4, 0, 6], [-4, 0, 6, 8], [-4, 0, 4], [-4, 0, 4, 8], [-4, 0, 4, 6], [-4, 0, 4, 6, 8], [-4, 0, 2], [-4, 0, 2, 8], [-4, 0, 2, 6], [-4, 0, 2, 6, 8], [-4, 0, 2, 4], [-4, 0, 2, 4, 8], [-4, 0, 2, 4, 6], [-4, 0, 2, 4, 6, 8], [-4, -2], [-4, -2, 8], [-4, -2, 6], [-4, -2, 6, 8], [-4, -2, 4], [-4, -2, 4, 8], [-4, -2, 4, 6], [-4, -2, 4, 6, 8], [-4, -2, 2], [-4, -2, 2, 8], [-4, -2, 2, 6], [-4, -2, 2, 6, 8], [-4, -2, 2, 4], [-4, -2, 2, 4, 8], [-4, -2, 2, 4, 6], [-4, -2, 2, 4, 6, 8], [-4, -2, 0], [-4, -2, 0, 8], [-4, -2, 0, 6], [-4, -2, 0, 6, 8], [-4, -2, 0, 4], [-4, -2, 0, 4, 8], [-4, -2, 0, 4, 6], [-4, -2, 0, 4, 6, 8], [-4, -2, 0, 2], [-4, -2, 0, 2, 8], [-4, -2, 0, 2, 6], [-4, -2, 0, 2, 6, 8], [-4, -2, 0, 2, 4], [-4, -2, 0, 2, 4, 8], [-4, -2, 0, 2, 4, 6], [-4, -2, 0, 2, 4, 6, 8], [-6], [-6, 8], [-6, 6], [-6, 6, 8], [-6, 4], [-6, 4, 8], [-6, 4, 6], [-6, 4, 6, 8], [-6, 2], [-6, 2, 8], [-6, 2, 6], [-6, 2, 6, 8], [-6, 2, 4], [-6, 2, 4, 8], [-6, 2, 4, 6], [-6, 2, 4, 6, 8], [-6, 0], [-6, 0, 8], [-6, 0, 6], [-6, 0, 6, 8], [-6, 0, 4], [-6, 0, 4, 8], [-6, 0, 4, 6], [-6, 0, 4, 6, 8], [-6, 0, 2], [-6, 0, 2, 8], [-6, 0, 2, 6], [-6, 0, 2, 6, 8], [-6, 0, 2, 4], [-6, 0, 2, 4, 8], [-6, 0, 2, 4, 6], [-6, 0, 2, 4, 6, 8], [-6, -2], [-6, -2, 8], [-6, -2, 6], [-6, -2, 6, 8], [-6, -2, 4], [-6, -2, 4, 8], [-6, -2, 4, 6], [-6, -2, 4, 6, 8], [-6, -2, 2], [-6, -2, 2, 8], [-6, -2, 2, 6], [-6, -2, 2, 6, 8], [-6, -2, 2, 4], [-6, -2, 2, 4, 8], [-6, -2, 2, 4, 6], [-6, -2, 2, 4, 6, 8], [-6, -2, 0], [-6, -2, 0, 8], [-6, -2, 0, 6], [-6, -2, 0, 6, 8], [-6, -2, 0, 4], [-6, -2, 0, 4, 8], [-6, -2, 0, 4, 6], [-6, -2, 0, 4, 6, 8], [-6, -2, 0, 2], [-6, -2, 0, 2, 8], [-6, -2, 0, 2, 6], [-6, -2, 0, 2, 6, 8], [-6, -2, 0, 2, 4], [-6, -2, 0, 2, 4, 8], [-6, -2, 0, 2, 4, 6], [-6, -2, 0, 2, 4, 6, 8], [-6, -4], [-6, -4, 8], [-6, -4, 6], [-6, -4, 6, 8], [-6, -4, 4], [-6, -4, 4, 8], [-6, -4, 4, 6], [-6, -4, 4, 6, 8], [-6, -4, 2], [-6, -4, 2, 8], [-6, -4, 2, 6], [-6, -4, 2, 6, 8], [-6, -4, 2, 4], [-6, -4, 2, 4, 8], [-6, -4, 2, 4, 6], [-6, -4, 2, 4, 6, 8], [-6, -4, 0], [-6, -4, 0, 8], [-6, -4, 0, 6], [-6, -4, 0, 6, 8], [-6, -4, 0, 4], [-6, -4, 0, 4, 8], [-6, -4, 0, 4, 6], [-6, -4, 0, 4, 6, 8], [-6, -4, 0, 2], [-6, -4, 0, 2, 8], [-6, -4, 0, 2, 6], [-6, -4, 0, 2, 6, 8], [-6, -4, 0, 2, 4], [-6, -4, 0, 2, 4, 8], [-6, -4, 0, 2, 4, 6], [-6, -4, 0, 2, 4, 6, 8], [-6, -4, -2], [-6, -4, -2, 8], [-6, -4, -2, 6], [-6, -4, -2, 6, 8], [-6, -4, -2, 4], [-6, -4, -2, 4, 8], [-6, -4, -2, 4, 6], [-6, -4, -2, 4, 6, 8], [-6, -4, -2, 2], [-6, -4, -2, 2, 8], [-6, -4, -2, 2, 6], [-6, -4, -2, 2, 6, 8], [-6, -4, -2, 2, 4], [-6, -4, -2, 2, 4, 8], [-6, -4, -2, 2, 4, 6], [-6, -4, -2, 2, 4, 6, 8], [-6, -4, -2, 0], [-6, -4, -2, 0, 8], [-6, -4, -2, 0, 6], [-6, -4, -2, 0, 6, 8], [-6, -4, -2, 0, 4], [-6, -4, -2, 0, 4, 8], [-6, -4, -2, 0, 4, 6], [-6, -4, -2, 0, 4, 6, 8], [-6, -4, -2, 0, 2], [-6, -4, -2, 0, 2, 8], [-6, -4, -2, 0, 2, 6], [-6, -4, -2, 0, 2, 6, 8], [-6, -4, -2, 0, 2, 4], [-6, -4, -2, 0, 2, 4, 8], [-6, -4, -2, 0, 2, 4, 6], [-6, -4, -2, 0, 2, 4, 6, 8], [-8], [-8, 8], [-8, 6], [-8, 6, 8], [-8, 4], [-8, 4, 8], [-8, 4, 6], [-8, 4, 6, 8], [-8, 2], [-8, 2, 8], [-8, 2, 6], [-8, 2, 6, 8], [-8, 2, 4], [-8, 2, 4, 8], [-8, 2, 4, 6], [-8, 2, 4, 6, 8], [-8, 0], [-8, 0, 8], [-8, 0, 6], [-8, 0, 6, 8], [-8, 0, 4], [-8, 0, 4, 8], [-8, 0, 4, 6], [-8, 0, 4, 6, 8], [-8, 0, 2], [-8, 0, 2, 8], [-8, 0, 2, 6], [-8, 0, 2, 6, 8], [-8, 0, 2, 4], [-8, 0, 2, 4, 8], [-8, 0, 2, 4, 6], [-8, 0, 2, 4, 6, 8], [-8, -2], [-8, -2, 8], [-8, -2, 6], [-8, -2, 6, 8], [-8, -2, 4], [-8, -2, 4, 8], [-8, -2, 4, 6], [-8, -2, 4, 6, 8], [-8, -2, 2], [-8, -2, 2, 8], [-8, -2, 2, 6], [-8, -2, 2, 6, 8], [-8, -2, 2, 4], [-8, -2, 2, 4, 8], [-8, -2, 2, 4, 6], [-8, -2, 2, 4, 6, 8], [-8, -2, 0], [-8, -2, 0, 8], [-8, -2, 0, 6], [-8, -2, 0, 6, 8], [-8, -2, 0, 4], [-8, -2, 0, 4, 8], [-8, -2, 0, 4, 6], [-8, -2, 0, 4, 6, 8], [-8, -2, 0, 2], [-8, -2, 0, 2, 8], [-8, -2, 0, 2, 6], [-8, -2, 0, 2, 6, 8], [-8, -2, 0, 2, 4], [-8, -2, 0, 2, 4, 8], [-8, -2, 0, 2, 4, 6], [-8, -2, 0, 2, 4, 6, 8], [-8, -4], [-8, -4, 8], [-8, -4, 6], [-8, -4, 6, 8], [-8, -4, 4], [-8, -4, 4, 8], [-8, -4, 4, 6], [-8, -4, 4, 6, 8], [-8, -4, 2], [-8, -4, 2, 8], [-8, -4, 2, 6], [-8, -4, 2, 6, 8], [-8, -4, 2, 4], [-8, -4, 2, 4, 8], [-8, -4, 2, 4, 6], [-8, -4, 2, 4, 6, 8], [-8, -4, 0], [-8, -4, 0, 8], [-8, -4, 0, 6], [-8, -4, 0, 6, 8], [-8, -4, 0, 4], [-8, -4, 0, 4, 8], [-8, -4, 0, 4, 6], [-8, -4, 0, 4, 6, 8], [-8, -4, 0, 2], [-8, -4, 0, 2, 8], [-8, -4, 0, 2, 6], [-8, -4, 0, 2, 6, 8], [-8, -4, 0, 2, 4], [-8, -4, 0, 2, 4, 8], [-8, -4, 0, 2, 4, 6], [-8, -4, 0, 2, 4, 6, 8], [-8, -4, -2], [-8, -4, -2, 8], [-8, -4, -2, 6], [-8, -4, -2, 6, 8], [-8, -4, -2, 4], [-8, -4, -2, 4, 8], [-8, -4, -2, 4, 6], [-8, -4, -2, 4, 6, 8], [-8, -4, -2, 2], [-8, -4, -2, 2, 8], [-8, -4, -2, 2, 6], [-8, -4, -2, 2, 6, 8], [-8, -4, -2, 2, 4], [-8, -4, -2, 2, 4, 8], [-8, -4, -2, 2, 4, 6], [-8, -4, -2, 2, 4, 6, 8], [-8, -4, -2, 0], [-8, -4, -2, 0, 8], [-8, -4, -2, 0, 6], [-8, -4, -2, 0, 6, 8], [-8, -4, -2, 0, 4], [-8, -4, -2, 0, 4, 8], [-8, -4, -2, 0, 4, 6], [-8, -4, -2, 0, 4, 6, 8], [-8, -4, -2, 0, 2], [-8, -4, -2, 0, 2, 8], [-8, -4, -2, 0, 2, 6], [-8, -4, -2, 0, 2, 6, 8], [-8, -4, -2, 0, 2, 4], [-8, -4, -2, 0, 2, 4, 8], [-8, -4, -2, 0, 2, 4, 6], [-8, -4, -2, 0, 2, 4, 6, 8], [-8, -6], [-8, -6, 8], [-8, -6, 6], [-8, -6, 6, 8], [-8, -6, 4], [-8, -6, 4, 8], [-8, -6, 4, 6], [-8, -6, 4, 6, 8], [-8, -6, 2], [-8, -6, 2, 8], [-8, -6, 2, 6], [-8, -6, 2, 6, 8], [-8, -6, 2, 4], [-8, -6, 2, 4, 8], [-8, -6, 2, 4, 6], [-8, -6, 2, 4, 6, 8], [-8, -6, 0], [-8, -6, 0, 8], [-8, -6, 0, 6], [-8, -6, 0, 6, 8], [-8, -6, 0, 4], [-8, -6, 0, 4, 8], [-8, -6, 0, 4, 6], [-8, -6, 0, 4, 6, 8], [-8, -6, 0, 2], [-8, -6, 0, 2, 8], [-8, -6, 0, 2, 6], [-8, -6, 0, 2, 6, 8], [-8, -6, 0, 2, 4], [-8, -6, 0, 2, 4, 8], [-8, -6, 0, 2, 4, 6], [-8, -6, 0, 2, 4, 6, 8], [-8, -6, -2], [-8, -6, -2, 8], [-8, -6, -2, 6], [-8, -6, -2, 6, 8], [-8, -6, -2, 4], [-8, -6, -2, 4, 8], [-8, -6, -2, 4, 6], [-8, -6, -2, 4, 6, 8], [-8, -6, -2, 2], [-8, -6, -2, 2, 8], [-8, -6, -2, 2, 6], [-8, -6, -2, 2, 6, 8], [-8, -6, -2, 2, 4], [-8, -6, -2, 2, 4, 8], [-8, -6, -2, 2, 4, 6], [-8, -6, -2, 2, 4, 6, 8], [-8, -6, -2, 0], [-8, -6, -2, 0, 8], [-8, -6, -2, 0, 6], [-8, -6, -2, 0, 6, 8], [-8, -6, -2, 0, 4], [-8, -6, -2, 0, 4, 8], [-8, -6, -2, 0, 4, 6], [-8, -6, -2, 0, 4, 6, 8], [-8, -6, -2, 0, 2], [-8, -6, -2, 0, 2, 8], [-8, -6, -2, 0, 2, 6], [-8, -6, -2, 0, 2, 6, 8], [-8, -6, -2, 0, 2, 4], [-8, -6, -2, 0, 2, 4, 8], [-8, -6, -2, 0, 2, 4, 6], [-8, -6, -2, 0, 2, 4, 6, 8], [-8, -6, -4], [-8, -6, -4, 8], [-8, -6, -4, 6], [-8, -6, -4, 6, 8], [-8, -6, -4, 4], [-8, -6, -4, 4, 8], [-8, -6, -4, 4, 6], [-8, -6, -4, 4, 6, 8], [-8, -6, -4, 2], [-8, -6, -4, 2, 8], [-8, -6, -4, 2, 6], [-8, -6, -4, 2, 6, 8], [-8, -6, -4, 2, 4], [-8, -6, -4, 2, 4, 8], [-8, -6, -4, 2, 4, 6], [-8, -6, -4, 2, 4, 6, 8], [-8, -6, -4, 0], [-8, -6, -4, 0, 8], [-8, -6, -4, 0, 6], [-8, -6, -4, 0, 6, 8], [-8, -6, -4, 0, 4], [-8, -6, -4, 0, 4, 8], [-8, -6, -4, 0, 4, 6], [-8, -6, -4, 0, 4, 6, 8], [-8, -6, -4, 0, 2], [-8, -6, -4, 0, 2, 8], [-8, -6, -4, 0, 2, 6], [-8, -6, -4, 0, 2, 6, 8], [-8, -6, -4, 0, 2, 4], [-8, -6, -4, 0, 2, 4, 8], [-8, -6, -4, 0, 2, 4, 6], [-8, -6, -4, 0, 2, 4, 6, 8], [-8, -6, -4, -2], [-8, -6, -4, -2, 8], [-8, -6, -4, -2, 6], [-8, -6, -4, -2, 6, 8], [-8, -6, -4, -2, 4], [-8, -6, -4, -2, 4, 8], [-8, -6, -4, -2, 4, 6], [-8, -6, -4, -2, 4, 6, 8], [-8, -6, -4, -2, 2], [-8, -6, -4, -2, 2, 8], [-8, -6, -4, -2, 2, 6], [-8, -6, -4, -2, 2, 6, 8], [-8, -6, -4, -2, 2, 4], [-8, -6, -4, -2, 2, 4, 8], [-8, -6, -4, -2, 2, 4, 6], [-8, -6, -4, -2, 2, 4, 6, 8], [-8, -6, -4, -2, 0], [-8, -6, -4, -2, 0, 8], [-8, -6, -4, -2, 0, 6], [-8, -6, -4, -2, 0, 6, 8], [-8, -6, -4, -2, 0, 4], [-8, -6, -4, -2, 0, 4, 8], [-8, -6, -4, -2, 0, 4, 6], [-8, -6, -4, -2, 0, 4, 6, 8], [-8, -6, -4, -2, 0, 2], [-8, -6, -4, -2, 0, 2, 8], [-8, -6, -4, -2, 0, 2, 6], [-8, -6, -4, -2, 0, 2, 6, 8], [-8, -6, -4, -2, 0, 2, 4], [-8, -6, -4, -2, 0, 2, 4, 8], [-8, -6, -4, -2, 0, 2, 4, 6], [-8, -6, -4, -2, 0, 2, 4, 6, 8], [-10], [-10, 8], [-10, 6], [-10, 6, 8], [-10, 4], [-10, 4, 8], [-10, 4, 6], [-10, 4, 6, 8], [-10, 2], [-10, 2, 8], [-10, 2, 6], [-10, 2, 6, 8], [-10, 2, 4], [-10, 2, 4, 8], [-10, 2, 4, 6], [-10, 2, 4, 6, 8], [-10, 0], [-10, 0, 8], [-10, 0, 6], [-10, 0, 6, 8], [-10, 0, 4], [-10, 0, 4, 8], [-10, 0, 4, 6], [-10, 0, 4, 6, 8], [-10, 0, 2], [-10, 0, 2, 8], [-10, 0, 2, 6], [-10, 0, 2, 6, 8], [-10, 0, 2, 4], [-10, 0, 2, 4, 8], [-10, 0, 2, 4, 6], [-10, 0, 2, 4, 6, 8], [-10, -2], [-10, -2, 8], [-10, -2, 6], [-10, -2, 6, 8], [-10, -2, 4], [-10, -2, 4, 8], [-10, -2, 4, 6], [-10, -2, 4, 6, 8], [-10, -2, 2], [-10, -2, 2, 8], [-10, -2, 2, 6], [-10, -2, 2, 6, 8], [-10, -2, 2, 4], [-10, -2, 2, 4, 8], [-10, -2, 2, 4, 6], [-10, -2, 2, 4, 6, 8], [-10, -2, 0], [-10, -2, 0, 8], [-10, -2, 0, 6], [-10, -2, 0, 6, 8], [-10, -2, 0, 4], [-10, -2, 0, 4, 8], [-10, -2, 0, 4, 6], [-10, -2, 0, 4, 6, 8], [-10, -2, 0, 2], [-10, -2, 0, 2, 8], [-10, -2, 0, 2, 6], [-10, -2, 0, 2, 6, 8], [-10, -2, 0, 2, 4], [-10, -2, 0, 2, 4, 8], [-10, -2, 0, 2, 4, 6], [-10, -2, 0, 2, 4, 6, 8], [-10, -4], [-10, -4, 8], [-10, -4, 6], [-10, -4, 6, 8], [-10, -4, 4], [-10, -4, 4, 8], [-10, -4, 4, 6], [-10, -4, 4, 6, 8], [-10, -4, 2], [-10, -4, 2, 8], [-10, -4, 2, 6], [-10, -4, 2, 6, 8], [-10, -4, 2, 4], [-10, -4, 2, 4, 8], [-10, -4, 2, 4, 6], [-10, -4, 2, 4, 6, 8], [-10, -4, 0], [-10, -4, 0, 8], [-10, -4, 0, 6], [-10, -4, 0, 6, 8], [-10, -4, 0, 4], [-10, -4, 0, 4, 8], [-10, -4, 0, 4, 6], [-10, -4, 0, 4, 6, 8], [-10, -4, 0, 2], [-10, -4, 0, 2, 8], [-10, -4, 0, 2, 6], [-10, -4, 0, 2, 6, 8], [-10, -4, 0, 2, 4], [-10, -4, 0, 2, 4, 8], [-10, -4, 0, 2, 4, 6], [-10, -4, 0, 2, 4, 6, 8], [-10, -4, -2], [-10, -4, -2, 8], [-10, -4, -2, 6], [-10, -4, -2, 6, 8], [-10, -4, -2, 4], [-10, -4, -2, 4, 8], [-10, -4, -2, 4, 6], [-10, -4, -2, 4, 6, 8], [-10, -4, -2, 2], [-10, -4, -2, 2, 8], [-10, -4, -2, 2, 6], [-10, -4, -2, 2, 6, 8], [-10, -4, -2, 2, 4], [-10, -4, -2, 2, 4, 8], [-10, -4, -2, 2, 4, 6], [-10, -4, -2, 2, 4, 6, 8], [-10, -4, -2, 0], [-10, -4, -2, 0, 8], [-10, -4, -2, 0, 6], [-10, -4, -2, 0, 6, 8], [-10, -4, -2, 0, 4], [-10, -4, -2, 0, 4, 8], [-10, -4, -2, 0, 4, 6], [-10, -4, -2, 0, 4, 6, 8], [-10, -4, -2, 0, 2], [-10, -4, -2, 0, 2, 8], [-10, -4, -2, 0, 2, 6], [-10, -4, -2, 0, 2, 6, 8], [-10, -4, -2, 0, 2, 4], [-10, -4, -2, 0, 2, 4, 8], [-10, -4, -2, 0, 2, 4, 6], [-10, -4, -2, 0, 2, 4, 6, 8], [-10, -6], [-10, -6, 8], [-10, -6, 6], [-10, -6, 6, 8], [-10, -6, 4], [-10, -6, 4, 8], [-10, -6, 4, 6], [-10, -6, 4, 6, 8], [-10, -6, 2], [-10, -6, 2, 8], [-10, -6, 2, 6], [-10, -6, 2, 6, 8], [-10, -6, 2, 4], [-10, -6, 2, 4, 8], [-10, -6, 2, 4, 6], [-10, -6, 2, 4, 6, 8], [-10, -6, 0], [-10, -6, 0, 8], [-10, -6, 0, 6], [-10, -6, 0, 6, 8], [-10, -6, 0, 4], [-10, -6, 0, 4, 8], [-10, -6, 0, 4, 6], [-10, -6, 0, 4, 6, 8], [-10, -6, 0, 2], [-10, -6, 0, 2, 8], [-10, -6, 0, 2, 6], [-10, -6, 0, 2, 6, 8], [-10, -6, 0, 2, 4], [-10, -6, 0, 2, 4, 8], [-10, -6, 0, 2, 4, 6], [-10, -6, 0, 2, 4, 6, 8], [-10, -6, -2], [-10, -6, -2, 8], [-10, -6, -2, 6], [-10, -6, -2, 6, 8], [-10, -6, -2, 4], [-10, -6, -2, 4, 8], [-10, -6, -2, 4, 6], [-10, -6, -2, 4, 6, 8], [-10, -6, -2, 2], [-10, -6, -2, 2, 8], [-10, -6, -2, 2, 6], [-10, -6, -2, 2, 6, 8], [-10, -6, -2, 2, 4], [-10, -6, -2, 2, 4, 8], [-10, -6, -2, 2, 4, 6], [-10, -6, -2, 2, 4, 6, 8], [-10, -6, -2, 0], [-10, -6, -2, 0, 8], [-10, -6, -2, 0, 6], [-10, -6, -2, 0, 6, 8], [-10, -6, -2, 0, 4], [-10, -6, -2, 0, 4, 8], [-10, -6, -2, 0, 4, 6], [-10, -6, -2, 0, 4, 6, 8], [-10, -6, -2, 0, 2], [-10, -6, -2, 0, 2, 8], [-10, -6, -2, 0, 2, 6], [-10, -6, -2, 0, 2, 6, 8], [-10, -6, -2, 0, 2, 4], [-10, -6, -2, 0, 2, 4, 8], [-10, -6, -2, 0, 2, 4, 6], [-10, -6, -2, 0, 2, 4, 6, 8], [-10, -6, -4], [-10, -6, -4, 8], [-10, -6, -4, 6], [-10, -6, -4, 6, 8], [-10, -6, -4, 4], [-10, -6, -4, 4, 8], [-10, -6, -4, 4, 6], [-10, -6, -4, 4, 6, 8], [-10, -6, -4, 2], [-10, -6, -4, 2, 8], [-10, -6, -4, 2, 6], [-10, -6, -4, 2, 6, 8], [-10, -6, -4, 2, 4], [-10, -6, -4, 2, 4, 8], [-10, -6, -4, 2, 4, 6], [-10, -6, -4, 2, 4, 6, 8], [-10, -6, -4, 0], [-10, -6, -4, 0, 8], [-10, -6, -4, 0, 6], [-10, -6, -4, 0, 6, 8], [-10, -6, -4, 0, 4], [-10, -6, -4, 0, 4, 8], [-10, -6, -4, 0, 4, 6], [-10, -6, -4, 0, 4, 6, 8], [-10, -6, -4, 0, 2], [-10, -6, -4, 0, 2, 8], [-10, -6, -4, 0, 2, 6], [-10, -6, -4, 0, 2, 6, 8], [-10, -6, -4, 0, 2, 4], [-10, -6, -4, 0, 2, 4, 8], [-10, -6, -4, 0, 2, 4, 6], [-10, -6, -4, 0, 2, 4, 6, 8], [-10, -6, -4, -2], [-10, -6, -4, -2, 8], [-10, -6, -4, -2, 6], [-10, -6, -4, -2, 6, 8], [-10, -6, -4, -2, 4], [-10, -6, -4, -2, 4, 8], [-10, -6, -4, -2, 4, 6], [-10, -6, -4, -2, 4, 6, 8], [-10, -6, -4, -2, 2], [-10, -6, -4, -2, 2, 8], [-10, -6, -4, -2, 2, 6], [-10, -6, -4, -2, 2, 6, 8], [-10, -6, -4, -2, 2, 4], [-10, -6, -4, -2, 2, 4, 8], [-10, -6, -4, -2, 2, 4, 6], [-10, -6, -4, -2, 2, 4, 6, 8], [-10, -6, -4, -2, 0], [-10, -6, -4, -2, 0, 8], [-10, -6, -4, -2, 0, 6], [-10, -6, -4, -2, 0, 6, 8], [-10, -6, -4, -2, 0, 4], [-10, -6, -4, -2, 0, 4, 8], [-10, -6, -4, -2, 0, 4, 6], [-10, -6, -4, -2, 0, 4, 6, 8], [-10, -6, -4, -2, 0, 2], [-10, -6, -4, -2, 0, 2, 8], [-10, -6, -4, -2, 0, 2, 6], [-10, -6, -4, -2, 0, 2, 6, 8], [-10, -6, -4, -2, 0, 2, 4], [-10, -6, -4, -2, 0, 2, 4, 8], [-10, -6, -4, -2, 0, 2, 4, 6], [-10, -6, -4, -2, 0, 2, 4, 6, 8], [-10, -8], [-10, -8, 8], [-10, -8, 6], [-10, -8, 6, 8], [-10, -8, 4], [-10, -8, 4, 8], [-10, -8, 4, 6], [-10, -8, 4, 6, 8], [-10, -8, 2], [-10, -8, 2, 8], [-10, -8, 2, 6], [-10, -8, 2, 6, 8], [-10, -8, 2, 4], [-10, -8, 2, 4, 8], [-10, -8, 2, 4, 6], [-10, -8, 2, 4, 6, 8], [-10, -8, 0], [-10, -8, 0, 8], [-10, -8, 0, 6], [-10, -8, 0, 6, 8], [-10, -8, 0, 4], [-10, -8, 0, 4, 8], [-10, -8, 0, 4, 6], [-10, -8, 0, 4, 6, 8], [-10, -8, 0, 2], [-10, -8, 0, 2, 8], [-10, -8, 0, 2, 6], [-10, -8, 0, 2, 6, 8], [-10, -8, 0, 2, 4], [-10, -8, 0, 2, 4, 8], [-10, -8, 0, 2, 4, 6], [-10, -8, 0, 2, 4, 6, 8], [-10, -8, -2], [-10, -8, -2, 8], [-10, -8, -2, 6], [-10, -8, -2, 6, 8], [-10, -8, -2, 4], [-10, -8, -2, 4, 8], [-10, -8, -2, 4, 6], [-10, -8, -2, 4, 6, 8], [-10, -8, -2, 2], [-10, -8, -2, 2, 8], [-10, -8, -2, 2, 6], [-10, -8, -2, 2, 6, 8], [-10, -8, -2, 2, 4], [-10, -8, -2, 2, 4, 8], [-10, -8, -2, 2, 4, 6], [-10, -8, -2, 2, 4, 6, 8], [-10, -8, -2, 0], [-10, -8, -2, 0, 8], [-10, -8, -2, 0, 6], [-10, -8, -2, 0, 6, 8], [-10, -8, -2, 0, 4], [-10, -8, -2, 0, 4, 8], [-10, -8, -2, 0, 4, 6], [-10, -8, -2, 0, 4, 6, 8], [-10, -8, -2, 0, 2], [-10, -8, -2, 0, 2, 8], [-10, -8, -2, 0, 2, 6], [-10, -8, -2, 0, 2, 6, 8], [-10, -8, -2, 0, 2, 4], [-10, -8, -2, 0, 2, 4, 8], [-10, -8, -2, 0, 2, 4, 6], [-10, -8, -2, 0, 2, 4, 6, 8], [-10, -8, -4], [-10, -8, -4, 8], [-10, -8, -4, 6], [-10, -8, -4, 6, 8], [-10, -8, -4, 4], [-10, -8, -4, 4, 8], [-10, -8, -4, 4, 6], [-10, -8, -4, 4, 6, 8], [-10, -8, -4, 2], [-10, -8, -4, 2, 8], [-10, -8, -4, 2, 6], [-10, -8, -4, 2, 6, 8], [-10, -8, -4, 2, 4], [-10, -8, -4, 2, 4, 8], [-10, -8, -4, 2, 4, 6], [-10, -8, -4, 2, 4, 6, 8], [-10, -8, -4, 0], [-10, -8, -4, 0, 8], [-10, -8, -4, 0, 6], [-10, -8, -4, 0, 6, 8], [-10, -8, -4, 0, 4], [-10, -8, -4, 0, 4, 8], [-10, -8, -4, 0, 4, 6], [-10, -8, -4, 0, 4, 6, 8], [-10, -8, -4, 0, 2], [-10, -8, -4, 0, 2, 8], [-10, -8, -4, 0, 2, 6], [-10, -8, -4, 0, 2, 6, 8], [-10, -8, -4, 0, 2, 4], [-10, -8, -4, 0, 2, 4, 8], [-10, -8, -4, 0, 2, 4, 6], [-10, -8, -4, 0, 2, 4, 6, 8], [-10, -8, -4, -2], [-10, -8, -4, -2, 8], [-10, -8, -4, -2, 6], [-10, -8, -4, -2, 6, 8], [-10, -8, -4, -2, 4], [-10, -8, -4, -2, 4, 8], [-10, -8, -4, -2, 4, 6], [-10, -8, -4, -2, 4, 6, 8], [-10, -8, -4, -2, 2], [-10, -8, -4, -2, 2, 8], [-10, -8, -4, -2, 2, 6], [-10, -8, -4, -2, 2, 6, 8], [-10, -8, -4, -2, 2, 4], [-10, -8, -4, -2, 2, 4, 8], [-10, -8, -4, -2, 2, 4, 6], [-10, -8, -4, -2, 2, 4, 6, 8], [-10, -8, -4, -2, 0], [-10, -8, -4, -2, 0, 8], [-10, -8, -4, -2, 0, 6], [-10, -8, -4, -2, 0, 6, 8], [-10, -8, -4, -2, 0, 4], [-10, -8, -4, -2, 0, 4, 8], [-10, -8, -4, -2, 0, 4, 6], [-10, -8, -4, -2, 0, 4, 6, 8], [-10, -8, -4, -2, 0, 2], [-10, -8, -4, -2, 0, 2, 8], [-10, -8, -4, -2, 0, 2, 6], [-10, -8, -4, -2, 0, 2, 6, 8], [-10, -8, -4, -2, 0, 2, 4], [-10, -8, -4, -2, 0, 2, 4, 8], [-10, -8, -4, -2, 0, 2, 4, 6], [-10, -8, -4, -2, 0, 2, 4, 6, 8], [-10, -8, -6], [-10, -8, -6, 8], [-10, -8, -6, 6], [-10, -8, -6, 6, 8], [-10, -8, -6, 4], [-10, -8, -6, 4, 8], [-10, -8, -6, 4, 6], [-10, -8, -6, 4, 6, 8], [-10, -8, -6, 2], [-10, -8, -6, 2, 8], [-10, -8, -6, 2, 6], [-10, -8, -6, 2, 6, 8], [-10, -8, -6, 2, 4], [-10, -8, -6, 2, 4, 8], [-10, -8, -6, 2, 4, 6], [-10, -8, -6, 2, 4, 6, 8], [-10, -8, -6, 0], [-10, -8, -6, 0, 8], [-10, -8, -6, 0, 6], [-10, -8, -6, 0, 6, 8], [-10, -8, -6, 0, 4], [-10, -8, -6, 0, 4, 8], [-10, -8, -6, 0, 4, 6], [-10, -8, -6, 0, 4, 6, 8], [-10, -8, -6, 0, 2], [-10, -8, -6, 0, 2, 8], [-10, -8, -6, 0, 2, 6], [-10, -8, -6, 0, 2, 6, 8], [-10, -8, -6, 0, 2, 4], [-10, -8, -6, 0, 2, 4, 8], [-10, -8, -6, 0, 2, 4, 6], [-10, -8, -6, 0, 2, 4, 6, 8], [-10, -8, -6, -2], [-10, -8, -6, -2, 8], [-10, -8, -6, -2, 6], [-10, -8, -6, -2, 6, 8], [-10, -8, -6, -2, 4], [-10, -8, -6, -2, 4, 8], [-10, -8, -6, -2, 4, 6], [-10, -8, -6, -2, 4, 6, 8], [-10, -8, -6, -2, 2], [-10, -8, -6, -2, 2, 8], [-10, -8, -6, -2, 2, 6], [-10, -8, -6, -2, 2, 6, 8], [-10, -8, -6, -2, 2, 4], [-10, -8, -6, -2, 2, 4, 8], [-10, -8, -6, -2, 2, 4, 6], [-10, -8, -6, -2, 2, 4, 6, 8], [-10, -8, -6, -2, 0], [-10, -8, -6, -2, 0, 8], [-10, -8, -6, -2, 0, 6], [-10, -8, -6, -2, 0, 6, 8], [-10, -8, -6, -2, 0, 4], [-10, -8, -6, -2, 0, 4, 8], [-10, -8, -6, -2, 0, 4, 6], [-10, -8, -6, -2, 0, 4, 6, 8], [-10, -8, -6, -2, 0, 2], [-10, -8, -6, -2, 0, 2, 8], [-10, -8, -6, -2, 0, 2, 6], [-10, -8, -6, -2, 0, 2, 6, 8], [-10, -8, -6, -2, 0, 2, 4], [-10, -8, -6, -2, 0, 2, 4, 8], [-10, -8, -6, -2, 0, 2, 4, 6], [-10, -8, -6, -2, 0, 2, 4, 6, 8], [-10, -8, -6, -4], [-10, -8, -6, -4, 8], [-10, -8, -6, -4, 6], [-10, -8, -6, -4, 6, 8], [-10, -8, -6, -4, 4], [-10, -8, -6, -4, 4, 8], [-10, -8, -6, -4, 4, 6], [-10, -8, -6, -4, 4, 6, 8], [-10, -8, -6, -4, 2], [-10, -8, -6, -4, 2, 8], [-10, -8, -6, -4, 2, 6], [-10, -8, -6, -4, 2, 6, 8], [-10, -8, -6, -4, 2, 4], [-10, -8, -6, -4, 2, 4, 8], [-10, -8, -6, -4, 2, 4, 6], [-10, -8, -6, -4, 2, 4, 6, 8], [-10, -8, -6, -4, 0], [-10, -8, -6, -4, 0, 8], [-10, -8, -6, -4, 0, 6], [-10, -8, -6, -4, 0, 6, 8], [-10, -8, -6, -4, 0, 4], [-10, -8, -6, -4, 0, 4, 8], [-10, -8, -6, -4, 0, 4, 6], [-10, -8, -6, -4, 0, 4, 6, 8], [-10, -8, -6, -4, 0, 2], [-10, -8, -6, -4, 0, 2, 8], [-10, -8, -6, -4, 0, 2, 6], [-10, -8, -6, -4, 0, 2, 6, 8], [-10, -8, -6, -4, 0, 2, 4], [-10, -8, -6, -4, 0, 2, 4, 8], [-10, -8, -6, -4, 0, 2, 4, 6], [-10, -8, -6, -4, 0, 2, 4, 6, 8], [-10, -8, -6, -4, -2], [-10, -8, -6, -4, -2, 8], [-10, -8, -6, -4, -2, 6], [-10, -8, -6, -4, -2, 6, 8], [-10, -8, -6, -4, -2, 4], [-10, -8, -6, -4, -2, 4, 8], [-10, -8, -6, -4, -2, 4, 6], [-10, -8, -6, -4, -2, 4, 6, 8], [-10, -8, -6, -4, -2, 2], [-10, -8, -6, -4, -2, 2, 8], [-10, -8, -6, -4, -2, 2, 6], [-10, -8, -6, -4, -2, 2, 6, 8], [-10, -8, -6, -4, -2, 2, 4], [-10, -8, -6, -4, -2, 2, 4, 8], [-10, -8, -6, -4, -2, 2, 4, 6], [-10, -8, -6, -4, -2, 2, 4, 6, 8], [-10, -8, -6, -4, -2, 0], [-10, -8, -6, -4, -2, 0, 8], [-10, -8, -6, -4, -2, 0, 6], [-10, -8, -6, -4, -2, 0, 6, 8], [-10, -8, -6, -4, -2, 0, 4], [-10, -8, -6, -4, -2, 0, 4, 8], [-10, -8, -6, -4, -2, 0, 4, 6], [-10, -8, -6, -4, -2, 0, 4, 6, 8], [-10, -8, -6, -4, -2, 0, 2], [-10, -8, -6, -4, -2, 0, 2, 8], [-10, -8, -6, -4, -2, 0, 2, 6], [-10, -8, -6, -4, -2, 0, 2, 6, 8], [-10, -8, -6, -4, -2, 0, 2, 4], [-10, -8, -6, -4, -2, 0, 2, 4, 8], [-10, -8, -6, -4, -2, 0, 2, 4, 6], [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8]]"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5]",
        "output": "[[], [5], [4], [4, 5], [3], [3, 5], [3, 4], [3, 4, 5], [2], [2, 5], [2, 4], [2, 4, 5], [2, 3], [2, 3, 5], [2, 3, 4], [2, 3, 4, 5], [1], [1, 5], [1, 4], [1, 4, 5], [1, 3], [1, 3, 5], [1, 3, 4], [1, 3, 4, 5], [1, 2], [1, 2, 5], [1, 2, 4], [1, 2, 4, 5], [1, 2, 3], [1, 2, 3, 5], [1, 2, 3, 4], [1, 2, 3, 4, 5], [0], [0, 5], [0, 4], [0, 4, 5], [0, 3], [0, 3, 5], [0, 3, 4], [0, 3, 4, 5], [0, 2], [0, 2, 5], [0, 2, 4], [0, 2, 4, 5], [0, 2, 3], [0, 2, 3, 5], [0, 2, 3, 4], [0, 2, 3, 4, 5], [0, 1], [0, 1, 5], [0, 1, 4], [0, 1, 4, 5], [0, 1, 3], [0, 1, 3, 5], [0, 1, 3, 4], [0, 1, 3, 4, 5], [0, 1, 2], [0, 1, 2, 5], [0, 1, 2, 4], [0, 1, 2, 4, 5], [0, 1, 2, 3], [0, 1, 2, 3, 5], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5]]"
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "[[], [4], [3], [3, 4], [2], [2, 4], [2, 3], [2, 3, 4], [1], [1, 4], [1, 3], [1, 3, 4], [1, 2], [1, 2, 4], [1, 2, 3], [1, 2, 3, 4]]"
      },
      {
        "input": "nums = [0, 1, 10, 100, 1000, 10000]",
        "output": "[[], [10000], [1000], [1000, 10000], [100], [100, 10000], [100, 1000], [100, 1000, 10000], [10], [10, 10000], [10, 1000], [10, 1000, 10000], [10, 100], [10, 100, 10000], [10, 100, 1000], [10, 100, 1000, 10000], [1], [1, 10000], [1, 1000], [1, 1000, 10000], [1, 100], [1, 100, 10000], [1, 100, 1000], [1, 100, 1000, 10000], [1, 10], [1, 10, 10000], [1, 10, 1000], [1, 10, 1000, 10000], [1, 10, 100], [1, 10, 100, 10000], [1, 10, 100, 1000], [1, 10, 100, 1000, 10000], [0], [0, 10000], [0, 1000], [0, 1000, 10000], [0, 100], [0, 100, 10000], [0, 100, 1000], [0, 100, 1000, 10000], [0, 10], [0, 10, 10000], [0, 10, 1000], [0, 10, 1000, 10000], [0, 10, 100], [0, 10, 100, 10000], [0, 10, 100, 1000], [0, 10, 100, 1000, 10000], [0, 1], [0, 1, 10000], [0, 1, 1000], [0, 1, 1000, 10000], [0, 1, 100], [0, 1, 100, 10000], [0, 1, 100, 1000], [0, 1, 100, 1000, 10000], [0, 1, 10], [0, 1, 10, 10000], [0, 1, 10, 1000], [0, 1, 10, 1000, 10000], [0, 1, 10, 100], [0, 1, 10, 100, 10000], [0, 1, 10, 100, 1000], [0, 1, 10, 100, 1000, 10000]]"
      },
      {
        "input": "nums = [-5, -10, -15, -20, -25, -30, -35]",
        "output": "[[], [-35], [-30], [-30, -35], [-25], [-25, -35], [-25, -30], [-25, -30, -35], [-20], [-20, -35], [-20, -30], [-20, -30, -35], [-20, -25], [-20, -25, -35], [-20, -25, -30], [-20, -25, -30, -35], [-15], [-15, -35], [-15, -30], [-15, -30, -35], [-15, -25], [-15, -25, -35], [-15, -25, -30], [-15, -25, -30, -35], [-15, -20], [-15, -20, -35], [-15, -20, -30], [-15, -20, -30, -35], [-15, -20, -25], [-15, -20, -25, -35], [-15, -20, -25, -30], [-15, -20, -25, -30, -35], [-10], [-10, -35], [-10, -30], [-10, -30, -35], [-10, -25], [-10, -25, -35], [-10, -25, -30], [-10, -25, -30, -35], [-10, -20], [-10, -20, -35], [-10, -20, -30], [-10, -20, -30, -35], [-10, -20, -25], [-10, -20, -25, -35], [-10, -20, -25, -30], [-10, -20, -25, -30, -35], [-10, -15], [-10, -15, -35], [-10, -15, -30], [-10, -15, -30, -35], [-10, -15, -25], [-10, -15, -25, -35], [-10, -15, -25, -30], [-10, -15, -25, -30, -35], [-10, -15, -20], [-10, -15, -20, -35], [-10, -15, -20, -30], [-10, -15, -20, -30, -35], [-10, -15, -20, -25], [-10, -15, -20, -25, -35], [-10, -15, -20, -25, -30], [-10, -15, -20, -25, -30, -35], [-5], [-5, -35], [-5, -30], [-5, -30, -35], [-5, -25], [-5, -25, -35], [-5, -25, -30], [-5, -25, -30, -35], [-5, -20], [-5, -20, -35], [-5, -20, -30], [-5, -20, -30, -35], [-5, -20, -25], [-5, -20, -25, -35], [-5, -20, -25, -30], [-5, -20, -25, -30, -35], [-5, -15], [-5, -15, -35], [-5, -15, -30], [-5, -15, -30, -35], [-5, -15, -25], [-5, -15, -25, -35], [-5, -15, -25, -30], [-5, -15, -25, -30, -35], [-5, -15, -20], [-5, -15, -20, -35], [-5, -15, -20, -30], [-5, -15, -20, -30, -35], [-5, -15, -20, -25], [-5, -15, -20, -25, -35], [-5, -15, -20, -25, -30], [-5, -15, -20, -25, -30, -35], [-5, -10], [-5, -10, -35], [-5, -10, -30], [-5, -10, -30, -35], [-5, -10, -25], [-5, -10, -25, -35], [-5, -10, -25, -30], [-5, -10, -25, -30, -35], [-5, -10, -20], [-5, -10, -20, -35], [-5, -10, -20, -30], [-5, -10, -20, -30, -35], [-5, -10, -20, -25], [-5, -10, -20, -25, -35], [-5, -10, -20, -25, -30], [-5, -10, -20, -25, -30, -35], [-5, -10, -15], [-5, -10, -15, -35], [-5, -10, -15, -30], [-5, -10, -15, -30, -35], [-5, -10, -15, -25], [-5, -10, -15, -25, -35], [-5, -10, -15, -25, -30], [-5, -10, -15, -25, -30, -35], [-5, -10, -15, -20], [-5, -10, -15, -20, -35], [-5, -10, -15, -20, -30], [-5, -10, -15, -20, -30, -35], [-5, -10, -15, -20, -25], [-5, -10, -15, -20, -25, -35], [-5, -10, -15, -20, -25, -30], [-5, -10, -15, -20, -25, -30, -35]]"
      },
      {
        "input": "nums = [7, 1, 5, 3]",
        "output": "[[], [3], [5], [5, 3], [1], [1, 3], [1, 5], [1, 5, 3], [7], [7, 3], [7, 5], [7, 5, 3], [7, 1], [7, 1, 3], [7, 1, 5], [7, 1, 5, 3]]"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5]",
        "output": "[[], [-5], [-4], [-4, -5], [-3], [-3, -5], [-3, -4], [-3, -4, -5], [-2], [-2, -5], [-2, -4], [-2, -4, -5], [-2, -3], [-2, -3, -5], [-2, -3, -4], [-2, -3, -4, -5], [-1], [-1, -5], [-1, -4], [-1, -4, -5], [-1, -3], [-1, -3, -5], [-1, -3, -4], [-1, -3, -4, -5], [-1, -2], [-1, -2, -5], [-1, -2, -4], [-1, -2, -4, -5], [-1, -2, -3], [-1, -2, -3, -5], [-1, -2, -3, -4], [-1, -2, -3, -4, -5]]"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9]",
        "output": "[[], [9], [8], [8, 9], [7], [7, 9], [7, 8], [7, 8, 9], [6], [6, 9], [6, 8], [6, 8, 9], [6, 7], [6, 7, 9], [6, 7, 8], [6, 7, 8, 9], [5], [5, 9], [5, 8], [5, 8, 9], [5, 7], [5, 7, 9], [5, 7, 8], [5, 7, 8, 9], [5, 6], [5, 6, 9], [5, 6, 8], [5, 6, 8, 9], [5, 6, 7], [5, 6, 7, 9], [5, 6, 7, 8], [5, 6, 7, 8, 9], [4], [4, 9], [4, 8], [4, 8, 9], [4, 7], [4, 7, 9], [4, 7, 8], [4, 7, 8, 9], [4, 6], [4, 6, 9], [4, 6, 8], [4, 6, 8, 9], [4, 6, 7], [4, 6, 7, 9], [4, 6, 7, 8], [4, 6, 7, 8, 9], [4, 5], [4, 5, 9], [4, 5, 8], [4, 5, 8, 9], [4, 5, 7], [4, 5, 7, 9], [4, 5, 7, 8], [4, 5, 7, 8, 9], [4, 5, 6], [4, 5, 6, 9], [4, 5, 6, 8], [4, 5, 6, 8, 9], [4, 5, 6, 7], [4, 5, 6, 7, 9], [4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9], [3], [3, 9], [3, 8], [3, 8, 9], [3, 7], [3, 7, 9], [3, 7, 8], [3, 7, 8, 9], [3, 6], [3, 6, 9], [3, 6, 8], [3, 6, 8, 9], [3, 6, 7], [3, 6, 7, 9], [3, 6, 7, 8], [3, 6, 7, 8, 9], [3, 5], [3, 5, 9], [3, 5, 8], [3, 5, 8, 9], [3, 5, 7], [3, 5, 7, 9], [3, 5, 7, 8], [3, 5, 7, 8, 9], [3, 5, 6], [3, 5, 6, 9], [3, 5, 6, 8], [3, 5, 6, 8, 9], [3, 5, 6, 7], [3, 5, 6, 7, 9], [3, 5, 6, 7, 8], [3, 5, 6, 7, 8, 9], [3, 4], [3, 4, 9], [3, 4, 8], [3, 4, 8, 9], [3, 4, 7], [3, 4, 7, 9], [3, 4, 7, 8], [3, 4, 7, 8, 9], [3, 4, 6], [3, 4, 6, 9], [3, 4, 6, 8], [3, 4, 6, 8, 9], [3, 4, 6, 7], [3, 4, 6, 7, 9], [3, 4, 6, 7, 8], [3, 4, 6, 7, 8, 9], [3, 4, 5], [3, 4, 5, 9], [3, 4, 5, 8], [3, 4, 5, 8, 9], [3, 4, 5, 7], [3, 4, 5, 7, 9], [3, 4, 5, 7, 8], [3, 4, 5, 7, 8, 9], [3, 4, 5, 6], [3, 4, 5, 6, 9], [3, 4, 5, 6, 8], [3, 4, 5, 6, 8, 9], [3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 9], [3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9], [2], [2, 9], [2, 8], [2, 8, 9], [2, 7], [2, 7, 9], [2, 7, 8], [2, 7, 8, 9], [2, 6], [2, 6, 9], [2, 6, 8], [2, 6, 8, 9], [2, 6, 7], [2, 6, 7, 9], [2, 6, 7, 8], [2, 6, 7, 8, 9], [2, 5], [2, 5, 9], [2, 5, 8], [2, 5, 8, 9], [2, 5, 7], [2, 5, 7, 9], [2, 5, 7, 8], [2, 5, 7, 8, 9], [2, 5, 6], [2, 5, 6, 9], [2, 5, 6, 8], [2, 5, 6, 8, 9], [2, 5, 6, 7], [2, 5, 6, 7, 9], [2, 5, 6, 7, 8], [2, 5, 6, 7, 8, 9], [2, 4], [2, 4, 9], [2, 4, 8], [2, 4, 8, 9], [2, 4, 7], [2, 4, 7, 9], [2, 4, 7, 8], [2, 4, 7, 8, 9], [2, 4, 6], [2, 4, 6, 9], [2, 4, 6, 8], [2, 4, 6, 8, 9], [2, 4, 6, 7], [2, 4, 6, 7, 9], [2, 4, 6, 7, 8], [2, 4, 6, 7, 8, 9], [2, 4, 5], [2, 4, 5, 9], [2, 4, 5, 8], [2, 4, 5, 8, 9], [2, 4, 5, 7], [2, 4, 5, 7, 9], [2, 4, 5, 7, 8], [2, 4, 5, 7, 8, 9], [2, 4, 5, 6], [2, 4, 5, 6, 9], [2, 4, 5, 6, 8], [2, 4, 5, 6, 8, 9], [2, 4, 5, 6, 7], [2, 4, 5, 6, 7, 9], [2, 4, 5, 6, 7, 8], [2, 4, 5, 6, 7, 8, 9], [2, 3], [2, 3, 9], [2, 3, 8], [2, 3, 8, 9], [2, 3, 7], [2, 3, 7, 9], [2, 3, 7, 8], [2, 3, 7, 8, 9], [2, 3, 6], [2, 3, 6, 9], [2, 3, 6, 8], [2, 3, 6, 8, 9], [2, 3, 6, 7], [2, 3, 6, 7, 9], [2, 3, 6, 7, 8], [2, 3, 6, 7, 8, 9], [2, 3, 5], [2, 3, 5, 9], [2, 3, 5, 8], [2, 3, 5, 8, 9], [2, 3, 5, 7], [2, 3, 5, 7, 9], [2, 3, 5, 7, 8], [2, 3, 5, 7, 8, 9], [2, 3, 5, 6], [2, 3, 5, 6, 9], [2, 3, 5, 6, 8], [2, 3, 5, 6, 8, 9], [2, 3, 5, 6, 7], [2, 3, 5, 6, 7, 9], [2, 3, 5, 6, 7, 8], [2, 3, 5, 6, 7, 8, 9], [2, 3, 4], [2, 3, 4, 9], [2, 3, 4, 8], [2, 3, 4, 8, 9], [2, 3, 4, 7], [2, 3, 4, 7, 9], [2, 3, 4, 7, 8], [2, 3, 4, 7, 8, 9], [2, 3, 4, 6], [2, 3, 4, 6, 9], [2, 3, 4, 6, 8], [2, 3, 4, 6, 8, 9], [2, 3, 4, 6, 7], [2, 3, 4, 6, 7, 9], [2, 3, 4, 6, 7, 8], [2, 3, 4, 6, 7, 8, 9], [2, 3, 4, 5], [2, 3, 4, 5, 9], [2, 3, 4, 5, 8], [2, 3, 4, 5, 8, 9], [2, 3, 4, 5, 7], [2, 3, 4, 5, 7, 9], [2, 3, 4, 5, 7, 8], [2, 3, 4, 5, 7, 8, 9], [2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 9], [2, 3, 4, 5, 6, 8], [2, 3, 4, 5, 6, 8, 9], [2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 9], [2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8, 9], [1], [1, 9], [1, 8], [1, 8, 9], [1, 7], [1, 7, 9], [1, 7, 8], [1, 7, 8, 9], [1, 6], [1, 6, 9], [1, 6, 8], [1, 6, 8, 9], [1, 6, 7], [1, 6, 7, 9], [1, 6, 7, 8], [1, 6, 7, 8, 9], [1, 5], [1, 5, 9], [1, 5, 8], [1, 5, 8, 9], [1, 5, 7], [1, 5, 7, 9], [1, 5, 7, 8], [1, 5, 7, 8, 9], [1, 5, 6], [1, 5, 6, 9], [1, 5, 6, 8], [1, 5, 6, 8, 9], [1, 5, 6, 7], [1, 5, 6, 7, 9], [1, 5, 6, 7, 8], [1, 5, 6, 7, 8, 9], [1, 4], [1, 4, 9], [1, 4, 8], [1, 4, 8, 9], [1, 4, 7], [1, 4, 7, 9], [1, 4, 7, 8], [1, 4, 7, 8, 9], [1, 4, 6], [1, 4, 6, 9], [1, 4, 6, 8], [1, 4, 6, 8, 9], [1, 4, 6, 7], [1, 4, 6, 7, 9], [1, 4, 6, 7, 8], [1, 4, 6, 7, 8, 9], [1, 4, 5], [1, 4, 5, 9], [1, 4, 5, 8], [1, 4, 5, 8, 9], [1, 4, 5, 7], [1, 4, 5, 7, 9], [1, 4, 5, 7, 8], [1, 4, 5, 7, 8, 9], [1, 4, 5, 6], [1, 4, 5, 6, 9], [1, 4, 5, 6, 8], [1, 4, 5, 6, 8, 9], [1, 4, 5, 6, 7], [1, 4, 5, 6, 7, 9], [1, 4, 5, 6, 7, 8], [1, 4, 5, 6, 7, 8, 9], [1, 3], [1, 3, 9], [1, 3, 8], [1, 3, 8, 9], [1, 3, 7], [1, 3, 7, 9], [1, 3, 7, 8], [1, 3, 7, 8, 9], [1, 3, 6], [1, 3, 6, 9], [1, 3, 6, 8], [1, 3, 6, 8, 9], [1, 3, 6, 7], [1, 3, 6, 7, 9], [1, 3, 6, 7, 8], [1, 3, 6, 7, 8, 9], [1, 3, 5], [1, 3, 5, 9], [1, 3, 5, 8], [1, 3, 5, 8, 9], [1, 3, 5, 7], [1, 3, 5, 7, 9], [1, 3, 5, 7, 8], [1, 3, 5, 7, 8, 9], [1, 3, 5, 6], [1, 3, 5, 6, 9], [1, 3, 5, 6, 8], [1, 3, 5, 6, 8, 9], [1, 3, 5, 6, 7], [1, 3, 5, 6, 7, 9], [1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 7, 8, 9], [1, 3, 4], [1, 3, 4, 9], [1, 3, 4, 8], [1, 3, 4, 8, 9], [1, 3, 4, 7], [1, 3, 4, 7, 9], [1, 3, 4, 7, 8], [1, 3, 4, 7, 8, 9], [1, 3, 4, 6], [1, 3, 4, 6, 9], [1, 3, 4, 6, 8], [1, 3, 4, 6, 8, 9], [1, 3, 4, 6, 7], [1, 3, 4, 6, 7, 9], [1, 3, 4, 6, 7, 8], [1, 3, 4, 6, 7, 8, 9], [1, 3, 4, 5], [1, 3, 4, 5, 9], [1, 3, 4, 5, 8], [1, 3, 4, 5, 8, 9], [1, 3, 4, 5, 7], [1, 3, 4, 5, 7, 9], [1, 3, 4, 5, 7, 8], [1, 3, 4, 5, 7, 8, 9], [1, 3, 4, 5, 6], [1, 3, 4, 5, 6, 9], [1, 3, 4, 5, 6, 8], [1, 3, 4, 5, 6, 8, 9], [1, 3, 4, 5, 6, 7], [1, 3, 4, 5, 6, 7, 9], [1, 3, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2], [1, 2, 9], [1, 2, 8], [1, 2, 8, 9], [1, 2, 7], [1, 2, 7, 9], [1, 2, 7, 8], [1, 2, 7, 8, 9], [1, 2, 6], [1, 2, 6, 9], [1, 2, 6, 8], [1, 2, 6, 8, 9], [1, 2, 6, 7], [1, 2, 6, 7, 9], [1, 2, 6, 7, 8], [1, 2, 6, 7, 8, 9], [1, 2, 5], [1, 2, 5, 9], [1, 2, 5, 8], [1, 2, 5, 8, 9], [1, 2, 5, 7], [1, 2, 5, 7, 9], [1, 2, 5, 7, 8], [1, 2, 5, 7, 8, 9], [1, 2, 5, 6], [1, 2, 5, 6, 9], [1, 2, 5, 6, 8], [1, 2, 5, 6, 8, 9], [1, 2, 5, 6, 7], [1, 2, 5, 6, 7, 9], [1, 2, 5, 6, 7, 8], [1, 2, 5, 6, 7, 8, 9], [1, 2, 4], [1, 2, 4, 9], [1, 2, 4, 8], [1, 2, 4, 8, 9], [1, 2, 4, 7], [1, 2, 4, 7, 9], [1, 2, 4, 7, 8], [1, 2, 4, 7, 8, 9], [1, 2, 4, 6], [1, 2, 4, 6, 9], [1, 2, 4, 6, 8], [1, 2, 4, 6, 8, 9], [1, 2, 4, 6, 7], [1, 2, 4, 6, 7, 9], [1, 2, 4, 6, 7, 8], [1, 2, 4, 6, 7, 8, 9], [1, 2, 4, 5], [1, 2, 4, 5, 9], [1, 2, 4, 5, 8], [1, 2, 4, 5, 8, 9], [1, 2, 4, 5, 7], [1, 2, 4, 5, 7, 9], [1, 2, 4, 5, 7, 8], [1, 2, 4, 5, 7, 8, 9], [1, 2, 4, 5, 6], [1, 2, 4, 5, 6, 9], [1, 2, 4, 5, 6, 8], [1, 2, 4, 5, 6, 8, 9], [1, 2, 4, 5, 6, 7], [1, 2, 4, 5, 6, 7, 9], [1, 2, 4, 5, 6, 7, 8], [1, 2, 4, 5, 6, 7, 8, 9], [1, 2, 3], [1, 2, 3, 9], [1, 2, 3, 8], [1, 2, 3, 8, 9], [1, 2, 3, 7], [1, 2, 3, 7, 9], [1, 2, 3, 7, 8], [1, 2, 3, 7, 8, 9], [1, 2, 3, 6], [1, 2, 3, 6, 9], [1, 2, 3, 6, 8], [1, 2, 3, 6, 8, 9], [1, 2, 3, 6, 7], [1, 2, 3, 6, 7, 9], [1, 2, 3, 6, 7, 8], [1, 2, 3, 6, 7, 8, 9], [1, 2, 3, 5], [1, 2, 3, 5, 9], [1, 2, 3, 5, 8], [1, 2, 3, 5, 8, 9], [1, 2, 3, 5, 7], [1, 2, 3, 5, 7, 9], [1, 2, 3, 5, 7, 8], [1, 2, 3, 5, 7, 8, 9], [1, 2, 3, 5, 6], [1, 2, 3, 5, 6, 9], [1, 2, 3, 5, 6, 8], [1, 2, 3, 5, 6, 8, 9], [1, 2, 3, 5, 6, 7], [1, 2, 3, 5, 6, 7, 9], [1, 2, 3, 5, 6, 7, 8], [1, 2, 3, 5, 6, 7, 8, 9], [1, 2, 3, 4], [1, 2, 3, 4, 9], [1, 2, 3, 4, 8], [1, 2, 3, 4, 8, 9], [1, 2, 3, 4, 7], [1, 2, 3, 4, 7, 9], [1, 2, 3, 4, 7, 8], [1, 2, 3, 4, 7, 8, 9], [1, 2, 3, 4, 6], [1, 2, 3, 4, 6, 9], [1, 2, 3, 4, 6, 8], [1, 2, 3, 4, 6, 8, 9], [1, 2, 3, 4, 6, 7], [1, 2, 3, 4, 6, 7, 9], [1, 2, 3, 4, 6, 7, 8], [1, 2, 3, 4, 6, 7, 8, 9], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 9], [1, 2, 3, 4, 5, 8], [1, 2, 3, 4, 5, 8, 9], [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 5, 7, 9], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 7, 8, 9], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 9], [1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 9], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [0], [0, 9], [0, 8], [0, 8, 9], [0, 7], [0, 7, 9], [0, 7, 8], [0, 7, 8, 9], [0, 6], [0, 6, 9], [0, 6, 8], [0, 6, 8, 9], [0, 6, 7], [0, 6, 7, 9], [0, 6, 7, 8], [0, 6, 7, 8, 9], [0, 5], [0, 5, 9], [0, 5, 8], [0, 5, 8, 9], [0, 5, 7], [0, 5, 7, 9], [0, 5, 7, 8], [0, 5, 7, 8, 9], [0, 5, 6], [0, 5, 6, 9], [0, 5, 6, 8], [0, 5, 6, 8, 9], [0, 5, 6, 7], [0, 5, 6, 7, 9], [0, 5, 6, 7, 8], [0, 5, 6, 7, 8, 9], [0, 4], [0, 4, 9], [0, 4, 8], [0, 4, 8, 9], [0, 4, 7], [0, 4, 7, 9], [0, 4, 7, 8], [0, 4, 7, 8, 9], [0, 4, 6], [0, 4, 6, 9], [0, 4, 6, 8], [0, 4, 6, 8, 9], [0, 4, 6, 7], [0, 4, 6, 7, 9], [0, 4, 6, 7, 8], [0, 4, 6, 7, 8, 9], [0, 4, 5], [0, 4, 5, 9], [0, 4, 5, 8], [0, 4, 5, 8, 9], [0, 4, 5, 7], [0, 4, 5, 7, 9], [0, 4, 5, 7, 8], [0, 4, 5, 7, 8, 9], [0, 4, 5, 6], [0, 4, 5, 6, 9], [0, 4, 5, 6, 8], [0, 4, 5, 6, 8, 9], [0, 4, 5, 6, 7], [0, 4, 5, 6, 7, 9], [0, 4, 5, 6, 7, 8], [0, 4, 5, 6, 7, 8, 9], [0, 3], [0, 3, 9], [0, 3, 8], [0, 3, 8, 9], [0, 3, 7], [0, 3, 7, 9], [0, 3, 7, 8], [0, 3, 7, 8, 9], [0, 3, 6], [0, 3, 6, 9], [0, 3, 6, 8], [0, 3, 6, 8, 9], [0, 3, 6, 7], [0, 3, 6, 7, 9], [0, 3, 6, 7, 8], [0, 3, 6, 7, 8, 9], [0, 3, 5], [0, 3, 5, 9], [0, 3, 5, 8], [0, 3, 5, 8, 9], [0, 3, 5, 7], [0, 3, 5, 7, 9], [0, 3, 5, 7, 8], [0, 3, 5, 7, 8, 9], [0, 3, 5, 6], [0, 3, 5, 6, 9], [0, 3, 5, 6, 8], [0, 3, 5, 6, 8, 9], [0, 3, 5, 6, 7], [0, 3, 5, 6, 7, 9], [0, 3, 5, 6, 7, 8], [0, 3, 5, 6, 7, 8, 9], [0, 3, 4], [0, 3, 4, 9], [0, 3, 4, 8], [0, 3, 4, 8, 9], [0, 3, 4, 7], [0, 3, 4, 7, 9], [0, 3, 4, 7, 8], [0, 3, 4, 7, 8, 9], [0, 3, 4, 6], [0, 3, 4, 6, 9], [0, 3, 4, 6, 8], [0, 3, 4, 6, 8, 9], [0, 3, 4, 6, 7], [0, 3, 4, 6, 7, 9], [0, 3, 4, 6, 7, 8], [0, 3, 4, 6, 7, 8, 9], [0, 3, 4, 5], [0, 3, 4, 5, 9], [0, 3, 4, 5, 8], [0, 3, 4, 5, 8, 9], [0, 3, 4, 5, 7], [0, 3, 4, 5, 7, 9], [0, 3, 4, 5, 7, 8], [0, 3, 4, 5, 7, 8, 9], [0, 3, 4, 5, 6], [0, 3, 4, 5, 6, 9], [0, 3, 4, 5, 6, 8], [0, 3, 4, 5, 6, 8, 9], [0, 3, 4, 5, 6, 7], [0, 3, 4, 5, 6, 7, 9], [0, 3, 4, 5, 6, 7, 8], [0, 3, 4, 5, 6, 7, 8, 9], [0, 2], [0, 2, 9], [0, 2, 8], [0, 2, 8, 9], [0, 2, 7], [0, 2, 7, 9], [0, 2, 7, 8], [0, 2, 7, 8, 9], [0, 2, 6], [0, 2, 6, 9], [0, 2, 6, 8], [0, 2, 6, 8, 9], [0, 2, 6, 7], [0, 2, 6, 7, 9], [0, 2, 6, 7, 8], [0, 2, 6, 7, 8, 9], [0, 2, 5], [0, 2, 5, 9], [0, 2, 5, 8], [0, 2, 5, 8, 9], [0, 2, 5, 7], [0, 2, 5, 7, 9], [0, 2, 5, 7, 8], [0, 2, 5, 7, 8, 9], [0, 2, 5, 6], [0, 2, 5, 6, 9], [0, 2, 5, 6, 8], [0, 2, 5, 6, 8, 9], [0, 2, 5, 6, 7], [0, 2, 5, 6, 7, 9], [0, 2, 5, 6, 7, 8], [0, 2, 5, 6, 7, 8, 9], [0, 2, 4], [0, 2, 4, 9], [0, 2, 4, 8], [0, 2, 4, 8, 9], [0, 2, 4, 7], [0, 2, 4, 7, 9], [0, 2, 4, 7, 8], [0, 2, 4, 7, 8, 9], [0, 2, 4, 6], [0, 2, 4, 6, 9], [0, 2, 4, 6, 8], [0, 2, 4, 6, 8, 9], [0, 2, 4, 6, 7], [0, 2, 4, 6, 7, 9], [0, 2, 4, 6, 7, 8], [0, 2, 4, 6, 7, 8, 9], [0, 2, 4, 5], [0, 2, 4, 5, 9], [0, 2, 4, 5, 8], [0, 2, 4, 5, 8, 9], [0, 2, 4, 5, 7], [0, 2, 4, 5, 7, 9], [0, 2, 4, 5, 7, 8], [0, 2, 4, 5, 7, 8, 9], [0, 2, 4, 5, 6], [0, 2, 4, 5, 6, 9], [0, 2, 4, 5, 6, 8], [0, 2, 4, 5, 6, 8, 9], [0, 2, 4, 5, 6, 7], [0, 2, 4, 5, 6, 7, 9], [0, 2, 4, 5, 6, 7, 8], [0, 2, 4, 5, 6, 7, 8, 9], [0, 2, 3], [0, 2, 3, 9], [0, 2, 3, 8], [0, 2, 3, 8, 9], [0, 2, 3, 7], [0, 2, 3, 7, 9], [0, 2, 3, 7, 8], [0, 2, 3, 7, 8, 9], [0, 2, 3, 6], [0, 2, 3, 6, 9], [0, 2, 3, 6, 8], [0, 2, 3, 6, 8, 9], [0, 2, 3, 6, 7], [0, 2, 3, 6, 7, 9], [0, 2, 3, 6, 7, 8], [0, 2, 3, 6, 7, 8, 9], [0, 2, 3, 5], [0, 2, 3, 5, 9], [0, 2, 3, 5, 8], [0, 2, 3, 5, 8, 9], [0, 2, 3, 5, 7], [0, 2, 3, 5, 7, 9], [0, 2, 3, 5, 7, 8], [0, 2, 3, 5, 7, 8, 9], [0, 2, 3, 5, 6], [0, 2, 3, 5, 6, 9], [0, 2, 3, 5, 6, 8], [0, 2, 3, 5, 6, 8, 9], [0, 2, 3, 5, 6, 7], [0, 2, 3, 5, 6, 7, 9], [0, 2, 3, 5, 6, 7, 8], [0, 2, 3, 5, 6, 7, 8, 9], [0, 2, 3, 4], [0, 2, 3, 4, 9], [0, 2, 3, 4, 8], [0, 2, 3, 4, 8, 9], [0, 2, 3, 4, 7], [0, 2, 3, 4, 7, 9], [0, 2, 3, 4, 7, 8], [0, 2, 3, 4, 7, 8, 9], [0, 2, 3, 4, 6], [0, 2, 3, 4, 6, 9], [0, 2, 3, 4, 6, 8], [0, 2, 3, 4, 6, 8, 9], [0, 2, 3, 4, 6, 7], [0, 2, 3, 4, 6, 7, 9], [0, 2, 3, 4, 6, 7, 8], [0, 2, 3, 4, 6, 7, 8, 9], [0, 2, 3, 4, 5], [0, 2, 3, 4, 5, 9], [0, 2, 3, 4, 5, 8], [0, 2, 3, 4, 5, 8, 9], [0, 2, 3, 4, 5, 7], [0, 2, 3, 4, 5, 7, 9], [0, 2, 3, 4, 5, 7, 8], [0, 2, 3, 4, 5, 7, 8, 9], [0, 2, 3, 4, 5, 6], [0, 2, 3, 4, 5, 6, 9], [0, 2, 3, 4, 5, 6, 8], [0, 2, 3, 4, 5, 6, 8, 9], [0, 2, 3, 4, 5, 6, 7], [0, 2, 3, 4, 5, 6, 7, 9], [0, 2, 3, 4, 5, 6, 7, 8], [0, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1], [0, 1, 9], [0, 1, 8], [0, 1, 8, 9], [0, 1, 7], [0, 1, 7, 9], [0, 1, 7, 8], [0, 1, 7, 8, 9], [0, 1, 6], [0, 1, 6, 9], [0, 1, 6, 8], [0, 1, 6, 8, 9], [0, 1, 6, 7], [0, 1, 6, 7, 9], [0, 1, 6, 7, 8], [0, 1, 6, 7, 8, 9], [0, 1, 5], [0, 1, 5, 9], [0, 1, 5, 8], [0, 1, 5, 8, 9], [0, 1, 5, 7], [0, 1, 5, 7, 9], [0, 1, 5, 7, 8], [0, 1, 5, 7, 8, 9], [0, 1, 5, 6], [0, 1, 5, 6, 9], [0, 1, 5, 6, 8], [0, 1, 5, 6, 8, 9], [0, 1, 5, 6, 7], [0, 1, 5, 6, 7, 9], [0, 1, 5, 6, 7, 8], [0, 1, 5, 6, 7, 8, 9], [0, 1, 4], [0, 1, 4, 9], [0, 1, 4, 8], [0, 1, 4, 8, 9], [0, 1, 4, 7], [0, 1, 4, 7, 9], [0, 1, 4, 7, 8], [0, 1, 4, 7, 8, 9], [0, 1, 4, 6], [0, 1, 4, 6, 9], [0, 1, 4, 6, 8], [0, 1, 4, 6, 8, 9], [0, 1, 4, 6, 7], [0, 1, 4, 6, 7, 9], [0, 1, 4, 6, 7, 8], [0, 1, 4, 6, 7, 8, 9], [0, 1, 4, 5], [0, 1, 4, 5, 9], [0, 1, 4, 5, 8], [0, 1, 4, 5, 8, 9], [0, 1, 4, 5, 7], [0, 1, 4, 5, 7, 9], [0, 1, 4, 5, 7, 8], [0, 1, 4, 5, 7, 8, 9], [0, 1, 4, 5, 6], [0, 1, 4, 5, 6, 9], [0, 1, 4, 5, 6, 8], [0, 1, 4, 5, 6, 8, 9], [0, 1, 4, 5, 6, 7], [0, 1, 4, 5, 6, 7, 9], [0, 1, 4, 5, 6, 7, 8], [0, 1, 4, 5, 6, 7, 8, 9], [0, 1, 3], [0, 1, 3, 9], [0, 1, 3, 8], [0, 1, 3, 8, 9], [0, 1, 3, 7], [0, 1, 3, 7, 9], [0, 1, 3, 7, 8], [0, 1, 3, 7, 8, 9], [0, 1, 3, 6], [0, 1, 3, 6, 9], [0, 1, 3, 6, 8], [0, 1, 3, 6, 8, 9], [0, 1, 3, 6, 7], [0, 1, 3, 6, 7, 9], [0, 1, 3, 6, 7, 8], [0, 1, 3, 6, 7, 8, 9], [0, 1, 3, 5], [0, 1, 3, 5, 9], [0, 1, 3, 5, 8], [0, 1, 3, 5, 8, 9], [0, 1, 3, 5, 7], [0, 1, 3, 5, 7, 9], [0, 1, 3, 5, 7, 8], [0, 1, 3, 5, 7, 8, 9], [0, 1, 3, 5, 6], [0, 1, 3, 5, 6, 9], [0, 1, 3, 5, 6, 8], [0, 1, 3, 5, 6, 8, 9], [0, 1, 3, 5, 6, 7], [0, 1, 3, 5, 6, 7, 9], [0, 1, 3, 5, 6, 7, 8], [0, 1, 3, 5, 6, 7, 8, 9], [0, 1, 3, 4], [0, 1, 3, 4, 9], [0, 1, 3, 4, 8], [0, 1, 3, 4, 8, 9], [0, 1, 3, 4, 7], [0, 1, 3, 4, 7, 9], [0, 1, 3, 4, 7, 8], [0, 1, 3, 4, 7, 8, 9], [0, 1, 3, 4, 6], [0, 1, 3, 4, 6, 9], [0, 1, 3, 4, 6, 8], [0, 1, 3, 4, 6, 8, 9], [0, 1, 3, 4, 6, 7], [0, 1, 3, 4, 6, 7, 9], [0, 1, 3, 4, 6, 7, 8], [0, 1, 3, 4, 6, 7, 8, 9], [0, 1, 3, 4, 5], [0, 1, 3, 4, 5, 9], [0, 1, 3, 4, 5, 8], [0, 1, 3, 4, 5, 8, 9], [0, 1, 3, 4, 5, 7], [0, 1, 3, 4, 5, 7, 9], [0, 1, 3, 4, 5, 7, 8], [0, 1, 3, 4, 5, 7, 8, 9], [0, 1, 3, 4, 5, 6], [0, 1, 3, 4, 5, 6, 9], [0, 1, 3, 4, 5, 6, 8], [0, 1, 3, 4, 5, 6, 8, 9], [0, 1, 3, 4, 5, 6, 7], [0, 1, 3, 4, 5, 6, 7, 9], [0, 1, 3, 4, 5, 6, 7, 8], [0, 1, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2], [0, 1, 2, 9], [0, 1, 2, 8], [0, 1, 2, 8, 9], [0, 1, 2, 7], [0, 1, 2, 7, 9], [0, 1, 2, 7, 8], [0, 1, 2, 7, 8, 9], [0, 1, 2, 6], [0, 1, 2, 6, 9], [0, 1, 2, 6, 8], [0, 1, 2, 6, 8, 9], [0, 1, 2, 6, 7], [0, 1, 2, 6, 7, 9], [0, 1, 2, 6, 7, 8], [0, 1, 2, 6, 7, 8, 9], [0, 1, 2, 5], [0, 1, 2, 5, 9], [0, 1, 2, 5, 8], [0, 1, 2, 5, 8, 9], [0, 1, 2, 5, 7], [0, 1, 2, 5, 7, 9], [0, 1, 2, 5, 7, 8], [0, 1, 2, 5, 7, 8, 9], [0, 1, 2, 5, 6], [0, 1, 2, 5, 6, 9], [0, 1, 2, 5, 6, 8], [0, 1, 2, 5, 6, 8, 9], [0, 1, 2, 5, 6, 7], [0, 1, 2, 5, 6, 7, 9], [0, 1, 2, 5, 6, 7, 8], [0, 1, 2, 5, 6, 7, 8, 9], [0, 1, 2, 4], [0, 1, 2, 4, 9], [0, 1, 2, 4, 8], [0, 1, 2, 4, 8, 9], [0, 1, 2, 4, 7], [0, 1, 2, 4, 7, 9], [0, 1, 2, 4, 7, 8], [0, 1, 2, 4, 7, 8, 9], [0, 1, 2, 4, 6], [0, 1, 2, 4, 6, 9], [0, 1, 2, 4, 6, 8], [0, 1, 2, 4, 6, 8, 9], [0, 1, 2, 4, 6, 7], [0, 1, 2, 4, 6, 7, 9], [0, 1, 2, 4, 6, 7, 8], [0, 1, 2, 4, 6, 7, 8, 9], [0, 1, 2, 4, 5], [0, 1, 2, 4, 5, 9], [0, 1, 2, 4, 5, 8], [0, 1, 2, 4, 5, 8, 9], [0, 1, 2, 4, 5, 7], [0, 1, 2, 4, 5, 7, 9], [0, 1, 2, 4, 5, 7, 8], [0, 1, 2, 4, 5, 7, 8, 9], [0, 1, 2, 4, 5, 6], [0, 1, 2, 4, 5, 6, 9], [0, 1, 2, 4, 5, 6, 8], [0, 1, 2, 4, 5, 6, 8, 9], [0, 1, 2, 4, 5, 6, 7], [0, 1, 2, 4, 5, 6, 7, 9], [0, 1, 2, 4, 5, 6, 7, 8], [0, 1, 2, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3], [0, 1, 2, 3, 9], [0, 1, 2, 3, 8], [0, 1, 2, 3, 8, 9], [0, 1, 2, 3, 7], [0, 1, 2, 3, 7, 9], [0, 1, 2, 3, 7, 8], [0, 1, 2, 3, 7, 8, 9], [0, 1, 2, 3, 6], [0, 1, 2, 3, 6, 9], [0, 1, 2, 3, 6, 8], [0, 1, 2, 3, 6, 8, 9], [0, 1, 2, 3, 6, 7], [0, 1, 2, 3, 6, 7, 9], [0, 1, 2, 3, 6, 7, 8], [0, 1, 2, 3, 6, 7, 8, 9], [0, 1, 2, 3, 5], [0, 1, 2, 3, 5, 9], [0, 1, 2, 3, 5, 8], [0, 1, 2, 3, 5, 8, 9], [0, 1, 2, 3, 5, 7], [0, 1, 2, 3, 5, 7, 9], [0, 1, 2, 3, 5, 7, 8], [0, 1, 2, 3, 5, 7, 8, 9], [0, 1, 2, 3, 5, 6], [0, 1, 2, 3, 5, 6, 9], [0, 1, 2, 3, 5, 6, 8], [0, 1, 2, 3, 5, 6, 8, 9], [0, 1, 2, 3, 5, 6, 7], [0, 1, 2, 3, 5, 6, 7, 9], [0, 1, 2, 3, 5, 6, 7, 8], [0, 1, 2, 3, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 9], [0, 1, 2, 3, 4, 8], [0, 1, 2, 3, 4, 8, 9], [0, 1, 2, 3, 4, 7], [0, 1, 2, 3, 4, 7, 9], [0, 1, 2, 3, 4, 7, 8], [0, 1, 2, 3, 4, 7, 8, 9], [0, 1, 2, 3, 4, 6], [0, 1, 2, 3, 4, 6, 9], [0, 1, 2, 3, 4, 6, 8], [0, 1, 2, 3, 4, 6, 8, 9], [0, 1, 2, 3, 4, 6, 7], [0, 1, 2, 3, 4, 6, 7, 9], [0, 1, 2, 3, 4, 6, 7, 8], [0, 1, 2, 3, 4, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 9], [0, 1, 2, 3, 4, 5, 8], [0, 1, 2, 3, 4, 5, 8, 9], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7, 9], [0, 1, 2, 3, 4, 5, 7, 8], [0, 1, 2, 3, 4, 5, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 9], [0, 1, 2, 3, 4, 5, 6, 8], [0, 1, 2, 3, 4, 5, 6, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6, 7, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]"
      },
      {
        "input": "nums = [-3,1,4,-2,5,-6,7,-8,9,-10]",
        "output": "[[], [-10], [9], [9, -10], [-8], [-8, -10], [-8, 9], [-8, 9, -10], [7], [7, -10], [7, 9], [7, 9, -10], [7, -8], [7, -8, -10], [7, -8, 9], [7, -8, 9, -10], [-6], [-6, -10], [-6, 9], [-6, 9, -10], [-6, -8], [-6, -8, -10], [-6, -8, 9], [-6, -8, 9, -10], [-6, 7], [-6, 7, -10], [-6, 7, 9], [-6, 7, 9, -10], [-6, 7, -8], [-6, 7, -8, -10], [-6, 7, -8, 9], [-6, 7, -8, 9, -10], [5], [5, -10], [5, 9], [5, 9, -10], [5, -8], [5, -8, -10], [5, -8, 9], [5, -8, 9, -10], [5, 7], [5, 7, -10], [5, 7, 9], [5, 7, 9, -10], [5, 7, -8], [5, 7, -8, -10], [5, 7, -8, 9], [5, 7, -8, 9, -10], [5, -6], [5, -6, -10], [5, -6, 9], [5, -6, 9, -10], [5, -6, -8], [5, -6, -8, -10], [5, -6, -8, 9], [5, -6, -8, 9, -10], [5, -6, 7], [5, -6, 7, -10], [5, -6, 7, 9], [5, -6, 7, 9, -10], [5, -6, 7, -8], [5, -6, 7, -8, -10], [5, -6, 7, -8, 9], [5, -6, 7, -8, 9, -10], [-2], [-2, -10], [-2, 9], [-2, 9, -10], [-2, -8], [-2, -8, -10], [-2, -8, 9], [-2, -8, 9, -10], [-2, 7], [-2, 7, -10], [-2, 7, 9], [-2, 7, 9, -10], [-2, 7, -8], [-2, 7, -8, -10], [-2, 7, -8, 9], [-2, 7, -8, 9, -10], [-2, -6], [-2, -6, -10], [-2, -6, 9], [-2, -6, 9, -10], [-2, -6, -8], [-2, -6, -8, -10], [-2, -6, -8, 9], [-2, -6, -8, 9, -10], [-2, -6, 7], [-2, -6, 7, -10], [-2, -6, 7, 9], [-2, -6, 7, 9, -10], [-2, -6, 7, -8], [-2, -6, 7, -8, -10], [-2, -6, 7, -8, 9], [-2, -6, 7, -8, 9, -10], [-2, 5], [-2, 5, -10], [-2, 5, 9], [-2, 5, 9, -10], [-2, 5, -8], [-2, 5, -8, -10], [-2, 5, -8, 9], [-2, 5, -8, 9, -10], [-2, 5, 7], [-2, 5, 7, -10], [-2, 5, 7, 9], [-2, 5, 7, 9, -10], [-2, 5, 7, -8], [-2, 5, 7, -8, -10], [-2, 5, 7, -8, 9], [-2, 5, 7, -8, 9, -10], [-2, 5, -6], [-2, 5, -6, -10], [-2, 5, -6, 9], [-2, 5, -6, 9, -10], [-2, 5, -6, -8], [-2, 5, -6, -8, -10], [-2, 5, -6, -8, 9], [-2, 5, -6, -8, 9, -10], [-2, 5, -6, 7], [-2, 5, -6, 7, -10], [-2, 5, -6, 7, 9], [-2, 5, -6, 7, 9, -10], [-2, 5, -6, 7, -8], [-2, 5, -6, 7, -8, -10], [-2, 5, -6, 7, -8, 9], [-2, 5, -6, 7, -8, 9, -10], [4], [4, -10], [4, 9], [4, 9, -10], [4, -8], [4, -8, -10], [4, -8, 9], [4, -8, 9, -10], [4, 7], [4, 7, -10], [4, 7, 9], [4, 7, 9, -10], [4, 7, -8], [4, 7, -8, -10], [4, 7, -8, 9], [4, 7, -8, 9, -10], [4, -6], [4, -6, -10], [4, -6, 9], [4, -6, 9, -10], [4, -6, -8], [4, -6, -8, -10], [4, -6, -8, 9], [4, -6, -8, 9, -10], [4, -6, 7], [4, -6, 7, -10], [4, -6, 7, 9], [4, -6, 7, 9, -10], [4, -6, 7, -8], [4, -6, 7, -8, -10], [4, -6, 7, -8, 9], [4, -6, 7, -8, 9, -10], [4, 5], [4, 5, -10], [4, 5, 9], [4, 5, 9, -10], [4, 5, -8], [4, 5, -8, -10], [4, 5, -8, 9], [4, 5, -8, 9, -10], [4, 5, 7], [4, 5, 7, -10], [4, 5, 7, 9], [4, 5, 7, 9, -10], [4, 5, 7, -8], [4, 5, 7, -8, -10], [4, 5, 7, -8, 9], [4, 5, 7, -8, 9, -10], [4, 5, -6], [4, 5, -6, -10], [4, 5, -6, 9], [4, 5, -6, 9, -10], [4, 5, -6, -8], [4, 5, -6, -8, -10], [4, 5, -6, -8, 9], [4, 5, -6, -8, 9, -10], [4, 5, -6, 7], [4, 5, -6, 7, -10], [4, 5, -6, 7, 9], [4, 5, -6, 7, 9, -10], [4, 5, -6, 7, -8], [4, 5, -6, 7, -8, -10], [4, 5, -6, 7, -8, 9], [4, 5, -6, 7, -8, 9, -10], [4, -2], [4, -2, -10], [4, -2, 9], [4, -2, 9, -10], [4, -2, -8], [4, -2, -8, -10], [4, -2, -8, 9], [4, -2, -8, 9, -10], [4, -2, 7], [4, -2, 7, -10], [4, -2, 7, 9], [4, -2, 7, 9, -10], [4, -2, 7, -8], [4, -2, 7, -8, -10], [4, -2, 7, -8, 9], [4, -2, 7, -8, 9, -10], [4, -2, -6], [4, -2, -6, -10], [4, -2, -6, 9], [4, -2, -6, 9, -10], [4, -2, -6, -8], [4, -2, -6, -8, -10], [4, -2, -6, -8, 9], [4, -2, -6, -8, 9, -10], [4, -2, -6, 7], [4, -2, -6, 7, -10], [4, -2, -6, 7, 9], [4, -2, -6, 7, 9, -10], [4, -2, -6, 7, -8], [4, -2, -6, 7, -8, -10], [4, -2, -6, 7, -8, 9], [4, -2, -6, 7, -8, 9, -10], [4, -2, 5], [4, -2, 5, -10], [4, -2, 5, 9], [4, -2, 5, 9, -10], [4, -2, 5, -8], [4, -2, 5, -8, -10], [4, -2, 5, -8, 9], [4, -2, 5, -8, 9, -10], [4, -2, 5, 7], [4, -2, 5, 7, -10], [4, -2, 5, 7, 9], [4, -2, 5, 7, 9, -10], [4, -2, 5, 7, -8], [4, -2, 5, 7, -8, -10], [4, -2, 5, 7, -8, 9], [4, -2, 5, 7, -8, 9, -10], [4, -2, 5, -6], [4, -2, 5, -6, -10], [4, -2, 5, -6, 9], [4, -2, 5, -6, 9, -10], [4, -2, 5, -6, -8], [4, -2, 5, -6, -8, -10], [4, -2, 5, -6, -8, 9], [4, -2, 5, -6, -8, 9, -10], [4, -2, 5, -6, 7], [4, -2, 5, -6, 7, -10], [4, -2, 5, -6, 7, 9], [4, -2, 5, -6, 7, 9, -10], [4, -2, 5, -6, 7, -8], [4, -2, 5, -6, 7, -8, -10], [4, -2, 5, -6, 7, -8, 9], [4, -2, 5, -6, 7, -8, 9, -10], [1], [1, -10], [1, 9], [1, 9, -10], [1, -8], [1, -8, -10], [1, -8, 9], [1, -8, 9, -10], [1, 7], [1, 7, -10], [1, 7, 9], [1, 7, 9, -10], [1, 7, -8], [1, 7, -8, -10], [1, 7, -8, 9], [1, 7, -8, 9, -10], [1, -6], [1, -6, -10], [1, -6, 9], [1, -6, 9, -10], [1, -6, -8], [1, -6, -8, -10], [1, -6, -8, 9], [1, -6, -8, 9, -10], [1, -6, 7], [1, -6, 7, -10], [1, -6, 7, 9], [1, -6, 7, 9, -10], [1, -6, 7, -8], [1, -6, 7, -8, -10], [1, -6, 7, -8, 9], [1, -6, 7, -8, 9, -10], [1, 5], [1, 5, -10], [1, 5, 9], [1, 5, 9, -10], [1, 5, -8], [1, 5, -8, -10], [1, 5, -8, 9], [1, 5, -8, 9, -10], [1, 5, 7], [1, 5, 7, -10], [1, 5, 7, 9], [1, 5, 7, 9, -10], [1, 5, 7, -8], [1, 5, 7, -8, -10], [1, 5, 7, -8, 9], [1, 5, 7, -8, 9, -10], [1, 5, -6], [1, 5, -6, -10], [1, 5, -6, 9], [1, 5, -6, 9, -10], [1, 5, -6, -8], [1, 5, -6, -8, -10], [1, 5, -6, -8, 9], [1, 5, -6, -8, 9, -10], [1, 5, -6, 7], [1, 5, -6, 7, -10], [1, 5, -6, 7, 9], [1, 5, -6, 7, 9, -10], [1, 5, -6, 7, -8], [1, 5, -6, 7, -8, -10], [1, 5, -6, 7, -8, 9], [1, 5, -6, 7, -8, 9, -10], [1, -2], [1, -2, -10], [1, -2, 9], [1, -2, 9, -10], [1, -2, -8], [1, -2, -8, -10], [1, -2, -8, 9], [1, -2, -8, 9, -10], [1, -2, 7], [1, -2, 7, -10], [1, -2, 7, 9], [1, -2, 7, 9, -10], [1, -2, 7, -8], [1, -2, 7, -8, -10], [1, -2, 7, -8, 9], [1, -2, 7, -8, 9, -10], [1, -2, -6], [1, -2, -6, -10], [1, -2, -6, 9], [1, -2, -6, 9, -10], [1, -2, -6, -8], [1, -2, -6, -8, -10], [1, -2, -6, -8, 9], [1, -2, -6, -8, 9, -10], [1, -2, -6, 7], [1, -2, -6, 7, -10], [1, -2, -6, 7, 9], [1, -2, -6, 7, 9, -10], [1, -2, -6, 7, -8], [1, -2, -6, 7, -8, -10], [1, -2, -6, 7, -8, 9], [1, -2, -6, 7, -8, 9, -10], [1, -2, 5], [1, -2, 5, -10], [1, -2, 5, 9], [1, -2, 5, 9, -10], [1, -2, 5, -8], [1, -2, 5, -8, -10], [1, -2, 5, -8, 9], [1, -2, 5, -8, 9, -10], [1, -2, 5, 7], [1, -2, 5, 7, -10], [1, -2, 5, 7, 9], [1, -2, 5, 7, 9, -10], [1, -2, 5, 7, -8], [1, -2, 5, 7, -8, -10], [1, -2, 5, 7, -8, 9], [1, -2, 5, 7, -8, 9, -10], [1, -2, 5, -6], [1, -2, 5, -6, -10], [1, -2, 5, -6, 9], [1, -2, 5, -6, 9, -10], [1, -2, 5, -6, -8], [1, -2, 5, -6, -8, -10], [1, -2, 5, -6, -8, 9], [1, -2, 5, -6, -8, 9, -10], [1, -2, 5, -6, 7], [1, -2, 5, -6, 7, -10], [1, -2, 5, -6, 7, 9], [1, -2, 5, -6, 7, 9, -10], [1, -2, 5, -6, 7, -8], [1, -2, 5, -6, 7, -8, -10], [1, -2, 5, -6, 7, -8, 9], [1, -2, 5, -6, 7, -8, 9, -10], [1, 4], [1, 4, -10], [1, 4, 9], [1, 4, 9, -10], [1, 4, -8], [1, 4, -8, -10], [1, 4, -8, 9], [1, 4, -8, 9, -10], [1, 4, 7], [1, 4, 7, -10], [1, 4, 7, 9], [1, 4, 7, 9, -10], [1, 4, 7, -8], [1, 4, 7, -8, -10], [1, 4, 7, -8, 9], [1, 4, 7, -8, 9, -10], [1, 4, -6], [1, 4, -6, -10], [1, 4, -6, 9], [1, 4, -6, 9, -10], [1, 4, -6, -8], [1, 4, -6, -8, -10], [1, 4, -6, -8, 9], [1, 4, -6, -8, 9, -10], [1, 4, -6, 7], [1, 4, -6, 7, -10], [1, 4, -6, 7, 9], [1, 4, -6, 7, 9, -10], [1, 4, -6, 7, -8], [1, 4, -6, 7, -8, -10], [1, 4, -6, 7, -8, 9], [1, 4, -6, 7, -8, 9, -10], [1, 4, 5], [1, 4, 5, -10], [1, 4, 5, 9], [1, 4, 5, 9, -10], [1, 4, 5, -8], [1, 4, 5, -8, -10], [1, 4, 5, -8, 9], [1, 4, 5, -8, 9, -10], [1, 4, 5, 7], [1, 4, 5, 7, -10], [1, 4, 5, 7, 9], [1, 4, 5, 7, 9, -10], [1, 4, 5, 7, -8], [1, 4, 5, 7, -8, -10], [1, 4, 5, 7, -8, 9], [1, 4, 5, 7, -8, 9, -10], [1, 4, 5, -6], [1, 4, 5, -6, -10], [1, 4, 5, -6, 9], [1, 4, 5, -6, 9, -10], [1, 4, 5, -6, -8], [1, 4, 5, -6, -8, -10], [1, 4, 5, -6, -8, 9], [1, 4, 5, -6, -8, 9, -10], [1, 4, 5, -6, 7], [1, 4, 5, -6, 7, -10], [1, 4, 5, -6, 7, 9], [1, 4, 5, -6, 7, 9, -10], [1, 4, 5, -6, 7, -8], [1, 4, 5, -6, 7, -8, -10], [1, 4, 5, -6, 7, -8, 9], [1, 4, 5, -6, 7, -8, 9, -10], [1, 4, -2], [1, 4, -2, -10], [1, 4, -2, 9], [1, 4, -2, 9, -10], [1, 4, -2, -8], [1, 4, -2, -8, -10], [1, 4, -2, -8, 9], [1, 4, -2, -8, 9, -10], [1, 4, -2, 7], [1, 4, -2, 7, -10], [1, 4, -2, 7, 9], [1, 4, -2, 7, 9, -10], [1, 4, -2, 7, -8], [1, 4, -2, 7, -8, -10], [1, 4, -2, 7, -8, 9], [1, 4, -2, 7, -8, 9, -10], [1, 4, -2, -6], [1, 4, -2, -6, -10], [1, 4, -2, -6, 9], [1, 4, -2, -6, 9, -10], [1, 4, -2, -6, -8], [1, 4, -2, -6, -8, -10], [1, 4, -2, -6, -8, 9], [1, 4, -2, -6, -8, 9, -10], [1, 4, -2, -6, 7], [1, 4, -2, -6, 7, -10], [1, 4, -2, -6, 7, 9], [1, 4, -2, -6, 7, 9, -10], [1, 4, -2, -6, 7, -8], [1, 4, -2, -6, 7, -8, -10], [1, 4, -2, -6, 7, -8, 9], [1, 4, -2, -6, 7, -8, 9, -10], [1, 4, -2, 5], [1, 4, -2, 5, -10], [1, 4, -2, 5, 9], [1, 4, -2, 5, 9, -10], [1, 4, -2, 5, -8], [1, 4, -2, 5, -8, -10], [1, 4, -2, 5, -8, 9], [1, 4, -2, 5, -8, 9, -10], [1, 4, -2, 5, 7], [1, 4, -2, 5, 7, -10], [1, 4, -2, 5, 7, 9], [1, 4, -2, 5, 7, 9, -10], [1, 4, -2, 5, 7, -8], [1, 4, -2, 5, 7, -8, -10], [1, 4, -2, 5, 7, -8, 9], [1, 4, -2, 5, 7, -8, 9, -10], [1, 4, -2, 5, -6], [1, 4, -2, 5, -6, -10], [1, 4, -2, 5, -6, 9], [1, 4, -2, 5, -6, 9, -10], [1, 4, -2, 5, -6, -8], [1, 4, -2, 5, -6, -8, -10], [1, 4, -2, 5, -6, -8, 9], [1, 4, -2, 5, -6, -8, 9, -10], [1, 4, -2, 5, -6, 7], [1, 4, -2, 5, -6, 7, -10], [1, 4, -2, 5, -6, 7, 9], [1, 4, -2, 5, -6, 7, 9, -10], [1, 4, -2, 5, -6, 7, -8], [1, 4, -2, 5, -6, 7, -8, -10], [1, 4, -2, 5, -6, 7, -8, 9], [1, 4, -2, 5, -6, 7, -8, 9, -10], [-3], [-3, -10], [-3, 9], [-3, 9, -10], [-3, -8], [-3, -8, -10], [-3, -8, 9], [-3, -8, 9, -10], [-3, 7], [-3, 7, -10], [-3, 7, 9], [-3, 7, 9, -10], [-3, 7, -8], [-3, 7, -8, -10], [-3, 7, -8, 9], [-3, 7, -8, 9, -10], [-3, -6], [-3, -6, -10], [-3, -6, 9], [-3, -6, 9, -10], [-3, -6, -8], [-3, -6, -8, -10], [-3, -6, -8, 9], [-3, -6, -8, 9, -10], [-3, -6, 7], [-3, -6, 7, -10], [-3, -6, 7, 9], [-3, -6, 7, 9, -10], [-3, -6, 7, -8], [-3, -6, 7, -8, -10], [-3, -6, 7, -8, 9], [-3, -6, 7, -8, 9, -10], [-3, 5], [-3, 5, -10], [-3, 5, 9], [-3, 5, 9, -10], [-3, 5, -8], [-3, 5, -8, -10], [-3, 5, -8, 9], [-3, 5, -8, 9, -10], [-3, 5, 7], [-3, 5, 7, -10], [-3, 5, 7, 9], [-3, 5, 7, 9, -10], [-3, 5, 7, -8], [-3, 5, 7, -8, -10], [-3, 5, 7, -8, 9], [-3, 5, 7, -8, 9, -10], [-3, 5, -6], [-3, 5, -6, -10], [-3, 5, -6, 9], [-3, 5, -6, 9, -10], [-3, 5, -6, -8], [-3, 5, -6, -8, -10], [-3, 5, -6, -8, 9], [-3, 5, -6, -8, 9, -10], [-3, 5, -6, 7], [-3, 5, -6, 7, -10], [-3, 5, -6, 7, 9], [-3, 5, -6, 7, 9, -10], [-3, 5, -6, 7, -8], [-3, 5, -6, 7, -8, -10], [-3, 5, -6, 7, -8, 9], [-3, 5, -6, 7, -8, 9, -10], [-3, -2], [-3, -2, -10], [-3, -2, 9], [-3, -2, 9, -10], [-3, -2, -8], [-3, -2, -8, -10], [-3, -2, -8, 9], [-3, -2, -8, 9, -10], [-3, -2, 7], [-3, -2, 7, -10], [-3, -2, 7, 9], [-3, -2, 7, 9, -10], [-3, -2, 7, -8], [-3, -2, 7, -8, -10], [-3, -2, 7, -8, 9], [-3, -2, 7, -8, 9, -10], [-3, -2, -6], [-3, -2, -6, -10], [-3, -2, -6, 9], [-3, -2, -6, 9, -10], [-3, -2, -6, -8], [-3, -2, -6, -8, -10], [-3, -2, -6, -8, 9], [-3, -2, -6, -8, 9, -10], [-3, -2, -6, 7], [-3, -2, -6, 7, -10], [-3, -2, -6, 7, 9], [-3, -2, -6, 7, 9, -10], [-3, -2, -6, 7, -8], [-3, -2, -6, 7, -8, -10], [-3, -2, -6, 7, -8, 9], [-3, -2, -6, 7, -8, 9, -10], [-3, -2, 5], [-3, -2, 5, -10], [-3, -2, 5, 9], [-3, -2, 5, 9, -10], [-3, -2, 5, -8], [-3, -2, 5, -8, -10], [-3, -2, 5, -8, 9], [-3, -2, 5, -8, 9, -10], [-3, -2, 5, 7], [-3, -2, 5, 7, -10], [-3, -2, 5, 7, 9], [-3, -2, 5, 7, 9, -10], [-3, -2, 5, 7, -8], [-3, -2, 5, 7, -8, -10], [-3, -2, 5, 7, -8, 9], [-3, -2, 5, 7, -8, 9, -10], [-3, -2, 5, -6], [-3, -2, 5, -6, -10], [-3, -2, 5, -6, 9], [-3, -2, 5, -6, 9, -10], [-3, -2, 5, -6, -8], [-3, -2, 5, -6, -8, -10], [-3, -2, 5, -6, -8, 9], [-3, -2, 5, -6, -8, 9, -10], [-3, -2, 5, -6, 7], [-3, -2, 5, -6, 7, -10], [-3, -2, 5, -6, 7, 9], [-3, -2, 5, -6, 7, 9, -10], [-3, -2, 5, -6, 7, -8], [-3, -2, 5, -6, 7, -8, -10], [-3, -2, 5, -6, 7, -8, 9], [-3, -2, 5, -6, 7, -8, 9, -10], [-3, 4], [-3, 4, -10], [-3, 4, 9], [-3, 4, 9, -10], [-3, 4, -8], [-3, 4, -8, -10], [-3, 4, -8, 9], [-3, 4, -8, 9, -10], [-3, 4, 7], [-3, 4, 7, -10], [-3, 4, 7, 9], [-3, 4, 7, 9, -10], [-3, 4, 7, -8], [-3, 4, 7, -8, -10], [-3, 4, 7, -8, 9], [-3, 4, 7, -8, 9, -10], [-3, 4, -6], [-3, 4, -6, -10], [-3, 4, -6, 9], [-3, 4, -6, 9, -10], [-3, 4, -6, -8], [-3, 4, -6, -8, -10], [-3, 4, -6, -8, 9], [-3, 4, -6, -8, 9, -10], [-3, 4, -6, 7], [-3, 4, -6, 7, -10], [-3, 4, -6, 7, 9], [-3, 4, -6, 7, 9, -10], [-3, 4, -6, 7, -8], [-3, 4, -6, 7, -8, -10], [-3, 4, -6, 7, -8, 9], [-3, 4, -6, 7, -8, 9, -10], [-3, 4, 5], [-3, 4, 5, -10], [-3, 4, 5, 9], [-3, 4, 5, 9, -10], [-3, 4, 5, -8], [-3, 4, 5, -8, -10], [-3, 4, 5, -8, 9], [-3, 4, 5, -8, 9, -10], [-3, 4, 5, 7], [-3, 4, 5, 7, -10], [-3, 4, 5, 7, 9], [-3, 4, 5, 7, 9, -10], [-3, 4, 5, 7, -8], [-3, 4, 5, 7, -8, -10], [-3, 4, 5, 7, -8, 9], [-3, 4, 5, 7, -8, 9, -10], [-3, 4, 5, -6], [-3, 4, 5, -6, -10], [-3, 4, 5, -6, 9], [-3, 4, 5, -6, 9, -10], [-3, 4, 5, -6, -8], [-3, 4, 5, -6, -8, -10], [-3, 4, 5, -6, -8, 9], [-3, 4, 5, -6, -8, 9, -10], [-3, 4, 5, -6, 7], [-3, 4, 5, -6, 7, -10], [-3, 4, 5, -6, 7, 9], [-3, 4, 5, -6, 7, 9, -10], [-3, 4, 5, -6, 7, -8], [-3, 4, 5, -6, 7, -8, -10], [-3, 4, 5, -6, 7, -8, 9], [-3, 4, 5, -6, 7, -8, 9, -10], [-3, 4, -2], [-3, 4, -2, -10], [-3, 4, -2, 9], [-3, 4, -2, 9, -10], [-3, 4, -2, -8], [-3, 4, -2, -8, -10], [-3, 4, -2, -8, 9], [-3, 4, -2, -8, 9, -10], [-3, 4, -2, 7], [-3, 4, -2, 7, -10], [-3, 4, -2, 7, 9], [-3, 4, -2, 7, 9, -10], [-3, 4, -2, 7, -8], [-3, 4, -2, 7, -8, -10], [-3, 4, -2, 7, -8, 9], [-3, 4, -2, 7, -8, 9, -10], [-3, 4, -2, -6], [-3, 4, -2, -6, -10], [-3, 4, -2, -6, 9], [-3, 4, -2, -6, 9, -10], [-3, 4, -2, -6, -8], [-3, 4, -2, -6, -8, -10], [-3, 4, -2, -6, -8, 9], [-3, 4, -2, -6, -8, 9, -10], [-3, 4, -2, -6, 7], [-3, 4, -2, -6, 7, -10], [-3, 4, -2, -6, 7, 9], [-3, 4, -2, -6, 7, 9, -10], [-3, 4, -2, -6, 7, -8], [-3, 4, -2, -6, 7, -8, -10], [-3, 4, -2, -6, 7, -8, 9], [-3, 4, -2, -6, 7, -8, 9, -10], [-3, 4, -2, 5], [-3, 4, -2, 5, -10], [-3, 4, -2, 5, 9], [-3, 4, -2, 5, 9, -10], [-3, 4, -2, 5, -8], [-3, 4, -2, 5, -8, -10], [-3, 4, -2, 5, -8, 9], [-3, 4, -2, 5, -8, 9, -10], [-3, 4, -2, 5, 7], [-3, 4, -2, 5, 7, -10], [-3, 4, -2, 5, 7, 9], [-3, 4, -2, 5, 7, 9, -10], [-3, 4, -2, 5, 7, -8], [-3, 4, -2, 5, 7, -8, -10], [-3, 4, -2, 5, 7, -8, 9], [-3, 4, -2, 5, 7, -8, 9, -10], [-3, 4, -2, 5, -6], [-3, 4, -2, 5, -6, -10], [-3, 4, -2, 5, -6, 9], [-3, 4, -2, 5, -6, 9, -10], [-3, 4, -2, 5, -6, -8], [-3, 4, -2, 5, -6, -8, -10], [-3, 4, -2, 5, -6, -8, 9], [-3, 4, -2, 5, -6, -8, 9, -10], [-3, 4, -2, 5, -6, 7], [-3, 4, -2, 5, -6, 7, -10], [-3, 4, -2, 5, -6, 7, 9], [-3, 4, -2, 5, -6, 7, 9, -10], [-3, 4, -2, 5, -6, 7, -8], [-3, 4, -2, 5, -6, 7, -8, -10], [-3, 4, -2, 5, -6, 7, -8, 9], [-3, 4, -2, 5, -6, 7, -8, 9, -10], [-3, 1], [-3, 1, -10], [-3, 1, 9], [-3, 1, 9, -10], [-3, 1, -8], [-3, 1, -8, -10], [-3, 1, -8, 9], [-3, 1, -8, 9, -10], [-3, 1, 7], [-3, 1, 7, -10], [-3, 1, 7, 9], [-3, 1, 7, 9, -10], [-3, 1, 7, -8], [-3, 1, 7, -8, -10], [-3, 1, 7, -8, 9], [-3, 1, 7, -8, 9, -10], [-3, 1, -6], [-3, 1, -6, -10], [-3, 1, -6, 9], [-3, 1, -6, 9, -10], [-3, 1, -6, -8], [-3, 1, -6, -8, -10], [-3, 1, -6, -8, 9], [-3, 1, -6, -8, 9, -10], [-3, 1, -6, 7], [-3, 1, -6, 7, -10], [-3, 1, -6, 7, 9], [-3, 1, -6, 7, 9, -10], [-3, 1, -6, 7, -8], [-3, 1, -6, 7, -8, -10], [-3, 1, -6, 7, -8, 9], [-3, 1, -6, 7, -8, 9, -10], [-3, 1, 5], [-3, 1, 5, -10], [-3, 1, 5, 9], [-3, 1, 5, 9, -10], [-3, 1, 5, -8], [-3, 1, 5, -8, -10], [-3, 1, 5, -8, 9], [-3, 1, 5, -8, 9, -10], [-3, 1, 5, 7], [-3, 1, 5, 7, -10], [-3, 1, 5, 7, 9], [-3, 1, 5, 7, 9, -10], [-3, 1, 5, 7, -8], [-3, 1, 5, 7, -8, -10], [-3, 1, 5, 7, -8, 9], [-3, 1, 5, 7, -8, 9, -10], [-3, 1, 5, -6], [-3, 1, 5, -6, -10], [-3, 1, 5, -6, 9], [-3, 1, 5, -6, 9, -10], [-3, 1, 5, -6, -8], [-3, 1, 5, -6, -8, -10], [-3, 1, 5, -6, -8, 9], [-3, 1, 5, -6, -8, 9, -10], [-3, 1, 5, -6, 7], [-3, 1, 5, -6, 7, -10], [-3, 1, 5, -6, 7, 9], [-3, 1, 5, -6, 7, 9, -10], [-3, 1, 5, -6, 7, -8], [-3, 1, 5, -6, 7, -8, -10], [-3, 1, 5, -6, 7, -8, 9], [-3, 1, 5, -6, 7, -8, 9, -10], [-3, 1, -2], [-3, 1, -2, -10], [-3, 1, -2, 9], [-3, 1, -2, 9, -10], [-3, 1, -2, -8], [-3, 1, -2, -8, -10], [-3, 1, -2, -8, 9], [-3, 1, -2, -8, 9, -10], [-3, 1, -2, 7], [-3, 1, -2, 7, -10], [-3, 1, -2, 7, 9], [-3, 1, -2, 7, 9, -10], [-3, 1, -2, 7, -8], [-3, 1, -2, 7, -8, -10], [-3, 1, -2, 7, -8, 9], [-3, 1, -2, 7, -8, 9, -10], [-3, 1, -2, -6], [-3, 1, -2, -6, -10], [-3, 1, -2, -6, 9], [-3, 1, -2, -6, 9, -10], [-3, 1, -2, -6, -8], [-3, 1, -2, -6, -8, -10], [-3, 1, -2, -6, -8, 9], [-3, 1, -2, -6, -8, 9, -10], [-3, 1, -2, -6, 7], [-3, 1, -2, -6, 7, -10], [-3, 1, -2, -6, 7, 9], [-3, 1, -2, -6, 7, 9, -10], [-3, 1, -2, -6, 7, -8], [-3, 1, -2, -6, 7, -8, -10], [-3, 1, -2, -6, 7, -8, 9], [-3, 1, -2, -6, 7, -8, 9, -10], [-3, 1, -2, 5], [-3, 1, -2, 5, -10], [-3, 1, -2, 5, 9], [-3, 1, -2, 5, 9, -10], [-3, 1, -2, 5, -8], [-3, 1, -2, 5, -8, -10], [-3, 1, -2, 5, -8, 9], [-3, 1, -2, 5, -8, 9, -10], [-3, 1, -2, 5, 7], [-3, 1, -2, 5, 7, -10], [-3, 1, -2, 5, 7, 9], [-3, 1, -2, 5, 7, 9, -10], [-3, 1, -2, 5, 7, -8], [-3, 1, -2, 5, 7, -8, -10], [-3, 1, -2, 5, 7, -8, 9], [-3, 1, -2, 5, 7, -8, 9, -10], [-3, 1, -2, 5, -6], [-3, 1, -2, 5, -6, -10], [-3, 1, -2, 5, -6, 9], [-3, 1, -2, 5, -6, 9, -10], [-3, 1, -2, 5, -6, -8], [-3, 1, -2, 5, -6, -8, -10], [-3, 1, -2, 5, -6, -8, 9], [-3, 1, -2, 5, -6, -8, 9, -10], [-3, 1, -2, 5, -6, 7], [-3, 1, -2, 5, -6, 7, -10], [-3, 1, -2, 5, -6, 7, 9], [-3, 1, -2, 5, -6, 7, 9, -10], [-3, 1, -2, 5, -6, 7, -8], [-3, 1, -2, 5, -6, 7, -8, -10], [-3, 1, -2, 5, -6, 7, -8, 9], [-3, 1, -2, 5, -6, 7, -8, 9, -10], [-3, 1, 4], [-3, 1, 4, -10], [-3, 1, 4, 9], [-3, 1, 4, 9, -10], [-3, 1, 4, -8], [-3, 1, 4, -8, -10], [-3, 1, 4, -8, 9], [-3, 1, 4, -8, 9, -10], [-3, 1, 4, 7], [-3, 1, 4, 7, -10], [-3, 1, 4, 7, 9], [-3, 1, 4, 7, 9, -10], [-3, 1, 4, 7, -8], [-3, 1, 4, 7, -8, -10], [-3, 1, 4, 7, -8, 9], [-3, 1, 4, 7, -8, 9, -10], [-3, 1, 4, -6], [-3, 1, 4, -6, -10], [-3, 1, 4, -6, 9], [-3, 1, 4, -6, 9, -10], [-3, 1, 4, -6, -8], [-3, 1, 4, -6, -8, -10], [-3, 1, 4, -6, -8, 9], [-3, 1, 4, -6, -8, 9, -10], [-3, 1, 4, -6, 7], [-3, 1, 4, -6, 7, -10], [-3, 1, 4, -6, 7, 9], [-3, 1, 4, -6, 7, 9, -10], [-3, 1, 4, -6, 7, -8], [-3, 1, 4, -6, 7, -8, -10], [-3, 1, 4, -6, 7, -8, 9], [-3, 1, 4, -6, 7, -8, 9, -10], [-3, 1, 4, 5], [-3, 1, 4, 5, -10], [-3, 1, 4, 5, 9], [-3, 1, 4, 5, 9, -10], [-3, 1, 4, 5, -8], [-3, 1, 4, 5, -8, -10], [-3, 1, 4, 5, -8, 9], [-3, 1, 4, 5, -8, 9, -10], [-3, 1, 4, 5, 7], [-3, 1, 4, 5, 7, -10], [-3, 1, 4, 5, 7, 9], [-3, 1, 4, 5, 7, 9, -10], [-3, 1, 4, 5, 7, -8], [-3, 1, 4, 5, 7, -8, -10], [-3, 1, 4, 5, 7, -8, 9], [-3, 1, 4, 5, 7, -8, 9, -10], [-3, 1, 4, 5, -6], [-3, 1, 4, 5, -6, -10], [-3, 1, 4, 5, -6, 9], [-3, 1, 4, 5, -6, 9, -10], [-3, 1, 4, 5, -6, -8], [-3, 1, 4, 5, -6, -8, -10], [-3, 1, 4, 5, -6, -8, 9], [-3, 1, 4, 5, -6, -8, 9, -10], [-3, 1, 4, 5, -6, 7], [-3, 1, 4, 5, -6, 7, -10], [-3, 1, 4, 5, -6, 7, 9], [-3, 1, 4, 5, -6, 7, 9, -10], [-3, 1, 4, 5, -6, 7, -8], [-3, 1, 4, 5, -6, 7, -8, -10], [-3, 1, 4, 5, -6, 7, -8, 9], [-3, 1, 4, 5, -6, 7, -8, 9, -10], [-3, 1, 4, -2], [-3, 1, 4, -2, -10], [-3, 1, 4, -2, 9], [-3, 1, 4, -2, 9, -10], [-3, 1, 4, -2, -8], [-3, 1, 4, -2, -8, -10], [-3, 1, 4, -2, -8, 9], [-3, 1, 4, -2, -8, 9, -10], [-3, 1, 4, -2, 7], [-3, 1, 4, -2, 7, -10], [-3, 1, 4, -2, 7, 9], [-3, 1, 4, -2, 7, 9, -10], [-3, 1, 4, -2, 7, -8], [-3, 1, 4, -2, 7, -8, -10], [-3, 1, 4, -2, 7, -8, 9], [-3, 1, 4, -2, 7, -8, 9, -10], [-3, 1, 4, -2, -6], [-3, 1, 4, -2, -6, -10], [-3, 1, 4, -2, -6, 9], [-3, 1, 4, -2, -6, 9, -10], [-3, 1, 4, -2, -6, -8], [-3, 1, 4, -2, -6, -8, -10], [-3, 1, 4, -2, -6, -8, 9], [-3, 1, 4, -2, -6, -8, 9, -10], [-3, 1, 4, -2, -6, 7], [-3, 1, 4, -2, -6, 7, -10], [-3, 1, 4, -2, -6, 7, 9], [-3, 1, 4, -2, -6, 7, 9, -10], [-3, 1, 4, -2, -6, 7, -8], [-3, 1, 4, -2, -6, 7, -8, -10], [-3, 1, 4, -2, -6, 7, -8, 9], [-3, 1, 4, -2, -6, 7, -8, 9, -10], [-3, 1, 4, -2, 5], [-3, 1, 4, -2, 5, -10], [-3, 1, 4, -2, 5, 9], [-3, 1, 4, -2, 5, 9, -10], [-3, 1, 4, -2, 5, -8], [-3, 1, 4, -2, 5, -8, -10], [-3, 1, 4, -2, 5, -8, 9], [-3, 1, 4, -2, 5, -8, 9, -10], [-3, 1, 4, -2, 5, 7], [-3, 1, 4, -2, 5, 7, -10], [-3, 1, 4, -2, 5, 7, 9], [-3, 1, 4, -2, 5, 7, 9, -10], [-3, 1, 4, -2, 5, 7, -8], [-3, 1, 4, -2, 5, 7, -8, -10], [-3, 1, 4, -2, 5, 7, -8, 9], [-3, 1, 4, -2, 5, 7, -8, 9, -10], [-3, 1, 4, -2, 5, -6], [-3, 1, 4, -2, 5, -6, -10], [-3, 1, 4, -2, 5, -6, 9], [-3, 1, 4, -2, 5, -6, 9, -10], [-3, 1, 4, -2, 5, -6, -8], [-3, 1, 4, -2, 5, -6, -8, -10], [-3, 1, 4, -2, 5, -6, -8, 9], [-3, 1, 4, -2, 5, -6, -8, 9, -10], [-3, 1, 4, -2, 5, -6, 7], [-3, 1, 4, -2, 5, -6, 7, -10], [-3, 1, 4, -2, 5, -6, 7, 9], [-3, 1, 4, -2, 5, -6, 7, 9, -10], [-3, 1, 4, -2, 5, -6, 7, -8], [-3, 1, 4, -2, 5, -6, 7, -8, -10], [-3, 1, 4, -2, 5, -6, 7, -8, 9], [-3, 1, 4, -2, 5, -6, 7, -8, 9, -10]]"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]",
        "output": "[[], [-10], [-9], [-9, -10], [-8], [-8, -10], [-8, -9], [-8, -9, -10], [-7], [-7, -10], [-7, -9], [-7, -9, -10], [-7, -8], [-7, -8, -10], [-7, -8, -9], [-7, -8, -9, -10], [-6], [-6, -10], [-6, -9], [-6, -9, -10], [-6, -8], [-6, -8, -10], [-6, -8, -9], [-6, -8, -9, -10], [-6, -7], [-6, -7, -10], [-6, -7, -9], [-6, -7, -9, -10], [-6, -7, -8], [-6, -7, -8, -10], [-6, -7, -8, -9], [-6, -7, -8, -9, -10], [-5], [-5, -10], [-5, -9], [-5, -9, -10], [-5, -8], [-5, -8, -10], [-5, -8, -9], [-5, -8, -9, -10], [-5, -7], [-5, -7, -10], [-5, -7, -9], [-5, -7, -9, -10], [-5, -7, -8], [-5, -7, -8, -10], [-5, -7, -8, -9], [-5, -7, -8, -9, -10], [-5, -6], [-5, -6, -10], [-5, -6, -9], [-5, -6, -9, -10], [-5, -6, -8], [-5, -6, -8, -10], [-5, -6, -8, -9], [-5, -6, -8, -9, -10], [-5, -6, -7], [-5, -6, -7, -10], [-5, -6, -7, -9], [-5, -6, -7, -9, -10], [-5, -6, -7, -8], [-5, -6, -7, -8, -10], [-5, -6, -7, -8, -9], [-5, -6, -7, -8, -9, -10], [-4], [-4, -10], [-4, -9], [-4, -9, -10], [-4, -8], [-4, -8, -10], [-4, -8, -9], [-4, -8, -9, -10], [-4, -7], [-4, -7, -10], [-4, -7, -9], [-4, -7, -9, -10], [-4, -7, -8], [-4, -7, -8, -10], [-4, -7, -8, -9], [-4, -7, -8, -9, -10], [-4, -6], [-4, -6, -10], [-4, -6, -9], [-4, -6, -9, -10], [-4, -6, -8], [-4, -6, -8, -10], [-4, -6, -8, -9], [-4, -6, -8, -9, -10], [-4, -6, -7], [-4, -6, -7, -10], [-4, -6, -7, -9], [-4, -6, -7, -9, -10], [-4, -6, -7, -8], [-4, -6, -7, -8, -10], [-4, -6, -7, -8, -9], [-4, -6, -7, -8, -9, -10], [-4, -5], [-4, -5, -10], [-4, -5, -9], [-4, -5, -9, -10], [-4, -5, -8], [-4, -5, -8, -10], [-4, -5, -8, -9], [-4, -5, -8, -9, -10], [-4, -5, -7], [-4, -5, -7, -10], [-4, -5, -7, -9], [-4, -5, -7, -9, -10], [-4, -5, -7, -8], [-4, -5, -7, -8, -10], [-4, -5, -7, -8, -9], [-4, -5, -7, -8, -9, -10], [-4, -5, -6], [-4, -5, -6, -10], [-4, -5, -6, -9], [-4, -5, -6, -9, -10], [-4, -5, -6, -8], [-4, -5, -6, -8, -10], [-4, -5, -6, -8, -9], [-4, -5, -6, -8, -9, -10], [-4, -5, -6, -7], [-4, -5, -6, -7, -10], [-4, -5, -6, -7, -9], [-4, -5, -6, -7, -9, -10], [-4, -5, -6, -7, -8], [-4, -5, -6, -7, -8, -10], [-4, -5, -6, -7, -8, -9], [-4, -5, -6, -7, -8, -9, -10], [-3], [-3, -10], [-3, -9], [-3, -9, -10], [-3, -8], [-3, -8, -10], [-3, -8, -9], [-3, -8, -9, -10], [-3, -7], [-3, -7, -10], [-3, -7, -9], [-3, -7, -9, -10], [-3, -7, -8], [-3, -7, -8, -10], [-3, -7, -8, -9], [-3, -7, -8, -9, -10], [-3, -6], [-3, -6, -10], [-3, -6, -9], [-3, -6, -9, -10], [-3, -6, -8], [-3, -6, -8, -10], [-3, -6, -8, -9], [-3, -6, -8, -9, -10], [-3, -6, -7], [-3, -6, -7, -10], [-3, -6, -7, -9], [-3, -6, -7, -9, -10], [-3, -6, -7, -8], [-3, -6, -7, -8, -10], [-3, -6, -7, -8, -9], [-3, -6, -7, -8, -9, -10], [-3, -5], [-3, -5, -10], [-3, -5, -9], [-3, -5, -9, -10], [-3, -5, -8], [-3, -5, -8, -10], [-3, -5, -8, -9], [-3, -5, -8, -9, -10], [-3, -5, -7], [-3, -5, -7, -10], [-3, -5, -7, -9], [-3, -5, -7, -9, -10], [-3, -5, -7, -8], [-3, -5, -7, -8, -10], [-3, -5, -7, -8, -9], [-3, -5, -7, -8, -9, -10], [-3, -5, -6], [-3, -5, -6, -10], [-3, -5, -6, -9], [-3, -5, -6, -9, -10], [-3, -5, -6, -8], [-3, -5, -6, -8, -10], [-3, -5, -6, -8, -9], [-3, -5, -6, -8, -9, -10], [-3, -5, -6, -7], [-3, -5, -6, -7, -10], [-3, -5, -6, -7, -9], [-3, -5, -6, -7, -9, -10], [-3, -5, -6, -7, -8], [-3, -5, -6, -7, -8, -10], [-3, -5, -6, -7, -8, -9], [-3, -5, -6, -7, -8, -9, -10], [-3, -4], [-3, -4, -10], [-3, -4, -9], [-3, -4, -9, -10], [-3, -4, -8], [-3, -4, -8, -10], [-3, -4, -8, -9], [-3, -4, -8, -9, -10], [-3, -4, -7], [-3, -4, -7, -10], [-3, -4, -7, -9], [-3, -4, -7, -9, -10], [-3, -4, -7, -8], [-3, -4, -7, -8, -10], [-3, -4, -7, -8, -9], [-3, -4, -7, -8, -9, -10], [-3, -4, -6], [-3, -4, -6, -10], [-3, -4, -6, -9], [-3, -4, -6, -9, -10], [-3, -4, -6, -8], [-3, -4, -6, -8, -10], [-3, -4, -6, -8, -9], [-3, -4, -6, -8, -9, -10], [-3, -4, -6, -7], [-3, -4, -6, -7, -10], [-3, -4, -6, -7, -9], [-3, -4, -6, -7, -9, -10], [-3, -4, -6, -7, -8], [-3, -4, -6, -7, -8, -10], [-3, -4, -6, -7, -8, -9], [-3, -4, -6, -7, -8, -9, -10], [-3, -4, -5], [-3, -4, -5, -10], [-3, -4, -5, -9], [-3, -4, -5, -9, -10], [-3, -4, -5, -8], [-3, -4, -5, -8, -10], [-3, -4, -5, -8, -9], [-3, -4, -5, -8, -9, -10], [-3, -4, -5, -7], [-3, -4, -5, -7, -10], [-3, -4, -5, -7, -9], [-3, -4, -5, -7, -9, -10], [-3, -4, -5, -7, -8], [-3, -4, -5, -7, -8, -10], [-3, -4, -5, -7, -8, -9], [-3, -4, -5, -7, -8, -9, -10], [-3, -4, -5, -6], [-3, -4, -5, -6, -10], [-3, -4, -5, -6, -9], [-3, -4, -5, -6, -9, -10], [-3, -4, -5, -6, -8], [-3, -4, -5, -6, -8, -10], [-3, -4, -5, -6, -8, -9], [-3, -4, -5, -6, -8, -9, -10], [-3, -4, -5, -6, -7], [-3, -4, -5, -6, -7, -10], [-3, -4, -5, -6, -7, -9], [-3, -4, -5, -6, -7, -9, -10], [-3, -4, -5, -6, -7, -8], [-3, -4, -5, -6, -7, -8, -10], [-3, -4, -5, -6, -7, -8, -9], [-3, -4, -5, -6, -7, -8, -9, -10], [-2], [-2, -10], [-2, -9], [-2, -9, -10], [-2, -8], [-2, -8, -10], [-2, -8, -9], [-2, -8, -9, -10], [-2, -7], [-2, -7, -10], [-2, -7, -9], [-2, -7, -9, -10], [-2, -7, -8], [-2, -7, -8, -10], [-2, -7, -8, -9], [-2, -7, -8, -9, -10], [-2, -6], [-2, -6, -10], [-2, -6, -9], [-2, -6, -9, -10], [-2, -6, -8], [-2, -6, -8, -10], [-2, -6, -8, -9], [-2, -6, -8, -9, -10], [-2, -6, -7], [-2, -6, -7, -10], [-2, -6, -7, -9], [-2, -6, -7, -9, -10], [-2, -6, -7, -8], [-2, -6, -7, -8, -10], [-2, -6, -7, -8, -9], [-2, -6, -7, -8, -9, -10], [-2, -5], [-2, -5, -10], [-2, -5, -9], [-2, -5, -9, -10], [-2, -5, -8], [-2, -5, -8, -10], [-2, -5, -8, -9], [-2, -5, -8, -9, -10], [-2, -5, -7], [-2, -5, -7, -10], [-2, -5, -7, -9], [-2, -5, -7, -9, -10], [-2, -5, -7, -8], [-2, -5, -7, -8, -10], [-2, -5, -7, -8, -9], [-2, -5, -7, -8, -9, -10], [-2, -5, -6], [-2, -5, -6, -10], [-2, -5, -6, -9], [-2, -5, -6, -9, -10], [-2, -5, -6, -8], [-2, -5, -6, -8, -10], [-2, -5, -6, -8, -9], [-2, -5, -6, -8, -9, -10], [-2, -5, -6, -7], [-2, -5, -6, -7, -10], [-2, -5, -6, -7, -9], [-2, -5, -6, -7, -9, -10], [-2, -5, -6, -7, -8], [-2, -5, -6, -7, -8, -10], [-2, -5, -6, -7, -8, -9], [-2, -5, -6, -7, -8, -9, -10], [-2, -4], [-2, -4, -10], [-2, -4, -9], [-2, -4, -9, -10], [-2, -4, -8], [-2, -4, -8, -10], [-2, -4, -8, -9], [-2, -4, -8, -9, -10], [-2, -4, -7], [-2, -4, -7, -10], [-2, -4, -7, -9], [-2, -4, -7, -9, -10], [-2, -4, -7, -8], [-2, -4, -7, -8, -10], [-2, -4, -7, -8, -9], [-2, -4, -7, -8, -9, -10], [-2, -4, -6], [-2, -4, -6, -10], [-2, -4, -6, -9], [-2, -4, -6, -9, -10], [-2, -4, -6, -8], [-2, -4, -6, -8, -10], [-2, -4, -6, -8, -9], [-2, -4, -6, -8, -9, -10], [-2, -4, -6, -7], [-2, -4, -6, -7, -10], [-2, -4, -6, -7, -9], [-2, -4, -6, -7, -9, -10], [-2, -4, -6, -7, -8], [-2, -4, -6, -7, -8, -10], [-2, -4, -6, -7, -8, -9], [-2, -4, -6, -7, -8, -9, -10], [-2, -4, -5], [-2, -4, -5, -10], [-2, -4, -5, -9], [-2, -4, -5, -9, -10], [-2, -4, -5, -8], [-2, -4, -5, -8, -10], [-2, -4, -5, -8, -9], [-2, -4, -5, -8, -9, -10], [-2, -4, -5, -7], [-2, -4, -5, -7, -10], [-2, -4, -5, -7, -9], [-2, -4, -5, -7, -9, -10], [-2, -4, -5, -7, -8], [-2, -4, -5, -7, -8, -10], [-2, -4, -5, -7, -8, -9], [-2, -4, -5, -7, -8, -9, -10], [-2, -4, -5, -6], [-2, -4, -5, -6, -10], [-2, -4, -5, -6, -9], [-2, -4, -5, -6, -9, -10], [-2, -4, -5, -6, -8], [-2, -4, -5, -6, -8, -10], [-2, -4, -5, -6, -8, -9], [-2, -4, -5, -6, -8, -9, -10], [-2, -4, -5, -6, -7], [-2, -4, -5, -6, -7, -10], [-2, -4, -5, -6, -7, -9], [-2, -4, -5, -6, -7, -9, -10], [-2, -4, -5, -6, -7, -8], [-2, -4, -5, -6, -7, -8, -10], [-2, -4, -5, -6, -7, -8, -9], [-2, -4, -5, -6, -7, -8, -9, -10], [-2, -3], [-2, -3, -10], [-2, -3, -9], [-2, -3, -9, -10], [-2, -3, -8], [-2, -3, -8, -10], [-2, -3, -8, -9], [-2, -3, -8, -9, -10], [-2, -3, -7], [-2, -3, -7, -10], [-2, -3, -7, -9], [-2, -3, -7, -9, -10], [-2, -3, -7, -8], [-2, -3, -7, -8, -10], [-2, -3, -7, -8, -9], [-2, -3, -7, -8, -9, -10], [-2, -3, -6], [-2, -3, -6, -10], [-2, -3, -6, -9], [-2, -3, -6, -9, -10], [-2, -3, -6, -8], [-2, -3, -6, -8, -10], [-2, -3, -6, -8, -9], [-2, -3, -6, -8, -9, -10], [-2, -3, -6, -7], [-2, -3, -6, -7, -10], [-2, -3, -6, -7, -9], [-2, -3, -6, -7, -9, -10], [-2, -3, -6, -7, -8], [-2, -3, -6, -7, -8, -10], [-2, -3, -6, -7, -8, -9], [-2, -3, -6, -7, -8, -9, -10], [-2, -3, -5], [-2, -3, -5, -10], [-2, -3, -5, -9], [-2, -3, -5, -9, -10], [-2, -3, -5, -8], [-2, -3, -5, -8, -10], [-2, -3, -5, -8, -9], [-2, -3, -5, -8, -9, -10], [-2, -3, -5, -7], [-2, -3, -5, -7, -10], [-2, -3, -5, -7, -9], [-2, -3, -5, -7, -9, -10], [-2, -3, -5, -7, -8], [-2, -3, -5, -7, -8, -10], [-2, -3, -5, -7, -8, -9], [-2, -3, -5, -7, -8, -9, -10], [-2, -3, -5, -6], [-2, -3, -5, -6, -10], [-2, -3, -5, -6, -9], [-2, -3, -5, -6, -9, -10], [-2, -3, -5, -6, -8], [-2, -3, -5, -6, -8, -10], [-2, -3, -5, -6, -8, -9], [-2, -3, -5, -6, -8, -9, -10], [-2, -3, -5, -6, -7], [-2, -3, -5, -6, -7, -10], [-2, -3, -5, -6, -7, -9], [-2, -3, -5, -6, -7, -9, -10], [-2, -3, -5, -6, -7, -8], [-2, -3, -5, -6, -7, -8, -10], [-2, -3, -5, -6, -7, -8, -9], [-2, -3, -5, -6, -7, -8, -9, -10], [-2, -3, -4], [-2, -3, -4, -10], [-2, -3, -4, -9], [-2, -3, -4, -9, -10], [-2, -3, -4, -8], [-2, -3, -4, -8, -10], [-2, -3, -4, -8, -9], [-2, -3, -4, -8, -9, -10], [-2, -3, -4, -7], [-2, -3, -4, -7, -10], [-2, -3, -4, -7, -9], [-2, -3, -4, -7, -9, -10], [-2, -3, -4, -7, -8], [-2, -3, -4, -7, -8, -10], [-2, -3, -4, -7, -8, -9], [-2, -3, -4, -7, -8, -9, -10], [-2, -3, -4, -6], [-2, -3, -4, -6, -10], [-2, -3, -4, -6, -9], [-2, -3, -4, -6, -9, -10], [-2, -3, -4, -6, -8], [-2, -3, -4, -6, -8, -10], [-2, -3, -4, -6, -8, -9], [-2, -3, -4, -6, -8, -9, -10], [-2, -3, -4, -6, -7], [-2, -3, -4, -6, -7, -10], [-2, -3, -4, -6, -7, -9], [-2, -3, -4, -6, -7, -9, -10], [-2, -3, -4, -6, -7, -8], [-2, -3, -4, -6, -7, -8, -10], [-2, -3, -4, -6, -7, -8, -9], [-2, -3, -4, -6, -7, -8, -9, -10], [-2, -3, -4, -5], [-2, -3, -4, -5, -10], [-2, -3, -4, -5, -9], [-2, -3, -4, -5, -9, -10], [-2, -3, -4, -5, -8], [-2, -3, -4, -5, -8, -10], [-2, -3, -4, -5, -8, -9], [-2, -3, -4, -5, -8, -9, -10], [-2, -3, -4, -5, -7], [-2, -3, -4, -5, -7, -10], [-2, -3, -4, -5, -7, -9], [-2, -3, -4, -5, -7, -9, -10], [-2, -3, -4, -5, -7, -8], [-2, -3, -4, -5, -7, -8, -10], [-2, -3, -4, -5, -7, -8, -9], [-2, -3, -4, -5, -7, -8, -9, -10], [-2, -3, -4, -5, -6], [-2, -3, -4, -5, -6, -10], [-2, -3, -4, -5, -6, -9], [-2, -3, -4, -5, -6, -9, -10], [-2, -3, -4, -5, -6, -8], [-2, -3, -4, -5, -6, -8, -10], [-2, -3, -4, -5, -6, -8, -9], [-2, -3, -4, -5, -6, -8, -9, -10], [-2, -3, -4, -5, -6, -7], [-2, -3, -4, -5, -6, -7, -10], [-2, -3, -4, -5, -6, -7, -9], [-2, -3, -4, -5, -6, -7, -9, -10], [-2, -3, -4, -5, -6, -7, -8], [-2, -3, -4, -5, -6, -7, -8, -10], [-2, -3, -4, -5, -6, -7, -8, -9], [-2, -3, -4, -5, -6, -7, -8, -9, -10], [-1], [-1, -10], [-1, -9], [-1, -9, -10], [-1, -8], [-1, -8, -10], [-1, -8, -9], [-1, -8, -9, -10], [-1, -7], [-1, -7, -10], [-1, -7, -9], [-1, -7, -9, -10], [-1, -7, -8], [-1, -7, -8, -10], [-1, -7, -8, -9], [-1, -7, -8, -9, -10], [-1, -6], [-1, -6, -10], [-1, -6, -9], [-1, -6, -9, -10], [-1, -6, -8], [-1, -6, -8, -10], [-1, -6, -8, -9], [-1, -6, -8, -9, -10], [-1, -6, -7], [-1, -6, -7, -10], [-1, -6, -7, -9], [-1, -6, -7, -9, -10], [-1, -6, -7, -8], [-1, -6, -7, -8, -10], [-1, -6, -7, -8, -9], [-1, -6, -7, -8, -9, -10], [-1, -5], [-1, -5, -10], [-1, -5, -9], [-1, -5, -9, -10], [-1, -5, -8], [-1, -5, -8, -10], [-1, -5, -8, -9], [-1, -5, -8, -9, -10], [-1, -5, -7], [-1, -5, -7, -10], [-1, -5, -7, -9], [-1, -5, -7, -9, -10], [-1, -5, -7, -8], [-1, -5, -7, -8, -10], [-1, -5, -7, -8, -9], [-1, -5, -7, -8, -9, -10], [-1, -5, -6], [-1, -5, -6, -10], [-1, -5, -6, -9], [-1, -5, -6, -9, -10], [-1, -5, -6, -8], [-1, -5, -6, -8, -10], [-1, -5, -6, -8, -9], [-1, -5, -6, -8, -9, -10], [-1, -5, -6, -7], [-1, -5, -6, -7, -10], [-1, -5, -6, -7, -9], [-1, -5, -6, -7, -9, -10], [-1, -5, -6, -7, -8], [-1, -5, -6, -7, -8, -10], [-1, -5, -6, -7, -8, -9], [-1, -5, -6, -7, -8, -9, -10], [-1, -4], [-1, -4, -10], [-1, -4, -9], [-1, -4, -9, -10], [-1, -4, -8], [-1, -4, -8, -10], [-1, -4, -8, -9], [-1, -4, -8, -9, -10], [-1, -4, -7], [-1, -4, -7, -10], [-1, -4, -7, -9], [-1, -4, -7, -9, -10], [-1, -4, -7, -8], [-1, -4, -7, -8, -10], [-1, -4, -7, -8, -9], [-1, -4, -7, -8, -9, -10], [-1, -4, -6], [-1, -4, -6, -10], [-1, -4, -6, -9], [-1, -4, -6, -9, -10], [-1, -4, -6, -8], [-1, -4, -6, -8, -10], [-1, -4, -6, -8, -9], [-1, -4, -6, -8, -9, -10], [-1, -4, -6, -7], [-1, -4, -6, -7, -10], [-1, -4, -6, -7, -9], [-1, -4, -6, -7, -9, -10], [-1, -4, -6, -7, -8], [-1, -4, -6, -7, -8, -10], [-1, -4, -6, -7, -8, -9], [-1, -4, -6, -7, -8, -9, -10], [-1, -4, -5], [-1, -4, -5, -10], [-1, -4, -5, -9], [-1, -4, -5, -9, -10], [-1, -4, -5, -8], [-1, -4, -5, -8, -10], [-1, -4, -5, -8, -9], [-1, -4, -5, -8, -9, -10], [-1, -4, -5, -7], [-1, -4, -5, -7, -10], [-1, -4, -5, -7, -9], [-1, -4, -5, -7, -9, -10], [-1, -4, -5, -7, -8], [-1, -4, -5, -7, -8, -10], [-1, -4, -5, -7, -8, -9], [-1, -4, -5, -7, -8, -9, -10], [-1, -4, -5, -6], [-1, -4, -5, -6, -10], [-1, -4, -5, -6, -9], [-1, -4, -5, -6, -9, -10], [-1, -4, -5, -6, -8], [-1, -4, -5, -6, -8, -10], [-1, -4, -5, -6, -8, -9], [-1, -4, -5, -6, -8, -9, -10], [-1, -4, -5, -6, -7], [-1, -4, -5, -6, -7, -10], [-1, -4, -5, -6, -7, -9], [-1, -4, -5, -6, -7, -9, -10], [-1, -4, -5, -6, -7, -8], [-1, -4, -5, -6, -7, -8, -10], [-1, -4, -5, -6, -7, -8, -9], [-1, -4, -5, -6, -7, -8, -9, -10], [-1, -3], [-1, -3, -10], [-1, -3, -9], [-1, -3, -9, -10], [-1, -3, -8], [-1, -3, -8, -10], [-1, -3, -8, -9], [-1, -3, -8, -9, -10], [-1, -3, -7], [-1, -3, -7, -10], [-1, -3, -7, -9], [-1, -3, -7, -9, -10], [-1, -3, -7, -8], [-1, -3, -7, -8, -10], [-1, -3, -7, -8, -9], [-1, -3, -7, -8, -9, -10], [-1, -3, -6], [-1, -3, -6, -10], [-1, -3, -6, -9], [-1, -3, -6, -9, -10], [-1, -3, -6, -8], [-1, -3, -6, -8, -10], [-1, -3, -6, -8, -9], [-1, -3, -6, -8, -9, -10], [-1, -3, -6, -7], [-1, -3, -6, -7, -10], [-1, -3, -6, -7, -9], [-1, -3, -6, -7, -9, -10], [-1, -3, -6, -7, -8], [-1, -3, -6, -7, -8, -10], [-1, -3, -6, -7, -8, -9], [-1, -3, -6, -7, -8, -9, -10], [-1, -3, -5], [-1, -3, -5, -10], [-1, -3, -5, -9], [-1, -3, -5, -9, -10], [-1, -3, -5, -8], [-1, -3, -5, -8, -10], [-1, -3, -5, -8, -9], [-1, -3, -5, -8, -9, -10], [-1, -3, -5, -7], [-1, -3, -5, -7, -10], [-1, -3, -5, -7, -9], [-1, -3, -5, -7, -9, -10], [-1, -3, -5, -7, -8], [-1, -3, -5, -7, -8, -10], [-1, -3, -5, -7, -8, -9], [-1, -3, -5, -7, -8, -9, -10], [-1, -3, -5, -6], [-1, -3, -5, -6, -10], [-1, -3, -5, -6, -9], [-1, -3, -5, -6, -9, -10], [-1, -3, -5, -6, -8], [-1, -3, -5, -6, -8, -10], [-1, -3, -5, -6, -8, -9], [-1, -3, -5, -6, -8, -9, -10], [-1, -3, -5, -6, -7], [-1, -3, -5, -6, -7, -10], [-1, -3, -5, -6, -7, -9], [-1, -3, -5, -6, -7, -9, -10], [-1, -3, -5, -6, -7, -8], [-1, -3, -5, -6, -7, -8, -10], [-1, -3, -5, -6, -7, -8, -9], [-1, -3, -5, -6, -7, -8, -9, -10], [-1, -3, -4], [-1, -3, -4, -10], [-1, -3, -4, -9], [-1, -3, -4, -9, -10], [-1, -3, -4, -8], [-1, -3, -4, -8, -10], [-1, -3, -4, -8, -9], [-1, -3, -4, -8, -9, -10], [-1, -3, -4, -7], [-1, -3, -4, -7, -10], [-1, -3, -4, -7, -9], [-1, -3, -4, -7, -9, -10], [-1, -3, -4, -7, -8], [-1, -3, -4, -7, -8, -10], [-1, -3, -4, -7, -8, -9], [-1, -3, -4, -7, -8, -9, -10], [-1, -3, -4, -6], [-1, -3, -4, -6, -10], [-1, -3, -4, -6, -9], [-1, -3, -4, -6, -9, -10], [-1, -3, -4, -6, -8], [-1, -3, -4, -6, -8, -10], [-1, -3, -4, -6, -8, -9], [-1, -3, -4, -6, -8, -9, -10], [-1, -3, -4, -6, -7], [-1, -3, -4, -6, -7, -10], [-1, -3, -4, -6, -7, -9], [-1, -3, -4, -6, -7, -9, -10], [-1, -3, -4, -6, -7, -8], [-1, -3, -4, -6, -7, -8, -10], [-1, -3, -4, -6, -7, -8, -9], [-1, -3, -4, -6, -7, -8, -9, -10], [-1, -3, -4, -5], [-1, -3, -4, -5, -10], [-1, -3, -4, -5, -9], [-1, -3, -4, -5, -9, -10], [-1, -3, -4, -5, -8], [-1, -3, -4, -5, -8, -10], [-1, -3, -4, -5, -8, -9], [-1, -3, -4, -5, -8, -9, -10], [-1, -3, -4, -5, -7], [-1, -3, -4, -5, -7, -10], [-1, -3, -4, -5, -7, -9], [-1, -3, -4, -5, -7, -9, -10], [-1, -3, -4, -5, -7, -8], [-1, -3, -4, -5, -7, -8, -10], [-1, -3, -4, -5, -7, -8, -9], [-1, -3, -4, -5, -7, -8, -9, -10], [-1, -3, -4, -5, -6], [-1, -3, -4, -5, -6, -10], [-1, -3, -4, -5, -6, -9], [-1, -3, -4, -5, -6, -9, -10], [-1, -3, -4, -5, -6, -8], [-1, -3, -4, -5, -6, -8, -10], [-1, -3, -4, -5, -6, -8, -9], [-1, -3, -4, -5, -6, -8, -9, -10], [-1, -3, -4, -5, -6, -7], [-1, -3, -4, -5, -6, -7, -10], [-1, -3, -4, -5, -6, -7, -9], [-1, -3, -4, -5, -6, -7, -9, -10], [-1, -3, -4, -5, -6, -7, -8], [-1, -3, -4, -5, -6, -7, -8, -10], [-1, -3, -4, -5, -6, -7, -8, -9], [-1, -3, -4, -5, -6, -7, -8, -9, -10], [-1, -2], [-1, -2, -10], [-1, -2, -9], [-1, -2, -9, -10], [-1, -2, -8], [-1, -2, -8, -10], [-1, -2, -8, -9], [-1, -2, -8, -9, -10], [-1, -2, -7], [-1, -2, -7, -10], [-1, -2, -7, -9], [-1, -2, -7, -9, -10], [-1, -2, -7, -8], [-1, -2, -7, -8, -10], [-1, -2, -7, -8, -9], [-1, -2, -7, -8, -9, -10], [-1, -2, -6], [-1, -2, -6, -10], [-1, -2, -6, -9], [-1, -2, -6, -9, -10], [-1, -2, -6, -8], [-1, -2, -6, -8, -10], [-1, -2, -6, -8, -9], [-1, -2, -6, -8, -9, -10], [-1, -2, -6, -7], [-1, -2, -6, -7, -10], [-1, -2, -6, -7, -9], [-1, -2, -6, -7, -9, -10], [-1, -2, -6, -7, -8], [-1, -2, -6, -7, -8, -10], [-1, -2, -6, -7, -8, -9], [-1, -2, -6, -7, -8, -9, -10], [-1, -2, -5], [-1, -2, -5, -10], [-1, -2, -5, -9], [-1, -2, -5, -9, -10], [-1, -2, -5, -8], [-1, -2, -5, -8, -10], [-1, -2, -5, -8, -9], [-1, -2, -5, -8, -9, -10], [-1, -2, -5, -7], [-1, -2, -5, -7, -10], [-1, -2, -5, -7, -9], [-1, -2, -5, -7, -9, -10], [-1, -2, -5, -7, -8], [-1, -2, -5, -7, -8, -10], [-1, -2, -5, -7, -8, -9], [-1, -2, -5, -7, -8, -9, -10], [-1, -2, -5, -6], [-1, -2, -5, -6, -10], [-1, -2, -5, -6, -9], [-1, -2, -5, -6, -9, -10], [-1, -2, -5, -6, -8], [-1, -2, -5, -6, -8, -10], [-1, -2, -5, -6, -8, -9], [-1, -2, -5, -6, -8, -9, -10], [-1, -2, -5, -6, -7], [-1, -2, -5, -6, -7, -10], [-1, -2, -5, -6, -7, -9], [-1, -2, -5, -6, -7, -9, -10], [-1, -2, -5, -6, -7, -8], [-1, -2, -5, -6, -7, -8, -10], [-1, -2, -5, -6, -7, -8, -9], [-1, -2, -5, -6, -7, -8, -9, -10], [-1, -2, -4], [-1, -2, -4, -10], [-1, -2, -4, -9], [-1, -2, -4, -9, -10], [-1, -2, -4, -8], [-1, -2, -4, -8, -10], [-1, -2, -4, -8, -9], [-1, -2, -4, -8, -9, -10], [-1, -2, -4, -7], [-1, -2, -4, -7, -10], [-1, -2, -4, -7, -9], [-1, -2, -4, -7, -9, -10], [-1, -2, -4, -7, -8], [-1, -2, -4, -7, -8, -10], [-1, -2, -4, -7, -8, -9], [-1, -2, -4, -7, -8, -9, -10], [-1, -2, -4, -6], [-1, -2, -4, -6, -10], [-1, -2, -4, -6, -9], [-1, -2, -4, -6, -9, -10], [-1, -2, -4, -6, -8], [-1, -2, -4, -6, -8, -10], [-1, -2, -4, -6, -8, -9], [-1, -2, -4, -6, -8, -9, -10], [-1, -2, -4, -6, -7], [-1, -2, -4, -6, -7, -10], [-1, -2, -4, -6, -7, -9], [-1, -2, -4, -6, -7, -9, -10], [-1, -2, -4, -6, -7, -8], [-1, -2, -4, -6, -7, -8, -10], [-1, -2, -4, -6, -7, -8, -9], [-1, -2, -4, -6, -7, -8, -9, -10], [-1, -2, -4, -5], [-1, -2, -4, -5, -10], [-1, -2, -4, -5, -9], [-1, -2, -4, -5, -9, -10], [-1, -2, -4, -5, -8], [-1, -2, -4, -5, -8, -10], [-1, -2, -4, -5, -8, -9], [-1, -2, -4, -5, -8, -9, -10], [-1, -2, -4, -5, -7], [-1, -2, -4, -5, -7, -10], [-1, -2, -4, -5, -7, -9], [-1, -2, -4, -5, -7, -9, -10], [-1, -2, -4, -5, -7, -8], [-1, -2, -4, -5, -7, -8, -10], [-1, -2, -4, -5, -7, -8, -9], [-1, -2, -4, -5, -7, -8, -9, -10], [-1, -2, -4, -5, -6], [-1, -2, -4, -5, -6, -10], [-1, -2, -4, -5, -6, -9], [-1, -2, -4, -5, -6, -9, -10], [-1, -2, -4, -5, -6, -8], [-1, -2, -4, -5, -6, -8, -10], [-1, -2, -4, -5, -6, -8, -9], [-1, -2, -4, -5, -6, -8, -9, -10], [-1, -2, -4, -5, -6, -7], [-1, -2, -4, -5, -6, -7, -10], [-1, -2, -4, -5, -6, -7, -9], [-1, -2, -4, -5, -6, -7, -9, -10], [-1, -2, -4, -5, -6, -7, -8], [-1, -2, -4, -5, -6, -7, -8, -10], [-1, -2, -4, -5, -6, -7, -8, -9], [-1, -2, -4, -5, -6, -7, -8, -9, -10], [-1, -2, -3], [-1, -2, -3, -10], [-1, -2, -3, -9], [-1, -2, -3, -9, -10], [-1, -2, -3, -8], [-1, -2, -3, -8, -10], [-1, -2, -3, -8, -9], [-1, -2, -3, -8, -9, -10], [-1, -2, -3, -7], [-1, -2, -3, -7, -10], [-1, -2, -3, -7, -9], [-1, -2, -3, -7, -9, -10], [-1, -2, -3, -7, -8], [-1, -2, -3, -7, -8, -10], [-1, -2, -3, -7, -8, -9], [-1, -2, -3, -7, -8, -9, -10], [-1, -2, -3, -6], [-1, -2, -3, -6, -10], [-1, -2, -3, -6, -9], [-1, -2, -3, -6, -9, -10], [-1, -2, -3, -6, -8], [-1, -2, -3, -6, -8, -10], [-1, -2, -3, -6, -8, -9], [-1, -2, -3, -6, -8, -9, -10], [-1, -2, -3, -6, -7], [-1, -2, -3, -6, -7, -10], [-1, -2, -3, -6, -7, -9], [-1, -2, -3, -6, -7, -9, -10], [-1, -2, -3, -6, -7, -8], [-1, -2, -3, -6, -7, -8, -10], [-1, -2, -3, -6, -7, -8, -9], [-1, -2, -3, -6, -7, -8, -9, -10], [-1, -2, -3, -5], [-1, -2, -3, -5, -10], [-1, -2, -3, -5, -9], [-1, -2, -3, -5, -9, -10], [-1, -2, -3, -5, -8], [-1, -2, -3, -5, -8, -10], [-1, -2, -3, -5, -8, -9], [-1, -2, -3, -5, -8, -9, -10], [-1, -2, -3, -5, -7], [-1, -2, -3, -5, -7, -10], [-1, -2, -3, -5, -7, -9], [-1, -2, -3, -5, -7, -9, -10], [-1, -2, -3, -5, -7, -8], [-1, -2, -3, -5, -7, -8, -10], [-1, -2, -3, -5, -7, -8, -9], [-1, -2, -3, -5, -7, -8, -9, -10], [-1, -2, -3, -5, -6], [-1, -2, -3, -5, -6, -10], [-1, -2, -3, -5, -6, -9], [-1, -2, -3, -5, -6, -9, -10], [-1, -2, -3, -5, -6, -8], [-1, -2, -3, -5, -6, -8, -10], [-1, -2, -3, -5, -6, -8, -9], [-1, -2, -3, -5, -6, -8, -9, -10], [-1, -2, -3, -5, -6, -7], [-1, -2, -3, -5, -6, -7, -10], [-1, -2, -3, -5, -6, -7, -9], [-1, -2, -3, -5, -6, -7, -9, -10], [-1, -2, -3, -5, -6, -7, -8], [-1, -2, -3, -5, -6, -7, -8, -10], [-1, -2, -3, -5, -6, -7, -8, -9], [-1, -2, -3, -5, -6, -7, -8, -9, -10], [-1, -2, -3, -4], [-1, -2, -3, -4, -10], [-1, -2, -3, -4, -9], [-1, -2, -3, -4, -9, -10], [-1, -2, -3, -4, -8], [-1, -2, -3, -4, -8, -10], [-1, -2, -3, -4, -8, -9], [-1, -2, -3, -4, -8, -9, -10], [-1, -2, -3, -4, -7], [-1, -2, -3, -4, -7, -10], [-1, -2, -3, -4, -7, -9], [-1, -2, -3, -4, -7, -9, -10], [-1, -2, -3, -4, -7, -8], [-1, -2, -3, -4, -7, -8, -10], [-1, -2, -3, -4, -7, -8, -9], [-1, -2, -3, -4, -7, -8, -9, -10], [-1, -2, -3, -4, -6], [-1, -2, -3, -4, -6, -10], [-1, -2, -3, -4, -6, -9], [-1, -2, -3, -4, -6, -9, -10], [-1, -2, -3, -4, -6, -8], [-1, -2, -3, -4, -6, -8, -10], [-1, -2, -3, -4, -6, -8, -9], [-1, -2, -3, -4, -6, -8, -9, -10], [-1, -2, -3, -4, -6, -7], [-1, -2, -3, -4, -6, -7, -10], [-1, -2, -3, -4, -6, -7, -9], [-1, -2, -3, -4, -6, -7, -9, -10], [-1, -2, -3, -4, -6, -7, -8], [-1, -2, -3, -4, -6, -7, -8, -10], [-1, -2, -3, -4, -6, -7, -8, -9], [-1, -2, -3, -4, -6, -7, -8, -9, -10], [-1, -2, -3, -4, -5], [-1, -2, -3, -4, -5, -10], [-1, -2, -3, -4, -5, -9], [-1, -2, -3, -4, -5, -9, -10], [-1, -2, -3, -4, -5, -8], [-1, -2, -3, -4, -5, -8, -10], [-1, -2, -3, -4, -5, -8, -9], [-1, -2, -3, -4, -5, -8, -9, -10], [-1, -2, -3, -4, -5, -7], [-1, -2, -3, -4, -5, -7, -10], [-1, -2, -3, -4, -5, -7, -9], [-1, -2, -3, -4, -5, -7, -9, -10], [-1, -2, -3, -4, -5, -7, -8], [-1, -2, -3, -4, -5, -7, -8, -10], [-1, -2, -3, -4, -5, -7, -8, -9], [-1, -2, -3, -4, -5, -7, -8, -9, -10], [-1, -2, -3, -4, -5, -6], [-1, -2, -3, -4, -5, -6, -10], [-1, -2, -3, -4, -5, -6, -9], [-1, -2, -3, -4, -5, -6, -9, -10], [-1, -2, -3, -4, -5, -6, -8], [-1, -2, -3, -4, -5, -6, -8, -10], [-1, -2, -3, -4, -5, -6, -8, -9], [-1, -2, -3, -4, -5, -6, -8, -9, -10], [-1, -2, -3, -4, -5, -6, -7], [-1, -2, -3, -4, -5, -6, -7, -10], [-1, -2, -3, -4, -5, -6, -7, -9], [-1, -2, -3, -4, -5, -6, -7, -9, -10], [-1, -2, -3, -4, -5, -6, -7, -8], [-1, -2, -3, -4, -5, -6, -7, -8, -10], [-1, -2, -3, -4, -5, -6, -7, -8, -9], [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]]"
      },
      {
        "input": "nums = [-3, -1, 2, 4, 6, 8]",
        "output": "[[], [8], [6], [6, 8], [4], [4, 8], [4, 6], [4, 6, 8], [2], [2, 8], [2, 6], [2, 6, 8], [2, 4], [2, 4, 8], [2, 4, 6], [2, 4, 6, 8], [-1], [-1, 8], [-1, 6], [-1, 6, 8], [-1, 4], [-1, 4, 8], [-1, 4, 6], [-1, 4, 6, 8], [-1, 2], [-1, 2, 8], [-1, 2, 6], [-1, 2, 6, 8], [-1, 2, 4], [-1, 2, 4, 8], [-1, 2, 4, 6], [-1, 2, 4, 6, 8], [-3], [-3, 8], [-3, 6], [-3, 6, 8], [-3, 4], [-3, 4, 8], [-3, 4, 6], [-3, 4, 6, 8], [-3, 2], [-3, 2, 8], [-3, 2, 6], [-3, 2, 6, 8], [-3, 2, 4], [-3, 2, 4, 8], [-3, 2, 4, 6], [-3, 2, 4, 6, 8], [-3, -1], [-3, -1, 8], [-3, -1, 6], [-3, -1, 6, 8], [-3, -1, 4], [-3, -1, 4, 8], [-3, -1, 4, 6], [-3, -1, 4, 6, 8], [-3, -1, 2], [-3, -1, 2, 8], [-3, -1, 2, 6], [-3, -1, 2, 6, 8], [-3, -1, 2, 4], [-3, -1, 2, 4, 8], [-3, -1, 2, 4, 6], [-3, -1, 2, 4, 6, 8]]"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3]",
        "output": "[[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3], [0], [0, 3], [0, 2], [0, 2, 3], [0, 1], [0, 1, 3], [0, 1, 2], [0, 1, 2, 3], [-1], [-1, 3], [-1, 2], [-1, 2, 3], [-1, 1], [-1, 1, 3], [-1, 1, 2], [-1, 1, 2, 3], [-1, 0], [-1, 0, 3], [-1, 0, 2], [-1, 0, 2, 3], [-1, 0, 1], [-1, 0, 1, 3], [-1, 0, 1, 2], [-1, 0, 1, 2, 3]]"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1]",
        "output": "[[], [1], [2], [2, 1], [3], [3, 1], [3, 2], [3, 2, 1], [4], [4, 1], [4, 2], [4, 2, 1], [4, 3], [4, 3, 1], [4, 3, 2], [4, 3, 2, 1], [5], [5, 1], [5, 2], [5, 2, 1], [5, 3], [5, 3, 1], [5, 3, 2], [5, 3, 2, 1], [5, 4], [5, 4, 1], [5, 4, 2], [5, 4, 2, 1], [5, 4, 3], [5, 4, 3, 1], [5, 4, 3, 2], [5, 4, 3, 2, 1]]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[[], [10], [9], [9, 10], [8], [8, 10], [8, 9], [8, 9, 10], [7], [7, 10], [7, 9], [7, 9, 10], [7, 8], [7, 8, 10], [7, 8, 9], [7, 8, 9, 10], [6], [6, 10], [6, 9], [6, 9, 10], [6, 8], [6, 8, 10], [6, 8, 9], [6, 8, 9, 10], [6, 7], [6, 7, 10], [6, 7, 9], [6, 7, 9, 10], [6, 7, 8], [6, 7, 8, 10], [6, 7, 8, 9], [6, 7, 8, 9, 10], [5], [5, 10], [5, 9], [5, 9, 10], [5, 8], [5, 8, 10], [5, 8, 9], [5, 8, 9, 10], [5, 7], [5, 7, 10], [5, 7, 9], [5, 7, 9, 10], [5, 7, 8], [5, 7, 8, 10], [5, 7, 8, 9], [5, 7, 8, 9, 10], [5, 6], [5, 6, 10], [5, 6, 9], [5, 6, 9, 10], [5, 6, 8], [5, 6, 8, 10], [5, 6, 8, 9], [5, 6, 8, 9, 10], [5, 6, 7], [5, 6, 7, 10], [5, 6, 7, 9], [5, 6, 7, 9, 10], [5, 6, 7, 8], [5, 6, 7, 8, 10], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10], [4], [4, 10], [4, 9], [4, 9, 10], [4, 8], [4, 8, 10], [4, 8, 9], [4, 8, 9, 10], [4, 7], [4, 7, 10], [4, 7, 9], [4, 7, 9, 10], [4, 7, 8], [4, 7, 8, 10], [4, 7, 8, 9], [4, 7, 8, 9, 10], [4, 6], [4, 6, 10], [4, 6, 9], [4, 6, 9, 10], [4, 6, 8], [4, 6, 8, 10], [4, 6, 8, 9], [4, 6, 8, 9, 10], [4, 6, 7], [4, 6, 7, 10], [4, 6, 7, 9], [4, 6, 7, 9, 10], [4, 6, 7, 8], [4, 6, 7, 8, 10], [4, 6, 7, 8, 9], [4, 6, 7, 8, 9, 10], [4, 5], [4, 5, 10], [4, 5, 9], [4, 5, 9, 10], [4, 5, 8], [4, 5, 8, 10], [4, 5, 8, 9], [4, 5, 8, 9, 10], [4, 5, 7], [4, 5, 7, 10], [4, 5, 7, 9], [4, 5, 7, 9, 10], [4, 5, 7, 8], [4, 5, 7, 8, 10], [4, 5, 7, 8, 9], [4, 5, 7, 8, 9, 10], [4, 5, 6], [4, 5, 6, 10], [4, 5, 6, 9], [4, 5, 6, 9, 10], [4, 5, 6, 8], [4, 5, 6, 8, 10], [4, 5, 6, 8, 9], [4, 5, 6, 8, 9, 10], [4, 5, 6, 7], [4, 5, 6, 7, 10], [4, 5, 6, 7, 9], [4, 5, 6, 7, 9, 10], [4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 10], [4, 5, 6, 7, 8, 9], [4, 5, 6, 7, 8, 9, 10], [3], [3, 10], [3, 9], [3, 9, 10], [3, 8], [3, 8, 10], [3, 8, 9], [3, 8, 9, 10], [3, 7], [3, 7, 10], [3, 7, 9], [3, 7, 9, 10], [3, 7, 8], [3, 7, 8, 10], [3, 7, 8, 9], [3, 7, 8, 9, 10], [3, 6], [3, 6, 10], [3, 6, 9], [3, 6, 9, 10], [3, 6, 8], [3, 6, 8, 10], [3, 6, 8, 9], [3, 6, 8, 9, 10], [3, 6, 7], [3, 6, 7, 10], [3, 6, 7, 9], [3, 6, 7, 9, 10], [3, 6, 7, 8], [3, 6, 7, 8, 10], [3, 6, 7, 8, 9], [3, 6, 7, 8, 9, 10], [3, 5], [3, 5, 10], [3, 5, 9], [3, 5, 9, 10], [3, 5, 8], [3, 5, 8, 10], [3, 5, 8, 9], [3, 5, 8, 9, 10], [3, 5, 7], [3, 5, 7, 10], [3, 5, 7, 9], [3, 5, 7, 9, 10], [3, 5, 7, 8], [3, 5, 7, 8, 10], [3, 5, 7, 8, 9], [3, 5, 7, 8, 9, 10], [3, 5, 6], [3, 5, 6, 10], [3, 5, 6, 9], [3, 5, 6, 9, 10], [3, 5, 6, 8], [3, 5, 6, 8, 10], [3, 5, 6, 8, 9], [3, 5, 6, 8, 9, 10], [3, 5, 6, 7], [3, 5, 6, 7, 10], [3, 5, 6, 7, 9], [3, 5, 6, 7, 9, 10], [3, 5, 6, 7, 8], [3, 5, 6, 7, 8, 10], [3, 5, 6, 7, 8, 9], [3, 5, 6, 7, 8, 9, 10], [3, 4], [3, 4, 10], [3, 4, 9], [3, 4, 9, 10], [3, 4, 8], [3, 4, 8, 10], [3, 4, 8, 9], [3, 4, 8, 9, 10], [3, 4, 7], [3, 4, 7, 10], [3, 4, 7, 9], [3, 4, 7, 9, 10], [3, 4, 7, 8], [3, 4, 7, 8, 10], [3, 4, 7, 8, 9], [3, 4, 7, 8, 9, 10], [3, 4, 6], [3, 4, 6, 10], [3, 4, 6, 9], [3, 4, 6, 9, 10], [3, 4, 6, 8], [3, 4, 6, 8, 10], [3, 4, 6, 8, 9], [3, 4, 6, 8, 9, 10], [3, 4, 6, 7], [3, 4, 6, 7, 10], [3, 4, 6, 7, 9], [3, 4, 6, 7, 9, 10], [3, 4, 6, 7, 8], [3, 4, 6, 7, 8, 10], [3, 4, 6, 7, 8, 9], [3, 4, 6, 7, 8, 9, 10], [3, 4, 5], [3, 4, 5, 10], [3, 4, 5, 9], [3, 4, 5, 9, 10], [3, 4, 5, 8], [3, 4, 5, 8, 10], [3, 4, 5, 8, 9], [3, 4, 5, 8, 9, 10], [3, 4, 5, 7], [3, 4, 5, 7, 10], [3, 4, 5, 7, 9], [3, 4, 5, 7, 9, 10], [3, 4, 5, 7, 8], [3, 4, 5, 7, 8, 10], [3, 4, 5, 7, 8, 9], [3, 4, 5, 7, 8, 9, 10], [3, 4, 5, 6], [3, 4, 5, 6, 10], [3, 4, 5, 6, 9], [3, 4, 5, 6, 9, 10], [3, 4, 5, 6, 8], [3, 4, 5, 6, 8, 10], [3, 4, 5, 6, 8, 9], [3, 4, 5, 6, 8, 9, 10], [3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 10], [3, 4, 5, 6, 7, 9], [3, 4, 5, 6, 7, 9, 10], [3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 10], [3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9, 10], [2], [2, 10], [2, 9], [2, 9, 10], [2, 8], [2, 8, 10], [2, 8, 9], [2, 8, 9, 10], [2, 7], [2, 7, 10], [2, 7, 9], [2, 7, 9, 10], [2, 7, 8], [2, 7, 8, 10], [2, 7, 8, 9], [2, 7, 8, 9, 10], [2, 6], [2, 6, 10], [2, 6, 9], [2, 6, 9, 10], [2, 6, 8], [2, 6, 8, 10], [2, 6, 8, 9], [2, 6, 8, 9, 10], [2, 6, 7], [2, 6, 7, 10], [2, 6, 7, 9], [2, 6, 7, 9, 10], [2, 6, 7, 8], [2, 6, 7, 8, 10], [2, 6, 7, 8, 9], [2, 6, 7, 8, 9, 10], [2, 5], [2, 5, 10], [2, 5, 9], [2, 5, 9, 10], [2, 5, 8], [2, 5, 8, 10], [2, 5, 8, 9], [2, 5, 8, 9, 10], [2, 5, 7], [2, 5, 7, 10], [2, 5, 7, 9], [2, 5, 7, 9, 10], [2, 5, 7, 8], [2, 5, 7, 8, 10], [2, 5, 7, 8, 9], [2, 5, 7, 8, 9, 10], [2, 5, 6], [2, 5, 6, 10], [2, 5, 6, 9], [2, 5, 6, 9, 10], [2, 5, 6, 8], [2, 5, 6, 8, 10], [2, 5, 6, 8, 9], [2, 5, 6, 8, 9, 10], [2, 5, 6, 7], [2, 5, 6, 7, 10], [2, 5, 6, 7, 9], [2, 5, 6, 7, 9, 10], [2, 5, 6, 7, 8], [2, 5, 6, 7, 8, 10], [2, 5, 6, 7, 8, 9], [2, 5, 6, 7, 8, 9, 10], [2, 4], [2, 4, 10], [2, 4, 9], [2, 4, 9, 10], [2, 4, 8], [2, 4, 8, 10], [2, 4, 8, 9], [2, 4, 8, 9, 10], [2, 4, 7], [2, 4, 7, 10], [2, 4, 7, 9], [2, 4, 7, 9, 10], [2, 4, 7, 8], [2, 4, 7, 8, 10], [2, 4, 7, 8, 9], [2, 4, 7, 8, 9, 10], [2, 4, 6], [2, 4, 6, 10], [2, 4, 6, 9], [2, 4, 6, 9, 10], [2, 4, 6, 8], [2, 4, 6, 8, 10], [2, 4, 6, 8, 9], [2, 4, 6, 8, 9, 10], [2, 4, 6, 7], [2, 4, 6, 7, 10], [2, 4, 6, 7, 9], [2, 4, 6, 7, 9, 10], [2, 4, 6, 7, 8], [2, 4, 6, 7, 8, 10], [2, 4, 6, 7, 8, 9], [2, 4, 6, 7, 8, 9, 10], [2, 4, 5], [2, 4, 5, 10], [2, 4, 5, 9], [2, 4, 5, 9, 10], [2, 4, 5, 8], [2, 4, 5, 8, 10], [2, 4, 5, 8, 9], [2, 4, 5, 8, 9, 10], [2, 4, 5, 7], [2, 4, 5, 7, 10], [2, 4, 5, 7, 9], [2, 4, 5, 7, 9, 10], [2, 4, 5, 7, 8], [2, 4, 5, 7, 8, 10], [2, 4, 5, 7, 8, 9], [2, 4, 5, 7, 8, 9, 10], [2, 4, 5, 6], [2, 4, 5, 6, 10], [2, 4, 5, 6, 9], [2, 4, 5, 6, 9, 10], [2, 4, 5, 6, 8], [2, 4, 5, 6, 8, 10], [2, 4, 5, 6, 8, 9], [2, 4, 5, 6, 8, 9, 10], [2, 4, 5, 6, 7], [2, 4, 5, 6, 7, 10], [2, 4, 5, 6, 7, 9], [2, 4, 5, 6, 7, 9, 10], [2, 4, 5, 6, 7, 8], [2, 4, 5, 6, 7, 8, 10], [2, 4, 5, 6, 7, 8, 9], [2, 4, 5, 6, 7, 8, 9, 10], [2, 3], [2, 3, 10], [2, 3, 9], [2, 3, 9, 10], [2, 3, 8], [2, 3, 8, 10], [2, 3, 8, 9], [2, 3, 8, 9, 10], [2, 3, 7], [2, 3, 7, 10], [2, 3, 7, 9], [2, 3, 7, 9, 10], [2, 3, 7, 8], [2, 3, 7, 8, 10], [2, 3, 7, 8, 9], [2, 3, 7, 8, 9, 10], [2, 3, 6], [2, 3, 6, 10], [2, 3, 6, 9], [2, 3, 6, 9, 10], [2, 3, 6, 8], [2, 3, 6, 8, 10], [2, 3, 6, 8, 9], [2, 3, 6, 8, 9, 10], [2, 3, 6, 7], [2, 3, 6, 7, 10], [2, 3, 6, 7, 9], [2, 3, 6, 7, 9, 10], [2, 3, 6, 7, 8], [2, 3, 6, 7, 8, 10], [2, 3, 6, 7, 8, 9], [2, 3, 6, 7, 8, 9, 10], [2, 3, 5], [2, 3, 5, 10], [2, 3, 5, 9], [2, 3, 5, 9, 10], [2, 3, 5, 8], [2, 3, 5, 8, 10], [2, 3, 5, 8, 9], [2, 3, 5, 8, 9, 10], [2, 3, 5, 7], [2, 3, 5, 7, 10], [2, 3, 5, 7, 9], [2, 3, 5, 7, 9, 10], [2, 3, 5, 7, 8], [2, 3, 5, 7, 8, 10], [2, 3, 5, 7, 8, 9], [2, 3, 5, 7, 8, 9, 10], [2, 3, 5, 6], [2, 3, 5, 6, 10], [2, 3, 5, 6, 9], [2, 3, 5, 6, 9, 10], [2, 3, 5, 6, 8], [2, 3, 5, 6, 8, 10], [2, 3, 5, 6, 8, 9], [2, 3, 5, 6, 8, 9, 10], [2, 3, 5, 6, 7], [2, 3, 5, 6, 7, 10], [2, 3, 5, 6, 7, 9], [2, 3, 5, 6, 7, 9, 10], [2, 3, 5, 6, 7, 8], [2, 3, 5, 6, 7, 8, 10], [2, 3, 5, 6, 7, 8, 9], [2, 3, 5, 6, 7, 8, 9, 10], [2, 3, 4], [2, 3, 4, 10], [2, 3, 4, 9], [2, 3, 4, 9, 10], [2, 3, 4, 8], [2, 3, 4, 8, 10], [2, 3, 4, 8, 9], [2, 3, 4, 8, 9, 10], [2, 3, 4, 7], [2, 3, 4, 7, 10], [2, 3, 4, 7, 9], [2, 3, 4, 7, 9, 10], [2, 3, 4, 7, 8], [2, 3, 4, 7, 8, 10], [2, 3, 4, 7, 8, 9], [2, 3, 4, 7, 8, 9, 10], [2, 3, 4, 6], [2, 3, 4, 6, 10], [2, 3, 4, 6, 9], [2, 3, 4, 6, 9, 10], [2, 3, 4, 6, 8], [2, 3, 4, 6, 8, 10], [2, 3, 4, 6, 8, 9], [2, 3, 4, 6, 8, 9, 10], [2, 3, 4, 6, 7], [2, 3, 4, 6, 7, 10], [2, 3, 4, 6, 7, 9], [2, 3, 4, 6, 7, 9, 10], [2, 3, 4, 6, 7, 8], [2, 3, 4, 6, 7, 8, 10], [2, 3, 4, 6, 7, 8, 9], [2, 3, 4, 6, 7, 8, 9, 10], [2, 3, 4, 5], [2, 3, 4, 5, 10], [2, 3, 4, 5, 9], [2, 3, 4, 5, 9, 10], [2, 3, 4, 5, 8], [2, 3, 4, 5, 8, 10], [2, 3, 4, 5, 8, 9], [2, 3, 4, 5, 8, 9, 10], [2, 3, 4, 5, 7], [2, 3, 4, 5, 7, 10], [2, 3, 4, 5, 7, 9], [2, 3, 4, 5, 7, 9, 10], [2, 3, 4, 5, 7, 8], [2, 3, 4, 5, 7, 8, 10], [2, 3, 4, 5, 7, 8, 9], [2, 3, 4, 5, 7, 8, 9, 10], [2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 10], [2, 3, 4, 5, 6, 9], [2, 3, 4, 5, 6, 9, 10], [2, 3, 4, 5, 6, 8], [2, 3, 4, 5, 6, 8, 10], [2, 3, 4, 5, 6, 8, 9], [2, 3, 4, 5, 6, 8, 9, 10], [2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 10], [2, 3, 4, 5, 6, 7, 9], [2, 3, 4, 5, 6, 7, 9, 10], [2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8, 10], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9, 10], [1], [1, 10], [1, 9], [1, 9, 10], [1, 8], [1, 8, 10], [1, 8, 9], [1, 8, 9, 10], [1, 7], [1, 7, 10], [1, 7, 9], [1, 7, 9, 10], [1, 7, 8], [1, 7, 8, 10], [1, 7, 8, 9], [1, 7, 8, 9, 10], [1, 6], [1, 6, 10], [1, 6, 9], [1, 6, 9, 10], [1, 6, 8], [1, 6, 8, 10], [1, 6, 8, 9], [1, 6, 8, 9, 10], [1, 6, 7], [1, 6, 7, 10], [1, 6, 7, 9], [1, 6, 7, 9, 10], [1, 6, 7, 8], [1, 6, 7, 8, 10], [1, 6, 7, 8, 9], [1, 6, 7, 8, 9, 10], [1, 5], [1, 5, 10], [1, 5, 9], [1, 5, 9, 10], [1, 5, 8], [1, 5, 8, 10], [1, 5, 8, 9], [1, 5, 8, 9, 10], [1, 5, 7], [1, 5, 7, 10], [1, 5, 7, 9], [1, 5, 7, 9, 10], [1, 5, 7, 8], [1, 5, 7, 8, 10], [1, 5, 7, 8, 9], [1, 5, 7, 8, 9, 10], [1, 5, 6], [1, 5, 6, 10], [1, 5, 6, 9], [1, 5, 6, 9, 10], [1, 5, 6, 8], [1, 5, 6, 8, 10], [1, 5, 6, 8, 9], [1, 5, 6, 8, 9, 10], [1, 5, 6, 7], [1, 5, 6, 7, 10], [1, 5, 6, 7, 9], [1, 5, 6, 7, 9, 10], [1, 5, 6, 7, 8], [1, 5, 6, 7, 8, 10], [1, 5, 6, 7, 8, 9], [1, 5, 6, 7, 8, 9, 10], [1, 4], [1, 4, 10], [1, 4, 9], [1, 4, 9, 10], [1, 4, 8], [1, 4, 8, 10], [1, 4, 8, 9], [1, 4, 8, 9, 10], [1, 4, 7], [1, 4, 7, 10], [1, 4, 7, 9], [1, 4, 7, 9, 10], [1, 4, 7, 8], [1, 4, 7, 8, 10], [1, 4, 7, 8, 9], [1, 4, 7, 8, 9, 10], [1, 4, 6], [1, 4, 6, 10], [1, 4, 6, 9], [1, 4, 6, 9, 10], [1, 4, 6, 8], [1, 4, 6, 8, 10], [1, 4, 6, 8, 9], [1, 4, 6, 8, 9, 10], [1, 4, 6, 7], [1, 4, 6, 7, 10], [1, 4, 6, 7, 9], [1, 4, 6, 7, 9, 10], [1, 4, 6, 7, 8], [1, 4, 6, 7, 8, 10], [1, 4, 6, 7, 8, 9], [1, 4, 6, 7, 8, 9, 10], [1, 4, 5], [1, 4, 5, 10], [1, 4, 5, 9], [1, 4, 5, 9, 10], [1, 4, 5, 8], [1, 4, 5, 8, 10], [1, 4, 5, 8, 9], [1, 4, 5, 8, 9, 10], [1, 4, 5, 7], [1, 4, 5, 7, 10], [1, 4, 5, 7, 9], [1, 4, 5, 7, 9, 10], [1, 4, 5, 7, 8], [1, 4, 5, 7, 8, 10], [1, 4, 5, 7, 8, 9], [1, 4, 5, 7, 8, 9, 10], [1, 4, 5, 6], [1, 4, 5, 6, 10], [1, 4, 5, 6, 9], [1, 4, 5, 6, 9, 10], [1, 4, 5, 6, 8], [1, 4, 5, 6, 8, 10], [1, 4, 5, 6, 8, 9], [1, 4, 5, 6, 8, 9, 10], [1, 4, 5, 6, 7], [1, 4, 5, 6, 7, 10], [1, 4, 5, 6, 7, 9], [1, 4, 5, 6, 7, 9, 10], [1, 4, 5, 6, 7, 8], [1, 4, 5, 6, 7, 8, 10], [1, 4, 5, 6, 7, 8, 9], [1, 4, 5, 6, 7, 8, 9, 10], [1, 3], [1, 3, 10], [1, 3, 9], [1, 3, 9, 10], [1, 3, 8], [1, 3, 8, 10], [1, 3, 8, 9], [1, 3, 8, 9, 10], [1, 3, 7], [1, 3, 7, 10], [1, 3, 7, 9], [1, 3, 7, 9, 10], [1, 3, 7, 8], [1, 3, 7, 8, 10], [1, 3, 7, 8, 9], [1, 3, 7, 8, 9, 10], [1, 3, 6], [1, 3, 6, 10], [1, 3, 6, 9], [1, 3, 6, 9, 10], [1, 3, 6, 8], [1, 3, 6, 8, 10], [1, 3, 6, 8, 9], [1, 3, 6, 8, 9, 10], [1, 3, 6, 7], [1, 3, 6, 7, 10], [1, 3, 6, 7, 9], [1, 3, 6, 7, 9, 10], [1, 3, 6, 7, 8], [1, 3, 6, 7, 8, 10], [1, 3, 6, 7, 8, 9], [1, 3, 6, 7, 8, 9, 10], [1, 3, 5], [1, 3, 5, 10], [1, 3, 5, 9], [1, 3, 5, 9, 10], [1, 3, 5, 8], [1, 3, 5, 8, 10], [1, 3, 5, 8, 9], [1, 3, 5, 8, 9, 10], [1, 3, 5, 7], [1, 3, 5, 7, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9, 10], [1, 3, 5, 7, 8], [1, 3, 5, 7, 8, 10], [1, 3, 5, 7, 8, 9], [1, 3, 5, 7, 8, 9, 10], [1, 3, 5, 6], [1, 3, 5, 6, 10], [1, 3, 5, 6, 9], [1, 3, 5, 6, 9, 10], [1, 3, 5, 6, 8], [1, 3, 5, 6, 8, 10], [1, 3, 5, 6, 8, 9], [1, 3, 5, 6, 8, 9, 10], [1, 3, 5, 6, 7], [1, 3, 5, 6, 7, 10], [1, 3, 5, 6, 7, 9], [1, 3, 5, 6, 7, 9, 10], [1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 7, 8, 10], [1, 3, 5, 6, 7, 8, 9], [1, 3, 5, 6, 7, 8, 9, 10], [1, 3, 4], [1, 3, 4, 10], [1, 3, 4, 9], [1, 3, 4, 9, 10], [1, 3, 4, 8], [1, 3, 4, 8, 10], [1, 3, 4, 8, 9], [1, 3, 4, 8, 9, 10], [1, 3, 4, 7], [1, 3, 4, 7, 10], [1, 3, 4, 7, 9], [1, 3, 4, 7, 9, 10], [1, 3, 4, 7, 8], [1, 3, 4, 7, 8, 10], [1, 3, 4, 7, 8, 9], [1, 3, 4, 7, 8, 9, 10], [1, 3, 4, 6], [1, 3, 4, 6, 10], [1, 3, 4, 6, 9], [1, 3, 4, 6, 9, 10], [1, 3, 4, 6, 8], [1, 3, 4, 6, 8, 10], [1, 3, 4, 6, 8, 9], [1, 3, 4, 6, 8, 9, 10], [1, 3, 4, 6, 7], [1, 3, 4, 6, 7, 10], [1, 3, 4, 6, 7, 9], [1, 3, 4, 6, 7, 9, 10], [1, 3, 4, 6, 7, 8], [1, 3, 4, 6, 7, 8, 10], [1, 3, 4, 6, 7, 8, 9], [1, 3, 4, 6, 7, 8, 9, 10], [1, 3, 4, 5], [1, 3, 4, 5, 10], [1, 3, 4, 5, 9], [1, 3, 4, 5, 9, 10], [1, 3, 4, 5, 8], [1, 3, 4, 5, 8, 10], [1, 3, 4, 5, 8, 9], [1, 3, 4, 5, 8, 9, 10], [1, 3, 4, 5, 7], [1, 3, 4, 5, 7, 10], [1, 3, 4, 5, 7, 9], [1, 3, 4, 5, 7, 9, 10], [1, 3, 4, 5, 7, 8], [1, 3, 4, 5, 7, 8, 10], [1, 3, 4, 5, 7, 8, 9], [1, 3, 4, 5, 7, 8, 9, 10], [1, 3, 4, 5, 6], [1, 3, 4, 5, 6, 10], [1, 3, 4, 5, 6, 9], [1, 3, 4, 5, 6, 9, 10], [1, 3, 4, 5, 6, 8], [1, 3, 4, 5, 6, 8, 10], [1, 3, 4, 5, 6, 8, 9], [1, 3, 4, 5, 6, 8, 9, 10], [1, 3, 4, 5, 6, 7], [1, 3, 4, 5, 6, 7, 10], [1, 3, 4, 5, 6, 7, 9], [1, 3, 4, 5, 6, 7, 9, 10], [1, 3, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7, 8, 10], [1, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2], [1, 2, 10], [1, 2, 9], [1, 2, 9, 10], [1, 2, 8], [1, 2, 8, 10], [1, 2, 8, 9], [1, 2, 8, 9, 10], [1, 2, 7], [1, 2, 7, 10], [1, 2, 7, 9], [1, 2, 7, 9, 10], [1, 2, 7, 8], [1, 2, 7, 8, 10], [1, 2, 7, 8, 9], [1, 2, 7, 8, 9, 10], [1, 2, 6], [1, 2, 6, 10], [1, 2, 6, 9], [1, 2, 6, 9, 10], [1, 2, 6, 8], [1, 2, 6, 8, 10], [1, 2, 6, 8, 9], [1, 2, 6, 8, 9, 10], [1, 2, 6, 7], [1, 2, 6, 7, 10], [1, 2, 6, 7, 9], [1, 2, 6, 7, 9, 10], [1, 2, 6, 7, 8], [1, 2, 6, 7, 8, 10], [1, 2, 6, 7, 8, 9], [1, 2, 6, 7, 8, 9, 10], [1, 2, 5], [1, 2, 5, 10], [1, 2, 5, 9], [1, 2, 5, 9, 10], [1, 2, 5, 8], [1, 2, 5, 8, 10], [1, 2, 5, 8, 9], [1, 2, 5, 8, 9, 10], [1, 2, 5, 7], [1, 2, 5, 7, 10], [1, 2, 5, 7, 9], [1, 2, 5, 7, 9, 10], [1, 2, 5, 7, 8], [1, 2, 5, 7, 8, 10], [1, 2, 5, 7, 8, 9], [1, 2, 5, 7, 8, 9, 10], [1, 2, 5, 6], [1, 2, 5, 6, 10], [1, 2, 5, 6, 9], [1, 2, 5, 6, 9, 10], [1, 2, 5, 6, 8], [1, 2, 5, 6, 8, 10], [1, 2, 5, 6, 8, 9], [1, 2, 5, 6, 8, 9, 10], [1, 2, 5, 6, 7], [1, 2, 5, 6, 7, 10], [1, 2, 5, 6, 7, 9], [1, 2, 5, 6, 7, 9, 10], [1, 2, 5, 6, 7, 8], [1, 2, 5, 6, 7, 8, 10], [1, 2, 5, 6, 7, 8, 9], [1, 2, 5, 6, 7, 8, 9, 10], [1, 2, 4], [1, 2, 4, 10], [1, 2, 4, 9], [1, 2, 4, 9, 10], [1, 2, 4, 8], [1, 2, 4, 8, 10], [1, 2, 4, 8, 9], [1, 2, 4, 8, 9, 10], [1, 2, 4, 7], [1, 2, 4, 7, 10], [1, 2, 4, 7, 9], [1, 2, 4, 7, 9, 10], [1, 2, 4, 7, 8], [1, 2, 4, 7, 8, 10], [1, 2, 4, 7, 8, 9], [1, 2, 4, 7, 8, 9, 10], [1, 2, 4, 6], [1, 2, 4, 6, 10], [1, 2, 4, 6, 9], [1, 2, 4, 6, 9, 10], [1, 2, 4, 6, 8], [1, 2, 4, 6, 8, 10], [1, 2, 4, 6, 8, 9], [1, 2, 4, 6, 8, 9, 10], [1, 2, 4, 6, 7], [1, 2, 4, 6, 7, 10], [1, 2, 4, 6, 7, 9], [1, 2, 4, 6, 7, 9, 10], [1, 2, 4, 6, 7, 8], [1, 2, 4, 6, 7, 8, 10], [1, 2, 4, 6, 7, 8, 9], [1, 2, 4, 6, 7, 8, 9, 10], [1, 2, 4, 5], [1, 2, 4, 5, 10], [1, 2, 4, 5, 9], [1, 2, 4, 5, 9, 10], [1, 2, 4, 5, 8], [1, 2, 4, 5, 8, 10], [1, 2, 4, 5, 8, 9], [1, 2, 4, 5, 8, 9, 10], [1, 2, 4, 5, 7], [1, 2, 4, 5, 7, 10], [1, 2, 4, 5, 7, 9], [1, 2, 4, 5, 7, 9, 10], [1, 2, 4, 5, 7, 8], [1, 2, 4, 5, 7, 8, 10], [1, 2, 4, 5, 7, 8, 9], [1, 2, 4, 5, 7, 8, 9, 10], [1, 2, 4, 5, 6], [1, 2, 4, 5, 6, 10], [1, 2, 4, 5, 6, 9], [1, 2, 4, 5, 6, 9, 10], [1, 2, 4, 5, 6, 8], [1, 2, 4, 5, 6, 8, 10], [1, 2, 4, 5, 6, 8, 9], [1, 2, 4, 5, 6, 8, 9, 10], [1, 2, 4, 5, 6, 7], [1, 2, 4, 5, 6, 7, 10], [1, 2, 4, 5, 6, 7, 9], [1, 2, 4, 5, 6, 7, 9, 10], [1, 2, 4, 5, 6, 7, 8], [1, 2, 4, 5, 6, 7, 8, 10], [1, 2, 4, 5, 6, 7, 8, 9], [1, 2, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3], [1, 2, 3, 10], [1, 2, 3, 9], [1, 2, 3, 9, 10], [1, 2, 3, 8], [1, 2, 3, 8, 10], [1, 2, 3, 8, 9], [1, 2, 3, 8, 9, 10], [1, 2, 3, 7], [1, 2, 3, 7, 10], [1, 2, 3, 7, 9], [1, 2, 3, 7, 9, 10], [1, 2, 3, 7, 8], [1, 2, 3, 7, 8, 10], [1, 2, 3, 7, 8, 9], [1, 2, 3, 7, 8, 9, 10], [1, 2, 3, 6], [1, 2, 3, 6, 10], [1, 2, 3, 6, 9], [1, 2, 3, 6, 9, 10], [1, 2, 3, 6, 8], [1, 2, 3, 6, 8, 10], [1, 2, 3, 6, 8, 9], [1, 2, 3, 6, 8, 9, 10], [1, 2, 3, 6, 7], [1, 2, 3, 6, 7, 10], [1, 2, 3, 6, 7, 9], [1, 2, 3, 6, 7, 9, 10], [1, 2, 3, 6, 7, 8], [1, 2, 3, 6, 7, 8, 10], [1, 2, 3, 6, 7, 8, 9], [1, 2, 3, 6, 7, 8, 9, 10], [1, 2, 3, 5], [1, 2, 3, 5, 10], [1, 2, 3, 5, 9], [1, 2, 3, 5, 9, 10], [1, 2, 3, 5, 8], [1, 2, 3, 5, 8, 10], [1, 2, 3, 5, 8, 9], [1, 2, 3, 5, 8, 9, 10], [1, 2, 3, 5, 7], [1, 2, 3, 5, 7, 10], [1, 2, 3, 5, 7, 9], [1, 2, 3, 5, 7, 9, 10], [1, 2, 3, 5, 7, 8], [1, 2, 3, 5, 7, 8, 10], [1, 2, 3, 5, 7, 8, 9], [1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 3, 5, 6], [1, 2, 3, 5, 6, 10], [1, 2, 3, 5, 6, 9], [1, 2, 3, 5, 6, 9, 10], [1, 2, 3, 5, 6, 8], [1, 2, 3, 5, 6, 8, 10], [1, 2, 3, 5, 6, 8, 9], [1, 2, 3, 5, 6, 8, 9, 10], [1, 2, 3, 5, 6, 7], [1, 2, 3, 5, 6, 7, 10], [1, 2, 3, 5, 6, 7, 9], [1, 2, 3, 5, 6, 7, 9, 10], [1, 2, 3, 5, 6, 7, 8], [1, 2, 3, 5, 6, 7, 8, 10], [1, 2, 3, 5, 6, 7, 8, 9], [1, 2, 3, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4], [1, 2, 3, 4, 10], [1, 2, 3, 4, 9], [1, 2, 3, 4, 9, 10], [1, 2, 3, 4, 8], [1, 2, 3, 4, 8, 10], [1, 2, 3, 4, 8, 9], [1, 2, 3, 4, 8, 9, 10], [1, 2, 3, 4, 7], [1, 2, 3, 4, 7, 10], [1, 2, 3, 4, 7, 9], [1, 2, 3, 4, 7, 9, 10], [1, 2, 3, 4, 7, 8], [1, 2, 3, 4, 7, 8, 10], [1, 2, 3, 4, 7, 8, 9], [1, 2, 3, 4, 7, 8, 9, 10], [1, 2, 3, 4, 6], [1, 2, 3, 4, 6, 10], [1, 2, 3, 4, 6, 9], [1, 2, 3, 4, 6, 9, 10], [1, 2, 3, 4, 6, 8], [1, 2, 3, 4, 6, 8, 10], [1, 2, 3, 4, 6, 8, 9], [1, 2, 3, 4, 6, 8, 9, 10], [1, 2, 3, 4, 6, 7], [1, 2, 3, 4, 6, 7, 10], [1, 2, 3, 4, 6, 7, 9], [1, 2, 3, 4, 6, 7, 9, 10], [1, 2, 3, 4, 6, 7, 8], [1, 2, 3, 4, 6, 7, 8, 10], [1, 2, 3, 4, 6, 7, 8, 9], [1, 2, 3, 4, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 10], [1, 2, 3, 4, 5, 9], [1, 2, 3, 4, 5, 9, 10], [1, 2, 3, 4, 5, 8], [1, 2, 3, 4, 5, 8, 10], [1, 2, 3, 4, 5, 8, 9], [1, 2, 3, 4, 5, 8, 9, 10], [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 5, 7, 10], [1, 2, 3, 4, 5, 7, 9], [1, 2, 3, 4, 5, 7, 9, 10], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 7, 8, 10], [1, 2, 3, 4, 5, 7, 8, 9], [1, 2, 3, 4, 5, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 10], [1, 2, 3, 4, 5, 6, 9], [1, 2, 3, 4, 5, 6, 9, 10], [1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 4, 5, 6, 8, 10], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 10], [1, 2, 3, 4, 5, 6, 7, 9], [1, 2, 3, 4, 5, 6, 7, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4]",
        "output": "[[], [4], [3], [3, 4], [2], [2, 4], [2, 3], [2, 3, 4], [1], [1, 4], [1, 3], [1, 3, 4], [1, 2], [1, 2, 4], [1, 2, 3], [1, 2, 3, 4], [0], [0, 4], [0, 3], [0, 3, 4], [0, 2], [0, 2, 4], [0, 2, 3], [0, 2, 3, 4], [0, 1], [0, 1, 4], [0, 1, 3], [0, 1, 3, 4], [0, 1, 2], [0, 1, 2, 4], [0, 1, 2, 3], [0, 1, 2, 3, 4]]"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5]",
        "output": "[[], [-5], [5], [5, -5], [-4], [-4, -5], [-4, 5], [-4, 5, -5], [4], [4, -5], [4, 5], [4, 5, -5], [4, -4], [4, -4, -5], [4, -4, 5], [4, -4, 5, -5], [-3], [-3, -5], [-3, 5], [-3, 5, -5], [-3, -4], [-3, -4, -5], [-3, -4, 5], [-3, -4, 5, -5], [-3, 4], [-3, 4, -5], [-3, 4, 5], [-3, 4, 5, -5], [-3, 4, -4], [-3, 4, -4, -5], [-3, 4, -4, 5], [-3, 4, -4, 5, -5], [3], [3, -5], [3, 5], [3, 5, -5], [3, -4], [3, -4, -5], [3, -4, 5], [3, -4, 5, -5], [3, 4], [3, 4, -5], [3, 4, 5], [3, 4, 5, -5], [3, 4, -4], [3, 4, -4, -5], [3, 4, -4, 5], [3, 4, -4, 5, -5], [3, -3], [3, -3, -5], [3, -3, 5], [3, -3, 5, -5], [3, -3, -4], [3, -3, -4, -5], [3, -3, -4, 5], [3, -3, -4, 5, -5], [3, -3, 4], [3, -3, 4, -5], [3, -3, 4, 5], [3, -3, 4, 5, -5], [3, -3, 4, -4], [3, -3, 4, -4, -5], [3, -3, 4, -4, 5], [3, -3, 4, -4, 5, -5], [-2], [-2, -5], [-2, 5], [-2, 5, -5], [-2, -4], [-2, -4, -5], [-2, -4, 5], [-2, -4, 5, -5], [-2, 4], [-2, 4, -5], [-2, 4, 5], [-2, 4, 5, -5], [-2, 4, -4], [-2, 4, -4, -5], [-2, 4, -4, 5], [-2, 4, -4, 5, -5], [-2, -3], [-2, -3, -5], [-2, -3, 5], [-2, -3, 5, -5], [-2, -3, -4], [-2, -3, -4, -5], [-2, -3, -4, 5], [-2, -3, -4, 5, -5], [-2, -3, 4], [-2, -3, 4, -5], [-2, -3, 4, 5], [-2, -3, 4, 5, -5], [-2, -3, 4, -4], [-2, -3, 4, -4, -5], [-2, -3, 4, -4, 5], [-2, -3, 4, -4, 5, -5], [-2, 3], [-2, 3, -5], [-2, 3, 5], [-2, 3, 5, -5], [-2, 3, -4], [-2, 3, -4, -5], [-2, 3, -4, 5], [-2, 3, -4, 5, -5], [-2, 3, 4], [-2, 3, 4, -5], [-2, 3, 4, 5], [-2, 3, 4, 5, -5], [-2, 3, 4, -4], [-2, 3, 4, -4, -5], [-2, 3, 4, -4, 5], [-2, 3, 4, -4, 5, -5], [-2, 3, -3], [-2, 3, -3, -5], [-2, 3, -3, 5], [-2, 3, -3, 5, -5], [-2, 3, -3, -4], [-2, 3, -3, -4, -5], [-2, 3, -3, -4, 5], [-2, 3, -3, -4, 5, -5], [-2, 3, -3, 4], [-2, 3, -3, 4, -5], [-2, 3, -3, 4, 5], [-2, 3, -3, 4, 5, -5], [-2, 3, -3, 4, -4], [-2, 3, -3, 4, -4, -5], [-2, 3, -3, 4, -4, 5], [-2, 3, -3, 4, -4, 5, -5], [2], [2, -5], [2, 5], [2, 5, -5], [2, -4], [2, -4, -5], [2, -4, 5], [2, -4, 5, -5], [2, 4], [2, 4, -5], [2, 4, 5], [2, 4, 5, -5], [2, 4, -4], [2, 4, -4, -5], [2, 4, -4, 5], [2, 4, -4, 5, -5], [2, -3], [2, -3, -5], [2, -3, 5], [2, -3, 5, -5], [2, -3, -4], [2, -3, -4, -5], [2, -3, -4, 5], [2, -3, -4, 5, -5], [2, -3, 4], [2, -3, 4, -5], [2, -3, 4, 5], [2, -3, 4, 5, -5], [2, -3, 4, -4], [2, -3, 4, -4, -5], [2, -3, 4, -4, 5], [2, -3, 4, -4, 5, -5], [2, 3], [2, 3, -5], [2, 3, 5], [2, 3, 5, -5], [2, 3, -4], [2, 3, -4, -5], [2, 3, -4, 5], [2, 3, -4, 5, -5], [2, 3, 4], [2, 3, 4, -5], [2, 3, 4, 5], [2, 3, 4, 5, -5], [2, 3, 4, -4], [2, 3, 4, -4, -5], [2, 3, 4, -4, 5], [2, 3, 4, -4, 5, -5], [2, 3, -3], [2, 3, -3, -5], [2, 3, -3, 5], [2, 3, -3, 5, -5], [2, 3, -3, -4], [2, 3, -3, -4, -5], [2, 3, -3, -4, 5], [2, 3, -3, -4, 5, -5], [2, 3, -3, 4], [2, 3, -3, 4, -5], [2, 3, -3, 4, 5], [2, 3, -3, 4, 5, -5], [2, 3, -3, 4, -4], [2, 3, -3, 4, -4, -5], [2, 3, -3, 4, -4, 5], [2, 3, -3, 4, -4, 5, -5], [2, -2], [2, -2, -5], [2, -2, 5], [2, -2, 5, -5], [2, -2, -4], [2, -2, -4, -5], [2, -2, -4, 5], [2, -2, -4, 5, -5], [2, -2, 4], [2, -2, 4, -5], [2, -2, 4, 5], [2, -2, 4, 5, -5], [2, -2, 4, -4], [2, -2, 4, -4, -5], [2, -2, 4, -4, 5], [2, -2, 4, -4, 5, -5], [2, -2, -3], [2, -2, -3, -5], [2, -2, -3, 5], [2, -2, -3, 5, -5], [2, -2, -3, -4], [2, -2, -3, -4, -5], [2, -2, -3, -4, 5], [2, -2, -3, -4, 5, -5], [2, -2, -3, 4], [2, -2, -3, 4, -5], [2, -2, -3, 4, 5], [2, -2, -3, 4, 5, -5], [2, -2, -3, 4, -4], [2, -2, -3, 4, -4, -5], [2, -2, -3, 4, -4, 5], [2, -2, -3, 4, -4, 5, -5], [2, -2, 3], [2, -2, 3, -5], [2, -2, 3, 5], [2, -2, 3, 5, -5], [2, -2, 3, -4], [2, -2, 3, -4, -5], [2, -2, 3, -4, 5], [2, -2, 3, -4, 5, -5], [2, -2, 3, 4], [2, -2, 3, 4, -5], [2, -2, 3, 4, 5], [2, -2, 3, 4, 5, -5], [2, -2, 3, 4, -4], [2, -2, 3, 4, -4, -5], [2, -2, 3, 4, -4, 5], [2, -2, 3, 4, -4, 5, -5], [2, -2, 3, -3], [2, -2, 3, -3, -5], [2, -2, 3, -3, 5], [2, -2, 3, -3, 5, -5], [2, -2, 3, -3, -4], [2, -2, 3, -3, -4, -5], [2, -2, 3, -3, -4, 5], [2, -2, 3, -3, -4, 5, -5], [2, -2, 3, -3, 4], [2, -2, 3, -3, 4, -5], [2, -2, 3, -3, 4, 5], [2, -2, 3, -3, 4, 5, -5], [2, -2, 3, -3, 4, -4], [2, -2, 3, -3, 4, -4, -5], [2, -2, 3, -3, 4, -4, 5], [2, -2, 3, -3, 4, -4, 5, -5], [-1], [-1, -5], [-1, 5], [-1, 5, -5], [-1, -4], [-1, -4, -5], [-1, -4, 5], [-1, -4, 5, -5], [-1, 4], [-1, 4, -5], [-1, 4, 5], [-1, 4, 5, -5], [-1, 4, -4], [-1, 4, -4, -5], [-1, 4, -4, 5], [-1, 4, -4, 5, -5], [-1, -3], [-1, -3, -5], [-1, -3, 5], [-1, -3, 5, -5], [-1, -3, -4], [-1, -3, -4, -5], [-1, -3, -4, 5], [-1, -3, -4, 5, -5], [-1, -3, 4], [-1, -3, 4, -5], [-1, -3, 4, 5], [-1, -3, 4, 5, -5], [-1, -3, 4, -4], [-1, -3, 4, -4, -5], [-1, -3, 4, -4, 5], [-1, -3, 4, -4, 5, -5], [-1, 3], [-1, 3, -5], [-1, 3, 5], [-1, 3, 5, -5], [-1, 3, -4], [-1, 3, -4, -5], [-1, 3, -4, 5], [-1, 3, -4, 5, -5], [-1, 3, 4], [-1, 3, 4, -5], [-1, 3, 4, 5], [-1, 3, 4, 5, -5], [-1, 3, 4, -4], [-1, 3, 4, -4, -5], [-1, 3, 4, -4, 5], [-1, 3, 4, -4, 5, -5], [-1, 3, -3], [-1, 3, -3, -5], [-1, 3, -3, 5], [-1, 3, -3, 5, -5], [-1, 3, -3, -4], [-1, 3, -3, -4, -5], [-1, 3, -3, -4, 5], [-1, 3, -3, -4, 5, -5], [-1, 3, -3, 4], [-1, 3, -3, 4, -5], [-1, 3, -3, 4, 5], [-1, 3, -3, 4, 5, -5], [-1, 3, -3, 4, -4], [-1, 3, -3, 4, -4, -5], [-1, 3, -3, 4, -4, 5], [-1, 3, -3, 4, -4, 5, -5], [-1, -2], [-1, -2, -5], [-1, -2, 5], [-1, -2, 5, -5], [-1, -2, -4], [-1, -2, -4, -5], [-1, -2, -4, 5], [-1, -2, -4, 5, -5], [-1, -2, 4], [-1, -2, 4, -5], [-1, -2, 4, 5], [-1, -2, 4, 5, -5], [-1, -2, 4, -4], [-1, -2, 4, -4, -5], [-1, -2, 4, -4, 5], [-1, -2, 4, -4, 5, -5], [-1, -2, -3], [-1, -2, -3, -5], [-1, -2, -3, 5], [-1, -2, -3, 5, -5], [-1, -2, -3, -4], [-1, -2, -3, -4, -5], [-1, -2, -3, -4, 5], [-1, -2, -3, -4, 5, -5], [-1, -2, -3, 4], [-1, -2, -3, 4, -5], [-1, -2, -3, 4, 5], [-1, -2, -3, 4, 5, -5], [-1, -2, -3, 4, -4], [-1, -2, -3, 4, -4, -5], [-1, -2, -3, 4, -4, 5], [-1, -2, -3, 4, -4, 5, -5], [-1, -2, 3], [-1, -2, 3, -5], [-1, -2, 3, 5], [-1, -2, 3, 5, -5], [-1, -2, 3, -4], [-1, -2, 3, -4, -5], [-1, -2, 3, -4, 5], [-1, -2, 3, -4, 5, -5], [-1, -2, 3, 4], [-1, -2, 3, 4, -5], [-1, -2, 3, 4, 5], [-1, -2, 3, 4, 5, -5], [-1, -2, 3, 4, -4], [-1, -2, 3, 4, -4, -5], [-1, -2, 3, 4, -4, 5], [-1, -2, 3, 4, -4, 5, -5], [-1, -2, 3, -3], [-1, -2, 3, -3, -5], [-1, -2, 3, -3, 5], [-1, -2, 3, -3, 5, -5], [-1, -2, 3, -3, -4], [-1, -2, 3, -3, -4, -5], [-1, -2, 3, -3, -4, 5], [-1, -2, 3, -3, -4, 5, -5], [-1, -2, 3, -3, 4], [-1, -2, 3, -3, 4, -5], [-1, -2, 3, -3, 4, 5], [-1, -2, 3, -3, 4, 5, -5], [-1, -2, 3, -3, 4, -4], [-1, -2, 3, -3, 4, -4, -5], [-1, -2, 3, -3, 4, -4, 5], [-1, -2, 3, -3, 4, -4, 5, -5], [-1, 2], [-1, 2, -5], [-1, 2, 5], [-1, 2, 5, -5], [-1, 2, -4], [-1, 2, -4, -5], [-1, 2, -4, 5], [-1, 2, -4, 5, -5], [-1, 2, 4], [-1, 2, 4, -5], [-1, 2, 4, 5], [-1, 2, 4, 5, -5], [-1, 2, 4, -4], [-1, 2, 4, -4, -5], [-1, 2, 4, -4, 5], [-1, 2, 4, -4, 5, -5], [-1, 2, -3], [-1, 2, -3, -5], [-1, 2, -3, 5], [-1, 2, -3, 5, -5], [-1, 2, -3, -4], [-1, 2, -3, -4, -5], [-1, 2, -3, -4, 5], [-1, 2, -3, -4, 5, -5], [-1, 2, -3, 4], [-1, 2, -3, 4, -5], [-1, 2, -3, 4, 5], [-1, 2, -3, 4, 5, -5], [-1, 2, -3, 4, -4], [-1, 2, -3, 4, -4, -5], [-1, 2, -3, 4, -4, 5], [-1, 2, -3, 4, -4, 5, -5], [-1, 2, 3], [-1, 2, 3, -5], [-1, 2, 3, 5], [-1, 2, 3, 5, -5], [-1, 2, 3, -4], [-1, 2, 3, -4, -5], [-1, 2, 3, -4, 5], [-1, 2, 3, -4, 5, -5], [-1, 2, 3, 4], [-1, 2, 3, 4, -5], [-1, 2, 3, 4, 5], [-1, 2, 3, 4, 5, -5], [-1, 2, 3, 4, -4], [-1, 2, 3, 4, -4, -5], [-1, 2, 3, 4, -4, 5], [-1, 2, 3, 4, -4, 5, -5], [-1, 2, 3, -3], [-1, 2, 3, -3, -5], [-1, 2, 3, -3, 5], [-1, 2, 3, -3, 5, -5], [-1, 2, 3, -3, -4], [-1, 2, 3, -3, -4, -5], [-1, 2, 3, -3, -4, 5], [-1, 2, 3, -3, -4, 5, -5], [-1, 2, 3, -3, 4], [-1, 2, 3, -3, 4, -5], [-1, 2, 3, -3, 4, 5], [-1, 2, 3, -3, 4, 5, -5], [-1, 2, 3, -3, 4, -4], [-1, 2, 3, -3, 4, -4, -5], [-1, 2, 3, -3, 4, -4, 5], [-1, 2, 3, -3, 4, -4, 5, -5], [-1, 2, -2], [-1, 2, -2, -5], [-1, 2, -2, 5], [-1, 2, -2, 5, -5], [-1, 2, -2, -4], [-1, 2, -2, -4, -5], [-1, 2, -2, -4, 5], [-1, 2, -2, -4, 5, -5], [-1, 2, -2, 4], [-1, 2, -2, 4, -5], [-1, 2, -2, 4, 5], [-1, 2, -2, 4, 5, -5], [-1, 2, -2, 4, -4], [-1, 2, -2, 4, -4, -5], [-1, 2, -2, 4, -4, 5], [-1, 2, -2, 4, -4, 5, -5], [-1, 2, -2, -3], [-1, 2, -2, -3, -5], [-1, 2, -2, -3, 5], [-1, 2, -2, -3, 5, -5], [-1, 2, -2, -3, -4], [-1, 2, -2, -3, -4, -5], [-1, 2, -2, -3, -4, 5], [-1, 2, -2, -3, -4, 5, -5], [-1, 2, -2, -3, 4], [-1, 2, -2, -3, 4, -5], [-1, 2, -2, -3, 4, 5], [-1, 2, -2, -3, 4, 5, -5], [-1, 2, -2, -3, 4, -4], [-1, 2, -2, -3, 4, -4, -5], [-1, 2, -2, -3, 4, -4, 5], [-1, 2, -2, -3, 4, -4, 5, -5], [-1, 2, -2, 3], [-1, 2, -2, 3, -5], [-1, 2, -2, 3, 5], [-1, 2, -2, 3, 5, -5], [-1, 2, -2, 3, -4], [-1, 2, -2, 3, -4, -5], [-1, 2, -2, 3, -4, 5], [-1, 2, -2, 3, -4, 5, -5], [-1, 2, -2, 3, 4], [-1, 2, -2, 3, 4, -5], [-1, 2, -2, 3, 4, 5], [-1, 2, -2, 3, 4, 5, -5], [-1, 2, -2, 3, 4, -4], [-1, 2, -2, 3, 4, -4, -5], [-1, 2, -2, 3, 4, -4, 5], [-1, 2, -2, 3, 4, -4, 5, -5], [-1, 2, -2, 3, -3], [-1, 2, -2, 3, -3, -5], [-1, 2, -2, 3, -3, 5], [-1, 2, -2, 3, -3, 5, -5], [-1, 2, -2, 3, -3, -4], [-1, 2, -2, 3, -3, -4, -5], [-1, 2, -2, 3, -3, -4, 5], [-1, 2, -2, 3, -3, -4, 5, -5], [-1, 2, -2, 3, -3, 4], [-1, 2, -2, 3, -3, 4, -5], [-1, 2, -2, 3, -3, 4, 5], [-1, 2, -2, 3, -3, 4, 5, -5], [-1, 2, -2, 3, -3, 4, -4], [-1, 2, -2, 3, -3, 4, -4, -5], [-1, 2, -2, 3, -3, 4, -4, 5], [-1, 2, -2, 3, -3, 4, -4, 5, -5], [1], [1, -5], [1, 5], [1, 5, -5], [1, -4], [1, -4, -5], [1, -4, 5], [1, -4, 5, -5], [1, 4], [1, 4, -5], [1, 4, 5], [1, 4, 5, -5], [1, 4, -4], [1, 4, -4, -5], [1, 4, -4, 5], [1, 4, -4, 5, -5], [1, -3], [1, -3, -5], [1, -3, 5], [1, -3, 5, -5], [1, -3, -4], [1, -3, -4, -5], [1, -3, -4, 5], [1, -3, -4, 5, -5], [1, -3, 4], [1, -3, 4, -5], [1, -3, 4, 5], [1, -3, 4, 5, -5], [1, -3, 4, -4], [1, -3, 4, -4, -5], [1, -3, 4, -4, 5], [1, -3, 4, -4, 5, -5], [1, 3], [1, 3, -5], [1, 3, 5], [1, 3, 5, -5], [1, 3, -4], [1, 3, -4, -5], [1, 3, -4, 5], [1, 3, -4, 5, -5], [1, 3, 4], [1, 3, 4, -5], [1, 3, 4, 5], [1, 3, 4, 5, -5], [1, 3, 4, -4], [1, 3, 4, -4, -5], [1, 3, 4, -4, 5], [1, 3, 4, -4, 5, -5], [1, 3, -3], [1, 3, -3, -5], [1, 3, -3, 5], [1, 3, -3, 5, -5], [1, 3, -3, -4], [1, 3, -3, -4, -5], [1, 3, -3, -4, 5], [1, 3, -3, -4, 5, -5], [1, 3, -3, 4], [1, 3, -3, 4, -5], [1, 3, -3, 4, 5], [1, 3, -3, 4, 5, -5], [1, 3, -3, 4, -4], [1, 3, -3, 4, -4, -5], [1, 3, -3, 4, -4, 5], [1, 3, -3, 4, -4, 5, -5], [1, -2], [1, -2, -5], [1, -2, 5], [1, -2, 5, -5], [1, -2, -4], [1, -2, -4, -5], [1, -2, -4, 5], [1, -2, -4, 5, -5], [1, -2, 4], [1, -2, 4, -5], [1, -2, 4, 5], [1, -2, 4, 5, -5], [1, -2, 4, -4], [1, -2, 4, -4, -5], [1, -2, 4, -4, 5], [1, -2, 4, -4, 5, -5], [1, -2, -3], [1, -2, -3, -5], [1, -2, -3, 5], [1, -2, -3, 5, -5], [1, -2, -3, -4], [1, -2, -3, -4, -5], [1, -2, -3, -4, 5], [1, -2, -3, -4, 5, -5], [1, -2, -3, 4], [1, -2, -3, 4, -5], [1, -2, -3, 4, 5], [1, -2, -3, 4, 5, -5], [1, -2, -3, 4, -4], [1, -2, -3, 4, -4, -5], [1, -2, -3, 4, -4, 5], [1, -2, -3, 4, -4, 5, -5], [1, -2, 3], [1, -2, 3, -5], [1, -2, 3, 5], [1, -2, 3, 5, -5], [1, -2, 3, -4], [1, -2, 3, -4, -5], [1, -2, 3, -4, 5], [1, -2, 3, -4, 5, -5], [1, -2, 3, 4], [1, -2, 3, 4, -5], [1, -2, 3, 4, 5], [1, -2, 3, 4, 5, -5], [1, -2, 3, 4, -4], [1, -2, 3, 4, -4, -5], [1, -2, 3, 4, -4, 5], [1, -2, 3, 4, -4, 5, -5], [1, -2, 3, -3], [1, -2, 3, -3, -5], [1, -2, 3, -3, 5], [1, -2, 3, -3, 5, -5], [1, -2, 3, -3, -4], [1, -2, 3, -3, -4, -5], [1, -2, 3, -3, -4, 5], [1, -2, 3, -3, -4, 5, -5], [1, -2, 3, -3, 4], [1, -2, 3, -3, 4, -5], [1, -2, 3, -3, 4, 5], [1, -2, 3, -3, 4, 5, -5], [1, -2, 3, -3, 4, -4], [1, -2, 3, -3, 4, -4, -5], [1, -2, 3, -3, 4, -4, 5], [1, -2, 3, -3, 4, -4, 5, -5], [1, 2], [1, 2, -5], [1, 2, 5], [1, 2, 5, -5], [1, 2, -4], [1, 2, -4, -5], [1, 2, -4, 5], [1, 2, -4, 5, -5], [1, 2, 4], [1, 2, 4, -5], [1, 2, 4, 5], [1, 2, 4, 5, -5], [1, 2, 4, -4], [1, 2, 4, -4, -5], [1, 2, 4, -4, 5], [1, 2, 4, -4, 5, -5], [1, 2, -3], [1, 2, -3, -5], [1, 2, -3, 5], [1, 2, -3, 5, -5], [1, 2, -3, -4], [1, 2, -3, -4, -5], [1, 2, -3, -4, 5], [1, 2, -3, -4, 5, -5], [1, 2, -3, 4], [1, 2, -3, 4, -5], [1, 2, -3, 4, 5], [1, 2, -3, 4, 5, -5], [1, 2, -3, 4, -4], [1, 2, -3, 4, -4, -5], [1, 2, -3, 4, -4, 5], [1, 2, -3, 4, -4, 5, -5], [1, 2, 3], [1, 2, 3, -5], [1, 2, 3, 5], [1, 2, 3, 5, -5], [1, 2, 3, -4], [1, 2, 3, -4, -5], [1, 2, 3, -4, 5], [1, 2, 3, -4, 5, -5], [1, 2, 3, 4], [1, 2, 3, 4, -5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, -5], [1, 2, 3, 4, -4], [1, 2, 3, 4, -4, -5], [1, 2, 3, 4, -4, 5], [1, 2, 3, 4, -4, 5, -5], [1, 2, 3, -3], [1, 2, 3, -3, -5], [1, 2, 3, -3, 5], [1, 2, 3, -3, 5, -5], [1, 2, 3, -3, -4], [1, 2, 3, -3, -4, -5], [1, 2, 3, -3, -4, 5], [1, 2, 3, -3, -4, 5, -5], [1, 2, 3, -3, 4], [1, 2, 3, -3, 4, -5], [1, 2, 3, -3, 4, 5], [1, 2, 3, -3, 4, 5, -5], [1, 2, 3, -3, 4, -4], [1, 2, 3, -3, 4, -4, -5], [1, 2, 3, -3, 4, -4, 5], [1, 2, 3, -3, 4, -4, 5, -5], [1, 2, -2], [1, 2, -2, -5], [1, 2, -2, 5], [1, 2, -2, 5, -5], [1, 2, -2, -4], [1, 2, -2, -4, -5], [1, 2, -2, -4, 5], [1, 2, -2, -4, 5, -5], [1, 2, -2, 4], [1, 2, -2, 4, -5], [1, 2, -2, 4, 5], [1, 2, -2, 4, 5, -5], [1, 2, -2, 4, -4], [1, 2, -2, 4, -4, -5], [1, 2, -2, 4, -4, 5], [1, 2, -2, 4, -4, 5, -5], [1, 2, -2, -3], [1, 2, -2, -3, -5], [1, 2, -2, -3, 5], [1, 2, -2, -3, 5, -5], [1, 2, -2, -3, -4], [1, 2, -2, -3, -4, -5], [1, 2, -2, -3, -4, 5], [1, 2, -2, -3, -4, 5, -5], [1, 2, -2, -3, 4], [1, 2, -2, -3, 4, -5], [1, 2, -2, -3, 4, 5], [1, 2, -2, -3, 4, 5, -5], [1, 2, -2, -3, 4, -4], [1, 2, -2, -3, 4, -4, -5], [1, 2, -2, -3, 4, -4, 5], [1, 2, -2, -3, 4, -4, 5, -5], [1, 2, -2, 3], [1, 2, -2, 3, -5], [1, 2, -2, 3, 5], [1, 2, -2, 3, 5, -5], [1, 2, -2, 3, -4], [1, 2, -2, 3, -4, -5], [1, 2, -2, 3, -4, 5], [1, 2, -2, 3, -4, 5, -5], [1, 2, -2, 3, 4], [1, 2, -2, 3, 4, -5], [1, 2, -2, 3, 4, 5], [1, 2, -2, 3, 4, 5, -5], [1, 2, -2, 3, 4, -4], [1, 2, -2, 3, 4, -4, -5], [1, 2, -2, 3, 4, -4, 5], [1, 2, -2, 3, 4, -4, 5, -5], [1, 2, -2, 3, -3], [1, 2, -2, 3, -3, -5], [1, 2, -2, 3, -3, 5], [1, 2, -2, 3, -3, 5, -5], [1, 2, -2, 3, -3, -4], [1, 2, -2, 3, -3, -4, -5], [1, 2, -2, 3, -3, -4, 5], [1, 2, -2, 3, -3, -4, 5, -5], [1, 2, -2, 3, -3, 4], [1, 2, -2, 3, -3, 4, -5], [1, 2, -2, 3, -3, 4, 5], [1, 2, -2, 3, -3, 4, 5, -5], [1, 2, -2, 3, -3, 4, -4], [1, 2, -2, 3, -3, 4, -4, -5], [1, 2, -2, 3, -3, 4, -4, 5], [1, 2, -2, 3, -3, 4, -4, 5, -5], [1, -1], [1, -1, -5], [1, -1, 5], [1, -1, 5, -5], [1, -1, -4], [1, -1, -4, -5], [1, -1, -4, 5], [1, -1, -4, 5, -5], [1, -1, 4], [1, -1, 4, -5], [1, -1, 4, 5], [1, -1, 4, 5, -5], [1, -1, 4, -4], [1, -1, 4, -4, -5], [1, -1, 4, -4, 5], [1, -1, 4, -4, 5, -5], [1, -1, -3], [1, -1, -3, -5], [1, -1, -3, 5], [1, -1, -3, 5, -5], [1, -1, -3, -4], [1, -1, -3, -4, -5], [1, -1, -3, -4, 5], [1, -1, -3, -4, 5, -5], [1, -1, -3, 4], [1, -1, -3, 4, -5], [1, -1, -3, 4, 5], [1, -1, -3, 4, 5, -5], [1, -1, -3, 4, -4], [1, -1, -3, 4, -4, -5], [1, -1, -3, 4, -4, 5], [1, -1, -3, 4, -4, 5, -5], [1, -1, 3], [1, -1, 3, -5], [1, -1, 3, 5], [1, -1, 3, 5, -5], [1, -1, 3, -4], [1, -1, 3, -4, -5], [1, -1, 3, -4, 5], [1, -1, 3, -4, 5, -5], [1, -1, 3, 4], [1, -1, 3, 4, -5], [1, -1, 3, 4, 5], [1, -1, 3, 4, 5, -5], [1, -1, 3, 4, -4], [1, -1, 3, 4, -4, -5], [1, -1, 3, 4, -4, 5], [1, -1, 3, 4, -4, 5, -5], [1, -1, 3, -3], [1, -1, 3, -3, -5], [1, -1, 3, -3, 5], [1, -1, 3, -3, 5, -5], [1, -1, 3, -3, -4], [1, -1, 3, -3, -4, -5], [1, -1, 3, -3, -4, 5], [1, -1, 3, -3, -4, 5, -5], [1, -1, 3, -3, 4], [1, -1, 3, -3, 4, -5], [1, -1, 3, -3, 4, 5], [1, -1, 3, -3, 4, 5, -5], [1, -1, 3, -3, 4, -4], [1, -1, 3, -3, 4, -4, -5], [1, -1, 3, -3, 4, -4, 5], [1, -1, 3, -3, 4, -4, 5, -5], [1, -1, -2], [1, -1, -2, -5], [1, -1, -2, 5], [1, -1, -2, 5, -5], [1, -1, -2, -4], [1, -1, -2, -4, -5], [1, -1, -2, -4, 5], [1, -1, -2, -4, 5, -5], [1, -1, -2, 4], [1, -1, -2, 4, -5], [1, -1, -2, 4, 5], [1, -1, -2, 4, 5, -5], [1, -1, -2, 4, -4], [1, -1, -2, 4, -4, -5], [1, -1, -2, 4, -4, 5], [1, -1, -2, 4, -4, 5, -5], [1, -1, -2, -3], [1, -1, -2, -3, -5], [1, -1, -2, -3, 5], [1, -1, -2, -3, 5, -5], [1, -1, -2, -3, -4], [1, -1, -2, -3, -4, -5], [1, -1, -2, -3, -4, 5], [1, -1, -2, -3, -4, 5, -5], [1, -1, -2, -3, 4], [1, -1, -2, -3, 4, -5], [1, -1, -2, -3, 4, 5], [1, -1, -2, -3, 4, 5, -5], [1, -1, -2, -3, 4, -4], [1, -1, -2, -3, 4, -4, -5], [1, -1, -2, -3, 4, -4, 5], [1, -1, -2, -3, 4, -4, 5, -5], [1, -1, -2, 3], [1, -1, -2, 3, -5], [1, -1, -2, 3, 5], [1, -1, -2, 3, 5, -5], [1, -1, -2, 3, -4], [1, -1, -2, 3, -4, -5], [1, -1, -2, 3, -4, 5], [1, -1, -2, 3, -4, 5, -5], [1, -1, -2, 3, 4], [1, -1, -2, 3, 4, -5], [1, -1, -2, 3, 4, 5], [1, -1, -2, 3, 4, 5, -5], [1, -1, -2, 3, 4, -4], [1, -1, -2, 3, 4, -4, -5], [1, -1, -2, 3, 4, -4, 5], [1, -1, -2, 3, 4, -4, 5, -5], [1, -1, -2, 3, -3], [1, -1, -2, 3, -3, -5], [1, -1, -2, 3, -3, 5], [1, -1, -2, 3, -3, 5, -5], [1, -1, -2, 3, -3, -4], [1, -1, -2, 3, -3, -4, -5], [1, -1, -2, 3, -3, -4, 5], [1, -1, -2, 3, -3, -4, 5, -5], [1, -1, -2, 3, -3, 4], [1, -1, -2, 3, -3, 4, -5], [1, -1, -2, 3, -3, 4, 5], [1, -1, -2, 3, -3, 4, 5, -5], [1, -1, -2, 3, -3, 4, -4], [1, -1, -2, 3, -3, 4, -4, -5], [1, -1, -2, 3, -3, 4, -4, 5], [1, -1, -2, 3, -3, 4, -4, 5, -5], [1, -1, 2], [1, -1, 2, -5], [1, -1, 2, 5], [1, -1, 2, 5, -5], [1, -1, 2, -4], [1, -1, 2, -4, -5], [1, -1, 2, -4, 5], [1, -1, 2, -4, 5, -5], [1, -1, 2, 4], [1, -1, 2, 4, -5], [1, -1, 2, 4, 5], [1, -1, 2, 4, 5, -5], [1, -1, 2, 4, -4], [1, -1, 2, 4, -4, -5], [1, -1, 2, 4, -4, 5], [1, -1, 2, 4, -4, 5, -5], [1, -1, 2, -3], [1, -1, 2, -3, -5], [1, -1, 2, -3, 5], [1, -1, 2, -3, 5, -5], [1, -1, 2, -3, -4], [1, -1, 2, -3, -4, -5], [1, -1, 2, -3, -4, 5], [1, -1, 2, -3, -4, 5, -5], [1, -1, 2, -3, 4], [1, -1, 2, -3, 4, -5], [1, -1, 2, -3, 4, 5], [1, -1, 2, -3, 4, 5, -5], [1, -1, 2, -3, 4, -4], [1, -1, 2, -3, 4, -4, -5], [1, -1, 2, -3, 4, -4, 5], [1, -1, 2, -3, 4, -4, 5, -5], [1, -1, 2, 3], [1, -1, 2, 3, -5], [1, -1, 2, 3, 5], [1, -1, 2, 3, 5, -5], [1, -1, 2, 3, -4], [1, -1, 2, 3, -4, -5], [1, -1, 2, 3, -4, 5], [1, -1, 2, 3, -4, 5, -5], [1, -1, 2, 3, 4], [1, -1, 2, 3, 4, -5], [1, -1, 2, 3, 4, 5], [1, -1, 2, 3, 4, 5, -5], [1, -1, 2, 3, 4, -4], [1, -1, 2, 3, 4, -4, -5], [1, -1, 2, 3, 4, -4, 5], [1, -1, 2, 3, 4, -4, 5, -5], [1, -1, 2, 3, -3], [1, -1, 2, 3, -3, -5], [1, -1, 2, 3, -3, 5], [1, -1, 2, 3, -3, 5, -5], [1, -1, 2, 3, -3, -4], [1, -1, 2, 3, -3, -4, -5], [1, -1, 2, 3, -3, -4, 5], [1, -1, 2, 3, -3, -4, 5, -5], [1, -1, 2, 3, -3, 4], [1, -1, 2, 3, -3, 4, -5], [1, -1, 2, 3, -3, 4, 5], [1, -1, 2, 3, -3, 4, 5, -5], [1, -1, 2, 3, -3, 4, -4], [1, -1, 2, 3, -3, 4, -4, -5], [1, -1, 2, 3, -3, 4, -4, 5], [1, -1, 2, 3, -3, 4, -4, 5, -5], [1, -1, 2, -2], [1, -1, 2, -2, -5], [1, -1, 2, -2, 5], [1, -1, 2, -2, 5, -5], [1, -1, 2, -2, -4], [1, -1, 2, -2, -4, -5], [1, -1, 2, -2, -4, 5], [1, -1, 2, -2, -4, 5, -5], [1, -1, 2, -2, 4], [1, -1, 2, -2, 4, -5], [1, -1, 2, -2, 4, 5], [1, -1, 2, -2, 4, 5, -5], [1, -1, 2, -2, 4, -4], [1, -1, 2, -2, 4, -4, -5], [1, -1, 2, -2, 4, -4, 5], [1, -1, 2, -2, 4, -4, 5, -5], [1, -1, 2, -2, -3], [1, -1, 2, -2, -3, -5], [1, -1, 2, -2, -3, 5], [1, -1, 2, -2, -3, 5, -5], [1, -1, 2, -2, -3, -4], [1, -1, 2, -2, -3, -4, -5], [1, -1, 2, -2, -3, -4, 5], [1, -1, 2, -2, -3, -4, 5, -5], [1, -1, 2, -2, -3, 4], [1, -1, 2, -2, -3, 4, -5], [1, -1, 2, -2, -3, 4, 5], [1, -1, 2, -2, -3, 4, 5, -5], [1, -1, 2, -2, -3, 4, -4], [1, -1, 2, -2, -3, 4, -4, -5], [1, -1, 2, -2, -3, 4, -4, 5], [1, -1, 2, -2, -3, 4, -4, 5, -5], [1, -1, 2, -2, 3], [1, -1, 2, -2, 3, -5], [1, -1, 2, -2, 3, 5], [1, -1, 2, -2, 3, 5, -5], [1, -1, 2, -2, 3, -4], [1, -1, 2, -2, 3, -4, -5], [1, -1, 2, -2, 3, -4, 5], [1, -1, 2, -2, 3, -4, 5, -5], [1, -1, 2, -2, 3, 4], [1, -1, 2, -2, 3, 4, -5], [1, -1, 2, -2, 3, 4, 5], [1, -1, 2, -2, 3, 4, 5, -5], [1, -1, 2, -2, 3, 4, -4], [1, -1, 2, -2, 3, 4, -4, -5], [1, -1, 2, -2, 3, 4, -4, 5], [1, -1, 2, -2, 3, 4, -4, 5, -5], [1, -1, 2, -2, 3, -3], [1, -1, 2, -2, 3, -3, -5], [1, -1, 2, -2, 3, -3, 5], [1, -1, 2, -2, 3, -3, 5, -5], [1, -1, 2, -2, 3, -3, -4], [1, -1, 2, -2, 3, -3, -4, -5], [1, -1, 2, -2, 3, -3, -4, 5], [1, -1, 2, -2, 3, -3, -4, 5, -5], [1, -1, 2, -2, 3, -3, 4], [1, -1, 2, -2, 3, -3, 4, -5], [1, -1, 2, -2, 3, -3, 4, 5], [1, -1, 2, -2, 3, -3, 4, 5, -5], [1, -1, 2, -2, 3, -3, 4, -4], [1, -1, 2, -2, 3, -3, 4, -4, -5], [1, -1, 2, -2, 3, -3, 4, -4, 5], [1, -1, 2, -2, 3, -3, 4, -4, 5, -5]]"
      },
      {
        "input": "nums = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1]",
        "output": "[[], [-1], [-2], [-2, -1], [-3], [-3, -1], [-3, -2], [-3, -2, -1], [-4], [-4, -1], [-4, -2], [-4, -2, -1], [-4, -3], [-4, -3, -1], [-4, -3, -2], [-4, -3, -2, -1], [-5], [-5, -1], [-5, -2], [-5, -2, -1], [-5, -3], [-5, -3, -1], [-5, -3, -2], [-5, -3, -2, -1], [-5, -4], [-5, -4, -1], [-5, -4, -2], [-5, -4, -2, -1], [-5, -4, -3], [-5, -4, -3, -1], [-5, -4, -3, -2], [-5, -4, -3, -2, -1], [-6], [-6, -1], [-6, -2], [-6, -2, -1], [-6, -3], [-6, -3, -1], [-6, -3, -2], [-6, -3, -2, -1], [-6, -4], [-6, -4, -1], [-6, -4, -2], [-6, -4, -2, -1], [-6, -4, -3], [-6, -4, -3, -1], [-6, -4, -3, -2], [-6, -4, -3, -2, -1], [-6, -5], [-6, -5, -1], [-6, -5, -2], [-6, -5, -2, -1], [-6, -5, -3], [-6, -5, -3, -1], [-6, -5, -3, -2], [-6, -5, -3, -2, -1], [-6, -5, -4], [-6, -5, -4, -1], [-6, -5, -4, -2], [-6, -5, -4, -2, -1], [-6, -5, -4, -3], [-6, -5, -4, -3, -1], [-6, -5, -4, -3, -2], [-6, -5, -4, -3, -2, -1], [-7], [-7, -1], [-7, -2], [-7, -2, -1], [-7, -3], [-7, -3, -1], [-7, -3, -2], [-7, -3, -2, -1], [-7, -4], [-7, -4, -1], [-7, -4, -2], [-7, -4, -2, -1], [-7, -4, -3], [-7, -4, -3, -1], [-7, -4, -3, -2], [-7, -4, -3, -2, -1], [-7, -5], [-7, -5, -1], [-7, -5, -2], [-7, -5, -2, -1], [-7, -5, -3], [-7, -5, -3, -1], [-7, -5, -3, -2], [-7, -5, -3, -2, -1], [-7, -5, -4], [-7, -5, -4, -1], [-7, -5, -4, -2], [-7, -5, -4, -2, -1], [-7, -5, -4, -3], [-7, -5, -4, -3, -1], [-7, -5, -4, -3, -2], [-7, -5, -4, -3, -2, -1], [-7, -6], [-7, -6, -1], [-7, -6, -2], [-7, -6, -2, -1], [-7, -6, -3], [-7, -6, -3, -1], [-7, -6, -3, -2], [-7, -6, -3, -2, -1], [-7, -6, -4], [-7, -6, -4, -1], [-7, -6, -4, -2], [-7, -6, -4, -2, -1], [-7, -6, -4, -3], [-7, -6, -4, -3, -1], [-7, -6, -4, -3, -2], [-7, -6, -4, -3, -2, -1], [-7, -6, -5], [-7, -6, -5, -1], [-7, -6, -5, -2], [-7, -6, -5, -2, -1], [-7, -6, -5, -3], [-7, -6, -5, -3, -1], [-7, -6, -5, -3, -2], [-7, -6, -5, -3, -2, -1], [-7, -6, -5, -4], [-7, -6, -5, -4, -1], [-7, -6, -5, -4, -2], [-7, -6, -5, -4, -2, -1], [-7, -6, -5, -4, -3], [-7, -6, -5, -4, -3, -1], [-7, -6, -5, -4, -3, -2], [-7, -6, -5, -4, -3, -2, -1], [-8], [-8, -1], [-8, -2], [-8, -2, -1], [-8, -3], [-8, -3, -1], [-8, -3, -2], [-8, -3, -2, -1], [-8, -4], [-8, -4, -1], [-8, -4, -2], [-8, -4, -2, -1], [-8, -4, -3], [-8, -4, -3, -1], [-8, -4, -3, -2], [-8, -4, -3, -2, -1], [-8, -5], [-8, -5, -1], [-8, -5, -2], [-8, -5, -2, -1], [-8, -5, -3], [-8, -5, -3, -1], [-8, -5, -3, -2], [-8, -5, -3, -2, -1], [-8, -5, -4], [-8, -5, -4, -1], [-8, -5, -4, -2], [-8, -5, -4, -2, -1], [-8, -5, -4, -3], [-8, -5, -4, -3, -1], [-8, -5, -4, -3, -2], [-8, -5, -4, -3, -2, -1], [-8, -6], [-8, -6, -1], [-8, -6, -2], [-8, -6, -2, -1], [-8, -6, -3], [-8, -6, -3, -1], [-8, -6, -3, -2], [-8, -6, -3, -2, -1], [-8, -6, -4], [-8, -6, -4, -1], [-8, -6, -4, -2], [-8, -6, -4, -2, -1], [-8, -6, -4, -3], [-8, -6, -4, -3, -1], [-8, -6, -4, -3, -2], [-8, -6, -4, -3, -2, -1], [-8, -6, -5], [-8, -6, -5, -1], [-8, -6, -5, -2], [-8, -6, -5, -2, -1], [-8, -6, -5, -3], [-8, -6, -5, -3, -1], [-8, -6, -5, -3, -2], [-8, -6, -5, -3, -2, -1], [-8, -6, -5, -4], [-8, -6, -5, -4, -1], [-8, -6, -5, -4, -2], [-8, -6, -5, -4, -2, -1], [-8, -6, -5, -4, -3], [-8, -6, -5, -4, -3, -1], [-8, -6, -5, -4, -3, -2], [-8, -6, -5, -4, -3, -2, -1], [-8, -7], [-8, -7, -1], [-8, -7, -2], [-8, -7, -2, -1], [-8, -7, -3], [-8, -7, -3, -1], [-8, -7, -3, -2], [-8, -7, -3, -2, -1], [-8, -7, -4], [-8, -7, -4, -1], [-8, -7, -4, -2], [-8, -7, -4, -2, -1], [-8, -7, -4, -3], [-8, -7, -4, -3, -1], [-8, -7, -4, -3, -2], [-8, -7, -4, -3, -2, -1], [-8, -7, -5], [-8, -7, -5, -1], [-8, -7, -5, -2], [-8, -7, -5, -2, -1], [-8, -7, -5, -3], [-8, -7, -5, -3, -1], [-8, -7, -5, -3, -2], [-8, -7, -5, -3, -2, -1], [-8, -7, -5, -4], [-8, -7, -5, -4, -1], [-8, -7, -5, -4, -2], [-8, -7, -5, -4, -2, -1], [-8, -7, -5, -4, -3], [-8, -7, -5, -4, -3, -1], [-8, -7, -5, -4, -3, -2], [-8, -7, -5, -4, -3, -2, -1], [-8, -7, -6], [-8, -7, -6, -1], [-8, -7, -6, -2], [-8, -7, -6, -2, -1], [-8, -7, -6, -3], [-8, -7, -6, -3, -1], [-8, -7, -6, -3, -2], [-8, -7, -6, -3, -2, -1], [-8, -7, -6, -4], [-8, -7, -6, -4, -1], [-8, -7, -6, -4, -2], [-8, -7, -6, -4, -2, -1], [-8, -7, -6, -4, -3], [-8, -7, -6, -4, -3, -1], [-8, -7, -6, -4, -3, -2], [-8, -7, -6, -4, -3, -2, -1], [-8, -7, -6, -5], [-8, -7, -6, -5, -1], [-8, -7, -6, -5, -2], [-8, -7, -6, -5, -2, -1], [-8, -7, -6, -5, -3], [-8, -7, -6, -5, -3, -1], [-8, -7, -6, -5, -3, -2], [-8, -7, -6, -5, -3, -2, -1], [-8, -7, -6, -5, -4], [-8, -7, -6, -5, -4, -1], [-8, -7, -6, -5, -4, -2], [-8, -7, -6, -5, -4, -2, -1], [-8, -7, -6, -5, -4, -3], [-8, -7, -6, -5, -4, -3, -1], [-8, -7, -6, -5, -4, -3, -2], [-8, -7, -6, -5, -4, -3, -2, -1], [-9], [-9, -1], [-9, -2], [-9, -2, -1], [-9, -3], [-9, -3, -1], [-9, -3, -2], [-9, -3, -2, -1], [-9, -4], [-9, -4, -1], [-9, -4, -2], [-9, -4, -2, -1], [-9, -4, -3], [-9, -4, -3, -1], [-9, -4, -3, -2], [-9, -4, -3, -2, -1], [-9, -5], [-9, -5, -1], [-9, -5, -2], [-9, -5, -2, -1], [-9, -5, -3], [-9, -5, -3, -1], [-9, -5, -3, -2], [-9, -5, -3, -2, -1], [-9, -5, -4], [-9, -5, -4, -1], [-9, -5, -4, -2], [-9, -5, -4, -2, -1], [-9, -5, -4, -3], [-9, -5, -4, -3, -1], [-9, -5, -4, -3, -2], [-9, -5, -4, -3, -2, -1], [-9, -6], [-9, -6, -1], [-9, -6, -2], [-9, -6, -2, -1], [-9, -6, -3], [-9, -6, -3, -1], [-9, -6, -3, -2], [-9, -6, -3, -2, -1], [-9, -6, -4], [-9, -6, -4, -1], [-9, -6, -4, -2], [-9, -6, -4, -2, -1], [-9, -6, -4, -3], [-9, -6, -4, -3, -1], [-9, -6, -4, -3, -2], [-9, -6, -4, -3, -2, -1], [-9, -6, -5], [-9, -6, -5, -1], [-9, -6, -5, -2], [-9, -6, -5, -2, -1], [-9, -6, -5, -3], [-9, -6, -5, -3, -1], [-9, -6, -5, -3, -2], [-9, -6, -5, -3, -2, -1], [-9, -6, -5, -4], [-9, -6, -5, -4, -1], [-9, -6, -5, -4, -2], [-9, -6, -5, -4, -2, -1], [-9, -6, -5, -4, -3], [-9, -6, -5, -4, -3, -1], [-9, -6, -5, -4, -3, -2], [-9, -6, -5, -4, -3, -2, -1], [-9, -7], [-9, -7, -1], [-9, -7, -2], [-9, -7, -2, -1], [-9, -7, -3], [-9, -7, -3, -1], [-9, -7, -3, -2], [-9, -7, -3, -2, -1], [-9, -7, -4], [-9, -7, -4, -1], [-9, -7, -4, -2], [-9, -7, -4, -2, -1], [-9, -7, -4, -3], [-9, -7, -4, -3, -1], [-9, -7, -4, -3, -2], [-9, -7, -4, -3, -2, -1], [-9, -7, -5], [-9, -7, -5, -1], [-9, -7, -5, -2], [-9, -7, -5, -2, -1], [-9, -7, -5, -3], [-9, -7, -5, -3, -1], [-9, -7, -5, -3, -2], [-9, -7, -5, -3, -2, -1], [-9, -7, -5, -4], [-9, -7, -5, -4, -1], [-9, -7, -5, -4, -2], [-9, -7, -5, -4, -2, -1], [-9, -7, -5, -4, -3], [-9, -7, -5, -4, -3, -1], [-9, -7, -5, -4, -3, -2], [-9, -7, -5, -4, -3, -2, -1], [-9, -7, -6], [-9, -7, -6, -1], [-9, -7, -6, -2], [-9, -7, -6, -2, -1], [-9, -7, -6, -3], [-9, -7, -6, -3, -1], [-9, -7, -6, -3, -2], [-9, -7, -6, -3, -2, -1], [-9, -7, -6, -4], [-9, -7, -6, -4, -1], [-9, -7, -6, -4, -2], [-9, -7, -6, -4, -2, -1], [-9, -7, -6, -4, -3], [-9, -7, -6, -4, -3, -1], [-9, -7, -6, -4, -3, -2], [-9, -7, -6, -4, -3, -2, -1], [-9, -7, -6, -5], [-9, -7, -6, -5, -1], [-9, -7, -6, -5, -2], [-9, -7, -6, -5, -2, -1], [-9, -7, -6, -5, -3], [-9, -7, -6, -5, -3, -1], [-9, -7, -6, -5, -3, -2], [-9, -7, -6, -5, -3, -2, -1], [-9, -7, -6, -5, -4], [-9, -7, -6, -5, -4, -1], [-9, -7, -6, -5, -4, -2], [-9, -7, -6, -5, -4, -2, -1], [-9, -7, -6, -5, -4, -3], [-9, -7, -6, -5, -4, -3, -1], [-9, -7, -6, -5, -4, -3, -2], [-9, -7, -6, -5, -4, -3, -2, -1], [-9, -8], [-9, -8, -1], [-9, -8, -2], [-9, -8, -2, -1], [-9, -8, -3], [-9, -8, -3, -1], [-9, -8, -3, -2], [-9, -8, -3, -2, -1], [-9, -8, -4], [-9, -8, -4, -1], [-9, -8, -4, -2], [-9, -8, -4, -2, -1], [-9, -8, -4, -3], [-9, -8, -4, -3, -1], [-9, -8, -4, -3, -2], [-9, -8, -4, -3, -2, -1], [-9, -8, -5], [-9, -8, -5, -1], [-9, -8, -5, -2], [-9, -8, -5, -2, -1], [-9, -8, -5, -3], [-9, -8, -5, -3, -1], [-9, -8, -5, -3, -2], [-9, -8, -5, -3, -2, -1], [-9, -8, -5, -4], [-9, -8, -5, -4, -1], [-9, -8, -5, -4, -2], [-9, -8, -5, -4, -2, -1], [-9, -8, -5, -4, -3], [-9, -8, -5, -4, -3, -1], [-9, -8, -5, -4, -3, -2], [-9, -8, -5, -4, -3, -2, -1], [-9, -8, -6], [-9, -8, -6, -1], [-9, -8, -6, -2], [-9, -8, -6, -2, -1], [-9, -8, -6, -3], [-9, -8, -6, -3, -1], [-9, -8, -6, -3, -2], [-9, -8, -6, -3, -2, -1], [-9, -8, -6, -4], [-9, -8, -6, -4, -1], [-9, -8, -6, -4, -2], [-9, -8, -6, -4, -2, -1], [-9, -8, -6, -4, -3], [-9, -8, -6, -4, -3, -1], [-9, -8, -6, -4, -3, -2], [-9, -8, -6, -4, -3, -2, -1], [-9, -8, -6, -5], [-9, -8, -6, -5, -1], [-9, -8, -6, -5, -2], [-9, -8, -6, -5, -2, -1], [-9, -8, -6, -5, -3], [-9, -8, -6, -5, -3, -1], [-9, -8, -6, -5, -3, -2], [-9, -8, -6, -5, -3, -2, -1], [-9, -8, -6, -5, -4], [-9, -8, -6, -5, -4, -1], [-9, -8, -6, -5, -4, -2], [-9, -8, -6, -5, -4, -2, -1], [-9, -8, -6, -5, -4, -3], [-9, -8, -6, -5, -4, -3, -1], [-9, -8, -6, -5, -4, -3, -2], [-9, -8, -6, -5, -4, -3, -2, -1], [-9, -8, -7], [-9, -8, -7, -1], [-9, -8, -7, -2], [-9, -8, -7, -2, -1], [-9, -8, -7, -3], [-9, -8, -7, -3, -1], [-9, -8, -7, -3, -2], [-9, -8, -7, -3, -2, -1], [-9, -8, -7, -4], [-9, -8, -7, -4, -1], [-9, -8, -7, -4, -2], [-9, -8, -7, -4, -2, -1], [-9, -8, -7, -4, -3], [-9, -8, -7, -4, -3, -1], [-9, -8, -7, -4, -3, -2], [-9, -8, -7, -4, -3, -2, -1], [-9, -8, -7, -5], [-9, -8, -7, -5, -1], [-9, -8, -7, -5, -2], [-9, -8, -7, -5, -2, -1], [-9, -8, -7, -5, -3], [-9, -8, -7, -5, -3, -1], [-9, -8, -7, -5, -3, -2], [-9, -8, -7, -5, -3, -2, -1], [-9, -8, -7, -5, -4], [-9, -8, -7, -5, -4, -1], [-9, -8, -7, -5, -4, -2], [-9, -8, -7, -5, -4, -2, -1], [-9, -8, -7, -5, -4, -3], [-9, -8, -7, -5, -4, -3, -1], [-9, -8, -7, -5, -4, -3, -2], [-9, -8, -7, -5, -4, -3, -2, -1], [-9, -8, -7, -6], [-9, -8, -7, -6, -1], [-9, -8, -7, -6, -2], [-9, -8, -7, -6, -2, -1], [-9, -8, -7, -6, -3], [-9, -8, -7, -6, -3, -1], [-9, -8, -7, -6, -3, -2], [-9, -8, -7, -6, -3, -2, -1], [-9, -8, -7, -6, -4], [-9, -8, -7, -6, -4, -1], [-9, -8, -7, -6, -4, -2], [-9, -8, -7, -6, -4, -2, -1], [-9, -8, -7, -6, -4, -3], [-9, -8, -7, -6, -4, -3, -1], [-9, -8, -7, -6, -4, -3, -2], [-9, -8, -7, -6, -4, -3, -2, -1], [-9, -8, -7, -6, -5], [-9, -8, -7, -6, -5, -1], [-9, -8, -7, -6, -5, -2], [-9, -8, -7, -6, -5, -2, -1], [-9, -8, -7, -6, -5, -3], [-9, -8, -7, -6, -5, -3, -1], [-9, -8, -7, -6, -5, -3, -2], [-9, -8, -7, -6, -5, -3, -2, -1], [-9, -8, -7, -6, -5, -4], [-9, -8, -7, -6, -5, -4, -1], [-9, -8, -7, -6, -5, -4, -2], [-9, -8, -7, -6, -5, -4, -2, -1], [-9, -8, -7, -6, -5, -4, -3], [-9, -8, -7, -6, -5, -4, -3, -1], [-9, -8, -7, -6, -5, -4, -3, -2], [-9, -8, -7, -6, -5, -4, -3, -2, -1], [-10], [-10, -1], [-10, -2], [-10, -2, -1], [-10, -3], [-10, -3, -1], [-10, -3, -2], [-10, -3, -2, -1], [-10, -4], [-10, -4, -1], [-10, -4, -2], [-10, -4, -2, -1], [-10, -4, -3], [-10, -4, -3, -1], [-10, -4, -3, -2], [-10, -4, -3, -2, -1], [-10, -5], [-10, -5, -1], [-10, -5, -2], [-10, -5, -2, -1], [-10, -5, -3], [-10, -5, -3, -1], [-10, -5, -3, -2], [-10, -5, -3, -2, -1], [-10, -5, -4], [-10, -5, -4, -1], [-10, -5, -4, -2], [-10, -5, -4, -2, -1], [-10, -5, -4, -3], [-10, -5, -4, -3, -1], [-10, -5, -4, -3, -2], [-10, -5, -4, -3, -2, -1], [-10, -6], [-10, -6, -1], [-10, -6, -2], [-10, -6, -2, -1], [-10, -6, -3], [-10, -6, -3, -1], [-10, -6, -3, -2], [-10, -6, -3, -2, -1], [-10, -6, -4], [-10, -6, -4, -1], [-10, -6, -4, -2], [-10, -6, -4, -2, -1], [-10, -6, -4, -3], [-10, -6, -4, -3, -1], [-10, -6, -4, -3, -2], [-10, -6, -4, -3, -2, -1], [-10, -6, -5], [-10, -6, -5, -1], [-10, -6, -5, -2], [-10, -6, -5, -2, -1], [-10, -6, -5, -3], [-10, -6, -5, -3, -1], [-10, -6, -5, -3, -2], [-10, -6, -5, -3, -2, -1], [-10, -6, -5, -4], [-10, -6, -5, -4, -1], [-10, -6, -5, -4, -2], [-10, -6, -5, -4, -2, -1], [-10, -6, -5, -4, -3], [-10, -6, -5, -4, -3, -1], [-10, -6, -5, -4, -3, -2], [-10, -6, -5, -4, -3, -2, -1], [-10, -7], [-10, -7, -1], [-10, -7, -2], [-10, -7, -2, -1], [-10, -7, -3], [-10, -7, -3, -1], [-10, -7, -3, -2], [-10, -7, -3, -2, -1], [-10, -7, -4], [-10, -7, -4, -1], [-10, -7, -4, -2], [-10, -7, -4, -2, -1], [-10, -7, -4, -3], [-10, -7, -4, -3, -1], [-10, -7, -4, -3, -2], [-10, -7, -4, -3, -2, -1], [-10, -7, -5], [-10, -7, -5, -1], [-10, -7, -5, -2], [-10, -7, -5, -2, -1], [-10, -7, -5, -3], [-10, -7, -5, -3, -1], [-10, -7, -5, -3, -2], [-10, -7, -5, -3, -2, -1], [-10, -7, -5, -4], [-10, -7, -5, -4, -1], [-10, -7, -5, -4, -2], [-10, -7, -5, -4, -2, -1], [-10, -7, -5, -4, -3], [-10, -7, -5, -4, -3, -1], [-10, -7, -5, -4, -3, -2], [-10, -7, -5, -4, -3, -2, -1], [-10, -7, -6], [-10, -7, -6, -1], [-10, -7, -6, -2], [-10, -7, -6, -2, -1], [-10, -7, -6, -3], [-10, -7, -6, -3, -1], [-10, -7, -6, -3, -2], [-10, -7, -6, -3, -2, -1], [-10, -7, -6, -4], [-10, -7, -6, -4, -1], [-10, -7, -6, -4, -2], [-10, -7, -6, -4, -2, -1], [-10, -7, -6, -4, -3], [-10, -7, -6, -4, -3, -1], [-10, -7, -6, -4, -3, -2], [-10, -7, -6, -4, -3, -2, -1], [-10, -7, -6, -5], [-10, -7, -6, -5, -1], [-10, -7, -6, -5, -2], [-10, -7, -6, -5, -2, -1], [-10, -7, -6, -5, -3], [-10, -7, -6, -5, -3, -1], [-10, -7, -6, -5, -3, -2], [-10, -7, -6, -5, -3, -2, -1], [-10, -7, -6, -5, -4], [-10, -7, -6, -5, -4, -1], [-10, -7, -6, -5, -4, -2], [-10, -7, -6, -5, -4, -2, -1], [-10, -7, -6, -5, -4, -3], [-10, -7, -6, -5, -4, -3, -1], [-10, -7, -6, -5, -4, -3, -2], [-10, -7, -6, -5, -4, -3, -2, -1], [-10, -8], [-10, -8, -1], [-10, -8, -2], [-10, -8, -2, -1], [-10, -8, -3], [-10, -8, -3, -1], [-10, -8, -3, -2], [-10, -8, -3, -2, -1], [-10, -8, -4], [-10, -8, -4, -1], [-10, -8, -4, -2], [-10, -8, -4, -2, -1], [-10, -8, -4, -3], [-10, -8, -4, -3, -1], [-10, -8, -4, -3, -2], [-10, -8, -4, -3, -2, -1], [-10, -8, -5], [-10, -8, -5, -1], [-10, -8, -5, -2], [-10, -8, -5, -2, -1], [-10, -8, -5, -3], [-10, -8, -5, -3, -1], [-10, -8, -5, -3, -2], [-10, -8, -5, -3, -2, -1], [-10, -8, -5, -4], [-10, -8, -5, -4, -1], [-10, -8, -5, -4, -2], [-10, -8, -5, -4, -2, -1], [-10, -8, -5, -4, -3], [-10, -8, -5, -4, -3, -1], [-10, -8, -5, -4, -3, -2], [-10, -8, -5, -4, -3, -2, -1], [-10, -8, -6], [-10, -8, -6, -1], [-10, -8, -6, -2], [-10, -8, -6, -2, -1], [-10, -8, -6, -3], [-10, -8, -6, -3, -1], [-10, -8, -6, -3, -2], [-10, -8, -6, -3, -2, -1], [-10, -8, -6, -4], [-10, -8, -6, -4, -1], [-10, -8, -6, -4, -2], [-10, -8, -6, -4, -2, -1], [-10, -8, -6, -4, -3], [-10, -8, -6, -4, -3, -1], [-10, -8, -6, -4, -3, -2], [-10, -8, -6, -4, -3, -2, -1], [-10, -8, -6, -5], [-10, -8, -6, -5, -1], [-10, -8, -6, -5, -2], [-10, -8, -6, -5, -2, -1], [-10, -8, -6, -5, -3], [-10, -8, -6, -5, -3, -1], [-10, -8, -6, -5, -3, -2], [-10, -8, -6, -5, -3, -2, -1], [-10, -8, -6, -5, -4], [-10, -8, -6, -5, -4, -1], [-10, -8, -6, -5, -4, -2], [-10, -8, -6, -5, -4, -2, -1], [-10, -8, -6, -5, -4, -3], [-10, -8, -6, -5, -4, -3, -1], [-10, -8, -6, -5, -4, -3, -2], [-10, -8, -6, -5, -4, -3, -2, -1], [-10, -8, -7], [-10, -8, -7, -1], [-10, -8, -7, -2], [-10, -8, -7, -2, -1], [-10, -8, -7, -3], [-10, -8, -7, -3, -1], [-10, -8, -7, -3, -2], [-10, -8, -7, -3, -2, -1], [-10, -8, -7, -4], [-10, -8, -7, -4, -1], [-10, -8, -7, -4, -2], [-10, -8, -7, -4, -2, -1], [-10, -8, -7, -4, -3], [-10, -8, -7, -4, -3, -1], [-10, -8, -7, -4, -3, -2], [-10, -8, -7, -4, -3, -2, -1], [-10, -8, -7, -5], [-10, -8, -7, -5, -1], [-10, -8, -7, -5, -2], [-10, -8, -7, -5, -2, -1], [-10, -8, -7, -5, -3], [-10, -8, -7, -5, -3, -1], [-10, -8, -7, -5, -3, -2], [-10, -8, -7, -5, -3, -2, -1], [-10, -8, -7, -5, -4], [-10, -8, -7, -5, -4, -1], [-10, -8, -7, -5, -4, -2], [-10, -8, -7, -5, -4, -2, -1], [-10, -8, -7, -5, -4, -3], [-10, -8, -7, -5, -4, -3, -1], [-10, -8, -7, -5, -4, -3, -2], [-10, -8, -7, -5, -4, -3, -2, -1], [-10, -8, -7, -6], [-10, -8, -7, -6, -1], [-10, -8, -7, -6, -2], [-10, -8, -7, -6, -2, -1], [-10, -8, -7, -6, -3], [-10, -8, -7, -6, -3, -1], [-10, -8, -7, -6, -3, -2], [-10, -8, -7, -6, -3, -2, -1], [-10, -8, -7, -6, -4], [-10, -8, -7, -6, -4, -1], [-10, -8, -7, -6, -4, -2], [-10, -8, -7, -6, -4, -2, -1], [-10, -8, -7, -6, -4, -3], [-10, -8, -7, -6, -4, -3, -1], [-10, -8, -7, -6, -4, -3, -2], [-10, -8, -7, -6, -4, -3, -2, -1], [-10, -8, -7, -6, -5], [-10, -8, -7, -6, -5, -1], [-10, -8, -7, -6, -5, -2], [-10, -8, -7, -6, -5, -2, -1], [-10, -8, -7, -6, -5, -3], [-10, -8, -7, -6, -5, -3, -1], [-10, -8, -7, -6, -5, -3, -2], [-10, -8, -7, -6, -5, -3, -2, -1], [-10, -8, -7, -6, -5, -4], [-10, -8, -7, -6, -5, -4, -1], [-10, -8, -7, -6, -5, -4, -2], [-10, -8, -7, -6, -5, -4, -2, -1], [-10, -8, -7, -6, -5, -4, -3], [-10, -8, -7, -6, -5, -4, -3, -1], [-10, -8, -7, -6, -5, -4, -3, -2], [-10, -8, -7, -6, -5, -4, -3, -2, -1], [-10, -9], [-10, -9, -1], [-10, -9, -2], [-10, -9, -2, -1], [-10, -9, -3], [-10, -9, -3, -1], [-10, -9, -3, -2], [-10, -9, -3, -2, -1], [-10, -9, -4], [-10, -9, -4, -1], [-10, -9, -4, -2], [-10, -9, -4, -2, -1], [-10, -9, -4, -3], [-10, -9, -4, -3, -1], [-10, -9, -4, -3, -2], [-10, -9, -4, -3, -2, -1], [-10, -9, -5], [-10, -9, -5, -1], [-10, -9, -5, -2], [-10, -9, -5, -2, -1], [-10, -9, -5, -3], [-10, -9, -5, -3, -1], [-10, -9, -5, -3, -2], [-10, -9, -5, -3, -2, -1], [-10, -9, -5, -4], [-10, -9, -5, -4, -1], [-10, -9, -5, -4, -2], [-10, -9, -5, -4, -2, -1], [-10, -9, -5, -4, -3], [-10, -9, -5, -4, -3, -1], [-10, -9, -5, -4, -3, -2], [-10, -9, -5, -4, -3, -2, -1], [-10, -9, -6], [-10, -9, -6, -1], [-10, -9, -6, -2], [-10, -9, -6, -2, -1], [-10, -9, -6, -3], [-10, -9, -6, -3, -1], [-10, -9, -6, -3, -2], [-10, -9, -6, -3, -2, -1], [-10, -9, -6, -4], [-10, -9, -6, -4, -1], [-10, -9, -6, -4, -2], [-10, -9, -6, -4, -2, -1], [-10, -9, -6, -4, -3], [-10, -9, -6, -4, -3, -1], [-10, -9, -6, -4, -3, -2], [-10, -9, -6, -4, -3, -2, -1], [-10, -9, -6, -5], [-10, -9, -6, -5, -1], [-10, -9, -6, -5, -2], [-10, -9, -6, -5, -2, -1], [-10, -9, -6, -5, -3], [-10, -9, -6, -5, -3, -1], [-10, -9, -6, -5, -3, -2], [-10, -9, -6, -5, -3, -2, -1], [-10, -9, -6, -5, -4], [-10, -9, -6, -5, -4, -1], [-10, -9, -6, -5, -4, -2], [-10, -9, -6, -5, -4, -2, -1], [-10, -9, -6, -5, -4, -3], [-10, -9, -6, -5, -4, -3, -1], [-10, -9, -6, -5, -4, -3, -2], [-10, -9, -6, -5, -4, -3, -2, -1], [-10, -9, -7], [-10, -9, -7, -1], [-10, -9, -7, -2], [-10, -9, -7, -2, -1], [-10, -9, -7, -3], [-10, -9, -7, -3, -1], [-10, -9, -7, -3, -2], [-10, -9, -7, -3, -2, -1], [-10, -9, -7, -4], [-10, -9, -7, -4, -1], [-10, -9, -7, -4, -2], [-10, -9, -7, -4, -2, -1], [-10, -9, -7, -4, -3], [-10, -9, -7, -4, -3, -1], [-10, -9, -7, -4, -3, -2], [-10, -9, -7, -4, -3, -2, -1], [-10, -9, -7, -5], [-10, -9, -7, -5, -1], [-10, -9, -7, -5, -2], [-10, -9, -7, -5, -2, -1], [-10, -9, -7, -5, -3], [-10, -9, -7, -5, -3, -1], [-10, -9, -7, -5, -3, -2], [-10, -9, -7, -5, -3, -2, -1], [-10, -9, -7, -5, -4], [-10, -9, -7, -5, -4, -1], [-10, -9, -7, -5, -4, -2], [-10, -9, -7, -5, -4, -2, -1], [-10, -9, -7, -5, -4, -3], [-10, -9, -7, -5, -4, -3, -1], [-10, -9, -7, -5, -4, -3, -2], [-10, -9, -7, -5, -4, -3, -2, -1], [-10, -9, -7, -6], [-10, -9, -7, -6, -1], [-10, -9, -7, -6, -2], [-10, -9, -7, -6, -2, -1], [-10, -9, -7, -6, -3], [-10, -9, -7, -6, -3, -1], [-10, -9, -7, -6, -3, -2], [-10, -9, -7, -6, -3, -2, -1], [-10, -9, -7, -6, -4], [-10, -9, -7, -6, -4, -1], [-10, -9, -7, -6, -4, -2], [-10, -9, -7, -6, -4, -2, -1], [-10, -9, -7, -6, -4, -3], [-10, -9, -7, -6, -4, -3, -1], [-10, -9, -7, -6, -4, -3, -2], [-10, -9, -7, -6, -4, -3, -2, -1], [-10, -9, -7, -6, -5], [-10, -9, -7, -6, -5, -1], [-10, -9, -7, -6, -5, -2], [-10, -9, -7, -6, -5, -2, -1], [-10, -9, -7, -6, -5, -3], [-10, -9, -7, -6, -5, -3, -1], [-10, -9, -7, -6, -5, -3, -2], [-10, -9, -7, -6, -5, -3, -2, -1], [-10, -9, -7, -6, -5, -4], [-10, -9, -7, -6, -5, -4, -1], [-10, -9, -7, -6, -5, -4, -2], [-10, -9, -7, -6, -5, -4, -2, -1], [-10, -9, -7, -6, -5, -4, -3], [-10, -9, -7, -6, -5, -4, -3, -1], [-10, -9, -7, -6, -5, -4, -3, -2], [-10, -9, -7, -6, -5, -4, -3, -2, -1], [-10, -9, -8], [-10, -9, -8, -1], [-10, -9, -8, -2], [-10, -9, -8, -2, -1], [-10, -9, -8, -3], [-10, -9, -8, -3, -1], [-10, -9, -8, -3, -2], [-10, -9, -8, -3, -2, -1], [-10, -9, -8, -4], [-10, -9, -8, -4, -1], [-10, -9, -8, -4, -2], [-10, -9, -8, -4, -2, -1], [-10, -9, -8, -4, -3], [-10, -9, -8, -4, -3, -1], [-10, -9, -8, -4, -3, -2], [-10, -9, -8, -4, -3, -2, -1], [-10, -9, -8, -5], [-10, -9, -8, -5, -1], [-10, -9, -8, -5, -2], [-10, -9, -8, -5, -2, -1], [-10, -9, -8, -5, -3], [-10, -9, -8, -5, -3, -1], [-10, -9, -8, -5, -3, -2], [-10, -9, -8, -5, -3, -2, -1], [-10, -9, -8, -5, -4], [-10, -9, -8, -5, -4, -1], [-10, -9, -8, -5, -4, -2], [-10, -9, -8, -5, -4, -2, -1], [-10, -9, -8, -5, -4, -3], [-10, -9, -8, -5, -4, -3, -1], [-10, -9, -8, -5, -4, -3, -2], [-10, -9, -8, -5, -4, -3, -2, -1], [-10, -9, -8, -6], [-10, -9, -8, -6, -1], [-10, -9, -8, -6, -2], [-10, -9, -8, -6, -2, -1], [-10, -9, -8, -6, -3], [-10, -9, -8, -6, -3, -1], [-10, -9, -8, -6, -3, -2], [-10, -9, -8, -6, -3, -2, -1], [-10, -9, -8, -6, -4], [-10, -9, -8, -6, -4, -1], [-10, -9, -8, -6, -4, -2], [-10, -9, -8, -6, -4, -2, -1], [-10, -9, -8, -6, -4, -3], [-10, -9, -8, -6, -4, -3, -1], [-10, -9, -8, -6, -4, -3, -2], [-10, -9, -8, -6, -4, -3, -2, -1], [-10, -9, -8, -6, -5], [-10, -9, -8, -6, -5, -1], [-10, -9, -8, -6, -5, -2], [-10, -9, -8, -6, -5, -2, -1], [-10, -9, -8, -6, -5, -3], [-10, -9, -8, -6, -5, -3, -1], [-10, -9, -8, -6, -5, -3, -2], [-10, -9, -8, -6, -5, -3, -2, -1], [-10, -9, -8, -6, -5, -4], [-10, -9, -8, -6, -5, -4, -1], [-10, -9, -8, -6, -5, -4, -2], [-10, -9, -8, -6, -5, -4, -2, -1], [-10, -9, -8, -6, -5, -4, -3], [-10, -9, -8, -6, -5, -4, -3, -1], [-10, -9, -8, -6, -5, -4, -3, -2], [-10, -9, -8, -6, -5, -4, -3, -2, -1], [-10, -9, -8, -7], [-10, -9, -8, -7, -1], [-10, -9, -8, -7, -2], [-10, -9, -8, -7, -2, -1], [-10, -9, -8, -7, -3], [-10, -9, -8, -7, -3, -1], [-10, -9, -8, -7, -3, -2], [-10, -9, -8, -7, -3, -2, -1], [-10, -9, -8, -7, -4], [-10, -9, -8, -7, -4, -1], [-10, -9, -8, -7, -4, -2], [-10, -9, -8, -7, -4, -2, -1], [-10, -9, -8, -7, -4, -3], [-10, -9, -8, -7, -4, -3, -1], [-10, -9, -8, -7, -4, -3, -2], [-10, -9, -8, -7, -4, -3, -2, -1], [-10, -9, -8, -7, -5], [-10, -9, -8, -7, -5, -1], [-10, -9, -8, -7, -5, -2], [-10, -9, -8, -7, -5, -2, -1], [-10, -9, -8, -7, -5, -3], [-10, -9, -8, -7, -5, -3, -1], [-10, -9, -8, -7, -5, -3, -2], [-10, -9, -8, -7, -5, -3, -2, -1], [-10, -9, -8, -7, -5, -4], [-10, -9, -8, -7, -5, -4, -1], [-10, -9, -8, -7, -5, -4, -2], [-10, -9, -8, -7, -5, -4, -2, -1], [-10, -9, -8, -7, -5, -4, -3], [-10, -9, -8, -7, -5, -4, -3, -1], [-10, -9, -8, -7, -5, -4, -3, -2], [-10, -9, -8, -7, -5, -4, -3, -2, -1], [-10, -9, -8, -7, -6], [-10, -9, -8, -7, -6, -1], [-10, -9, -8, -7, -6, -2], [-10, -9, -8, -7, -6, -2, -1], [-10, -9, -8, -7, -6, -3], [-10, -9, -8, -7, -6, -3, -1], [-10, -9, -8, -7, -6, -3, -2], [-10, -9, -8, -7, -6, -3, -2, -1], [-10, -9, -8, -7, -6, -4], [-10, -9, -8, -7, -6, -4, -1], [-10, -9, -8, -7, -6, -4, -2], [-10, -9, -8, -7, -6, -4, -2, -1], [-10, -9, -8, -7, -6, -4, -3], [-10, -9, -8, -7, -6, -4, -3, -1], [-10, -9, -8, -7, -6, -4, -3, -2], [-10, -9, -8, -7, -6, -4, -3, -2, -1], [-10, -9, -8, -7, -6, -5], [-10, -9, -8, -7, -6, -5, -1], [-10, -9, -8, -7, -6, -5, -2], [-10, -9, -8, -7, -6, -5, -2, -1], [-10, -9, -8, -7, -6, -5, -3], [-10, -9, -8, -7, -6, -5, -3, -1], [-10, -9, -8, -7, -6, -5, -3, -2], [-10, -9, -8, -7, -6, -5, -3, -2, -1], [-10, -9, -8, -7, -6, -5, -4], [-10, -9, -8, -7, -6, -5, -4, -1], [-10, -9, -8, -7, -6, -5, -4, -2], [-10, -9, -8, -7, -6, -5, -4, -2, -1], [-10, -9, -8, -7, -6, -5, -4, -3], [-10, -9, -8, -7, -6, -5, -4, -3, -1], [-10, -9, -8, -7, -6, -5, -4, -3, -2], [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]]"
      },
      {
        "input": "nums = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]",
        "output": "Execution timed out"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[[], [100], [90], [90, 100], [80], [80, 100], [80, 90], [80, 90, 100], [70], [70, 100], [70, 90], [70, 90, 100], [70, 80], [70, 80, 100], [70, 80, 90], [70, 80, 90, 100], [60], [60, 100], [60, 90], [60, 90, 100], [60, 80], [60, 80, 100], [60, 80, 90], [60, 80, 90, 100], [60, 70], [60, 70, 100], [60, 70, 90], [60, 70, 90, 100], [60, 70, 80], [60, 70, 80, 100], [60, 70, 80, 90], [60, 70, 80, 90, 100], [50], [50, 100], [50, 90], [50, 90, 100], [50, 80], [50, 80, 100], [50, 80, 90], [50, 80, 90, 100], [50, 70], [50, 70, 100], [50, 70, 90], [50, 70, 90, 100], [50, 70, 80], [50, 70, 80, 100], [50, 70, 80, 90], [50, 70, 80, 90, 100], [50, 60], [50, 60, 100], [50, 60, 90], [50, 60, 90, 100], [50, 60, 80], [50, 60, 80, 100], [50, 60, 80, 90], [50, 60, 80, 90, 100], [50, 60, 70], [50, 60, 70, 100], [50, 60, 70, 90], [50, 60, 70, 90, 100], [50, 60, 70, 80], [50, 60, 70, 80, 100], [50, 60, 70, 80, 90], [50, 60, 70, 80, 90, 100], [40], [40, 100], [40, 90], [40, 90, 100], [40, 80], [40, 80, 100], [40, 80, 90], [40, 80, 90, 100], [40, 70], [40, 70, 100], [40, 70, 90], [40, 70, 90, 100], [40, 70, 80], [40, 70, 80, 100], [40, 70, 80, 90], [40, 70, 80, 90, 100], [40, 60], [40, 60, 100], [40, 60, 90], [40, 60, 90, 100], [40, 60, 80], [40, 60, 80, 100], [40, 60, 80, 90], [40, 60, 80, 90, 100], [40, 60, 70], [40, 60, 70, 100], [40, 60, 70, 90], [40, 60, 70, 90, 100], [40, 60, 70, 80], [40, 60, 70, 80, 100], [40, 60, 70, 80, 90], [40, 60, 70, 80, 90, 100], [40, 50], [40, 50, 100], [40, 50, 90], [40, 50, 90, 100], [40, 50, 80], [40, 50, 80, 100], [40, 50, 80, 90], [40, 50, 80, 90, 100], [40, 50, 70], [40, 50, 70, 100], [40, 50, 70, 90], [40, 50, 70, 90, 100], [40, 50, 70, 80], [40, 50, 70, 80, 100], [40, 50, 70, 80, 90], [40, 50, 70, 80, 90, 100], [40, 50, 60], [40, 50, 60, 100], [40, 50, 60, 90], [40, 50, 60, 90, 100], [40, 50, 60, 80], [40, 50, 60, 80, 100], [40, 50, 60, 80, 90], [40, 50, 60, 80, 90, 100], [40, 50, 60, 70], [40, 50, 60, 70, 100], [40, 50, 60, 70, 90], [40, 50, 60, 70, 90, 100], [40, 50, 60, 70, 80], [40, 50, 60, 70, 80, 100], [40, 50, 60, 70, 80, 90], [40, 50, 60, 70, 80, 90, 100], [30], [30, 100], [30, 90], [30, 90, 100], [30, 80], [30, 80, 100], [30, 80, 90], [30, 80, 90, 100], [30, 70], [30, 70, 100], [30, 70, 90], [30, 70, 90, 100], [30, 70, 80], [30, 70, 80, 100], [30, 70, 80, 90], [30, 70, 80, 90, 100], [30, 60], [30, 60, 100], [30, 60, 90], [30, 60, 90, 100], [30, 60, 80], [30, 60, 80, 100], [30, 60, 80, 90], [30, 60, 80, 90, 100], [30, 60, 70], [30, 60, 70, 100], [30, 60, 70, 90], [30, 60, 70, 90, 100], [30, 60, 70, 80], [30, 60, 70, 80, 100], [30, 60, 70, 80, 90], [30, 60, 70, 80, 90, 100], [30, 50], [30, 50, 100], [30, 50, 90], [30, 50, 90, 100], [30, 50, 80], [30, 50, 80, 100], [30, 50, 80, 90], [30, 50, 80, 90, 100], [30, 50, 70], [30, 50, 70, 100], [30, 50, 70, 90], [30, 50, 70, 90, 100], [30, 50, 70, 80], [30, 50, 70, 80, 100], [30, 50, 70, 80, 90], [30, 50, 70, 80, 90, 100], [30, 50, 60], [30, 50, 60, 100], [30, 50, 60, 90], [30, 50, 60, 90, 100], [30, 50, 60, 80], [30, 50, 60, 80, 100], [30, 50, 60, 80, 90], [30, 50, 60, 80, 90, 100], [30, 50, 60, 70], [30, 50, 60, 70, 100], [30, 50, 60, 70, 90], [30, 50, 60, 70, 90, 100], [30, 50, 60, 70, 80], [30, 50, 60, 70, 80, 100], [30, 50, 60, 70, 80, 90], [30, 50, 60, 70, 80, 90, 100], [30, 40], [30, 40, 100], [30, 40, 90], [30, 40, 90, 100], [30, 40, 80], [30, 40, 80, 100], [30, 40, 80, 90], [30, 40, 80, 90, 100], [30, 40, 70], [30, 40, 70, 100], [30, 40, 70, 90], [30, 40, 70, 90, 100], [30, 40, 70, 80], [30, 40, 70, 80, 100], [30, 40, 70, 80, 90], [30, 40, 70, 80, 90, 100], [30, 40, 60], [30, 40, 60, 100], [30, 40, 60, 90], [30, 40, 60, 90, 100], [30, 40, 60, 80], [30, 40, 60, 80, 100], [30, 40, 60, 80, 90], [30, 40, 60, 80, 90, 100], [30, 40, 60, 70], [30, 40, 60, 70, 100], [30, 40, 60, 70, 90], [30, 40, 60, 70, 90, 100], [30, 40, 60, 70, 80], [30, 40, 60, 70, 80, 100], [30, 40, 60, 70, 80, 90], [30, 40, 60, 70, 80, 90, 100], [30, 40, 50], [30, 40, 50, 100], [30, 40, 50, 90], [30, 40, 50, 90, 100], [30, 40, 50, 80], [30, 40, 50, 80, 100], [30, 40, 50, 80, 90], [30, 40, 50, 80, 90, 100], [30, 40, 50, 70], [30, 40, 50, 70, 100], [30, 40, 50, 70, 90], [30, 40, 50, 70, 90, 100], [30, 40, 50, 70, 80], [30, 40, 50, 70, 80, 100], [30, 40, 50, 70, 80, 90], [30, 40, 50, 70, 80, 90, 100], [30, 40, 50, 60], [30, 40, 50, 60, 100], [30, 40, 50, 60, 90], [30, 40, 50, 60, 90, 100], [30, 40, 50, 60, 80], [30, 40, 50, 60, 80, 100], [30, 40, 50, 60, 80, 90], [30, 40, 50, 60, 80, 90, 100], [30, 40, 50, 60, 70], [30, 40, 50, 60, 70, 100], [30, 40, 50, 60, 70, 90], [30, 40, 50, 60, 70, 90, 100], [30, 40, 50, 60, 70, 80], [30, 40, 50, 60, 70, 80, 100], [30, 40, 50, 60, 70, 80, 90], [30, 40, 50, 60, 70, 80, 90, 100], [20], [20, 100], [20, 90], [20, 90, 100], [20, 80], [20, 80, 100], [20, 80, 90], [20, 80, 90, 100], [20, 70], [20, 70, 100], [20, 70, 90], [20, 70, 90, 100], [20, 70, 80], [20, 70, 80, 100], [20, 70, 80, 90], [20, 70, 80, 90, 100], [20, 60], [20, 60, 100], [20, 60, 90], [20, 60, 90, 100], [20, 60, 80], [20, 60, 80, 100], [20, 60, 80, 90], [20, 60, 80, 90, 100], [20, 60, 70], [20, 60, 70, 100], [20, 60, 70, 90], [20, 60, 70, 90, 100], [20, 60, 70, 80], [20, 60, 70, 80, 100], [20, 60, 70, 80, 90], [20, 60, 70, 80, 90, 100], [20, 50], [20, 50, 100], [20, 50, 90], [20, 50, 90, 100], [20, 50, 80], [20, 50, 80, 100], [20, 50, 80, 90], [20, 50, 80, 90, 100], [20, 50, 70], [20, 50, 70, 100], [20, 50, 70, 90], [20, 50, 70, 90, 100], [20, 50, 70, 80], [20, 50, 70, 80, 100], [20, 50, 70, 80, 90], [20, 50, 70, 80, 90, 100], [20, 50, 60], [20, 50, 60, 100], [20, 50, 60, 90], [20, 50, 60, 90, 100], [20, 50, 60, 80], [20, 50, 60, 80, 100], [20, 50, 60, 80, 90], [20, 50, 60, 80, 90, 100], [20, 50, 60, 70], [20, 50, 60, 70, 100], [20, 50, 60, 70, 90], [20, 50, 60, 70, 90, 100], [20, 50, 60, 70, 80], [20, 50, 60, 70, 80, 100], [20, 50, 60, 70, 80, 90], [20, 50, 60, 70, 80, 90, 100], [20, 40], [20, 40, 100], [20, 40, 90], [20, 40, 90, 100], [20, 40, 80], [20, 40, 80, 100], [20, 40, 80, 90], [20, 40, 80, 90, 100], [20, 40, 70], [20, 40, 70, 100], [20, 40, 70, 90], [20, 40, 70, 90, 100], [20, 40, 70, 80], [20, 40, 70, 80, 100], [20, 40, 70, 80, 90], [20, 40, 70, 80, 90, 100], [20, 40, 60], [20, 40, 60, 100], [20, 40, 60, 90], [20, 40, 60, 90, 100], [20, 40, 60, 80], [20, 40, 60, 80, 100], [20, 40, 60, 80, 90], [20, 40, 60, 80, 90, 100], [20, 40, 60, 70], [20, 40, 60, 70, 100], [20, 40, 60, 70, 90], [20, 40, 60, 70, 90, 100], [20, 40, 60, 70, 80], [20, 40, 60, 70, 80, 100], [20, 40, 60, 70, 80, 90], [20, 40, 60, 70, 80, 90, 100], [20, 40, 50], [20, 40, 50, 100], [20, 40, 50, 90], [20, 40, 50, 90, 100], [20, 40, 50, 80], [20, 40, 50, 80, 100], [20, 40, 50, 80, 90], [20, 40, 50, 80, 90, 100], [20, 40, 50, 70], [20, 40, 50, 70, 100], [20, 40, 50, 70, 90], [20, 40, 50, 70, 90, 100], [20, 40, 50, 70, 80], [20, 40, 50, 70, 80, 100], [20, 40, 50, 70, 80, 90], [20, 40, 50, 70, 80, 90, 100], [20, 40, 50, 60], [20, 40, 50, 60, 100], [20, 40, 50, 60, 90], [20, 40, 50, 60, 90, 100], [20, 40, 50, 60, 80], [20, 40, 50, 60, 80, 100], [20, 40, 50, 60, 80, 90], [20, 40, 50, 60, 80, 90, 100], [20, 40, 50, 60, 70], [20, 40, 50, 60, 70, 100], [20, 40, 50, 60, 70, 90], [20, 40, 50, 60, 70, 90, 100], [20, 40, 50, 60, 70, 80], [20, 40, 50, 60, 70, 80, 100], [20, 40, 50, 60, 70, 80, 90], [20, 40, 50, 60, 70, 80, 90, 100], [20, 30], [20, 30, 100], [20, 30, 90], [20, 30, 90, 100], [20, 30, 80], [20, 30, 80, 100], [20, 30, 80, 90], [20, 30, 80, 90, 100], [20, 30, 70], [20, 30, 70, 100], [20, 30, 70, 90], [20, 30, 70, 90, 100], [20, 30, 70, 80], [20, 30, 70, 80, 100], [20, 30, 70, 80, 90], [20, 30, 70, 80, 90, 100], [20, 30, 60], [20, 30, 60, 100], [20, 30, 60, 90], [20, 30, 60, 90, 100], [20, 30, 60, 80], [20, 30, 60, 80, 100], [20, 30, 60, 80, 90], [20, 30, 60, 80, 90, 100], [20, 30, 60, 70], [20, 30, 60, 70, 100], [20, 30, 60, 70, 90], [20, 30, 60, 70, 90, 100], [20, 30, 60, 70, 80], [20, 30, 60, 70, 80, 100], [20, 30, 60, 70, 80, 90], [20, 30, 60, 70, 80, 90, 100], [20, 30, 50], [20, 30, 50, 100], [20, 30, 50, 90], [20, 30, 50, 90, 100], [20, 30, 50, 80], [20, 30, 50, 80, 100], [20, 30, 50, 80, 90], [20, 30, 50, 80, 90, 100], [20, 30, 50, 70], [20, 30, 50, 70, 100], [20, 30, 50, 70, 90], [20, 30, 50, 70, 90, 100], [20, 30, 50, 70, 80], [20, 30, 50, 70, 80, 100], [20, 30, 50, 70, 80, 90], [20, 30, 50, 70, 80, 90, 100], [20, 30, 50, 60], [20, 30, 50, 60, 100], [20, 30, 50, 60, 90], [20, 30, 50, 60, 90, 100], [20, 30, 50, 60, 80], [20, 30, 50, 60, 80, 100], [20, 30, 50, 60, 80, 90], [20, 30, 50, 60, 80, 90, 100], [20, 30, 50, 60, 70], [20, 30, 50, 60, 70, 100], [20, 30, 50, 60, 70, 90], [20, 30, 50, 60, 70, 90, 100], [20, 30, 50, 60, 70, 80], [20, 30, 50, 60, 70, 80, 100], [20, 30, 50, 60, 70, 80, 90], [20, 30, 50, 60, 70, 80, 90, 100], [20, 30, 40], [20, 30, 40, 100], [20, 30, 40, 90], [20, 30, 40, 90, 100], [20, 30, 40, 80], [20, 30, 40, 80, 100], [20, 30, 40, 80, 90], [20, 30, 40, 80, 90, 100], [20, 30, 40, 70], [20, 30, 40, 70, 100], [20, 30, 40, 70, 90], [20, 30, 40, 70, 90, 100], [20, 30, 40, 70, 80], [20, 30, 40, 70, 80, 100], [20, 30, 40, 70, 80, 90], [20, 30, 40, 70, 80, 90, 100], [20, 30, 40, 60], [20, 30, 40, 60, 100], [20, 30, 40, 60, 90], [20, 30, 40, 60, 90, 100], [20, 30, 40, 60, 80], [20, 30, 40, 60, 80, 100], [20, 30, 40, 60, 80, 90], [20, 30, 40, 60, 80, 90, 100], [20, 30, 40, 60, 70], [20, 30, 40, 60, 70, 100], [20, 30, 40, 60, 70, 90], [20, 30, 40, 60, 70, 90, 100], [20, 30, 40, 60, 70, 80], [20, 30, 40, 60, 70, 80, 100], [20, 30, 40, 60, 70, 80, 90], [20, 30, 40, 60, 70, 80, 90, 100], [20, 30, 40, 50], [20, 30, 40, 50, 100], [20, 30, 40, 50, 90], [20, 30, 40, 50, 90, 100], [20, 30, 40, 50, 80], [20, 30, 40, 50, 80, 100], [20, 30, 40, 50, 80, 90], [20, 30, 40, 50, 80, 90, 100], [20, 30, 40, 50, 70], [20, 30, 40, 50, 70, 100], [20, 30, 40, 50, 70, 90], [20, 30, 40, 50, 70, 90, 100], [20, 30, 40, 50, 70, 80], [20, 30, 40, 50, 70, 80, 100], [20, 30, 40, 50, 70, 80, 90], [20, 30, 40, 50, 70, 80, 90, 100], [20, 30, 40, 50, 60], [20, 30, 40, 50, 60, 100], [20, 30, 40, 50, 60, 90], [20, 30, 40, 50, 60, 90, 100], [20, 30, 40, 50, 60, 80], [20, 30, 40, 50, 60, 80, 100], [20, 30, 40, 50, 60, 80, 90], [20, 30, 40, 50, 60, 80, 90, 100], [20, 30, 40, 50, 60, 70], [20, 30, 40, 50, 60, 70, 100], [20, 30, 40, 50, 60, 70, 90], [20, 30, 40, 50, 60, 70, 90, 100], [20, 30, 40, 50, 60, 70, 80], [20, 30, 40, 50, 60, 70, 80, 100], [20, 30, 40, 50, 60, 70, 80, 90], [20, 30, 40, 50, 60, 70, 80, 90, 100], [10], [10, 100], [10, 90], [10, 90, 100], [10, 80], [10, 80, 100], [10, 80, 90], [10, 80, 90, 100], [10, 70], [10, 70, 100], [10, 70, 90], [10, 70, 90, 100], [10, 70, 80], [10, 70, 80, 100], [10, 70, 80, 90], [10, 70, 80, 90, 100], [10, 60], [10, 60, 100], [10, 60, 90], [10, 60, 90, 100], [10, 60, 80], [10, 60, 80, 100], [10, 60, 80, 90], [10, 60, 80, 90, 100], [10, 60, 70], [10, 60, 70, 100], [10, 60, 70, 90], [10, 60, 70, 90, 100], [10, 60, 70, 80], [10, 60, 70, 80, 100], [10, 60, 70, 80, 90], [10, 60, 70, 80, 90, 100], [10, 50], [10, 50, 100], [10, 50, 90], [10, 50, 90, 100], [10, 50, 80], [10, 50, 80, 100], [10, 50, 80, 90], [10, 50, 80, 90, 100], [10, 50, 70], [10, 50, 70, 100], [10, 50, 70, 90], [10, 50, 70, 90, 100], [10, 50, 70, 80], [10, 50, 70, 80, 100], [10, 50, 70, 80, 90], [10, 50, 70, 80, 90, 100], [10, 50, 60], [10, 50, 60, 100], [10, 50, 60, 90], [10, 50, 60, 90, 100], [10, 50, 60, 80], [10, 50, 60, 80, 100], [10, 50, 60, 80, 90], [10, 50, 60, 80, 90, 100], [10, 50, 60, 70], [10, 50, 60, 70, 100], [10, 50, 60, 70, 90], [10, 50, 60, 70, 90, 100], [10, 50, 60, 70, 80], [10, 50, 60, 70, 80, 100], [10, 50, 60, 70, 80, 90], [10, 50, 60, 70, 80, 90, 100], [10, 40], [10, 40, 100], [10, 40, 90], [10, 40, 90, 100], [10, 40, 80], [10, 40, 80, 100], [10, 40, 80, 90], [10, 40, 80, 90, 100], [10, 40, 70], [10, 40, 70, 100], [10, 40, 70, 90], [10, 40, 70, 90, 100], [10, 40, 70, 80], [10, 40, 70, 80, 100], [10, 40, 70, 80, 90], [10, 40, 70, 80, 90, 100], [10, 40, 60], [10, 40, 60, 100], [10, 40, 60, 90], [10, 40, 60, 90, 100], [10, 40, 60, 80], [10, 40, 60, 80, 100], [10, 40, 60, 80, 90], [10, 40, 60, 80, 90, 100], [10, 40, 60, 70], [10, 40, 60, 70, 100], [10, 40, 60, 70, 90], [10, 40, 60, 70, 90, 100], [10, 40, 60, 70, 80], [10, 40, 60, 70, 80, 100], [10, 40, 60, 70, 80, 90], [10, 40, 60, 70, 80, 90, 100], [10, 40, 50], [10, 40, 50, 100], [10, 40, 50, 90], [10, 40, 50, 90, 100], [10, 40, 50, 80], [10, 40, 50, 80, 100], [10, 40, 50, 80, 90], [10, 40, 50, 80, 90, 100], [10, 40, 50, 70], [10, 40, 50, 70, 100], [10, 40, 50, 70, 90], [10, 40, 50, 70, 90, 100], [10, 40, 50, 70, 80], [10, 40, 50, 70, 80, 100], [10, 40, 50, 70, 80, 90], [10, 40, 50, 70, 80, 90, 100], [10, 40, 50, 60], [10, 40, 50, 60, 100], [10, 40, 50, 60, 90], [10, 40, 50, 60, 90, 100], [10, 40, 50, 60, 80], [10, 40, 50, 60, 80, 100], [10, 40, 50, 60, 80, 90], [10, 40, 50, 60, 80, 90, 100], [10, 40, 50, 60, 70], [10, 40, 50, 60, 70, 100], [10, 40, 50, 60, 70, 90], [10, 40, 50, 60, 70, 90, 100], [10, 40, 50, 60, 70, 80], [10, 40, 50, 60, 70, 80, 100], [10, 40, 50, 60, 70, 80, 90], [10, 40, 50, 60, 70, 80, 90, 100], [10, 30], [10, 30, 100], [10, 30, 90], [10, 30, 90, 100], [10, 30, 80], [10, 30, 80, 100], [10, 30, 80, 90], [10, 30, 80, 90, 100], [10, 30, 70], [10, 30, 70, 100], [10, 30, 70, 90], [10, 30, 70, 90, 100], [10, 30, 70, 80], [10, 30, 70, 80, 100], [10, 30, 70, 80, 90], [10, 30, 70, 80, 90, 100], [10, 30, 60], [10, 30, 60, 100], [10, 30, 60, 90], [10, 30, 60, 90, 100], [10, 30, 60, 80], [10, 30, 60, 80, 100], [10, 30, 60, 80, 90], [10, 30, 60, 80, 90, 100], [10, 30, 60, 70], [10, 30, 60, 70, 100], [10, 30, 60, 70, 90], [10, 30, 60, 70, 90, 100], [10, 30, 60, 70, 80], [10, 30, 60, 70, 80, 100], [10, 30, 60, 70, 80, 90], [10, 30, 60, 70, 80, 90, 100], [10, 30, 50], [10, 30, 50, 100], [10, 30, 50, 90], [10, 30, 50, 90, 100], [10, 30, 50, 80], [10, 30, 50, 80, 100], [10, 30, 50, 80, 90], [10, 30, 50, 80, 90, 100], [10, 30, 50, 70], [10, 30, 50, 70, 100], [10, 30, 50, 70, 90], [10, 30, 50, 70, 90, 100], [10, 30, 50, 70, 80], [10, 30, 50, 70, 80, 100], [10, 30, 50, 70, 80, 90], [10, 30, 50, 70, 80, 90, 100], [10, 30, 50, 60], [10, 30, 50, 60, 100], [10, 30, 50, 60, 90], [10, 30, 50, 60, 90, 100], [10, 30, 50, 60, 80], [10, 30, 50, 60, 80, 100], [10, 30, 50, 60, 80, 90], [10, 30, 50, 60, 80, 90, 100], [10, 30, 50, 60, 70], [10, 30, 50, 60, 70, 100], [10, 30, 50, 60, 70, 90], [10, 30, 50, 60, 70, 90, 100], [10, 30, 50, 60, 70, 80], [10, 30, 50, 60, 70, 80, 100], [10, 30, 50, 60, 70, 80, 90], [10, 30, 50, 60, 70, 80, 90, 100], [10, 30, 40], [10, 30, 40, 100], [10, 30, 40, 90], [10, 30, 40, 90, 100], [10, 30, 40, 80], [10, 30, 40, 80, 100], [10, 30, 40, 80, 90], [10, 30, 40, 80, 90, 100], [10, 30, 40, 70], [10, 30, 40, 70, 100], [10, 30, 40, 70, 90], [10, 30, 40, 70, 90, 100], [10, 30, 40, 70, 80], [10, 30, 40, 70, 80, 100], [10, 30, 40, 70, 80, 90], [10, 30, 40, 70, 80, 90, 100], [10, 30, 40, 60], [10, 30, 40, 60, 100], [10, 30, 40, 60, 90], [10, 30, 40, 60, 90, 100], [10, 30, 40, 60, 80], [10, 30, 40, 60, 80, 100], [10, 30, 40, 60, 80, 90], [10, 30, 40, 60, 80, 90, 100], [10, 30, 40, 60, 70], [10, 30, 40, 60, 70, 100], [10, 30, 40, 60, 70, 90], [10, 30, 40, 60, 70, 90, 100], [10, 30, 40, 60, 70, 80], [10, 30, 40, 60, 70, 80, 100], [10, 30, 40, 60, 70, 80, 90], [10, 30, 40, 60, 70, 80, 90, 100], [10, 30, 40, 50], [10, 30, 40, 50, 100], [10, 30, 40, 50, 90], [10, 30, 40, 50, 90, 100], [10, 30, 40, 50, 80], [10, 30, 40, 50, 80, 100], [10, 30, 40, 50, 80, 90], [10, 30, 40, 50, 80, 90, 100], [10, 30, 40, 50, 70], [10, 30, 40, 50, 70, 100], [10, 30, 40, 50, 70, 90], [10, 30, 40, 50, 70, 90, 100], [10, 30, 40, 50, 70, 80], [10, 30, 40, 50, 70, 80, 100], [10, 30, 40, 50, 70, 80, 90], [10, 30, 40, 50, 70, 80, 90, 100], [10, 30, 40, 50, 60], [10, 30, 40, 50, 60, 100], [10, 30, 40, 50, 60, 90], [10, 30, 40, 50, 60, 90, 100], [10, 30, 40, 50, 60, 80], [10, 30, 40, 50, 60, 80, 100], [10, 30, 40, 50, 60, 80, 90], [10, 30, 40, 50, 60, 80, 90, 100], [10, 30, 40, 50, 60, 70], [10, 30, 40, 50, 60, 70, 100], [10, 30, 40, 50, 60, 70, 90], [10, 30, 40, 50, 60, 70, 90, 100], [10, 30, 40, 50, 60, 70, 80], [10, 30, 40, 50, 60, 70, 80, 100], [10, 30, 40, 50, 60, 70, 80, 90], [10, 30, 40, 50, 60, 70, 80, 90, 100], [10, 20], [10, 20, 100], [10, 20, 90], [10, 20, 90, 100], [10, 20, 80], [10, 20, 80, 100], [10, 20, 80, 90], [10, 20, 80, 90, 100], [10, 20, 70], [10, 20, 70, 100], [10, 20, 70, 90], [10, 20, 70, 90, 100], [10, 20, 70, 80], [10, 20, 70, 80, 100], [10, 20, 70, 80, 90], [10, 20, 70, 80, 90, 100], [10, 20, 60], [10, 20, 60, 100], [10, 20, 60, 90], [10, 20, 60, 90, 100], [10, 20, 60, 80], [10, 20, 60, 80, 100], [10, 20, 60, 80, 90], [10, 20, 60, 80, 90, 100], [10, 20, 60, 70], [10, 20, 60, 70, 100], [10, 20, 60, 70, 90], [10, 20, 60, 70, 90, 100], [10, 20, 60, 70, 80], [10, 20, 60, 70, 80, 100], [10, 20, 60, 70, 80, 90], [10, 20, 60, 70, 80, 90, 100], [10, 20, 50], [10, 20, 50, 100], [10, 20, 50, 90], [10, 20, 50, 90, 100], [10, 20, 50, 80], [10, 20, 50, 80, 100], [10, 20, 50, 80, 90], [10, 20, 50, 80, 90, 100], [10, 20, 50, 70], [10, 20, 50, 70, 100], [10, 20, 50, 70, 90], [10, 20, 50, 70, 90, 100], [10, 20, 50, 70, 80], [10, 20, 50, 70, 80, 100], [10, 20, 50, 70, 80, 90], [10, 20, 50, 70, 80, 90, 100], [10, 20, 50, 60], [10, 20, 50, 60, 100], [10, 20, 50, 60, 90], [10, 20, 50, 60, 90, 100], [10, 20, 50, 60, 80], [10, 20, 50, 60, 80, 100], [10, 20, 50, 60, 80, 90], [10, 20, 50, 60, 80, 90, 100], [10, 20, 50, 60, 70], [10, 20, 50, 60, 70, 100], [10, 20, 50, 60, 70, 90], [10, 20, 50, 60, 70, 90, 100], [10, 20, 50, 60, 70, 80], [10, 20, 50, 60, 70, 80, 100], [10, 20, 50, 60, 70, 80, 90], [10, 20, 50, 60, 70, 80, 90, 100], [10, 20, 40], [10, 20, 40, 100], [10, 20, 40, 90], [10, 20, 40, 90, 100], [10, 20, 40, 80], [10, 20, 40, 80, 100], [10, 20, 40, 80, 90], [10, 20, 40, 80, 90, 100], [10, 20, 40, 70], [10, 20, 40, 70, 100], [10, 20, 40, 70, 90], [10, 20, 40, 70, 90, 100], [10, 20, 40, 70, 80], [10, 20, 40, 70, 80, 100], [10, 20, 40, 70, 80, 90], [10, 20, 40, 70, 80, 90, 100], [10, 20, 40, 60], [10, 20, 40, 60, 100], [10, 20, 40, 60, 90], [10, 20, 40, 60, 90, 100], [10, 20, 40, 60, 80], [10, 20, 40, 60, 80, 100], [10, 20, 40, 60, 80, 90], [10, 20, 40, 60, 80, 90, 100], [10, 20, 40, 60, 70], [10, 20, 40, 60, 70, 100], [10, 20, 40, 60, 70, 90], [10, 20, 40, 60, 70, 90, 100], [10, 20, 40, 60, 70, 80], [10, 20, 40, 60, 70, 80, 100], [10, 20, 40, 60, 70, 80, 90], [10, 20, 40, 60, 70, 80, 90, 100], [10, 20, 40, 50], [10, 20, 40, 50, 100], [10, 20, 40, 50, 90], [10, 20, 40, 50, 90, 100], [10, 20, 40, 50, 80], [10, 20, 40, 50, 80, 100], [10, 20, 40, 50, 80, 90], [10, 20, 40, 50, 80, 90, 100], [10, 20, 40, 50, 70], [10, 20, 40, 50, 70, 100], [10, 20, 40, 50, 70, 90], [10, 20, 40, 50, 70, 90, 100], [10, 20, 40, 50, 70, 80], [10, 20, 40, 50, 70, 80, 100], [10, 20, 40, 50, 70, 80, 90], [10, 20, 40, 50, 70, 80, 90, 100], [10, 20, 40, 50, 60], [10, 20, 40, 50, 60, 100], [10, 20, 40, 50, 60, 90], [10, 20, 40, 50, 60, 90, 100], [10, 20, 40, 50, 60, 80], [10, 20, 40, 50, 60, 80, 100], [10, 20, 40, 50, 60, 80, 90], [10, 20, 40, 50, 60, 80, 90, 100], [10, 20, 40, 50, 60, 70], [10, 20, 40, 50, 60, 70, 100], [10, 20, 40, 50, 60, 70, 90], [10, 20, 40, 50, 60, 70, 90, 100], [10, 20, 40, 50, 60, 70, 80], [10, 20, 40, 50, 60, 70, 80, 100], [10, 20, 40, 50, 60, 70, 80, 90], [10, 20, 40, 50, 60, 70, 80, 90, 100], [10, 20, 30], [10, 20, 30, 100], [10, 20, 30, 90], [10, 20, 30, 90, 100], [10, 20, 30, 80], [10, 20, 30, 80, 100], [10, 20, 30, 80, 90], [10, 20, 30, 80, 90, 100], [10, 20, 30, 70], [10, 20, 30, 70, 100], [10, 20, 30, 70, 90], [10, 20, 30, 70, 90, 100], [10, 20, 30, 70, 80], [10, 20, 30, 70, 80, 100], [10, 20, 30, 70, 80, 90], [10, 20, 30, 70, 80, 90, 100], [10, 20, 30, 60], [10, 20, 30, 60, 100], [10, 20, 30, 60, 90], [10, 20, 30, 60, 90, 100], [10, 20, 30, 60, 80], [10, 20, 30, 60, 80, 100], [10, 20, 30, 60, 80, 90], [10, 20, 30, 60, 80, 90, 100], [10, 20, 30, 60, 70], [10, 20, 30, 60, 70, 100], [10, 20, 30, 60, 70, 90], [10, 20, 30, 60, 70, 90, 100], [10, 20, 30, 60, 70, 80], [10, 20, 30, 60, 70, 80, 100], [10, 20, 30, 60, 70, 80, 90], [10, 20, 30, 60, 70, 80, 90, 100], [10, 20, 30, 50], [10, 20, 30, 50, 100], [10, 20, 30, 50, 90], [10, 20, 30, 50, 90, 100], [10, 20, 30, 50, 80], [10, 20, 30, 50, 80, 100], [10, 20, 30, 50, 80, 90], [10, 20, 30, 50, 80, 90, 100], [10, 20, 30, 50, 70], [10, 20, 30, 50, 70, 100], [10, 20, 30, 50, 70, 90], [10, 20, 30, 50, 70, 90, 100], [10, 20, 30, 50, 70, 80], [10, 20, 30, 50, 70, 80, 100], [10, 20, 30, 50, 70, 80, 90], [10, 20, 30, 50, 70, 80, 90, 100], [10, 20, 30, 50, 60], [10, 20, 30, 50, 60, 100], [10, 20, 30, 50, 60, 90], [10, 20, 30, 50, 60, 90, 100], [10, 20, 30, 50, 60, 80], [10, 20, 30, 50, 60, 80, 100], [10, 20, 30, 50, 60, 80, 90], [10, 20, 30, 50, 60, 80, 90, 100], [10, 20, 30, 50, 60, 70], [10, 20, 30, 50, 60, 70, 100], [10, 20, 30, 50, 60, 70, 90], [10, 20, 30, 50, 60, 70, 90, 100], [10, 20, 30, 50, 60, 70, 80], [10, 20, 30, 50, 60, 70, 80, 100], [10, 20, 30, 50, 60, 70, 80, 90], [10, 20, 30, 50, 60, 70, 80, 90, 100], [10, 20, 30, 40], [10, 20, 30, 40, 100], [10, 20, 30, 40, 90], [10, 20, 30, 40, 90, 100], [10, 20, 30, 40, 80], [10, 20, 30, 40, 80, 100], [10, 20, 30, 40, 80, 90], [10, 20, 30, 40, 80, 90, 100], [10, 20, 30, 40, 70], [10, 20, 30, 40, 70, 100], [10, 20, 30, 40, 70, 90], [10, 20, 30, 40, 70, 90, 100], [10, 20, 30, 40, 70, 80], [10, 20, 30, 40, 70, 80, 100], [10, 20, 30, 40, 70, 80, 90], [10, 20, 30, 40, 70, 80, 90, 100], [10, 20, 30, 40, 60], [10, 20, 30, 40, 60, 100], [10, 20, 30, 40, 60, 90], [10, 20, 30, 40, 60, 90, 100], [10, 20, 30, 40, 60, 80], [10, 20, 30, 40, 60, 80, 100], [10, 20, 30, 40, 60, 80, 90], [10, 20, 30, 40, 60, 80, 90, 100], [10, 20, 30, 40, 60, 70], [10, 20, 30, 40, 60, 70, 100], [10, 20, 30, 40, 60, 70, 90], [10, 20, 30, 40, 60, 70, 90, 100], [10, 20, 30, 40, 60, 70, 80], [10, 20, 30, 40, 60, 70, 80, 100], [10, 20, 30, 40, 60, 70, 80, 90], [10, 20, 30, 40, 60, 70, 80, 90, 100], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50, 100], [10, 20, 30, 40, 50, 90], [10, 20, 30, 40, 50, 90, 100], [10, 20, 30, 40, 50, 80], [10, 20, 30, 40, 50, 80, 100], [10, 20, 30, 40, 50, 80, 90], [10, 20, 30, 40, 50, 80, 90, 100], [10, 20, 30, 40, 50, 70], [10, 20, 30, 40, 50, 70, 100], [10, 20, 30, 40, 50, 70, 90], [10, 20, 30, 40, 50, 70, 90, 100], [10, 20, 30, 40, 50, 70, 80], [10, 20, 30, 40, 50, 70, 80, 100], [10, 20, 30, 40, 50, 70, 80, 90], [10, 20, 30, 40, 50, 70, 80, 90, 100], [10, 20, 30, 40, 50, 60], [10, 20, 30, 40, 50, 60, 100], [10, 20, 30, 40, 50, 60, 90], [10, 20, 30, 40, 50, 60, 90, 100], [10, 20, 30, 40, 50, 60, 80], [10, 20, 30, 40, 50, 60, 80, 100], [10, 20, 30, 40, 50, 60, 80, 90], [10, 20, 30, 40, 50, 60, 80, 90, 100], [10, 20, 30, 40, 50, 60, 70], [10, 20, 30, 40, 50, 60, 70, 100], [10, 20, 30, 40, 50, 60, 70, 90], [10, 20, 30, 40, 50, 60, 70, 90, 100], [10, 20, 30, 40, 50, 60, 70, 80], [10, 20, 30, 40, 50, 60, 70, 80, 100], [10, 20, 30, 40, 50, 60, 70, 80, 90], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]"
      },
      {
        "input": "nums = [1,2,3,4,5,6]",
        "output": "[[], [6], [5], [5, 6], [4], [4, 6], [4, 5], [4, 5, 6], [3], [3, 6], [3, 5], [3, 5, 6], [3, 4], [3, 4, 6], [3, 4, 5], [3, 4, 5, 6], [2], [2, 6], [2, 5], [2, 5, 6], [2, 4], [2, 4, 6], [2, 4, 5], [2, 4, 5, 6], [2, 3], [2, 3, 6], [2, 3, 5], [2, 3, 5, 6], [2, 3, 4], [2, 3, 4, 6], [2, 3, 4, 5], [2, 3, 4, 5, 6], [1], [1, 6], [1, 5], [1, 5, 6], [1, 4], [1, 4, 6], [1, 4, 5], [1, 4, 5, 6], [1, 3], [1, 3, 6], [1, 3, 5], [1, 3, 5, 6], [1, 3, 4], [1, 3, 4, 6], [1, 3, 4, 5], [1, 3, 4, 5, 6], [1, 2], [1, 2, 6], [1, 2, 5], [1, 2, 5, 6], [1, 2, 4], [1, 2, 4, 6], [1, 2, 4, 5], [1, 2, 4, 5, 6], [1, 2, 3], [1, 2, 3, 6], [1, 2, 3, 5], [1, 2, 3, 5, 6], [1, 2, 3, 4], [1, 2, 3, 4, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50]",
        "output": "[[], [50], [40], [40, 50], [30], [30, 50], [30, 40], [30, 40, 50], [20], [20, 50], [20, 40], [20, 40, 50], [20, 30], [20, 30, 50], [20, 30, 40], [20, 30, 40, 50], [10], [10, 50], [10, 40], [10, 40, 50], [10, 30], [10, 30, 50], [10, 30, 40], [10, 30, 40, 50], [10, 20], [10, 20, 50], [10, 20, 40], [10, 20, 40, 50], [10, 20, 30], [10, 20, 30, 50], [10, 20, 30, 40], [10, 20, 30, 40, 50]]"
      },
      {
        "input": "nums = [-5, 0, 5, 10, 15]",
        "output": "[[], [15], [10], [10, 15], [5], [5, 15], [5, 10], [5, 10, 15], [0], [0, 15], [0, 10], [0, 10, 15], [0, 5], [0, 5, 15], [0, 5, 10], [0, 5, 10, 15], [-5], [-5, 15], [-5, 10], [-5, 10, 15], [-5, 5], [-5, 5, 15], [-5, 5, 10], [-5, 5, 10, 15], [-5, 0], [-5, 0, 15], [-5, 0, 10], [-5, 0, 10, 15], [-5, 0, 5], [-5, 0, 5, 15], [-5, 0, 5, 10], [-5, 0, 5, 10, 15]]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0]",
        "output": "[[], [0], [1], [1, 0], [2], [2, 0], [2, 1], [2, 1, 0], [3], [3, 0], [3, 1], [3, 1, 0], [3, 2], [3, 2, 0], [3, 2, 1], [3, 2, 1, 0], [4], [4, 0], [4, 1], [4, 1, 0], [4, 2], [4, 2, 0], [4, 2, 1], [4, 2, 1, 0], [4, 3], [4, 3, 0], [4, 3, 1], [4, 3, 1, 0], [4, 3, 2], [4, 3, 2, 0], [4, 3, 2, 1], [4, 3, 2, 1, 0], [5], [5, 0], [5, 1], [5, 1, 0], [5, 2], [5, 2, 0], [5, 2, 1], [5, 2, 1, 0], [5, 3], [5, 3, 0], [5, 3, 1], [5, 3, 1, 0], [5, 3, 2], [5, 3, 2, 0], [5, 3, 2, 1], [5, 3, 2, 1, 0], [5, 4], [5, 4, 0], [5, 4, 1], [5, 4, 1, 0], [5, 4, 2], [5, 4, 2, 0], [5, 4, 2, 1], [5, 4, 2, 1, 0], [5, 4, 3], [5, 4, 3, 0], [5, 4, 3, 1], [5, 4, 3, 1, 0], [5, 4, 3, 2], [5, 4, 3, 2, 0], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1, 0], [6], [6, 0], [6, 1], [6, 1, 0], [6, 2], [6, 2, 0], [6, 2, 1], [6, 2, 1, 0], [6, 3], [6, 3, 0], [6, 3, 1], [6, 3, 1, 0], [6, 3, 2], [6, 3, 2, 0], [6, 3, 2, 1], [6, 3, 2, 1, 0], [6, 4], [6, 4, 0], [6, 4, 1], [6, 4, 1, 0], [6, 4, 2], [6, 4, 2, 0], [6, 4, 2, 1], [6, 4, 2, 1, 0], [6, 4, 3], [6, 4, 3, 0], [6, 4, 3, 1], [6, 4, 3, 1, 0], [6, 4, 3, 2], [6, 4, 3, 2, 0], [6, 4, 3, 2, 1], [6, 4, 3, 2, 1, 0], [6, 5], [6, 5, 0], [6, 5, 1], [6, 5, 1, 0], [6, 5, 2], [6, 5, 2, 0], [6, 5, 2, 1], [6, 5, 2, 1, 0], [6, 5, 3], [6, 5, 3, 0], [6, 5, 3, 1], [6, 5, 3, 1, 0], [6, 5, 3, 2], [6, 5, 3, 2, 0], [6, 5, 3, 2, 1], [6, 5, 3, 2, 1, 0], [6, 5, 4], [6, 5, 4, 0], [6, 5, 4, 1], [6, 5, 4, 1, 0], [6, 5, 4, 2], [6, 5, 4, 2, 0], [6, 5, 4, 2, 1], [6, 5, 4, 2, 1, 0], [6, 5, 4, 3], [6, 5, 4, 3, 0], [6, 5, 4, 3, 1], [6, 5, 4, 3, 1, 0], [6, 5, 4, 3, 2], [6, 5, 4, 3, 2, 0], [6, 5, 4, 3, 2, 1], [6, 5, 4, 3, 2, 1, 0], [7], [7, 0], [7, 1], [7, 1, 0], [7, 2], [7, 2, 0], [7, 2, 1], [7, 2, 1, 0], [7, 3], [7, 3, 0], [7, 3, 1], [7, 3, 1, 0], [7, 3, 2], [7, 3, 2, 0], [7, 3, 2, 1], [7, 3, 2, 1, 0], [7, 4], [7, 4, 0], [7, 4, 1], [7, 4, 1, 0], [7, 4, 2], [7, 4, 2, 0], [7, 4, 2, 1], [7, 4, 2, 1, 0], [7, 4, 3], [7, 4, 3, 0], [7, 4, 3, 1], [7, 4, 3, 1, 0], [7, 4, 3, 2], [7, 4, 3, 2, 0], [7, 4, 3, 2, 1], [7, 4, 3, 2, 1, 0], [7, 5], [7, 5, 0], [7, 5, 1], [7, 5, 1, 0], [7, 5, 2], [7, 5, 2, 0], [7, 5, 2, 1], [7, 5, 2, 1, 0], [7, 5, 3], [7, 5, 3, 0], [7, 5, 3, 1], [7, 5, 3, 1, 0], [7, 5, 3, 2], [7, 5, 3, 2, 0], [7, 5, 3, 2, 1], [7, 5, 3, 2, 1, 0], [7, 5, 4], [7, 5, 4, 0], [7, 5, 4, 1], [7, 5, 4, 1, 0], [7, 5, 4, 2], [7, 5, 4, 2, 0], [7, 5, 4, 2, 1], [7, 5, 4, 2, 1, 0], [7, 5, 4, 3], [7, 5, 4, 3, 0], [7, 5, 4, 3, 1], [7, 5, 4, 3, 1, 0], [7, 5, 4, 3, 2], [7, 5, 4, 3, 2, 0], [7, 5, 4, 3, 2, 1], [7, 5, 4, 3, 2, 1, 0], [7, 6], [7, 6, 0], [7, 6, 1], [7, 6, 1, 0], [7, 6, 2], [7, 6, 2, 0], [7, 6, 2, 1], [7, 6, 2, 1, 0], [7, 6, 3], [7, 6, 3, 0], [7, 6, 3, 1], [7, 6, 3, 1, 0], [7, 6, 3, 2], [7, 6, 3, 2, 0], [7, 6, 3, 2, 1], [7, 6, 3, 2, 1, 0], [7, 6, 4], [7, 6, 4, 0], [7, 6, 4, 1], [7, 6, 4, 1, 0], [7, 6, 4, 2], [7, 6, 4, 2, 0], [7, 6, 4, 2, 1], [7, 6, 4, 2, 1, 0], [7, 6, 4, 3], [7, 6, 4, 3, 0], [7, 6, 4, 3, 1], [7, 6, 4, 3, 1, 0], [7, 6, 4, 3, 2], [7, 6, 4, 3, 2, 0], [7, 6, 4, 3, 2, 1], [7, 6, 4, 3, 2, 1, 0], [7, 6, 5], [7, 6, 5, 0], [7, 6, 5, 1], [7, 6, 5, 1, 0], [7, 6, 5, 2], [7, 6, 5, 2, 0], [7, 6, 5, 2, 1], [7, 6, 5, 2, 1, 0], [7, 6, 5, 3], [7, 6, 5, 3, 0], [7, 6, 5, 3, 1], [7, 6, 5, 3, 1, 0], [7, 6, 5, 3, 2], [7, 6, 5, 3, 2, 0], [7, 6, 5, 3, 2, 1], [7, 6, 5, 3, 2, 1, 0], [7, 6, 5, 4], [7, 6, 5, 4, 0], [7, 6, 5, 4, 1], [7, 6, 5, 4, 1, 0], [7, 6, 5, 4, 2], [7, 6, 5, 4, 2, 0], [7, 6, 5, 4, 2, 1], [7, 6, 5, 4, 2, 1, 0], [7, 6, 5, 4, 3], [7, 6, 5, 4, 3, 0], [7, 6, 5, 4, 3, 1], [7, 6, 5, 4, 3, 1, 0], [7, 6, 5, 4, 3, 2], [7, 6, 5, 4, 3, 2, 0], [7, 6, 5, 4, 3, 2, 1], [7, 6, 5, 4, 3, 2, 1, 0], [8], [8, 0], [8, 1], [8, 1, 0], [8, 2], [8, 2, 0], [8, 2, 1], [8, 2, 1, 0], [8, 3], [8, 3, 0], [8, 3, 1], [8, 3, 1, 0], [8, 3, 2], [8, 3, 2, 0], [8, 3, 2, 1], [8, 3, 2, 1, 0], [8, 4], [8, 4, 0], [8, 4, 1], [8, 4, 1, 0], [8, 4, 2], [8, 4, 2, 0], [8, 4, 2, 1], [8, 4, 2, 1, 0], [8, 4, 3], [8, 4, 3, 0], [8, 4, 3, 1], [8, 4, 3, 1, 0], [8, 4, 3, 2], [8, 4, 3, 2, 0], [8, 4, 3, 2, 1], [8, 4, 3, 2, 1, 0], [8, 5], [8, 5, 0], [8, 5, 1], [8, 5, 1, 0], [8, 5, 2], [8, 5, 2, 0], [8, 5, 2, 1], [8, 5, 2, 1, 0], [8, 5, 3], [8, 5, 3, 0], [8, 5, 3, 1], [8, 5, 3, 1, 0], [8, 5, 3, 2], [8, 5, 3, 2, 0], [8, 5, 3, 2, 1], [8, 5, 3, 2, 1, 0], [8, 5, 4], [8, 5, 4, 0], [8, 5, 4, 1], [8, 5, 4, 1, 0], [8, 5, 4, 2], [8, 5, 4, 2, 0], [8, 5, 4, 2, 1], [8, 5, 4, 2, 1, 0], [8, 5, 4, 3], [8, 5, 4, 3, 0], [8, 5, 4, 3, 1], [8, 5, 4, 3, 1, 0], [8, 5, 4, 3, 2], [8, 5, 4, 3, 2, 0], [8, 5, 4, 3, 2, 1], [8, 5, 4, 3, 2, 1, 0], [8, 6], [8, 6, 0], [8, 6, 1], [8, 6, 1, 0], [8, 6, 2], [8, 6, 2, 0], [8, 6, 2, 1], [8, 6, 2, 1, 0], [8, 6, 3], [8, 6, 3, 0], [8, 6, 3, 1], [8, 6, 3, 1, 0], [8, 6, 3, 2], [8, 6, 3, 2, 0], [8, 6, 3, 2, 1], [8, 6, 3, 2, 1, 0], [8, 6, 4], [8, 6, 4, 0], [8, 6, 4, 1], [8, 6, 4, 1, 0], [8, 6, 4, 2], [8, 6, 4, 2, 0], [8, 6, 4, 2, 1], [8, 6, 4, 2, 1, 0], [8, 6, 4, 3], [8, 6, 4, 3, 0], [8, 6, 4, 3, 1], [8, 6, 4, 3, 1, 0], [8, 6, 4, 3, 2], [8, 6, 4, 3, 2, 0], [8, 6, 4, 3, 2, 1], [8, 6, 4, 3, 2, 1, 0], [8, 6, 5], [8, 6, 5, 0], [8, 6, 5, 1], [8, 6, 5, 1, 0], [8, 6, 5, 2], [8, 6, 5, 2, 0], [8, 6, 5, 2, 1], [8, 6, 5, 2, 1, 0], [8, 6, 5, 3], [8, 6, 5, 3, 0], [8, 6, 5, 3, 1], [8, 6, 5, 3, 1, 0], [8, 6, 5, 3, 2], [8, 6, 5, 3, 2, 0], [8, 6, 5, 3, 2, 1], [8, 6, 5, 3, 2, 1, 0], [8, 6, 5, 4], [8, 6, 5, 4, 0], [8, 6, 5, 4, 1], [8, 6, 5, 4, 1, 0], [8, 6, 5, 4, 2], [8, 6, 5, 4, 2, 0], [8, 6, 5, 4, 2, 1], [8, 6, 5, 4, 2, 1, 0], [8, 6, 5, 4, 3], [8, 6, 5, 4, 3, 0], [8, 6, 5, 4, 3, 1], [8, 6, 5, 4, 3, 1, 0], [8, 6, 5, 4, 3, 2], [8, 6, 5, 4, 3, 2, 0], [8, 6, 5, 4, 3, 2, 1], [8, 6, 5, 4, 3, 2, 1, 0], [8, 7], [8, 7, 0], [8, 7, 1], [8, 7, 1, 0], [8, 7, 2], [8, 7, 2, 0], [8, 7, 2, 1], [8, 7, 2, 1, 0], [8, 7, 3], [8, 7, 3, 0], [8, 7, 3, 1], [8, 7, 3, 1, 0], [8, 7, 3, 2], [8, 7, 3, 2, 0], [8, 7, 3, 2, 1], [8, 7, 3, 2, 1, 0], [8, 7, 4], [8, 7, 4, 0], [8, 7, 4, 1], [8, 7, 4, 1, 0], [8, 7, 4, 2], [8, 7, 4, 2, 0], [8, 7, 4, 2, 1], [8, 7, 4, 2, 1, 0], [8, 7, 4, 3], [8, 7, 4, 3, 0], [8, 7, 4, 3, 1], [8, 7, 4, 3, 1, 0], [8, 7, 4, 3, 2], [8, 7, 4, 3, 2, 0], [8, 7, 4, 3, 2, 1], [8, 7, 4, 3, 2, 1, 0], [8, 7, 5], [8, 7, 5, 0], [8, 7, 5, 1], [8, 7, 5, 1, 0], [8, 7, 5, 2], [8, 7, 5, 2, 0], [8, 7, 5, 2, 1], [8, 7, 5, 2, 1, 0], [8, 7, 5, 3], [8, 7, 5, 3, 0], [8, 7, 5, 3, 1], [8, 7, 5, 3, 1, 0], [8, 7, 5, 3, 2], [8, 7, 5, 3, 2, 0], [8, 7, 5, 3, 2, 1], [8, 7, 5, 3, 2, 1, 0], [8, 7, 5, 4], [8, 7, 5, 4, 0], [8, 7, 5, 4, 1], [8, 7, 5, 4, 1, 0], [8, 7, 5, 4, 2], [8, 7, 5, 4, 2, 0], [8, 7, 5, 4, 2, 1], [8, 7, 5, 4, 2, 1, 0], [8, 7, 5, 4, 3], [8, 7, 5, 4, 3, 0], [8, 7, 5, 4, 3, 1], [8, 7, 5, 4, 3, 1, 0], [8, 7, 5, 4, 3, 2], [8, 7, 5, 4, 3, 2, 0], [8, 7, 5, 4, 3, 2, 1], [8, 7, 5, 4, 3, 2, 1, 0], [8, 7, 6], [8, 7, 6, 0], [8, 7, 6, 1], [8, 7, 6, 1, 0], [8, 7, 6, 2], [8, 7, 6, 2, 0], [8, 7, 6, 2, 1], [8, 7, 6, 2, 1, 0], [8, 7, 6, 3], [8, 7, 6, 3, 0], [8, 7, 6, 3, 1], [8, 7, 6, 3, 1, 0], [8, 7, 6, 3, 2], [8, 7, 6, 3, 2, 0], [8, 7, 6, 3, 2, 1], [8, 7, 6, 3, 2, 1, 0], [8, 7, 6, 4], [8, 7, 6, 4, 0], [8, 7, 6, 4, 1], [8, 7, 6, 4, 1, 0], [8, 7, 6, 4, 2], [8, 7, 6, 4, 2, 0], [8, 7, 6, 4, 2, 1], [8, 7, 6, 4, 2, 1, 0], [8, 7, 6, 4, 3], [8, 7, 6, 4, 3, 0], [8, 7, 6, 4, 3, 1], [8, 7, 6, 4, 3, 1, 0], [8, 7, 6, 4, 3, 2], [8, 7, 6, 4, 3, 2, 0], [8, 7, 6, 4, 3, 2, 1], [8, 7, 6, 4, 3, 2, 1, 0], [8, 7, 6, 5], [8, 7, 6, 5, 0], [8, 7, 6, 5, 1], [8, 7, 6, 5, 1, 0], [8, 7, 6, 5, 2], [8, 7, 6, 5, 2, 0], [8, 7, 6, 5, 2, 1], [8, 7, 6, 5, 2, 1, 0], [8, 7, 6, 5, 3], [8, 7, 6, 5, 3, 0], [8, 7, 6, 5, 3, 1], [8, 7, 6, 5, 3, 1, 0], [8, 7, 6, 5, 3, 2], [8, 7, 6, 5, 3, 2, 0], [8, 7, 6, 5, 3, 2, 1], [8, 7, 6, 5, 3, 2, 1, 0], [8, 7, 6, 5, 4], [8, 7, 6, 5, 4, 0], [8, 7, 6, 5, 4, 1], [8, 7, 6, 5, 4, 1, 0], [8, 7, 6, 5, 4, 2], [8, 7, 6, 5, 4, 2, 0], [8, 7, 6, 5, 4, 2, 1], [8, 7, 6, 5, 4, 2, 1, 0], [8, 7, 6, 5, 4, 3], [8, 7, 6, 5, 4, 3, 0], [8, 7, 6, 5, 4, 3, 1], [8, 7, 6, 5, 4, 3, 1, 0], [8, 7, 6, 5, 4, 3, 2], [8, 7, 6, 5, 4, 3, 2, 0], [8, 7, 6, 5, 4, 3, 2, 1], [8, 7, 6, 5, 4, 3, 2, 1, 0], [9], [9, 0], [9, 1], [9, 1, 0], [9, 2], [9, 2, 0], [9, 2, 1], [9, 2, 1, 0], [9, 3], [9, 3, 0], [9, 3, 1], [9, 3, 1, 0], [9, 3, 2], [9, 3, 2, 0], [9, 3, 2, 1], [9, 3, 2, 1, 0], [9, 4], [9, 4, 0], [9, 4, 1], [9, 4, 1, 0], [9, 4, 2], [9, 4, 2, 0], [9, 4, 2, 1], [9, 4, 2, 1, 0], [9, 4, 3], [9, 4, 3, 0], [9, 4, 3, 1], [9, 4, 3, 1, 0], [9, 4, 3, 2], [9, 4, 3, 2, 0], [9, 4, 3, 2, 1], [9, 4, 3, 2, 1, 0], [9, 5], [9, 5, 0], [9, 5, 1], [9, 5, 1, 0], [9, 5, 2], [9, 5, 2, 0], [9, 5, 2, 1], [9, 5, 2, 1, 0], [9, 5, 3], [9, 5, 3, 0], [9, 5, 3, 1], [9, 5, 3, 1, 0], [9, 5, 3, 2], [9, 5, 3, 2, 0], [9, 5, 3, 2, 1], [9, 5, 3, 2, 1, 0], [9, 5, 4], [9, 5, 4, 0], [9, 5, 4, 1], [9, 5, 4, 1, 0], [9, 5, 4, 2], [9, 5, 4, 2, 0], [9, 5, 4, 2, 1], [9, 5, 4, 2, 1, 0], [9, 5, 4, 3], [9, 5, 4, 3, 0], [9, 5, 4, 3, 1], [9, 5, 4, 3, 1, 0], [9, 5, 4, 3, 2], [9, 5, 4, 3, 2, 0], [9, 5, 4, 3, 2, 1], [9, 5, 4, 3, 2, 1, 0], [9, 6], [9, 6, 0], [9, 6, 1], [9, 6, 1, 0], [9, 6, 2], [9, 6, 2, 0], [9, 6, 2, 1], [9, 6, 2, 1, 0], [9, 6, 3], [9, 6, 3, 0], [9, 6, 3, 1], [9, 6, 3, 1, 0], [9, 6, 3, 2], [9, 6, 3, 2, 0], [9, 6, 3, 2, 1], [9, 6, 3, 2, 1, 0], [9, 6, 4], [9, 6, 4, 0], [9, 6, 4, 1], [9, 6, 4, 1, 0], [9, 6, 4, 2], [9, 6, 4, 2, 0], [9, 6, 4, 2, 1], [9, 6, 4, 2, 1, 0], [9, 6, 4, 3], [9, 6, 4, 3, 0], [9, 6, 4, 3, 1], [9, 6, 4, 3, 1, 0], [9, 6, 4, 3, 2], [9, 6, 4, 3, 2, 0], [9, 6, 4, 3, 2, 1], [9, 6, 4, 3, 2, 1, 0], [9, 6, 5], [9, 6, 5, 0], [9, 6, 5, 1], [9, 6, 5, 1, 0], [9, 6, 5, 2], [9, 6, 5, 2, 0], [9, 6, 5, 2, 1], [9, 6, 5, 2, 1, 0], [9, 6, 5, 3], [9, 6, 5, 3, 0], [9, 6, 5, 3, 1], [9, 6, 5, 3, 1, 0], [9, 6, 5, 3, 2], [9, 6, 5, 3, 2, 0], [9, 6, 5, 3, 2, 1], [9, 6, 5, 3, 2, 1, 0], [9, 6, 5, 4], [9, 6, 5, 4, 0], [9, 6, 5, 4, 1], [9, 6, 5, 4, 1, 0], [9, 6, 5, 4, 2], [9, 6, 5, 4, 2, 0], [9, 6, 5, 4, 2, 1], [9, 6, 5, 4, 2, 1, 0], [9, 6, 5, 4, 3], [9, 6, 5, 4, 3, 0], [9, 6, 5, 4, 3, 1], [9, 6, 5, 4, 3, 1, 0], [9, 6, 5, 4, 3, 2], [9, 6, 5, 4, 3, 2, 0], [9, 6, 5, 4, 3, 2, 1], [9, 6, 5, 4, 3, 2, 1, 0], [9, 7], [9, 7, 0], [9, 7, 1], [9, 7, 1, 0], [9, 7, 2], [9, 7, 2, 0], [9, 7, 2, 1], [9, 7, 2, 1, 0], [9, 7, 3], [9, 7, 3, 0], [9, 7, 3, 1], [9, 7, 3, 1, 0], [9, 7, 3, 2], [9, 7, 3, 2, 0], [9, 7, 3, 2, 1], [9, 7, 3, 2, 1, 0], [9, 7, 4], [9, 7, 4, 0], [9, 7, 4, 1], [9, 7, 4, 1, 0], [9, 7, 4, 2], [9, 7, 4, 2, 0], [9, 7, 4, 2, 1], [9, 7, 4, 2, 1, 0], [9, 7, 4, 3], [9, 7, 4, 3, 0], [9, 7, 4, 3, 1], [9, 7, 4, 3, 1, 0], [9, 7, 4, 3, 2], [9, 7, 4, 3, 2, 0], [9, 7, 4, 3, 2, 1], [9, 7, 4, 3, 2, 1, 0], [9, 7, 5], [9, 7, 5, 0], [9, 7, 5, 1], [9, 7, 5, 1, 0], [9, 7, 5, 2], [9, 7, 5, 2, 0], [9, 7, 5, 2, 1], [9, 7, 5, 2, 1, 0], [9, 7, 5, 3], [9, 7, 5, 3, 0], [9, 7, 5, 3, 1], [9, 7, 5, 3, 1, 0], [9, 7, 5, 3, 2], [9, 7, 5, 3, 2, 0], [9, 7, 5, 3, 2, 1], [9, 7, 5, 3, 2, 1, 0], [9, 7, 5, 4], [9, 7, 5, 4, 0], [9, 7, 5, 4, 1], [9, 7, 5, 4, 1, 0], [9, 7, 5, 4, 2], [9, 7, 5, 4, 2, 0], [9, 7, 5, 4, 2, 1], [9, 7, 5, 4, 2, 1, 0], [9, 7, 5, 4, 3], [9, 7, 5, 4, 3, 0], [9, 7, 5, 4, 3, 1], [9, 7, 5, 4, 3, 1, 0], [9, 7, 5, 4, 3, 2], [9, 7, 5, 4, 3, 2, 0], [9, 7, 5, 4, 3, 2, 1], [9, 7, 5, 4, 3, 2, 1, 0], [9, 7, 6], [9, 7, 6, 0], [9, 7, 6, 1], [9, 7, 6, 1, 0], [9, 7, 6, 2], [9, 7, 6, 2, 0], [9, 7, 6, 2, 1], [9, 7, 6, 2, 1, 0], [9, 7, 6, 3], [9, 7, 6, 3, 0], [9, 7, 6, 3, 1], [9, 7, 6, 3, 1, 0], [9, 7, 6, 3, 2], [9, 7, 6, 3, 2, 0], [9, 7, 6, 3, 2, 1], [9, 7, 6, 3, 2, 1, 0], [9, 7, 6, 4], [9, 7, 6, 4, 0], [9, 7, 6, 4, 1], [9, 7, 6, 4, 1, 0], [9, 7, 6, 4, 2], [9, 7, 6, 4, 2, 0], [9, 7, 6, 4, 2, 1], [9, 7, 6, 4, 2, 1, 0], [9, 7, 6, 4, 3], [9, 7, 6, 4, 3, 0], [9, 7, 6, 4, 3, 1], [9, 7, 6, 4, 3, 1, 0], [9, 7, 6, 4, 3, 2], [9, 7, 6, 4, 3, 2, 0], [9, 7, 6, 4, 3, 2, 1], [9, 7, 6, 4, 3, 2, 1, 0], [9, 7, 6, 5], [9, 7, 6, 5, 0], [9, 7, 6, 5, 1], [9, 7, 6, 5, 1, 0], [9, 7, 6, 5, 2], [9, 7, 6, 5, 2, 0], [9, 7, 6, 5, 2, 1], [9, 7, 6, 5, 2, 1, 0], [9, 7, 6, 5, 3], [9, 7, 6, 5, 3, 0], [9, 7, 6, 5, 3, 1], [9, 7, 6, 5, 3, 1, 0], [9, 7, 6, 5, 3, 2], [9, 7, 6, 5, 3, 2, 0], [9, 7, 6, 5, 3, 2, 1], [9, 7, 6, 5, 3, 2, 1, 0], [9, 7, 6, 5, 4], [9, 7, 6, 5, 4, 0], [9, 7, 6, 5, 4, 1], [9, 7, 6, 5, 4, 1, 0], [9, 7, 6, 5, 4, 2], [9, 7, 6, 5, 4, 2, 0], [9, 7, 6, 5, 4, 2, 1], [9, 7, 6, 5, 4, 2, 1, 0], [9, 7, 6, 5, 4, 3], [9, 7, 6, 5, 4, 3, 0], [9, 7, 6, 5, 4, 3, 1], [9, 7, 6, 5, 4, 3, 1, 0], [9, 7, 6, 5, 4, 3, 2], [9, 7, 6, 5, 4, 3, 2, 0], [9, 7, 6, 5, 4, 3, 2, 1], [9, 7, 6, 5, 4, 3, 2, 1, 0], [9, 8], [9, 8, 0], [9, 8, 1], [9, 8, 1, 0], [9, 8, 2], [9, 8, 2, 0], [9, 8, 2, 1], [9, 8, 2, 1, 0], [9, 8, 3], [9, 8, 3, 0], [9, 8, 3, 1], [9, 8, 3, 1, 0], [9, 8, 3, 2], [9, 8, 3, 2, 0], [9, 8, 3, 2, 1], [9, 8, 3, 2, 1, 0], [9, 8, 4], [9, 8, 4, 0], [9, 8, 4, 1], [9, 8, 4, 1, 0], [9, 8, 4, 2], [9, 8, 4, 2, 0], [9, 8, 4, 2, 1], [9, 8, 4, 2, 1, 0], [9, 8, 4, 3], [9, 8, 4, 3, 0], [9, 8, 4, 3, 1], [9, 8, 4, 3, 1, 0], [9, 8, 4, 3, 2], [9, 8, 4, 3, 2, 0], [9, 8, 4, 3, 2, 1], [9, 8, 4, 3, 2, 1, 0], [9, 8, 5], [9, 8, 5, 0], [9, 8, 5, 1], [9, 8, 5, 1, 0], [9, 8, 5, 2], [9, 8, 5, 2, 0], [9, 8, 5, 2, 1], [9, 8, 5, 2, 1, 0], [9, 8, 5, 3], [9, 8, 5, 3, 0], [9, 8, 5, 3, 1], [9, 8, 5, 3, 1, 0], [9, 8, 5, 3, 2], [9, 8, 5, 3, 2, 0], [9, 8, 5, 3, 2, 1], [9, 8, 5, 3, 2, 1, 0], [9, 8, 5, 4], [9, 8, 5, 4, 0], [9, 8, 5, 4, 1], [9, 8, 5, 4, 1, 0], [9, 8, 5, 4, 2], [9, 8, 5, 4, 2, 0], [9, 8, 5, 4, 2, 1], [9, 8, 5, 4, 2, 1, 0], [9, 8, 5, 4, 3], [9, 8, 5, 4, 3, 0], [9, 8, 5, 4, 3, 1], [9, 8, 5, 4, 3, 1, 0], [9, 8, 5, 4, 3, 2], [9, 8, 5, 4, 3, 2, 0], [9, 8, 5, 4, 3, 2, 1], [9, 8, 5, 4, 3, 2, 1, 0], [9, 8, 6], [9, 8, 6, 0], [9, 8, 6, 1], [9, 8, 6, 1, 0], [9, 8, 6, 2], [9, 8, 6, 2, 0], [9, 8, 6, 2, 1], [9, 8, 6, 2, 1, 0], [9, 8, 6, 3], [9, 8, 6, 3, 0], [9, 8, 6, 3, 1], [9, 8, 6, 3, 1, 0], [9, 8, 6, 3, 2], [9, 8, 6, 3, 2, 0], [9, 8, 6, 3, 2, 1], [9, 8, 6, 3, 2, 1, 0], [9, 8, 6, 4], [9, 8, 6, 4, 0], [9, 8, 6, 4, 1], [9, 8, 6, 4, 1, 0], [9, 8, 6, 4, 2], [9, 8, 6, 4, 2, 0], [9, 8, 6, 4, 2, 1], [9, 8, 6, 4, 2, 1, 0], [9, 8, 6, 4, 3], [9, 8, 6, 4, 3, 0], [9, 8, 6, 4, 3, 1], [9, 8, 6, 4, 3, 1, 0], [9, 8, 6, 4, 3, 2], [9, 8, 6, 4, 3, 2, 0], [9, 8, 6, 4, 3, 2, 1], [9, 8, 6, 4, 3, 2, 1, 0], [9, 8, 6, 5], [9, 8, 6, 5, 0], [9, 8, 6, 5, 1], [9, 8, 6, 5, 1, 0], [9, 8, 6, 5, 2], [9, 8, 6, 5, 2, 0], [9, 8, 6, 5, 2, 1], [9, 8, 6, 5, 2, 1, 0], [9, 8, 6, 5, 3], [9, 8, 6, 5, 3, 0], [9, 8, 6, 5, 3, 1], [9, 8, 6, 5, 3, 1, 0], [9, 8, 6, 5, 3, 2], [9, 8, 6, 5, 3, 2, 0], [9, 8, 6, 5, 3, 2, 1], [9, 8, 6, 5, 3, 2, 1, 0], [9, 8, 6, 5, 4], [9, 8, 6, 5, 4, 0], [9, 8, 6, 5, 4, 1], [9, 8, 6, 5, 4, 1, 0], [9, 8, 6, 5, 4, 2], [9, 8, 6, 5, 4, 2, 0], [9, 8, 6, 5, 4, 2, 1], [9, 8, 6, 5, 4, 2, 1, 0], [9, 8, 6, 5, 4, 3], [9, 8, 6, 5, 4, 3, 0], [9, 8, 6, 5, 4, 3, 1], [9, 8, 6, 5, 4, 3, 1, 0], [9, 8, 6, 5, 4, 3, 2], [9, 8, 6, 5, 4, 3, 2, 0], [9, 8, 6, 5, 4, 3, 2, 1], [9, 8, 6, 5, 4, 3, 2, 1, 0], [9, 8, 7], [9, 8, 7, 0], [9, 8, 7, 1], [9, 8, 7, 1, 0], [9, 8, 7, 2], [9, 8, 7, 2, 0], [9, 8, 7, 2, 1], [9, 8, 7, 2, 1, 0], [9, 8, 7, 3], [9, 8, 7, 3, 0], [9, 8, 7, 3, 1], [9, 8, 7, 3, 1, 0], [9, 8, 7, 3, 2], [9, 8, 7, 3, 2, 0], [9, 8, 7, 3, 2, 1], [9, 8, 7, 3, 2, 1, 0], [9, 8, 7, 4], [9, 8, 7, 4, 0], [9, 8, 7, 4, 1], [9, 8, 7, 4, 1, 0], [9, 8, 7, 4, 2], [9, 8, 7, 4, 2, 0], [9, 8, 7, 4, 2, 1], [9, 8, 7, 4, 2, 1, 0], [9, 8, 7, 4, 3], [9, 8, 7, 4, 3, 0], [9, 8, 7, 4, 3, 1], [9, 8, 7, 4, 3, 1, 0], [9, 8, 7, 4, 3, 2], [9, 8, 7, 4, 3, 2, 0], [9, 8, 7, 4, 3, 2, 1], [9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 7, 5], [9, 8, 7, 5, 0], [9, 8, 7, 5, 1], [9, 8, 7, 5, 1, 0], [9, 8, 7, 5, 2], [9, 8, 7, 5, 2, 0], [9, 8, 7, 5, 2, 1], [9, 8, 7, 5, 2, 1, 0], [9, 8, 7, 5, 3], [9, 8, 7, 5, 3, 0], [9, 8, 7, 5, 3, 1], [9, 8, 7, 5, 3, 1, 0], [9, 8, 7, 5, 3, 2], [9, 8, 7, 5, 3, 2, 0], [9, 8, 7, 5, 3, 2, 1], [9, 8, 7, 5, 3, 2, 1, 0], [9, 8, 7, 5, 4], [9, 8, 7, 5, 4, 0], [9, 8, 7, 5, 4, 1], [9, 8, 7, 5, 4, 1, 0], [9, 8, 7, 5, 4, 2], [9, 8, 7, 5, 4, 2, 0], [9, 8, 7, 5, 4, 2, 1], [9, 8, 7, 5, 4, 2, 1, 0], [9, 8, 7, 5, 4, 3], [9, 8, 7, 5, 4, 3, 0], [9, 8, 7, 5, 4, 3, 1], [9, 8, 7, 5, 4, 3, 1, 0], [9, 8, 7, 5, 4, 3, 2], [9, 8, 7, 5, 4, 3, 2, 0], [9, 8, 7, 5, 4, 3, 2, 1], [9, 8, 7, 5, 4, 3, 2, 1, 0], [9, 8, 7, 6], [9, 8, 7, 6, 0], [9, 8, 7, 6, 1], [9, 8, 7, 6, 1, 0], [9, 8, 7, 6, 2], [9, 8, 7, 6, 2, 0], [9, 8, 7, 6, 2, 1], [9, 8, 7, 6, 2, 1, 0], [9, 8, 7, 6, 3], [9, 8, 7, 6, 3, 0], [9, 8, 7, 6, 3, 1], [9, 8, 7, 6, 3, 1, 0], [9, 8, 7, 6, 3, 2], [9, 8, 7, 6, 3, 2, 0], [9, 8, 7, 6, 3, 2, 1], [9, 8, 7, 6, 3, 2, 1, 0], [9, 8, 7, 6, 4], [9, 8, 7, 6, 4, 0], [9, 8, 7, 6, 4, 1], [9, 8, 7, 6, 4, 1, 0], [9, 8, 7, 6, 4, 2], [9, 8, 7, 6, 4, 2, 0], [9, 8, 7, 6, 4, 2, 1], [9, 8, 7, 6, 4, 2, 1, 0], [9, 8, 7, 6, 4, 3], [9, 8, 7, 6, 4, 3, 0], [9, 8, 7, 6, 4, 3, 1], [9, 8, 7, 6, 4, 3, 1, 0], [9, 8, 7, 6, 4, 3, 2], [9, 8, 7, 6, 4, 3, 2, 0], [9, 8, 7, 6, 4, 3, 2, 1], [9, 8, 7, 6, 4, 3, 2, 1, 0], [9, 8, 7, 6, 5], [9, 8, 7, 6, 5, 0], [9, 8, 7, 6, 5, 1], [9, 8, 7, 6, 5, 1, 0], [9, 8, 7, 6, 5, 2], [9, 8, 7, 6, 5, 2, 0], [9, 8, 7, 6, 5, 2, 1], [9, 8, 7, 6, 5, 2, 1, 0], [9, 8, 7, 6, 5, 3], [9, 8, 7, 6, 5, 3, 0], [9, 8, 7, 6, 5, 3, 1], [9, 8, 7, 6, 5, 3, 1, 0], [9, 8, 7, 6, 5, 3, 2], [9, 8, 7, 6, 5, 3, 2, 0], [9, 8, 7, 6, 5, 3, 2, 1], [9, 8, 7, 6, 5, 3, 2, 1, 0], [9, 8, 7, 6, 5, 4], [9, 8, 7, 6, 5, 4, 0], [9, 8, 7, 6, 5, 4, 1], [9, 8, 7, 6, 5, 4, 1, 0], [9, 8, 7, 6, 5, 4, 2], [9, 8, 7, 6, 5, 4, 2, 0], [9, 8, 7, 6, 5, 4, 2, 1], [9, 8, 7, 6, 5, 4, 2, 1, 0], [9, 8, 7, 6, 5, 4, 3], [9, 8, 7, 6, 5, 4, 3, 0], [9, 8, 7, 6, 5, 4, 3, 1], [9, 8, 7, 6, 5, 4, 3, 1, 0], [9, 8, 7, 6, 5, 4, 3, 2], [9, 8, 7, 6, 5, 4, 3, 2, 0], [9, 8, 7, 6, 5, 4, 3, 2, 1], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]]"
      },
      {
        "input": "nums = [-5, 0, 5, 10]",
        "output": "[[], [10], [5], [5, 10], [0], [0, 10], [0, 5], [0, 5, 10], [-5], [-5, 10], [-5, 5], [-5, 5, 10], [-5, 0], [-5, 0, 10], [-5, 0, 5], [-5, 0, 5, 10]]"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "Execution timed out"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "[[], [0], [1], [1, 0], [2], [2, 0], [2, 1], [2, 1, 0], [3], [3, 0], [3, 1], [3, 1, 0], [3, 2], [3, 2, 0], [3, 2, 1], [3, 2, 1, 0], [4], [4, 0], [4, 1], [4, 1, 0], [4, 2], [4, 2, 0], [4, 2, 1], [4, 2, 1, 0], [4, 3], [4, 3, 0], [4, 3, 1], [4, 3, 1, 0], [4, 3, 2], [4, 3, 2, 0], [4, 3, 2, 1], [4, 3, 2, 1, 0], [5], [5, 0], [5, 1], [5, 1, 0], [5, 2], [5, 2, 0], [5, 2, 1], [5, 2, 1, 0], [5, 3], [5, 3, 0], [5, 3, 1], [5, 3, 1, 0], [5, 3, 2], [5, 3, 2, 0], [5, 3, 2, 1], [5, 3, 2, 1, 0], [5, 4], [5, 4, 0], [5, 4, 1], [5, 4, 1, 0], [5, 4, 2], [5, 4, 2, 0], [5, 4, 2, 1], [5, 4, 2, 1, 0], [5, 4, 3], [5, 4, 3, 0], [5, 4, 3, 1], [5, 4, 3, 1, 0], [5, 4, 3, 2], [5, 4, 3, 2, 0], [5, 4, 3, 2, 1], [5, 4, 3, 2, 1, 0], [6], [6, 0], [6, 1], [6, 1, 0], [6, 2], [6, 2, 0], [6, 2, 1], [6, 2, 1, 0], [6, 3], [6, 3, 0], [6, 3, 1], [6, 3, 1, 0], [6, 3, 2], [6, 3, 2, 0], [6, 3, 2, 1], [6, 3, 2, 1, 0], [6, 4], [6, 4, 0], [6, 4, 1], [6, 4, 1, 0], [6, 4, 2], [6, 4, 2, 0], [6, 4, 2, 1], [6, 4, 2, 1, 0], [6, 4, 3], [6, 4, 3, 0], [6, 4, 3, 1], [6, 4, 3, 1, 0], [6, 4, 3, 2], [6, 4, 3, 2, 0], [6, 4, 3, 2, 1], [6, 4, 3, 2, 1, 0], [6, 5], [6, 5, 0], [6, 5, 1], [6, 5, 1, 0], [6, 5, 2], [6, 5, 2, 0], [6, 5, 2, 1], [6, 5, 2, 1, 0], [6, 5, 3], [6, 5, 3, 0], [6, 5, 3, 1], [6, 5, 3, 1, 0], [6, 5, 3, 2], [6, 5, 3, 2, 0], [6, 5, 3, 2, 1], [6, 5, 3, 2, 1, 0], [6, 5, 4], [6, 5, 4, 0], [6, 5, 4, 1], [6, 5, 4, 1, 0], [6, 5, 4, 2], [6, 5, 4, 2, 0], [6, 5, 4, 2, 1], [6, 5, 4, 2, 1, 0], [6, 5, 4, 3], [6, 5, 4, 3, 0], [6, 5, 4, 3, 1], [6, 5, 4, 3, 1, 0], [6, 5, 4, 3, 2], [6, 5, 4, 3, 2, 0], [6, 5, 4, 3, 2, 1], [6, 5, 4, 3, 2, 1, 0], [7], [7, 0], [7, 1], [7, 1, 0], [7, 2], [7, 2, 0], [7, 2, 1], [7, 2, 1, 0], [7, 3], [7, 3, 0], [7, 3, 1], [7, 3, 1, 0], [7, 3, 2], [7, 3, 2, 0], [7, 3, 2, 1], [7, 3, 2, 1, 0], [7, 4], [7, 4, 0], [7, 4, 1], [7, 4, 1, 0], [7, 4, 2], [7, 4, 2, 0], [7, 4, 2, 1], [7, 4, 2, 1, 0], [7, 4, 3], [7, 4, 3, 0], [7, 4, 3, 1], [7, 4, 3, 1, 0], [7, 4, 3, 2], [7, 4, 3, 2, 0], [7, 4, 3, 2, 1], [7, 4, 3, 2, 1, 0], [7, 5], [7, 5, 0], [7, 5, 1], [7, 5, 1, 0], [7, 5, 2], [7, 5, 2, 0], [7, 5, 2, 1], [7, 5, 2, 1, 0], [7, 5, 3], [7, 5, 3, 0], [7, 5, 3, 1], [7, 5, 3, 1, 0], [7, 5, 3, 2], [7, 5, 3, 2, 0], [7, 5, 3, 2, 1], [7, 5, 3, 2, 1, 0], [7, 5, 4], [7, 5, 4, 0], [7, 5, 4, 1], [7, 5, 4, 1, 0], [7, 5, 4, 2], [7, 5, 4, 2, 0], [7, 5, 4, 2, 1], [7, 5, 4, 2, 1, 0], [7, 5, 4, 3], [7, 5, 4, 3, 0], [7, 5, 4, 3, 1], [7, 5, 4, 3, 1, 0], [7, 5, 4, 3, 2], [7, 5, 4, 3, 2, 0], [7, 5, 4, 3, 2, 1], [7, 5, 4, 3, 2, 1, 0], [7, 6], [7, 6, 0], [7, 6, 1], [7, 6, 1, 0], [7, 6, 2], [7, 6, 2, 0], [7, 6, 2, 1], [7, 6, 2, 1, 0], [7, 6, 3], [7, 6, 3, 0], [7, 6, 3, 1], [7, 6, 3, 1, 0], [7, 6, 3, 2], [7, 6, 3, 2, 0], [7, 6, 3, 2, 1], [7, 6, 3, 2, 1, 0], [7, 6, 4], [7, 6, 4, 0], [7, 6, 4, 1], [7, 6, 4, 1, 0], [7, 6, 4, 2], [7, 6, 4, 2, 0], [7, 6, 4, 2, 1], [7, 6, 4, 2, 1, 0], [7, 6, 4, 3], [7, 6, 4, 3, 0], [7, 6, 4, 3, 1], [7, 6, 4, 3, 1, 0], [7, 6, 4, 3, 2], [7, 6, 4, 3, 2, 0], [7, 6, 4, 3, 2, 1], [7, 6, 4, 3, 2, 1, 0], [7, 6, 5], [7, 6, 5, 0], [7, 6, 5, 1], [7, 6, 5, 1, 0], [7, 6, 5, 2], [7, 6, 5, 2, 0], [7, 6, 5, 2, 1], [7, 6, 5, 2, 1, 0], [7, 6, 5, 3], [7, 6, 5, 3, 0], [7, 6, 5, 3, 1], [7, 6, 5, 3, 1, 0], [7, 6, 5, 3, 2], [7, 6, 5, 3, 2, 0], [7, 6, 5, 3, 2, 1], [7, 6, 5, 3, 2, 1, 0], [7, 6, 5, 4], [7, 6, 5, 4, 0], [7, 6, 5, 4, 1], [7, 6, 5, 4, 1, 0], [7, 6, 5, 4, 2], [7, 6, 5, 4, 2, 0], [7, 6, 5, 4, 2, 1], [7, 6, 5, 4, 2, 1, 0], [7, 6, 5, 4, 3], [7, 6, 5, 4, 3, 0], [7, 6, 5, 4, 3, 1], [7, 6, 5, 4, 3, 1, 0], [7, 6, 5, 4, 3, 2], [7, 6, 5, 4, 3, 2, 0], [7, 6, 5, 4, 3, 2, 1], [7, 6, 5, 4, 3, 2, 1, 0], [8], [8, 0], [8, 1], [8, 1, 0], [8, 2], [8, 2, 0], [8, 2, 1], [8, 2, 1, 0], [8, 3], [8, 3, 0], [8, 3, 1], [8, 3, 1, 0], [8, 3, 2], [8, 3, 2, 0], [8, 3, 2, 1], [8, 3, 2, 1, 0], [8, 4], [8, 4, 0], [8, 4, 1], [8, 4, 1, 0], [8, 4, 2], [8, 4, 2, 0], [8, 4, 2, 1], [8, 4, 2, 1, 0], [8, 4, 3], [8, 4, 3, 0], [8, 4, 3, 1], [8, 4, 3, 1, 0], [8, 4, 3, 2], [8, 4, 3, 2, 0], [8, 4, 3, 2, 1], [8, 4, 3, 2, 1, 0], [8, 5], [8, 5, 0], [8, 5, 1], [8, 5, 1, 0], [8, 5, 2], [8, 5, 2, 0], [8, 5, 2, 1], [8, 5, 2, 1, 0], [8, 5, 3], [8, 5, 3, 0], [8, 5, 3, 1], [8, 5, 3, 1, 0], [8, 5, 3, 2], [8, 5, 3, 2, 0], [8, 5, 3, 2, 1], [8, 5, 3, 2, 1, 0], [8, 5, 4], [8, 5, 4, 0], [8, 5, 4, 1], [8, 5, 4, 1, 0], [8, 5, 4, 2], [8, 5, 4, 2, 0], [8, 5, 4, 2, 1], [8, 5, 4, 2, 1, 0], [8, 5, 4, 3], [8, 5, 4, 3, 0], [8, 5, 4, 3, 1], [8, 5, 4, 3, 1, 0], [8, 5, 4, 3, 2], [8, 5, 4, 3, 2, 0], [8, 5, 4, 3, 2, 1], [8, 5, 4, 3, 2, 1, 0], [8, 6], [8, 6, 0], [8, 6, 1], [8, 6, 1, 0], [8, 6, 2], [8, 6, 2, 0], [8, 6, 2, 1], [8, 6, 2, 1, 0], [8, 6, 3], [8, 6, 3, 0], [8, 6, 3, 1], [8, 6, 3, 1, 0], [8, 6, 3, 2], [8, 6, 3, 2, 0], [8, 6, 3, 2, 1], [8, 6, 3, 2, 1, 0], [8, 6, 4], [8, 6, 4, 0], [8, 6, 4, 1], [8, 6, 4, 1, 0], [8, 6, 4, 2], [8, 6, 4, 2, 0], [8, 6, 4, 2, 1], [8, 6, 4, 2, 1, 0], [8, 6, 4, 3], [8, 6, 4, 3, 0], [8, 6, 4, 3, 1], [8, 6, 4, 3, 1, 0], [8, 6, 4, 3, 2], [8, 6, 4, 3, 2, 0], [8, 6, 4, 3, 2, 1], [8, 6, 4, 3, 2, 1, 0], [8, 6, 5], [8, 6, 5, 0], [8, 6, 5, 1], [8, 6, 5, 1, 0], [8, 6, 5, 2], [8, 6, 5, 2, 0], [8, 6, 5, 2, 1], [8, 6, 5, 2, 1, 0], [8, 6, 5, 3], [8, 6, 5, 3, 0], [8, 6, 5, 3, 1], [8, 6, 5, 3, 1, 0], [8, 6, 5, 3, 2], [8, 6, 5, 3, 2, 0], [8, 6, 5, 3, 2, 1], [8, 6, 5, 3, 2, 1, 0], [8, 6, 5, 4], [8, 6, 5, 4, 0], [8, 6, 5, 4, 1], [8, 6, 5, 4, 1, 0], [8, 6, 5, 4, 2], [8, 6, 5, 4, 2, 0], [8, 6, 5, 4, 2, 1], [8, 6, 5, 4, 2, 1, 0], [8, 6, 5, 4, 3], [8, 6, 5, 4, 3, 0], [8, 6, 5, 4, 3, 1], [8, 6, 5, 4, 3, 1, 0], [8, 6, 5, 4, 3, 2], [8, 6, 5, 4, 3, 2, 0], [8, 6, 5, 4, 3, 2, 1], [8, 6, 5, 4, 3, 2, 1, 0], [8, 7], [8, 7, 0], [8, 7, 1], [8, 7, 1, 0], [8, 7, 2], [8, 7, 2, 0], [8, 7, 2, 1], [8, 7, 2, 1, 0], [8, 7, 3], [8, 7, 3, 0], [8, 7, 3, 1], [8, 7, 3, 1, 0], [8, 7, 3, 2], [8, 7, 3, 2, 0], [8, 7, 3, 2, 1], [8, 7, 3, 2, 1, 0], [8, 7, 4], [8, 7, 4, 0], [8, 7, 4, 1], [8, 7, 4, 1, 0], [8, 7, 4, 2], [8, 7, 4, 2, 0], [8, 7, 4, 2, 1], [8, 7, 4, 2, 1, 0], [8, 7, 4, 3], [8, 7, 4, 3, 0], [8, 7, 4, 3, 1], [8, 7, 4, 3, 1, 0], [8, 7, 4, 3, 2], [8, 7, 4, 3, 2, 0], [8, 7, 4, 3, 2, 1], [8, 7, 4, 3, 2, 1, 0], [8, 7, 5], [8, 7, 5, 0], [8, 7, 5, 1], [8, 7, 5, 1, 0], [8, 7, 5, 2], [8, 7, 5, 2, 0], [8, 7, 5, 2, 1], [8, 7, 5, 2, 1, 0], [8, 7, 5, 3], [8, 7, 5, 3, 0], [8, 7, 5, 3, 1], [8, 7, 5, 3, 1, 0], [8, 7, 5, 3, 2], [8, 7, 5, 3, 2, 0], [8, 7, 5, 3, 2, 1], [8, 7, 5, 3, 2, 1, 0], [8, 7, 5, 4], [8, 7, 5, 4, 0], [8, 7, 5, 4, 1], [8, 7, 5, 4, 1, 0], [8, 7, 5, 4, 2], [8, 7, 5, 4, 2, 0], [8, 7, 5, 4, 2, 1], [8, 7, 5, 4, 2, 1, 0], [8, 7, 5, 4, 3], [8, 7, 5, 4, 3, 0], [8, 7, 5, 4, 3, 1], [8, 7, 5, 4, 3, 1, 0], [8, 7, 5, 4, 3, 2], [8, 7, 5, 4, 3, 2, 0], [8, 7, 5, 4, 3, 2, 1], [8, 7, 5, 4, 3, 2, 1, 0], [8, 7, 6], [8, 7, 6, 0], [8, 7, 6, 1], [8, 7, 6, 1, 0], [8, 7, 6, 2], [8, 7, 6, 2, 0], [8, 7, 6, 2, 1], [8, 7, 6, 2, 1, 0], [8, 7, 6, 3], [8, 7, 6, 3, 0], [8, 7, 6, 3, 1], [8, 7, 6, 3, 1, 0], [8, 7, 6, 3, 2], [8, 7, 6, 3, 2, 0], [8, 7, 6, 3, 2, 1], [8, 7, 6, 3, 2, 1, 0], [8, 7, 6, 4], [8, 7, 6, 4, 0], [8, 7, 6, 4, 1], [8, 7, 6, 4, 1, 0], [8, 7, 6, 4, 2], [8, 7, 6, 4, 2, 0], [8, 7, 6, 4, 2, 1], [8, 7, 6, 4, 2, 1, 0], [8, 7, 6, 4, 3], [8, 7, 6, 4, 3, 0], [8, 7, 6, 4, 3, 1], [8, 7, 6, 4, 3, 1, 0], [8, 7, 6, 4, 3, 2], [8, 7, 6, 4, 3, 2, 0], [8, 7, 6, 4, 3, 2, 1], [8, 7, 6, 4, 3, 2, 1, 0], [8, 7, 6, 5], [8, 7, 6, 5, 0], [8, 7, 6, 5, 1], [8, 7, 6, 5, 1, 0], [8, 7, 6, 5, 2], [8, 7, 6, 5, 2, 0], [8, 7, 6, 5, 2, 1], [8, 7, 6, 5, 2, 1, 0], [8, 7, 6, 5, 3], [8, 7, 6, 5, 3, 0], [8, 7, 6, 5, 3, 1], [8, 7, 6, 5, 3, 1, 0], [8, 7, 6, 5, 3, 2], [8, 7, 6, 5, 3, 2, 0], [8, 7, 6, 5, 3, 2, 1], [8, 7, 6, 5, 3, 2, 1, 0], [8, 7, 6, 5, 4], [8, 7, 6, 5, 4, 0], [8, 7, 6, 5, 4, 1], [8, 7, 6, 5, 4, 1, 0], [8, 7, 6, 5, 4, 2], [8, 7, 6, 5, 4, 2, 0], [8, 7, 6, 5, 4, 2, 1], [8, 7, 6, 5, 4, 2, 1, 0], [8, 7, 6, 5, 4, 3], [8, 7, 6, 5, 4, 3, 0], [8, 7, 6, 5, 4, 3, 1], [8, 7, 6, 5, 4, 3, 1, 0], [8, 7, 6, 5, 4, 3, 2], [8, 7, 6, 5, 4, 3, 2, 0], [8, 7, 6, 5, 4, 3, 2, 1], [8, 7, 6, 5, 4, 3, 2, 1, 0], [9], [9, 0], [9, 1], [9, 1, 0], [9, 2], [9, 2, 0], [9, 2, 1], [9, 2, 1, 0], [9, 3], [9, 3, 0], [9, 3, 1], [9, 3, 1, 0], [9, 3, 2], [9, 3, 2, 0], [9, 3, 2, 1], [9, 3, 2, 1, 0], [9, 4], [9, 4, 0], [9, 4, 1], [9, 4, 1, 0], [9, 4, 2], [9, 4, 2, 0], [9, 4, 2, 1], [9, 4, 2, 1, 0], [9, 4, 3], [9, 4, 3, 0], [9, 4, 3, 1], [9, 4, 3, 1, 0], [9, 4, 3, 2], [9, 4, 3, 2, 0], [9, 4, 3, 2, 1], [9, 4, 3, 2, 1, 0], [9, 5], [9, 5, 0], [9, 5, 1], [9, 5, 1, 0], [9, 5, 2], [9, 5, 2, 0], [9, 5, 2, 1], [9, 5, 2, 1, 0], [9, 5, 3], [9, 5, 3, 0], [9, 5, 3, 1], [9, 5, 3, 1, 0], [9, 5, 3, 2], [9, 5, 3, 2, 0], [9, 5, 3, 2, 1], [9, 5, 3, 2, 1, 0], [9, 5, 4], [9, 5, 4, 0], [9, 5, 4, 1], [9, 5, 4, 1, 0], [9, 5, 4, 2], [9, 5, 4, 2, 0], [9, 5, 4, 2, 1], [9, 5, 4, 2, 1, 0], [9, 5, 4, 3], [9, 5, 4, 3, 0], [9, 5, 4, 3, 1], [9, 5, 4, 3, 1, 0], [9, 5, 4, 3, 2], [9, 5, 4, 3, 2, 0], [9, 5, 4, 3, 2, 1], [9, 5, 4, 3, 2, 1, 0], [9, 6], [9, 6, 0], [9, 6, 1], [9, 6, 1, 0], [9, 6, 2], [9, 6, 2, 0], [9, 6, 2, 1], [9, 6, 2, 1, 0], [9, 6, 3], [9, 6, 3, 0], [9, 6, 3, 1], [9, 6, 3, 1, 0], [9, 6, 3, 2], [9, 6, 3, 2, 0], [9, 6, 3, 2, 1], [9, 6, 3, 2, 1, 0], [9, 6, 4], [9, 6, 4, 0], [9, 6, 4, 1], [9, 6, 4, 1, 0], [9, 6, 4, 2], [9, 6, 4, 2, 0], [9, 6, 4, 2, 1], [9, 6, 4, 2, 1, 0], [9, 6, 4, 3], [9, 6, 4, 3, 0], [9, 6, 4, 3, 1], [9, 6, 4, 3, 1, 0], [9, 6, 4, 3, 2], [9, 6, 4, 3, 2, 0], [9, 6, 4, 3, 2, 1], [9, 6, 4, 3, 2, 1, 0], [9, 6, 5], [9, 6, 5, 0], [9, 6, 5, 1], [9, 6, 5, 1, 0], [9, 6, 5, 2], [9, 6, 5, 2, 0], [9, 6, 5, 2, 1], [9, 6, 5, 2, 1, 0], [9, 6, 5, 3], [9, 6, 5, 3, 0], [9, 6, 5, 3, 1], [9, 6, 5, 3, 1, 0], [9, 6, 5, 3, 2], [9, 6, 5, 3, 2, 0], [9, 6, 5, 3, 2, 1], [9, 6, 5, 3, 2, 1, 0], [9, 6, 5, 4], [9, 6, 5, 4, 0], [9, 6, 5, 4, 1], [9, 6, 5, 4, 1, 0], [9, 6, 5, 4, 2], [9, 6, 5, 4, 2, 0], [9, 6, 5, 4, 2, 1], [9, 6, 5, 4, 2, 1, 0], [9, 6, 5, 4, 3], [9, 6, 5, 4, 3, 0], [9, 6, 5, 4, 3, 1], [9, 6, 5, 4, 3, 1, 0], [9, 6, 5, 4, 3, 2], [9, 6, 5, 4, 3, 2, 0], [9, 6, 5, 4, 3, 2, 1], [9, 6, 5, 4, 3, 2, 1, 0], [9, 7], [9, 7, 0], [9, 7, 1], [9, 7, 1, 0], [9, 7, 2], [9, 7, 2, 0], [9, 7, 2, 1], [9, 7, 2, 1, 0], [9, 7, 3], [9, 7, 3, 0], [9, 7, 3, 1], [9, 7, 3, 1, 0], [9, 7, 3, 2], [9, 7, 3, 2, 0], [9, 7, 3, 2, 1], [9, 7, 3, 2, 1, 0], [9, 7, 4], [9, 7, 4, 0], [9, 7, 4, 1], [9, 7, 4, 1, 0], [9, 7, 4, 2], [9, 7, 4, 2, 0], [9, 7, 4, 2, 1], [9, 7, 4, 2, 1, 0], [9, 7, 4, 3], [9, 7, 4, 3, 0], [9, 7, 4, 3, 1], [9, 7, 4, 3, 1, 0], [9, 7, 4, 3, 2], [9, 7, 4, 3, 2, 0], [9, 7, 4, 3, 2, 1], [9, 7, 4, 3, 2, 1, 0], [9, 7, 5], [9, 7, 5, 0], [9, 7, 5, 1], [9, 7, 5, 1, 0], [9, 7, 5, 2], [9, 7, 5, 2, 0], [9, 7, 5, 2, 1], [9, 7, 5, 2, 1, 0], [9, 7, 5, 3], [9, 7, 5, 3, 0], [9, 7, 5, 3, 1], [9, 7, 5, 3, 1, 0], [9, 7, 5, 3, 2], [9, 7, 5, 3, 2, 0], [9, 7, 5, 3, 2, 1], [9, 7, 5, 3, 2, 1, 0], [9, 7, 5, 4], [9, 7, 5, 4, 0], [9, 7, 5, 4, 1], [9, 7, 5, 4, 1, 0], [9, 7, 5, 4, 2], [9, 7, 5, 4, 2, 0], [9, 7, 5, 4, 2, 1], [9, 7, 5, 4, 2, 1, 0], [9, 7, 5, 4, 3], [9, 7, 5, 4, 3, 0], [9, 7, 5, 4, 3, 1], [9, 7, 5, 4, 3, 1, 0], [9, 7, 5, 4, 3, 2], [9, 7, 5, 4, 3, 2, 0], [9, 7, 5, 4, 3, 2, 1], [9, 7, 5, 4, 3, 2, 1, 0], [9, 7, 6], [9, 7, 6, 0], [9, 7, 6, 1], [9, 7, 6, 1, 0], [9, 7, 6, 2], [9, 7, 6, 2, 0], [9, 7, 6, 2, 1], [9, 7, 6, 2, 1, 0], [9, 7, 6, 3], [9, 7, 6, 3, 0], [9, 7, 6, 3, 1], [9, 7, 6, 3, 1, 0], [9, 7, 6, 3, 2], [9, 7, 6, 3, 2, 0], [9, 7, 6, 3, 2, 1], [9, 7, 6, 3, 2, 1, 0], [9, 7, 6, 4], [9, 7, 6, 4, 0], [9, 7, 6, 4, 1], [9, 7, 6, 4, 1, 0], [9, 7, 6, 4, 2], [9, 7, 6, 4, 2, 0], [9, 7, 6, 4, 2, 1], [9, 7, 6, 4, 2, 1, 0], [9, 7, 6, 4, 3], [9, 7, 6, 4, 3, 0], [9, 7, 6, 4, 3, 1], [9, 7, 6, 4, 3, 1, 0], [9, 7, 6, 4, 3, 2], [9, 7, 6, 4, 3, 2, 0], [9, 7, 6, 4, 3, 2, 1], [9, 7, 6, 4, 3, 2, 1, 0], [9, 7, 6, 5], [9, 7, 6, 5, 0], [9, 7, 6, 5, 1], [9, 7, 6, 5, 1, 0], [9, 7, 6, 5, 2], [9, 7, 6, 5, 2, 0], [9, 7, 6, 5, 2, 1], [9, 7, 6, 5, 2, 1, 0], [9, 7, 6, 5, 3], [9, 7, 6, 5, 3, 0], [9, 7, 6, 5, 3, 1], [9, 7, 6, 5, 3, 1, 0], [9, 7, 6, 5, 3, 2], [9, 7, 6, 5, 3, 2, 0], [9, 7, 6, 5, 3, 2, 1], [9, 7, 6, 5, 3, 2, 1, 0], [9, 7, 6, 5, 4], [9, 7, 6, 5, 4, 0], [9, 7, 6, 5, 4, 1], [9, 7, 6, 5, 4, 1, 0], [9, 7, 6, 5, 4, 2], [9, 7, 6, 5, 4, 2, 0], [9, 7, 6, 5, 4, 2, 1], [9, 7, 6, 5, 4, 2, 1, 0], [9, 7, 6, 5, 4, 3], [9, 7, 6, 5, 4, 3, 0], [9, 7, 6, 5, 4, 3, 1], [9, 7, 6, 5, 4, 3, 1, 0], [9, 7, 6, 5, 4, 3, 2], [9, 7, 6, 5, 4, 3, 2, 0], [9, 7, 6, 5, 4, 3, 2, 1], [9, 7, 6, 5, 4, 3, 2, 1, 0], [9, 8], [9, 8, 0], [9, 8, 1], [9, 8, 1, 0], [9, 8, 2], [9, 8, 2, 0], [9, 8, 2, 1], [9, 8, 2, 1, 0], [9, 8, 3], [9, 8, 3, 0], [9, 8, 3, 1], [9, 8, 3, 1, 0], [9, 8, 3, 2], [9, 8, 3, 2, 0], [9, 8, 3, 2, 1], [9, 8, 3, 2, 1, 0], [9, 8, 4], [9, 8, 4, 0], [9, 8, 4, 1], [9, 8, 4, 1, 0], [9, 8, 4, 2], [9, 8, 4, 2, 0], [9, 8, 4, 2, 1], [9, 8, 4, 2, 1, 0], [9, 8, 4, 3], [9, 8, 4, 3, 0], [9, 8, 4, 3, 1], [9, 8, 4, 3, 1, 0], [9, 8, 4, 3, 2], [9, 8, 4, 3, 2, 0], [9, 8, 4, 3, 2, 1], [9, 8, 4, 3, 2, 1, 0], [9, 8, 5], [9, 8, 5, 0], [9, 8, 5, 1], [9, 8, 5, 1, 0], [9, 8, 5, 2], [9, 8, 5, 2, 0], [9, 8, 5, 2, 1], [9, 8, 5, 2, 1, 0], [9, 8, 5, 3], [9, 8, 5, 3, 0], [9, 8, 5, 3, 1], [9, 8, 5, 3, 1, 0], [9, 8, 5, 3, 2], [9, 8, 5, 3, 2, 0], [9, 8, 5, 3, 2, 1], [9, 8, 5, 3, 2, 1, 0], [9, 8, 5, 4], [9, 8, 5, 4, 0], [9, 8, 5, 4, 1], [9, 8, 5, 4, 1, 0], [9, 8, 5, 4, 2], [9, 8, 5, 4, 2, 0], [9, 8, 5, 4, 2, 1], [9, 8, 5, 4, 2, 1, 0], [9, 8, 5, 4, 3], [9, 8, 5, 4, 3, 0], [9, 8, 5, 4, 3, 1], [9, 8, 5, 4, 3, 1, 0], [9, 8, 5, 4, 3, 2], [9, 8, 5, 4, 3, 2, 0], [9, 8, 5, 4, 3, 2, 1], [9, 8, 5, 4, 3, 2, 1, 0], [9, 8, 6], [9, 8, 6, 0], [9, 8, 6, 1], [9, 8, 6, 1, 0], [9, 8, 6, 2], [9, 8, 6, 2, 0], [9, 8, 6, 2, 1], [9, 8, 6, 2, 1, 0], [9, 8, 6, 3], [9, 8, 6, 3, 0], [9, 8, 6, 3, 1], [9, 8, 6, 3, 1, 0], [9, 8, 6, 3, 2], [9, 8, 6, 3, 2, 0], [9, 8, 6, 3, 2, 1], [9, 8, 6, 3, 2, 1, 0], [9, 8, 6, 4], [9, 8, 6, 4, 0], [9, 8, 6, 4, 1], [9, 8, 6, 4, 1, 0], [9, 8, 6, 4, 2], [9, 8, 6, 4, 2, 0], [9, 8, 6, 4, 2, 1], [9, 8, 6, 4, 2, 1, 0], [9, 8, 6, 4, 3], [9, 8, 6, 4, 3, 0], [9, 8, 6, 4, 3, 1], [9, 8, 6, 4, 3, 1, 0], [9, 8, 6, 4, 3, 2], [9, 8, 6, 4, 3, 2, 0], [9, 8, 6, 4, 3, 2, 1], [9, 8, 6, 4, 3, 2, 1, 0], [9, 8, 6, 5], [9, 8, 6, 5, 0], [9, 8, 6, 5, 1], [9, 8, 6, 5, 1, 0], [9, 8, 6, 5, 2], [9, 8, 6, 5, 2, 0], [9, 8, 6, 5, 2, 1], [9, 8, 6, 5, 2, 1, 0], [9, 8, 6, 5, 3], [9, 8, 6, 5, 3, 0], [9, 8, 6, 5, 3, 1], [9, 8, 6, 5, 3, 1, 0], [9, 8, 6, 5, 3, 2], [9, 8, 6, 5, 3, 2, 0], [9, 8, 6, 5, 3, 2, 1], [9, 8, 6, 5, 3, 2, 1, 0], [9, 8, 6, 5, 4], [9, 8, 6, 5, 4, 0], [9, 8, 6, 5, 4, 1], [9, 8, 6, 5, 4, 1, 0], [9, 8, 6, 5, 4, 2], [9, 8, 6, 5, 4, 2, 0], [9, 8, 6, 5, 4, 2, 1], [9, 8, 6, 5, 4, 2, 1, 0], [9, 8, 6, 5, 4, 3], [9, 8, 6, 5, 4, 3, 0], [9, 8, 6, 5, 4, 3, 1], [9, 8, 6, 5, 4, 3, 1, 0], [9, 8, 6, 5, 4, 3, 2], [9, 8, 6, 5, 4, 3, 2, 0], [9, 8, 6, 5, 4, 3, 2, 1], [9, 8, 6, 5, 4, 3, 2, 1, 0], [9, 8, 7], [9, 8, 7, 0], [9, 8, 7, 1], [9, 8, 7, 1, 0], [9, 8, 7, 2], [9, 8, 7, 2, 0], [9, 8, 7, 2, 1], [9, 8, 7, 2, 1, 0], [9, 8, 7, 3], [9, 8, 7, 3, 0], [9, 8, 7, 3, 1], [9, 8, 7, 3, 1, 0], [9, 8, 7, 3, 2], [9, 8, 7, 3, 2, 0], [9, 8, 7, 3, 2, 1], [9, 8, 7, 3, 2, 1, 0], [9, 8, 7, 4], [9, 8, 7, 4, 0], [9, 8, 7, 4, 1], [9, 8, 7, 4, 1, 0], [9, 8, 7, 4, 2], [9, 8, 7, 4, 2, 0], [9, 8, 7, 4, 2, 1], [9, 8, 7, 4, 2, 1, 0], [9, 8, 7, 4, 3], [9, 8, 7, 4, 3, 0], [9, 8, 7, 4, 3, 1], [9, 8, 7, 4, 3, 1, 0], [9, 8, 7, 4, 3, 2], [9, 8, 7, 4, 3, 2, 0], [9, 8, 7, 4, 3, 2, 1], [9, 8, 7, 4, 3, 2, 1, 0], [9, 8, 7, 5], [9, 8, 7, 5, 0], [9, 8, 7, 5, 1], [9, 8, 7, 5, 1, 0], [9, 8, 7, 5, 2], [9, 8, 7, 5, 2, 0], [9, 8, 7, 5, 2, 1], [9, 8, 7, 5, 2, 1, 0], [9, 8, 7, 5, 3], [9, 8, 7, 5, 3, 0], [9, 8, 7, 5, 3, 1], [9, 8, 7, 5, 3, 1, 0], [9, 8, 7, 5, 3, 2], [9, 8, 7, 5, 3, 2, 0], [9, 8, 7, 5, 3, 2, 1], [9, 8, 7, 5, 3, 2, 1, 0], [9, 8, 7, 5, 4], [9, 8, 7, 5, 4, 0], [9, 8, 7, 5, 4, 1], [9, 8, 7, 5, 4, 1, 0], [9, 8, 7, 5, 4, 2], [9, 8, 7, 5, 4, 2, 0], [9, 8, 7, 5, 4, 2, 1], [9, 8, 7, 5, 4, 2, 1, 0], [9, 8, 7, 5, 4, 3], [9, 8, 7, 5, 4, 3, 0], [9, 8, 7, 5, 4, 3, 1], [9, 8, 7, 5, 4, 3, 1, 0], [9, 8, 7, 5, 4, 3, 2], [9, 8, 7, 5, 4, 3, 2, 0], [9, 8, 7, 5, 4, 3, 2, 1], [9, 8, 7, 5, 4, 3, 2, 1, 0], [9, 8, 7, 6], [9, 8, 7, 6, 0], [9, 8, 7, 6, 1], [9, 8, 7, 6, 1, 0], [9, 8, 7, 6, 2], [9, 8, 7, 6, 2, 0], [9, 8, 7, 6, 2, 1], [9, 8, 7, 6, 2, 1, 0], [9, 8, 7, 6, 3], [9, 8, 7, 6, 3, 0], [9, 8, 7, 6, 3, 1], [9, 8, 7, 6, 3, 1, 0], [9, 8, 7, 6, 3, 2], [9, 8, 7, 6, 3, 2, 0], [9, 8, 7, 6, 3, 2, 1], [9, 8, 7, 6, 3, 2, 1, 0], [9, 8, 7, 6, 4], [9, 8, 7, 6, 4, 0], [9, 8, 7, 6, 4, 1], [9, 8, 7, 6, 4, 1, 0], [9, 8, 7, 6, 4, 2], [9, 8, 7, 6, 4, 2, 0], [9, 8, 7, 6, 4, 2, 1], [9, 8, 7, 6, 4, 2, 1, 0], [9, 8, 7, 6, 4, 3], [9, 8, 7, 6, 4, 3, 0], [9, 8, 7, 6, 4, 3, 1], [9, 8, 7, 6, 4, 3, 1, 0], [9, 8, 7, 6, 4, 3, 2], [9, 8, 7, 6, 4, 3, 2, 0], [9, 8, 7, 6, 4, 3, 2, 1], [9, 8, 7, 6, 4, 3, 2, 1, 0], [9, 8, 7, 6, 5], [9, 8, 7, 6, 5, 0], [9, 8, 7, 6, 5, 1], [9, 8, 7, 6, 5, 1, 0], [9, 8, 7, 6, 5, 2], [9, 8, 7, 6, 5, 2, 0], [9, 8, 7, 6, 5, 2, 1], [9, 8, 7, 6, 5, 2, 1, 0], [9, 8, 7, 6, 5, 3], [9, 8, 7, 6, 5, 3, 0], [9, 8, 7, 6, 5, 3, 1], [9, 8, 7, 6, 5, 3, 1, 0], [9, 8, 7, 6, 5, 3, 2], [9, 8, 7, 6, 5, 3, 2, 0], [9, 8, 7, 6, 5, 3, 2, 1], [9, 8, 7, 6, 5, 3, 2, 1, 0], [9, 8, 7, 6, 5, 4], [9, 8, 7, 6, 5, 4, 0], [9, 8, 7, 6, 5, 4, 1], [9, 8, 7, 6, 5, 4, 1, 0], [9, 8, 7, 6, 5, 4, 2], [9, 8, 7, 6, 5, 4, 2, 0], [9, 8, 7, 6, 5, 4, 2, 1], [9, 8, 7, 6, 5, 4, 2, 1, 0], [9, 8, 7, 6, 5, 4, 3], [9, 8, 7, 6, 5, 4, 3, 0], [9, 8, 7, 6, 5, 4, 3, 1], [9, 8, 7, 6, 5, 4, 3, 1, 0], [9, 8, 7, 6, 5, 4, 3, 2], [9, 8, 7, 6, 5, 4, 3, 2, 0], [9, 8, 7, 6, 5, 4, 3, 2, 1], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]]"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 7, 4, 1]",
        "output": "[[], [1], [4], [4, 1], [7], [7, 1], [7, 4], [7, 4, 1], [2], [2, 1], [2, 4], [2, 4, 1], [2, 7], [2, 7, 1], [2, 7, 4], [2, 7, 4, 1], [6], [6, 1], [6, 4], [6, 4, 1], [6, 7], [6, 7, 1], [6, 7, 4], [6, 7, 4, 1], [6, 2], [6, 2, 1], [6, 2, 4], [6, 2, 4, 1], [6, 2, 7], [6, 2, 7, 1], [6, 2, 7, 4], [6, 2, 7, 4, 1], [8], [8, 1], [8, 4], [8, 4, 1], [8, 7], [8, 7, 1], [8, 7, 4], [8, 7, 4, 1], [8, 2], [8, 2, 1], [8, 2, 4], [8, 2, 4, 1], [8, 2, 7], [8, 2, 7, 1], [8, 2, 7, 4], [8, 2, 7, 4, 1], [8, 6], [8, 6, 1], [8, 6, 4], [8, 6, 4, 1], [8, 6, 7], [8, 6, 7, 1], [8, 6, 7, 4], [8, 6, 7, 4, 1], [8, 6, 2], [8, 6, 2, 1], [8, 6, 2, 4], [8, 6, 2, 4, 1], [8, 6, 2, 7], [8, 6, 2, 7, 1], [8, 6, 2, 7, 4], [8, 6, 2, 7, 4, 1], [3], [3, 1], [3, 4], [3, 4, 1], [3, 7], [3, 7, 1], [3, 7, 4], [3, 7, 4, 1], [3, 2], [3, 2, 1], [3, 2, 4], [3, 2, 4, 1], [3, 2, 7], [3, 2, 7, 1], [3, 2, 7, 4], [3, 2, 7, 4, 1], [3, 6], [3, 6, 1], [3, 6, 4], [3, 6, 4, 1], [3, 6, 7], [3, 6, 7, 1], [3, 6, 7, 4], [3, 6, 7, 4, 1], [3, 6, 2], [3, 6, 2, 1], [3, 6, 2, 4], [3, 6, 2, 4, 1], [3, 6, 2, 7], [3, 6, 2, 7, 1], [3, 6, 2, 7, 4], [3, 6, 2, 7, 4, 1], [3, 8], [3, 8, 1], [3, 8, 4], [3, 8, 4, 1], [3, 8, 7], [3, 8, 7, 1], [3, 8, 7, 4], [3, 8, 7, 4, 1], [3, 8, 2], [3, 8, 2, 1], [3, 8, 2, 4], [3, 8, 2, 4, 1], [3, 8, 2, 7], [3, 8, 2, 7, 1], [3, 8, 2, 7, 4], [3, 8, 2, 7, 4, 1], [3, 8, 6], [3, 8, 6, 1], [3, 8, 6, 4], [3, 8, 6, 4, 1], [3, 8, 6, 7], [3, 8, 6, 7, 1], [3, 8, 6, 7, 4], [3, 8, 6, 7, 4, 1], [3, 8, 6, 2], [3, 8, 6, 2, 1], [3, 8, 6, 2, 4], [3, 8, 6, 2, 4, 1], [3, 8, 6, 2, 7], [3, 8, 6, 2, 7, 1], [3, 8, 6, 2, 7, 4], [3, 8, 6, 2, 7, 4, 1], [5], [5, 1], [5, 4], [5, 4, 1], [5, 7], [5, 7, 1], [5, 7, 4], [5, 7, 4, 1], [5, 2], [5, 2, 1], [5, 2, 4], [5, 2, 4, 1], [5, 2, 7], [5, 2, 7, 1], [5, 2, 7, 4], [5, 2, 7, 4, 1], [5, 6], [5, 6, 1], [5, 6, 4], [5, 6, 4, 1], [5, 6, 7], [5, 6, 7, 1], [5, 6, 7, 4], [5, 6, 7, 4, 1], [5, 6, 2], [5, 6, 2, 1], [5, 6, 2, 4], [5, 6, 2, 4, 1], [5, 6, 2, 7], [5, 6, 2, 7, 1], [5, 6, 2, 7, 4], [5, 6, 2, 7, 4, 1], [5, 8], [5, 8, 1], [5, 8, 4], [5, 8, 4, 1], [5, 8, 7], [5, 8, 7, 1], [5, 8, 7, 4], [5, 8, 7, 4, 1], [5, 8, 2], [5, 8, 2, 1], [5, 8, 2, 4], [5, 8, 2, 4, 1], [5, 8, 2, 7], [5, 8, 2, 7, 1], [5, 8, 2, 7, 4], [5, 8, 2, 7, 4, 1], [5, 8, 6], [5, 8, 6, 1], [5, 8, 6, 4], [5, 8, 6, 4, 1], [5, 8, 6, 7], [5, 8, 6, 7, 1], [5, 8, 6, 7, 4], [5, 8, 6, 7, 4, 1], [5, 8, 6, 2], [5, 8, 6, 2, 1], [5, 8, 6, 2, 4], [5, 8, 6, 2, 4, 1], [5, 8, 6, 2, 7], [5, 8, 6, 2, 7, 1], [5, 8, 6, 2, 7, 4], [5, 8, 6, 2, 7, 4, 1], [5, 3], [5, 3, 1], [5, 3, 4], [5, 3, 4, 1], [5, 3, 7], [5, 3, 7, 1], [5, 3, 7, 4], [5, 3, 7, 4, 1], [5, 3, 2], [5, 3, 2, 1], [5, 3, 2, 4], [5, 3, 2, 4, 1], [5, 3, 2, 7], [5, 3, 2, 7, 1], [5, 3, 2, 7, 4], [5, 3, 2, 7, 4, 1], [5, 3, 6], [5, 3, 6, 1], [5, 3, 6, 4], [5, 3, 6, 4, 1], [5, 3, 6, 7], [5, 3, 6, 7, 1], [5, 3, 6, 7, 4], [5, 3, 6, 7, 4, 1], [5, 3, 6, 2], [5, 3, 6, 2, 1], [5, 3, 6, 2, 4], [5, 3, 6, 2, 4, 1], [5, 3, 6, 2, 7], [5, 3, 6, 2, 7, 1], [5, 3, 6, 2, 7, 4], [5, 3, 6, 2, 7, 4, 1], [5, 3, 8], [5, 3, 8, 1], [5, 3, 8, 4], [5, 3, 8, 4, 1], [5, 3, 8, 7], [5, 3, 8, 7, 1], [5, 3, 8, 7, 4], [5, 3, 8, 7, 4, 1], [5, 3, 8, 2], [5, 3, 8, 2, 1], [5, 3, 8, 2, 4], [5, 3, 8, 2, 4, 1], [5, 3, 8, 2, 7], [5, 3, 8, 2, 7, 1], [5, 3, 8, 2, 7, 4], [5, 3, 8, 2, 7, 4, 1], [5, 3, 8, 6], [5, 3, 8, 6, 1], [5, 3, 8, 6, 4], [5, 3, 8, 6, 4, 1], [5, 3, 8, 6, 7], [5, 3, 8, 6, 7, 1], [5, 3, 8, 6, 7, 4], [5, 3, 8, 6, 7, 4, 1], [5, 3, 8, 6, 2], [5, 3, 8, 6, 2, 1], [5, 3, 8, 6, 2, 4], [5, 3, 8, 6, 2, 4, 1], [5, 3, 8, 6, 2, 7], [5, 3, 8, 6, 2, 7, 1], [5, 3, 8, 6, 2, 7, 4], [5, 3, 8, 6, 2, 7, 4, 1]]"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4]",
        "output": "[[], [-4], [4], [4, -4], [-3], [-3, -4], [-3, 4], [-3, 4, -4], [3], [3, -4], [3, 4], [3, 4, -4], [3, -3], [3, -3, -4], [3, -3, 4], [3, -3, 4, -4], [-2], [-2, -4], [-2, 4], [-2, 4, -4], [-2, -3], [-2, -3, -4], [-2, -3, 4], [-2, -3, 4, -4], [-2, 3], [-2, 3, -4], [-2, 3, 4], [-2, 3, 4, -4], [-2, 3, -3], [-2, 3, -3, -4], [-2, 3, -3, 4], [-2, 3, -3, 4, -4], [2], [2, -4], [2, 4], [2, 4, -4], [2, -3], [2, -3, -4], [2, -3, 4], [2, -3, 4, -4], [2, 3], [2, 3, -4], [2, 3, 4], [2, 3, 4, -4], [2, 3, -3], [2, 3, -3, -4], [2, 3, -3, 4], [2, 3, -3, 4, -4], [2, -2], [2, -2, -4], [2, -2, 4], [2, -2, 4, -4], [2, -2, -3], [2, -2, -3, -4], [2, -2, -3, 4], [2, -2, -3, 4, -4], [2, -2, 3], [2, -2, 3, -4], [2, -2, 3, 4], [2, -2, 3, 4, -4], [2, -2, 3, -3], [2, -2, 3, -3, -4], [2, -2, 3, -3, 4], [2, -2, 3, -3, 4, -4], [-1], [-1, -4], [-1, 4], [-1, 4, -4], [-1, -3], [-1, -3, -4], [-1, -3, 4], [-1, -3, 4, -4], [-1, 3], [-1, 3, -4], [-1, 3, 4], [-1, 3, 4, -4], [-1, 3, -3], [-1, 3, -3, -4], [-1, 3, -3, 4], [-1, 3, -3, 4, -4], [-1, -2], [-1, -2, -4], [-1, -2, 4], [-1, -2, 4, -4], [-1, -2, -3], [-1, -2, -3, -4], [-1, -2, -3, 4], [-1, -2, -3, 4, -4], [-1, -2, 3], [-1, -2, 3, -4], [-1, -2, 3, 4], [-1, -2, 3, 4, -4], [-1, -2, 3, -3], [-1, -2, 3, -3, -4], [-1, -2, 3, -3, 4], [-1, -2, 3, -3, 4, -4], [-1, 2], [-1, 2, -4], [-1, 2, 4], [-1, 2, 4, -4], [-1, 2, -3], [-1, 2, -3, -4], [-1, 2, -3, 4], [-1, 2, -3, 4, -4], [-1, 2, 3], [-1, 2, 3, -4], [-1, 2, 3, 4], [-1, 2, 3, 4, -4], [-1, 2, 3, -3], [-1, 2, 3, -3, -4], [-1, 2, 3, -3, 4], [-1, 2, 3, -3, 4, -4], [-1, 2, -2], [-1, 2, -2, -4], [-1, 2, -2, 4], [-1, 2, -2, 4, -4], [-1, 2, -2, -3], [-1, 2, -2, -3, -4], [-1, 2, -2, -3, 4], [-1, 2, -2, -3, 4, -4], [-1, 2, -2, 3], [-1, 2, -2, 3, -4], [-1, 2, -2, 3, 4], [-1, 2, -2, 3, 4, -4], [-1, 2, -2, 3, -3], [-1, 2, -2, 3, -3, -4], [-1, 2, -2, 3, -3, 4], [-1, 2, -2, 3, -3, 4, -4], [1], [1, -4], [1, 4], [1, 4, -4], [1, -3], [1, -3, -4], [1, -3, 4], [1, -3, 4, -4], [1, 3], [1, 3, -4], [1, 3, 4], [1, 3, 4, -4], [1, 3, -3], [1, 3, -3, -4], [1, 3, -3, 4], [1, 3, -3, 4, -4], [1, -2], [1, -2, -4], [1, -2, 4], [1, -2, 4, -4], [1, -2, -3], [1, -2, -3, -4], [1, -2, -3, 4], [1, -2, -3, 4, -4], [1, -2, 3], [1, -2, 3, -4], [1, -2, 3, 4], [1, -2, 3, 4, -4], [1, -2, 3, -3], [1, -2, 3, -3, -4], [1, -2, 3, -3, 4], [1, -2, 3, -3, 4, -4], [1, 2], [1, 2, -4], [1, 2, 4], [1, 2, 4, -4], [1, 2, -3], [1, 2, -3, -4], [1, 2, -3, 4], [1, 2, -3, 4, -4], [1, 2, 3], [1, 2, 3, -4], [1, 2, 3, 4], [1, 2, 3, 4, -4], [1, 2, 3, -3], [1, 2, 3, -3, -4], [1, 2, 3, -3, 4], [1, 2, 3, -3, 4, -4], [1, 2, -2], [1, 2, -2, -4], [1, 2, -2, 4], [1, 2, -2, 4, -4], [1, 2, -2, -3], [1, 2, -2, -3, -4], [1, 2, -2, -3, 4], [1, 2, -2, -3, 4, -4], [1, 2, -2, 3], [1, 2, -2, 3, -4], [1, 2, -2, 3, 4], [1, 2, -2, 3, 4, -4], [1, 2, -2, 3, -3], [1, 2, -2, 3, -3, -4], [1, 2, -2, 3, -3, 4], [1, 2, -2, 3, -3, 4, -4], [1, -1], [1, -1, -4], [1, -1, 4], [1, -1, 4, -4], [1, -1, -3], [1, -1, -3, -4], [1, -1, -3, 4], [1, -1, -3, 4, -4], [1, -1, 3], [1, -1, 3, -4], [1, -1, 3, 4], [1, -1, 3, 4, -4], [1, -1, 3, -3], [1, -1, 3, -3, -4], [1, -1, 3, -3, 4], [1, -1, 3, -3, 4, -4], [1, -1, -2], [1, -1, -2, -4], [1, -1, -2, 4], [1, -1, -2, 4, -4], [1, -1, -2, -3], [1, -1, -2, -3, -4], [1, -1, -2, -3, 4], [1, -1, -2, -3, 4, -4], [1, -1, -2, 3], [1, -1, -2, 3, -4], [1, -1, -2, 3, 4], [1, -1, -2, 3, 4, -4], [1, -1, -2, 3, -3], [1, -1, -2, 3, -3, -4], [1, -1, -2, 3, -3, 4], [1, -1, -2, 3, -3, 4, -4], [1, -1, 2], [1, -1, 2, -4], [1, -1, 2, 4], [1, -1, 2, 4, -4], [1, -1, 2, -3], [1, -1, 2, -3, -4], [1, -1, 2, -3, 4], [1, -1, 2, -3, 4, -4], [1, -1, 2, 3], [1, -1, 2, 3, -4], [1, -1, 2, 3, 4], [1, -1, 2, 3, 4, -4], [1, -1, 2, 3, -3], [1, -1, 2, 3, -3, -4], [1, -1, 2, 3, -3, 4], [1, -1, 2, 3, -3, 4, -4], [1, -1, 2, -2], [1, -1, 2, -2, -4], [1, -1, 2, -2, 4], [1, -1, 2, -2, 4, -4], [1, -1, 2, -2, -3], [1, -1, 2, -2, -3, -4], [1, -1, 2, -2, -3, 4], [1, -1, 2, -2, -3, 4, -4], [1, -1, 2, -2, 3], [1, -1, 2, -2, 3, -4], [1, -1, 2, -2, 3, 4], [1, -1, 2, -2, 3, 4, -4], [1, -1, 2, -2, 3, -3], [1, -1, 2, -2, 3, -3, -4], [1, -1, 2, -2, 3, -3, 4], [1, -1, 2, -2, 3, -3, 4, -4]]"
      },
      {
        "input": "nums = [10, -5, 0, 7, 11]",
        "output": "[[], [11], [7], [7, 11], [0], [0, 11], [0, 7], [0, 7, 11], [-5], [-5, 11], [-5, 7], [-5, 7, 11], [-5, 0], [-5, 0, 11], [-5, 0, 7], [-5, 0, 7, 11], [10], [10, 11], [10, 7], [10, 7, 11], [10, 0], [10, 0, 11], [10, 0, 7], [10, 0, 7, 11], [10, -5], [10, -5, 11], [10, -5, 7], [10, -5, 7, 11], [10, -5, 0], [10, -5, 0, 11], [10, -5, 0, 7], [10, -5, 0, 7, 11]]"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "[[], [95], [85], [85, 95], [75], [75, 95], [75, 85], [75, 85, 95], [65], [65, 95], [65, 85], [65, 85, 95], [65, 75], [65, 75, 95], [65, 75, 85], [65, 75, 85, 95], [55], [55, 95], [55, 85], [55, 85, 95], [55, 75], [55, 75, 95], [55, 75, 85], [55, 75, 85, 95], [55, 65], [55, 65, 95], [55, 65, 85], [55, 65, 85, 95], [55, 65, 75], [55, 65, 75, 95], [55, 65, 75, 85], [55, 65, 75, 85, 95], [45], [45, 95], [45, 85], [45, 85, 95], [45, 75], [45, 75, 95], [45, 75, 85], [45, 75, 85, 95], [45, 65], [45, 65, 95], [45, 65, 85], [45, 65, 85, 95], [45, 65, 75], [45, 65, 75, 95], [45, 65, 75, 85], [45, 65, 75, 85, 95], [45, 55], [45, 55, 95], [45, 55, 85], [45, 55, 85, 95], [45, 55, 75], [45, 55, 75, 95], [45, 55, 75, 85], [45, 55, 75, 85, 95], [45, 55, 65], [45, 55, 65, 95], [45, 55, 65, 85], [45, 55, 65, 85, 95], [45, 55, 65, 75], [45, 55, 65, 75, 95], [45, 55, 65, 75, 85], [45, 55, 65, 75, 85, 95], [35], [35, 95], [35, 85], [35, 85, 95], [35, 75], [35, 75, 95], [35, 75, 85], [35, 75, 85, 95], [35, 65], [35, 65, 95], [35, 65, 85], [35, 65, 85, 95], [35, 65, 75], [35, 65, 75, 95], [35, 65, 75, 85], [35, 65, 75, 85, 95], [35, 55], [35, 55, 95], [35, 55, 85], [35, 55, 85, 95], [35, 55, 75], [35, 55, 75, 95], [35, 55, 75, 85], [35, 55, 75, 85, 95], [35, 55, 65], [35, 55, 65, 95], [35, 55, 65, 85], [35, 55, 65, 85, 95], [35, 55, 65, 75], [35, 55, 65, 75, 95], [35, 55, 65, 75, 85], [35, 55, 65, 75, 85, 95], [35, 45], [35, 45, 95], [35, 45, 85], [35, 45, 85, 95], [35, 45, 75], [35, 45, 75, 95], [35, 45, 75, 85], [35, 45, 75, 85, 95], [35, 45, 65], [35, 45, 65, 95], [35, 45, 65, 85], [35, 45, 65, 85, 95], [35, 45, 65, 75], [35, 45, 65, 75, 95], [35, 45, 65, 75, 85], [35, 45, 65, 75, 85, 95], [35, 45, 55], [35, 45, 55, 95], [35, 45, 55, 85], [35, 45, 55, 85, 95], [35, 45, 55, 75], [35, 45, 55, 75, 95], [35, 45, 55, 75, 85], [35, 45, 55, 75, 85, 95], [35, 45, 55, 65], [35, 45, 55, 65, 95], [35, 45, 55, 65, 85], [35, 45, 55, 65, 85, 95], [35, 45, 55, 65, 75], [35, 45, 55, 65, 75, 95], [35, 45, 55, 65, 75, 85], [35, 45, 55, 65, 75, 85, 95], [25], [25, 95], [25, 85], [25, 85, 95], [25, 75], [25, 75, 95], [25, 75, 85], [25, 75, 85, 95], [25, 65], [25, 65, 95], [25, 65, 85], [25, 65, 85, 95], [25, 65, 75], [25, 65, 75, 95], [25, 65, 75, 85], [25, 65, 75, 85, 95], [25, 55], [25, 55, 95], [25, 55, 85], [25, 55, 85, 95], [25, 55, 75], [25, 55, 75, 95], [25, 55, 75, 85], [25, 55, 75, 85, 95], [25, 55, 65], [25, 55, 65, 95], [25, 55, 65, 85], [25, 55, 65, 85, 95], [25, 55, 65, 75], [25, 55, 65, 75, 95], [25, 55, 65, 75, 85], [25, 55, 65, 75, 85, 95], [25, 45], [25, 45, 95], [25, 45, 85], [25, 45, 85, 95], [25, 45, 75], [25, 45, 75, 95], [25, 45, 75, 85], [25, 45, 75, 85, 95], [25, 45, 65], [25, 45, 65, 95], [25, 45, 65, 85], [25, 45, 65, 85, 95], [25, 45, 65, 75], [25, 45, 65, 75, 95], [25, 45, 65, 75, 85], [25, 45, 65, 75, 85, 95], [25, 45, 55], [25, 45, 55, 95], [25, 45, 55, 85], [25, 45, 55, 85, 95], [25, 45, 55, 75], [25, 45, 55, 75, 95], [25, 45, 55, 75, 85], [25, 45, 55, 75, 85, 95], [25, 45, 55, 65], [25, 45, 55, 65, 95], [25, 45, 55, 65, 85], [25, 45, 55, 65, 85, 95], [25, 45, 55, 65, 75], [25, 45, 55, 65, 75, 95], [25, 45, 55, 65, 75, 85], [25, 45, 55, 65, 75, 85, 95], [25, 35], [25, 35, 95], [25, 35, 85], [25, 35, 85, 95], [25, 35, 75], [25, 35, 75, 95], [25, 35, 75, 85], [25, 35, 75, 85, 95], [25, 35, 65], [25, 35, 65, 95], [25, 35, 65, 85], [25, 35, 65, 85, 95], [25, 35, 65, 75], [25, 35, 65, 75, 95], [25, 35, 65, 75, 85], [25, 35, 65, 75, 85, 95], [25, 35, 55], [25, 35, 55, 95], [25, 35, 55, 85], [25, 35, 55, 85, 95], [25, 35, 55, 75], [25, 35, 55, 75, 95], [25, 35, 55, 75, 85], [25, 35, 55, 75, 85, 95], [25, 35, 55, 65], [25, 35, 55, 65, 95], [25, 35, 55, 65, 85], [25, 35, 55, 65, 85, 95], [25, 35, 55, 65, 75], [25, 35, 55, 65, 75, 95], [25, 35, 55, 65, 75, 85], [25, 35, 55, 65, 75, 85, 95], [25, 35, 45], [25, 35, 45, 95], [25, 35, 45, 85], [25, 35, 45, 85, 95], [25, 35, 45, 75], [25, 35, 45, 75, 95], [25, 35, 45, 75, 85], [25, 35, 45, 75, 85, 95], [25, 35, 45, 65], [25, 35, 45, 65, 95], [25, 35, 45, 65, 85], [25, 35, 45, 65, 85, 95], [25, 35, 45, 65, 75], [25, 35, 45, 65, 75, 95], [25, 35, 45, 65, 75, 85], [25, 35, 45, 65, 75, 85, 95], [25, 35, 45, 55], [25, 35, 45, 55, 95], [25, 35, 45, 55, 85], [25, 35, 45, 55, 85, 95], [25, 35, 45, 55, 75], [25, 35, 45, 55, 75, 95], [25, 35, 45, 55, 75, 85], [25, 35, 45, 55, 75, 85, 95], [25, 35, 45, 55, 65], [25, 35, 45, 55, 65, 95], [25, 35, 45, 55, 65, 85], [25, 35, 45, 55, 65, 85, 95], [25, 35, 45, 55, 65, 75], [25, 35, 45, 55, 65, 75, 95], [25, 35, 45, 55, 65, 75, 85], [25, 35, 45, 55, 65, 75, 85, 95], [15], [15, 95], [15, 85], [15, 85, 95], [15, 75], [15, 75, 95], [15, 75, 85], [15, 75, 85, 95], [15, 65], [15, 65, 95], [15, 65, 85], [15, 65, 85, 95], [15, 65, 75], [15, 65, 75, 95], [15, 65, 75, 85], [15, 65, 75, 85, 95], [15, 55], [15, 55, 95], [15, 55, 85], [15, 55, 85, 95], [15, 55, 75], [15, 55, 75, 95], [15, 55, 75, 85], [15, 55, 75, 85, 95], [15, 55, 65], [15, 55, 65, 95], [15, 55, 65, 85], [15, 55, 65, 85, 95], [15, 55, 65, 75], [15, 55, 65, 75, 95], [15, 55, 65, 75, 85], [15, 55, 65, 75, 85, 95], [15, 45], [15, 45, 95], [15, 45, 85], [15, 45, 85, 95], [15, 45, 75], [15, 45, 75, 95], [15, 45, 75, 85], [15, 45, 75, 85, 95], [15, 45, 65], [15, 45, 65, 95], [15, 45, 65, 85], [15, 45, 65, 85, 95], [15, 45, 65, 75], [15, 45, 65, 75, 95], [15, 45, 65, 75, 85], [15, 45, 65, 75, 85, 95], [15, 45, 55], [15, 45, 55, 95], [15, 45, 55, 85], [15, 45, 55, 85, 95], [15, 45, 55, 75], [15, 45, 55, 75, 95], [15, 45, 55, 75, 85], [15, 45, 55, 75, 85, 95], [15, 45, 55, 65], [15, 45, 55, 65, 95], [15, 45, 55, 65, 85], [15, 45, 55, 65, 85, 95], [15, 45, 55, 65, 75], [15, 45, 55, 65, 75, 95], [15, 45, 55, 65, 75, 85], [15, 45, 55, 65, 75, 85, 95], [15, 35], [15, 35, 95], [15, 35, 85], [15, 35, 85, 95], [15, 35, 75], [15, 35, 75, 95], [15, 35, 75, 85], [15, 35, 75, 85, 95], [15, 35, 65], [15, 35, 65, 95], [15, 35, 65, 85], [15, 35, 65, 85, 95], [15, 35, 65, 75], [15, 35, 65, 75, 95], [15, 35, 65, 75, 85], [15, 35, 65, 75, 85, 95], [15, 35, 55], [15, 35, 55, 95], [15, 35, 55, 85], [15, 35, 55, 85, 95], [15, 35, 55, 75], [15, 35, 55, 75, 95], [15, 35, 55, 75, 85], [15, 35, 55, 75, 85, 95], [15, 35, 55, 65], [15, 35, 55, 65, 95], [15, 35, 55, 65, 85], [15, 35, 55, 65, 85, 95], [15, 35, 55, 65, 75], [15, 35, 55, 65, 75, 95], [15, 35, 55, 65, 75, 85], [15, 35, 55, 65, 75, 85, 95], [15, 35, 45], [15, 35, 45, 95], [15, 35, 45, 85], [15, 35, 45, 85, 95], [15, 35, 45, 75], [15, 35, 45, 75, 95], [15, 35, 45, 75, 85], [15, 35, 45, 75, 85, 95], [15, 35, 45, 65], [15, 35, 45, 65, 95], [15, 35, 45, 65, 85], [15, 35, 45, 65, 85, 95], [15, 35, 45, 65, 75], [15, 35, 45, 65, 75, 95], [15, 35, 45, 65, 75, 85], [15, 35, 45, 65, 75, 85, 95], [15, 35, 45, 55], [15, 35, 45, 55, 95], [15, 35, 45, 55, 85], [15, 35, 45, 55, 85, 95], [15, 35, 45, 55, 75], [15, 35, 45, 55, 75, 95], [15, 35, 45, 55, 75, 85], [15, 35, 45, 55, 75, 85, 95], [15, 35, 45, 55, 65], [15, 35, 45, 55, 65, 95], [15, 35, 45, 55, 65, 85], [15, 35, 45, 55, 65, 85, 95], [15, 35, 45, 55, 65, 75], [15, 35, 45, 55, 65, 75, 95], [15, 35, 45, 55, 65, 75, 85], [15, 35, 45, 55, 65, 75, 85, 95], [15, 25], [15, 25, 95], [15, 25, 85], [15, 25, 85, 95], [15, 25, 75], [15, 25, 75, 95], [15, 25, 75, 85], [15, 25, 75, 85, 95], [15, 25, 65], [15, 25, 65, 95], [15, 25, 65, 85], [15, 25, 65, 85, 95], [15, 25, 65, 75], [15, 25, 65, 75, 95], [15, 25, 65, 75, 85], [15, 25, 65, 75, 85, 95], [15, 25, 55], [15, 25, 55, 95], [15, 25, 55, 85], [15, 25, 55, 85, 95], [15, 25, 55, 75], [15, 25, 55, 75, 95], [15, 25, 55, 75, 85], [15, 25, 55, 75, 85, 95], [15, 25, 55, 65], [15, 25, 55, 65, 95], [15, 25, 55, 65, 85], [15, 25, 55, 65, 85, 95], [15, 25, 55, 65, 75], [15, 25, 55, 65, 75, 95], [15, 25, 55, 65, 75, 85], [15, 25, 55, 65, 75, 85, 95], [15, 25, 45], [15, 25, 45, 95], [15, 25, 45, 85], [15, 25, 45, 85, 95], [15, 25, 45, 75], [15, 25, 45, 75, 95], [15, 25, 45, 75, 85], [15, 25, 45, 75, 85, 95], [15, 25, 45, 65], [15, 25, 45, 65, 95], [15, 25, 45, 65, 85], [15, 25, 45, 65, 85, 95], [15, 25, 45, 65, 75], [15, 25, 45, 65, 75, 95], [15, 25, 45, 65, 75, 85], [15, 25, 45, 65, 75, 85, 95], [15, 25, 45, 55], [15, 25, 45, 55, 95], [15, 25, 45, 55, 85], [15, 25, 45, 55, 85, 95], [15, 25, 45, 55, 75], [15, 25, 45, 55, 75, 95], [15, 25, 45, 55, 75, 85], [15, 25, 45, 55, 75, 85, 95], [15, 25, 45, 55, 65], [15, 25, 45, 55, 65, 95], [15, 25, 45, 55, 65, 85], [15, 25, 45, 55, 65, 85, 95], [15, 25, 45, 55, 65, 75], [15, 25, 45, 55, 65, 75, 95], [15, 25, 45, 55, 65, 75, 85], [15, 25, 45, 55, 65, 75, 85, 95], [15, 25, 35], [15, 25, 35, 95], [15, 25, 35, 85], [15, 25, 35, 85, 95], [15, 25, 35, 75], [15, 25, 35, 75, 95], [15, 25, 35, 75, 85], [15, 25, 35, 75, 85, 95], [15, 25, 35, 65], [15, 25, 35, 65, 95], [15, 25, 35, 65, 85], [15, 25, 35, 65, 85, 95], [15, 25, 35, 65, 75], [15, 25, 35, 65, 75, 95], [15, 25, 35, 65, 75, 85], [15, 25, 35, 65, 75, 85, 95], [15, 25, 35, 55], [15, 25, 35, 55, 95], [15, 25, 35, 55, 85], [15, 25, 35, 55, 85, 95], [15, 25, 35, 55, 75], [15, 25, 35, 55, 75, 95], [15, 25, 35, 55, 75, 85], [15, 25, 35, 55, 75, 85, 95], [15, 25, 35, 55, 65], [15, 25, 35, 55, 65, 95], [15, 25, 35, 55, 65, 85], [15, 25, 35, 55, 65, 85, 95], [15, 25, 35, 55, 65, 75], [15, 25, 35, 55, 65, 75, 95], [15, 25, 35, 55, 65, 75, 85], [15, 25, 35, 55, 65, 75, 85, 95], [15, 25, 35, 45], [15, 25, 35, 45, 95], [15, 25, 35, 45, 85], [15, 25, 35, 45, 85, 95], [15, 25, 35, 45, 75], [15, 25, 35, 45, 75, 95], [15, 25, 35, 45, 75, 85], [15, 25, 35, 45, 75, 85, 95], [15, 25, 35, 45, 65], [15, 25, 35, 45, 65, 95], [15, 25, 35, 45, 65, 85], [15, 25, 35, 45, 65, 85, 95], [15, 25, 35, 45, 65, 75], [15, 25, 35, 45, 65, 75, 95], [15, 25, 35, 45, 65, 75, 85], [15, 25, 35, 45, 65, 75, 85, 95], [15, 25, 35, 45, 55], [15, 25, 35, 45, 55, 95], [15, 25, 35, 45, 55, 85], [15, 25, 35, 45, 55, 85, 95], [15, 25, 35, 45, 55, 75], [15, 25, 35, 45, 55, 75, 95], [15, 25, 35, 45, 55, 75, 85], [15, 25, 35, 45, 55, 75, 85, 95], [15, 25, 35, 45, 55, 65], [15, 25, 35, 45, 55, 65, 95], [15, 25, 35, 45, 55, 65, 85], [15, 25, 35, 45, 55, 65, 85, 95], [15, 25, 35, 45, 55, 65, 75], [15, 25, 35, 45, 55, 65, 75, 95], [15, 25, 35, 45, 55, 65, 75, 85], [15, 25, 35, 45, 55, 65, 75, 85, 95], [5], [5, 95], [5, 85], [5, 85, 95], [5, 75], [5, 75, 95], [5, 75, 85], [5, 75, 85, 95], [5, 65], [5, 65, 95], [5, 65, 85], [5, 65, 85, 95], [5, 65, 75], [5, 65, 75, 95], [5, 65, 75, 85], [5, 65, 75, 85, 95], [5, 55], [5, 55, 95], [5, 55, 85], [5, 55, 85, 95], [5, 55, 75], [5, 55, 75, 95], [5, 55, 75, 85], [5, 55, 75, 85, 95], [5, 55, 65], [5, 55, 65, 95], [5, 55, 65, 85], [5, 55, 65, 85, 95], [5, 55, 65, 75], [5, 55, 65, 75, 95], [5, 55, 65, 75, 85], [5, 55, 65, 75, 85, 95], [5, 45], [5, 45, 95], [5, 45, 85], [5, 45, 85, 95], [5, 45, 75], [5, 45, 75, 95], [5, 45, 75, 85], [5, 45, 75, 85, 95], [5, 45, 65], [5, 45, 65, 95], [5, 45, 65, 85], [5, 45, 65, 85, 95], [5, 45, 65, 75], [5, 45, 65, 75, 95], [5, 45, 65, 75, 85], [5, 45, 65, 75, 85, 95], [5, 45, 55], [5, 45, 55, 95], [5, 45, 55, 85], [5, 45, 55, 85, 95], [5, 45, 55, 75], [5, 45, 55, 75, 95], [5, 45, 55, 75, 85], [5, 45, 55, 75, 85, 95], [5, 45, 55, 65], [5, 45, 55, 65, 95], [5, 45, 55, 65, 85], [5, 45, 55, 65, 85, 95], [5, 45, 55, 65, 75], [5, 45, 55, 65, 75, 95], [5, 45, 55, 65, 75, 85], [5, 45, 55, 65, 75, 85, 95], [5, 35], [5, 35, 95], [5, 35, 85], [5, 35, 85, 95], [5, 35, 75], [5, 35, 75, 95], [5, 35, 75, 85], [5, 35, 75, 85, 95], [5, 35, 65], [5, 35, 65, 95], [5, 35, 65, 85], [5, 35, 65, 85, 95], [5, 35, 65, 75], [5, 35, 65, 75, 95], [5, 35, 65, 75, 85], [5, 35, 65, 75, 85, 95], [5, 35, 55], [5, 35, 55, 95], [5, 35, 55, 85], [5, 35, 55, 85, 95], [5, 35, 55, 75], [5, 35, 55, 75, 95], [5, 35, 55, 75, 85], [5, 35, 55, 75, 85, 95], [5, 35, 55, 65], [5, 35, 55, 65, 95], [5, 35, 55, 65, 85], [5, 35, 55, 65, 85, 95], [5, 35, 55, 65, 75], [5, 35, 55, 65, 75, 95], [5, 35, 55, 65, 75, 85], [5, 35, 55, 65, 75, 85, 95], [5, 35, 45], [5, 35, 45, 95], [5, 35, 45, 85], [5, 35, 45, 85, 95], [5, 35, 45, 75], [5, 35, 45, 75, 95], [5, 35, 45, 75, 85], [5, 35, 45, 75, 85, 95], [5, 35, 45, 65], [5, 35, 45, 65, 95], [5, 35, 45, 65, 85], [5, 35, 45, 65, 85, 95], [5, 35, 45, 65, 75], [5, 35, 45, 65, 75, 95], [5, 35, 45, 65, 75, 85], [5, 35, 45, 65, 75, 85, 95], [5, 35, 45, 55], [5, 35, 45, 55, 95], [5, 35, 45, 55, 85], [5, 35, 45, 55, 85, 95], [5, 35, 45, 55, 75], [5, 35, 45, 55, 75, 95], [5, 35, 45, 55, 75, 85], [5, 35, 45, 55, 75, 85, 95], [5, 35, 45, 55, 65], [5, 35, 45, 55, 65, 95], [5, 35, 45, 55, 65, 85], [5, 35, 45, 55, 65, 85, 95], [5, 35, 45, 55, 65, 75], [5, 35, 45, 55, 65, 75, 95], [5, 35, 45, 55, 65, 75, 85], [5, 35, 45, 55, 65, 75, 85, 95], [5, 25], [5, 25, 95], [5, 25, 85], [5, 25, 85, 95], [5, 25, 75], [5, 25, 75, 95], [5, 25, 75, 85], [5, 25, 75, 85, 95], [5, 25, 65], [5, 25, 65, 95], [5, 25, 65, 85], [5, 25, 65, 85, 95], [5, 25, 65, 75], [5, 25, 65, 75, 95], [5, 25, 65, 75, 85], [5, 25, 65, 75, 85, 95], [5, 25, 55], [5, 25, 55, 95], [5, 25, 55, 85], [5, 25, 55, 85, 95], [5, 25, 55, 75], [5, 25, 55, 75, 95], [5, 25, 55, 75, 85], [5, 25, 55, 75, 85, 95], [5, 25, 55, 65], [5, 25, 55, 65, 95], [5, 25, 55, 65, 85], [5, 25, 55, 65, 85, 95], [5, 25, 55, 65, 75], [5, 25, 55, 65, 75, 95], [5, 25, 55, 65, 75, 85], [5, 25, 55, 65, 75, 85, 95], [5, 25, 45], [5, 25, 45, 95], [5, 25, 45, 85], [5, 25, 45, 85, 95], [5, 25, 45, 75], [5, 25, 45, 75, 95], [5, 25, 45, 75, 85], [5, 25, 45, 75, 85, 95], [5, 25, 45, 65], [5, 25, 45, 65, 95], [5, 25, 45, 65, 85], [5, 25, 45, 65, 85, 95], [5, 25, 45, 65, 75], [5, 25, 45, 65, 75, 95], [5, 25, 45, 65, 75, 85], [5, 25, 45, 65, 75, 85, 95], [5, 25, 45, 55], [5, 25, 45, 55, 95], [5, 25, 45, 55, 85], [5, 25, 45, 55, 85, 95], [5, 25, 45, 55, 75], [5, 25, 45, 55, 75, 95], [5, 25, 45, 55, 75, 85], [5, 25, 45, 55, 75, 85, 95], [5, 25, 45, 55, 65], [5, 25, 45, 55, 65, 95], [5, 25, 45, 55, 65, 85], [5, 25, 45, 55, 65, 85, 95], [5, 25, 45, 55, 65, 75], [5, 25, 45, 55, 65, 75, 95], [5, 25, 45, 55, 65, 75, 85], [5, 25, 45, 55, 65, 75, 85, 95], [5, 25, 35], [5, 25, 35, 95], [5, 25, 35, 85], [5, 25, 35, 85, 95], [5, 25, 35, 75], [5, 25, 35, 75, 95], [5, 25, 35, 75, 85], [5, 25, 35, 75, 85, 95], [5, 25, 35, 65], [5, 25, 35, 65, 95], [5, 25, 35, 65, 85], [5, 25, 35, 65, 85, 95], [5, 25, 35, 65, 75], [5, 25, 35, 65, 75, 95], [5, 25, 35, 65, 75, 85], [5, 25, 35, 65, 75, 85, 95], [5, 25, 35, 55], [5, 25, 35, 55, 95], [5, 25, 35, 55, 85], [5, 25, 35, 55, 85, 95], [5, 25, 35, 55, 75], [5, 25, 35, 55, 75, 95], [5, 25, 35, 55, 75, 85], [5, 25, 35, 55, 75, 85, 95], [5, 25, 35, 55, 65], [5, 25, 35, 55, 65, 95], [5, 25, 35, 55, 65, 85], [5, 25, 35, 55, 65, 85, 95], [5, 25, 35, 55, 65, 75], [5, 25, 35, 55, 65, 75, 95], [5, 25, 35, 55, 65, 75, 85], [5, 25, 35, 55, 65, 75, 85, 95], [5, 25, 35, 45], [5, 25, 35, 45, 95], [5, 25, 35, 45, 85], [5, 25, 35, 45, 85, 95], [5, 25, 35, 45, 75], [5, 25, 35, 45, 75, 95], [5, 25, 35, 45, 75, 85], [5, 25, 35, 45, 75, 85, 95], [5, 25, 35, 45, 65], [5, 25, 35, 45, 65, 95], [5, 25, 35, 45, 65, 85], [5, 25, 35, 45, 65, 85, 95], [5, 25, 35, 45, 65, 75], [5, 25, 35, 45, 65, 75, 95], [5, 25, 35, 45, 65, 75, 85], [5, 25, 35, 45, 65, 75, 85, 95], [5, 25, 35, 45, 55], [5, 25, 35, 45, 55, 95], [5, 25, 35, 45, 55, 85], [5, 25, 35, 45, 55, 85, 95], [5, 25, 35, 45, 55, 75], [5, 25, 35, 45, 55, 75, 95], [5, 25, 35, 45, 55, 75, 85], [5, 25, 35, 45, 55, 75, 85, 95], [5, 25, 35, 45, 55, 65], [5, 25, 35, 45, 55, 65, 95], [5, 25, 35, 45, 55, 65, 85], [5, 25, 35, 45, 55, 65, 85, 95], [5, 25, 35, 45, 55, 65, 75], [5, 25, 35, 45, 55, 65, 75, 95], [5, 25, 35, 45, 55, 65, 75, 85], [5, 25, 35, 45, 55, 65, 75, 85, 95], [5, 15], [5, 15, 95], [5, 15, 85], [5, 15, 85, 95], [5, 15, 75], [5, 15, 75, 95], [5, 15, 75, 85], [5, 15, 75, 85, 95], [5, 15, 65], [5, 15, 65, 95], [5, 15, 65, 85], [5, 15, 65, 85, 95], [5, 15, 65, 75], [5, 15, 65, 75, 95], [5, 15, 65, 75, 85], [5, 15, 65, 75, 85, 95], [5, 15, 55], [5, 15, 55, 95], [5, 15, 55, 85], [5, 15, 55, 85, 95], [5, 15, 55, 75], [5, 15, 55, 75, 95], [5, 15, 55, 75, 85], [5, 15, 55, 75, 85, 95], [5, 15, 55, 65], [5, 15, 55, 65, 95], [5, 15, 55, 65, 85], [5, 15, 55, 65, 85, 95], [5, 15, 55, 65, 75], [5, 15, 55, 65, 75, 95], [5, 15, 55, 65, 75, 85], [5, 15, 55, 65, 75, 85, 95], [5, 15, 45], [5, 15, 45, 95], [5, 15, 45, 85], [5, 15, 45, 85, 95], [5, 15, 45, 75], [5, 15, 45, 75, 95], [5, 15, 45, 75, 85], [5, 15, 45, 75, 85, 95], [5, 15, 45, 65], [5, 15, 45, 65, 95], [5, 15, 45, 65, 85], [5, 15, 45, 65, 85, 95], [5, 15, 45, 65, 75], [5, 15, 45, 65, 75, 95], [5, 15, 45, 65, 75, 85], [5, 15, 45, 65, 75, 85, 95], [5, 15, 45, 55], [5, 15, 45, 55, 95], [5, 15, 45, 55, 85], [5, 15, 45, 55, 85, 95], [5, 15, 45, 55, 75], [5, 15, 45, 55, 75, 95], [5, 15, 45, 55, 75, 85], [5, 15, 45, 55, 75, 85, 95], [5, 15, 45, 55, 65], [5, 15, 45, 55, 65, 95], [5, 15, 45, 55, 65, 85], [5, 15, 45, 55, 65, 85, 95], [5, 15, 45, 55, 65, 75], [5, 15, 45, 55, 65, 75, 95], [5, 15, 45, 55, 65, 75, 85], [5, 15, 45, 55, 65, 75, 85, 95], [5, 15, 35], [5, 15, 35, 95], [5, 15, 35, 85], [5, 15, 35, 85, 95], [5, 15, 35, 75], [5, 15, 35, 75, 95], [5, 15, 35, 75, 85], [5, 15, 35, 75, 85, 95], [5, 15, 35, 65], [5, 15, 35, 65, 95], [5, 15, 35, 65, 85], [5, 15, 35, 65, 85, 95], [5, 15, 35, 65, 75], [5, 15, 35, 65, 75, 95], [5, 15, 35, 65, 75, 85], [5, 15, 35, 65, 75, 85, 95], [5, 15, 35, 55], [5, 15, 35, 55, 95], [5, 15, 35, 55, 85], [5, 15, 35, 55, 85, 95], [5, 15, 35, 55, 75], [5, 15, 35, 55, 75, 95], [5, 15, 35, 55, 75, 85], [5, 15, 35, 55, 75, 85, 95], [5, 15, 35, 55, 65], [5, 15, 35, 55, 65, 95], [5, 15, 35, 55, 65, 85], [5, 15, 35, 55, 65, 85, 95], [5, 15, 35, 55, 65, 75], [5, 15, 35, 55, 65, 75, 95], [5, 15, 35, 55, 65, 75, 85], [5, 15, 35, 55, 65, 75, 85, 95], [5, 15, 35, 45], [5, 15, 35, 45, 95], [5, 15, 35, 45, 85], [5, 15, 35, 45, 85, 95], [5, 15, 35, 45, 75], [5, 15, 35, 45, 75, 95], [5, 15, 35, 45, 75, 85], [5, 15, 35, 45, 75, 85, 95], [5, 15, 35, 45, 65], [5, 15, 35, 45, 65, 95], [5, 15, 35, 45, 65, 85], [5, 15, 35, 45, 65, 85, 95], [5, 15, 35, 45, 65, 75], [5, 15, 35, 45, 65, 75, 95], [5, 15, 35, 45, 65, 75, 85], [5, 15, 35, 45, 65, 75, 85, 95], [5, 15, 35, 45, 55], [5, 15, 35, 45, 55, 95], [5, 15, 35, 45, 55, 85], [5, 15, 35, 45, 55, 85, 95], [5, 15, 35, 45, 55, 75], [5, 15, 35, 45, 55, 75, 95], [5, 15, 35, 45, 55, 75, 85], [5, 15, 35, 45, 55, 75, 85, 95], [5, 15, 35, 45, 55, 65], [5, 15, 35, 45, 55, 65, 95], [5, 15, 35, 45, 55, 65, 85], [5, 15, 35, 45, 55, 65, 85, 95], [5, 15, 35, 45, 55, 65, 75], [5, 15, 35, 45, 55, 65, 75, 95], [5, 15, 35, 45, 55, 65, 75, 85], [5, 15, 35, 45, 55, 65, 75, 85, 95], [5, 15, 25], [5, 15, 25, 95], [5, 15, 25, 85], [5, 15, 25, 85, 95], [5, 15, 25, 75], [5, 15, 25, 75, 95], [5, 15, 25, 75, 85], [5, 15, 25, 75, 85, 95], [5, 15, 25, 65], [5, 15, 25, 65, 95], [5, 15, 25, 65, 85], [5, 15, 25, 65, 85, 95], [5, 15, 25, 65, 75], [5, 15, 25, 65, 75, 95], [5, 15, 25, 65, 75, 85], [5, 15, 25, 65, 75, 85, 95], [5, 15, 25, 55], [5, 15, 25, 55, 95], [5, 15, 25, 55, 85], [5, 15, 25, 55, 85, 95], [5, 15, 25, 55, 75], [5, 15, 25, 55, 75, 95], [5, 15, 25, 55, 75, 85], [5, 15, 25, 55, 75, 85, 95], [5, 15, 25, 55, 65], [5, 15, 25, 55, 65, 95], [5, 15, 25, 55, 65, 85], [5, 15, 25, 55, 65, 85, 95], [5, 15, 25, 55, 65, 75], [5, 15, 25, 55, 65, 75, 95], [5, 15, 25, 55, 65, 75, 85], [5, 15, 25, 55, 65, 75, 85, 95], [5, 15, 25, 45], [5, 15, 25, 45, 95], [5, 15, 25, 45, 85], [5, 15, 25, 45, 85, 95], [5, 15, 25, 45, 75], [5, 15, 25, 45, 75, 95], [5, 15, 25, 45, 75, 85], [5, 15, 25, 45, 75, 85, 95], [5, 15, 25, 45, 65], [5, 15, 25, 45, 65, 95], [5, 15, 25, 45, 65, 85], [5, 15, 25, 45, 65, 85, 95], [5, 15, 25, 45, 65, 75], [5, 15, 25, 45, 65, 75, 95], [5, 15, 25, 45, 65, 75, 85], [5, 15, 25, 45, 65, 75, 85, 95], [5, 15, 25, 45, 55], [5, 15, 25, 45, 55, 95], [5, 15, 25, 45, 55, 85], [5, 15, 25, 45, 55, 85, 95], [5, 15, 25, 45, 55, 75], [5, 15, 25, 45, 55, 75, 95], [5, 15, 25, 45, 55, 75, 85], [5, 15, 25, 45, 55, 75, 85, 95], [5, 15, 25, 45, 55, 65], [5, 15, 25, 45, 55, 65, 95], [5, 15, 25, 45, 55, 65, 85], [5, 15, 25, 45, 55, 65, 85, 95], [5, 15, 25, 45, 55, 65, 75], [5, 15, 25, 45, 55, 65, 75, 95], [5, 15, 25, 45, 55, 65, 75, 85], [5, 15, 25, 45, 55, 65, 75, 85, 95], [5, 15, 25, 35], [5, 15, 25, 35, 95], [5, 15, 25, 35, 85], [5, 15, 25, 35, 85, 95], [5, 15, 25, 35, 75], [5, 15, 25, 35, 75, 95], [5, 15, 25, 35, 75, 85], [5, 15, 25, 35, 75, 85, 95], [5, 15, 25, 35, 65], [5, 15, 25, 35, 65, 95], [5, 15, 25, 35, 65, 85], [5, 15, 25, 35, 65, 85, 95], [5, 15, 25, 35, 65, 75], [5, 15, 25, 35, 65, 75, 95], [5, 15, 25, 35, 65, 75, 85], [5, 15, 25, 35, 65, 75, 85, 95], [5, 15, 25, 35, 55], [5, 15, 25, 35, 55, 95], [5, 15, 25, 35, 55, 85], [5, 15, 25, 35, 55, 85, 95], [5, 15, 25, 35, 55, 75], [5, 15, 25, 35, 55, 75, 95], [5, 15, 25, 35, 55, 75, 85], [5, 15, 25, 35, 55, 75, 85, 95], [5, 15, 25, 35, 55, 65], [5, 15, 25, 35, 55, 65, 95], [5, 15, 25, 35, 55, 65, 85], [5, 15, 25, 35, 55, 65, 85, 95], [5, 15, 25, 35, 55, 65, 75], [5, 15, 25, 35, 55, 65, 75, 95], [5, 15, 25, 35, 55, 65, 75, 85], [5, 15, 25, 35, 55, 65, 75, 85, 95], [5, 15, 25, 35, 45], [5, 15, 25, 35, 45, 95], [5, 15, 25, 35, 45, 85], [5, 15, 25, 35, 45, 85, 95], [5, 15, 25, 35, 45, 75], [5, 15, 25, 35, 45, 75, 95], [5, 15, 25, 35, 45, 75, 85], [5, 15, 25, 35, 45, 75, 85, 95], [5, 15, 25, 35, 45, 65], [5, 15, 25, 35, 45, 65, 95], [5, 15, 25, 35, 45, 65, 85], [5, 15, 25, 35, 45, 65, 85, 95], [5, 15, 25, 35, 45, 65, 75], [5, 15, 25, 35, 45, 65, 75, 95], [5, 15, 25, 35, 45, 65, 75, 85], [5, 15, 25, 35, 45, 65, 75, 85, 95], [5, 15, 25, 35, 45, 55], [5, 15, 25, 35, 45, 55, 95], [5, 15, 25, 35, 45, 55, 85], [5, 15, 25, 35, 45, 55, 85, 95], [5, 15, 25, 35, 45, 55, 75], [5, 15, 25, 35, 45, 55, 75, 95], [5, 15, 25, 35, 45, 55, 75, 85], [5, 15, 25, 35, 45, 55, 75, 85, 95], [5, 15, 25, 35, 45, 55, 65], [5, 15, 25, 35, 45, 55, 65, 95], [5, 15, 25, 35, 45, 55, 65, 85], [5, 15, 25, 35, 45, 55, 65, 85, 95], [5, 15, 25, 35, 45, 55, 65, 75], [5, 15, 25, 35, 45, 55, 65, 75, 95], [5, 15, 25, 35, 45, 55, 65, 75, 85], [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]]"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[[], [9], [8], [8, 9], [7], [7, 9], [7, 8], [7, 8, 9], [6], [6, 9], [6, 8], [6, 8, 9], [6, 7], [6, 7, 9], [6, 7, 8], [6, 7, 8, 9], [5], [5, 9], [5, 8], [5, 8, 9], [5, 7], [5, 7, 9], [5, 7, 8], [5, 7, 8, 9], [5, 6], [5, 6, 9], [5, 6, 8], [5, 6, 8, 9], [5, 6, 7], [5, 6, 7, 9], [5, 6, 7, 8], [5, 6, 7, 8, 9], [4], [4, 9], [4, 8], [4, 8, 9], [4, 7], [4, 7, 9], [4, 7, 8], [4, 7, 8, 9], [4, 6], [4, 6, 9], [4, 6, 8], [4, 6, 8, 9], [4, 6, 7], [4, 6, 7, 9], [4, 6, 7, 8], [4, 6, 7, 8, 9], [4, 5], [4, 5, 9], [4, 5, 8], [4, 5, 8, 9], [4, 5, 7], [4, 5, 7, 9], [4, 5, 7, 8], [4, 5, 7, 8, 9], [4, 5, 6], [4, 5, 6, 9], [4, 5, 6, 8], [4, 5, 6, 8, 9], [4, 5, 6, 7], [4, 5, 6, 7, 9], [4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9], [3], [3, 9], [3, 8], [3, 8, 9], [3, 7], [3, 7, 9], [3, 7, 8], [3, 7, 8, 9], [3, 6], [3, 6, 9], [3, 6, 8], [3, 6, 8, 9], [3, 6, 7], [3, 6, 7, 9], [3, 6, 7, 8], [3, 6, 7, 8, 9], [3, 5], [3, 5, 9], [3, 5, 8], [3, 5, 8, 9], [3, 5, 7], [3, 5, 7, 9], [3, 5, 7, 8], [3, 5, 7, 8, 9], [3, 5, 6], [3, 5, 6, 9], [3, 5, 6, 8], [3, 5, 6, 8, 9], [3, 5, 6, 7], [3, 5, 6, 7, 9], [3, 5, 6, 7, 8], [3, 5, 6, 7, 8, 9], [3, 4], [3, 4, 9], [3, 4, 8], [3, 4, 8, 9], [3, 4, 7], [3, 4, 7, 9], [3, 4, 7, 8], [3, 4, 7, 8, 9], [3, 4, 6], [3, 4, 6, 9], [3, 4, 6, 8], [3, 4, 6, 8, 9], [3, 4, 6, 7], [3, 4, 6, 7, 9], [3, 4, 6, 7, 8], [3, 4, 6, 7, 8, 9], [3, 4, 5], [3, 4, 5, 9], [3, 4, 5, 8], [3, 4, 5, 8, 9], [3, 4, 5, 7], [3, 4, 5, 7, 9], [3, 4, 5, 7, 8], [3, 4, 5, 7, 8, 9], [3, 4, 5, 6], [3, 4, 5, 6, 9], [3, 4, 5, 6, 8], [3, 4, 5, 6, 8, 9], [3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 9], [3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9], [2], [2, 9], [2, 8], [2, 8, 9], [2, 7], [2, 7, 9], [2, 7, 8], [2, 7, 8, 9], [2, 6], [2, 6, 9], [2, 6, 8], [2, 6, 8, 9], [2, 6, 7], [2, 6, 7, 9], [2, 6, 7, 8], [2, 6, 7, 8, 9], [2, 5], [2, 5, 9], [2, 5, 8], [2, 5, 8, 9], [2, 5, 7], [2, 5, 7, 9], [2, 5, 7, 8], [2, 5, 7, 8, 9], [2, 5, 6], [2, 5, 6, 9], [2, 5, 6, 8], [2, 5, 6, 8, 9], [2, 5, 6, 7], [2, 5, 6, 7, 9], [2, 5, 6, 7, 8], [2, 5, 6, 7, 8, 9], [2, 4], [2, 4, 9], [2, 4, 8], [2, 4, 8, 9], [2, 4, 7], [2, 4, 7, 9], [2, 4, 7, 8], [2, 4, 7, 8, 9], [2, 4, 6], [2, 4, 6, 9], [2, 4, 6, 8], [2, 4, 6, 8, 9], [2, 4, 6, 7], [2, 4, 6, 7, 9], [2, 4, 6, 7, 8], [2, 4, 6, 7, 8, 9], [2, 4, 5], [2, 4, 5, 9], [2, 4, 5, 8], [2, 4, 5, 8, 9], [2, 4, 5, 7], [2, 4, 5, 7, 9], [2, 4, 5, 7, 8], [2, 4, 5, 7, 8, 9], [2, 4, 5, 6], [2, 4, 5, 6, 9], [2, 4, 5, 6, 8], [2, 4, 5, 6, 8, 9], [2, 4, 5, 6, 7], [2, 4, 5, 6, 7, 9], [2, 4, 5, 6, 7, 8], [2, 4, 5, 6, 7, 8, 9], [2, 3], [2, 3, 9], [2, 3, 8], [2, 3, 8, 9], [2, 3, 7], [2, 3, 7, 9], [2, 3, 7, 8], [2, 3, 7, 8, 9], [2, 3, 6], [2, 3, 6, 9], [2, 3, 6, 8], [2, 3, 6, 8, 9], [2, 3, 6, 7], [2, 3, 6, 7, 9], [2, 3, 6, 7, 8], [2, 3, 6, 7, 8, 9], [2, 3, 5], [2, 3, 5, 9], [2, 3, 5, 8], [2, 3, 5, 8, 9], [2, 3, 5, 7], [2, 3, 5, 7, 9], [2, 3, 5, 7, 8], [2, 3, 5, 7, 8, 9], [2, 3, 5, 6], [2, 3, 5, 6, 9], [2, 3, 5, 6, 8], [2, 3, 5, 6, 8, 9], [2, 3, 5, 6, 7], [2, 3, 5, 6, 7, 9], [2, 3, 5, 6, 7, 8], [2, 3, 5, 6, 7, 8, 9], [2, 3, 4], [2, 3, 4, 9], [2, 3, 4, 8], [2, 3, 4, 8, 9], [2, 3, 4, 7], [2, 3, 4, 7, 9], [2, 3, 4, 7, 8], [2, 3, 4, 7, 8, 9], [2, 3, 4, 6], [2, 3, 4, 6, 9], [2, 3, 4, 6, 8], [2, 3, 4, 6, 8, 9], [2, 3, 4, 6, 7], [2, 3, 4, 6, 7, 9], [2, 3, 4, 6, 7, 8], [2, 3, 4, 6, 7, 8, 9], [2, 3, 4, 5], [2, 3, 4, 5, 9], [2, 3, 4, 5, 8], [2, 3, 4, 5, 8, 9], [2, 3, 4, 5, 7], [2, 3, 4, 5, 7, 9], [2, 3, 4, 5, 7, 8], [2, 3, 4, 5, 7, 8, 9], [2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 9], [2, 3, 4, 5, 6, 8], [2, 3, 4, 5, 6, 8, 9], [2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 9], [2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8, 9], [1], [1, 9], [1, 8], [1, 8, 9], [1, 7], [1, 7, 9], [1, 7, 8], [1, 7, 8, 9], [1, 6], [1, 6, 9], [1, 6, 8], [1, 6, 8, 9], [1, 6, 7], [1, 6, 7, 9], [1, 6, 7, 8], [1, 6, 7, 8, 9], [1, 5], [1, 5, 9], [1, 5, 8], [1, 5, 8, 9], [1, 5, 7], [1, 5, 7, 9], [1, 5, 7, 8], [1, 5, 7, 8, 9], [1, 5, 6], [1, 5, 6, 9], [1, 5, 6, 8], [1, 5, 6, 8, 9], [1, 5, 6, 7], [1, 5, 6, 7, 9], [1, 5, 6, 7, 8], [1, 5, 6, 7, 8, 9], [1, 4], [1, 4, 9], [1, 4, 8], [1, 4, 8, 9], [1, 4, 7], [1, 4, 7, 9], [1, 4, 7, 8], [1, 4, 7, 8, 9], [1, 4, 6], [1, 4, 6, 9], [1, 4, 6, 8], [1, 4, 6, 8, 9], [1, 4, 6, 7], [1, 4, 6, 7, 9], [1, 4, 6, 7, 8], [1, 4, 6, 7, 8, 9], [1, 4, 5], [1, 4, 5, 9], [1, 4, 5, 8], [1, 4, 5, 8, 9], [1, 4, 5, 7], [1, 4, 5, 7, 9], [1, 4, 5, 7, 8], [1, 4, 5, 7, 8, 9], [1, 4, 5, 6], [1, 4, 5, 6, 9], [1, 4, 5, 6, 8], [1, 4, 5, 6, 8, 9], [1, 4, 5, 6, 7], [1, 4, 5, 6, 7, 9], [1, 4, 5, 6, 7, 8], [1, 4, 5, 6, 7, 8, 9], [1, 3], [1, 3, 9], [1, 3, 8], [1, 3, 8, 9], [1, 3, 7], [1, 3, 7, 9], [1, 3, 7, 8], [1, 3, 7, 8, 9], [1, 3, 6], [1, 3, 6, 9], [1, 3, 6, 8], [1, 3, 6, 8, 9], [1, 3, 6, 7], [1, 3, 6, 7, 9], [1, 3, 6, 7, 8], [1, 3, 6, 7, 8, 9], [1, 3, 5], [1, 3, 5, 9], [1, 3, 5, 8], [1, 3, 5, 8, 9], [1, 3, 5, 7], [1, 3, 5, 7, 9], [1, 3, 5, 7, 8], [1, 3, 5, 7, 8, 9], [1, 3, 5, 6], [1, 3, 5, 6, 9], [1, 3, 5, 6, 8], [1, 3, 5, 6, 8, 9], [1, 3, 5, 6, 7], [1, 3, 5, 6, 7, 9], [1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 7, 8, 9], [1, 3, 4], [1, 3, 4, 9], [1, 3, 4, 8], [1, 3, 4, 8, 9], [1, 3, 4, 7], [1, 3, 4, 7, 9], [1, 3, 4, 7, 8], [1, 3, 4, 7, 8, 9], [1, 3, 4, 6], [1, 3, 4, 6, 9], [1, 3, 4, 6, 8], [1, 3, 4, 6, 8, 9], [1, 3, 4, 6, 7], [1, 3, 4, 6, 7, 9], [1, 3, 4, 6, 7, 8], [1, 3, 4, 6, 7, 8, 9], [1, 3, 4, 5], [1, 3, 4, 5, 9], [1, 3, 4, 5, 8], [1, 3, 4, 5, 8, 9], [1, 3, 4, 5, 7], [1, 3, 4, 5, 7, 9], [1, 3, 4, 5, 7, 8], [1, 3, 4, 5, 7, 8, 9], [1, 3, 4, 5, 6], [1, 3, 4, 5, 6, 9], [1, 3, 4, 5, 6, 8], [1, 3, 4, 5, 6, 8, 9], [1, 3, 4, 5, 6, 7], [1, 3, 4, 5, 6, 7, 9], [1, 3, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2], [1, 2, 9], [1, 2, 8], [1, 2, 8, 9], [1, 2, 7], [1, 2, 7, 9], [1, 2, 7, 8], [1, 2, 7, 8, 9], [1, 2, 6], [1, 2, 6, 9], [1, 2, 6, 8], [1, 2, 6, 8, 9], [1, 2, 6, 7], [1, 2, 6, 7, 9], [1, 2, 6, 7, 8], [1, 2, 6, 7, 8, 9], [1, 2, 5], [1, 2, 5, 9], [1, 2, 5, 8], [1, 2, 5, 8, 9], [1, 2, 5, 7], [1, 2, 5, 7, 9], [1, 2, 5, 7, 8], [1, 2, 5, 7, 8, 9], [1, 2, 5, 6], [1, 2, 5, 6, 9], [1, 2, 5, 6, 8], [1, 2, 5, 6, 8, 9], [1, 2, 5, 6, 7], [1, 2, 5, 6, 7, 9], [1, 2, 5, 6, 7, 8], [1, 2, 5, 6, 7, 8, 9], [1, 2, 4], [1, 2, 4, 9], [1, 2, 4, 8], [1, 2, 4, 8, 9], [1, 2, 4, 7], [1, 2, 4, 7, 9], [1, 2, 4, 7, 8], [1, 2, 4, 7, 8, 9], [1, 2, 4, 6], [1, 2, 4, 6, 9], [1, 2, 4, 6, 8], [1, 2, 4, 6, 8, 9], [1, 2, 4, 6, 7], [1, 2, 4, 6, 7, 9], [1, 2, 4, 6, 7, 8], [1, 2, 4, 6, 7, 8, 9], [1, 2, 4, 5], [1, 2, 4, 5, 9], [1, 2, 4, 5, 8], [1, 2, 4, 5, 8, 9], [1, 2, 4, 5, 7], [1, 2, 4, 5, 7, 9], [1, 2, 4, 5, 7, 8], [1, 2, 4, 5, 7, 8, 9], [1, 2, 4, 5, 6], [1, 2, 4, 5, 6, 9], [1, 2, 4, 5, 6, 8], [1, 2, 4, 5, 6, 8, 9], [1, 2, 4, 5, 6, 7], [1, 2, 4, 5, 6, 7, 9], [1, 2, 4, 5, 6, 7, 8], [1, 2, 4, 5, 6, 7, 8, 9], [1, 2, 3], [1, 2, 3, 9], [1, 2, 3, 8], [1, 2, 3, 8, 9], [1, 2, 3, 7], [1, 2, 3, 7, 9], [1, 2, 3, 7, 8], [1, 2, 3, 7, 8, 9], [1, 2, 3, 6], [1, 2, 3, 6, 9], [1, 2, 3, 6, 8], [1, 2, 3, 6, 8, 9], [1, 2, 3, 6, 7], [1, 2, 3, 6, 7, 9], [1, 2, 3, 6, 7, 8], [1, 2, 3, 6, 7, 8, 9], [1, 2, 3, 5], [1, 2, 3, 5, 9], [1, 2, 3, 5, 8], [1, 2, 3, 5, 8, 9], [1, 2, 3, 5, 7], [1, 2, 3, 5, 7, 9], [1, 2, 3, 5, 7, 8], [1, 2, 3, 5, 7, 8, 9], [1, 2, 3, 5, 6], [1, 2, 3, 5, 6, 9], [1, 2, 3, 5, 6, 8], [1, 2, 3, 5, 6, 8, 9], [1, 2, 3, 5, 6, 7], [1, 2, 3, 5, 6, 7, 9], [1, 2, 3, 5, 6, 7, 8], [1, 2, 3, 5, 6, 7, 8, 9], [1, 2, 3, 4], [1, 2, 3, 4, 9], [1, 2, 3, 4, 8], [1, 2, 3, 4, 8, 9], [1, 2, 3, 4, 7], [1, 2, 3, 4, 7, 9], [1, 2, 3, 4, 7, 8], [1, 2, 3, 4, 7, 8, 9], [1, 2, 3, 4, 6], [1, 2, 3, 4, 6, 9], [1, 2, 3, 4, 6, 8], [1, 2, 3, 4, 6, 8, 9], [1, 2, 3, 4, 6, 7], [1, 2, 3, 4, 6, 7, 9], [1, 2, 3, 4, 6, 7, 8], [1, 2, 3, 4, 6, 7, 8, 9], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 9], [1, 2, 3, 4, 5, 8], [1, 2, 3, 4, 5, 8, 9], [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 5, 7, 9], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 7, 8, 9], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 9], [1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 9], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [0], [0, 9], [0, 8], [0, 8, 9], [0, 7], [0, 7, 9], [0, 7, 8], [0, 7, 8, 9], [0, 6], [0, 6, 9], [0, 6, 8], [0, 6, 8, 9], [0, 6, 7], [0, 6, 7, 9], [0, 6, 7, 8], [0, 6, 7, 8, 9], [0, 5], [0, 5, 9], [0, 5, 8], [0, 5, 8, 9], [0, 5, 7], [0, 5, 7, 9], [0, 5, 7, 8], [0, 5, 7, 8, 9], [0, 5, 6], [0, 5, 6, 9], [0, 5, 6, 8], [0, 5, 6, 8, 9], [0, 5, 6, 7], [0, 5, 6, 7, 9], [0, 5, 6, 7, 8], [0, 5, 6, 7, 8, 9], [0, 4], [0, 4, 9], [0, 4, 8], [0, 4, 8, 9], [0, 4, 7], [0, 4, 7, 9], [0, 4, 7, 8], [0, 4, 7, 8, 9], [0, 4, 6], [0, 4, 6, 9], [0, 4, 6, 8], [0, 4, 6, 8, 9], [0, 4, 6, 7], [0, 4, 6, 7, 9], [0, 4, 6, 7, 8], [0, 4, 6, 7, 8, 9], [0, 4, 5], [0, 4, 5, 9], [0, 4, 5, 8], [0, 4, 5, 8, 9], [0, 4, 5, 7], [0, 4, 5, 7, 9], [0, 4, 5, 7, 8], [0, 4, 5, 7, 8, 9], [0, 4, 5, 6], [0, 4, 5, 6, 9], [0, 4, 5, 6, 8], [0, 4, 5, 6, 8, 9], [0, 4, 5, 6, 7], [0, 4, 5, 6, 7, 9], [0, 4, 5, 6, 7, 8], [0, 4, 5, 6, 7, 8, 9], [0, 3], [0, 3, 9], [0, 3, 8], [0, 3, 8, 9], [0, 3, 7], [0, 3, 7, 9], [0, 3, 7, 8], [0, 3, 7, 8, 9], [0, 3, 6], [0, 3, 6, 9], [0, 3, 6, 8], [0, 3, 6, 8, 9], [0, 3, 6, 7], [0, 3, 6, 7, 9], [0, 3, 6, 7, 8], [0, 3, 6, 7, 8, 9], [0, 3, 5], [0, 3, 5, 9], [0, 3, 5, 8], [0, 3, 5, 8, 9], [0, 3, 5, 7], [0, 3, 5, 7, 9], [0, 3, 5, 7, 8], [0, 3, 5, 7, 8, 9], [0, 3, 5, 6], [0, 3, 5, 6, 9], [0, 3, 5, 6, 8], [0, 3, 5, 6, 8, 9], [0, 3, 5, 6, 7], [0, 3, 5, 6, 7, 9], [0, 3, 5, 6, 7, 8], [0, 3, 5, 6, 7, 8, 9], [0, 3, 4], [0, 3, 4, 9], [0, 3, 4, 8], [0, 3, 4, 8, 9], [0, 3, 4, 7], [0, 3, 4, 7, 9], [0, 3, 4, 7, 8], [0, 3, 4, 7, 8, 9], [0, 3, 4, 6], [0, 3, 4, 6, 9], [0, 3, 4, 6, 8], [0, 3, 4, 6, 8, 9], [0, 3, 4, 6, 7], [0, 3, 4, 6, 7, 9], [0, 3, 4, 6, 7, 8], [0, 3, 4, 6, 7, 8, 9], [0, 3, 4, 5], [0, 3, 4, 5, 9], [0, 3, 4, 5, 8], [0, 3, 4, 5, 8, 9], [0, 3, 4, 5, 7], [0, 3, 4, 5, 7, 9], [0, 3, 4, 5, 7, 8], [0, 3, 4, 5, 7, 8, 9], [0, 3, 4, 5, 6], [0, 3, 4, 5, 6, 9], [0, 3, 4, 5, 6, 8], [0, 3, 4, 5, 6, 8, 9], [0, 3, 4, 5, 6, 7], [0, 3, 4, 5, 6, 7, 9], [0, 3, 4, 5, 6, 7, 8], [0, 3, 4, 5, 6, 7, 8, 9], [0, 2], [0, 2, 9], [0, 2, 8], [0, 2, 8, 9], [0, 2, 7], [0, 2, 7, 9], [0, 2, 7, 8], [0, 2, 7, 8, 9], [0, 2, 6], [0, 2, 6, 9], [0, 2, 6, 8], [0, 2, 6, 8, 9], [0, 2, 6, 7], [0, 2, 6, 7, 9], [0, 2, 6, 7, 8], [0, 2, 6, 7, 8, 9], [0, 2, 5], [0, 2, 5, 9], [0, 2, 5, 8], [0, 2, 5, 8, 9], [0, 2, 5, 7], [0, 2, 5, 7, 9], [0, 2, 5, 7, 8], [0, 2, 5, 7, 8, 9], [0, 2, 5, 6], [0, 2, 5, 6, 9], [0, 2, 5, 6, 8], [0, 2, 5, 6, 8, 9], [0, 2, 5, 6, 7], [0, 2, 5, 6, 7, 9], [0, 2, 5, 6, 7, 8], [0, 2, 5, 6, 7, 8, 9], [0, 2, 4], [0, 2, 4, 9], [0, 2, 4, 8], [0, 2, 4, 8, 9], [0, 2, 4, 7], [0, 2, 4, 7, 9], [0, 2, 4, 7, 8], [0, 2, 4, 7, 8, 9], [0, 2, 4, 6], [0, 2, 4, 6, 9], [0, 2, 4, 6, 8], [0, 2, 4, 6, 8, 9], [0, 2, 4, 6, 7], [0, 2, 4, 6, 7, 9], [0, 2, 4, 6, 7, 8], [0, 2, 4, 6, 7, 8, 9], [0, 2, 4, 5], [0, 2, 4, 5, 9], [0, 2, 4, 5, 8], [0, 2, 4, 5, 8, 9], [0, 2, 4, 5, 7], [0, 2, 4, 5, 7, 9], [0, 2, 4, 5, 7, 8], [0, 2, 4, 5, 7, 8, 9], [0, 2, 4, 5, 6], [0, 2, 4, 5, 6, 9], [0, 2, 4, 5, 6, 8], [0, 2, 4, 5, 6, 8, 9], [0, 2, 4, 5, 6, 7], [0, 2, 4, 5, 6, 7, 9], [0, 2, 4, 5, 6, 7, 8], [0, 2, 4, 5, 6, 7, 8, 9], [0, 2, 3], [0, 2, 3, 9], [0, 2, 3, 8], [0, 2, 3, 8, 9], [0, 2, 3, 7], [0, 2, 3, 7, 9], [0, 2, 3, 7, 8], [0, 2, 3, 7, 8, 9], [0, 2, 3, 6], [0, 2, 3, 6, 9], [0, 2, 3, 6, 8], [0, 2, 3, 6, 8, 9], [0, 2, 3, 6, 7], [0, 2, 3, 6, 7, 9], [0, 2, 3, 6, 7, 8], [0, 2, 3, 6, 7, 8, 9], [0, 2, 3, 5], [0, 2, 3, 5, 9], [0, 2, 3, 5, 8], [0, 2, 3, 5, 8, 9], [0, 2, 3, 5, 7], [0, 2, 3, 5, 7, 9], [0, 2, 3, 5, 7, 8], [0, 2, 3, 5, 7, 8, 9], [0, 2, 3, 5, 6], [0, 2, 3, 5, 6, 9], [0, 2, 3, 5, 6, 8], [0, 2, 3, 5, 6, 8, 9], [0, 2, 3, 5, 6, 7], [0, 2, 3, 5, 6, 7, 9], [0, 2, 3, 5, 6, 7, 8], [0, 2, 3, 5, 6, 7, 8, 9], [0, 2, 3, 4], [0, 2, 3, 4, 9], [0, 2, 3, 4, 8], [0, 2, 3, 4, 8, 9], [0, 2, 3, 4, 7], [0, 2, 3, 4, 7, 9], [0, 2, 3, 4, 7, 8], [0, 2, 3, 4, 7, 8, 9], [0, 2, 3, 4, 6], [0, 2, 3, 4, 6, 9], [0, 2, 3, 4, 6, 8], [0, 2, 3, 4, 6, 8, 9], [0, 2, 3, 4, 6, 7], [0, 2, 3, 4, 6, 7, 9], [0, 2, 3, 4, 6, 7, 8], [0, 2, 3, 4, 6, 7, 8, 9], [0, 2, 3, 4, 5], [0, 2, 3, 4, 5, 9], [0, 2, 3, 4, 5, 8], [0, 2, 3, 4, 5, 8, 9], [0, 2, 3, 4, 5, 7], [0, 2, 3, 4, 5, 7, 9], [0, 2, 3, 4, 5, 7, 8], [0, 2, 3, 4, 5, 7, 8, 9], [0, 2, 3, 4, 5, 6], [0, 2, 3, 4, 5, 6, 9], [0, 2, 3, 4, 5, 6, 8], [0, 2, 3, 4, 5, 6, 8, 9], [0, 2, 3, 4, 5, 6, 7], [0, 2, 3, 4, 5, 6, 7, 9], [0, 2, 3, 4, 5, 6, 7, 8], [0, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1], [0, 1, 9], [0, 1, 8], [0, 1, 8, 9], [0, 1, 7], [0, 1, 7, 9], [0, 1, 7, 8], [0, 1, 7, 8, 9], [0, 1, 6], [0, 1, 6, 9], [0, 1, 6, 8], [0, 1, 6, 8, 9], [0, 1, 6, 7], [0, 1, 6, 7, 9], [0, 1, 6, 7, 8], [0, 1, 6, 7, 8, 9], [0, 1, 5], [0, 1, 5, 9], [0, 1, 5, 8], [0, 1, 5, 8, 9], [0, 1, 5, 7], [0, 1, 5, 7, 9], [0, 1, 5, 7, 8], [0, 1, 5, 7, 8, 9], [0, 1, 5, 6], [0, 1, 5, 6, 9], [0, 1, 5, 6, 8], [0, 1, 5, 6, 8, 9], [0, 1, 5, 6, 7], [0, 1, 5, 6, 7, 9], [0, 1, 5, 6, 7, 8], [0, 1, 5, 6, 7, 8, 9], [0, 1, 4], [0, 1, 4, 9], [0, 1, 4, 8], [0, 1, 4, 8, 9], [0, 1, 4, 7], [0, 1, 4, 7, 9], [0, 1, 4, 7, 8], [0, 1, 4, 7, 8, 9], [0, 1, 4, 6], [0, 1, 4, 6, 9], [0, 1, 4, 6, 8], [0, 1, 4, 6, 8, 9], [0, 1, 4, 6, 7], [0, 1, 4, 6, 7, 9], [0, 1, 4, 6, 7, 8], [0, 1, 4, 6, 7, 8, 9], [0, 1, 4, 5], [0, 1, 4, 5, 9], [0, 1, 4, 5, 8], [0, 1, 4, 5, 8, 9], [0, 1, 4, 5, 7], [0, 1, 4, 5, 7, 9], [0, 1, 4, 5, 7, 8], [0, 1, 4, 5, 7, 8, 9], [0, 1, 4, 5, 6], [0, 1, 4, 5, 6, 9], [0, 1, 4, 5, 6, 8], [0, 1, 4, 5, 6, 8, 9], [0, 1, 4, 5, 6, 7], [0, 1, 4, 5, 6, 7, 9], [0, 1, 4, 5, 6, 7, 8], [0, 1, 4, 5, 6, 7, 8, 9], [0, 1, 3], [0, 1, 3, 9], [0, 1, 3, 8], [0, 1, 3, 8, 9], [0, 1, 3, 7], [0, 1, 3, 7, 9], [0, 1, 3, 7, 8], [0, 1, 3, 7, 8, 9], [0, 1, 3, 6], [0, 1, 3, 6, 9], [0, 1, 3, 6, 8], [0, 1, 3, 6, 8, 9], [0, 1, 3, 6, 7], [0, 1, 3, 6, 7, 9], [0, 1, 3, 6, 7, 8], [0, 1, 3, 6, 7, 8, 9], [0, 1, 3, 5], [0, 1, 3, 5, 9], [0, 1, 3, 5, 8], [0, 1, 3, 5, 8, 9], [0, 1, 3, 5, 7], [0, 1, 3, 5, 7, 9], [0, 1, 3, 5, 7, 8], [0, 1, 3, 5, 7, 8, 9], [0, 1, 3, 5, 6], [0, 1, 3, 5, 6, 9], [0, 1, 3, 5, 6, 8], [0, 1, 3, 5, 6, 8, 9], [0, 1, 3, 5, 6, 7], [0, 1, 3, 5, 6, 7, 9], [0, 1, 3, 5, 6, 7, 8], [0, 1, 3, 5, 6, 7, 8, 9], [0, 1, 3, 4], [0, 1, 3, 4, 9], [0, 1, 3, 4, 8], [0, 1, 3, 4, 8, 9], [0, 1, 3, 4, 7], [0, 1, 3, 4, 7, 9], [0, 1, 3, 4, 7, 8], [0, 1, 3, 4, 7, 8, 9], [0, 1, 3, 4, 6], [0, 1, 3, 4, 6, 9], [0, 1, 3, 4, 6, 8], [0, 1, 3, 4, 6, 8, 9], [0, 1, 3, 4, 6, 7], [0, 1, 3, 4, 6, 7, 9], [0, 1, 3, 4, 6, 7, 8], [0, 1, 3, 4, 6, 7, 8, 9], [0, 1, 3, 4, 5], [0, 1, 3, 4, 5, 9], [0, 1, 3, 4, 5, 8], [0, 1, 3, 4, 5, 8, 9], [0, 1, 3, 4, 5, 7], [0, 1, 3, 4, 5, 7, 9], [0, 1, 3, 4, 5, 7, 8], [0, 1, 3, 4, 5, 7, 8, 9], [0, 1, 3, 4, 5, 6], [0, 1, 3, 4, 5, 6, 9], [0, 1, 3, 4, 5, 6, 8], [0, 1, 3, 4, 5, 6, 8, 9], [0, 1, 3, 4, 5, 6, 7], [0, 1, 3, 4, 5, 6, 7, 9], [0, 1, 3, 4, 5, 6, 7, 8], [0, 1, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2], [0, 1, 2, 9], [0, 1, 2, 8], [0, 1, 2, 8, 9], [0, 1, 2, 7], [0, 1, 2, 7, 9], [0, 1, 2, 7, 8], [0, 1, 2, 7, 8, 9], [0, 1, 2, 6], [0, 1, 2, 6, 9], [0, 1, 2, 6, 8], [0, 1, 2, 6, 8, 9], [0, 1, 2, 6, 7], [0, 1, 2, 6, 7, 9], [0, 1, 2, 6, 7, 8], [0, 1, 2, 6, 7, 8, 9], [0, 1, 2, 5], [0, 1, 2, 5, 9], [0, 1, 2, 5, 8], [0, 1, 2, 5, 8, 9], [0, 1, 2, 5, 7], [0, 1, 2, 5, 7, 9], [0, 1, 2, 5, 7, 8], [0, 1, 2, 5, 7, 8, 9], [0, 1, 2, 5, 6], [0, 1, 2, 5, 6, 9], [0, 1, 2, 5, 6, 8], [0, 1, 2, 5, 6, 8, 9], [0, 1, 2, 5, 6, 7], [0, 1, 2, 5, 6, 7, 9], [0, 1, 2, 5, 6, 7, 8], [0, 1, 2, 5, 6, 7, 8, 9], [0, 1, 2, 4], [0, 1, 2, 4, 9], [0, 1, 2, 4, 8], [0, 1, 2, 4, 8, 9], [0, 1, 2, 4, 7], [0, 1, 2, 4, 7, 9], [0, 1, 2, 4, 7, 8], [0, 1, 2, 4, 7, 8, 9], [0, 1, 2, 4, 6], [0, 1, 2, 4, 6, 9], [0, 1, 2, 4, 6, 8], [0, 1, 2, 4, 6, 8, 9], [0, 1, 2, 4, 6, 7], [0, 1, 2, 4, 6, 7, 9], [0, 1, 2, 4, 6, 7, 8], [0, 1, 2, 4, 6, 7, 8, 9], [0, 1, 2, 4, 5], [0, 1, 2, 4, 5, 9], [0, 1, 2, 4, 5, 8], [0, 1, 2, 4, 5, 8, 9], [0, 1, 2, 4, 5, 7], [0, 1, 2, 4, 5, 7, 9], [0, 1, 2, 4, 5, 7, 8], [0, 1, 2, 4, 5, 7, 8, 9], [0, 1, 2, 4, 5, 6], [0, 1, 2, 4, 5, 6, 9], [0, 1, 2, 4, 5, 6, 8], [0, 1, 2, 4, 5, 6, 8, 9], [0, 1, 2, 4, 5, 6, 7], [0, 1, 2, 4, 5, 6, 7, 9], [0, 1, 2, 4, 5, 6, 7, 8], [0, 1, 2, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3], [0, 1, 2, 3, 9], [0, 1, 2, 3, 8], [0, 1, 2, 3, 8, 9], [0, 1, 2, 3, 7], [0, 1, 2, 3, 7, 9], [0, 1, 2, 3, 7, 8], [0, 1, 2, 3, 7, 8, 9], [0, 1, 2, 3, 6], [0, 1, 2, 3, 6, 9], [0, 1, 2, 3, 6, 8], [0, 1, 2, 3, 6, 8, 9], [0, 1, 2, 3, 6, 7], [0, 1, 2, 3, 6, 7, 9], [0, 1, 2, 3, 6, 7, 8], [0, 1, 2, 3, 6, 7, 8, 9], [0, 1, 2, 3, 5], [0, 1, 2, 3, 5, 9], [0, 1, 2, 3, 5, 8], [0, 1, 2, 3, 5, 8, 9], [0, 1, 2, 3, 5, 7], [0, 1, 2, 3, 5, 7, 9], [0, 1, 2, 3, 5, 7, 8], [0, 1, 2, 3, 5, 7, 8, 9], [0, 1, 2, 3, 5, 6], [0, 1, 2, 3, 5, 6, 9], [0, 1, 2, 3, 5, 6, 8], [0, 1, 2, 3, 5, 6, 8, 9], [0, 1, 2, 3, 5, 6, 7], [0, 1, 2, 3, 5, 6, 7, 9], [0, 1, 2, 3, 5, 6, 7, 8], [0, 1, 2, 3, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 9], [0, 1, 2, 3, 4, 8], [0, 1, 2, 3, 4, 8, 9], [0, 1, 2, 3, 4, 7], [0, 1, 2, 3, 4, 7, 9], [0, 1, 2, 3, 4, 7, 8], [0, 1, 2, 3, 4, 7, 8, 9], [0, 1, 2, 3, 4, 6], [0, 1, 2, 3, 4, 6, 9], [0, 1, 2, 3, 4, 6, 8], [0, 1, 2, 3, 4, 6, 8, 9], [0, 1, 2, 3, 4, 6, 7], [0, 1, 2, 3, 4, 6, 7, 9], [0, 1, 2, 3, 4, 6, 7, 8], [0, 1, 2, 3, 4, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 9], [0, 1, 2, 3, 4, 5, 8], [0, 1, 2, 3, 4, 5, 8, 9], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7, 9], [0, 1, 2, 3, 4, 5, 7, 8], [0, 1, 2, 3, 4, 5, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 9], [0, 1, 2, 3, 4, 5, 6, 8], [0, 1, 2, 3, 4, 5, 6, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6, 7, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50]",
        "output": "[[], [50], [45], [45, 50], [40], [40, 50], [40, 45], [40, 45, 50], [35], [35, 50], [35, 45], [35, 45, 50], [35, 40], [35, 40, 50], [35, 40, 45], [35, 40, 45, 50], [30], [30, 50], [30, 45], [30, 45, 50], [30, 40], [30, 40, 50], [30, 40, 45], [30, 40, 45, 50], [30, 35], [30, 35, 50], [30, 35, 45], [30, 35, 45, 50], [30, 35, 40], [30, 35, 40, 50], [30, 35, 40, 45], [30, 35, 40, 45, 50], [25], [25, 50], [25, 45], [25, 45, 50], [25, 40], [25, 40, 50], [25, 40, 45], [25, 40, 45, 50], [25, 35], [25, 35, 50], [25, 35, 45], [25, 35, 45, 50], [25, 35, 40], [25, 35, 40, 50], [25, 35, 40, 45], [25, 35, 40, 45, 50], [25, 30], [25, 30, 50], [25, 30, 45], [25, 30, 45, 50], [25, 30, 40], [25, 30, 40, 50], [25, 30, 40, 45], [25, 30, 40, 45, 50], [25, 30, 35], [25, 30, 35, 50], [25, 30, 35, 45], [25, 30, 35, 45, 50], [25, 30, 35, 40], [25, 30, 35, 40, 50], [25, 30, 35, 40, 45], [25, 30, 35, 40, 45, 50], [20], [20, 50], [20, 45], [20, 45, 50], [20, 40], [20, 40, 50], [20, 40, 45], [20, 40, 45, 50], [20, 35], [20, 35, 50], [20, 35, 45], [20, 35, 45, 50], [20, 35, 40], [20, 35, 40, 50], [20, 35, 40, 45], [20, 35, 40, 45, 50], [20, 30], [20, 30, 50], [20, 30, 45], [20, 30, 45, 50], [20, 30, 40], [20, 30, 40, 50], [20, 30, 40, 45], [20, 30, 40, 45, 50], [20, 30, 35], [20, 30, 35, 50], [20, 30, 35, 45], [20, 30, 35, 45, 50], [20, 30, 35, 40], [20, 30, 35, 40, 50], [20, 30, 35, 40, 45], [20, 30, 35, 40, 45, 50], [20, 25], [20, 25, 50], [20, 25, 45], [20, 25, 45, 50], [20, 25, 40], [20, 25, 40, 50], [20, 25, 40, 45], [20, 25, 40, 45, 50], [20, 25, 35], [20, 25, 35, 50], [20, 25, 35, 45], [20, 25, 35, 45, 50], [20, 25, 35, 40], [20, 25, 35, 40, 50], [20, 25, 35, 40, 45], [20, 25, 35, 40, 45, 50], [20, 25, 30], [20, 25, 30, 50], [20, 25, 30, 45], [20, 25, 30, 45, 50], [20, 25, 30, 40], [20, 25, 30, 40, 50], [20, 25, 30, 40, 45], [20, 25, 30, 40, 45, 50], [20, 25, 30, 35], [20, 25, 30, 35, 50], [20, 25, 30, 35, 45], [20, 25, 30, 35, 45, 50], [20, 25, 30, 35, 40], [20, 25, 30, 35, 40, 50], [20, 25, 30, 35, 40, 45], [20, 25, 30, 35, 40, 45, 50], [15], [15, 50], [15, 45], [15, 45, 50], [15, 40], [15, 40, 50], [15, 40, 45], [15, 40, 45, 50], [15, 35], [15, 35, 50], [15, 35, 45], [15, 35, 45, 50], [15, 35, 40], [15, 35, 40, 50], [15, 35, 40, 45], [15, 35, 40, 45, 50], [15, 30], [15, 30, 50], [15, 30, 45], [15, 30, 45, 50], [15, 30, 40], [15, 30, 40, 50], [15, 30, 40, 45], [15, 30, 40, 45, 50], [15, 30, 35], [15, 30, 35, 50], [15, 30, 35, 45], [15, 30, 35, 45, 50], [15, 30, 35, 40], [15, 30, 35, 40, 50], [15, 30, 35, 40, 45], [15, 30, 35, 40, 45, 50], [15, 25], [15, 25, 50], [15, 25, 45], [15, 25, 45, 50], [15, 25, 40], [15, 25, 40, 50], [15, 25, 40, 45], [15, 25, 40, 45, 50], [15, 25, 35], [15, 25, 35, 50], [15, 25, 35, 45], [15, 25, 35, 45, 50], [15, 25, 35, 40], [15, 25, 35, 40, 50], [15, 25, 35, 40, 45], [15, 25, 35, 40, 45, 50], [15, 25, 30], [15, 25, 30, 50], [15, 25, 30, 45], [15, 25, 30, 45, 50], [15, 25, 30, 40], [15, 25, 30, 40, 50], [15, 25, 30, 40, 45], [15, 25, 30, 40, 45, 50], [15, 25, 30, 35], [15, 25, 30, 35, 50], [15, 25, 30, 35, 45], [15, 25, 30, 35, 45, 50], [15, 25, 30, 35, 40], [15, 25, 30, 35, 40, 50], [15, 25, 30, 35, 40, 45], [15, 25, 30, 35, 40, 45, 50], [15, 20], [15, 20, 50], [15, 20, 45], [15, 20, 45, 50], [15, 20, 40], [15, 20, 40, 50], [15, 20, 40, 45], [15, 20, 40, 45, 50], [15, 20, 35], [15, 20, 35, 50], [15, 20, 35, 45], [15, 20, 35, 45, 50], [15, 20, 35, 40], [15, 20, 35, 40, 50], [15, 20, 35, 40, 45], [15, 20, 35, 40, 45, 50], [15, 20, 30], [15, 20, 30, 50], [15, 20, 30, 45], [15, 20, 30, 45, 50], [15, 20, 30, 40], [15, 20, 30, 40, 50], [15, 20, 30, 40, 45], [15, 20, 30, 40, 45, 50], [15, 20, 30, 35], [15, 20, 30, 35, 50], [15, 20, 30, 35, 45], [15, 20, 30, 35, 45, 50], [15, 20, 30, 35, 40], [15, 20, 30, 35, 40, 50], [15, 20, 30, 35, 40, 45], [15, 20, 30, 35, 40, 45, 50], [15, 20, 25], [15, 20, 25, 50], [15, 20, 25, 45], [15, 20, 25, 45, 50], [15, 20, 25, 40], [15, 20, 25, 40, 50], [15, 20, 25, 40, 45], [15, 20, 25, 40, 45, 50], [15, 20, 25, 35], [15, 20, 25, 35, 50], [15, 20, 25, 35, 45], [15, 20, 25, 35, 45, 50], [15, 20, 25, 35, 40], [15, 20, 25, 35, 40, 50], [15, 20, 25, 35, 40, 45], [15, 20, 25, 35, 40, 45, 50], [15, 20, 25, 30], [15, 20, 25, 30, 50], [15, 20, 25, 30, 45], [15, 20, 25, 30, 45, 50], [15, 20, 25, 30, 40], [15, 20, 25, 30, 40, 50], [15, 20, 25, 30, 40, 45], [15, 20, 25, 30, 40, 45, 50], [15, 20, 25, 30, 35], [15, 20, 25, 30, 35, 50], [15, 20, 25, 30, 35, 45], [15, 20, 25, 30, 35, 45, 50], [15, 20, 25, 30, 35, 40], [15, 20, 25, 30, 35, 40, 50], [15, 20, 25, 30, 35, 40, 45], [15, 20, 25, 30, 35, 40, 45, 50], [10], [10, 50], [10, 45], [10, 45, 50], [10, 40], [10, 40, 50], [10, 40, 45], [10, 40, 45, 50], [10, 35], [10, 35, 50], [10, 35, 45], [10, 35, 45, 50], [10, 35, 40], [10, 35, 40, 50], [10, 35, 40, 45], [10, 35, 40, 45, 50], [10, 30], [10, 30, 50], [10, 30, 45], [10, 30, 45, 50], [10, 30, 40], [10, 30, 40, 50], [10, 30, 40, 45], [10, 30, 40, 45, 50], [10, 30, 35], [10, 30, 35, 50], [10, 30, 35, 45], [10, 30, 35, 45, 50], [10, 30, 35, 40], [10, 30, 35, 40, 50], [10, 30, 35, 40, 45], [10, 30, 35, 40, 45, 50], [10, 25], [10, 25, 50], [10, 25, 45], [10, 25, 45, 50], [10, 25, 40], [10, 25, 40, 50], [10, 25, 40, 45], [10, 25, 40, 45, 50], [10, 25, 35], [10, 25, 35, 50], [10, 25, 35, 45], [10, 25, 35, 45, 50], [10, 25, 35, 40], [10, 25, 35, 40, 50], [10, 25, 35, 40, 45], [10, 25, 35, 40, 45, 50], [10, 25, 30], [10, 25, 30, 50], [10, 25, 30, 45], [10, 25, 30, 45, 50], [10, 25, 30, 40], [10, 25, 30, 40, 50], [10, 25, 30, 40, 45], [10, 25, 30, 40, 45, 50], [10, 25, 30, 35], [10, 25, 30, 35, 50], [10, 25, 30, 35, 45], [10, 25, 30, 35, 45, 50], [10, 25, 30, 35, 40], [10, 25, 30, 35, 40, 50], [10, 25, 30, 35, 40, 45], [10, 25, 30, 35, 40, 45, 50], [10, 20], [10, 20, 50], [10, 20, 45], [10, 20, 45, 50], [10, 20, 40], [10, 20, 40, 50], [10, 20, 40, 45], [10, 20, 40, 45, 50], [10, 20, 35], [10, 20, 35, 50], [10, 20, 35, 45], [10, 20, 35, 45, 50], [10, 20, 35, 40], [10, 20, 35, 40, 50], [10, 20, 35, 40, 45], [10, 20, 35, 40, 45, 50], [10, 20, 30], [10, 20, 30, 50], [10, 20, 30, 45], [10, 20, 30, 45, 50], [10, 20, 30, 40], [10, 20, 30, 40, 50], [10, 20, 30, 40, 45], [10, 20, 30, 40, 45, 50], [10, 20, 30, 35], [10, 20, 30, 35, 50], [10, 20, 30, 35, 45], [10, 20, 30, 35, 45, 50], [10, 20, 30, 35, 40], [10, 20, 30, 35, 40, 50], [10, 20, 30, 35, 40, 45], [10, 20, 30, 35, 40, 45, 50], [10, 20, 25], [10, 20, 25, 50], [10, 20, 25, 45], [10, 20, 25, 45, 50], [10, 20, 25, 40], [10, 20, 25, 40, 50], [10, 20, 25, 40, 45], [10, 20, 25, 40, 45, 50], [10, 20, 25, 35], [10, 20, 25, 35, 50], [10, 20, 25, 35, 45], [10, 20, 25, 35, 45, 50], [10, 20, 25, 35, 40], [10, 20, 25, 35, 40, 50], [10, 20, 25, 35, 40, 45], [10, 20, 25, 35, 40, 45, 50], [10, 20, 25, 30], [10, 20, 25, 30, 50], [10, 20, 25, 30, 45], [10, 20, 25, 30, 45, 50], [10, 20, 25, 30, 40], [10, 20, 25, 30, 40, 50], [10, 20, 25, 30, 40, 45], [10, 20, 25, 30, 40, 45, 50], [10, 20, 25, 30, 35], [10, 20, 25, 30, 35, 50], [10, 20, 25, 30, 35, 45], [10, 20, 25, 30, 35, 45, 50], [10, 20, 25, 30, 35, 40], [10, 20, 25, 30, 35, 40, 50], [10, 20, 25, 30, 35, 40, 45], [10, 20, 25, 30, 35, 40, 45, 50], [10, 15], [10, 15, 50], [10, 15, 45], [10, 15, 45, 50], [10, 15, 40], [10, 15, 40, 50], [10, 15, 40, 45], [10, 15, 40, 45, 50], [10, 15, 35], [10, 15, 35, 50], [10, 15, 35, 45], [10, 15, 35, 45, 50], [10, 15, 35, 40], [10, 15, 35, 40, 50], [10, 15, 35, 40, 45], [10, 15, 35, 40, 45, 50], [10, 15, 30], [10, 15, 30, 50], [10, 15, 30, 45], [10, 15, 30, 45, 50], [10, 15, 30, 40], [10, 15, 30, 40, 50], [10, 15, 30, 40, 45], [10, 15, 30, 40, 45, 50], [10, 15, 30, 35], [10, 15, 30, 35, 50], [10, 15, 30, 35, 45], [10, 15, 30, 35, 45, 50], [10, 15, 30, 35, 40], [10, 15, 30, 35, 40, 50], [10, 15, 30, 35, 40, 45], [10, 15, 30, 35, 40, 45, 50], [10, 15, 25], [10, 15, 25, 50], [10, 15, 25, 45], [10, 15, 25, 45, 50], [10, 15, 25, 40], [10, 15, 25, 40, 50], [10, 15, 25, 40, 45], [10, 15, 25, 40, 45, 50], [10, 15, 25, 35], [10, 15, 25, 35, 50], [10, 15, 25, 35, 45], [10, 15, 25, 35, 45, 50], [10, 15, 25, 35, 40], [10, 15, 25, 35, 40, 50], [10, 15, 25, 35, 40, 45], [10, 15, 25, 35, 40, 45, 50], [10, 15, 25, 30], [10, 15, 25, 30, 50], [10, 15, 25, 30, 45], [10, 15, 25, 30, 45, 50], [10, 15, 25, 30, 40], [10, 15, 25, 30, 40, 50], [10, 15, 25, 30, 40, 45], [10, 15, 25, 30, 40, 45, 50], [10, 15, 25, 30, 35], [10, 15, 25, 30, 35, 50], [10, 15, 25, 30, 35, 45], [10, 15, 25, 30, 35, 45, 50], [10, 15, 25, 30, 35, 40], [10, 15, 25, 30, 35, 40, 50], [10, 15, 25, 30, 35, 40, 45], [10, 15, 25, 30, 35, 40, 45, 50], [10, 15, 20], [10, 15, 20, 50], [10, 15, 20, 45], [10, 15, 20, 45, 50], [10, 15, 20, 40], [10, 15, 20, 40, 50], [10, 15, 20, 40, 45], [10, 15, 20, 40, 45, 50], [10, 15, 20, 35], [10, 15, 20, 35, 50], [10, 15, 20, 35, 45], [10, 15, 20, 35, 45, 50], [10, 15, 20, 35, 40], [10, 15, 20, 35, 40, 50], [10, 15, 20, 35, 40, 45], [10, 15, 20, 35, 40, 45, 50], [10, 15, 20, 30], [10, 15, 20, 30, 50], [10, 15, 20, 30, 45], [10, 15, 20, 30, 45, 50], [10, 15, 20, 30, 40], [10, 15, 20, 30, 40, 50], [10, 15, 20, 30, 40, 45], [10, 15, 20, 30, 40, 45, 50], [10, 15, 20, 30, 35], [10, 15, 20, 30, 35, 50], [10, 15, 20, 30, 35, 45], [10, 15, 20, 30, 35, 45, 50], [10, 15, 20, 30, 35, 40], [10, 15, 20, 30, 35, 40, 50], [10, 15, 20, 30, 35, 40, 45], [10, 15, 20, 30, 35, 40, 45, 50], [10, 15, 20, 25], [10, 15, 20, 25, 50], [10, 15, 20, 25, 45], [10, 15, 20, 25, 45, 50], [10, 15, 20, 25, 40], [10, 15, 20, 25, 40, 50], [10, 15, 20, 25, 40, 45], [10, 15, 20, 25, 40, 45, 50], [10, 15, 20, 25, 35], [10, 15, 20, 25, 35, 50], [10, 15, 20, 25, 35, 45], [10, 15, 20, 25, 35, 45, 50], [10, 15, 20, 25, 35, 40], [10, 15, 20, 25, 35, 40, 50], [10, 15, 20, 25, 35, 40, 45], [10, 15, 20, 25, 35, 40, 45, 50], [10, 15, 20, 25, 30], [10, 15, 20, 25, 30, 50], [10, 15, 20, 25, 30, 45], [10, 15, 20, 25, 30, 45, 50], [10, 15, 20, 25, 30, 40], [10, 15, 20, 25, 30, 40, 50], [10, 15, 20, 25, 30, 40, 45], [10, 15, 20, 25, 30, 40, 45, 50], [10, 15, 20, 25, 30, 35], [10, 15, 20, 25, 30, 35, 50], [10, 15, 20, 25, 30, 35, 45], [10, 15, 20, 25, 30, 35, 45, 50], [10, 15, 20, 25, 30, 35, 40], [10, 15, 20, 25, 30, 35, 40, 50], [10, 15, 20, 25, 30, 35, 40, 45], [10, 15, 20, 25, 30, 35, 40, 45, 50], [5], [5, 50], [5, 45], [5, 45, 50], [5, 40], [5, 40, 50], [5, 40, 45], [5, 40, 45, 50], [5, 35], [5, 35, 50], [5, 35, 45], [5, 35, 45, 50], [5, 35, 40], [5, 35, 40, 50], [5, 35, 40, 45], [5, 35, 40, 45, 50], [5, 30], [5, 30, 50], [5, 30, 45], [5, 30, 45, 50], [5, 30, 40], [5, 30, 40, 50], [5, 30, 40, 45], [5, 30, 40, 45, 50], [5, 30, 35], [5, 30, 35, 50], [5, 30, 35, 45], [5, 30, 35, 45, 50], [5, 30, 35, 40], [5, 30, 35, 40, 50], [5, 30, 35, 40, 45], [5, 30, 35, 40, 45, 50], [5, 25], [5, 25, 50], [5, 25, 45], [5, 25, 45, 50], [5, 25, 40], [5, 25, 40, 50], [5, 25, 40, 45], [5, 25, 40, 45, 50], [5, 25, 35], [5, 25, 35, 50], [5, 25, 35, 45], [5, 25, 35, 45, 50], [5, 25, 35, 40], [5, 25, 35, 40, 50], [5, 25, 35, 40, 45], [5, 25, 35, 40, 45, 50], [5, 25, 30], [5, 25, 30, 50], [5, 25, 30, 45], [5, 25, 30, 45, 50], [5, 25, 30, 40], [5, 25, 30, 40, 50], [5, 25, 30, 40, 45], [5, 25, 30, 40, 45, 50], [5, 25, 30, 35], [5, 25, 30, 35, 50], [5, 25, 30, 35, 45], [5, 25, 30, 35, 45, 50], [5, 25, 30, 35, 40], [5, 25, 30, 35, 40, 50], [5, 25, 30, 35, 40, 45], [5, 25, 30, 35, 40, 45, 50], [5, 20], [5, 20, 50], [5, 20, 45], [5, 20, 45, 50], [5, 20, 40], [5, 20, 40, 50], [5, 20, 40, 45], [5, 20, 40, 45, 50], [5, 20, 35], [5, 20, 35, 50], [5, 20, 35, 45], [5, 20, 35, 45, 50], [5, 20, 35, 40], [5, 20, 35, 40, 50], [5, 20, 35, 40, 45], [5, 20, 35, 40, 45, 50], [5, 20, 30], [5, 20, 30, 50], [5, 20, 30, 45], [5, 20, 30, 45, 50], [5, 20, 30, 40], [5, 20, 30, 40, 50], [5, 20, 30, 40, 45], [5, 20, 30, 40, 45, 50], [5, 20, 30, 35], [5, 20, 30, 35, 50], [5, 20, 30, 35, 45], [5, 20, 30, 35, 45, 50], [5, 20, 30, 35, 40], [5, 20, 30, 35, 40, 50], [5, 20, 30, 35, 40, 45], [5, 20, 30, 35, 40, 45, 50], [5, 20, 25], [5, 20, 25, 50], [5, 20, 25, 45], [5, 20, 25, 45, 50], [5, 20, 25, 40], [5, 20, 25, 40, 50], [5, 20, 25, 40, 45], [5, 20, 25, 40, 45, 50], [5, 20, 25, 35], [5, 20, 25, 35, 50], [5, 20, 25, 35, 45], [5, 20, 25, 35, 45, 50], [5, 20, 25, 35, 40], [5, 20, 25, 35, 40, 50], [5, 20, 25, 35, 40, 45], [5, 20, 25, 35, 40, 45, 50], [5, 20, 25, 30], [5, 20, 25, 30, 50], [5, 20, 25, 30, 45], [5, 20, 25, 30, 45, 50], [5, 20, 25, 30, 40], [5, 20, 25, 30, 40, 50], [5, 20, 25, 30, 40, 45], [5, 20, 25, 30, 40, 45, 50], [5, 20, 25, 30, 35], [5, 20, 25, 30, 35, 50], [5, 20, 25, 30, 35, 45], [5, 20, 25, 30, 35, 45, 50], [5, 20, 25, 30, 35, 40], [5, 20, 25, 30, 35, 40, 50], [5, 20, 25, 30, 35, 40, 45], [5, 20, 25, 30, 35, 40, 45, 50], [5, 15], [5, 15, 50], [5, 15, 45], [5, 15, 45, 50], [5, 15, 40], [5, 15, 40, 50], [5, 15, 40, 45], [5, 15, 40, 45, 50], [5, 15, 35], [5, 15, 35, 50], [5, 15, 35, 45], [5, 15, 35, 45, 50], [5, 15, 35, 40], [5, 15, 35, 40, 50], [5, 15, 35, 40, 45], [5, 15, 35, 40, 45, 50], [5, 15, 30], [5, 15, 30, 50], [5, 15, 30, 45], [5, 15, 30, 45, 50], [5, 15, 30, 40], [5, 15, 30, 40, 50], [5, 15, 30, 40, 45], [5, 15, 30, 40, 45, 50], [5, 15, 30, 35], [5, 15, 30, 35, 50], [5, 15, 30, 35, 45], [5, 15, 30, 35, 45, 50], [5, 15, 30, 35, 40], [5, 15, 30, 35, 40, 50], [5, 15, 30, 35, 40, 45], [5, 15, 30, 35, 40, 45, 50], [5, 15, 25], [5, 15, 25, 50], [5, 15, 25, 45], [5, 15, 25, 45, 50], [5, 15, 25, 40], [5, 15, 25, 40, 50], [5, 15, 25, 40, 45], [5, 15, 25, 40, 45, 50], [5, 15, 25, 35], [5, 15, 25, 35, 50], [5, 15, 25, 35, 45], [5, 15, 25, 35, 45, 50], [5, 15, 25, 35, 40], [5, 15, 25, 35, 40, 50], [5, 15, 25, 35, 40, 45], [5, 15, 25, 35, 40, 45, 50], [5, 15, 25, 30], [5, 15, 25, 30, 50], [5, 15, 25, 30, 45], [5, 15, 25, 30, 45, 50], [5, 15, 25, 30, 40], [5, 15, 25, 30, 40, 50], [5, 15, 25, 30, 40, 45], [5, 15, 25, 30, 40, 45, 50], [5, 15, 25, 30, 35], [5, 15, 25, 30, 35, 50], [5, 15, 25, 30, 35, 45], [5, 15, 25, 30, 35, 45, 50], [5, 15, 25, 30, 35, 40], [5, 15, 25, 30, 35, 40, 50], [5, 15, 25, 30, 35, 40, 45], [5, 15, 25, 30, 35, 40, 45, 50], [5, 15, 20], [5, 15, 20, 50], [5, 15, 20, 45], [5, 15, 20, 45, 50], [5, 15, 20, 40], [5, 15, 20, 40, 50], [5, 15, 20, 40, 45], [5, 15, 20, 40, 45, 50], [5, 15, 20, 35], [5, 15, 20, 35, 50], [5, 15, 20, 35, 45], [5, 15, 20, 35, 45, 50], [5, 15, 20, 35, 40], [5, 15, 20, 35, 40, 50], [5, 15, 20, 35, 40, 45], [5, 15, 20, 35, 40, 45, 50], [5, 15, 20, 30], [5, 15, 20, 30, 50], [5, 15, 20, 30, 45], [5, 15, 20, 30, 45, 50], [5, 15, 20, 30, 40], [5, 15, 20, 30, 40, 50], [5, 15, 20, 30, 40, 45], [5, 15, 20, 30, 40, 45, 50], [5, 15, 20, 30, 35], [5, 15, 20, 30, 35, 50], [5, 15, 20, 30, 35, 45], [5, 15, 20, 30, 35, 45, 50], [5, 15, 20, 30, 35, 40], [5, 15, 20, 30, 35, 40, 50], [5, 15, 20, 30, 35, 40, 45], [5, 15, 20, 30, 35, 40, 45, 50], [5, 15, 20, 25], [5, 15, 20, 25, 50], [5, 15, 20, 25, 45], [5, 15, 20, 25, 45, 50], [5, 15, 20, 25, 40], [5, 15, 20, 25, 40, 50], [5, 15, 20, 25, 40, 45], [5, 15, 20, 25, 40, 45, 50], [5, 15, 20, 25, 35], [5, 15, 20, 25, 35, 50], [5, 15, 20, 25, 35, 45], [5, 15, 20, 25, 35, 45, 50], [5, 15, 20, 25, 35, 40], [5, 15, 20, 25, 35, 40, 50], [5, 15, 20, 25, 35, 40, 45], [5, 15, 20, 25, 35, 40, 45, 50], [5, 15, 20, 25, 30], [5, 15, 20, 25, 30, 50], [5, 15, 20, 25, 30, 45], [5, 15, 20, 25, 30, 45, 50], [5, 15, 20, 25, 30, 40], [5, 15, 20, 25, 30, 40, 50], [5, 15, 20, 25, 30, 40, 45], [5, 15, 20, 25, 30, 40, 45, 50], [5, 15, 20, 25, 30, 35], [5, 15, 20, 25, 30, 35, 50], [5, 15, 20, 25, 30, 35, 45], [5, 15, 20, 25, 30, 35, 45, 50], [5, 15, 20, 25, 30, 35, 40], [5, 15, 20, 25, 30, 35, 40, 50], [5, 15, 20, 25, 30, 35, 40, 45], [5, 15, 20, 25, 30, 35, 40, 45, 50], [5, 10], [5, 10, 50], [5, 10, 45], [5, 10, 45, 50], [5, 10, 40], [5, 10, 40, 50], [5, 10, 40, 45], [5, 10, 40, 45, 50], [5, 10, 35], [5, 10, 35, 50], [5, 10, 35, 45], [5, 10, 35, 45, 50], [5, 10, 35, 40], [5, 10, 35, 40, 50], [5, 10, 35, 40, 45], [5, 10, 35, 40, 45, 50], [5, 10, 30], [5, 10, 30, 50], [5, 10, 30, 45], [5, 10, 30, 45, 50], [5, 10, 30, 40], [5, 10, 30, 40, 50], [5, 10, 30, 40, 45], [5, 10, 30, 40, 45, 50], [5, 10, 30, 35], [5, 10, 30, 35, 50], [5, 10, 30, 35, 45], [5, 10, 30, 35, 45, 50], [5, 10, 30, 35, 40], [5, 10, 30, 35, 40, 50], [5, 10, 30, 35, 40, 45], [5, 10, 30, 35, 40, 45, 50], [5, 10, 25], [5, 10, 25, 50], [5, 10, 25, 45], [5, 10, 25, 45, 50], [5, 10, 25, 40], [5, 10, 25, 40, 50], [5, 10, 25, 40, 45], [5, 10, 25, 40, 45, 50], [5, 10, 25, 35], [5, 10, 25, 35, 50], [5, 10, 25, 35, 45], [5, 10, 25, 35, 45, 50], [5, 10, 25, 35, 40], [5, 10, 25, 35, 40, 50], [5, 10, 25, 35, 40, 45], [5, 10, 25, 35, 40, 45, 50], [5, 10, 25, 30], [5, 10, 25, 30, 50], [5, 10, 25, 30, 45], [5, 10, 25, 30, 45, 50], [5, 10, 25, 30, 40], [5, 10, 25, 30, 40, 50], [5, 10, 25, 30, 40, 45], [5, 10, 25, 30, 40, 45, 50], [5, 10, 25, 30, 35], [5, 10, 25, 30, 35, 50], [5, 10, 25, 30, 35, 45], [5, 10, 25, 30, 35, 45, 50], [5, 10, 25, 30, 35, 40], [5, 10, 25, 30, 35, 40, 50], [5, 10, 25, 30, 35, 40, 45], [5, 10, 25, 30, 35, 40, 45, 50], [5, 10, 20], [5, 10, 20, 50], [5, 10, 20, 45], [5, 10, 20, 45, 50], [5, 10, 20, 40], [5, 10, 20, 40, 50], [5, 10, 20, 40, 45], [5, 10, 20, 40, 45, 50], [5, 10, 20, 35], [5, 10, 20, 35, 50], [5, 10, 20, 35, 45], [5, 10, 20, 35, 45, 50], [5, 10, 20, 35, 40], [5, 10, 20, 35, 40, 50], [5, 10, 20, 35, 40, 45], [5, 10, 20, 35, 40, 45, 50], [5, 10, 20, 30], [5, 10, 20, 30, 50], [5, 10, 20, 30, 45], [5, 10, 20, 30, 45, 50], [5, 10, 20, 30, 40], [5, 10, 20, 30, 40, 50], [5, 10, 20, 30, 40, 45], [5, 10, 20, 30, 40, 45, 50], [5, 10, 20, 30, 35], [5, 10, 20, 30, 35, 50], [5, 10, 20, 30, 35, 45], [5, 10, 20, 30, 35, 45, 50], [5, 10, 20, 30, 35, 40], [5, 10, 20, 30, 35, 40, 50], [5, 10, 20, 30, 35, 40, 45], [5, 10, 20, 30, 35, 40, 45, 50], [5, 10, 20, 25], [5, 10, 20, 25, 50], [5, 10, 20, 25, 45], [5, 10, 20, 25, 45, 50], [5, 10, 20, 25, 40], [5, 10, 20, 25, 40, 50], [5, 10, 20, 25, 40, 45], [5, 10, 20, 25, 40, 45, 50], [5, 10, 20, 25, 35], [5, 10, 20, 25, 35, 50], [5, 10, 20, 25, 35, 45], [5, 10, 20, 25, 35, 45, 50], [5, 10, 20, 25, 35, 40], [5, 10, 20, 25, 35, 40, 50], [5, 10, 20, 25, 35, 40, 45], [5, 10, 20, 25, 35, 40, 45, 50], [5, 10, 20, 25, 30], [5, 10, 20, 25, 30, 50], [5, 10, 20, 25, 30, 45], [5, 10, 20, 25, 30, 45, 50], [5, 10, 20, 25, 30, 40], [5, 10, 20, 25, 30, 40, 50], [5, 10, 20, 25, 30, 40, 45], [5, 10, 20, 25, 30, 40, 45, 50], [5, 10, 20, 25, 30, 35], [5, 10, 20, 25, 30, 35, 50], [5, 10, 20, 25, 30, 35, 45], [5, 10, 20, 25, 30, 35, 45, 50], [5, 10, 20, 25, 30, 35, 40], [5, 10, 20, 25, 30, 35, 40, 50], [5, 10, 20, 25, 30, 35, 40, 45], [5, 10, 20, 25, 30, 35, 40, 45, 50], [5, 10, 15], [5, 10, 15, 50], [5, 10, 15, 45], [5, 10, 15, 45, 50], [5, 10, 15, 40], [5, 10, 15, 40, 50], [5, 10, 15, 40, 45], [5, 10, 15, 40, 45, 50], [5, 10, 15, 35], [5, 10, 15, 35, 50], [5, 10, 15, 35, 45], [5, 10, 15, 35, 45, 50], [5, 10, 15, 35, 40], [5, 10, 15, 35, 40, 50], [5, 10, 15, 35, 40, 45], [5, 10, 15, 35, 40, 45, 50], [5, 10, 15, 30], [5, 10, 15, 30, 50], [5, 10, 15, 30, 45], [5, 10, 15, 30, 45, 50], [5, 10, 15, 30, 40], [5, 10, 15, 30, 40, 50], [5, 10, 15, 30, 40, 45], [5, 10, 15, 30, 40, 45, 50], [5, 10, 15, 30, 35], [5, 10, 15, 30, 35, 50], [5, 10, 15, 30, 35, 45], [5, 10, 15, 30, 35, 45, 50], [5, 10, 15, 30, 35, 40], [5, 10, 15, 30, 35, 40, 50], [5, 10, 15, 30, 35, 40, 45], [5, 10, 15, 30, 35, 40, 45, 50], [5, 10, 15, 25], [5, 10, 15, 25, 50], [5, 10, 15, 25, 45], [5, 10, 15, 25, 45, 50], [5, 10, 15, 25, 40], [5, 10, 15, 25, 40, 50], [5, 10, 15, 25, 40, 45], [5, 10, 15, 25, 40, 45, 50], [5, 10, 15, 25, 35], [5, 10, 15, 25, 35, 50], [5, 10, 15, 25, 35, 45], [5, 10, 15, 25, 35, 45, 50], [5, 10, 15, 25, 35, 40], [5, 10, 15, 25, 35, 40, 50], [5, 10, 15, 25, 35, 40, 45], [5, 10, 15, 25, 35, 40, 45, 50], [5, 10, 15, 25, 30], [5, 10, 15, 25, 30, 50], [5, 10, 15, 25, 30, 45], [5, 10, 15, 25, 30, 45, 50], [5, 10, 15, 25, 30, 40], [5, 10, 15, 25, 30, 40, 50], [5, 10, 15, 25, 30, 40, 45], [5, 10, 15, 25, 30, 40, 45, 50], [5, 10, 15, 25, 30, 35], [5, 10, 15, 25, 30, 35, 50], [5, 10, 15, 25, 30, 35, 45], [5, 10, 15, 25, 30, 35, 45, 50], [5, 10, 15, 25, 30, 35, 40], [5, 10, 15, 25, 30, 35, 40, 50], [5, 10, 15, 25, 30, 35, 40, 45], [5, 10, 15, 25, 30, 35, 40, 45, 50], [5, 10, 15, 20], [5, 10, 15, 20, 50], [5, 10, 15, 20, 45], [5, 10, 15, 20, 45, 50], [5, 10, 15, 20, 40], [5, 10, 15, 20, 40, 50], [5, 10, 15, 20, 40, 45], [5, 10, 15, 20, 40, 45, 50], [5, 10, 15, 20, 35], [5, 10, 15, 20, 35, 50], [5, 10, 15, 20, 35, 45], [5, 10, 15, 20, 35, 45, 50], [5, 10, 15, 20, 35, 40], [5, 10, 15, 20, 35, 40, 50], [5, 10, 15, 20, 35, 40, 45], [5, 10, 15, 20, 35, 40, 45, 50], [5, 10, 15, 20, 30], [5, 10, 15, 20, 30, 50], [5, 10, 15, 20, 30, 45], [5, 10, 15, 20, 30, 45, 50], [5, 10, 15, 20, 30, 40], [5, 10, 15, 20, 30, 40, 50], [5, 10, 15, 20, 30, 40, 45], [5, 10, 15, 20, 30, 40, 45, 50], [5, 10, 15, 20, 30, 35], [5, 10, 15, 20, 30, 35, 50], [5, 10, 15, 20, 30, 35, 45], [5, 10, 15, 20, 30, 35, 45, 50], [5, 10, 15, 20, 30, 35, 40], [5, 10, 15, 20, 30, 35, 40, 50], [5, 10, 15, 20, 30, 35, 40, 45], [5, 10, 15, 20, 30, 35, 40, 45, 50], [5, 10, 15, 20, 25], [5, 10, 15, 20, 25, 50], [5, 10, 15, 20, 25, 45], [5, 10, 15, 20, 25, 45, 50], [5, 10, 15, 20, 25, 40], [5, 10, 15, 20, 25, 40, 50], [5, 10, 15, 20, 25, 40, 45], [5, 10, 15, 20, 25, 40, 45, 50], [5, 10, 15, 20, 25, 35], [5, 10, 15, 20, 25, 35, 50], [5, 10, 15, 20, 25, 35, 45], [5, 10, 15, 20, 25, 35, 45, 50], [5, 10, 15, 20, 25, 35, 40], [5, 10, 15, 20, 25, 35, 40, 50], [5, 10, 15, 20, 25, 35, 40, 45], [5, 10, 15, 20, 25, 35, 40, 45, 50], [5, 10, 15, 20, 25, 30], [5, 10, 15, 20, 25, 30, 50], [5, 10, 15, 20, 25, 30, 45], [5, 10, 15, 20, 25, 30, 45, 50], [5, 10, 15, 20, 25, 30, 40], [5, 10, 15, 20, 25, 30, 40, 50], [5, 10, 15, 20, 25, 30, 40, 45], [5, 10, 15, 20, 25, 30, 40, 45, 50], [5, 10, 15, 20, 25, 30, 35], [5, 10, 15, 20, 25, 30, 35, 50], [5, 10, 15, 20, 25, 30, 35, 45], [5, 10, 15, 20, 25, 30, 35, 45, 50], [5, 10, 15, 20, 25, 30, 35, 40], [5, 10, 15, 20, 25, 30, 35, 40, 50], [5, 10, 15, 20, 25, 30, 35, 40, 45], [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]]"
      },
      {
        "input": "nums = [5, 1, 4, 2, 3]",
        "output": "[[], [3], [2], [2, 3], [4], [4, 3], [4, 2], [4, 2, 3], [1], [1, 3], [1, 2], [1, 2, 3], [1, 4], [1, 4, 3], [1, 4, 2], [1, 4, 2, 3], [5], [5, 3], [5, 2], [5, 2, 3], [5, 4], [5, 4, 3], [5, 4, 2], [5, 4, 2, 3], [5, 1], [5, 1, 3], [5, 1, 2], [5, 1, 2, 3], [5, 1, 4], [5, 1, 4, 3], [5, 1, 4, 2], [5, 1, 4, 2, 3]]"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3]",
        "output": "[[], [-3], [3], [3, -3], [-2], [-2, -3], [-2, 3], [-2, 3, -3], [2], [2, -3], [2, 3], [2, 3, -3], [2, -2], [2, -2, -3], [2, -2, 3], [2, -2, 3, -3], [-1], [-1, -3], [-1, 3], [-1, 3, -3], [-1, -2], [-1, -2, -3], [-1, -2, 3], [-1, -2, 3, -3], [-1, 2], [-1, 2, -3], [-1, 2, 3], [-1, 2, 3, -3], [-1, 2, -2], [-1, 2, -2, -3], [-1, 2, -2, 3], [-1, 2, -2, 3, -3], [1], [1, -3], [1, 3], [1, 3, -3], [1, -2], [1, -2, -3], [1, -2, 3], [1, -2, 3, -3], [1, 2], [1, 2, -3], [1, 2, 3], [1, 2, 3, -3], [1, 2, -2], [1, 2, -2, -3], [1, 2, -2, 3], [1, 2, -2, 3, -3], [1, -1], [1, -1, -3], [1, -1, 3], [1, -1, 3, -3], [1, -1, -2], [1, -1, -2, -3], [1, -1, -2, 3], [1, -1, -2, 3, -3], [1, -1, 2], [1, -1, 2, -3], [1, -1, 2, 3], [1, -1, 2, 3, -3], [1, -1, 2, -2], [1, -1, 2, -2, -3], [1, -1, 2, -2, 3], [1, -1, 2, -2, 3, -3]]"
      },
      {
        "input": "nums = [7, 11, 13, 17]",
        "output": "[[], [17], [13], [13, 17], [11], [11, 17], [11, 13], [11, 13, 17], [7], [7, 17], [7, 13], [7, 13, 17], [7, 11], [7, 11, 17], [7, 11, 13], [7, 11, 13, 17]]"
      },
      {
        "input": "nums = [8,6,7,5,3,0,9]",
        "output": "[[], [9], [0], [0, 9], [3], [3, 9], [3, 0], [3, 0, 9], [5], [5, 9], [5, 0], [5, 0, 9], [5, 3], [5, 3, 9], [5, 3, 0], [5, 3, 0, 9], [7], [7, 9], [7, 0], [7, 0, 9], [7, 3], [7, 3, 9], [7, 3, 0], [7, 3, 0, 9], [7, 5], [7, 5, 9], [7, 5, 0], [7, 5, 0, 9], [7, 5, 3], [7, 5, 3, 9], [7, 5, 3, 0], [7, 5, 3, 0, 9], [6], [6, 9], [6, 0], [6, 0, 9], [6, 3], [6, 3, 9], [6, 3, 0], [6, 3, 0, 9], [6, 5], [6, 5, 9], [6, 5, 0], [6, 5, 0, 9], [6, 5, 3], [6, 5, 3, 9], [6, 5, 3, 0], [6, 5, 3, 0, 9], [6, 7], [6, 7, 9], [6, 7, 0], [6, 7, 0, 9], [6, 7, 3], [6, 7, 3, 9], [6, 7, 3, 0], [6, 7, 3, 0, 9], [6, 7, 5], [6, 7, 5, 9], [6, 7, 5, 0], [6, 7, 5, 0, 9], [6, 7, 5, 3], [6, 7, 5, 3, 9], [6, 7, 5, 3, 0], [6, 7, 5, 3, 0, 9], [8], [8, 9], [8, 0], [8, 0, 9], [8, 3], [8, 3, 9], [8, 3, 0], [8, 3, 0, 9], [8, 5], [8, 5, 9], [8, 5, 0], [8, 5, 0, 9], [8, 5, 3], [8, 5, 3, 9], [8, 5, 3, 0], [8, 5, 3, 0, 9], [8, 7], [8, 7, 9], [8, 7, 0], [8, 7, 0, 9], [8, 7, 3], [8, 7, 3, 9], [8, 7, 3, 0], [8, 7, 3, 0, 9], [8, 7, 5], [8, 7, 5, 9], [8, 7, 5, 0], [8, 7, 5, 0, 9], [8, 7, 5, 3], [8, 7, 5, 3, 9], [8, 7, 5, 3, 0], [8, 7, 5, 3, 0, 9], [8, 6], [8, 6, 9], [8, 6, 0], [8, 6, 0, 9], [8, 6, 3], [8, 6, 3, 9], [8, 6, 3, 0], [8, 6, 3, 0, 9], [8, 6, 5], [8, 6, 5, 9], [8, 6, 5, 0], [8, 6, 5, 0, 9], [8, 6, 5, 3], [8, 6, 5, 3, 9], [8, 6, 5, 3, 0], [8, 6, 5, 3, 0, 9], [8, 6, 7], [8, 6, 7, 9], [8, 6, 7, 0], [8, 6, 7, 0, 9], [8, 6, 7, 3], [8, 6, 7, 3, 9], [8, 6, 7, 3, 0], [8, 6, 7, 3, 0, 9], [8, 6, 7, 5], [8, 6, 7, 5, 9], [8, 6, 7, 5, 0], [8, 6, 7, 5, 0, 9], [8, 6, 7, 5, 3], [8, 6, 7, 5, 3, 9], [8, 6, 7, 5, 3, 0], [8, 6, 7, 5, 3, 0, 9]]"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]",
        "output": "[[], [-100], [-90], [-90, -100], [-80], [-80, -100], [-80, -90], [-80, -90, -100], [-70], [-70, -100], [-70, -90], [-70, -90, -100], [-70, -80], [-70, -80, -100], [-70, -80, -90], [-70, -80, -90, -100], [-60], [-60, -100], [-60, -90], [-60, -90, -100], [-60, -80], [-60, -80, -100], [-60, -80, -90], [-60, -80, -90, -100], [-60, -70], [-60, -70, -100], [-60, -70, -90], [-60, -70, -90, -100], [-60, -70, -80], [-60, -70, -80, -100], [-60, -70, -80, -90], [-60, -70, -80, -90, -100], [-50], [-50, -100], [-50, -90], [-50, -90, -100], [-50, -80], [-50, -80, -100], [-50, -80, -90], [-50, -80, -90, -100], [-50, -70], [-50, -70, -100], [-50, -70, -90], [-50, -70, -90, -100], [-50, -70, -80], [-50, -70, -80, -100], [-50, -70, -80, -90], [-50, -70, -80, -90, -100], [-50, -60], [-50, -60, -100], [-50, -60, -90], [-50, -60, -90, -100], [-50, -60, -80], [-50, -60, -80, -100], [-50, -60, -80, -90], [-50, -60, -80, -90, -100], [-50, -60, -70], [-50, -60, -70, -100], [-50, -60, -70, -90], [-50, -60, -70, -90, -100], [-50, -60, -70, -80], [-50, -60, -70, -80, -100], [-50, -60, -70, -80, -90], [-50, -60, -70, -80, -90, -100], [-40], [-40, -100], [-40, -90], [-40, -90, -100], [-40, -80], [-40, -80, -100], [-40, -80, -90], [-40, -80, -90, -100], [-40, -70], [-40, -70, -100], [-40, -70, -90], [-40, -70, -90, -100], [-40, -70, -80], [-40, -70, -80, -100], [-40, -70, -80, -90], [-40, -70, -80, -90, -100], [-40, -60], [-40, -60, -100], [-40, -60, -90], [-40, -60, -90, -100], [-40, -60, -80], [-40, -60, -80, -100], [-40, -60, -80, -90], [-40, -60, -80, -90, -100], [-40, -60, -70], [-40, -60, -70, -100], [-40, -60, -70, -90], [-40, -60, -70, -90, -100], [-40, -60, -70, -80], [-40, -60, -70, -80, -100], [-40, -60, -70, -80, -90], [-40, -60, -70, -80, -90, -100], [-40, -50], [-40, -50, -100], [-40, -50, -90], [-40, -50, -90, -100], [-40, -50, -80], [-40, -50, -80, -100], [-40, -50, -80, -90], [-40, -50, -80, -90, -100], [-40, -50, -70], [-40, -50, -70, -100], [-40, -50, -70, -90], [-40, -50, -70, -90, -100], [-40, -50, -70, -80], [-40, -50, -70, -80, -100], [-40, -50, -70, -80, -90], [-40, -50, -70, -80, -90, -100], [-40, -50, -60], [-40, -50, -60, -100], [-40, -50, -60, -90], [-40, -50, -60, -90, -100], [-40, -50, -60, -80], [-40, -50, -60, -80, -100], [-40, -50, -60, -80, -90], [-40, -50, -60, -80, -90, -100], [-40, -50, -60, -70], [-40, -50, -60, -70, -100], [-40, -50, -60, -70, -90], [-40, -50, -60, -70, -90, -100], [-40, -50, -60, -70, -80], [-40, -50, -60, -70, -80, -100], [-40, -50, -60, -70, -80, -90], [-40, -50, -60, -70, -80, -90, -100], [-30], [-30, -100], [-30, -90], [-30, -90, -100], [-30, -80], [-30, -80, -100], [-30, -80, -90], [-30, -80, -90, -100], [-30, -70], [-30, -70, -100], [-30, -70, -90], [-30, -70, -90, -100], [-30, -70, -80], [-30, -70, -80, -100], [-30, -70, -80, -90], [-30, -70, -80, -90, -100], [-30, -60], [-30, -60, -100], [-30, -60, -90], [-30, -60, -90, -100], [-30, -60, -80], [-30, -60, -80, -100], [-30, -60, -80, -90], [-30, -60, -80, -90, -100], [-30, -60, -70], [-30, -60, -70, -100], [-30, -60, -70, -90], [-30, -60, -70, -90, -100], [-30, -60, -70, -80], [-30, -60, -70, -80, -100], [-30, -60, -70, -80, -90], [-30, -60, -70, -80, -90, -100], [-30, -50], [-30, -50, -100], [-30, -50, -90], [-30, -50, -90, -100], [-30, -50, -80], [-30, -50, -80, -100], [-30, -50, -80, -90], [-30, -50, -80, -90, -100], [-30, -50, -70], [-30, -50, -70, -100], [-30, -50, -70, -90], [-30, -50, -70, -90, -100], [-30, -50, -70, -80], [-30, -50, -70, -80, -100], [-30, -50, -70, -80, -90], [-30, -50, -70, -80, -90, -100], [-30, -50, -60], [-30, -50, -60, -100], [-30, -50, -60, -90], [-30, -50, -60, -90, -100], [-30, -50, -60, -80], [-30, -50, -60, -80, -100], [-30, -50, -60, -80, -90], [-30, -50, -60, -80, -90, -100], [-30, -50, -60, -70], [-30, -50, -60, -70, -100], [-30, -50, -60, -70, -90], [-30, -50, -60, -70, -90, -100], [-30, -50, -60, -70, -80], [-30, -50, -60, -70, -80, -100], [-30, -50, -60, -70, -80, -90], [-30, -50, -60, -70, -80, -90, -100], [-30, -40], [-30, -40, -100], [-30, -40, -90], [-30, -40, -90, -100], [-30, -40, -80], [-30, -40, -80, -100], [-30, -40, -80, -90], [-30, -40, -80, -90, -100], [-30, -40, -70], [-30, -40, -70, -100], [-30, -40, -70, -90], [-30, -40, -70, -90, -100], [-30, -40, -70, -80], [-30, -40, -70, -80, -100], [-30, -40, -70, -80, -90], [-30, -40, -70, -80, -90, -100], [-30, -40, -60], [-30, -40, -60, -100], [-30, -40, -60, -90], [-30, -40, -60, -90, -100], [-30, -40, -60, -80], [-30, -40, -60, -80, -100], [-30, -40, -60, -80, -90], [-30, -40, -60, -80, -90, -100], [-30, -40, -60, -70], [-30, -40, -60, -70, -100], [-30, -40, -60, -70, -90], [-30, -40, -60, -70, -90, -100], [-30, -40, -60, -70, -80], [-30, -40, -60, -70, -80, -100], [-30, -40, -60, -70, -80, -90], [-30, -40, -60, -70, -80, -90, -100], [-30, -40, -50], [-30, -40, -50, -100], [-30, -40, -50, -90], [-30, -40, -50, -90, -100], [-30, -40, -50, -80], [-30, -40, -50, -80, -100], [-30, -40, -50, -80, -90], [-30, -40, -50, -80, -90, -100], [-30, -40, -50, -70], [-30, -40, -50, -70, -100], [-30, -40, -50, -70, -90], [-30, -40, -50, -70, -90, -100], [-30, -40, -50, -70, -80], [-30, -40, -50, -70, -80, -100], [-30, -40, -50, -70, -80, -90], [-30, -40, -50, -70, -80, -90, -100], [-30, -40, -50, -60], [-30, -40, -50, -60, -100], [-30, -40, -50, -60, -90], [-30, -40, -50, -60, -90, -100], [-30, -40, -50, -60, -80], [-30, -40, -50, -60, -80, -100], [-30, -40, -50, -60, -80, -90], [-30, -40, -50, -60, -80, -90, -100], [-30, -40, -50, -60, -70], [-30, -40, -50, -60, -70, -100], [-30, -40, -50, -60, -70, -90], [-30, -40, -50, -60, -70, -90, -100], [-30, -40, -50, -60, -70, -80], [-30, -40, -50, -60, -70, -80, -100], [-30, -40, -50, -60, -70, -80, -90], [-30, -40, -50, -60, -70, -80, -90, -100], [-20], [-20, -100], [-20, -90], [-20, -90, -100], [-20, -80], [-20, -80, -100], [-20, -80, -90], [-20, -80, -90, -100], [-20, -70], [-20, -70, -100], [-20, -70, -90], [-20, -70, -90, -100], [-20, -70, -80], [-20, -70, -80, -100], [-20, -70, -80, -90], [-20, -70, -80, -90, -100], [-20, -60], [-20, -60, -100], [-20, -60, -90], [-20, -60, -90, -100], [-20, -60, -80], [-20, -60, -80, -100], [-20, -60, -80, -90], [-20, -60, -80, -90, -100], [-20, -60, -70], [-20, -60, -70, -100], [-20, -60, -70, -90], [-20, -60, -70, -90, -100], [-20, -60, -70, -80], [-20, -60, -70, -80, -100], [-20, -60, -70, -80, -90], [-20, -60, -70, -80, -90, -100], [-20, -50], [-20, -50, -100], [-20, -50, -90], [-20, -50, -90, -100], [-20, -50, -80], [-20, -50, -80, -100], [-20, -50, -80, -90], [-20, -50, -80, -90, -100], [-20, -50, -70], [-20, -50, -70, -100], [-20, -50, -70, -90], [-20, -50, -70, -90, -100], [-20, -50, -70, -80], [-20, -50, -70, -80, -100], [-20, -50, -70, -80, -90], [-20, -50, -70, -80, -90, -100], [-20, -50, -60], [-20, -50, -60, -100], [-20, -50, -60, -90], [-20, -50, -60, -90, -100], [-20, -50, -60, -80], [-20, -50, -60, -80, -100], [-20, -50, -60, -80, -90], [-20, -50, -60, -80, -90, -100], [-20, -50, -60, -70], [-20, -50, -60, -70, -100], [-20, -50, -60, -70, -90], [-20, -50, -60, -70, -90, -100], [-20, -50, -60, -70, -80], [-20, -50, -60, -70, -80, -100], [-20, -50, -60, -70, -80, -90], [-20, -50, -60, -70, -80, -90, -100], [-20, -40], [-20, -40, -100], [-20, -40, -90], [-20, -40, -90, -100], [-20, -40, -80], [-20, -40, -80, -100], [-20, -40, -80, -90], [-20, -40, -80, -90, -100], [-20, -40, -70], [-20, -40, -70, -100], [-20, -40, -70, -90], [-20, -40, -70, -90, -100], [-20, -40, -70, -80], [-20, -40, -70, -80, -100], [-20, -40, -70, -80, -90], [-20, -40, -70, -80, -90, -100], [-20, -40, -60], [-20, -40, -60, -100], [-20, -40, -60, -90], [-20, -40, -60, -90, -100], [-20, -40, -60, -80], [-20, -40, -60, -80, -100], [-20, -40, -60, -80, -90], [-20, -40, -60, -80, -90, -100], [-20, -40, -60, -70], [-20, -40, -60, -70, -100], [-20, -40, -60, -70, -90], [-20, -40, -60, -70, -90, -100], [-20, -40, -60, -70, -80], [-20, -40, -60, -70, -80, -100], [-20, -40, -60, -70, -80, -90], [-20, -40, -60, -70, -80, -90, -100], [-20, -40, -50], [-20, -40, -50, -100], [-20, -40, -50, -90], [-20, -40, -50, -90, -100], [-20, -40, -50, -80], [-20, -40, -50, -80, -100], [-20, -40, -50, -80, -90], [-20, -40, -50, -80, -90, -100], [-20, -40, -50, -70], [-20, -40, -50, -70, -100], [-20, -40, -50, -70, -90], [-20, -40, -50, -70, -90, -100], [-20, -40, -50, -70, -80], [-20, -40, -50, -70, -80, -100], [-20, -40, -50, -70, -80, -90], [-20, -40, -50, -70, -80, -90, -100], [-20, -40, -50, -60], [-20, -40, -50, -60, -100], [-20, -40, -50, -60, -90], [-20, -40, -50, -60, -90, -100], [-20, -40, -50, -60, -80], [-20, -40, -50, -60, -80, -100], [-20, -40, -50, -60, -80, -90], [-20, -40, -50, -60, -80, -90, -100], [-20, -40, -50, -60, -70], [-20, -40, -50, -60, -70, -100], [-20, -40, -50, -60, -70, -90], [-20, -40, -50, -60, -70, -90, -100], [-20, -40, -50, -60, -70, -80], [-20, -40, -50, -60, -70, -80, -100], [-20, -40, -50, -60, -70, -80, -90], [-20, -40, -50, -60, -70, -80, -90, -100], [-20, -30], [-20, -30, -100], [-20, -30, -90], [-20, -30, -90, -100], [-20, -30, -80], [-20, -30, -80, -100], [-20, -30, -80, -90], [-20, -30, -80, -90, -100], [-20, -30, -70], [-20, -30, -70, -100], [-20, -30, -70, -90], [-20, -30, -70, -90, -100], [-20, -30, -70, -80], [-20, -30, -70, -80, -100], [-20, -30, -70, -80, -90], [-20, -30, -70, -80, -90, -100], [-20, -30, -60], [-20, -30, -60, -100], [-20, -30, -60, -90], [-20, -30, -60, -90, -100], [-20, -30, -60, -80], [-20, -30, -60, -80, -100], [-20, -30, -60, -80, -90], [-20, -30, -60, -80, -90, -100], [-20, -30, -60, -70], [-20, -30, -60, -70, -100], [-20, -30, -60, -70, -90], [-20, -30, -60, -70, -90, -100], [-20, -30, -60, -70, -80], [-20, -30, -60, -70, -80, -100], [-20, -30, -60, -70, -80, -90], [-20, -30, -60, -70, -80, -90, -100], [-20, -30, -50], [-20, -30, -50, -100], [-20, -30, -50, -90], [-20, -30, -50, -90, -100], [-20, -30, -50, -80], [-20, -30, -50, -80, -100], [-20, -30, -50, -80, -90], [-20, -30, -50, -80, -90, -100], [-20, -30, -50, -70], [-20, -30, -50, -70, -100], [-20, -30, -50, -70, -90], [-20, -30, -50, -70, -90, -100], [-20, -30, -50, -70, -80], [-20, -30, -50, -70, -80, -100], [-20, -30, -50, -70, -80, -90], [-20, -30, -50, -70, -80, -90, -100], [-20, -30, -50, -60], [-20, -30, -50, -60, -100], [-20, -30, -50, -60, -90], [-20, -30, -50, -60, -90, -100], [-20, -30, -50, -60, -80], [-20, -30, -50, -60, -80, -100], [-20, -30, -50, -60, -80, -90], [-20, -30, -50, -60, -80, -90, -100], [-20, -30, -50, -60, -70], [-20, -30, -50, -60, -70, -100], [-20, -30, -50, -60, -70, -90], [-20, -30, -50, -60, -70, -90, -100], [-20, -30, -50, -60, -70, -80], [-20, -30, -50, -60, -70, -80, -100], [-20, -30, -50, -60, -70, -80, -90], [-20, -30, -50, -60, -70, -80, -90, -100], [-20, -30, -40], [-20, -30, -40, -100], [-20, -30, -40, -90], [-20, -30, -40, -90, -100], [-20, -30, -40, -80], [-20, -30, -40, -80, -100], [-20, -30, -40, -80, -90], [-20, -30, -40, -80, -90, -100], [-20, -30, -40, -70], [-20, -30, -40, -70, -100], [-20, -30, -40, -70, -90], [-20, -30, -40, -70, -90, -100], [-20, -30, -40, -70, -80], [-20, -30, -40, -70, -80, -100], [-20, -30, -40, -70, -80, -90], [-20, -30, -40, -70, -80, -90, -100], [-20, -30, -40, -60], [-20, -30, -40, -60, -100], [-20, -30, -40, -60, -90], [-20, -30, -40, -60, -90, -100], [-20, -30, -40, -60, -80], [-20, -30, -40, -60, -80, -100], [-20, -30, -40, -60, -80, -90], [-20, -30, -40, -60, -80, -90, -100], [-20, -30, -40, -60, -70], [-20, -30, -40, -60, -70, -100], [-20, -30, -40, -60, -70, -90], [-20, -30, -40, -60, -70, -90, -100], [-20, -30, -40, -60, -70, -80], [-20, -30, -40, -60, -70, -80, -100], [-20, -30, -40, -60, -70, -80, -90], [-20, -30, -40, -60, -70, -80, -90, -100], [-20, -30, -40, -50], [-20, -30, -40, -50, -100], [-20, -30, -40, -50, -90], [-20, -30, -40, -50, -90, -100], [-20, -30, -40, -50, -80], [-20, -30, -40, -50, -80, -100], [-20, -30, -40, -50, -80, -90], [-20, -30, -40, -50, -80, -90, -100], [-20, -30, -40, -50, -70], [-20, -30, -40, -50, -70, -100], [-20, -30, -40, -50, -70, -90], [-20, -30, -40, -50, -70, -90, -100], [-20, -30, -40, -50, -70, -80], [-20, -30, -40, -50, -70, -80, -100], [-20, -30, -40, -50, -70, -80, -90], [-20, -30, -40, -50, -70, -80, -90, -100], [-20, -30, -40, -50, -60], [-20, -30, -40, -50, -60, -100], [-20, -30, -40, -50, -60, -90], [-20, -30, -40, -50, -60, -90, -100], [-20, -30, -40, -50, -60, -80], [-20, -30, -40, -50, -60, -80, -100], [-20, -30, -40, -50, -60, -80, -90], [-20, -30, -40, -50, -60, -80, -90, -100], [-20, -30, -40, -50, -60, -70], [-20, -30, -40, -50, -60, -70, -100], [-20, -30, -40, -50, -60, -70, -90], [-20, -30, -40, -50, -60, -70, -90, -100], [-20, -30, -40, -50, -60, -70, -80], [-20, -30, -40, -50, -60, -70, -80, -100], [-20, -30, -40, -50, -60, -70, -80, -90], [-20, -30, -40, -50, -60, -70, -80, -90, -100], [-10], [-10, -100], [-10, -90], [-10, -90, -100], [-10, -80], [-10, -80, -100], [-10, -80, -90], [-10, -80, -90, -100], [-10, -70], [-10, -70, -100], [-10, -70, -90], [-10, -70, -90, -100], [-10, -70, -80], [-10, -70, -80, -100], [-10, -70, -80, -90], [-10, -70, -80, -90, -100], [-10, -60], [-10, -60, -100], [-10, -60, -90], [-10, -60, -90, -100], [-10, -60, -80], [-10, -60, -80, -100], [-10, -60, -80, -90], [-10, -60, -80, -90, -100], [-10, -60, -70], [-10, -60, -70, -100], [-10, -60, -70, -90], [-10, -60, -70, -90, -100], [-10, -60, -70, -80], [-10, -60, -70, -80, -100], [-10, -60, -70, -80, -90], [-10, -60, -70, -80, -90, -100], [-10, -50], [-10, -50, -100], [-10, -50, -90], [-10, -50, -90, -100], [-10, -50, -80], [-10, -50, -80, -100], [-10, -50, -80, -90], [-10, -50, -80, -90, -100], [-10, -50, -70], [-10, -50, -70, -100], [-10, -50, -70, -90], [-10, -50, -70, -90, -100], [-10, -50, -70, -80], [-10, -50, -70, -80, -100], [-10, -50, -70, -80, -90], [-10, -50, -70, -80, -90, -100], [-10, -50, -60], [-10, -50, -60, -100], [-10, -50, -60, -90], [-10, -50, -60, -90, -100], [-10, -50, -60, -80], [-10, -50, -60, -80, -100], [-10, -50, -60, -80, -90], [-10, -50, -60, -80, -90, -100], [-10, -50, -60, -70], [-10, -50, -60, -70, -100], [-10, -50, -60, -70, -90], [-10, -50, -60, -70, -90, -100], [-10, -50, -60, -70, -80], [-10, -50, -60, -70, -80, -100], [-10, -50, -60, -70, -80, -90], [-10, -50, -60, -70, -80, -90, -100], [-10, -40], [-10, -40, -100], [-10, -40, -90], [-10, -40, -90, -100], [-10, -40, -80], [-10, -40, -80, -100], [-10, -40, -80, -90], [-10, -40, -80, -90, -100], [-10, -40, -70], [-10, -40, -70, -100], [-10, -40, -70, -90], [-10, -40, -70, -90, -100], [-10, -40, -70, -80], [-10, -40, -70, -80, -100], [-10, -40, -70, -80, -90], [-10, -40, -70, -80, -90, -100], [-10, -40, -60], [-10, -40, -60, -100], [-10, -40, -60, -90], [-10, -40, -60, -90, -100], [-10, -40, -60, -80], [-10, -40, -60, -80, -100], [-10, -40, -60, -80, -90], [-10, -40, -60, -80, -90, -100], [-10, -40, -60, -70], [-10, -40, -60, -70, -100], [-10, -40, -60, -70, -90], [-10, -40, -60, -70, -90, -100], [-10, -40, -60, -70, -80], [-10, -40, -60, -70, -80, -100], [-10, -40, -60, -70, -80, -90], [-10, -40, -60, -70, -80, -90, -100], [-10, -40, -50], [-10, -40, -50, -100], [-10, -40, -50, -90], [-10, -40, -50, -90, -100], [-10, -40, -50, -80], [-10, -40, -50, -80, -100], [-10, -40, -50, -80, -90], [-10, -40, -50, -80, -90, -100], [-10, -40, -50, -70], [-10, -40, -50, -70, -100], [-10, -40, -50, -70, -90], [-10, -40, -50, -70, -90, -100], [-10, -40, -50, -70, -80], [-10, -40, -50, -70, -80, -100], [-10, -40, -50, -70, -80, -90], [-10, -40, -50, -70, -80, -90, -100], [-10, -40, -50, -60], [-10, -40, -50, -60, -100], [-10, -40, -50, -60, -90], [-10, -40, -50, -60, -90, -100], [-10, -40, -50, -60, -80], [-10, -40, -50, -60, -80, -100], [-10, -40, -50, -60, -80, -90], [-10, -40, -50, -60, -80, -90, -100], [-10, -40, -50, -60, -70], [-10, -40, -50, -60, -70, -100], [-10, -40, -50, -60, -70, -90], [-10, -40, -50, -60, -70, -90, -100], [-10, -40, -50, -60, -70, -80], [-10, -40, -50, -60, -70, -80, -100], [-10, -40, -50, -60, -70, -80, -90], [-10, -40, -50, -60, -70, -80, -90, -100], [-10, -30], [-10, -30, -100], [-10, -30, -90], [-10, -30, -90, -100], [-10, -30, -80], [-10, -30, -80, -100], [-10, -30, -80, -90], [-10, -30, -80, -90, -100], [-10, -30, -70], [-10, -30, -70, -100], [-10, -30, -70, -90], [-10, -30, -70, -90, -100], [-10, -30, -70, -80], [-10, -30, -70, -80, -100], [-10, -30, -70, -80, -90], [-10, -30, -70, -80, -90, -100], [-10, -30, -60], [-10, -30, -60, -100], [-10, -30, -60, -90], [-10, -30, -60, -90, -100], [-10, -30, -60, -80], [-10, -30, -60, -80, -100], [-10, -30, -60, -80, -90], [-10, -30, -60, -80, -90, -100], [-10, -30, -60, -70], [-10, -30, -60, -70, -100], [-10, -30, -60, -70, -90], [-10, -30, -60, -70, -90, -100], [-10, -30, -60, -70, -80], [-10, -30, -60, -70, -80, -100], [-10, -30, -60, -70, -80, -90], [-10, -30, -60, -70, -80, -90, -100], [-10, -30, -50], [-10, -30, -50, -100], [-10, -30, -50, -90], [-10, -30, -50, -90, -100], [-10, -30, -50, -80], [-10, -30, -50, -80, -100], [-10, -30, -50, -80, -90], [-10, -30, -50, -80, -90, -100], [-10, -30, -50, -70], [-10, -30, -50, -70, -100], [-10, -30, -50, -70, -90], [-10, -30, -50, -70, -90, -100], [-10, -30, -50, -70, -80], [-10, -30, -50, -70, -80, -100], [-10, -30, -50, -70, -80, -90], [-10, -30, -50, -70, -80, -90, -100], [-10, -30, -50, -60], [-10, -30, -50, -60, -100], [-10, -30, -50, -60, -90], [-10, -30, -50, -60, -90, -100], [-10, -30, -50, -60, -80], [-10, -30, -50, -60, -80, -100], [-10, -30, -50, -60, -80, -90], [-10, -30, -50, -60, -80, -90, -100], [-10, -30, -50, -60, -70], [-10, -30, -50, -60, -70, -100], [-10, -30, -50, -60, -70, -90], [-10, -30, -50, -60, -70, -90, -100], [-10, -30, -50, -60, -70, -80], [-10, -30, -50, -60, -70, -80, -100], [-10, -30, -50, -60, -70, -80, -90], [-10, -30, -50, -60, -70, -80, -90, -100], [-10, -30, -40], [-10, -30, -40, -100], [-10, -30, -40, -90], [-10, -30, -40, -90, -100], [-10, -30, -40, -80], [-10, -30, -40, -80, -100], [-10, -30, -40, -80, -90], [-10, -30, -40, -80, -90, -100], [-10, -30, -40, -70], [-10, -30, -40, -70, -100], [-10, -30, -40, -70, -90], [-10, -30, -40, -70, -90, -100], [-10, -30, -40, -70, -80], [-10, -30, -40, -70, -80, -100], [-10, -30, -40, -70, -80, -90], [-10, -30, -40, -70, -80, -90, -100], [-10, -30, -40, -60], [-10, -30, -40, -60, -100], [-10, -30, -40, -60, -90], [-10, -30, -40, -60, -90, -100], [-10, -30, -40, -60, -80], [-10, -30, -40, -60, -80, -100], [-10, -30, -40, -60, -80, -90], [-10, -30, -40, -60, -80, -90, -100], [-10, -30, -40, -60, -70], [-10, -30, -40, -60, -70, -100], [-10, -30, -40, -60, -70, -90], [-10, -30, -40, -60, -70, -90, -100], [-10, -30, -40, -60, -70, -80], [-10, -30, -40, -60, -70, -80, -100], [-10, -30, -40, -60, -70, -80, -90], [-10, -30, -40, -60, -70, -80, -90, -100], [-10, -30, -40, -50], [-10, -30, -40, -50, -100], [-10, -30, -40, -50, -90], [-10, -30, -40, -50, -90, -100], [-10, -30, -40, -50, -80], [-10, -30, -40, -50, -80, -100], [-10, -30, -40, -50, -80, -90], [-10, -30, -40, -50, -80, -90, -100], [-10, -30, -40, -50, -70], [-10, -30, -40, -50, -70, -100], [-10, -30, -40, -50, -70, -90], [-10, -30, -40, -50, -70, -90, -100], [-10, -30, -40, -50, -70, -80], [-10, -30, -40, -50, -70, -80, -100], [-10, -30, -40, -50, -70, -80, -90], [-10, -30, -40, -50, -70, -80, -90, -100], [-10, -30, -40, -50, -60], [-10, -30, -40, -50, -60, -100], [-10, -30, -40, -50, -60, -90], [-10, -30, -40, -50, -60, -90, -100], [-10, -30, -40, -50, -60, -80], [-10, -30, -40, -50, -60, -80, -100], [-10, -30, -40, -50, -60, -80, -90], [-10, -30, -40, -50, -60, -80, -90, -100], [-10, -30, -40, -50, -60, -70], [-10, -30, -40, -50, -60, -70, -100], [-10, -30, -40, -50, -60, -70, -90], [-10, -30, -40, -50, -60, -70, -90, -100], [-10, -30, -40, -50, -60, -70, -80], [-10, -30, -40, -50, -60, -70, -80, -100], [-10, -30, -40, -50, -60, -70, -80, -90], [-10, -30, -40, -50, -60, -70, -80, -90, -100], [-10, -20], [-10, -20, -100], [-10, -20, -90], [-10, -20, -90, -100], [-10, -20, -80], [-10, -20, -80, -100], [-10, -20, -80, -90], [-10, -20, -80, -90, -100], [-10, -20, -70], [-10, -20, -70, -100], [-10, -20, -70, -90], [-10, -20, -70, -90, -100], [-10, -20, -70, -80], [-10, -20, -70, -80, -100], [-10, -20, -70, -80, -90], [-10, -20, -70, -80, -90, -100], [-10, -20, -60], [-10, -20, -60, -100], [-10, -20, -60, -90], [-10, -20, -60, -90, -100], [-10, -20, -60, -80], [-10, -20, -60, -80, -100], [-10, -20, -60, -80, -90], [-10, -20, -60, -80, -90, -100], [-10, -20, -60, -70], [-10, -20, -60, -70, -100], [-10, -20, -60, -70, -90], [-10, -20, -60, -70, -90, -100], [-10, -20, -60, -70, -80], [-10, -20, -60, -70, -80, -100], [-10, -20, -60, -70, -80, -90], [-10, -20, -60, -70, -80, -90, -100], [-10, -20, -50], [-10, -20, -50, -100], [-10, -20, -50, -90], [-10, -20, -50, -90, -100], [-10, -20, -50, -80], [-10, -20, -50, -80, -100], [-10, -20, -50, -80, -90], [-10, -20, -50, -80, -90, -100], [-10, -20, -50, -70], [-10, -20, -50, -70, -100], [-10, -20, -50, -70, -90], [-10, -20, -50, -70, -90, -100], [-10, -20, -50, -70, -80], [-10, -20, -50, -70, -80, -100], [-10, -20, -50, -70, -80, -90], [-10, -20, -50, -70, -80, -90, -100], [-10, -20, -50, -60], [-10, -20, -50, -60, -100], [-10, -20, -50, -60, -90], [-10, -20, -50, -60, -90, -100], [-10, -20, -50, -60, -80], [-10, -20, -50, -60, -80, -100], [-10, -20, -50, -60, -80, -90], [-10, -20, -50, -60, -80, -90, -100], [-10, -20, -50, -60, -70], [-10, -20, -50, -60, -70, -100], [-10, -20, -50, -60, -70, -90], [-10, -20, -50, -60, -70, -90, -100], [-10, -20, -50, -60, -70, -80], [-10, -20, -50, -60, -70, -80, -100], [-10, -20, -50, -60, -70, -80, -90], [-10, -20, -50, -60, -70, -80, -90, -100], [-10, -20, -40], [-10, -20, -40, -100], [-10, -20, -40, -90], [-10, -20, -40, -90, -100], [-10, -20, -40, -80], [-10, -20, -40, -80, -100], [-10, -20, -40, -80, -90], [-10, -20, -40, -80, -90, -100], [-10, -20, -40, -70], [-10, -20, -40, -70, -100], [-10, -20, -40, -70, -90], [-10, -20, -40, -70, -90, -100], [-10, -20, -40, -70, -80], [-10, -20, -40, -70, -80, -100], [-10, -20, -40, -70, -80, -90], [-10, -20, -40, -70, -80, -90, -100], [-10, -20, -40, -60], [-10, -20, -40, -60, -100], [-10, -20, -40, -60, -90], [-10, -20, -40, -60, -90, -100], [-10, -20, -40, -60, -80], [-10, -20, -40, -60, -80, -100], [-10, -20, -40, -60, -80, -90], [-10, -20, -40, -60, -80, -90, -100], [-10, -20, -40, -60, -70], [-10, -20, -40, -60, -70, -100], [-10, -20, -40, -60, -70, -90], [-10, -20, -40, -60, -70, -90, -100], [-10, -20, -40, -60, -70, -80], [-10, -20, -40, -60, -70, -80, -100], [-10, -20, -40, -60, -70, -80, -90], [-10, -20, -40, -60, -70, -80, -90, -100], [-10, -20, -40, -50], [-10, -20, -40, -50, -100], [-10, -20, -40, -50, -90], [-10, -20, -40, -50, -90, -100], [-10, -20, -40, -50, -80], [-10, -20, -40, -50, -80, -100], [-10, -20, -40, -50, -80, -90], [-10, -20, -40, -50, -80, -90, -100], [-10, -20, -40, -50, -70], [-10, -20, -40, -50, -70, -100], [-10, -20, -40, -50, -70, -90], [-10, -20, -40, -50, -70, -90, -100], [-10, -20, -40, -50, -70, -80], [-10, -20, -40, -50, -70, -80, -100], [-10, -20, -40, -50, -70, -80, -90], [-10, -20, -40, -50, -70, -80, -90, -100], [-10, -20, -40, -50, -60], [-10, -20, -40, -50, -60, -100], [-10, -20, -40, -50, -60, -90], [-10, -20, -40, -50, -60, -90, -100], [-10, -20, -40, -50, -60, -80], [-10, -20, -40, -50, -60, -80, -100], [-10, -20, -40, -50, -60, -80, -90], [-10, -20, -40, -50, -60, -80, -90, -100], [-10, -20, -40, -50, -60, -70], [-10, -20, -40, -50, -60, -70, -100], [-10, -20, -40, -50, -60, -70, -90], [-10, -20, -40, -50, -60, -70, -90, -100], [-10, -20, -40, -50, -60, -70, -80], [-10, -20, -40, -50, -60, -70, -80, -100], [-10, -20, -40, -50, -60, -70, -80, -90], [-10, -20, -40, -50, -60, -70, -80, -90, -100], [-10, -20, -30], [-10, -20, -30, -100], [-10, -20, -30, -90], [-10, -20, -30, -90, -100], [-10, -20, -30, -80], [-10, -20, -30, -80, -100], [-10, -20, -30, -80, -90], [-10, -20, -30, -80, -90, -100], [-10, -20, -30, -70], [-10, -20, -30, -70, -100], [-10, -20, -30, -70, -90], [-10, -20, -30, -70, -90, -100], [-10, -20, -30, -70, -80], [-10, -20, -30, -70, -80, -100], [-10, -20, -30, -70, -80, -90], [-10, -20, -30, -70, -80, -90, -100], [-10, -20, -30, -60], [-10, -20, -30, -60, -100], [-10, -20, -30, -60, -90], [-10, -20, -30, -60, -90, -100], [-10, -20, -30, -60, -80], [-10, -20, -30, -60, -80, -100], [-10, -20, -30, -60, -80, -90], [-10, -20, -30, -60, -80, -90, -100], [-10, -20, -30, -60, -70], [-10, -20, -30, -60, -70, -100], [-10, -20, -30, -60, -70, -90], [-10, -20, -30, -60, -70, -90, -100], [-10, -20, -30, -60, -70, -80], [-10, -20, -30, -60, -70, -80, -100], [-10, -20, -30, -60, -70, -80, -90], [-10, -20, -30, -60, -70, -80, -90, -100], [-10, -20, -30, -50], [-10, -20, -30, -50, -100], [-10, -20, -30, -50, -90], [-10, -20, -30, -50, -90, -100], [-10, -20, -30, -50, -80], [-10, -20, -30, -50, -80, -100], [-10, -20, -30, -50, -80, -90], [-10, -20, -30, -50, -80, -90, -100], [-10, -20, -30, -50, -70], [-10, -20, -30, -50, -70, -100], [-10, -20, -30, -50, -70, -90], [-10, -20, -30, -50, -70, -90, -100], [-10, -20, -30, -50, -70, -80], [-10, -20, -30, -50, -70, -80, -100], [-10, -20, -30, -50, -70, -80, -90], [-10, -20, -30, -50, -70, -80, -90, -100], [-10, -20, -30, -50, -60], [-10, -20, -30, -50, -60, -100], [-10, -20, -30, -50, -60, -90], [-10, -20, -30, -50, -60, -90, -100], [-10, -20, -30, -50, -60, -80], [-10, -20, -30, -50, -60, -80, -100], [-10, -20, -30, -50, -60, -80, -90], [-10, -20, -30, -50, -60, -80, -90, -100], [-10, -20, -30, -50, -60, -70], [-10, -20, -30, -50, -60, -70, -100], [-10, -20, -30, -50, -60, -70, -90], [-10, -20, -30, -50, -60, -70, -90, -100], [-10, -20, -30, -50, -60, -70, -80], [-10, -20, -30, -50, -60, -70, -80, -100], [-10, -20, -30, -50, -60, -70, -80, -90], [-10, -20, -30, -50, -60, -70, -80, -90, -100], [-10, -20, -30, -40], [-10, -20, -30, -40, -100], [-10, -20, -30, -40, -90], [-10, -20, -30, -40, -90, -100], [-10, -20, -30, -40, -80], [-10, -20, -30, -40, -80, -100], [-10, -20, -30, -40, -80, -90], [-10, -20, -30, -40, -80, -90, -100], [-10, -20, -30, -40, -70], [-10, -20, -30, -40, -70, -100], [-10, -20, -30, -40, -70, -90], [-10, -20, -30, -40, -70, -90, -100], [-10, -20, -30, -40, -70, -80], [-10, -20, -30, -40, -70, -80, -100], [-10, -20, -30, -40, -70, -80, -90], [-10, -20, -30, -40, -70, -80, -90, -100], [-10, -20, -30, -40, -60], [-10, -20, -30, -40, -60, -100], [-10, -20, -30, -40, -60, -90], [-10, -20, -30, -40, -60, -90, -100], [-10, -20, -30, -40, -60, -80], [-10, -20, -30, -40, -60, -80, -100], [-10, -20, -30, -40, -60, -80, -90], [-10, -20, -30, -40, -60, -80, -90, -100], [-10, -20, -30, -40, -60, -70], [-10, -20, -30, -40, -60, -70, -100], [-10, -20, -30, -40, -60, -70, -90], [-10, -20, -30, -40, -60, -70, -90, -100], [-10, -20, -30, -40, -60, -70, -80], [-10, -20, -30, -40, -60, -70, -80, -100], [-10, -20, -30, -40, -60, -70, -80, -90], [-10, -20, -30, -40, -60, -70, -80, -90, -100], [-10, -20, -30, -40, -50], [-10, -20, -30, -40, -50, -100], [-10, -20, -30, -40, -50, -90], [-10, -20, -30, -40, -50, -90, -100], [-10, -20, -30, -40, -50, -80], [-10, -20, -30, -40, -50, -80, -100], [-10, -20, -30, -40, -50, -80, -90], [-10, -20, -30, -40, -50, -80, -90, -100], [-10, -20, -30, -40, -50, -70], [-10, -20, -30, -40, -50, -70, -100], [-10, -20, -30, -40, -50, -70, -90], [-10, -20, -30, -40, -50, -70, -90, -100], [-10, -20, -30, -40, -50, -70, -80], [-10, -20, -30, -40, -50, -70, -80, -100], [-10, -20, -30, -40, -50, -70, -80, -90], [-10, -20, -30, -40, -50, -70, -80, -90, -100], [-10, -20, -30, -40, -50, -60], [-10, -20, -30, -40, -50, -60, -100], [-10, -20, -30, -40, -50, -60, -90], [-10, -20, -30, -40, -50, -60, -90, -100], [-10, -20, -30, -40, -50, -60, -80], [-10, -20, -30, -40, -50, -60, -80, -100], [-10, -20, -30, -40, -50, -60, -80, -90], [-10, -20, -30, -40, -50, -60, -80, -90, -100], [-10, -20, -30, -40, -50, -60, -70], [-10, -20, -30, -40, -50, -60, -70, -100], [-10, -20, -30, -40, -50, -60, -70, -90], [-10, -20, -30, -40, -50, -60, -70, -90, -100], [-10, -20, -30, -40, -50, -60, -70, -80], [-10, -20, -30, -40, -50, -60, -70, -80, -100], [-10, -20, -30, -40, -50, -60, -70, -80, -90], [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14]",
        "output": "[[], [14], [12], [12, 14], [10], [10, 14], [10, 12], [10, 12, 14], [8], [8, 14], [8, 12], [8, 12, 14], [8, 10], [8, 10, 14], [8, 10, 12], [8, 10, 12, 14], [6], [6, 14], [6, 12], [6, 12, 14], [6, 10], [6, 10, 14], [6, 10, 12], [6, 10, 12, 14], [6, 8], [6, 8, 14], [6, 8, 12], [6, 8, 12, 14], [6, 8, 10], [6, 8, 10, 14], [6, 8, 10, 12], [6, 8, 10, 12, 14], [4], [4, 14], [4, 12], [4, 12, 14], [4, 10], [4, 10, 14], [4, 10, 12], [4, 10, 12, 14], [4, 8], [4, 8, 14], [4, 8, 12], [4, 8, 12, 14], [4, 8, 10], [4, 8, 10, 14], [4, 8, 10, 12], [4, 8, 10, 12, 14], [4, 6], [4, 6, 14], [4, 6, 12], [4, 6, 12, 14], [4, 6, 10], [4, 6, 10, 14], [4, 6, 10, 12], [4, 6, 10, 12, 14], [4, 6, 8], [4, 6, 8, 14], [4, 6, 8, 12], [4, 6, 8, 12, 14], [4, 6, 8, 10], [4, 6, 8, 10, 14], [4, 6, 8, 10, 12], [4, 6, 8, 10, 12, 14], [2], [2, 14], [2, 12], [2, 12, 14], [2, 10], [2, 10, 14], [2, 10, 12], [2, 10, 12, 14], [2, 8], [2, 8, 14], [2, 8, 12], [2, 8, 12, 14], [2, 8, 10], [2, 8, 10, 14], [2, 8, 10, 12], [2, 8, 10, 12, 14], [2, 6], [2, 6, 14], [2, 6, 12], [2, 6, 12, 14], [2, 6, 10], [2, 6, 10, 14], [2, 6, 10, 12], [2, 6, 10, 12, 14], [2, 6, 8], [2, 6, 8, 14], [2, 6, 8, 12], [2, 6, 8, 12, 14], [2, 6, 8, 10], [2, 6, 8, 10, 14], [2, 6, 8, 10, 12], [2, 6, 8, 10, 12, 14], [2, 4], [2, 4, 14], [2, 4, 12], [2, 4, 12, 14], [2, 4, 10], [2, 4, 10, 14], [2, 4, 10, 12], [2, 4, 10, 12, 14], [2, 4, 8], [2, 4, 8, 14], [2, 4, 8, 12], [2, 4, 8, 12, 14], [2, 4, 8, 10], [2, 4, 8, 10, 14], [2, 4, 8, 10, 12], [2, 4, 8, 10, 12, 14], [2, 4, 6], [2, 4, 6, 14], [2, 4, 6, 12], [2, 4, 6, 12, 14], [2, 4, 6, 10], [2, 4, 6, 10, 14], [2, 4, 6, 10, 12], [2, 4, 6, 10, 12, 14], [2, 4, 6, 8], [2, 4, 6, 8, 14], [2, 4, 6, 8, 12], [2, 4, 6, 8, 12, 14], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10, 14], [2, 4, 6, 8, 10, 12], [2, 4, 6, 8, 10, 12, 14]]"
      },
      {
        "input": "nums = [10, -10, 5, -5, 0]",
        "output": "[[], [0], [-5], [-5, 0], [5], [5, 0], [5, -5], [5, -5, 0], [-10], [-10, 0], [-10, -5], [-10, -5, 0], [-10, 5], [-10, 5, 0], [-10, 5, -5], [-10, 5, -5, 0], [10], [10, 0], [10, -5], [10, -5, 0], [10, 5], [10, 5, 0], [10, 5, -5], [10, 5, -5, 0], [10, -10], [10, -10, 0], [10, -10, -5], [10, -10, -5, 0], [10, -10, 5], [10, -10, 5, 0], [10, -10, 5, -5], [10, -10, 5, -5, 0]]"
      },
      {
        "input": "nums = [-10, -5, 0, 5, 10]",
        "output": "[[], [10], [5], [5, 10], [0], [0, 10], [0, 5], [0, 5, 10], [-5], [-5, 10], [-5, 5], [-5, 5, 10], [-5, 0], [-5, 0, 10], [-5, 0, 5], [-5, 0, 5, 10], [-10], [-10, 10], [-10, 5], [-10, 5, 10], [-10, 0], [-10, 0, 10], [-10, 0, 5], [-10, 0, 5, 10], [-10, -5], [-10, -5, 10], [-10, -5, 5], [-10, -5, 5, 10], [-10, -5, 0], [-10, -5, 0, 10], [-10, -5, 0, 5], [-10, -5, 0, 5, 10]]"
      },
      {
        "input": "nums = [1, 100, 1000, 10000, 100000, 1000000]",
        "output": "[[], [1000000], [100000], [100000, 1000000], [10000], [10000, 1000000], [10000, 100000], [10000, 100000, 1000000], [1000], [1000, 1000000], [1000, 100000], [1000, 100000, 1000000], [1000, 10000], [1000, 10000, 1000000], [1000, 10000, 100000], [1000, 10000, 100000, 1000000], [100], [100, 1000000], [100, 100000], [100, 100000, 1000000], [100, 10000], [100, 10000, 1000000], [100, 10000, 100000], [100, 10000, 100000, 1000000], [100, 1000], [100, 1000, 1000000], [100, 1000, 100000], [100, 1000, 100000, 1000000], [100, 1000, 10000], [100, 1000, 10000, 1000000], [100, 1000, 10000, 100000], [100, 1000, 10000, 100000, 1000000], [1], [1, 1000000], [1, 100000], [1, 100000, 1000000], [1, 10000], [1, 10000, 1000000], [1, 10000, 100000], [1, 10000, 100000, 1000000], [1, 1000], [1, 1000, 1000000], [1, 1000, 100000], [1, 1000, 100000, 1000000], [1, 1000, 10000], [1, 1000, 10000, 1000000], [1, 1000, 10000, 100000], [1, 1000, 10000, 100000, 1000000], [1, 100], [1, 100, 1000000], [1, 100, 100000], [1, 100, 100000, 1000000], [1, 100, 10000], [1, 100, 10000, 1000000], [1, 100, 10000, 100000], [1, 100, 10000, 100000, 1000000], [1, 100, 1000], [1, 100, 1000, 1000000], [1, 100, 1000, 100000], [1, 100, 1000, 100000, 1000000], [1, 100, 1000, 10000], [1, 100, 1000, 10000, 1000000], [1, 100, 1000, 10000, 100000], [1, 100, 1000, 10000, 100000, 1000000]]"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "[[], [8], [7], [7, 8], [6], [6, 8], [6, 7], [6, 7, 8], [5], [5, 8], [5, 7], [5, 7, 8], [5, 6], [5, 6, 8], [5, 6, 7], [5, 6, 7, 8], [4], [4, 8], [4, 7], [4, 7, 8], [4, 6], [4, 6, 8], [4, 6, 7], [4, 6, 7, 8], [4, 5], [4, 5, 8], [4, 5, 7], [4, 5, 7, 8], [4, 5, 6], [4, 5, 6, 8], [4, 5, 6, 7], [4, 5, 6, 7, 8], [3], [3, 8], [3, 7], [3, 7, 8], [3, 6], [3, 6, 8], [3, 6, 7], [3, 6, 7, 8], [3, 5], [3, 5, 8], [3, 5, 7], [3, 5, 7, 8], [3, 5, 6], [3, 5, 6, 8], [3, 5, 6, 7], [3, 5, 6, 7, 8], [3, 4], [3, 4, 8], [3, 4, 7], [3, 4, 7, 8], [3, 4, 6], [3, 4, 6, 8], [3, 4, 6, 7], [3, 4, 6, 7, 8], [3, 4, 5], [3, 4, 5, 8], [3, 4, 5, 7], [3, 4, 5, 7, 8], [3, 4, 5, 6], [3, 4, 5, 6, 8], [3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8], [2], [2, 8], [2, 7], [2, 7, 8], [2, 6], [2, 6, 8], [2, 6, 7], [2, 6, 7, 8], [2, 5], [2, 5, 8], [2, 5, 7], [2, 5, 7, 8], [2, 5, 6], [2, 5, 6, 8], [2, 5, 6, 7], [2, 5, 6, 7, 8], [2, 4], [2, 4, 8], [2, 4, 7], [2, 4, 7, 8], [2, 4, 6], [2, 4, 6, 8], [2, 4, 6, 7], [2, 4, 6, 7, 8], [2, 4, 5], [2, 4, 5, 8], [2, 4, 5, 7], [2, 4, 5, 7, 8], [2, 4, 5, 6], [2, 4, 5, 6, 8], [2, 4, 5, 6, 7], [2, 4, 5, 6, 7, 8], [2, 3], [2, 3, 8], [2, 3, 7], [2, 3, 7, 8], [2, 3, 6], [2, 3, 6, 8], [2, 3, 6, 7], [2, 3, 6, 7, 8], [2, 3, 5], [2, 3, 5, 8], [2, 3, 5, 7], [2, 3, 5, 7, 8], [2, 3, 5, 6], [2, 3, 5, 6, 8], [2, 3, 5, 6, 7], [2, 3, 5, 6, 7, 8], [2, 3, 4], [2, 3, 4, 8], [2, 3, 4, 7], [2, 3, 4, 7, 8], [2, 3, 4, 6], [2, 3, 4, 6, 8], [2, 3, 4, 6, 7], [2, 3, 4, 6, 7, 8], [2, 3, 4, 5], [2, 3, 4, 5, 8], [2, 3, 4, 5, 7], [2, 3, 4, 5, 7, 8], [2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 8], [2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8], [1], [1, 8], [1, 7], [1, 7, 8], [1, 6], [1, 6, 8], [1, 6, 7], [1, 6, 7, 8], [1, 5], [1, 5, 8], [1, 5, 7], [1, 5, 7, 8], [1, 5, 6], [1, 5, 6, 8], [1, 5, 6, 7], [1, 5, 6, 7, 8], [1, 4], [1, 4, 8], [1, 4, 7], [1, 4, 7, 8], [1, 4, 6], [1, 4, 6, 8], [1, 4, 6, 7], [1, 4, 6, 7, 8], [1, 4, 5], [1, 4, 5, 8], [1, 4, 5, 7], [1, 4, 5, 7, 8], [1, 4, 5, 6], [1, 4, 5, 6, 8], [1, 4, 5, 6, 7], [1, 4, 5, 6, 7, 8], [1, 3], [1, 3, 8], [1, 3, 7], [1, 3, 7, 8], [1, 3, 6], [1, 3, 6, 8], [1, 3, 6, 7], [1, 3, 6, 7, 8], [1, 3, 5], [1, 3, 5, 8], [1, 3, 5, 7], [1, 3, 5, 7, 8], [1, 3, 5, 6], [1, 3, 5, 6, 8], [1, 3, 5, 6, 7], [1, 3, 5, 6, 7, 8], [1, 3, 4], [1, 3, 4, 8], [1, 3, 4, 7], [1, 3, 4, 7, 8], [1, 3, 4, 6], [1, 3, 4, 6, 8], [1, 3, 4, 6, 7], [1, 3, 4, 6, 7, 8], [1, 3, 4, 5], [1, 3, 4, 5, 8], [1, 3, 4, 5, 7], [1, 3, 4, 5, 7, 8], [1, 3, 4, 5, 6], [1, 3, 4, 5, 6, 8], [1, 3, 4, 5, 6, 7], [1, 3, 4, 5, 6, 7, 8], [1, 2], [1, 2, 8], [1, 2, 7], [1, 2, 7, 8], [1, 2, 6], [1, 2, 6, 8], [1, 2, 6, 7], [1, 2, 6, 7, 8], [1, 2, 5], [1, 2, 5, 8], [1, 2, 5, 7], [1, 2, 5, 7, 8], [1, 2, 5, 6], [1, 2, 5, 6, 8], [1, 2, 5, 6, 7], [1, 2, 5, 6, 7, 8], [1, 2, 4], [1, 2, 4, 8], [1, 2, 4, 7], [1, 2, 4, 7, 8], [1, 2, 4, 6], [1, 2, 4, 6, 8], [1, 2, 4, 6, 7], [1, 2, 4, 6, 7, 8], [1, 2, 4, 5], [1, 2, 4, 5, 8], [1, 2, 4, 5, 7], [1, 2, 4, 5, 7, 8], [1, 2, 4, 5, 6], [1, 2, 4, 5, 6, 8], [1, 2, 4, 5, 6, 7], [1, 2, 4, 5, 6, 7, 8], [1, 2, 3], [1, 2, 3, 8], [1, 2, 3, 7], [1, 2, 3, 7, 8], [1, 2, 3, 6], [1, 2, 3, 6, 8], [1, 2, 3, 6, 7], [1, 2, 3, 6, 7, 8], [1, 2, 3, 5], [1, 2, 3, 5, 8], [1, 2, 3, 5, 7], [1, 2, 3, 5, 7, 8], [1, 2, 3, 5, 6], [1, 2, 3, 5, 6, 8], [1, 2, 3, 5, 6, 7], [1, 2, 3, 5, 6, 7, 8], [1, 2, 3, 4], [1, 2, 3, 4, 8], [1, 2, 3, 4, 7], [1, 2, 3, 4, 7, 8], [1, 2, 3, 4, 6], [1, 2, 3, 4, 6, 8], [1, 2, 3, 4, 6, 7], [1, 2, 3, 4, 6, 7, 8], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 8], [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8], [0], [0, 8], [0, 7], [0, 7, 8], [0, 6], [0, 6, 8], [0, 6, 7], [0, 6, 7, 8], [0, 5], [0, 5, 8], [0, 5, 7], [0, 5, 7, 8], [0, 5, 6], [0, 5, 6, 8], [0, 5, 6, 7], [0, 5, 6, 7, 8], [0, 4], [0, 4, 8], [0, 4, 7], [0, 4, 7, 8], [0, 4, 6], [0, 4, 6, 8], [0, 4, 6, 7], [0, 4, 6, 7, 8], [0, 4, 5], [0, 4, 5, 8], [0, 4, 5, 7], [0, 4, 5, 7, 8], [0, 4, 5, 6], [0, 4, 5, 6, 8], [0, 4, 5, 6, 7], [0, 4, 5, 6, 7, 8], [0, 3], [0, 3, 8], [0, 3, 7], [0, 3, 7, 8], [0, 3, 6], [0, 3, 6, 8], [0, 3, 6, 7], [0, 3, 6, 7, 8], [0, 3, 5], [0, 3, 5, 8], [0, 3, 5, 7], [0, 3, 5, 7, 8], [0, 3, 5, 6], [0, 3, 5, 6, 8], [0, 3, 5, 6, 7], [0, 3, 5, 6, 7, 8], [0, 3, 4], [0, 3, 4, 8], [0, 3, 4, 7], [0, 3, 4, 7, 8], [0, 3, 4, 6], [0, 3, 4, 6, 8], [0, 3, 4, 6, 7], [0, 3, 4, 6, 7, 8], [0, 3, 4, 5], [0, 3, 4, 5, 8], [0, 3, 4, 5, 7], [0, 3, 4, 5, 7, 8], [0, 3, 4, 5, 6], [0, 3, 4, 5, 6, 8], [0, 3, 4, 5, 6, 7], [0, 3, 4, 5, 6, 7, 8], [0, 2], [0, 2, 8], [0, 2, 7], [0, 2, 7, 8], [0, 2, 6], [0, 2, 6, 8], [0, 2, 6, 7], [0, 2, 6, 7, 8], [0, 2, 5], [0, 2, 5, 8], [0, 2, 5, 7], [0, 2, 5, 7, 8], [0, 2, 5, 6], [0, 2, 5, 6, 8], [0, 2, 5, 6, 7], [0, 2, 5, 6, 7, 8], [0, 2, 4], [0, 2, 4, 8], [0, 2, 4, 7], [0, 2, 4, 7, 8], [0, 2, 4, 6], [0, 2, 4, 6, 8], [0, 2, 4, 6, 7], [0, 2, 4, 6, 7, 8], [0, 2, 4, 5], [0, 2, 4, 5, 8], [0, 2, 4, 5, 7], [0, 2, 4, 5, 7, 8], [0, 2, 4, 5, 6], [0, 2, 4, 5, 6, 8], [0, 2, 4, 5, 6, 7], [0, 2, 4, 5, 6, 7, 8], [0, 2, 3], [0, 2, 3, 8], [0, 2, 3, 7], [0, 2, 3, 7, 8], [0, 2, 3, 6], [0, 2, 3, 6, 8], [0, 2, 3, 6, 7], [0, 2, 3, 6, 7, 8], [0, 2, 3, 5], [0, 2, 3, 5, 8], [0, 2, 3, 5, 7], [0, 2, 3, 5, 7, 8], [0, 2, 3, 5, 6], [0, 2, 3, 5, 6, 8], [0, 2, 3, 5, 6, 7], [0, 2, 3, 5, 6, 7, 8], [0, 2, 3, 4], [0, 2, 3, 4, 8], [0, 2, 3, 4, 7], [0, 2, 3, 4, 7, 8], [0, 2, 3, 4, 6], [0, 2, 3, 4, 6, 8], [0, 2, 3, 4, 6, 7], [0, 2, 3, 4, 6, 7, 8], [0, 2, 3, 4, 5], [0, 2, 3, 4, 5, 8], [0, 2, 3, 4, 5, 7], [0, 2, 3, 4, 5, 7, 8], [0, 2, 3, 4, 5, 6], [0, 2, 3, 4, 5, 6, 8], [0, 2, 3, 4, 5, 6, 7], [0, 2, 3, 4, 5, 6, 7, 8], [0, 1], [0, 1, 8], [0, 1, 7], [0, 1, 7, 8], [0, 1, 6], [0, 1, 6, 8], [0, 1, 6, 7], [0, 1, 6, 7, 8], [0, 1, 5], [0, 1, 5, 8], [0, 1, 5, 7], [0, 1, 5, 7, 8], [0, 1, 5, 6], [0, 1, 5, 6, 8], [0, 1, 5, 6, 7], [0, 1, 5, 6, 7, 8], [0, 1, 4], [0, 1, 4, 8], [0, 1, 4, 7], [0, 1, 4, 7, 8], [0, 1, 4, 6], [0, 1, 4, 6, 8], [0, 1, 4, 6, 7], [0, 1, 4, 6, 7, 8], [0, 1, 4, 5], [0, 1, 4, 5, 8], [0, 1, 4, 5, 7], [0, 1, 4, 5, 7, 8], [0, 1, 4, 5, 6], [0, 1, 4, 5, 6, 8], [0, 1, 4, 5, 6, 7], [0, 1, 4, 5, 6, 7, 8], [0, 1, 3], [0, 1, 3, 8], [0, 1, 3, 7], [0, 1, 3, 7, 8], [0, 1, 3, 6], [0, 1, 3, 6, 8], [0, 1, 3, 6, 7], [0, 1, 3, 6, 7, 8], [0, 1, 3, 5], [0, 1, 3, 5, 8], [0, 1, 3, 5, 7], [0, 1, 3, 5, 7, 8], [0, 1, 3, 5, 6], [0, 1, 3, 5, 6, 8], [0, 1, 3, 5, 6, 7], [0, 1, 3, 5, 6, 7, 8], [0, 1, 3, 4], [0, 1, 3, 4, 8], [0, 1, 3, 4, 7], [0, 1, 3, 4, 7, 8], [0, 1, 3, 4, 6], [0, 1, 3, 4, 6, 8], [0, 1, 3, 4, 6, 7], [0, 1, 3, 4, 6, 7, 8], [0, 1, 3, 4, 5], [0, 1, 3, 4, 5, 8], [0, 1, 3, 4, 5, 7], [0, 1, 3, 4, 5, 7, 8], [0, 1, 3, 4, 5, 6], [0, 1, 3, 4, 5, 6, 8], [0, 1, 3, 4, 5, 6, 7], [0, 1, 3, 4, 5, 6, 7, 8], [0, 1, 2], [0, 1, 2, 8], [0, 1, 2, 7], [0, 1, 2, 7, 8], [0, 1, 2, 6], [0, 1, 2, 6, 8], [0, 1, 2, 6, 7], [0, 1, 2, 6, 7, 8], [0, 1, 2, 5], [0, 1, 2, 5, 8], [0, 1, 2, 5, 7], [0, 1, 2, 5, 7, 8], [0, 1, 2, 5, 6], [0, 1, 2, 5, 6, 8], [0, 1, 2, 5, 6, 7], [0, 1, 2, 5, 6, 7, 8], [0, 1, 2, 4], [0, 1, 2, 4, 8], [0, 1, 2, 4, 7], [0, 1, 2, 4, 7, 8], [0, 1, 2, 4, 6], [0, 1, 2, 4, 6, 8], [0, 1, 2, 4, 6, 7], [0, 1, 2, 4, 6, 7, 8], [0, 1, 2, 4, 5], [0, 1, 2, 4, 5, 8], [0, 1, 2, 4, 5, 7], [0, 1, 2, 4, 5, 7, 8], [0, 1, 2, 4, 5, 6], [0, 1, 2, 4, 5, 6, 8], [0, 1, 2, 4, 5, 6, 7], [0, 1, 2, 4, 5, 6, 7, 8], [0, 1, 2, 3], [0, 1, 2, 3, 8], [0, 1, 2, 3, 7], [0, 1, 2, 3, 7, 8], [0, 1, 2, 3, 6], [0, 1, 2, 3, 6, 8], [0, 1, 2, 3, 6, 7], [0, 1, 2, 3, 6, 7, 8], [0, 1, 2, 3, 5], [0, 1, 2, 3, 5, 8], [0, 1, 2, 3, 5, 7], [0, 1, 2, 3, 5, 7, 8], [0, 1, 2, 3, 5, 6], [0, 1, 2, 3, 5, 6, 8], [0, 1, 2, 3, 5, 6, 7], [0, 1, 2, 3, 5, 6, 7, 8], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 8], [0, 1, 2, 3, 4, 7], [0, 1, 2, 3, 4, 7, 8], [0, 1, 2, 3, 4, 6], [0, 1, 2, 3, 4, 6, 8], [0, 1, 2, 3, 4, 6, 7], [0, 1, 2, 3, 4, 6, 7, 8], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 8], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7, 8], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 8], [0, 1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6, 7, 8], [-1], [-1, 8], [-1, 7], [-1, 7, 8], [-1, 6], [-1, 6, 8], [-1, 6, 7], [-1, 6, 7, 8], [-1, 5], [-1, 5, 8], [-1, 5, 7], [-1, 5, 7, 8], [-1, 5, 6], [-1, 5, 6, 8], [-1, 5, 6, 7], [-1, 5, 6, 7, 8], [-1, 4], [-1, 4, 8], [-1, 4, 7], [-1, 4, 7, 8], [-1, 4, 6], [-1, 4, 6, 8], [-1, 4, 6, 7], [-1, 4, 6, 7, 8], [-1, 4, 5], [-1, 4, 5, 8], [-1, 4, 5, 7], [-1, 4, 5, 7, 8], [-1, 4, 5, 6], [-1, 4, 5, 6, 8], [-1, 4, 5, 6, 7], [-1, 4, 5, 6, 7, 8], [-1, 3], [-1, 3, 8], [-1, 3, 7], [-1, 3, 7, 8], [-1, 3, 6], [-1, 3, 6, 8], [-1, 3, 6, 7], [-1, 3, 6, 7, 8], [-1, 3, 5], [-1, 3, 5, 8], [-1, 3, 5, 7], [-1, 3, 5, 7, 8], [-1, 3, 5, 6], [-1, 3, 5, 6, 8], [-1, 3, 5, 6, 7], [-1, 3, 5, 6, 7, 8], [-1, 3, 4], [-1, 3, 4, 8], [-1, 3, 4, 7], [-1, 3, 4, 7, 8], [-1, 3, 4, 6], [-1, 3, 4, 6, 8], [-1, 3, 4, 6, 7], [-1, 3, 4, 6, 7, 8], [-1, 3, 4, 5], [-1, 3, 4, 5, 8], [-1, 3, 4, 5, 7], [-1, 3, 4, 5, 7, 8], [-1, 3, 4, 5, 6], [-1, 3, 4, 5, 6, 8], [-1, 3, 4, 5, 6, 7], [-1, 3, 4, 5, 6, 7, 8], [-1, 2], [-1, 2, 8], [-1, 2, 7], [-1, 2, 7, 8], [-1, 2, 6], [-1, 2, 6, 8], [-1, 2, 6, 7], [-1, 2, 6, 7, 8], [-1, 2, 5], [-1, 2, 5, 8], [-1, 2, 5, 7], [-1, 2, 5, 7, 8], [-1, 2, 5, 6], [-1, 2, 5, 6, 8], [-1, 2, 5, 6, 7], [-1, 2, 5, 6, 7, 8], [-1, 2, 4], [-1, 2, 4, 8], [-1, 2, 4, 7], [-1, 2, 4, 7, 8], [-1, 2, 4, 6], [-1, 2, 4, 6, 8], [-1, 2, 4, 6, 7], [-1, 2, 4, 6, 7, 8], [-1, 2, 4, 5], [-1, 2, 4, 5, 8], [-1, 2, 4, 5, 7], [-1, 2, 4, 5, 7, 8], [-1, 2, 4, 5, 6], [-1, 2, 4, 5, 6, 8], [-1, 2, 4, 5, 6, 7], [-1, 2, 4, 5, 6, 7, 8], [-1, 2, 3], [-1, 2, 3, 8], [-1, 2, 3, 7], [-1, 2, 3, 7, 8], [-1, 2, 3, 6], [-1, 2, 3, 6, 8], [-1, 2, 3, 6, 7], [-1, 2, 3, 6, 7, 8], [-1, 2, 3, 5], [-1, 2, 3, 5, 8], [-1, 2, 3, 5, 7], [-1, 2, 3, 5, 7, 8], [-1, 2, 3, 5, 6], [-1, 2, 3, 5, 6, 8], [-1, 2, 3, 5, 6, 7], [-1, 2, 3, 5, 6, 7, 8], [-1, 2, 3, 4], [-1, 2, 3, 4, 8], [-1, 2, 3, 4, 7], [-1, 2, 3, 4, 7, 8], [-1, 2, 3, 4, 6], [-1, 2, 3, 4, 6, 8], [-1, 2, 3, 4, 6, 7], [-1, 2, 3, 4, 6, 7, 8], [-1, 2, 3, 4, 5], [-1, 2, 3, 4, 5, 8], [-1, 2, 3, 4, 5, 7], [-1, 2, 3, 4, 5, 7, 8], [-1, 2, 3, 4, 5, 6], [-1, 2, 3, 4, 5, 6, 8], [-1, 2, 3, 4, 5, 6, 7], [-1, 2, 3, 4, 5, 6, 7, 8], [-1, 1], [-1, 1, 8], [-1, 1, 7], [-1, 1, 7, 8], [-1, 1, 6], [-1, 1, 6, 8], [-1, 1, 6, 7], [-1, 1, 6, 7, 8], [-1, 1, 5], [-1, 1, 5, 8], [-1, 1, 5, 7], [-1, 1, 5, 7, 8], [-1, 1, 5, 6], [-1, 1, 5, 6, 8], [-1, 1, 5, 6, 7], [-1, 1, 5, 6, 7, 8], [-1, 1, 4], [-1, 1, 4, 8], [-1, 1, 4, 7], [-1, 1, 4, 7, 8], [-1, 1, 4, 6], [-1, 1, 4, 6, 8], [-1, 1, 4, 6, 7], [-1, 1, 4, 6, 7, 8], [-1, 1, 4, 5], [-1, 1, 4, 5, 8], [-1, 1, 4, 5, 7], [-1, 1, 4, 5, 7, 8], [-1, 1, 4, 5, 6], [-1, 1, 4, 5, 6, 8], [-1, 1, 4, 5, 6, 7], [-1, 1, 4, 5, 6, 7, 8], [-1, 1, 3], [-1, 1, 3, 8], [-1, 1, 3, 7], [-1, 1, 3, 7, 8], [-1, 1, 3, 6], [-1, 1, 3, 6, 8], [-1, 1, 3, 6, 7], [-1, 1, 3, 6, 7, 8], [-1, 1, 3, 5], [-1, 1, 3, 5, 8], [-1, 1, 3, 5, 7], [-1, 1, 3, 5, 7, 8], [-1, 1, 3, 5, 6], [-1, 1, 3, 5, 6, 8], [-1, 1, 3, 5, 6, 7], [-1, 1, 3, 5, 6, 7, 8], [-1, 1, 3, 4], [-1, 1, 3, 4, 8], [-1, 1, 3, 4, 7], [-1, 1, 3, 4, 7, 8], [-1, 1, 3, 4, 6], [-1, 1, 3, 4, 6, 8], [-1, 1, 3, 4, 6, 7], [-1, 1, 3, 4, 6, 7, 8], [-1, 1, 3, 4, 5], [-1, 1, 3, 4, 5, 8], [-1, 1, 3, 4, 5, 7], [-1, 1, 3, 4, 5, 7, 8], [-1, 1, 3, 4, 5, 6], [-1, 1, 3, 4, 5, 6, 8], [-1, 1, 3, 4, 5, 6, 7], [-1, 1, 3, 4, 5, 6, 7, 8], [-1, 1, 2], [-1, 1, 2, 8], [-1, 1, 2, 7], [-1, 1, 2, 7, 8], [-1, 1, 2, 6], [-1, 1, 2, 6, 8], [-1, 1, 2, 6, 7], [-1, 1, 2, 6, 7, 8], [-1, 1, 2, 5], [-1, 1, 2, 5, 8], [-1, 1, 2, 5, 7], [-1, 1, 2, 5, 7, 8], [-1, 1, 2, 5, 6], [-1, 1, 2, 5, 6, 8], [-1, 1, 2, 5, 6, 7], [-1, 1, 2, 5, 6, 7, 8], [-1, 1, 2, 4], [-1, 1, 2, 4, 8], [-1, 1, 2, 4, 7], [-1, 1, 2, 4, 7, 8], [-1, 1, 2, 4, 6], [-1, 1, 2, 4, 6, 8], [-1, 1, 2, 4, 6, 7], [-1, 1, 2, 4, 6, 7, 8], [-1, 1, 2, 4, 5], [-1, 1, 2, 4, 5, 8], [-1, 1, 2, 4, 5, 7], [-1, 1, 2, 4, 5, 7, 8], [-1, 1, 2, 4, 5, 6], [-1, 1, 2, 4, 5, 6, 8], [-1, 1, 2, 4, 5, 6, 7], [-1, 1, 2, 4, 5, 6, 7, 8], [-1, 1, 2, 3], [-1, 1, 2, 3, 8], [-1, 1, 2, 3, 7], [-1, 1, 2, 3, 7, 8], [-1, 1, 2, 3, 6], [-1, 1, 2, 3, 6, 8], [-1, 1, 2, 3, 6, 7], [-1, 1, 2, 3, 6, 7, 8], [-1, 1, 2, 3, 5], [-1, 1, 2, 3, 5, 8], [-1, 1, 2, 3, 5, 7], [-1, 1, 2, 3, 5, 7, 8], [-1, 1, 2, 3, 5, 6], [-1, 1, 2, 3, 5, 6, 8], [-1, 1, 2, 3, 5, 6, 7], [-1, 1, 2, 3, 5, 6, 7, 8], [-1, 1, 2, 3, 4], [-1, 1, 2, 3, 4, 8], [-1, 1, 2, 3, 4, 7], [-1, 1, 2, 3, 4, 7, 8], [-1, 1, 2, 3, 4, 6], [-1, 1, 2, 3, 4, 6, 8], [-1, 1, 2, 3, 4, 6, 7], [-1, 1, 2, 3, 4, 6, 7, 8], [-1, 1, 2, 3, 4, 5], [-1, 1, 2, 3, 4, 5, 8], [-1, 1, 2, 3, 4, 5, 7], [-1, 1, 2, 3, 4, 5, 7, 8], [-1, 1, 2, 3, 4, 5, 6], [-1, 1, 2, 3, 4, 5, 6, 8], [-1, 1, 2, 3, 4, 5, 6, 7], [-1, 1, 2, 3, 4, 5, 6, 7, 8], [-1, 0], [-1, 0, 8], [-1, 0, 7], [-1, 0, 7, 8], [-1, 0, 6], [-1, 0, 6, 8], [-1, 0, 6, 7], [-1, 0, 6, 7, 8], [-1, 0, 5], [-1, 0, 5, 8], [-1, 0, 5, 7], [-1, 0, 5, 7, 8], [-1, 0, 5, 6], [-1, 0, 5, 6, 8], [-1, 0, 5, 6, 7], [-1, 0, 5, 6, 7, 8], [-1, 0, 4], [-1, 0, 4, 8], [-1, 0, 4, 7], [-1, 0, 4, 7, 8], [-1, 0, 4, 6], [-1, 0, 4, 6, 8], [-1, 0, 4, 6, 7], [-1, 0, 4, 6, 7, 8], [-1, 0, 4, 5], [-1, 0, 4, 5, 8], [-1, 0, 4, 5, 7], [-1, 0, 4, 5, 7, 8], [-1, 0, 4, 5, 6], [-1, 0, 4, 5, 6, 8], [-1, 0, 4, 5, 6, 7], [-1, 0, 4, 5, 6, 7, 8], [-1, 0, 3], [-1, 0, 3, 8], [-1, 0, 3, 7], [-1, 0, 3, 7, 8], [-1, 0, 3, 6], [-1, 0, 3, 6, 8], [-1, 0, 3, 6, 7], [-1, 0, 3, 6, 7, 8], [-1, 0, 3, 5], [-1, 0, 3, 5, 8], [-1, 0, 3, 5, 7], [-1, 0, 3, 5, 7, 8], [-1, 0, 3, 5, 6], [-1, 0, 3, 5, 6, 8], [-1, 0, 3, 5, 6, 7], [-1, 0, 3, 5, 6, 7, 8], [-1, 0, 3, 4], [-1, 0, 3, 4, 8], [-1, 0, 3, 4, 7], [-1, 0, 3, 4, 7, 8], [-1, 0, 3, 4, 6], [-1, 0, 3, 4, 6, 8], [-1, 0, 3, 4, 6, 7], [-1, 0, 3, 4, 6, 7, 8], [-1, 0, 3, 4, 5], [-1, 0, 3, 4, 5, 8], [-1, 0, 3, 4, 5, 7], [-1, 0, 3, 4, 5, 7, 8], [-1, 0, 3, 4, 5, 6], [-1, 0, 3, 4, 5, 6, 8], [-1, 0, 3, 4, 5, 6, 7], [-1, 0, 3, 4, 5, 6, 7, 8], [-1, 0, 2], [-1, 0, 2, 8], [-1, 0, 2, 7], [-1, 0, 2, 7, 8], [-1, 0, 2, 6], [-1, 0, 2, 6, 8], [-1, 0, 2, 6, 7], [-1, 0, 2, 6, 7, 8], [-1, 0, 2, 5], [-1, 0, 2, 5, 8], [-1, 0, 2, 5, 7], [-1, 0, 2, 5, 7, 8], [-1, 0, 2, 5, 6], [-1, 0, 2, 5, 6, 8], [-1, 0, 2, 5, 6, 7], [-1, 0, 2, 5, 6, 7, 8], [-1, 0, 2, 4], [-1, 0, 2, 4, 8], [-1, 0, 2, 4, 7], [-1, 0, 2, 4, 7, 8], [-1, 0, 2, 4, 6], [-1, 0, 2, 4, 6, 8], [-1, 0, 2, 4, 6, 7], [-1, 0, 2, 4, 6, 7, 8], [-1, 0, 2, 4, 5], [-1, 0, 2, 4, 5, 8], [-1, 0, 2, 4, 5, 7], [-1, 0, 2, 4, 5, 7, 8], [-1, 0, 2, 4, 5, 6], [-1, 0, 2, 4, 5, 6, 8], [-1, 0, 2, 4, 5, 6, 7], [-1, 0, 2, 4, 5, 6, 7, 8], [-1, 0, 2, 3], [-1, 0, 2, 3, 8], [-1, 0, 2, 3, 7], [-1, 0, 2, 3, 7, 8], [-1, 0, 2, 3, 6], [-1, 0, 2, 3, 6, 8], [-1, 0, 2, 3, 6, 7], [-1, 0, 2, 3, 6, 7, 8], [-1, 0, 2, 3, 5], [-1, 0, 2, 3, 5, 8], [-1, 0, 2, 3, 5, 7], [-1, 0, 2, 3, 5, 7, 8], [-1, 0, 2, 3, 5, 6], [-1, 0, 2, 3, 5, 6, 8], [-1, 0, 2, 3, 5, 6, 7], [-1, 0, 2, 3, 5, 6, 7, 8], [-1, 0, 2, 3, 4], [-1, 0, 2, 3, 4, 8], [-1, 0, 2, 3, 4, 7], [-1, 0, 2, 3, 4, 7, 8], [-1, 0, 2, 3, 4, 6], [-1, 0, 2, 3, 4, 6, 8], [-1, 0, 2, 3, 4, 6, 7], [-1, 0, 2, 3, 4, 6, 7, 8], [-1, 0, 2, 3, 4, 5], [-1, 0, 2, 3, 4, 5, 8], [-1, 0, 2, 3, 4, 5, 7], [-1, 0, 2, 3, 4, 5, 7, 8], [-1, 0, 2, 3, 4, 5, 6], [-1, 0, 2, 3, 4, 5, 6, 8], [-1, 0, 2, 3, 4, 5, 6, 7], [-1, 0, 2, 3, 4, 5, 6, 7, 8], [-1, 0, 1], [-1, 0, 1, 8], [-1, 0, 1, 7], [-1, 0, 1, 7, 8], [-1, 0, 1, 6], [-1, 0, 1, 6, 8], [-1, 0, 1, 6, 7], [-1, 0, 1, 6, 7, 8], [-1, 0, 1, 5], [-1, 0, 1, 5, 8], [-1, 0, 1, 5, 7], [-1, 0, 1, 5, 7, 8], [-1, 0, 1, 5, 6], [-1, 0, 1, 5, 6, 8], [-1, 0, 1, 5, 6, 7], [-1, 0, 1, 5, 6, 7, 8], [-1, 0, 1, 4], [-1, 0, 1, 4, 8], [-1, 0, 1, 4, 7], [-1, 0, 1, 4, 7, 8], [-1, 0, 1, 4, 6], [-1, 0, 1, 4, 6, 8], [-1, 0, 1, 4, 6, 7], [-1, 0, 1, 4, 6, 7, 8], [-1, 0, 1, 4, 5], [-1, 0, 1, 4, 5, 8], [-1, 0, 1, 4, 5, 7], [-1, 0, 1, 4, 5, 7, 8], [-1, 0, 1, 4, 5, 6], [-1, 0, 1, 4, 5, 6, 8], [-1, 0, 1, 4, 5, 6, 7], [-1, 0, 1, 4, 5, 6, 7, 8], [-1, 0, 1, 3], [-1, 0, 1, 3, 8], [-1, 0, 1, 3, 7], [-1, 0, 1, 3, 7, 8], [-1, 0, 1, 3, 6], [-1, 0, 1, 3, 6, 8], [-1, 0, 1, 3, 6, 7], [-1, 0, 1, 3, 6, 7, 8], [-1, 0, 1, 3, 5], [-1, 0, 1, 3, 5, 8], [-1, 0, 1, 3, 5, 7], [-1, 0, 1, 3, 5, 7, 8], [-1, 0, 1, 3, 5, 6], [-1, 0, 1, 3, 5, 6, 8], [-1, 0, 1, 3, 5, 6, 7], [-1, 0, 1, 3, 5, 6, 7, 8], [-1, 0, 1, 3, 4], [-1, 0, 1, 3, 4, 8], [-1, 0, 1, 3, 4, 7], [-1, 0, 1, 3, 4, 7, 8], [-1, 0, 1, 3, 4, 6], [-1, 0, 1, 3, 4, 6, 8], [-1, 0, 1, 3, 4, 6, 7], [-1, 0, 1, 3, 4, 6, 7, 8], [-1, 0, 1, 3, 4, 5], [-1, 0, 1, 3, 4, 5, 8], [-1, 0, 1, 3, 4, 5, 7], [-1, 0, 1, 3, 4, 5, 7, 8], [-1, 0, 1, 3, 4, 5, 6], [-1, 0, 1, 3, 4, 5, 6, 8], [-1, 0, 1, 3, 4, 5, 6, 7], [-1, 0, 1, 3, 4, 5, 6, 7, 8], [-1, 0, 1, 2], [-1, 0, 1, 2, 8], [-1, 0, 1, 2, 7], [-1, 0, 1, 2, 7, 8], [-1, 0, 1, 2, 6], [-1, 0, 1, 2, 6, 8], [-1, 0, 1, 2, 6, 7], [-1, 0, 1, 2, 6, 7, 8], [-1, 0, 1, 2, 5], [-1, 0, 1, 2, 5, 8], [-1, 0, 1, 2, 5, 7], [-1, 0, 1, 2, 5, 7, 8], [-1, 0, 1, 2, 5, 6], [-1, 0, 1, 2, 5, 6, 8], [-1, 0, 1, 2, 5, 6, 7], [-1, 0, 1, 2, 5, 6, 7, 8], [-1, 0, 1, 2, 4], [-1, 0, 1, 2, 4, 8], [-1, 0, 1, 2, 4, 7], [-1, 0, 1, 2, 4, 7, 8], [-1, 0, 1, 2, 4, 6], [-1, 0, 1, 2, 4, 6, 8], [-1, 0, 1, 2, 4, 6, 7], [-1, 0, 1, 2, 4, 6, 7, 8], [-1, 0, 1, 2, 4, 5], [-1, 0, 1, 2, 4, 5, 8], [-1, 0, 1, 2, 4, 5, 7], [-1, 0, 1, 2, 4, 5, 7, 8], [-1, 0, 1, 2, 4, 5, 6], [-1, 0, 1, 2, 4, 5, 6, 8], [-1, 0, 1, 2, 4, 5, 6, 7], [-1, 0, 1, 2, 4, 5, 6, 7, 8], [-1, 0, 1, 2, 3], [-1, 0, 1, 2, 3, 8], [-1, 0, 1, 2, 3, 7], [-1, 0, 1, 2, 3, 7, 8], [-1, 0, 1, 2, 3, 6], [-1, 0, 1, 2, 3, 6, 8], [-1, 0, 1, 2, 3, 6, 7], [-1, 0, 1, 2, 3, 6, 7, 8], [-1, 0, 1, 2, 3, 5], [-1, 0, 1, 2, 3, 5, 8], [-1, 0, 1, 2, 3, 5, 7], [-1, 0, 1, 2, 3, 5, 7, 8], [-1, 0, 1, 2, 3, 5, 6], [-1, 0, 1, 2, 3, 5, 6, 8], [-1, 0, 1, 2, 3, 5, 6, 7], [-1, 0, 1, 2, 3, 5, 6, 7, 8], [-1, 0, 1, 2, 3, 4], [-1, 0, 1, 2, 3, 4, 8], [-1, 0, 1, 2, 3, 4, 7], [-1, 0, 1, 2, 3, 4, 7, 8], [-1, 0, 1, 2, 3, 4, 6], [-1, 0, 1, 2, 3, 4, 6, 8], [-1, 0, 1, 2, 3, 4, 6, 7], [-1, 0, 1, 2, 3, 4, 6, 7, 8], [-1, 0, 1, 2, 3, 4, 5], [-1, 0, 1, 2, 3, 4, 5, 8], [-1, 0, 1, 2, 3, 4, 5, 7], [-1, 0, 1, 2, 3, 4, 5, 7, 8], [-1, 0, 1, 2, 3, 4, 5, 6], [-1, 0, 1, 2, 3, 4, 5, 6, 8], [-1, 0, 1, 2, 3, 4, 5, 6, 7], [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]]"
      },
      {
        "input": "nums = [-9, -7, -5, -3, -1, 1, 3, 5, 7, 9]",
        "output": "[[], [9], [7], [7, 9], [5], [5, 9], [5, 7], [5, 7, 9], [3], [3, 9], [3, 7], [3, 7, 9], [3, 5], [3, 5, 9], [3, 5, 7], [3, 5, 7, 9], [1], [1, 9], [1, 7], [1, 7, 9], [1, 5], [1, 5, 9], [1, 5, 7], [1, 5, 7, 9], [1, 3], [1, 3, 9], [1, 3, 7], [1, 3, 7, 9], [1, 3, 5], [1, 3, 5, 9], [1, 3, 5, 7], [1, 3, 5, 7, 9], [-1], [-1, 9], [-1, 7], [-1, 7, 9], [-1, 5], [-1, 5, 9], [-1, 5, 7], [-1, 5, 7, 9], [-1, 3], [-1, 3, 9], [-1, 3, 7], [-1, 3, 7, 9], [-1, 3, 5], [-1, 3, 5, 9], [-1, 3, 5, 7], [-1, 3, 5, 7, 9], [-1, 1], [-1, 1, 9], [-1, 1, 7], [-1, 1, 7, 9], [-1, 1, 5], [-1, 1, 5, 9], [-1, 1, 5, 7], [-1, 1, 5, 7, 9], [-1, 1, 3], [-1, 1, 3, 9], [-1, 1, 3, 7], [-1, 1, 3, 7, 9], [-1, 1, 3, 5], [-1, 1, 3, 5, 9], [-1, 1, 3, 5, 7], [-1, 1, 3, 5, 7, 9], [-3], [-3, 9], [-3, 7], [-3, 7, 9], [-3, 5], [-3, 5, 9], [-3, 5, 7], [-3, 5, 7, 9], [-3, 3], [-3, 3, 9], [-3, 3, 7], [-3, 3, 7, 9], [-3, 3, 5], [-3, 3, 5, 9], [-3, 3, 5, 7], [-3, 3, 5, 7, 9], [-3, 1], [-3, 1, 9], [-3, 1, 7], [-3, 1, 7, 9], [-3, 1, 5], [-3, 1, 5, 9], [-3, 1, 5, 7], [-3, 1, 5, 7, 9], [-3, 1, 3], [-3, 1, 3, 9], [-3, 1, 3, 7], [-3, 1, 3, 7, 9], [-3, 1, 3, 5], [-3, 1, 3, 5, 9], [-3, 1, 3, 5, 7], [-3, 1, 3, 5, 7, 9], [-3, -1], [-3, -1, 9], [-3, -1, 7], [-3, -1, 7, 9], [-3, -1, 5], [-3, -1, 5, 9], [-3, -1, 5, 7], [-3, -1, 5, 7, 9], [-3, -1, 3], [-3, -1, 3, 9], [-3, -1, 3, 7], [-3, -1, 3, 7, 9], [-3, -1, 3, 5], [-3, -1, 3, 5, 9], [-3, -1, 3, 5, 7], [-3, -1, 3, 5, 7, 9], [-3, -1, 1], [-3, -1, 1, 9], [-3, -1, 1, 7], [-3, -1, 1, 7, 9], [-3, -1, 1, 5], [-3, -1, 1, 5, 9], [-3, -1, 1, 5, 7], [-3, -1, 1, 5, 7, 9], [-3, -1, 1, 3], [-3, -1, 1, 3, 9], [-3, -1, 1, 3, 7], [-3, -1, 1, 3, 7, 9], [-3, -1, 1, 3, 5], [-3, -1, 1, 3, 5, 9], [-3, -1, 1, 3, 5, 7], [-3, -1, 1, 3, 5, 7, 9], [-5], [-5, 9], [-5, 7], [-5, 7, 9], [-5, 5], [-5, 5, 9], [-5, 5, 7], [-5, 5, 7, 9], [-5, 3], [-5, 3, 9], [-5, 3, 7], [-5, 3, 7, 9], [-5, 3, 5], [-5, 3, 5, 9], [-5, 3, 5, 7], [-5, 3, 5, 7, 9], [-5, 1], [-5, 1, 9], [-5, 1, 7], [-5, 1, 7, 9], [-5, 1, 5], [-5, 1, 5, 9], [-5, 1, 5, 7], [-5, 1, 5, 7, 9], [-5, 1, 3], [-5, 1, 3, 9], [-5, 1, 3, 7], [-5, 1, 3, 7, 9], [-5, 1, 3, 5], [-5, 1, 3, 5, 9], [-5, 1, 3, 5, 7], [-5, 1, 3, 5, 7, 9], [-5, -1], [-5, -1, 9], [-5, -1, 7], [-5, -1, 7, 9], [-5, -1, 5], [-5, -1, 5, 9], [-5, -1, 5, 7], [-5, -1, 5, 7, 9], [-5, -1, 3], [-5, -1, 3, 9], [-5, -1, 3, 7], [-5, -1, 3, 7, 9], [-5, -1, 3, 5], [-5, -1, 3, 5, 9], [-5, -1, 3, 5, 7], [-5, -1, 3, 5, 7, 9], [-5, -1, 1], [-5, -1, 1, 9], [-5, -1, 1, 7], [-5, -1, 1, 7, 9], [-5, -1, 1, 5], [-5, -1, 1, 5, 9], [-5, -1, 1, 5, 7], [-5, -1, 1, 5, 7, 9], [-5, -1, 1, 3], [-5, -1, 1, 3, 9], [-5, -1, 1, 3, 7], [-5, -1, 1, 3, 7, 9], [-5, -1, 1, 3, 5], [-5, -1, 1, 3, 5, 9], [-5, -1, 1, 3, 5, 7], [-5, -1, 1, 3, 5, 7, 9], [-5, -3], [-5, -3, 9], [-5, -3, 7], [-5, -3, 7, 9], [-5, -3, 5], [-5, -3, 5, 9], [-5, -3, 5, 7], [-5, -3, 5, 7, 9], [-5, -3, 3], [-5, -3, 3, 9], [-5, -3, 3, 7], [-5, -3, 3, 7, 9], [-5, -3, 3, 5], [-5, -3, 3, 5, 9], [-5, -3, 3, 5, 7], [-5, -3, 3, 5, 7, 9], [-5, -3, 1], [-5, -3, 1, 9], [-5, -3, 1, 7], [-5, -3, 1, 7, 9], [-5, -3, 1, 5], [-5, -3, 1, 5, 9], [-5, -3, 1, 5, 7], [-5, -3, 1, 5, 7, 9], [-5, -3, 1, 3], [-5, -3, 1, 3, 9], [-5, -3, 1, 3, 7], [-5, -3, 1, 3, 7, 9], [-5, -3, 1, 3, 5], [-5, -3, 1, 3, 5, 9], [-5, -3, 1, 3, 5, 7], [-5, -3, 1, 3, 5, 7, 9], [-5, -3, -1], [-5, -3, -1, 9], [-5, -3, -1, 7], [-5, -3, -1, 7, 9], [-5, -3, -1, 5], [-5, -3, -1, 5, 9], [-5, -3, -1, 5, 7], [-5, -3, -1, 5, 7, 9], [-5, -3, -1, 3], [-5, -3, -1, 3, 9], [-5, -3, -1, 3, 7], [-5, -3, -1, 3, 7, 9], [-5, -3, -1, 3, 5], [-5, -3, -1, 3, 5, 9], [-5, -3, -1, 3, 5, 7], [-5, -3, -1, 3, 5, 7, 9], [-5, -3, -1, 1], [-5, -3, -1, 1, 9], [-5, -3, -1, 1, 7], [-5, -3, -1, 1, 7, 9], [-5, -3, -1, 1, 5], [-5, -3, -1, 1, 5, 9], [-5, -3, -1, 1, 5, 7], [-5, -3, -1, 1, 5, 7, 9], [-5, -3, -1, 1, 3], [-5, -3, -1, 1, 3, 9], [-5, -3, -1, 1, 3, 7], [-5, -3, -1, 1, 3, 7, 9], [-5, -3, -1, 1, 3, 5], [-5, -3, -1, 1, 3, 5, 9], [-5, -3, -1, 1, 3, 5, 7], [-5, -3, -1, 1, 3, 5, 7, 9], [-7], [-7, 9], [-7, 7], [-7, 7, 9], [-7, 5], [-7, 5, 9], [-7, 5, 7], [-7, 5, 7, 9], [-7, 3], [-7, 3, 9], [-7, 3, 7], [-7, 3, 7, 9], [-7, 3, 5], [-7, 3, 5, 9], [-7, 3, 5, 7], [-7, 3, 5, 7, 9], [-7, 1], [-7, 1, 9], [-7, 1, 7], [-7, 1, 7, 9], [-7, 1, 5], [-7, 1, 5, 9], [-7, 1, 5, 7], [-7, 1, 5, 7, 9], [-7, 1, 3], [-7, 1, 3, 9], [-7, 1, 3, 7], [-7, 1, 3, 7, 9], [-7, 1, 3, 5], [-7, 1, 3, 5, 9], [-7, 1, 3, 5, 7], [-7, 1, 3, 5, 7, 9], [-7, -1], [-7, -1, 9], [-7, -1, 7], [-7, -1, 7, 9], [-7, -1, 5], [-7, -1, 5, 9], [-7, -1, 5, 7], [-7, -1, 5, 7, 9], [-7, -1, 3], [-7, -1, 3, 9], [-7, -1, 3, 7], [-7, -1, 3, 7, 9], [-7, -1, 3, 5], [-7, -1, 3, 5, 9], [-7, -1, 3, 5, 7], [-7, -1, 3, 5, 7, 9], [-7, -1, 1], [-7, -1, 1, 9], [-7, -1, 1, 7], [-7, -1, 1, 7, 9], [-7, -1, 1, 5], [-7, -1, 1, 5, 9], [-7, -1, 1, 5, 7], [-7, -1, 1, 5, 7, 9], [-7, -1, 1, 3], [-7, -1, 1, 3, 9], [-7, -1, 1, 3, 7], [-7, -1, 1, 3, 7, 9], [-7, -1, 1, 3, 5], [-7, -1, 1, 3, 5, 9], [-7, -1, 1, 3, 5, 7], [-7, -1, 1, 3, 5, 7, 9], [-7, -3], [-7, -3, 9], [-7, -3, 7], [-7, -3, 7, 9], [-7, -3, 5], [-7, -3, 5, 9], [-7, -3, 5, 7], [-7, -3, 5, 7, 9], [-7, -3, 3], [-7, -3, 3, 9], [-7, -3, 3, 7], [-7, -3, 3, 7, 9], [-7, -3, 3, 5], [-7, -3, 3, 5, 9], [-7, -3, 3, 5, 7], [-7, -3, 3, 5, 7, 9], [-7, -3, 1], [-7, -3, 1, 9], [-7, -3, 1, 7], [-7, -3, 1, 7, 9], [-7, -3, 1, 5], [-7, -3, 1, 5, 9], [-7, -3, 1, 5, 7], [-7, -3, 1, 5, 7, 9], [-7, -3, 1, 3], [-7, -3, 1, 3, 9], [-7, -3, 1, 3, 7], [-7, -3, 1, 3, 7, 9], [-7, -3, 1, 3, 5], [-7, -3, 1, 3, 5, 9], [-7, -3, 1, 3, 5, 7], [-7, -3, 1, 3, 5, 7, 9], [-7, -3, -1], [-7, -3, -1, 9], [-7, -3, -1, 7], [-7, -3, -1, 7, 9], [-7, -3, -1, 5], [-7, -3, -1, 5, 9], [-7, -3, -1, 5, 7], [-7, -3, -1, 5, 7, 9], [-7, -3, -1, 3], [-7, -3, -1, 3, 9], [-7, -3, -1, 3, 7], [-7, -3, -1, 3, 7, 9], [-7, -3, -1, 3, 5], [-7, -3, -1, 3, 5, 9], [-7, -3, -1, 3, 5, 7], [-7, -3, -1, 3, 5, 7, 9], [-7, -3, -1, 1], [-7, -3, -1, 1, 9], [-7, -3, -1, 1, 7], [-7, -3, -1, 1, 7, 9], [-7, -3, -1, 1, 5], [-7, -3, -1, 1, 5, 9], [-7, -3, -1, 1, 5, 7], [-7, -3, -1, 1, 5, 7, 9], [-7, -3, -1, 1, 3], [-7, -3, -1, 1, 3, 9], [-7, -3, -1, 1, 3, 7], [-7, -3, -1, 1, 3, 7, 9], [-7, -3, -1, 1, 3, 5], [-7, -3, -1, 1, 3, 5, 9], [-7, -3, -1, 1, 3, 5, 7], [-7, -3, -1, 1, 3, 5, 7, 9], [-7, -5], [-7, -5, 9], [-7, -5, 7], [-7, -5, 7, 9], [-7, -5, 5], [-7, -5, 5, 9], [-7, -5, 5, 7], [-7, -5, 5, 7, 9], [-7, -5, 3], [-7, -5, 3, 9], [-7, -5, 3, 7], [-7, -5, 3, 7, 9], [-7, -5, 3, 5], [-7, -5, 3, 5, 9], [-7, -5, 3, 5, 7], [-7, -5, 3, 5, 7, 9], [-7, -5, 1], [-7, -5, 1, 9], [-7, -5, 1, 7], [-7, -5, 1, 7, 9], [-7, -5, 1, 5], [-7, -5, 1, 5, 9], [-7, -5, 1, 5, 7], [-7, -5, 1, 5, 7, 9], [-7, -5, 1, 3], [-7, -5, 1, 3, 9], [-7, -5, 1, 3, 7], [-7, -5, 1, 3, 7, 9], [-7, -5, 1, 3, 5], [-7, -5, 1, 3, 5, 9], [-7, -5, 1, 3, 5, 7], [-7, -5, 1, 3, 5, 7, 9], [-7, -5, -1], [-7, -5, -1, 9], [-7, -5, -1, 7], [-7, -5, -1, 7, 9], [-7, -5, -1, 5], [-7, -5, -1, 5, 9], [-7, -5, -1, 5, 7], [-7, -5, -1, 5, 7, 9], [-7, -5, -1, 3], [-7, -5, -1, 3, 9], [-7, -5, -1, 3, 7], [-7, -5, -1, 3, 7, 9], [-7, -5, -1, 3, 5], [-7, -5, -1, 3, 5, 9], [-7, -5, -1, 3, 5, 7], [-7, -5, -1, 3, 5, 7, 9], [-7, -5, -1, 1], [-7, -5, -1, 1, 9], [-7, -5, -1, 1, 7], [-7, -5, -1, 1, 7, 9], [-7, -5, -1, 1, 5], [-7, -5, -1, 1, 5, 9], [-7, -5, -1, 1, 5, 7], [-7, -5, -1, 1, 5, 7, 9], [-7, -5, -1, 1, 3], [-7, -5, -1, 1, 3, 9], [-7, -5, -1, 1, 3, 7], [-7, -5, -1, 1, 3, 7, 9], [-7, -5, -1, 1, 3, 5], [-7, -5, -1, 1, 3, 5, 9], [-7, -5, -1, 1, 3, 5, 7], [-7, -5, -1, 1, 3, 5, 7, 9], [-7, -5, -3], [-7, -5, -3, 9], [-7, -5, -3, 7], [-7, -5, -3, 7, 9], [-7, -5, -3, 5], [-7, -5, -3, 5, 9], [-7, -5, -3, 5, 7], [-7, -5, -3, 5, 7, 9], [-7, -5, -3, 3], [-7, -5, -3, 3, 9], [-7, -5, -3, 3, 7], [-7, -5, -3, 3, 7, 9], [-7, -5, -3, 3, 5], [-7, -5, -3, 3, 5, 9], [-7, -5, -3, 3, 5, 7], [-7, -5, -3, 3, 5, 7, 9], [-7, -5, -3, 1], [-7, -5, -3, 1, 9], [-7, -5, -3, 1, 7], [-7, -5, -3, 1, 7, 9], [-7, -5, -3, 1, 5], [-7, -5, -3, 1, 5, 9], [-7, -5, -3, 1, 5, 7], [-7, -5, -3, 1, 5, 7, 9], [-7, -5, -3, 1, 3], [-7, -5, -3, 1, 3, 9], [-7, -5, -3, 1, 3, 7], [-7, -5, -3, 1, 3, 7, 9], [-7, -5, -3, 1, 3, 5], [-7, -5, -3, 1, 3, 5, 9], [-7, -5, -3, 1, 3, 5, 7], [-7, -5, -3, 1, 3, 5, 7, 9], [-7, -5, -3, -1], [-7, -5, -3, -1, 9], [-7, -5, -3, -1, 7], [-7, -5, -3, -1, 7, 9], [-7, -5, -3, -1, 5], [-7, -5, -3, -1, 5, 9], [-7, -5, -3, -1, 5, 7], [-7, -5, -3, -1, 5, 7, 9], [-7, -5, -3, -1, 3], [-7, -5, -3, -1, 3, 9], [-7, -5, -3, -1, 3, 7], [-7, -5, -3, -1, 3, 7, 9], [-7, -5, -3, -1, 3, 5], [-7, -5, -3, -1, 3, 5, 9], [-7, -5, -3, -1, 3, 5, 7], [-7, -5, -3, -1, 3, 5, 7, 9], [-7, -5, -3, -1, 1], [-7, -5, -3, -1, 1, 9], [-7, -5, -3, -1, 1, 7], [-7, -5, -3, -1, 1, 7, 9], [-7, -5, -3, -1, 1, 5], [-7, -5, -3, -1, 1, 5, 9], [-7, -5, -3, -1, 1, 5, 7], [-7, -5, -3, -1, 1, 5, 7, 9], [-7, -5, -3, -1, 1, 3], [-7, -5, -3, -1, 1, 3, 9], [-7, -5, -3, -1, 1, 3, 7], [-7, -5, -3, -1, 1, 3, 7, 9], [-7, -5, -3, -1, 1, 3, 5], [-7, -5, -3, -1, 1, 3, 5, 9], [-7, -5, -3, -1, 1, 3, 5, 7], [-7, -5, -3, -1, 1, 3, 5, 7, 9], [-9], [-9, 9], [-9, 7], [-9, 7, 9], [-9, 5], [-9, 5, 9], [-9, 5, 7], [-9, 5, 7, 9], [-9, 3], [-9, 3, 9], [-9, 3, 7], [-9, 3, 7, 9], [-9, 3, 5], [-9, 3, 5, 9], [-9, 3, 5, 7], [-9, 3, 5, 7, 9], [-9, 1], [-9, 1, 9], [-9, 1, 7], [-9, 1, 7, 9], [-9, 1, 5], [-9, 1, 5, 9], [-9, 1, 5, 7], [-9, 1, 5, 7, 9], [-9, 1, 3], [-9, 1, 3, 9], [-9, 1, 3, 7], [-9, 1, 3, 7, 9], [-9, 1, 3, 5], [-9, 1, 3, 5, 9], [-9, 1, 3, 5, 7], [-9, 1, 3, 5, 7, 9], [-9, -1], [-9, -1, 9], [-9, -1, 7], [-9, -1, 7, 9], [-9, -1, 5], [-9, -1, 5, 9], [-9, -1, 5, 7], [-9, -1, 5, 7, 9], [-9, -1, 3], [-9, -1, 3, 9], [-9, -1, 3, 7], [-9, -1, 3, 7, 9], [-9, -1, 3, 5], [-9, -1, 3, 5, 9], [-9, -1, 3, 5, 7], [-9, -1, 3, 5, 7, 9], [-9, -1, 1], [-9, -1, 1, 9], [-9, -1, 1, 7], [-9, -1, 1, 7, 9], [-9, -1, 1, 5], [-9, -1, 1, 5, 9], [-9, -1, 1, 5, 7], [-9, -1, 1, 5, 7, 9], [-9, -1, 1, 3], [-9, -1, 1, 3, 9], [-9, -1, 1, 3, 7], [-9, -1, 1, 3, 7, 9], [-9, -1, 1, 3, 5], [-9, -1, 1, 3, 5, 9], [-9, -1, 1, 3, 5, 7], [-9, -1, 1, 3, 5, 7, 9], [-9, -3], [-9, -3, 9], [-9, -3, 7], [-9, -3, 7, 9], [-9, -3, 5], [-9, -3, 5, 9], [-9, -3, 5, 7], [-9, -3, 5, 7, 9], [-9, -3, 3], [-9, -3, 3, 9], [-9, -3, 3, 7], [-9, -3, 3, 7, 9], [-9, -3, 3, 5], [-9, -3, 3, 5, 9], [-9, -3, 3, 5, 7], [-9, -3, 3, 5, 7, 9], [-9, -3, 1], [-9, -3, 1, 9], [-9, -3, 1, 7], [-9, -3, 1, 7, 9], [-9, -3, 1, 5], [-9, -3, 1, 5, 9], [-9, -3, 1, 5, 7], [-9, -3, 1, 5, 7, 9], [-9, -3, 1, 3], [-9, -3, 1, 3, 9], [-9, -3, 1, 3, 7], [-9, -3, 1, 3, 7, 9], [-9, -3, 1, 3, 5], [-9, -3, 1, 3, 5, 9], [-9, -3, 1, 3, 5, 7], [-9, -3, 1, 3, 5, 7, 9], [-9, -3, -1], [-9, -3, -1, 9], [-9, -3, -1, 7], [-9, -3, -1, 7, 9], [-9, -3, -1, 5], [-9, -3, -1, 5, 9], [-9, -3, -1, 5, 7], [-9, -3, -1, 5, 7, 9], [-9, -3, -1, 3], [-9, -3, -1, 3, 9], [-9, -3, -1, 3, 7], [-9, -3, -1, 3, 7, 9], [-9, -3, -1, 3, 5], [-9, -3, -1, 3, 5, 9], [-9, -3, -1, 3, 5, 7], [-9, -3, -1, 3, 5, 7, 9], [-9, -3, -1, 1], [-9, -3, -1, 1, 9], [-9, -3, -1, 1, 7], [-9, -3, -1, 1, 7, 9], [-9, -3, -1, 1, 5], [-9, -3, -1, 1, 5, 9], [-9, -3, -1, 1, 5, 7], [-9, -3, -1, 1, 5, 7, 9], [-9, -3, -1, 1, 3], [-9, -3, -1, 1, 3, 9], [-9, -3, -1, 1, 3, 7], [-9, -3, -1, 1, 3, 7, 9], [-9, -3, -1, 1, 3, 5], [-9, -3, -1, 1, 3, 5, 9], [-9, -3, -1, 1, 3, 5, 7], [-9, -3, -1, 1, 3, 5, 7, 9], [-9, -5], [-9, -5, 9], [-9, -5, 7], [-9, -5, 7, 9], [-9, -5, 5], [-9, -5, 5, 9], [-9, -5, 5, 7], [-9, -5, 5, 7, 9], [-9, -5, 3], [-9, -5, 3, 9], [-9, -5, 3, 7], [-9, -5, 3, 7, 9], [-9, -5, 3, 5], [-9, -5, 3, 5, 9], [-9, -5, 3, 5, 7], [-9, -5, 3, 5, 7, 9], [-9, -5, 1], [-9, -5, 1, 9], [-9, -5, 1, 7], [-9, -5, 1, 7, 9], [-9, -5, 1, 5], [-9, -5, 1, 5, 9], [-9, -5, 1, 5, 7], [-9, -5, 1, 5, 7, 9], [-9, -5, 1, 3], [-9, -5, 1, 3, 9], [-9, -5, 1, 3, 7], [-9, -5, 1, 3, 7, 9], [-9, -5, 1, 3, 5], [-9, -5, 1, 3, 5, 9], [-9, -5, 1, 3, 5, 7], [-9, -5, 1, 3, 5, 7, 9], [-9, -5, -1], [-9, -5, -1, 9], [-9, -5, -1, 7], [-9, -5, -1, 7, 9], [-9, -5, -1, 5], [-9, -5, -1, 5, 9], [-9, -5, -1, 5, 7], [-9, -5, -1, 5, 7, 9], [-9, -5, -1, 3], [-9, -5, -1, 3, 9], [-9, -5, -1, 3, 7], [-9, -5, -1, 3, 7, 9], [-9, -5, -1, 3, 5], [-9, -5, -1, 3, 5, 9], [-9, -5, -1, 3, 5, 7], [-9, -5, -1, 3, 5, 7, 9], [-9, -5, -1, 1], [-9, -5, -1, 1, 9], [-9, -5, -1, 1, 7], [-9, -5, -1, 1, 7, 9], [-9, -5, -1, 1, 5], [-9, -5, -1, 1, 5, 9], [-9, -5, -1, 1, 5, 7], [-9, -5, -1, 1, 5, 7, 9], [-9, -5, -1, 1, 3], [-9, -5, -1, 1, 3, 9], [-9, -5, -1, 1, 3, 7], [-9, -5, -1, 1, 3, 7, 9], [-9, -5, -1, 1, 3, 5], [-9, -5, -1, 1, 3, 5, 9], [-9, -5, -1, 1, 3, 5, 7], [-9, -5, -1, 1, 3, 5, 7, 9], [-9, -5, -3], [-9, -5, -3, 9], [-9, -5, -3, 7], [-9, -5, -3, 7, 9], [-9, -5, -3, 5], [-9, -5, -3, 5, 9], [-9, -5, -3, 5, 7], [-9, -5, -3, 5, 7, 9], [-9, -5, -3, 3], [-9, -5, -3, 3, 9], [-9, -5, -3, 3, 7], [-9, -5, -3, 3, 7, 9], [-9, -5, -3, 3, 5], [-9, -5, -3, 3, 5, 9], [-9, -5, -3, 3, 5, 7], [-9, -5, -3, 3, 5, 7, 9], [-9, -5, -3, 1], [-9, -5, -3, 1, 9], [-9, -5, -3, 1, 7], [-9, -5, -3, 1, 7, 9], [-9, -5, -3, 1, 5], [-9, -5, -3, 1, 5, 9], [-9, -5, -3, 1, 5, 7], [-9, -5, -3, 1, 5, 7, 9], [-9, -5, -3, 1, 3], [-9, -5, -3, 1, 3, 9], [-9, -5, -3, 1, 3, 7], [-9, -5, -3, 1, 3, 7, 9], [-9, -5, -3, 1, 3, 5], [-9, -5, -3, 1, 3, 5, 9], [-9, -5, -3, 1, 3, 5, 7], [-9, -5, -3, 1, 3, 5, 7, 9], [-9, -5, -3, -1], [-9, -5, -3, -1, 9], [-9, -5, -3, -1, 7], [-9, -5, -3, -1, 7, 9], [-9, -5, -3, -1, 5], [-9, -5, -3, -1, 5, 9], [-9, -5, -3, -1, 5, 7], [-9, -5, -3, -1, 5, 7, 9], [-9, -5, -3, -1, 3], [-9, -5, -3, -1, 3, 9], [-9, -5, -3, -1, 3, 7], [-9, -5, -3, -1, 3, 7, 9], [-9, -5, -3, -1, 3, 5], [-9, -5, -3, -1, 3, 5, 9], [-9, -5, -3, -1, 3, 5, 7], [-9, -5, -3, -1, 3, 5, 7, 9], [-9, -5, -3, -1, 1], [-9, -5, -3, -1, 1, 9], [-9, -5, -3, -1, 1, 7], [-9, -5, -3, -1, 1, 7, 9], [-9, -5, -3, -1, 1, 5], [-9, -5, -3, -1, 1, 5, 9], [-9, -5, -3, -1, 1, 5, 7], [-9, -5, -3, -1, 1, 5, 7, 9], [-9, -5, -3, -1, 1, 3], [-9, -5, -3, -1, 1, 3, 9], [-9, -5, -3, -1, 1, 3, 7], [-9, -5, -3, -1, 1, 3, 7, 9], [-9, -5, -3, -1, 1, 3, 5], [-9, -5, -3, -1, 1, 3, 5, 9], [-9, -5, -3, -1, 1, 3, 5, 7], [-9, -5, -3, -1, 1, 3, 5, 7, 9], [-9, -7], [-9, -7, 9], [-9, -7, 7], [-9, -7, 7, 9], [-9, -7, 5], [-9, -7, 5, 9], [-9, -7, 5, 7], [-9, -7, 5, 7, 9], [-9, -7, 3], [-9, -7, 3, 9], [-9, -7, 3, 7], [-9, -7, 3, 7, 9], [-9, -7, 3, 5], [-9, -7, 3, 5, 9], [-9, -7, 3, 5, 7], [-9, -7, 3, 5, 7, 9], [-9, -7, 1], [-9, -7, 1, 9], [-9, -7, 1, 7], [-9, -7, 1, 7, 9], [-9, -7, 1, 5], [-9, -7, 1, 5, 9], [-9, -7, 1, 5, 7], [-9, -7, 1, 5, 7, 9], [-9, -7, 1, 3], [-9, -7, 1, 3, 9], [-9, -7, 1, 3, 7], [-9, -7, 1, 3, 7, 9], [-9, -7, 1, 3, 5], [-9, -7, 1, 3, 5, 9], [-9, -7, 1, 3, 5, 7], [-9, -7, 1, 3, 5, 7, 9], [-9, -7, -1], [-9, -7, -1, 9], [-9, -7, -1, 7], [-9, -7, -1, 7, 9], [-9, -7, -1, 5], [-9, -7, -1, 5, 9], [-9, -7, -1, 5, 7], [-9, -7, -1, 5, 7, 9], [-9, -7, -1, 3], [-9, -7, -1, 3, 9], [-9, -7, -1, 3, 7], [-9, -7, -1, 3, 7, 9], [-9, -7, -1, 3, 5], [-9, -7, -1, 3, 5, 9], [-9, -7, -1, 3, 5, 7], [-9, -7, -1, 3, 5, 7, 9], [-9, -7, -1, 1], [-9, -7, -1, 1, 9], [-9, -7, -1, 1, 7], [-9, -7, -1, 1, 7, 9], [-9, -7, -1, 1, 5], [-9, -7, -1, 1, 5, 9], [-9, -7, -1, 1, 5, 7], [-9, -7, -1, 1, 5, 7, 9], [-9, -7, -1, 1, 3], [-9, -7, -1, 1, 3, 9], [-9, -7, -1, 1, 3, 7], [-9, -7, -1, 1, 3, 7, 9], [-9, -7, -1, 1, 3, 5], [-9, -7, -1, 1, 3, 5, 9], [-9, -7, -1, 1, 3, 5, 7], [-9, -7, -1, 1, 3, 5, 7, 9], [-9, -7, -3], [-9, -7, -3, 9], [-9, -7, -3, 7], [-9, -7, -3, 7, 9], [-9, -7, -3, 5], [-9, -7, -3, 5, 9], [-9, -7, -3, 5, 7], [-9, -7, -3, 5, 7, 9], [-9, -7, -3, 3], [-9, -7, -3, 3, 9], [-9, -7, -3, 3, 7], [-9, -7, -3, 3, 7, 9], [-9, -7, -3, 3, 5], [-9, -7, -3, 3, 5, 9], [-9, -7, -3, 3, 5, 7], [-9, -7, -3, 3, 5, 7, 9], [-9, -7, -3, 1], [-9, -7, -3, 1, 9], [-9, -7, -3, 1, 7], [-9, -7, -3, 1, 7, 9], [-9, -7, -3, 1, 5], [-9, -7, -3, 1, 5, 9], [-9, -7, -3, 1, 5, 7], [-9, -7, -3, 1, 5, 7, 9], [-9, -7, -3, 1, 3], [-9, -7, -3, 1, 3, 9], [-9, -7, -3, 1, 3, 7], [-9, -7, -3, 1, 3, 7, 9], [-9, -7, -3, 1, 3, 5], [-9, -7, -3, 1, 3, 5, 9], [-9, -7, -3, 1, 3, 5, 7], [-9, -7, -3, 1, 3, 5, 7, 9], [-9, -7, -3, -1], [-9, -7, -3, -1, 9], [-9, -7, -3, -1, 7], [-9, -7, -3, -1, 7, 9], [-9, -7, -3, -1, 5], [-9, -7, -3, -1, 5, 9], [-9, -7, -3, -1, 5, 7], [-9, -7, -3, -1, 5, 7, 9], [-9, -7, -3, -1, 3], [-9, -7, -3, -1, 3, 9], [-9, -7, -3, -1, 3, 7], [-9, -7, -3, -1, 3, 7, 9], [-9, -7, -3, -1, 3, 5], [-9, -7, -3, -1, 3, 5, 9], [-9, -7, -3, -1, 3, 5, 7], [-9, -7, -3, -1, 3, 5, 7, 9], [-9, -7, -3, -1, 1], [-9, -7, -3, -1, 1, 9], [-9, -7, -3, -1, 1, 7], [-9, -7, -3, -1, 1, 7, 9], [-9, -7, -3, -1, 1, 5], [-9, -7, -3, -1, 1, 5, 9], [-9, -7, -3, -1, 1, 5, 7], [-9, -7, -3, -1, 1, 5, 7, 9], [-9, -7, -3, -1, 1, 3], [-9, -7, -3, -1, 1, 3, 9], [-9, -7, -3, -1, 1, 3, 7], [-9, -7, -3, -1, 1, 3, 7, 9], [-9, -7, -3, -1, 1, 3, 5], [-9, -7, -3, -1, 1, 3, 5, 9], [-9, -7, -3, -1, 1, 3, 5, 7], [-9, -7, -3, -1, 1, 3, 5, 7, 9], [-9, -7, -5], [-9, -7, -5, 9], [-9, -7, -5, 7], [-9, -7, -5, 7, 9], [-9, -7, -5, 5], [-9, -7, -5, 5, 9], [-9, -7, -5, 5, 7], [-9, -7, -5, 5, 7, 9], [-9, -7, -5, 3], [-9, -7, -5, 3, 9], [-9, -7, -5, 3, 7], [-9, -7, -5, 3, 7, 9], [-9, -7, -5, 3, 5], [-9, -7, -5, 3, 5, 9], [-9, -7, -5, 3, 5, 7], [-9, -7, -5, 3, 5, 7, 9], [-9, -7, -5, 1], [-9, -7, -5, 1, 9], [-9, -7, -5, 1, 7], [-9, -7, -5, 1, 7, 9], [-9, -7, -5, 1, 5], [-9, -7, -5, 1, 5, 9], [-9, -7, -5, 1, 5, 7], [-9, -7, -5, 1, 5, 7, 9], [-9, -7, -5, 1, 3], [-9, -7, -5, 1, 3, 9], [-9, -7, -5, 1, 3, 7], [-9, -7, -5, 1, 3, 7, 9], [-9, -7, -5, 1, 3, 5], [-9, -7, -5, 1, 3, 5, 9], [-9, -7, -5, 1, 3, 5, 7], [-9, -7, -5, 1, 3, 5, 7, 9], [-9, -7, -5, -1], [-9, -7, -5, -1, 9], [-9, -7, -5, -1, 7], [-9, -7, -5, -1, 7, 9], [-9, -7, -5, -1, 5], [-9, -7, -5, -1, 5, 9], [-9, -7, -5, -1, 5, 7], [-9, -7, -5, -1, 5, 7, 9], [-9, -7, -5, -1, 3], [-9, -7, -5, -1, 3, 9], [-9, -7, -5, -1, 3, 7], [-9, -7, -5, -1, 3, 7, 9], [-9, -7, -5, -1, 3, 5], [-9, -7, -5, -1, 3, 5, 9], [-9, -7, -5, -1, 3, 5, 7], [-9, -7, -5, -1, 3, 5, 7, 9], [-9, -7, -5, -1, 1], [-9, -7, -5, -1, 1, 9], [-9, -7, -5, -1, 1, 7], [-9, -7, -5, -1, 1, 7, 9], [-9, -7, -5, -1, 1, 5], [-9, -7, -5, -1, 1, 5, 9], [-9, -7, -5, -1, 1, 5, 7], [-9, -7, -5, -1, 1, 5, 7, 9], [-9, -7, -5, -1, 1, 3], [-9, -7, -5, -1, 1, 3, 9], [-9, -7, -5, -1, 1, 3, 7], [-9, -7, -5, -1, 1, 3, 7, 9], [-9, -7, -5, -1, 1, 3, 5], [-9, -7, -5, -1, 1, 3, 5, 9], [-9, -7, -5, -1, 1, 3, 5, 7], [-9, -7, -5, -1, 1, 3, 5, 7, 9], [-9, -7, -5, -3], [-9, -7, -5, -3, 9], [-9, -7, -5, -3, 7], [-9, -7, -5, -3, 7, 9], [-9, -7, -5, -3, 5], [-9, -7, -5, -3, 5, 9], [-9, -7, -5, -3, 5, 7], [-9, -7, -5, -3, 5, 7, 9], [-9, -7, -5, -3, 3], [-9, -7, -5, -3, 3, 9], [-9, -7, -5, -3, 3, 7], [-9, -7, -5, -3, 3, 7, 9], [-9, -7, -5, -3, 3, 5], [-9, -7, -5, -3, 3, 5, 9], [-9, -7, -5, -3, 3, 5, 7], [-9, -7, -5, -3, 3, 5, 7, 9], [-9, -7, -5, -3, 1], [-9, -7, -5, -3, 1, 9], [-9, -7, -5, -3, 1, 7], [-9, -7, -5, -3, 1, 7, 9], [-9, -7, -5, -3, 1, 5], [-9, -7, -5, -3, 1, 5, 9], [-9, -7, -5, -3, 1, 5, 7], [-9, -7, -5, -3, 1, 5, 7, 9], [-9, -7, -5, -3, 1, 3], [-9, -7, -5, -3, 1, 3, 9], [-9, -7, -5, -3, 1, 3, 7], [-9, -7, -5, -3, 1, 3, 7, 9], [-9, -7, -5, -3, 1, 3, 5], [-9, -7, -5, -3, 1, 3, 5, 9], [-9, -7, -5, -3, 1, 3, 5, 7], [-9, -7, -5, -3, 1, 3, 5, 7, 9], [-9, -7, -5, -3, -1], [-9, -7, -5, -3, -1, 9], [-9, -7, -5, -3, -1, 7], [-9, -7, -5, -3, -1, 7, 9], [-9, -7, -5, -3, -1, 5], [-9, -7, -5, -3, -1, 5, 9], [-9, -7, -5, -3, -1, 5, 7], [-9, -7, -5, -3, -1, 5, 7, 9], [-9, -7, -5, -3, -1, 3], [-9, -7, -5, -3, -1, 3, 9], [-9, -7, -5, -3, -1, 3, 7], [-9, -7, -5, -3, -1, 3, 7, 9], [-9, -7, -5, -3, -1, 3, 5], [-9, -7, -5, -3, -1, 3, 5, 9], [-9, -7, -5, -3, -1, 3, 5, 7], [-9, -7, -5, -3, -1, 3, 5, 7, 9], [-9, -7, -5, -3, -1, 1], [-9, -7, -5, -3, -1, 1, 9], [-9, -7, -5, -3, -1, 1, 7], [-9, -7, -5, -3, -1, 1, 7, 9], [-9, -7, -5, -3, -1, 1, 5], [-9, -7, -5, -3, -1, 1, 5, 9], [-9, -7, -5, -3, -1, 1, 5, 7], [-9, -7, -5, -3, -1, 1, 5, 7, 9], [-9, -7, -5, -3, -1, 1, 3], [-9, -7, -5, -3, -1, 1, 3, 9], [-9, -7, -5, -3, -1, 1, 3, 7], [-9, -7, -5, -3, -1, 1, 3, 7, 9], [-9, -7, -5, -3, -1, 1, 3, 5], [-9, -7, -5, -3, -1, 1, 3, 5, 9], [-9, -7, -5, -3, -1, 1, 3, 5, 7], [-9, -7, -5, -3, -1, 1, 3, 5, 7, 9]]"
      },
      {
        "input": "nums = [-5, -3, -1, 0, 1, 3, 5]",
        "output": "[[], [5], [3], [3, 5], [1], [1, 5], [1, 3], [1, 3, 5], [0], [0, 5], [0, 3], [0, 3, 5], [0, 1], [0, 1, 5], [0, 1, 3], [0, 1, 3, 5], [-1], [-1, 5], [-1, 3], [-1, 3, 5], [-1, 1], [-1, 1, 5], [-1, 1, 3], [-1, 1, 3, 5], [-1, 0], [-1, 0, 5], [-1, 0, 3], [-1, 0, 3, 5], [-1, 0, 1], [-1, 0, 1, 5], [-1, 0, 1, 3], [-1, 0, 1, 3, 5], [-3], [-3, 5], [-3, 3], [-3, 3, 5], [-3, 1], [-3, 1, 5], [-3, 1, 3], [-3, 1, 3, 5], [-3, 0], [-3, 0, 5], [-3, 0, 3], [-3, 0, 3, 5], [-3, 0, 1], [-3, 0, 1, 5], [-3, 0, 1, 3], [-3, 0, 1, 3, 5], [-3, -1], [-3, -1, 5], [-3, -1, 3], [-3, -1, 3, 5], [-3, -1, 1], [-3, -1, 1, 5], [-3, -1, 1, 3], [-3, -1, 1, 3, 5], [-3, -1, 0], [-3, -1, 0, 5], [-3, -1, 0, 3], [-3, -1, 0, 3, 5], [-3, -1, 0, 1], [-3, -1, 0, 1, 5], [-3, -1, 0, 1, 3], [-3, -1, 0, 1, 3, 5], [-5], [-5, 5], [-5, 3], [-5, 3, 5], [-5, 1], [-5, 1, 5], [-5, 1, 3], [-5, 1, 3, 5], [-5, 0], [-5, 0, 5], [-5, 0, 3], [-5, 0, 3, 5], [-5, 0, 1], [-5, 0, 1, 5], [-5, 0, 1, 3], [-5, 0, 1, 3, 5], [-5, -1], [-5, -1, 5], [-5, -1, 3], [-5, -1, 3, 5], [-5, -1, 1], [-5, -1, 1, 5], [-5, -1, 1, 3], [-5, -1, 1, 3, 5], [-5, -1, 0], [-5, -1, 0, 5], [-5, -1, 0, 3], [-5, -1, 0, 3, 5], [-5, -1, 0, 1], [-5, -1, 0, 1, 5], [-5, -1, 0, 1, 3], [-5, -1, 0, 1, 3, 5], [-5, -3], [-5, -3, 5], [-5, -3, 3], [-5, -3, 3, 5], [-5, -3, 1], [-5, -3, 1, 5], [-5, -3, 1, 3], [-5, -3, 1, 3, 5], [-5, -3, 0], [-5, -3, 0, 5], [-5, -3, 0, 3], [-5, -3, 0, 3, 5], [-5, -3, 0, 1], [-5, -3, 0, 1, 5], [-5, -3, 0, 1, 3], [-5, -3, 0, 1, 3, 5], [-5, -3, -1], [-5, -3, -1, 5], [-5, -3, -1, 3], [-5, -3, -1, 3, 5], [-5, -3, -1, 1], [-5, -3, -1, 1, 5], [-5, -3, -1, 1, 3], [-5, -3, -1, 1, 3, 5], [-5, -3, -1, 0], [-5, -3, -1, 0, 5], [-5, -3, -1, 0, 3], [-5, -3, -1, 0, 3, 5], [-5, -3, -1, 0, 1], [-5, -3, -1, 0, 1, 5], [-5, -3, -1, 0, 1, 3], [-5, -3, -1, 0, 1, 3, 5]]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11]",
        "output": "[[], [11], [9], [9, 11], [7], [7, 11], [7, 9], [7, 9, 11], [5], [5, 11], [5, 9], [5, 9, 11], [5, 7], [5, 7, 11], [5, 7, 9], [5, 7, 9, 11], [3], [3, 11], [3, 9], [3, 9, 11], [3, 7], [3, 7, 11], [3, 7, 9], [3, 7, 9, 11], [3, 5], [3, 5, 11], [3, 5, 9], [3, 5, 9, 11], [3, 5, 7], [3, 5, 7, 11], [3, 5, 7, 9], [3, 5, 7, 9, 11], [1], [1, 11], [1, 9], [1, 9, 11], [1, 7], [1, 7, 11], [1, 7, 9], [1, 7, 9, 11], [1, 5], [1, 5, 11], [1, 5, 9], [1, 5, 9, 11], [1, 5, 7], [1, 5, 7, 11], [1, 5, 7, 9], [1, 5, 7, 9, 11], [1, 3], [1, 3, 11], [1, 3, 9], [1, 3, 9, 11], [1, 3, 7], [1, 3, 7, 11], [1, 3, 7, 9], [1, 3, 7, 9, 11], [1, 3, 5], [1, 3, 5, 11], [1, 3, 5, 9], [1, 3, 5, 9, 11], [1, 3, 5, 7], [1, 3, 5, 7, 11], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9, 11]]"
      },
      {
        "input": "nums = [1, 4, 9, 16, 25, 36, 49, 64, 81]",
        "output": "[[], [81], [64], [64, 81], [49], [49, 81], [49, 64], [49, 64, 81], [36], [36, 81], [36, 64], [36, 64, 81], [36, 49], [36, 49, 81], [36, 49, 64], [36, 49, 64, 81], [25], [25, 81], [25, 64], [25, 64, 81], [25, 49], [25, 49, 81], [25, 49, 64], [25, 49, 64, 81], [25, 36], [25, 36, 81], [25, 36, 64], [25, 36, 64, 81], [25, 36, 49], [25, 36, 49, 81], [25, 36, 49, 64], [25, 36, 49, 64, 81], [16], [16, 81], [16, 64], [16, 64, 81], [16, 49], [16, 49, 81], [16, 49, 64], [16, 49, 64, 81], [16, 36], [16, 36, 81], [16, 36, 64], [16, 36, 64, 81], [16, 36, 49], [16, 36, 49, 81], [16, 36, 49, 64], [16, 36, 49, 64, 81], [16, 25], [16, 25, 81], [16, 25, 64], [16, 25, 64, 81], [16, 25, 49], [16, 25, 49, 81], [16, 25, 49, 64], [16, 25, 49, 64, 81], [16, 25, 36], [16, 25, 36, 81], [16, 25, 36, 64], [16, 25, 36, 64, 81], [16, 25, 36, 49], [16, 25, 36, 49, 81], [16, 25, 36, 49, 64], [16, 25, 36, 49, 64, 81], [9], [9, 81], [9, 64], [9, 64, 81], [9, 49], [9, 49, 81], [9, 49, 64], [9, 49, 64, 81], [9, 36], [9, 36, 81], [9, 36, 64], [9, 36, 64, 81], [9, 36, 49], [9, 36, 49, 81], [9, 36, 49, 64], [9, 36, 49, 64, 81], [9, 25], [9, 25, 81], [9, 25, 64], [9, 25, 64, 81], [9, 25, 49], [9, 25, 49, 81], [9, 25, 49, 64], [9, 25, 49, 64, 81], [9, 25, 36], [9, 25, 36, 81], [9, 25, 36, 64], [9, 25, 36, 64, 81], [9, 25, 36, 49], [9, 25, 36, 49, 81], [9, 25, 36, 49, 64], [9, 25, 36, 49, 64, 81], [9, 16], [9, 16, 81], [9, 16, 64], [9, 16, 64, 81], [9, 16, 49], [9, 16, 49, 81], [9, 16, 49, 64], [9, 16, 49, 64, 81], [9, 16, 36], [9, 16, 36, 81], [9, 16, 36, 64], [9, 16, 36, 64, 81], [9, 16, 36, 49], [9, 16, 36, 49, 81], [9, 16, 36, 49, 64], [9, 16, 36, 49, 64, 81], [9, 16, 25], [9, 16, 25, 81], [9, 16, 25, 64], [9, 16, 25, 64, 81], [9, 16, 25, 49], [9, 16, 25, 49, 81], [9, 16, 25, 49, 64], [9, 16, 25, 49, 64, 81], [9, 16, 25, 36], [9, 16, 25, 36, 81], [9, 16, 25, 36, 64], [9, 16, 25, 36, 64, 81], [9, 16, 25, 36, 49], [9, 16, 25, 36, 49, 81], [9, 16, 25, 36, 49, 64], [9, 16, 25, 36, 49, 64, 81], [4], [4, 81], [4, 64], [4, 64, 81], [4, 49], [4, 49, 81], [4, 49, 64], [4, 49, 64, 81], [4, 36], [4, 36, 81], [4, 36, 64], [4, 36, 64, 81], [4, 36, 49], [4, 36, 49, 81], [4, 36, 49, 64], [4, 36, 49, 64, 81], [4, 25], [4, 25, 81], [4, 25, 64], [4, 25, 64, 81], [4, 25, 49], [4, 25, 49, 81], [4, 25, 49, 64], [4, 25, 49, 64, 81], [4, 25, 36], [4, 25, 36, 81], [4, 25, 36, 64], [4, 25, 36, 64, 81], [4, 25, 36, 49], [4, 25, 36, 49, 81], [4, 25, 36, 49, 64], [4, 25, 36, 49, 64, 81], [4, 16], [4, 16, 81], [4, 16, 64], [4, 16, 64, 81], [4, 16, 49], [4, 16, 49, 81], [4, 16, 49, 64], [4, 16, 49, 64, 81], [4, 16, 36], [4, 16, 36, 81], [4, 16, 36, 64], [4, 16, 36, 64, 81], [4, 16, 36, 49], [4, 16, 36, 49, 81], [4, 16, 36, 49, 64], [4, 16, 36, 49, 64, 81], [4, 16, 25], [4, 16, 25, 81], [4, 16, 25, 64], [4, 16, 25, 64, 81], [4, 16, 25, 49], [4, 16, 25, 49, 81], [4, 16, 25, 49, 64], [4, 16, 25, 49, 64, 81], [4, 16, 25, 36], [4, 16, 25, 36, 81], [4, 16, 25, 36, 64], [4, 16, 25, 36, 64, 81], [4, 16, 25, 36, 49], [4, 16, 25, 36, 49, 81], [4, 16, 25, 36, 49, 64], [4, 16, 25, 36, 49, 64, 81], [4, 9], [4, 9, 81], [4, 9, 64], [4, 9, 64, 81], [4, 9, 49], [4, 9, 49, 81], [4, 9, 49, 64], [4, 9, 49, 64, 81], [4, 9, 36], [4, 9, 36, 81], [4, 9, 36, 64], [4, 9, 36, 64, 81], [4, 9, 36, 49], [4, 9, 36, 49, 81], [4, 9, 36, 49, 64], [4, 9, 36, 49, 64, 81], [4, 9, 25], [4, 9, 25, 81], [4, 9, 25, 64], [4, 9, 25, 64, 81], [4, 9, 25, 49], [4, 9, 25, 49, 81], [4, 9, 25, 49, 64], [4, 9, 25, 49, 64, 81], [4, 9, 25, 36], [4, 9, 25, 36, 81], [4, 9, 25, 36, 64], [4, 9, 25, 36, 64, 81], [4, 9, 25, 36, 49], [4, 9, 25, 36, 49, 81], [4, 9, 25, 36, 49, 64], [4, 9, 25, 36, 49, 64, 81], [4, 9, 16], [4, 9, 16, 81], [4, 9, 16, 64], [4, 9, 16, 64, 81], [4, 9, 16, 49], [4, 9, 16, 49, 81], [4, 9, 16, 49, 64], [4, 9, 16, 49, 64, 81], [4, 9, 16, 36], [4, 9, 16, 36, 81], [4, 9, 16, 36, 64], [4, 9, 16, 36, 64, 81], [4, 9, 16, 36, 49], [4, 9, 16, 36, 49, 81], [4, 9, 16, 36, 49, 64], [4, 9, 16, 36, 49, 64, 81], [4, 9, 16, 25], [4, 9, 16, 25, 81], [4, 9, 16, 25, 64], [4, 9, 16, 25, 64, 81], [4, 9, 16, 25, 49], [4, 9, 16, 25, 49, 81], [4, 9, 16, 25, 49, 64], [4, 9, 16, 25, 49, 64, 81], [4, 9, 16, 25, 36], [4, 9, 16, 25, 36, 81], [4, 9, 16, 25, 36, 64], [4, 9, 16, 25, 36, 64, 81], [4, 9, 16, 25, 36, 49], [4, 9, 16, 25, 36, 49, 81], [4, 9, 16, 25, 36, 49, 64], [4, 9, 16, 25, 36, 49, 64, 81], [1], [1, 81], [1, 64], [1, 64, 81], [1, 49], [1, 49, 81], [1, 49, 64], [1, 49, 64, 81], [1, 36], [1, 36, 81], [1, 36, 64], [1, 36, 64, 81], [1, 36, 49], [1, 36, 49, 81], [1, 36, 49, 64], [1, 36, 49, 64, 81], [1, 25], [1, 25, 81], [1, 25, 64], [1, 25, 64, 81], [1, 25, 49], [1, 25, 49, 81], [1, 25, 49, 64], [1, 25, 49, 64, 81], [1, 25, 36], [1, 25, 36, 81], [1, 25, 36, 64], [1, 25, 36, 64, 81], [1, 25, 36, 49], [1, 25, 36, 49, 81], [1, 25, 36, 49, 64], [1, 25, 36, 49, 64, 81], [1, 16], [1, 16, 81], [1, 16, 64], [1, 16, 64, 81], [1, 16, 49], [1, 16, 49, 81], [1, 16, 49, 64], [1, 16, 49, 64, 81], [1, 16, 36], [1, 16, 36, 81], [1, 16, 36, 64], [1, 16, 36, 64, 81], [1, 16, 36, 49], [1, 16, 36, 49, 81], [1, 16, 36, 49, 64], [1, 16, 36, 49, 64, 81], [1, 16, 25], [1, 16, 25, 81], [1, 16, 25, 64], [1, 16, 25, 64, 81], [1, 16, 25, 49], [1, 16, 25, 49, 81], [1, 16, 25, 49, 64], [1, 16, 25, 49, 64, 81], [1, 16, 25, 36], [1, 16, 25, 36, 81], [1, 16, 25, 36, 64], [1, 16, 25, 36, 64, 81], [1, 16, 25, 36, 49], [1, 16, 25, 36, 49, 81], [1, 16, 25, 36, 49, 64], [1, 16, 25, 36, 49, 64, 81], [1, 9], [1, 9, 81], [1, 9, 64], [1, 9, 64, 81], [1, 9, 49], [1, 9, 49, 81], [1, 9, 49, 64], [1, 9, 49, 64, 81], [1, 9, 36], [1, 9, 36, 81], [1, 9, 36, 64], [1, 9, 36, 64, 81], [1, 9, 36, 49], [1, 9, 36, 49, 81], [1, 9, 36, 49, 64], [1, 9, 36, 49, 64, 81], [1, 9, 25], [1, 9, 25, 81], [1, 9, 25, 64], [1, 9, 25, 64, 81], [1, 9, 25, 49], [1, 9, 25, 49, 81], [1, 9, 25, 49, 64], [1, 9, 25, 49, 64, 81], [1, 9, 25, 36], [1, 9, 25, 36, 81], [1, 9, 25, 36, 64], [1, 9, 25, 36, 64, 81], [1, 9, 25, 36, 49], [1, 9, 25, 36, 49, 81], [1, 9, 25, 36, 49, 64], [1, 9, 25, 36, 49, 64, 81], [1, 9, 16], [1, 9, 16, 81], [1, 9, 16, 64], [1, 9, 16, 64, 81], [1, 9, 16, 49], [1, 9, 16, 49, 81], [1, 9, 16, 49, 64], [1, 9, 16, 49, 64, 81], [1, 9, 16, 36], [1, 9, 16, 36, 81], [1, 9, 16, 36, 64], [1, 9, 16, 36, 64, 81], [1, 9, 16, 36, 49], [1, 9, 16, 36, 49, 81], [1, 9, 16, 36, 49, 64], [1, 9, 16, 36, 49, 64, 81], [1, 9, 16, 25], [1, 9, 16, 25, 81], [1, 9, 16, 25, 64], [1, 9, 16, 25, 64, 81], [1, 9, 16, 25, 49], [1, 9, 16, 25, 49, 81], [1, 9, 16, 25, 49, 64], [1, 9, 16, 25, 49, 64, 81], [1, 9, 16, 25, 36], [1, 9, 16, 25, 36, 81], [1, 9, 16, 25, 36, 64], [1, 9, 16, 25, 36, 64, 81], [1, 9, 16, 25, 36, 49], [1, 9, 16, 25, 36, 49, 81], [1, 9, 16, 25, 36, 49, 64], [1, 9, 16, 25, 36, 49, 64, 81], [1, 4], [1, 4, 81], [1, 4, 64], [1, 4, 64, 81], [1, 4, 49], [1, 4, 49, 81], [1, 4, 49, 64], [1, 4, 49, 64, 81], [1, 4, 36], [1, 4, 36, 81], [1, 4, 36, 64], [1, 4, 36, 64, 81], [1, 4, 36, 49], [1, 4, 36, 49, 81], [1, 4, 36, 49, 64], [1, 4, 36, 49, 64, 81], [1, 4, 25], [1, 4, 25, 81], [1, 4, 25, 64], [1, 4, 25, 64, 81], [1, 4, 25, 49], [1, 4, 25, 49, 81], [1, 4, 25, 49, 64], [1, 4, 25, 49, 64, 81], [1, 4, 25, 36], [1, 4, 25, 36, 81], [1, 4, 25, 36, 64], [1, 4, 25, 36, 64, 81], [1, 4, 25, 36, 49], [1, 4, 25, 36, 49, 81], [1, 4, 25, 36, 49, 64], [1, 4, 25, 36, 49, 64, 81], [1, 4, 16], [1, 4, 16, 81], [1, 4, 16, 64], [1, 4, 16, 64, 81], [1, 4, 16, 49], [1, 4, 16, 49, 81], [1, 4, 16, 49, 64], [1, 4, 16, 49, 64, 81], [1, 4, 16, 36], [1, 4, 16, 36, 81], [1, 4, 16, 36, 64], [1, 4, 16, 36, 64, 81], [1, 4, 16, 36, 49], [1, 4, 16, 36, 49, 81], [1, 4, 16, 36, 49, 64], [1, 4, 16, 36, 49, 64, 81], [1, 4, 16, 25], [1, 4, 16, 25, 81], [1, 4, 16, 25, 64], [1, 4, 16, 25, 64, 81], [1, 4, 16, 25, 49], [1, 4, 16, 25, 49, 81], [1, 4, 16, 25, 49, 64], [1, 4, 16, 25, 49, 64, 81], [1, 4, 16, 25, 36], [1, 4, 16, 25, 36, 81], [1, 4, 16, 25, 36, 64], [1, 4, 16, 25, 36, 64, 81], [1, 4, 16, 25, 36, 49], [1, 4, 16, 25, 36, 49, 81], [1, 4, 16, 25, 36, 49, 64], [1, 4, 16, 25, 36, 49, 64, 81], [1, 4, 9], [1, 4, 9, 81], [1, 4, 9, 64], [1, 4, 9, 64, 81], [1, 4, 9, 49], [1, 4, 9, 49, 81], [1, 4, 9, 49, 64], [1, 4, 9, 49, 64, 81], [1, 4, 9, 36], [1, 4, 9, 36, 81], [1, 4, 9, 36, 64], [1, 4, 9, 36, 64, 81], [1, 4, 9, 36, 49], [1, 4, 9, 36, 49, 81], [1, 4, 9, 36, 49, 64], [1, 4, 9, 36, 49, 64, 81], [1, 4, 9, 25], [1, 4, 9, 25, 81], [1, 4, 9, 25, 64], [1, 4, 9, 25, 64, 81], [1, 4, 9, 25, 49], [1, 4, 9, 25, 49, 81], [1, 4, 9, 25, 49, 64], [1, 4, 9, 25, 49, 64, 81], [1, 4, 9, 25, 36], [1, 4, 9, 25, 36, 81], [1, 4, 9, 25, 36, 64], [1, 4, 9, 25, 36, 64, 81], [1, 4, 9, 25, 36, 49], [1, 4, 9, 25, 36, 49, 81], [1, 4, 9, 25, 36, 49, 64], [1, 4, 9, 25, 36, 49, 64, 81], [1, 4, 9, 16], [1, 4, 9, 16, 81], [1, 4, 9, 16, 64], [1, 4, 9, 16, 64, 81], [1, 4, 9, 16, 49], [1, 4, 9, 16, 49, 81], [1, 4, 9, 16, 49, 64], [1, 4, 9, 16, 49, 64, 81], [1, 4, 9, 16, 36], [1, 4, 9, 16, 36, 81], [1, 4, 9, 16, 36, 64], [1, 4, 9, 16, 36, 64, 81], [1, 4, 9, 16, 36, 49], [1, 4, 9, 16, 36, 49, 81], [1, 4, 9, 16, 36, 49, 64], [1, 4, 9, 16, 36, 49, 64, 81], [1, 4, 9, 16, 25], [1, 4, 9, 16, 25, 81], [1, 4, 9, 16, 25, 64], [1, 4, 9, 16, 25, 64, 81], [1, 4, 9, 16, 25, 49], [1, 4, 9, 16, 25, 49, 81], [1, 4, 9, 16, 25, 49, 64], [1, 4, 9, 16, 25, 49, 64, 81], [1, 4, 9, 16, 25, 36], [1, 4, 9, 16, 25, 36, 81], [1, 4, 9, 16, 25, 36, 64], [1, 4, 9, 16, 25, 36, 64, 81], [1, 4, 9, 16, 25, 36, 49], [1, 4, 9, 16, 25, 36, 49, 81], [1, 4, 9, 16, 25, 36, 49, 64], [1, 4, 9, 16, 25, 36, 49, 64, 81]]"
      },
      {
        "input": "nums = [4, 8, 15, 16, 23, 42]",
        "output": "[[], [42], [23], [23, 42], [16], [16, 42], [16, 23], [16, 23, 42], [15], [15, 42], [15, 23], [15, 23, 42], [15, 16], [15, 16, 42], [15, 16, 23], [15, 16, 23, 42], [8], [8, 42], [8, 23], [8, 23, 42], [8, 16], [8, 16, 42], [8, 16, 23], [8, 16, 23, 42], [8, 15], [8, 15, 42], [8, 15, 23], [8, 15, 23, 42], [8, 15, 16], [8, 15, 16, 42], [8, 15, 16, 23], [8, 15, 16, 23, 42], [4], [4, 42], [4, 23], [4, 23, 42], [4, 16], [4, 16, 42], [4, 16, 23], [4, 16, 23, 42], [4, 15], [4, 15, 42], [4, 15, 23], [4, 15, 23, 42], [4, 15, 16], [4, 15, 16, 42], [4, 15, 16, 23], [4, 15, 16, 23, 42], [4, 8], [4, 8, 42], [4, 8, 23], [4, 8, 23, 42], [4, 8, 16], [4, 8, 16, 42], [4, 8, 16, 23], [4, 8, 16, 23, 42], [4, 8, 15], [4, 8, 15, 42], [4, 8, 15, 23], [4, 8, 15, 23, 42], [4, 8, 15, 16], [4, 8, 15, 16, 42], [4, 8, 15, 16, 23], [4, 8, 15, 16, 23, 42]]"
      }
    ]
  },
  {
    "id": 2576,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums.\nInitially, all of the indices are unmarked. You are allowed to make this operation any number of times:\n\nPick two different unmarked indices i and j such that 2 * nums[i] <= nums[j], then mark i and j.\n\nReturn the maximum possible number of marked indices in nums using the above operation any number of times.\n\u00a0\nExample 1:\n\nInput: nums = [3,5,2,4]\nOutput: 2\nExplanation: In the first operation: pick i = 2 and j = 1, the operation is allowed because 2 * nums[2] <= nums[1]. Then mark index 2 and 1.\nIt can be shown that there's no other valid operation so the answer is 2.\n\nExample 2:\n\nInput: nums = [9,2,5,4]\nOutput: 4\nExplanation: In the first operation: pick i = 3 and j = 0, the operation is allowed because 2 * nums[3] <= nums[0]. Then mark index 3 and 0.\nIn the second operation: pick i = 1 and j = 2, the operation is allowed because 2 * nums[1] <= nums[2]. Then mark index 1 and 2.\nSince there is no other operation, the answer is 4.\n\nExample 3:\n\nInput: nums = [7,6,8]\nOutput: 0\nExplanation: There is no valid operation to do, so the answer is 0.\n\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n\n\u00a0\n\n",
    "starterCode": "class Solution:\n    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [10,20,30,40,50,60]",
        "output": "6"
      },
      {
        "input": "nums = [1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000]",
        "output": "10"
      },
      {
        "input": "nums = [7,6,8]",
        "output": "0"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000]",
        "output": "0"
      },
      {
        "input": "nums = [5,10,20,25,30,35,40,45,50]",
        "output": "8"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000,1000000000]",
        "output": "0"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,2,3,4,4,5,6,6,7,8,8,9,10,10]",
        "output": "14"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [5,5,5,10,10,10,15,15,15,20,20,20]",
        "output": "12"
      },
      {
        "input": "nums = [10,20,30,40,50]",
        "output": "4"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19]",
        "output": "10"
      },
      {
        "input": "nums = [3,5,2,4]",
        "output": "2"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6]",
        "output": "6"
      },
      {
        "input": "nums = [5,10,20,40,80,160]",
        "output": "6"
      },
      {
        "input": "nums = [9,2,5,4]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,4,8,16,32]",
        "output": "6"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,4,8,16,32,64,128,256,512]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "nums = [1000000000,500000000,250000000,125000000,62500000,31250000,15625000,7812500,3906250,1953125]",
        "output": "10"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "16"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "20"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "14"
      },
      {
        "input": "nums = [7,14,21,28,35,42,49,56,63,70,77,84,91,98,105,112,119,126,133,140]",
        "output": "20"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 2, 20, 200, 2000, 20000, 200000, 2000000, 20000000, 200000000, 2000000000]",
        "output": "20"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]",
        "output": "10"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15]",
        "output": "26"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "10"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20]",
        "output": "40"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 3, 6, 12, 24, 48, 96]",
        "output": "8"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 6, 6, 12, 12]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "18"
      },
      {
        "input": "nums = [1,1,2,2,4,4,8,8,16,16,32,32,64,64,128,128]",
        "output": "16"
      },
      {
        "input": "nums = [3,9,27,81,243,729,2187,6561,19683,59049,177147,531441,1594323,4782969,14348907,43046721]",
        "output": "16"
      },
      {
        "input": "nums = [3, 6, 12, 24, 48, 96, 192, 384, 768, 1536, 3072, 6144, 12288, 24576, 49152, 98304, 196608, 393216, 786432, 1572864]",
        "output": "20"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]",
        "output": "0"
      },
      {
        "input": "nums = [50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800]",
        "output": "16"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "14"
      },
      {
        "input": "nums = [1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 440, 480, 520, 560, 600, 640, 680, 720, 760, 800, 880, 960, 1040, 1120, 1200]",
        "output": "56"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]",
        "output": "30"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60]",
        "output": "30"
      },
      {
        "input": "nums = [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171, 180, 189, 198, 207, 216, 225, 234, 243, 252, 261, 270]",
        "output": "30"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "30"
      },
      {
        "input": "nums = [2,5,7,8,10,13,15,16,19,20,22,23,25,27,28,30,32,33,35,37,38,40,41,43,45,46,48,50]",
        "output": "26"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]",
        "output": "24"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000]",
        "output": "6"
      },
      {
        "input": "nums = [1000000000,900000000,800000000,700000000,600000000,500000000,400000000,300000000,200000000,100000000]",
        "output": "10"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]",
        "output": "10"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]",
        "output": "20"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]",
        "output": "18"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17]",
        "output": "32"
      },
      {
        "input": "nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]",
        "output": "28"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
        "output": "14"
      },
      {
        "input": "nums = [5, 10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240, 20480, 40960, 81920, 163840, 327680, 655360, 1310720, 2621440, 5242880, 10485760, 20971520, 41943040, 83886080, 167772160, 335544320, 671088640]",
        "output": "28"
      },
      {
        "input": "nums = [1,2,3,6,12,24,48,96,192]",
        "output": "8"
      },
      {
        "input": "nums = [2, 4, 4, 8, 8, 8, 16, 16, 16, 16, 32, 32, 32, 32, 32]",
        "output": "14"
      },
      {
        "input": "nums = [50, 25, 10, 5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]",
        "output": "24"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]",
        "output": "24"
      },
      {
        "input": "nums = [1, 3, 5, 15, 25, 45, 75, 105, 150, 225, 300, 450, 600]",
        "output": "12"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]",
        "output": "12"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]",
        "output": "20"
      },
      {
        "input": "nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]",
        "output": "14"
      },
      {
        "input": "nums = [1,4,5,6,8,10,12,15,16,18,20,22,25,28,30]",
        "output": "14"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]",
        "output": "14"
      },
      {
        "input": "nums = [10,21,32,43,54,65,76,87,98,109,120,131,142,153,164,175,186,197,208]",
        "output": "18"
      },
      {
        "input": "nums = [1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946]",
        "output": "20"
      },
      {
        "input": "nums = [5,11,17,23,29,35,41,47,53,59,65,71,77,83,89,95,101,107,113,119]",
        "output": "20"
      },
      {
        "input": "nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144]",
        "output": "18"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536]",
        "output": "16"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500]",
        "output": "24"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]",
        "output": "10"
      },
      {
        "input": "nums = [2,4,8,16,32,64,128,256,512,1024]",
        "output": "10"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150]",
        "output": "30"
      },
      {
        "input": "nums = [1, 2, 3, 6, 9, 12, 18, 27, 36, 54, 81, 108, 162, 243, 324, 486, 729, 972, 1458, 2187, 2916, 4374, 6561, 8748, 13122, 19683, 26244, 39366, 59049, 78732, 118098, 177147, 236196, 354294, 531441, 708588, 1062882]",
        "output": "36"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "18"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,4,4,5,5,5,6,6,7,7,8,8,9,9,10,10,10]",
        "output": "22"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "14"
      },
      {
        "input": "nums = [1,5,25,125,625,3125,15625,78125,390625,1953125,9765625,48828125,244140625,1220703125,6103515625]",
        "output": "14"
      },
      {
        "input": "nums = [1, 3, 3, 7, 10, 15, 20, 25, 30, 40, 50, 60]",
        "output": "12"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50]",
        "output": "28"
      },
      {
        "input": "nums = [10,10,10,20,20,20,30,30,30,40,40,40,50,50,50]",
        "output": "12"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10]",
        "output": "30"
      },
      {
        "input": "nums = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288]",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]",
        "output": "20"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "12"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]",
        "output": "10"
      },
      {
        "input": "nums = [9,4,2,18,3,12,6,24,8,48]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "20"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90]",
        "output": "30"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50]",
        "output": "20"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "20"
      },
      {
        "input": "nums = [1, 5, 10, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170]",
        "output": "20"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250]",
        "output": "24"
      },
      {
        "input": "nums = [1,3,9,27,81,243,729,2187,6561,19683,59049,177147]",
        "output": "12"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "20"
      },
      {
        "input": "nums = [1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, 14348907, 43046721, 129140163, 387420489, 1162261467]",
        "output": "20"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]",
        "output": "20"
      },
      {
        "input": "nums = [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135]",
        "output": "14"
      },
      {
        "input": "nums = [7, 14, 28, 56, 112, 224, 448, 896, 1792, 3584, 7168, 14336, 28672, 57344, 114688, 229376, 458752, 917504, 1835008, 3670016]",
        "output": "20"
      },
      {
        "input": "nums = [2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304]",
        "output": "22"
      },
      {
        "input": "nums = [3,5,2,4,8,16,32,64]",
        "output": "8"
      },
      {
        "input": "nums = [1,3,9,27,81,243,729,2187,6561,19683,59049,177147,531441,1594323,4782969]",
        "output": "14"
      },
      {
        "input": "nums = [1, 3, 5, 10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180, 200]",
        "output": "20"
      },
      {
        "input": "nums = [10, 25, 30, 50, 60, 100, 120, 150, 200, 300]",
        "output": "10"
      },
      {
        "input": "nums = [30, 60, 120, 240, 480, 960, 1920, 3840, 7680, 15360, 30720, 61440, 122880, 245760, 491520, 983040, 1966080, 3932160, 7864320, 15728640, 31457280, 62914560, 125829120, 251658240, 503316480, 1006632960, 2013265920, 4026531840, 8053063680, 16106127360]",
        "output": "30"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80]",
        "output": "16"
      },
      {
        "input": "nums = [1, 2, 3, 6, 9, 12, 18, 24, 36, 48]",
        "output": "10"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115]",
        "output": "12"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9]",
        "output": "20"
      },
      {
        "input": "nums = [3, 3, 6, 6, 12, 12, 24, 24, 48, 48, 96, 96]",
        "output": "12"
      }
    ]
  },
  {
    "id": 2812,
    "difficulty": "Medium",
    "tags": [
      "Breadth-First Search",
      "Union Find",
      "Array",
      "Binary Search",
      "Matrix",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 0-indexed 2D matrix grid of size n x n, where (r, c) represents:\n\nA cell containing a thief if grid[r][c] = 1\nAn empty cell if grid[r][c] = 0\n\nYou are initially positioned at cell (0, 0). In one move, you can move to any adjacent cell in the grid, including cells containing thieves.\nThe safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid.\nReturn the maximum safeness factor of all paths leading to cell (n - 1, n - 1).\nAn adjacent cell of cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) and (r - 1, c) if it exists.\nThe Manhattan distance between two cells (a, b) and (x, y) is equal to |a - x| + |b - y|, where |val| denotes the absolute value of val.\n\u00a0\nExample 1:\n\n\nInput: grid = [[1,0,0],[0,0,0],[0,0,1]]\nOutput: 0\nExplanation: All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1).\n\nExample 2:\n\n\nInput: grid = [[0,0,1],[0,0,0],[0,0,0]]\nOutput: 2\nExplanation: The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor.\n\nExample 3:\n\n\nInput: grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]\nOutput: 2\nExplanation: The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2.\n- The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor.\n\n\u00a0\nConstraints:\n\n1 <= grid.length == n <= 400\ngrid[i].length == n\ngrid[i][j] is either 0 or 1.\nThere is at least one thief in the grid.\n\n",
    "starterCode": "class Solution:\n    def maximumSafenessFactor(self, grid: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "grid = [[0,0,0,0,1],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[1,0,0,0,0]]",
        "output": "3"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,1,0,1,0],[0,0,0,0,0],[0,1,0,1,0],[0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,1,0],[0,0,0,0],[0,0,0,0],[0,1,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,0,0],[0,0,0,0],[0,0,0,0],[0,0,1,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]",
        "output": "2"
      },
      {
        "input": "grid = [[0,0,1],[0,0,0],[0,0,0]]",
        "output": "2"
      },
      {
        "input": "grid = [[1,0,0],[0,0,0],[0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,1],[0,0,0],[1,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "2"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0]]",
        "output": "11"
      },
      {
        "input": "grid = [[0,0,0,0,0,1,0,0],[0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,1],[0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,1,0,0,0],[0,0,0,0,1,0],[1,0,0,0,0,0],[0,0,0,0,0,0],[0,1,0,0,0,1],[0,0,0,1,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0]]",
        "output": "2"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0]]",
        "output": "7"
      },
      {
        "input": "grid = [[0,0,0,0,0,1,0],[0,1,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,1],[1,0,0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0]]",
        "output": "9"
      },
      {
        "input": "grid = [[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,1],[0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,1],[0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,1,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]",
        "output": "15"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,1],[0,0,0,0,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[1,0,0,0,0,0]]",
        "output": "2"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0]]",
        "output": "2"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "3"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,1,0,1,0,1],[1,0,1,0,1,0],[0,1,0,1,0,1],[1,0,1,0,1,0],[0,1,0,1,0,1],[1,0,1,0,1,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,0,0,1,0,0,0],[0,0,0,0,0,0,0],[0,1,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,1,0,0,0],[0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0]]",
        "output": "3"
      },
      {
        "input": "grid = [[1,0,0,0,0,1],[0,0,0,0,0,0],[0,0,1,0,1,0],[0,0,0,0,0,0],[0,1,0,0,0,0],[1,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,1,0,0,0,0],[0,1,1,0,1,1,0,0],[0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,0],[0,1,0,0,0,1,0,0],[0,1,1,0,1,1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,1,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,1,0,1,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,1,0,1,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,1,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,1],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[1,0,0,0,0,0,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0]]",
        "output": "3"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,1],[0,1,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,1,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,1],[0,0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]",
        "output": "Error: cannot convert float infinity to integer"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,1],[0,0,0,1,0,0,0],[0,0,0,0,0,0,0],[0,1,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,1,0,0,0,0],[1,0,0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,0,1,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,1,1,0,1,1,0],[0,1,0,0,0,1,0],[0,0,0,0,0,0,0],[0,1,0,0,0,1,0],[0,1,1,0,1,1,0],[0,0,0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0]]",
        "output": "2"
      }
    ]
  },
  {
    "id": 2462,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Simulation",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 0-indexed integer array costs where costs[i] is the cost of hiring the ith worker.\nYou are also given two integers k and candidates. We want to hire exactly k workers according to the following rules:\n\nYou will run k sessions and hire exactly one worker in each session.\nIn each hiring session, choose the worker with the lowest cost from either the first candidates workers or the last candidates workers. Break the tie by the smallest index.\n\t\nFor example, if costs = [3,2,7,7,1,2] and candidates = 2, then in the first hiring session, we will choose the 4th worker because they have the lowest cost [3,2,7,7,1,2].\nIn the second hiring session, we will choose 1st worker because they have the same lowest cost as 4th worker but they have the smallest index [3,2,7,7,2]. Please note that the indexing may be changed in the process.\n\n\nIf there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.\nA worker can only be chosen once.\n\nReturn the total cost to hire exactly k workers.\n\u00a0\nExample 1:\n\nInput: costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4\nOutput: 11\nExplanation: We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [17,12,10,2,7,2,11,20,8]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2.\n- In the second hiring round we choose the worker from [17,12,10,7,2,11,20,8]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4.\n- In the third hiring round we choose the worker from [17,12,10,7,11,20,8]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers.\nThe total hiring cost is 11.\n\nExample 2:\n\nInput: costs = [1,2,4,1], k = 3, candidates = 3\nOutput: 4\nExplanation: We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [1,2,4,1]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers.\n- In the second hiring round we choose the worker from [2,4,1]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2.\n- In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [2,4]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4.\nThe total hiring cost is 4.\n\n\u00a0\nConstraints:\n\n1 <= costs.length <= 105 \n1 <= costs[i] <= 105\n1 <= k, candidates <= costs.length\n\n",
    "starterCode": "class Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n        ",
    "testCases": [
      {
        "input": "costs = [10,10,10,10,10], k = 4, candidates = 2",
        "output": "40"
      },
      {
        "input": "costs = [10,10,10,10,10], k = 5, candidates = 5",
        "output": "50"
      },
      {
        "input": "costs = [2,2,2,2,2,2,2,2,2,2], k = 5, candidates = 5",
        "output": "10"
      },
      {
        "input": "costs = [5,4,3,2,1], k = 5, candidates = 1",
        "output": "15"
      },
      {
        "input": "costs = [5,4,3,2,1], k = 3, candidates = 1",
        "output": "6"
      },
      {
        "input": "costs = [5,5,5,5], k = 2, candidates = 2",
        "output": "10"
      },
      {
        "input": "costs = [10,20,30,40,50], k = 5, candidates = 5",
        "output": "150"
      },
      {
        "input": "costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4",
        "output": "11"
      },
      {
        "input": "costs = [9,9,9,9,9,9,9,9,9,9], k = 10, candidates = 10",
        "output": "90"
      },
      {
        "input": "costs = [3,2,7,7,1,2], k = 2, candidates = 2",
        "output": "3"
      },
      {
        "input": "costs = [10,20,30,40,50], k = 2, candidates = 3",
        "output": "30"
      },
      {
        "input": "costs = [1,2,4,1], k = 3, candidates = 3",
        "output": "4"
      },
      {
        "input": "costs = [10,20,30,40,50], k = 3, candidates = 1",
        "output": "60"
      },
      {
        "input": "costs = [5,4,3,2,1], k = 2, candidates = 1",
        "output": "3"
      },
      {
        "input": "costs = [25,15,30,20,10], k = 4, candidates = 2",
        "output": "70"
      },
      {
        "input": "costs = [31,25,72,79,74], k = 3, candidates = 2",
        "output": "128"
      },
      {
        "input": "costs = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10], k = 5, candidates = 3",
        "output": "150"
      },
      {
        "input": "costs = [150,140,130,120,110,100,90,80,70,60,50,40,30,20,10], k = 7, candidates = 3",
        "output": "280"
      },
      {
        "input": "costs = [9,8,7,6,5,4,3,2,1], k = 9, candidates = 4",
        "output": "45"
      },
      {
        "input": "costs = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], k = 15, candidates = 15",
        "output": "300"
      },
      {
        "input": "costs = [50, 20, 30, 40, 10, 60, 70, 80, 90, 100], k = 6, candidates = 4",
        "output": "210"
      },
      {
        "input": "costs = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 10, candidates = 4",
        "output": "55"
      },
      {
        "input": "costs = [1, 3, 2, 4, 5, 7, 6, 8, 10, 9, 11, 13, 12, 14, 15], k = 8, candidates = 4",
        "output": "36"
      },
      {
        "input": "costs = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5, candidates = 3",
        "output": "5"
      },
      {
        "input": "costs = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 15, candidates = 6",
        "output": "80"
      },
      {
        "input": "costs = [100,99,98,97,96,95,94,93,92,91], k = 10, candidates = 3",
        "output": "955"
      },
      {
        "input": "costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 10, candidates = 6",
        "output": "55"
      },
      {
        "input": "costs = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 15, candidates = 8",
        "output": "120"
      },
      {
        "input": "costs = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], k = 10, candidates = 5",
        "output": "31"
      },
      {
        "input": "costs = [10, 20, 30, 15, 25, 5, 40, 35, 2, 1], k = 5, candidates = 3",
        "output": "33"
      },
      {
        "input": "costs = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 10, candidates = 2",
        "output": "55"
      },
      {
        "input": "costs = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 10, candidates = 5",
        "output": "10"
      },
      {
        "input": "costs = [9, 7, 5, 3, 1, 1, 3, 5, 7, 9, 9, 7, 5, 3, 1, 1, 3, 5, 7, 9], k = 10, candidates = 5",
        "output": "26"
      },
      {
        "input": "costs = [8, 6, 4, 2, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 7, candidates = 3",
        "output": "28"
      },
      {
        "input": "costs = [50, 20, 30, 10, 40, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 10, candidates = 4",
        "output": "550"
      },
      {
        "input": "costs = [10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20], k = 10, candidates = 5",
        "output": "110"
      },
      {
        "input": "costs = [5, 3, 8, 6, 2, 7, 4, 1, 10, 15, 20, 25, 30], k = 8, candidates = 4",
        "output": "36"
      },
      {
        "input": "costs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120], k = 6, candidates = 5",
        "output": "210"
      },
      {
        "input": "costs = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000], k = 7, candidates = 8",
        "output": "2800"
      },
      {
        "input": "costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 10, candidates = 5",
        "output": "55"
      },
      {
        "input": "costs = [10,9,8,7,6,5,4,3,2,1,11,12,13,14,15,16,17,18,19,20], k = 10, candidates = 10",
        "output": "55"
      },
      {
        "input": "costs = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], k = 7, candidates = 4",
        "output": "280"
      },
      {
        "input": "costs = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10], k = 15, candidates = 7",
        "output": "255"
      },
      {
        "input": "costs = [5, 3, 8, 6, 2, 7, 4, 1], k = 4, candidates = 4",
        "output": "10"
      },
      {
        "input": "costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 15, candidates = 4",
        "output": "120"
      },
      {
        "input": "costs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250], k = 15, candidates = 10",
        "output": "1200"
      },
      {
        "input": "costs = [30,20,10,40,50,60,70,80,90,100,110,120,130,140,150], k = 7, candidates = 5",
        "output": "280"
      },
      {
        "input": "costs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 5, candidates = 3",
        "output": "150"
      },
      {
        "input": "costs = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], k = 7, candidates = 5",
        "output": "280"
      },
      {
        "input": "costs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 5, candidates = 3",
        "output": "150"
      },
      {
        "input": "costs = [2,1,3,4,5,6,7,8,9], k = 5, candidates = 2",
        "output": "15"
      },
      {
        "input": "costs = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3, 2, 3, 8, 4, 6], k = 8, candidates = 5",
        "output": "19"
      },
      {
        "input": "costs = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], k = 5, candidates = 2",
        "output": "15000"
      },
      {
        "input": "costs = [50, 40, 30, 20, 10, 1, 2, 3, 4, 5], k = 5, candidates = 2",
        "output": "15"
      },
      {
        "input": "costs = [30, 20, 10, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 10, candidates = 6",
        "output": "550"
      },
      {
        "input": "costs = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], k = 20, candidates = 10",
        "output": "400"
      },
      {
        "input": "costs = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000], k = 5, candidates = 2",
        "output": "150000"
      },
      {
        "input": "costs = [30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165], k = 10, candidates = 5",
        "output": "305"
      },
      {
        "input": "costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 10, candidates = 5",
        "output": "55"
      },
      {
        "input": "costs = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10, candidates = 1",
        "output": "10"
      },
      {
        "input": "costs = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 5, candidates = 2",
        "output": "50"
      },
      {
        "input": "costs = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], k = 7, candidates = 6",
        "output": "280"
      },
      {
        "input": "costs = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 15, candidates = 7",
        "output": "205"
      },
      {
        "input": "costs = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], k = 10, candidates = 5",
        "output": "100"
      },
      {
        "input": "costs = [1,2,3,4,5,6,7,8,9,10], k = 10, candidates = 5",
        "output": "55"
      },
      {
        "input": "costs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 7, candidates = 5",
        "output": "280"
      },
      {
        "input": "costs = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 8, candidates = 5",
        "output": "36"
      },
      {
        "input": "costs = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], k = 10, candidates = 6",
        "output": "110"
      },
      {
        "input": "costs = [8, 6, 4, 2, 1, 3, 5, 7, 9, 11, 13, 12], k = 6, candidates = 4",
        "output": "21"
      },
      {
        "input": "costs = [10,10,10,10,10,10,10,10,10,10], k = 5, candidates = 2",
        "output": "50"
      },
      {
        "input": "costs = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], k = 15, candidates = 7",
        "output": "12222222"
      },
      {
        "input": "costs = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], k = 10, candidates = 1",
        "output": "5500"
      },
      {
        "input": "costs = [100,90,80,70,60,50,40,30,20,10], k = 5, candidates = 2",
        "output": "150"
      },
      {
        "input": "costs = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 5, candidates = 5",
        "output": "15"
      },
      {
        "input": "costs = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 100, candidates = 10",
        "output": "Error: index out of range"
      },
      {
        "input": "costs = [10,20,30,40,50,60,70,80,90,100], k = 5, candidates = 3",
        "output": "150"
      },
      {
        "input": "costs = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], k = 5, candidates = 2",
        "output": "18"
      },
      {
        "input": "costs = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000], k = 10, candidates = 5",
        "output": "550000"
      },
      {
        "input": "costs = [5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2], k = 10, candidates = 5",
        "output": "23"
      },
      {
        "input": "costs = [5,1,4,2,3], k = 3, candidates = 1",
        "output": "9"
      },
      {
        "input": "costs = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 10, candidates = 5",
        "output": "55"
      },
      {
        "input": "costs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10, candidates = 5",
        "output": "55"
      },
      {
        "input": "costs = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10, candidates = 5",
        "output": "10"
      },
      {
        "input": "costs = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 15, candidates = 6",
        "output": "120"
      },
      {
        "input": "costs = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], k = 10, candidates = 10",
        "output": "1000"
      },
      {
        "input": "costs = [5, 3, 8, 6, 2, 7, 4, 1], k = 4, candidates = 2",
        "output": "10"
      },
      {
        "input": "costs = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], k = 7, candidates = 4",
        "output": "700"
      },
      {
        "input": "costs = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3, 2, 3, 8, 4, 6], k = 8, candidates = 4",
        "output": "19"
      },
      {
        "input": "costs = [10,5,15,20,25,30,35,40,45,50], k = 5, candidates = 3",
        "output": "75"
      },
      {
        "input": "costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 25, candidates = 5",
        "output": "325"
      },
      {
        "input": "costs = [9,8,7,6,5,4,3,2,1], k = 3, candidates = 2",
        "output": "6"
      },
      {
        "input": "costs = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10, candidates = 2",
        "output": "10"
      },
      {
        "input": "costs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 15, candidates = 10",
        "output": "120"
      },
      {
        "input": "costs = [50, 40, 30, 20, 10, 10, 20, 30, 40, 50], k = 5, candidates = 5",
        "output": "90"
      },
      {
        "input": "costs = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 5, candidates = 3",
        "output": "1500"
      },
      {
        "input": "costs = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 15, candidates = 5",
        "output": "15"
      },
      {
        "input": "costs = [8, 6, 4, 2, 0, 0, 2, 4, 6, 8, 8, 6, 4, 2, 0, 0, 2, 4, 6, 8], k = 5, candidates = 2",
        "output": "12"
      },
      {
        "input": "costs = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], k = 5, candidates = 4",
        "output": "150"
      },
      {
        "input": "costs = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], k = 10, candidates = 5",
        "output": "275"
      },
      {
        "input": "costs = [1,3,2,4,5,7,6,9,8,10,12,11,14,13,15,17,16,19,18,20], k = 10, candidates = 5",
        "output": "55"
      }
    ]
  },
  {
    "id": 2216,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Greedy",
      "Array"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums. The array nums is beautiful if:\n\nnums.length is even.\nnums[i] != nums[i + 1] for all i % 2 == 0.\n\nNote that an empty array is considered beautiful.\nYou can delete any number of elements from nums. When you delete an element, all the elements to the right of the deleted element will be shifted one unit to the left to fill the gap created and all the elements to the left of the deleted element will remain unchanged.\nReturn the minimum number of elements to delete from nums to make it beautiful.\n\u00a0\nExample 1:\n\nInput: nums = [1,1,2,3,5]\nOutput: 1\nExplanation: You can delete either nums[0] or nums[1] to make nums = [1,2,3,5] which is beautiful. It can be proven you need at least 1 deletion to make nums beautiful.\n\nExample 2:\n\nInput: nums = [1,1,2,2,3,3]\nOutput: 2\nExplanation: You can delete nums[0] and nums[5] to make nums = [1,2,2,3] which is beautiful. It can be proven you need at least 2 deletions to make nums beautiful.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def minDeletion(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [100000,100000,100000,100000,100000,100000]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,2,2,3,3]",
        "output": "2"
      },
      {
        "input": "nums = [100000,100000,99999,99999,99998,99998]",
        "output": "2"
      },
      {
        "input": "nums = [2,2,2,2,2,2]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,2,3,4,4,5]",
        "output": "1"
      },
      {
        "input": "nums = []",
        "output": "0"
      },
      {
        "input": "nums = [0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,1,2,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,2,3,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6]",
        "output": "1"
      },
      {
        "input": "nums = [0,0,0,1,1,1,2,2,2]",
        "output": "5"
      },
      {
        "input": "nums = [1,3,2,3,3,2]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,3,3,3,3,3,3,3,3,4,5,5,5,5,5,5,5,5]",
        "output": "16"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 5]",
        "output": "2"
      },
      {
        "input": "nums = [9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "24"
      },
      {
        "input": "nums = [100000,100000,100000,100000,100000,100000,100000,100000,100000,100000]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "1"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "20"
      },
      {
        "input": "nums = [1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]",
        "output": "8"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "12"
      },
      {
        "input": "nums = [1,1,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5]",
        "output": "24"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9]",
        "output": "11"
      },
      {
        "input": "nums = [1,2,3,4,5,5,5,5,5,6,7,8,9,10,10,11,11,12,13,14]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15]",
        "output": "0"
      },
      {
        "input": "nums = [10,20,20,30,30,40,40,50,50,60,60,70,70,80,80,90,90,100,100]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10]",
        "output": "12"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,2,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "2"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 0, 0, 1, 1, 2, 2]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,1,2,3,3,4,4,5,5,6,6,7,7,8,8]",
        "output": "2"
      },
      {
        "input": "nums = [5, 5, 4, 4, 4, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0, 0]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,2,3,4,4,5,5,6,7,8,8,9,9]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6,7,7]",
        "output": "1"
      },
      {
        "input": "nums = [5,5,4,4,3,3,2,2,1,1,0,0,1,1,2,2,3,3,4,4,5,5]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "30"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,3,3,4]",
        "output": "4"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5]",
        "output": "8"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "16"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3]",
        "output": "8"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "25"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1,2,3,2]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 3, 4, 5, 5, 6, 7, 8]",
        "output": "2"
      },
      {
        "input": "nums = [100000, 99999, 99999, 99998, 99998, 99997, 99997, 99996]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "0"
      },
      {
        "input": "nums = [100000,100000,99999,99999,99998,99998,99997,99997,99996,99996,99995,99995,99994,99994,99993,99993,99992,99992,99991,99991,99990,99990,99989,99989,99988,99988]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,10]",
        "output": "15"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "82"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6]",
        "output": "12"
      },
      {
        "input": "nums = [1,3,3,3,3,3,2,2,2,2,2,2]",
        "output": "8"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6]",
        "output": "13"
      },
      {
        "input": "nums = [1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14]",
        "output": "2"
      },
      {
        "input": "nums = [1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,3,4,5,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "12"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9]",
        "output": "0"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,3,3,3,3,3,3,3,4,5]",
        "output": "8"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]",
        "output": "22"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [100000,100000,99999,99999,99998,99998,99997,99997]",
        "output": "2"
      },
      {
        "input": "nums = [5,5,4,4,3,3,2,2,1,1,0,0,-1,-1,-2,-2,-3,-3,-4,-4,-5,-5]",
        "output": "2"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]",
        "output": "3"
      },
      {
        "input": "nums = [100000, 100000, 100000, 100000, 100000, 100000]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,3,3,4,5,5,5,6,6,6,7,8,9,9,9]",
        "output": "7"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,2,2,3,4,4,4,5,5,6,6,7,8,8,9,9,10,10]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10,9,11]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,4,4,5,5,5,6,6,7,7,8,8,9,9,10]",
        "output": "3"
      },
      {
        "input": "nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,10,1,11]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10]",
        "output": "11"
      },
      {
        "input": "nums = [1,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "nums = [10,10,20,20,30,30,40,40,50,50,60,60,70,70,80,80,90,90,100,100,110]",
        "output": "1"
      },
      {
        "input": "nums = [100000, 100000, 99999, 99999, 99998, 99998, 99997, 99997, 99996, 99996]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,3,3,4,5,5,6,6,7,8,8,9,10]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,2,3,3,4,4,5,5,6,6,7]",
        "output": "2"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]",
        "output": "2"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "31"
      },
      {
        "input": "nums = [1,2,3,3,4,5,6,6,7,8,9,10,10]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "1"
      }
    ]
  },
  {
    "id": 673,
    "difficulty": "Medium",
    "tags": [
      "Binary Indexed Tree",
      "Segment Tree",
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "Given an integer array\u00a0nums, return the number of longest increasing subsequences.\nNotice that the sequence has to be strictly increasing.\n\u00a0\nExample 1:\n\nInput: nums = [1,3,5,4,7]\nOutput: 2\nExplanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].\n\nExample 2:\n\nInput: nums = [2,2,2,2,2]\nOutput: 5\nExplanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 2000\n-106 <= nums[i] <= 106\nThe answer is guaranteed to fit inside a 32-bit integer.\n\n",
    "starterCode": "class Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "5"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7]",
        "output": "7"
      },
      {
        "input": "nums = [1,2,4,3,5,4,7,2]",
        "output": "3"
      },
      {
        "input": "nums = [1,2]",
        "output": "1"
      },
      {
        "input": "nums = [10,9,2,5,3,7,101,18,4,6,8,10,12]",
        "output": "1"
      },
      {
        "input": "nums = [0,1,0,3,2,3]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,5,4,7]",
        "output": "2"
      },
      {
        "input": "nums = [10,9,2,5,3,7,101,18]",
        "output": "4"
      },
      {
        "input": "nums = [2,1]",
        "output": "2"
      },
      {
        "input": "nums = [2,2,2,2,2]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "nums = [2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15]",
        "output": "256"
      },
      {
        "input": "nums = [1,2,1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15]",
        "output": "1"
      },
      {
        "input": "nums = [20,20,20,20,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "25"
      },
      {
        "input": "nums = [1,2,3,2,3,4,5,4,5,6,7,6,7,8,9,8,9,10,11,10,11,12,13,12,13,14]",
        "output": "729"
      },
      {
        "input": "nums = [1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 5, 3, 4, 5, 6, 4, 5, 6, 7, 5, 6, 7, 8, 6, 7, 8, 9]",
        "output": "1093"
      },
      {
        "input": "nums = [4, 10, 4, 3, 8, 9, 3, 4, 2, 6, 5, 3, 7, 2, 9, 8, 10, 3, 5, 7, 1, 9, 8, 4, 6, 10]",
        "output": "4"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "20"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2]",
        "output": "26"
      },
      {
        "input": "nums = [3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,5,4,7,11,10,12,13,14,15,16,17,18,19,20]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "20"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "66"
      },
      {
        "input": "nums = [50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "50"
      },
      {
        "input": "nums = [1,3,5,4,7,10,9,8,7,6,5,4,3,2,1]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "1"
      },
      {
        "input": "nums = [5,4,3,2,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "5"
      },
      {
        "input": "nums = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10]",
        "output": "8"
      },
      {
        "input": "nums = [3, 1, 2, 4, 5, 6, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "6"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]",
        "output": "81"
      },
      {
        "input": "nums = [3,2,1,5,6,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "3"
      },
      {
        "input": "nums = [3,5,10,25,50,2,45,51,26,76,90,100,101]",
        "output": "2"
      },
      {
        "input": "nums = [19,11,13,15,14,12,10,18,16,17,9,8,7,6,5,4,3,2,1]",
        "output": "2"
      },
      {
        "input": "nums = [5, 7, 8, 10, 12, 2, 4, 6, 9, 11, 3, 5, 7]",
        "output": "4"
      },
      {
        "input": "nums = [10,22,9,33,21,50,41,60,80,1,2,3,4,5,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "nums = [10, 9, 2, 5, 3, 7, 101, 18, 4, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]",
        "output": "220"
      },
      {
        "input": "nums = [3,5,7,2,5,3,5,7,9,10]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6]",
        "output": "1024"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "21"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "231"
      },
      {
        "input": "nums = [7, 7, 7, 7, 1, 1, 1, 2, 2, 2, 3, 3, 3]",
        "output": "27"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "380"
      },
      {
        "input": "nums = [5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1]",
        "output": "5"
      },
      {
        "input": "nums = [10,22,9,33,21,50,41,60,80,1,100,200,300]",
        "output": "2"
      },
      {
        "input": "nums = [10,9,2,5,3,7,101,18,4,6,8,10,12,14,16,18,20,15,17,19,21]",
        "output": "4"
      },
      {
        "input": "nums = [4,3,5,4,7,9,8,10,12,11,13,14]",
        "output": "12"
      },
      {
        "input": "nums = [18,55,66,2,3,54,6,5,7,99,23,45,67,89,12,34,56,78,90]",
        "output": "10"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 20, 19, 18, 17, 16]",
        "output": "85"
      },
      {
        "input": "nums = [3,1,2,4,10,1,12,2,5,4,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,2,3,4,5,6,6,6,7,8,8,9,10,10,11,12,12,13]",
        "output": "72"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "30"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "10"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 99990, 99989, 99988, 99987, 99986, 99985, 99984, 99983, 99982, 99981]",
        "output": "20"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "82"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "6"
      },
      {
        "input": "nums = [15, 27, 14, 33, 27, 18, 26, 30, 19, 10, 10, 28, 33, 17, 23, 21, 18, 22, 30, 29]",
        "output": "4"
      },
      {
        "input": "nums = [5, 1, 4, 2, 3, 6, 7, 8, 9, 10]",
        "output": "1"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "45"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "36"
      },
      {
        "input": "nums = [100, 90, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "11"
      },
      {
        "input": "nums = [1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5]",
        "output": "300"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6]",
        "output": "11"
      },
      {
        "input": "nums = [1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10,9,11,10,12]",
        "output": "10"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,3,4,5,6,7,5,6,7,8,9,7,8,9,10,11,9,10,11,12,13]",
        "output": "209"
      },
      {
        "input": "nums = [3,5,6,2,5,4,19,5,6,7,12]",
        "output": "2"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "19"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "nums = [2,1,1,2,3,2,1,2,3,4,3,2,1,2,3,4,5,4,3,2]",
        "output": "39"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "45"
      },
      {
        "input": "nums = [1,2,3,2,3,4,5,4,5,6,7,8,7,8,9,10,11,12,11,12]",
        "output": "81"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "1"
      },
      {
        "input": "nums = [3, 5, 6, 2, 5, 4, 19, 5, 6, 7, 12]",
        "output": "2"
      },
      {
        "input": "nums = [2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10]",
        "output": "1953125"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "11"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "1"
      },
      {
        "input": "nums = [1, 4, 3, 5, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14]",
        "output": "2"
      },
      {
        "input": "nums = [5,4,3,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "1"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "120"
      },
      {
        "input": "nums = [10,9,2,5,3,7,101,18,4,6,8,10,12,13,14,15,16,17,18,19,20]",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "3"
      },
      {
        "input": "nums = [4,10,4,3,8,9]",
        "output": "3"
      },
      {
        "input": "nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "15"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "1"
      },
      {
        "input": "nums = [4, 10, 4, 3, 8, 9]",
        "output": "3"
      },
      {
        "input": "nums = [10,22,9,33,21,50,41,60,80,1]",
        "output": "2"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]",
        "output": "3000"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "21"
      },
      {
        "input": "nums = [1,2,2,2,2,2,2,2,2,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "9"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10,1,2,3,4,5,6,7,8,9]",
        "output": "1"
      },
      {
        "input": "nums = [5,14,3,5,8,7,9,4,11,13,2,15,1,17]",
        "output": "2"
      },
      {
        "input": "nums = [10,20,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180]",
        "output": "3"
      },
      {
        "input": "nums = [5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5]",
        "output": "55"
      },
      {
        "input": "nums = [3, 1, 2, 4, 3, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      }
    ]
  },
  {
    "id": 2381,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "String",
      "Prefix Sum"
    ],
    "problemDescription": "You are given a string s of lowercase English letters and a 2D integer array shifts where shifts[i] = [starti, endi, directioni]. For every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0.\nShifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z').\nReturn the final string after all such shifts to s are applied.\n\u00a0\nExample 1:\n\nInput: s = \"abc\", shifts = [[0,1,0],[1,2,1],[0,2,1]]\nOutput: \"ace\"\nExplanation: Firstly, shift the characters from index 0 to index 1 backward. Now s = \"zac\".\nSecondly, shift the characters from index 1 to index 2 forward. Now s = \"zbd\".\nFinally, shift the characters from index 0 to index 2 forward. Now s = \"ace\".\nExample 2:\n\nInput: s = \"dztz\", shifts = [[0,0,0],[1,1,1]]\nOutput: \"catz\"\nExplanation: Firstly, shift the characters from index 0 to index 0 backward. Now s = \"cztz\".\nFinally, shift the characters from index 1 to index 1 forward. Now s = \"catz\".\n\n\u00a0\nConstraints:\n\n1 <= s.length, shifts.length <= 5 * 104\nshifts[i].length == 3\n0 <= starti <= endi < s.length\n0 <= directioni <= 1\ns consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def shiftingLetters(self, s: str, shifts: List[List[int]]) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"world\", shifts = [[0,4,0],[0,4,0],[0,4,0],[0,4,0]]",
        "output": "sknhz"
      },
      {
        "input": "s = \"abc\", shifts = [[0,1,0],[1,2,1],[0,2,1]]",
        "output": "ace"
      },
      {
        "input": "s = \"xyz\", shifts = [[0,2,0]]",
        "output": "wxy"
      },
      {
        "input": "s = \"abcdef\", shifts = [[1,4,1],[2,3,0]]",
        "output": "accdff"
      },
      {
        "input": "s = \"aaa\", shifts = [[0,2,1],[0,2,1],[0,2,1]]",
        "output": "ddd"
      },
      {
        "input": "s = \"hello\", shifts = [[0,4,1],[1,3,0]]",
        "output": "iellp"
      },
      {
        "input": "s = \"hello\", shifts = [[0,1,1],[1,2,1],[2,3,1],[3,4,1]]",
        "output": "ignnp"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,25,1]]",
        "output": "bcdefghijklmnopqrstuvwxyza"
      },
      {
        "input": "s = \"dztz\", shifts = [[0,0,0],[1,1,1]]",
        "output": "catz"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", shifts = [[0,25,0]]",
        "output": "yxwvutsrqponmlkjihgfedcbaz"
      },
      {
        "input": "s = \"a\", shifts = [[0,0,1],[0,0,0]]",
        "output": "a"
      },
      {
        "input": "s = \"abcd\", shifts = [[0,3,1],[1,2,0],[2,3,1]]",
        "output": "bbdf"
      },
      {
        "input": "s = \"zzz\", shifts = [[0,2,0],[0,2,0],[0,2,0]]",
        "output": "www"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,25,0]]",
        "output": "zabcdefghijklmnopqrstuvwxy"
      },
      {
        "input": "s = \"hello\", shifts = [[0,4,1]]",
        "output": "ifmmp"
      },
      {
        "input": "s = \"aquickbrownfox\", shifts = [[0,3,1],[4,7,0],[8,10,1],[11,12,0],[13,14,1],[15,15,0]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"shiftthisstring\", shifts = [[0,5,1],[6,11,0],[12,18,1],[5,12,1],[6,18,0]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"zzzzzzzzzz\", shifts = [[0,4,0],[5,9,1],[0,9,1],[3,6,0]]",
        "output": "zzzyyaabbb"
      },
      {
        "input": "s = \"alphabet\", shifts = [[0,0,1],[1,1,0],[2,2,1],[3,3,0],[4,4,1],[5,5,0],[5,5,1]]",
        "output": "bkqgbbet"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,25,1],[5,10,0],[15,20,1]]",
        "output": "bcdeffghijkmnoprstuvwwxyza"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", shifts = [[0,51,1],[10,40,0],[20,30,1],[30,40,0]]",
        "output": "bbccddeeffffgghhiijjllmmnnoopppoppqqrrsstvwwxxyyzzaa"
      },
      {
        "input": "s = \"programming\", shifts = [[0,4,1],[1,5,0],[2,6,1],[3,7,0],[4,8,1],[5,9,0],[6,10,1],[7,11,0],[8,12,1]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abacax\", shifts = [[0,5,1],[1,4,0],[2,3,1],[0,5,0]]",
        "output": "aaaczx"
      },
      {
        "input": "s = \"programming\", shifts = [[0,9,1],[1,8,0],[2,7,1],[3,6,0],[4,5,1],[5,5,0],[6,6,1],[7,7,0],[8,8,1],[9,9,0]]",
        "output": "qrpgsanmjng"
      },
      {
        "input": "s = \"abcdefghij\", shifts = [[0,9,0],[1,8,1],[2,7,0],[3,6,1],[4,5,0]]",
        "output": "zbbddeggii"
      },
      {
        "input": "s = \"mnopqrstuvwxyzabcdefghijkl\", shifts = [[0,25,1],[5,15,0],[10,20,1],[15,25,0]]",
        "output": "nopqrrstuvxyzabbdefghhijkl"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,25,1],[0,25,1],[0,25,1],[0,25,0]]",
        "output": "cdefghijklmnopqrstuvwxyzab"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,25,1],[0,25,0],[0,25,1],[0,25,0]]",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"abababab\", shifts = [[0,7,1],[1,6,0],[2,5,1],[3,4,0]]",
        "output": "bbbbacac"
      },
      {
        "input": "s = \"zzzzzzzzzz\", shifts = [[0,9,1],[2,8,0],[4,6,1]]",
        "output": "aazzaaazza"
      },
      {
        "input": "s = \"xylophone\", shifts = [[0,2,0],[3,5,1],[6,8,0],[9,10,1],[0,10,1]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"thisisaverylongstringthatneedstomeshiftedproperly\", shifts = [[0,5,1],[5,10,0],[10,15,1],[15,20,0],[20,25,1],[25,30,0],[30,35,1],[35,40,0],[40,45,1],[45,50,0],[50,55,1]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"algorithm\", shifts = [[0,2,1],[3,5,0],[6,8,1],[1,4,0],[2,3,1],[5,7,0],[7,8,1]]",
        "output": "blhnpgtio"
      },
      {
        "input": "s = \"abcdefghij\", shifts = [[0,9,1],[0,9,0],[0,9,1],[0,9,0],[0,9,1],[0,9,0],[0,9,1],[0,9,0],[0,9,1],[0,9,0]]",
        "output": "abcdefghij"
      },
      {
        "input": "s = \"codingame\", shifts = [[0,1,1],[2,3,0],[4,5,1],[6,7,0],[8,8,1],[0,8,0],[0,8,1],[0,8,0],[0,8,1]]",
        "output": "dpchohzlf"
      },
      {
        "input": "s = \"abacabadabacaba\", shifts = [[0,14,1],[1,13,0],[2,12,1],[3,11,0],[4,10,1],[5,9,0]]",
        "output": "bbbcbbadabbcbbb"
      },
      {
        "input": "s = \"abcdefghij\", shifts = [[0,4,1],[5,9,0],[0,4,0],[5,9,1],[0,9,1]]",
        "output": "bcdefghijk"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,25,1],[1,24,0],[2,23,1],[3,22,0],[4,21,1]]",
        "output": "bbddfghijklmnopqrstuvwwyya"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", shifts = [[0,25,0],[5,10,1],[15,20,0]]",
        "output": "yxwvuutsrqpnmlkihgfeddcbaz"
      },
      {
        "input": "s = \"zzzzz\", shifts = [[0,4,0],[0,4,0],[0,4,0],[0,4,0],[0,4,1]]",
        "output": "wwwww"
      },
      {
        "input": "s = \"abcdefghij\", shifts = [[0,9,1],[1,8,0],[2,7,1],[3,6,0],[4,5,1]]",
        "output": "bbddfggiik"
      },
      {
        "input": "s = \"abcdefghij\", shifts = [[0,9,1],[0,9,0],[0,9,1],[0,9,0],[0,9,1]]",
        "output": "bcdefghijk"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzz\", shifts = [[0,25,1],[5,15,0],[10,20,1]]",
        "output": "aaaaazzzzzaaaaaabbbbbaaaaa"
      },
      {
        "input": "s = \"abcdefghijklmnop\", shifts = [[0,0,1],[1,1,1],[2,2,1],[3,3,1],[4,4,1],[5,5,1],[6,6,1],[7,7,1],[8,8,1],[9,9,1],[10,10,1],[11,11,1],[12,12,1],[13,13,1],[14,14,1],[15,15,1]]",
        "output": "bcdefghijklmnopq"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,12,1],[13,25,0],[0,25,1],[0,25,0],[0,25,1]]",
        "output": "cdefghijklmnonopqrstuvwxyz"
      },
      {
        "input": "s = \"alibabacloud\", shifts = [[0,9,1],[2,4,0],[5,7,1],[8,11,0],[0,3,1],[6,9,0],[1,8,1],[2,7,0]]",
        "output": "cojcadbdlntc"
      },
      {
        "input": "s = \"xyz\", shifts = [[0,2,1],[0,2,1],[0,2,0],[0,2,0]]",
        "output": "xyz"
      },
      {
        "input": "s = \"abcdefg\", shifts = [[0,1,1],[1,2,1],[2,3,1],[3,4,1],[4,5,1],[5,6,1]]",
        "output": "bdefghh"
      },
      {
        "input": "s = \"abacabadabacaba\", shifts = [[0,4,1],[5,9,0],[10,14,1],[0,14,0],[0,14,1]]",
        "output": "bcbdbazczabdbcb"
      },
      {
        "input": "s = \"hello world\", shifts = [[0,4,1],[6,10,0],[3,8,1],[1,9,0],[0,10,1]]",
        "output": "jfmnqoworkd"
      },
      {
        "input": "s = \"example\", shifts = [[0,6,1],[1,5,0],[2,4,1],[3,6,0]]",
        "output": "fxbmpke"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", shifts = [[0,25,1],[26,51,0],[52,77,1],[0,77,0],[0,77,1]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdefghij\", shifts = [[0,9,1],[1,8,0],[2,7,1],[3,6,0],[4,5,1],[5,4,0],[6,3,1],[7,2,0],[8,1,1],[9,0,0]]",
        "output": "bcdefghijk"
      },
      {
        "input": "s = \"abcdefg\", shifts = [[0,6,1],[1,5,0],[2,4,1],[3,3,0]]",
        "output": "bbddffh"
      },
      {
        "input": "s = \"hellozworld\", shifts = [[0,4,1],[5,9,0],[6,10,1],[7,8,0],[9,10,1],[10,10,0]]",
        "output": "ifmmpywnqme"
      },
      {
        "input": "s = \"abcde\", shifts = [[0,2,1],[3,4,0],[1,3,1],[0,1,0],[4,4,1],[2,2,0]]",
        "output": "acdde"
      },
      {
        "input": "s = \"xylophone\", shifts = [[0,8,1],[1,7,0],[2,6,1],[3,5,0],[4,4,1]]",
        "output": "yymoqhpnf"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,25,1],[0,25,0],[0,25,1],[0,25,0],[0,25,1]]",
        "output": "bcdefghijklmnopqrstuvwxyza"
      },
      {
        "input": "s = \"programming\", shifts = [[0,9,1],[4,8,0],[2,6,1],[1,7,0],[0,8,1]]",
        "output": "rsqisbnmjog"
      },
      {
        "input": "s = \"shiftmeplease\", shifts = [[0,1,1],[2,3,0],[4,5,1],[6,7,0],[8,9,1],[10,11,0],[12,12,1]]",
        "output": "tiheundomfzrf"
      },
      {
        "input": "s = \"algorithms\", shifts = [[0,9,1],[1,8,0],[2,7,1],[3,6,0],[4,5,1],[5,4,0],[6,3,1],[7,2,0],[8,1,1],[9,0,0]]",
        "output": "bmhpsjuint"
      },
      {
        "input": "s = \"quickbrownfox\", shifts = [[0,12,1],[1,11,0],[2,10,1],[3,9,0],[4,8,1],[5,7,0]]",
        "output": "rujclbroxngoy"
      },
      {
        "input": "s = \"mnopqr\", shifts = [[0,2,1],[3,5,0],[0,5,1],[1,4,0]]",
        "output": "oopopr"
      },
      {
        "input": "s = \"abcdefghijklmnop\", shifts = [[0,15,1],[1,14,0],[2,13,1],[3,12,0],[4,11,1],[5,10,0],[6,9,1],[7,8,0]]",
        "output": "bbddffhhikkmmooq"
      },
      {
        "input": "s = \"zzzzzzzzzz\", shifts = [[0,9,1],[1,8,0],[2,7,1],[3,6,0],[4,5,1]]",
        "output": "azazaazaza"
      },
      {
        "input": "s = \"mississippi\", shifts = [[0,4,0],[1,3,1],[2,2,0],[3,5,1],[6,8,0],[7,7,1],[8,10,0],[9,9,1],[10,10,0]]",
        "output": "lirtitrinpg"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,0,0],[1,1,0],[2,2,0],[3,3,0],[4,4,0],[5,5,0],[6,6,0],[7,7,0],[8,8,0],[9,9,0],[10,10,0],[11,11,0],[12,12,0],[13,13,0],[14,14,0],[15,15,0],[16,16,0],[17,17,0],[18,18,0],[19,19,0],[20,20,0],[21,21,0],[22,22,0],[23,23,0],[24,24,1],[25,25,1]]",
        "output": "zabcdefghijklmnopqrstuvwza"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,25,1],[5,15,0],[10,20,1]]",
        "output": "bcdeffghijlmnopqstuvwwxyza"
      },
      {
        "input": "s = \"programming\", shifts = [[0,8,1],[3,7,0],[2,5,1],[4,10,0],[1,9,1]]",
        "output": "qtrisbmmjnf"
      },
      {
        "input": "s = \"programmingisfun\", shifts = [[0,4,1],[5,9,0],[10,14,1],[15,17,0],[0,17,1]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aabbccddeeffgg\", shifts = [[0,2,1],[3,5,0],[6,8,1],[9,11,0],[12,14,1],[15,17,0]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,0,1],[1,1,1],[2,2,1],[3,3,1],[4,4,1],[5,5,1],[6,6,1],[7,7,1],[8,8,1],[9,9,1],[10,10,1],[11,11,1],[12,12,1],[13,13,1],[14,14,1],[15,15,1],[16,16,1],[17,17,1],[18,18,1],[19,19,1],[20,20,1],[21,21,1],[22,22,1],[23,23,1],[24,24,1],[25,25,1]]",
        "output": "bcdefghijklmnopqrstuvwxyza"
      },
      {
        "input": "s = \"abcdefgh\", shifts = [[0,0,0],[7,7,1],[2,2,1],[5,5,0],[3,3,1]]",
        "output": "zbdeeegi"
      },
      {
        "input": "s = \"a\", shifts = [[0,0,1],[0,0,0],[0,0,1],[0,0,0]]",
        "output": "a"
      },
      {
        "input": "s = \"quickbrownfox\", shifts = [[0,4,1],[5,9,0],[10,14,1],[4,14,0],[0,14,1]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,25,1],[0,25,1],[0,25,1],[0,25,1],[0,25,1]]",
        "output": "fghijklmnopqrstuvwxyzabcde"
      },
      {
        "input": "s = \"abcdefg\", shifts = [[0,1,0],[1,2,0],[2,3,0],[3,4,0],[4,5,0],[5,6,0]]",
        "output": "zzabcdf"
      },
      {
        "input": "s = \"mnopqr\", shifts = [[0,0,1],[1,1,0],[2,2,1],[3,3,0],[4,4,1],[5,5,0]]",
        "output": "nmporq"
      },
      {
        "input": "s = \"abcdefghij\", shifts = [[0,4,0],[5,9,1],[0,9,1],[1,8,0],[2,7,1],[3,6,0],[4,5,1]]",
        "output": "aaccehhjjl"
      },
      {
        "input": "s = \"abcdefghij\", shifts = [[0,1,1],[2,3,0],[4,5,1],[6,7,0],[8,9,1]]",
        "output": "bcbcfgfgjk"
      },
      {
        "input": "s = \"mississippi\", shifts = [[0,2,1],[2,4,0],[4,6,1],[6,8,0],[8,10,1]]",
        "output": "njsritshpqj"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnm\", shifts = [[0,9,1],[10,19,0],[20,25,1],[0,19,0],[10,25,1],[0,25,0],[0,25,1]]",
        "output": "qwertyuiopzrcefgijkyzexdpo"
      },
      {
        "input": "s = \"aaaabbbbcccc\", shifts = [[0,3,1],[4,7,0],[8,11,1],[0,11,1]]",
        "output": "ccccbbbbeeee"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", shifts = [[0,51,1],[0,51,0],[0,51,1],[0,51,0],[0,51,1]]",
        "output": "bbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzaa"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", shifts = [[0,13,0],[13,25,1],[0,25,0],[0,25,1]]",
        "output": "yxwvutsrqponmmmlkjihgfedcb"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", shifts = [[0,25,0],[0,25,0],[0,25,0],[0,25,0],[0,25,0]]",
        "output": "utsrqponmlkjihgfedcbazyxwv"
      },
      {
        "input": "s = \"shiftthis\", shifts = [[0,0,1],[1,1,0],[2,2,1],[3,3,0],[4,4,1],[5,5,0],[6,6,1],[7,7,0],[8,8,1]]",
        "output": "tgjeusiht"
      },
      {
        "input": "s = \"abcd\", shifts = [[0,3,1],[0,2,0],[1,3,1],[1,2,0],[2,3,1]]",
        "output": "abdg"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyza\", shifts = [[0,25,1],[1,24,0],[2,23,1],[3,22,0]]",
        "output": "bbddefghijklmnopqrstuvwyyaa"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,0,1],[1,1,1],[2,2,1],[3,3,1],[4,4,1],[5,5,1],[6,6,1],[7,7,1],[8,8,1],[9,9,1],[10,10,1],[11,11,1],[12,12,1],[13,13,1],[14,14,1],[15,15,1],[16,16,1],[17,17,1],[18,18,1],[19,19,1],[20,20,1],[21,21,1],[22,22,1],[23,23,1],[24,24,0],[25,25,0]]",
        "output": "bcdefghijklmnopqrstuvwxyxy"
      },
      {
        "input": "s = \"python\", shifts = [[0,5,1],[1,4,0],[2,3,1],[0,5,0],[1,4,1]]",
        "output": "pyuion"
      },
      {
        "input": "s = \"abcdefghij\", shifts = [[0,0,1],[1,1,0],[2,2,1],[3,3,0],[4,4,1],[5,5,0],[6,6,1],[7,7,0],[8,8,1],[9,9,0]]",
        "output": "badcfehgji"
      },
      {
        "input": "s = \"zzzzzzzzzz\", shifts = [[0,9,1],[0,9,1],[0,9,1],[0,9,1],[0,9,1],[0,9,1],[0,9,1],[0,9,1],[0,9,1],[0,9,1]]",
        "output": "jjjjjjjjjj"
      },
      {
        "input": "s = \"xyzxyzxyz\", shifts = [[0,2,1],[3,5,0],[6,8,1],[0,5,1],[3,8,0],[0,8,1]]",
        "output": "abcxyzyza"
      },
      {
        "input": "s = \"aaaabbbb\", shifts = [[0,3,1],[4,7,0],[2,5,1],[1,6,0]]",
        "output": "babbaaza"
      },
      {
        "input": "s = \"quickbrownfox\", shifts = [[0,4,1],[5,9,0],[10,14,1],[0,9,0],[10,14,1],[0,14,1]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"zzzzzzzz\", shifts = [[0,7,1],[1,6,0],[2,5,1],[3,4,0]]",
        "output": "azazzaza"
      },
      {
        "input": "s = \"abcdefghij\", shifts = [[0,4,1],[1,8,0],[2,7,1],[3,6,0],[4,5,1]]",
        "output": "bbddfffhhj"
      },
      {
        "input": "s = \"abcdabcdabcd\", shifts = [[0,3,1],[4,7,0],[8,11,1],[0,11,0],[0,11,1]]",
        "output": "bcdezabcbcde"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,25,0],[1,24,0],[2,23,0],[3,22,0],[4,21,0],[5,20,0],[6,19,0],[7,18,0],[8,17,0],[9,16,0],[10,15,0],[11,14,0],[12,13,0],[13,12,1],[14,11,1],[15,10,1],[16,9,1],[17,8,1],[18,7,1],[19,6,1],[20,5,1],[21,4,1],[22,3,1],[23,2,1],[24,1,1],[25,0,1]]",
        "output": "zyxwvutsrqponoruxadgjmpsvy"
      },
      {
        "input": "s = \"zzzzzzzzzz\", shifts = [[0,9,1],[0,9,0],[1,8,1],[1,8,0],[2,7,1],[2,7,0],[3,6,1],[3,6,0],[4,5,1],[4,5,0]]",
        "output": "zzzzzzzzzz"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", shifts = [[0,0,1],[1,1,0],[2,2,1],[3,3,0],[4,4,1],[5,5,0],[6,6,1],[7,7,0],[8,8,1],[9,9,0],[10,10,1],[11,11,0],[12,12,1],[13,13,0],[14,14,1],[15,15,0],[16,16,1],[17,17,0],[18,18,1],[19,19,0],[20,20,1],[21,21,0],[22,22,1],[23,23,0],[24,24,1],[25,25,0]]",
        "output": "badcfehgjilknmporqtsvuxwzy"
      },
      {
        "input": "s = \"xyzabc\", shifts = [[0,2,1],[3,5,0],[1,4,1],[2,5,0],[0,5,1]]",
        "output": "zbbabb"
      },
      {
        "input": "s = \"programming\", shifts = [[0,3,1],[4,8,0],[6,10,1],[7,9,0],[1,5,1]]",
        "output": "qtqiramlhnh"
      }
    ]
  },
  {
    "id": 1630,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "problemDescription": "A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i.\nFor example, these are arithmetic sequences:\n\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9\nThe following sequence is not arithmetic:\n\n1, 1, 2, 5, 7\nYou are given an array of n integers, nums, and two arrays of m integers each, l and r, representing the m range queries, where the ith query is the range [l[i], r[i]]. All the arrays are 0-indexed.\nReturn a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], ... , nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise.\n\u00a0\nExample 1:\n\nInput: nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]\nOutput: [true,false,true]\nExplanation:\nIn the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.\nIn the 1st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.\nIn the 2nd query, the subarray is [5,9,3,7]. This can be rearranged as [3,5,7,9], which is an arithmetic sequence.\nExample 2:\n\nInput: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]\nOutput: [false,true,false,false,true,true]\n\n\u00a0\nConstraints:\n\nn == nums.length\nm == l.length\nm == r.length\n2 <= n <= 500\n1 <= m <= 500\n0 <= l[i] < r[i] < n\n-105 <= nums[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def checkArithmeticSubarrays(self, nums: List[int], l: List[int], r: List[int]) -> List[bool]:\n        ",
    "testCases": [
      {
        "input": "nums = [1,1,1,1,1], l = [0,0,2,3], r = [1,2,4,4]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [5,5,5,5,5], l = [0,1,2], r = [1,2,3]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [0,3,5,7,9], l = [0,1,2], r = [1,2,3]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5], l = [0,1,2], r = [1,2,4]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [0,5,10,15,20], l = [0,0,1,2], r = [2,3,3,4]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]",
        "output": "[False, True, False, False, True, True]"
      },
      {
        "input": "nums = [1,2,3,5,6], l = [0,2], r = [2,4]",
        "output": "[True, False]"
      },
      {
        "input": "nums = [10,9,8,7,6], l = [0,1,2], r = [1,2,4]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,2,4,6,8,10], l = [0,1,2], r = [1,2,3]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [5,3,1,7,9], l = [0,1,2], r = [1,2,4]",
        "output": "[True, True, False]"
      },
      {
        "input": "nums = [1,2,4,6,8], l = [0,1,2,3], r = [2,3,4,4]",
        "output": "[False, True, True, True]"
      },
      {
        "input": "nums = [1,1,2,5,7], l = [0,2,3], r = [2,3,4]",
        "output": "[False, True, True]"
      },
      {
        "input": "nums = [1,2,4,6,8], l = [0,1,2], r = [1,2,4]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]",
        "output": "[True, False, True]"
      },
      {
        "input": "nums = [10,5,3,7,8], l = [0,1,2,3], r = [1,2,3,4]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5], l = [0,1,2], r = [2,3,4]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,1,1,1,1], l = [0,1,2], r = [1,2,3]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5], l = [0,1,2], r = [4,3,4]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [10,20,30,40,50], l = [0,2], r = [1,3]",
        "output": "[True, True]"
      },
      {
        "input": "nums = [1,1,1,1,1], l = [0,1,2], r = [1,2,4]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [100,200,300,400,500,600], l = [0,1,2], r = [2,3,4]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5], l = [0,1,2], r = [4,3,3]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,1,1,1,1], l = [0,1,2], r = [4,3,3]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5], l = [0,1], r = [2,4]",
        "output": "[True, True]"
      },
      {
        "input": "nums = [-10,-7,-4,-1,2,5,8,11], l = [0,1,2,3], r = [2,4,6,7]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [0,1,3,6,10,15,21,28,36,45], l = [0,1,2,3,4,5,6,7,8], r = [9,8,7,6,5,4,3,2,1]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7], l = [0,1,2,3,4,5,6,7,8], r = [9,8,7,6,5,4,3,2,1]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "nums = [-5,-10,-15,-20,-25,-30], l = [0,2,4], r = [1,3,5]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [20,10,30,50,40,60,70,80,90,100], l = [0,1,2,3,4,5], r = [2,4,6,8,9,9]",
        "output": "[True, False, True, True, False, True]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], l = [0,3,6,9,12], r = [2,5,8,11,14]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], l = [1, 3, 5, 7], r = [8, 9, 8, 9]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [100000,-100000,50000,-50000,25000,-25000,12500,-12500], l = [0,2,4,6], r = [2,4,6,7]",
        "output": "[False, False, False, True]"
      },
      {
        "input": "nums = [1,2,4,8,16,32,64,128,256,512], l = [0,1,2,3,4,5,6], r = [1,2,3,4,5,6,9]",
        "output": "[True, True, True, True, True, True, False]"
      },
      {
        "input": "nums = [10, 5, 15, 20, 25, 30, 35, 40], l = [1, 0, 2, 5], r = [6, 4, 4, 7]",
        "output": "[False, True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], l = [0,0,2,4,6,8], r = [2,4,6,8,9,9]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900], l = [0, 1, 3, 5], r = [2, 4, 6, 8]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], l = [0,6,12,18], r = [5,11,17,19]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25], l = [0,5,10], r = [4,9,12]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21], l = [0,2,4,6,8,10], r = [1,3,5,7,9,20]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], l = [0,5,10,15], r = [4,9,14,19]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [5, 8, 11, 14, 17, 20, 23, 26, 29], l = [0, 2, 5, 6], r = [3, 5, 7, 8]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110], l = [0, 3, 6, 9, 1], r = [2, 5, 8, 10, 4]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], l = [0,0,2,4,6,8], r = [2,4,6,8,9,9]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21], l = [0,2,4,6,8], r = [1,3,5,7,10]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], l = [0,0,0,0], r = [3,4,5,6]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], l = [0, 1, 2, 3, 4], r = [4, 5, 6, 7, 9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [10,5,0,-5,-10,-15,-20,-25,-30,-35], l = [0,0,0,0], r = [4,5,6,7]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], l = [0,1,2,3,4], r = [2,3,4,5,6]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77], l = [0,4,8,12,16], r = [3,7,11,15,19]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], l = [0,1,2,3,4,5,6,7,8,9,10,11,12,13], r = [14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "Error: integer division or modulo by zero"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], l = [0,1,2,3,4,5,6,7,8], r = [2,4,6,8,9,9,9,9,9]",
        "output": "[True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "nums = [0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32], l = [0,3,6,9,12,15], r = [1,4,7,10,13,16]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30,33,36], l = [0,3,6,9], r = [2,5,8,11]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [1,5,9,13,17,21,25,29,33,37,41], l = [0,1,2,3,4,5,6,7,8], r = [1,2,3,4,5,6,7,8,10]",
        "output": "[True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], l = [0,1,2,3,4,5,6,7,8,9,10,11,12,13], r = [14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "Error: integer division or modulo by zero"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], l = [0,2,4,6,8], r = [1,3,5,7,9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], l = [0, 2, 4, 6], r = [3, 5, 7, 9]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [5, 3, 1, -1, -3, -5, -7, -9, -11, -13], l = [0, 2, 4, 6, 8], r = [1, 3, 5, 7, 9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1], l = [0,2,4,6,8], r = [1,3,5,7,11]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [1, 2, 3, 5, 6, 8, 9, 10], l = [0, 2, 4, 1, 3], r = [1, 5, 7, 7, 6]",
        "output": "[True, False, False, False, False]"
      },
      {
        "input": "nums = [5,8,1,3,4,9,10], l = [0,1,2,3], r = [2,4,5,6]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "nums = [5,8,3,7,10,1,2,9,4,6], l = [0,2,5,7], r = [3,7,9,9]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "nums = [1,2,4,8,16,32,64,128,256,512], l = [0,1,2,3,4], r = [2,4,6,8,9]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "nums = [10,5,15,20,30,25,40,35,50,45], l = [0,1,2,3,4,5,6], r = [3,5,7,9,9,9,9]",
        "output": "[True, False, True, True, True, False, True]"
      },
      {
        "input": "nums = [4, 3, 2, 1, 0, -1, -2, -3, -4], l = [0, 3, 4, 5], r = [8, 7, 6, 8]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], l = [0, 1, 2, 3, 4], r = [3, 4, 5, 6, 9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], l = [0,5,10,15,20], r = [4,9,14,19,24]",
        "output": "[False, True, True, True, True]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], l = [0,1,2,3,4,5,6,7,8], r = [9,8,7,6,5,4,3,2,1]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20], l = [0,1,2,3,4,5,6], r = [1,2,3,4,5,6,9]",
        "output": "[True, True, True, True, True, True, True]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90], l = [0,1,2,3], r = [1,2,3,8]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [5,4,3,2,1,0,-1,-2,-3,-4,-5], l = [0,1,2,3,4,5,6,7,8], r = [1,2,3,4,5,6,7,8,10]",
        "output": "[True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "nums = [-5,-10,-15,-20,-25,-30,-35,-40,-45,-50], l = [0,1,2,3,4,5,6], r = [3,5,7,9,9,9,9]",
        "output": "[True, True, True, True, True, True, True]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], l = [0,2,4,6], r = [1,3,5,9]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], l = [0,5,10,15,20], r = [4,9,14,19,24]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [3,5,7,9,11,13,15,17,19,21,23,25,27,29,31], l = [0,5,10], r = [4,9,13]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5], l = [0,1,2], r = [1,2,3]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50], l = [0,3,6,9], r = [2,5,8,9]",
        "output": "Error: integer division or modulo by zero"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], l = [0,3,6,9,12], r = [2,5,8,11,14]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [5,8,11,14,17,20,23,26,29], l = [0,3,6], r = [2,5,8]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], l = [0,5,10], r = [4,9,14]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,2,4,8,16,32,64,128,256,512], l = [0,1,2,3,4,5,6,7,8], r = [9,8,7,6,5,4,3,2,1]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "nums = [1, 2, 4, 5, 7, 8, 10, 11, 13], l = [0, 2, 4, 6], r = [1, 5, 7, 8]",
        "output": "[True, False, False, False]"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20], l = [0,5,10,15], r = [4,9,14,19]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61], l = [0,3,6,9,12,15], r = [2,5,8,11,14,17]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "nums = [-5,-4,-3,-2,-1,0,1,2,3,4,5], l = [0,1,2,3,4,5,6,7,8], r = [1,2,3,4,5,6,7,8,10]",
        "output": "[True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "nums = [0,1,-1,2,-2,3,-3,4,-4], l = [0,3,6], r = [2,5,8]",
        "output": "[True, False, False]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], l = [0, 1, 3, 5, 7], r = [2, 4, 6, 8, 9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [5,3,1,-1,-3,-5,-7,-9,-11,-13], l = [0,2,4,6,8], r = [1,3,5,7,9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [4,6,8,10,12,14,16,18,20,22,24], l = [0,2,4,6,8,10], r = [1,3,5,7,9,10]",
        "output": "Error: integer division or modulo by zero"
      },
      {
        "input": "nums = [9,7,5,3,1,10,8,6,4,2], l = [0,2,4,6,8], r = [2,4,6,8,9]",
        "output": "[True, True, False, True, True]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1], l = [0, 1, 2, 3], r = [2, 3, 4, 8]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [-10,-5,0,5,10,15,20,25,30,35], l = [0,3,6,9], r = [2,5,8,9]",
        "output": "Error: integer division or modulo by zero"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], l = [0,0,2,4,6,8], r = [2,4,6,8,9,9]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], l = [0,1,2,3,4,5,6,7,8], r = [9,8,7,6,5,4,3,2,1]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], l = [0,4,6,8], r = [3,7,9,9]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60], l = [0,4,8,12,16,20], r = [3,7,11,15,19,20]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700], l = [0,1,2,3], r = [1,2,3,4]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [2,10,4,5,7,6,9], l = [0,1,2,3,4], r = [2,3,5,5,6]",
        "output": "[False, False, True, True, False]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], l = [0,1,2,3,4], r = [1,2,3,4,9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [5,4,3,2,1,0,-1,-2,-3,-4,-5], l = [0,5,2,8], r = [4,10,6,10]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], l = [0,2,4,6,8], r = [1,3,5,7,9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], l = [0,1,2,3,4,5,6,7,8], r = [9,8,7,6,5,4,3,2,1]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], l = [0,2,4,6,8,10,12,14,16,18,20,22,24], r = [1,3,5,7,9,11,13,15,17,19,21,23,25]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], l = [0,2,4,6], r = [3,5,7,8]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90], l = [0,4,8,12,16], r = [3,7,11,15,18]",
        "output": "[True, True, True, True, False]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90], l = [0,1,2,3,4,5], r = [1,2,3,4,5,8]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35], l = [0,2,4], r = [2,4,6]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,4,7,10,13,16,19,22,25,28], l = [0,2,4,6], r = [1,3,5,9]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [-100000,-99999,-99998,-99997,-99996,-99995,-99994,-99993,-99992,-99991], l = [0,1,2,3,4,5,6,7], r = [1,2,3,4,5,6,7,9]",
        "output": "[True, True, True, True, True, True, True, True]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], l = [0,2,4,6,8], r = [1,3,5,7,9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0], l = [0,1,2,3,4,5,6,7,8], r = [1,2,3,4,5,6,7,8,9]",
        "output": "[True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "nums = [1,3,6,10,15,21,28,36,45,55,66], l = [0,1,2,3,4,5,6,7,8], r = [1,2,3,4,5,6,7,8,10]",
        "output": "[True, True, True, True, True, True, True, True, False]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17], l = [0,2,4,6], r = [2,4,6,8]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], l = [0,5,10,15], r = [4,9,14,19]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], l = [0, 2, 4, 6, 8], r = [1, 3, 5, 7, 9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], l = [0,1,2,3,4,5,6,7,8], r = [1,2,3,4,5,6,7,8,9]",
        "output": "[True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], l = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], r = [19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], l = [0, 5, 7, 9], r = [4, 9, 10, 11]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], l = [0,1,2,3,4,5,6], r = [1,2,3,4,5,6,14]",
        "output": "[True, True, True, True, True, True, True]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21], l = [0, 2, 4, 6], r = [1, 3, 5, 7]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [10,5,15,20,25,30,35], l = [0,2,4], r = [4,5,6]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], l = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24], r = [24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "Error: integer division or modulo by zero"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], l = [0,2,4,6,8], r = [1,4,7,9,9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [10,-10,20,-20,30,-30,40,-40,50,-50], l = [0,2,4,6,8], r = [2,4,6,8,9]",
        "output": "[False, False, False, False, True]"
      },
      {
        "input": "nums = [1,5,9,13,17,21,25], l = [0,1,2,3], r = [1,2,3,6]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], l = [0,3,6,9,12], r = [2,5,8,11,14]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7], l = [0,1,2,3,4,5], r = [1,2,3,4,5,9]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110], l = [0, 2, 4, 6], r = [2, 4, 6, 8]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], l = [0,5,10,15], r = [4,9,14,19]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [1,2,2,3,4,5,6,7,8,9,10], l = [0,2,4,6], r = [1,5,7,9]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [5,1,3,2,4,6,8,7,9,10], l = [0,2,4,6,8], r = [2,4,6,8,9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21], l = [0, 2, 4, 6, 8], r = [1, 3, 5, 7, 9]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800], l = [0,1,2,3,4], r = [1,3,5,7,7]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], l = [0,2,4,6,8,10], r = [1,3,5,7,9,11]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], l = [0, 1, 2, 3, 4, 5, 6, 7, 8], r = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55, 65, 75, 85, 95, 105], l = [0, 3, 6, 9], r = [2, 5, 8, 9]",
        "output": "Error: integer division or modulo by zero"
      },
      {
        "input": "nums = [1,5,9,13,17,21,25], l = [0,3,5], r = [2,5,6]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [-10,0,10,20,30,-20,-30], l = [0,3,4], r = [2,5,6]",
        "output": "[True, False, False]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50], l = [0,1,2,3,4,5,6,7,8], r = [9,8,7,6,5,4,3,2,1]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "nums = [1,2,3,6,5,4,9,8,7,12,11,10], l = [0,3,6,9], r = [2,5,8,11]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "nums = [1,2,3,6,5,4,7,8,9], l = [0,1,3], r = [2,5,8]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,2,4,5,7,8,10,11,13,14,16], l = [0,2,4,6,8], r = [1,3,5,7,10]",
        "output": "[True, True, True, True, False]"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], l = [0,7,12], r = [6,11,14]",
        "output": "[True, True, True]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], l = [0,1,2,3,4,5,6,7,8,9], r = [1,2,3,4,5,6,7,8,9,19]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21], l = [0,1,2,3,4], r = [1,2,3,4,6]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21], l = [0,3,6,9], r = [2,5,8,10]",
        "output": "[True, True, True, True]"
      }
    ]
  },
  {
    "id": 991,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Math"
    ],
    "problemDescription": "There is a broken calculator that has the integer startValue on its display initially. In one operation, you can:\n\nmultiply the number on display by 2, or\nsubtract 1 from the number on display.\n\nGiven two integers startValue and target, return the minimum number of operations needed to display target on the calculator.\n\u00a0\nExample 1:\n\nInput: startValue = 2, target = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\n\nInput: startValue = 5, target = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\n\nInput: startValue = 3, target = 10\nOutput: 3\nExplanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\n\u00a0\nConstraints:\n\n1 <= startValue, target <= 109\n\n",
    "starterCode": "class Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        ",
    "testCases": [
      {
        "input": "startValue = 2, target = 3",
        "output": "2"
      },
      {
        "input": "startValue = 1000000000, target = 1",
        "output": "999999999"
      },
      {
        "input": "startValue = 7, target = 15",
        "output": "6"
      },
      {
        "input": "startValue = 2, target = 1",
        "output": "1"
      },
      {
        "input": "startValue = 3, target = 10",
        "output": "3"
      },
      {
        "input": "startValue = 100, target = 99",
        "output": "1"
      },
      {
        "input": "startValue = 10, target = 1",
        "output": "9"
      },
      {
        "input": "startValue = 1, target = 2",
        "output": "1"
      },
      {
        "input": "startValue = 1, target = 1000000000",
        "output": "39"
      },
      {
        "input": "startValue = 5, target = 8",
        "output": "2"
      },
      {
        "input": "startValue = 1, target = 1",
        "output": "0"
      },
      {
        "input": "startValue = 4, target = 7",
        "output": "2"
      },
      {
        "input": "startValue = 100, target = 100",
        "output": "0"
      },
      {
        "input": "startValue = 7, target = 19",
        "output": "5"
      },
      {
        "input": "startValue = 8, target = 16",
        "output": "1"
      },
      {
        "input": "startValue = 9, target = 28",
        "output": "4"
      },
      {
        "input": "startValue = 1000000, target = 1000000",
        "output": "0"
      },
      {
        "input": "startValue = 123456, target = 654321",
        "output": "41671"
      },
      {
        "input": "startValue = 2, target = 3000000000",
        "output": "43"
      },
      {
        "input": "startValue = 1000, target = 1001",
        "output": "501"
      },
      {
        "input": "startValue = 15, target = 1",
        "output": "14"
      },
      {
        "input": "startValue = 1000000, target = 999999",
        "output": "1"
      },
      {
        "input": "startValue = 2, target = 1024",
        "output": "9"
      },
      {
        "input": "startValue = 1024, target = 1",
        "output": "1023"
      },
      {
        "input": "startValue = 2, target = 1023",
        "output": "10"
      },
      {
        "input": "startValue = 10, target = 11",
        "output": "6"
      },
      {
        "input": "startValue = 50, target = 1000",
        "output": "25"
      },
      {
        "input": "startValue = 7, target = 128",
        "output": "8"
      },
      {
        "input": "startValue = 3, target = 1023",
        "output": "11"
      },
      {
        "input": "startValue = 23, target = 17",
        "output": "6"
      },
      {
        "input": "startValue = 500, target = 1000000",
        "output": "26"
      },
      {
        "input": "startValue = 2, target = 100",
        "output": "9"
      },
      {
        "input": "startValue = 50, target = 101",
        "output": "28"
      },
      {
        "input": "startValue = 15, target = 20",
        "output": "6"
      },
      {
        "input": "startValue = 12, target = 32",
        "output": "6"
      },
      {
        "input": "startValue = 3, target = 33",
        "output": "8"
      },
      {
        "input": "startValue = 1000000, target = 1000001",
        "output": "500001"
      },
      {
        "input": "startValue = 500, target = 1023",
        "output": "247"
      },
      {
        "input": "startValue = 7, target = 47",
        "output": "5"
      },
      {
        "input": "startValue = 13, target = 1",
        "output": "12"
      },
      {
        "input": "startValue = 15, target = 97",
        "output": "8"
      },
      {
        "input": "startValue = 123456789, target = 987654321",
        "output": "61728401"
      },
      {
        "input": "startValue = 25, target = 24",
        "output": "1"
      },
      {
        "input": "startValue = 2345678, target = 8765432",
        "output": "154322"
      },
      {
        "input": "startValue = 256, target = 2048",
        "output": "3"
      },
      {
        "input": "startValue = 12345, target = 54321",
        "output": "5560"
      },
      {
        "input": "startValue = 20, target = 25",
        "output": "9"
      },
      {
        "input": "startValue = 6, target = 9",
        "output": "3"
      },
      {
        "input": "startValue = 500000000, target = 750000000",
        "output": "125000001"
      },
      {
        "input": "startValue = 15, target = 10",
        "output": "5"
      },
      {
        "input": "startValue = 1000, target = 500",
        "output": "500"
      },
      {
        "input": "startValue = 9, target = 18",
        "output": "1"
      },
      {
        "input": "startValue = 7, target = 1000",
        "output": "13"
      },
      {
        "input": "startValue = 31, target = 15",
        "output": "16"
      },
      {
        "input": "startValue = 15, target = 300",
        "output": "12"
      },
      {
        "input": "startValue = 2, target = 2048",
        "output": "10"
      },
      {
        "input": "startValue = 10, target = 15",
        "output": "4"
      },
      {
        "input": "startValue = 5, target = 1023",
        "output": "10"
      },
      {
        "input": "startValue = 25, target = 100",
        "output": "2"
      },
      {
        "input": "startValue = 20, target = 5",
        "output": "15"
      },
      {
        "input": "startValue = 15, target = 31",
        "output": "10"
      },
      {
        "input": "startValue = 7, target = 1",
        "output": "6"
      },
      {
        "input": "startValue = 8, target = 20",
        "output": "5"
      },
      {
        "input": "startValue = 7, target = 100",
        "output": "6"
      },
      {
        "input": "startValue = 999999999, target = 1000000000",
        "output": "500000000"
      },
      {
        "input": "startValue = 64, target = 32",
        "output": "32"
      },
      {
        "input": "startValue = 8, target = 1000",
        "output": "9"
      },
      {
        "input": "startValue = 15, target = 7",
        "output": "8"
      },
      {
        "input": "startValue = 12345, target = 67890",
        "output": "3863"
      },
      {
        "input": "startValue = 3, target = 123456789",
        "output": "39"
      },
      {
        "input": "startValue = 5, target = 123",
        "output": "8"
      },
      {
        "input": "startValue = 1024, target = 512",
        "output": "512"
      },
      {
        "input": "startValue = 1000000, target = 10000000",
        "output": "375004"
      },
      {
        "input": "startValue = 12345, target = 98765",
        "output": "6178"
      },
      {
        "input": "startValue = 10, target = 31",
        "output": "5"
      },
      {
        "input": "startValue = 1, target = 1000000",
        "output": "28"
      },
      {
        "input": "startValue = 8, target = 1",
        "output": "7"
      },
      {
        "input": "startValue = 123, target = 456",
        "output": "11"
      },
      {
        "input": "startValue = 100, target = 1",
        "output": "99"
      },
      {
        "input": "startValue = 2, target = 1025",
        "output": "20"
      },
      {
        "input": "startValue = 3456, target = 6789",
        "output": "63"
      },
      {
        "input": "startValue = 500000000, target = 1000000000",
        "output": "1"
      },
      {
        "input": "startValue = 1023, target = 1024",
        "output": "512"
      },
      {
        "input": "startValue = 8, target = 15",
        "output": "2"
      },
      {
        "input": "startValue = 7, target = 101",
        "output": "7"
      },
      {
        "input": "startValue = 31, target = 8",
        "output": "23"
      },
      {
        "input": "startValue = 3, target = 9",
        "output": "4"
      },
      {
        "input": "startValue = 500, target = 250",
        "output": "250"
      },
      {
        "input": "startValue = 987654321, target = 123456789",
        "output": "864197532"
      },
      {
        "input": "startValue = 500, target = 1024",
        "output": "246"
      },
      {
        "input": "startValue = 7, target = 150",
        "output": "9"
      },
      {
        "input": "startValue = 8, target = 64",
        "output": "3"
      },
      {
        "input": "startValue = 6, target = 32",
        "output": "5"
      },
      {
        "input": "startValue = 10, target = 1023",
        "output": "10"
      },
      {
        "input": "startValue = 13, target = 169",
        "output": "9"
      },
      {
        "input": "startValue = 8, target = 1024",
        "output": "7"
      }
    ]
  },
  {
    "id": 3119,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "String",
      "Sorting"
    ],
    "problemDescription": "You are given a string road, consisting only of characters \"x\" and \".\", where each \"x\" denotes a pothole and each \".\" denotes a smooth road, and an integer budget.\nIn one repair operation, you can repair n consecutive potholes for a price of n + 1.\nReturn the maximum number of potholes that can be fixed such that the sum of the prices of all of the fixes doesn't go over the given budget.\n\u00a0\nExample 1:\n\nInput: road = \"..\", budget = 5\nOutput: 0\nExplanation:\nThere are no potholes to be fixed.\n\nExample 2:\n\nInput: road = \"..xxxxx\", budget = 4\nOutput: 3\nExplanation:\nWe fix the first three potholes (they are consecutive). The budget needed for this task is 3 + 1 = 4.\n\nExample 3:\n\nInput: road = \"x.x.xxx...x\", budget = 14\nOutput: 6\nExplanation:\nWe can fix all the potholes. The total cost would be (1 + 1) + (1 + 1) + (3 + 1) + (1 + 1) = 10 which is within our budget of 14.\n\n\u00a0\nConstraints:\n\n1 <= road.length <= 105\n1 <= budget <= 105 + 1\nroad consists only of characters '.' and 'x'.\n\n",
    "starterCode": "class Solution:\n    def maxPotholes(self, road: str, budget: int) -> int:\n        ",
    "testCases": [
      {
        "input": "road = \"xxxx\", budget = 6",
        "output": "4"
      },
      {
        "input": "road = \"..\", budget = 5",
        "output": "0"
      },
      {
        "input": "road = \"x.x.xxx...x\", budget = 14",
        "output": "6"
      },
      {
        "input": "road = \"xxxx.xxxx\", budget = 12",
        "output": "8"
      },
      {
        "input": "road = \"xx.xx.xx.xx\", budget = 15",
        "output": "8"
      },
      {
        "input": "road = \"x\", budget = 2",
        "output": "1"
      },
      {
        "input": "road = \"x.x.x.x\", budget = 6",
        "output": "3"
      },
      {
        "input": "road = \"xxx.xxx.xx\", budget = 15",
        "output": "8"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x\", budget = 20",
        "output": "10"
      },
      {
        "input": "road = \"x.xxxxx.x\", budget = 15",
        "output": "7"
      },
      {
        "input": "road = \"x.x.x.x.x\", budget = 15",
        "output": "5"
      },
      {
        "input": "road = \"x.x.x.x\", budget = 8",
        "output": "4"
      },
      {
        "input": "road = \"xxxxx\", budget = 10",
        "output": "5"
      },
      {
        "input": "road = \"x.x.x\", budget = 5",
        "output": "2"
      },
      {
        "input": "road = \"xxxxxxxxx\", budget = 10",
        "output": "9"
      },
      {
        "input": "road = \"x...x...x...x\", budget = 10",
        "output": "4"
      },
      {
        "input": "road = \"xxx...xxx\", budget = 10",
        "output": "6"
      },
      {
        "input": "road = \"x.x.x.x.x\", budget = 6",
        "output": "3"
      },
      {
        "input": "road = \"xxxxx\", budget = 6",
        "output": "5"
      },
      {
        "input": "road = \"...\", budget = 10",
        "output": "0"
      },
      {
        "input": "road = \"...\", budget = 0",
        "output": "0"
      },
      {
        "input": "road = \"x.x.x.x.x\", budget = 7",
        "output": "3"
      },
      {
        "input": "road = \".x.x.x.x.\", budget = 8",
        "output": "4"
      },
      {
        "input": "road = \"...\", budget = 1",
        "output": "0"
      },
      {
        "input": "road = \"xxxxxxxxx\", budget = 20",
        "output": "9"
      },
      {
        "input": "road = \"x.xxxxx.x\", budget = 10",
        "output": "7"
      },
      {
        "input": "road = \"xxxx\", budget = 10",
        "output": "4"
      },
      {
        "input": "road = \"........\", budget = 10",
        "output": "0"
      },
      {
        "input": "road = \"..xxxxx\", budget = 4",
        "output": "3"
      },
      {
        "input": "road = \"xxxxxxxxx\", budget = 100",
        "output": "9"
      },
      {
        "input": "road = \"...xxx...xxxx...xxxxx...xxxxxx\", budget = 35",
        "output": "18"
      },
      {
        "input": "road = \"............\", budget = 100",
        "output": "0"
      },
      {
        "input": "road = \"xxxxxxxxxxxxxxxxxxxxxxx\", budget = 50",
        "output": "23"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\", budget = 50",
        "output": "21"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\", budget = 40",
        "output": "20"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x\", budget = 10",
        "output": "5"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\", budget = 30",
        "output": "15"
      },
      {
        "input": "road = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\", budget = 50",
        "output": "28"
      },
      {
        "input": "road = \"xxxxxxxxx...xxxxxxxxx...xxxxxxxxx\", budget = 30",
        "output": "27"
      },
      {
        "input": "road = \"xxxxx...xxxxx\", budget = 20",
        "output": "10"
      },
      {
        "input": "road = \"xxxxxx\", budget = 10",
        "output": "6"
      },
      {
        "input": "road = \"xxxxxxxxxxx\", budget = 15",
        "output": "11"
      },
      {
        "input": "road = \"xxxxxxxxxx.xxxxxxxxx.xxxxx\", budget = 40",
        "output": "24"
      },
      {
        "input": "road = \"xx..xx..xx\", budget = 10",
        "output": "6"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x\", budget = 50",
        "output": "10"
      },
      {
        "input": "road = \"...xxxxxxx....xxxxx...\", budget = 20",
        "output": "12"
      },
      {
        "input": "road = \"xx.xx.xx.xx.xx.xx.xx\", budget = 20",
        "output": "13"
      },
      {
        "input": "road = \"xxxxxxxxx...xxxxxxxxx\", budget = 30",
        "output": "18"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x\", budget = 30",
        "output": "11"
      },
      {
        "input": "road = \"x.xxxx.xxxxxx.xxxxxxxx\", budget = 30",
        "output": "19"
      },
      {
        "input": "road = \"....xxxxx.....xxxxx.....xxxxx....\", budget = 40",
        "output": "15"
      },
      {
        "input": "road = \"xx..xx...xx....xx.....xx......xx.......xx........xx.........xx..........xx\", budget = 50",
        "output": "20"
      },
      {
        "input": "road = \"xxxxxxxxxxxxxxxxxxxx\", budget = 30",
        "output": "20"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\", budget = 40",
        "output": "20"
      },
      {
        "input": "road = \"xxxx.xxxx.xxxx\", budget = 25",
        "output": "12"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\", budget = 30",
        "output": "15"
      },
      {
        "input": "road = \"x.x.x.x.x.x\", budget = 15",
        "output": "6"
      },
      {
        "input": "road = \"xxxxx.xxxxx.xxxxx\", budget = 20",
        "output": "15"
      },
      {
        "input": "road = \"...........................\", budget = 50",
        "output": "0"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\", budget = 40",
        "output": "17"
      },
      {
        "input": "road = \"...x...x...x...x...x...\", budget = 12",
        "output": "5"
      },
      {
        "input": "road = \"x.x...x...x...x...x...x...x...x...x...x\", budget = 20",
        "output": "10"
      },
      {
        "input": "road = \"x.x...x.x.x.x...x.x.x\", budget = 15",
        "output": "7"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x\", budget = 25",
        "output": "10"
      },
      {
        "input": "road = \"x.xxxxx.xxxxx.x\", budget = 25",
        "output": "12"
      },
      {
        "input": "road = \"xxxx.xxxxx.xxxxx.xxxxx\", budget = 25",
        "output": "19"
      },
      {
        "input": "road = \"x.x...x.x...x.x...x\", budget = 12",
        "output": "6"
      },
      {
        "input": "road = \"xxxxxxxxxxxxxxx\", budget = 100",
        "output": "15"
      },
      {
        "input": "road = \"xxxxxxxxxxxxx........x....x.......xxxxxxx\", budget = 30",
        "output": "22"
      },
      {
        "input": "road = \"xxxxxxxxxxx...xxxxxxxxxxx...xxxxxxxxxxx\", budget = 70",
        "output": "33"
      },
      {
        "input": "road = \"xxxxxxxxxx\", budget = 15",
        "output": "10"
      },
      {
        "input": "road = \"........x........x........x\", budget = 3",
        "output": "1"
      },
      {
        "input": "road = \"x.xxxxx.x\", budget = 12",
        "output": "7"
      },
      {
        "input": "road = \"xxxxx.xxxxx.xxxxx.xxxxx.xxxxx\", budget = 80",
        "output": "25"
      },
      {
        "input": "road = \"xxxx.xxxx.xxxx.xxxx.xxxx\", budget = 25",
        "output": "20"
      },
      {
        "input": "road = \"xxxxxxxxxxxxxxx\", budget = 10",
        "output": "9"
      },
      {
        "input": "road = \"x.x.x.x.x.x\", budget = 12",
        "output": "6"
      },
      {
        "input": "road = \"xxxx..xxx..xx\", budget = 15",
        "output": "9"
      },
      {
        "input": "road = \"x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x\", budget = 50",
        "output": "22"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\", budget = 25",
        "output": "12"
      },
      {
        "input": "road = \"x\", budget = 1",
        "output": "0"
      },
      {
        "input": "road = \"x......x......x......x......x......x......x\", budget = 35",
        "output": "7"
      },
      {
        "input": "road = \"....\", budget = 1",
        "output": "0"
      },
      {
        "input": "road = \"...xxx.xxxx...xx.xx.xxxxx\", budget = 25",
        "output": "16"
      },
      {
        "input": "road = \"xxxx...xxxx...xxxx\", budget = 25",
        "output": "12"
      },
      {
        "input": "road = \"x..x...x...x..x\", budget = 12",
        "output": "5"
      },
      {
        "input": "road = \"...xxxxxx...\", budget = 8",
        "output": "6"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\", budget = 100",
        "output": "19"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\", budget = 20",
        "output": "10"
      },
      {
        "input": "road = \"x.x...x..x...x...x..x...x\", budget = 30",
        "output": "8"
      },
      {
        "input": "road = \"xxxxx.xxxxx.xxxxx.xxxxx.xxxxx\", budget = 30",
        "output": "25"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x\", budget = 21",
        "output": "7"
      },
      {
        "input": "road = \"x.xxxx.xxxx.xxxxx\", budget = 20",
        "output": "14"
      },
      {
        "input": "road = \"xxxxxxxxxxxxxxx\", budget = 20",
        "output": "15"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x\", budget = 10",
        "output": "5"
      },
      {
        "input": "road = \"x.x.x.x.x\", budget = 10",
        "output": "5"
      },
      {
        "input": "road = \"...xxxxx...\", budget = 10",
        "output": "5"
      },
      {
        "input": "road = \"...\", budget = 3",
        "output": "0"
      },
      {
        "input": "road = \"x..xx..xx..x\", budget = 15",
        "output": "6"
      },
      {
        "input": "road = \"xxxxxx.xxxxx.xxxxx\", budget = 40",
        "output": "16"
      },
      {
        "input": "road = \"x....x...x....x...x\", budget = 15",
        "output": "5"
      },
      {
        "input": "road = \"x.xxxxx.xxxxx.xxxxx.xxxxx\", budget = 30",
        "output": "21"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\", budget = 60",
        "output": "30"
      },
      {
        "input": "road = \"x.xxxxxx.xxxxxx.xxxxxx\", budget = 60",
        "output": "19"
      },
      {
        "input": "road = \".x.x.x.x.x.x.x.x.x.\", budget = 10",
        "output": "5"
      },
      {
        "input": "road = \"x...x...x...x...x\", budget = 15",
        "output": "5"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x\", budget = 18",
        "output": "9"
      },
      {
        "input": "road = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", budget = 100",
        "output": "29"
      },
      {
        "input": "road = \"xxxx.xxxxx\", budget = 15",
        "output": "9"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\", budget = 30",
        "output": "15"
      },
      {
        "input": "road = \"xxxxxxxxxxxxxxx\", budget = 25",
        "output": "15"
      },
      {
        "input": "road = \"xxxx....xxx....xx\", budget = 20",
        "output": "9"
      },
      {
        "input": "road = \"........x....x........x....x........\", budget = 10",
        "output": "4"
      },
      {
        "input": "road = \"xxxxxxx...xxx.xx.x.x\", budget = 20",
        "output": "14"
      },
      {
        "input": "road = \"xxxxxxxxx\", budget = 9",
        "output": "8"
      },
      {
        "input": "road = \"............\", budget = 5",
        "output": "0"
      },
      {
        "input": "road = \"...x...x...x...x...x...x\", budget = 20",
        "output": "6"
      },
      {
        "input": "road = \"xxxx...xxx\", budget = 11",
        "output": "7"
      },
      {
        "input": "road = \"xxxxxxxxxxxxxxxxxxx\", budget = 25",
        "output": "19"
      },
      {
        "input": "road = \"x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\", budget = 60",
        "output": "28"
      },
      {
        "input": "road = \"................x............x............x............x............x............x............\", budget = 20",
        "output": "6"
      },
      {
        "input": "road = \"...x....x....x....x....x\", budget = 15",
        "output": "5"
      },
      {
        "input": "road = \".............x.............\", budget = 5",
        "output": "1"
      },
      {
        "input": "road = \"xxxxxxx...xxxxx....xxx\", budget = 25",
        "output": "15"
      },
      {
        "input": "road = \"x..xx..x\", budget = 8",
        "output": "4"
      },
      {
        "input": "road = \"xx..xx..xx..xx..xx..xx..xx..xx\", budget = 20",
        "output": "13"
      },
      {
        "input": "road = \"x..x..x..x..x..x\", budget = 15",
        "output": "6"
      },
      {
        "input": "road = \".x.x.x.x.x.x.x.x.x.x\", budget = 15",
        "output": "7"
      }
    ]
  },
  {
    "id": 870,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "problemDescription": "You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].\nReturn any permutation of nums1 that maximizes its advantage with respect to nums2.\n\u00a0\nExample 1:\nInput: nums1 = [2,7,11,15], nums2 = [1,10,4,11]\nOutput: [2,11,7,15]\nExample 2:\nInput: nums1 = [12,24,8,32], nums2 = [13,25,32,11]\nOutput: [24,32,8,12]\n\n\u00a0\nConstraints:\n\n1 <= nums1.length <= 105\nnums2.length == nums1.length\n0 <= nums1[i], nums2[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [5,15,25,35,45]",
        "output": "[10, 20, 30, 40, 50]"
      },
      {
        "input": "nums1 = [5,15,25,35], nums2 = [10,20,30,40]",
        "output": "[15, 25, 35, 5]"
      },
      {
        "input": "nums1 = [2,7,11,15], nums2 = [1,10,4,11]",
        "output": "[2, 11, 7, 15]"
      },
      {
        "input": "nums1 = [100,90,80,70,60], nums2 = [60,70,80,90,100]",
        "output": "[70, 80, 90, 100, 60]"
      },
      {
        "input": "nums1 = [9,12,24,22,15], nums2 = [14,13,25,17,22]",
        "output": "[22, 15, 9, 24, 12]"
      },
      {
        "input": "nums1 = [5,6,7,8,9], nums2 = [1,2,3,4,5]",
        "output": "[5, 6, 7, 8, 9]"
      },
      {
        "input": "nums1 = [5,6,7,8], nums2 = [4,5,6,7]",
        "output": "[5, 6, 7, 8]"
      },
      {
        "input": "nums1 = [100,200,300,400], nums2 = [50,150,250,350]",
        "output": "[100, 200, 300, 400]"
      },
      {
        "input": "nums1 = [12,24,8,32], nums2 = [13,25,32,11]",
        "output": "[24, 32, 8, 12]"
      },
      {
        "input": "nums1 = [10,10,10,10], nums2 = [1,1,1,1]",
        "output": "[10, 10, 10, 10]"
      },
      {
        "input": "nums1 = [1,2,3,4], nums2 = [1,2,3,4]",
        "output": "[2, 3, 4, 1]"
      },
      {
        "input": "nums1 = [100,90,80,70], nums2 = [60,70,80,90]",
        "output": "[70, 80, 90, 100]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1]",
        "output": "[1, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [1,2,3,4], nums2 = [4,3,2,1]",
        "output": "[1, 4, 3, 2]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [9,8,7,6,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [5,6,7,8], nums2 = [1,2,3,4]",
        "output": "[5, 6, 7, 8]"
      },
      {
        "input": "nums1 = [1,2,3,4], nums2 = [5,6,7,8]",
        "output": "[4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [8,24,15,3,17,22], nums2 = [25,18,9,13,22,6]",
        "output": "[3, 22, 15, 17, 24, 8]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [450, 350, 250, 150, 50]",
        "output": "[500, 400, 300, 200, 100]"
      },
      {
        "input": "nums1 = [8,6,4,2,0,1,3,5,7,9], nums2 = [9,7,5,3,1,0,2,4,6,8]",
        "output": "[0, 8, 6, 4, 2, 1, 3, 5, 7, 9]"
      },
      {
        "input": "nums1 = [1000,2000,3000,4000,5000,6000,7000,8000,9000,10000], nums2 = [10000,9000,8000,7000,6000,5000,4000,3000,2000,1000]",
        "output": "[1000, 10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], nums2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 1]"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60,70,80,90,100], nums2 = [5,15,25,35,45,55,65,75,85,95]",
        "output": "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [105, 205, 305, 405, 505, 605, 705, 805, 905, 1005]",
        "output": "[200, 300, 400, 500, 600, 700, 800, 900, 1000, 100]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [47,29,22,18,4,37,30,25,36,42,3,20,5,11,13,27,8,2,24,17], nums2 = [16,33,12,38,34,19,35,32,46,31,45,40,28,43,39,44,26,23,14,41]",
        "output": "[18, 42, 13, 25, 47, 20, 30, 37, 2, 36, 3, 11, 29, 5, 22, 4, 27, 24, 17, 8]"
      },
      {
        "input": "nums1 = [20,17,13,8,15,11,10,9], nums2 = [18,16,14,12,10,9,8,7]",
        "output": "[20, 17, 15, 13, 11, 10, 9, 8]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [10,10,10,10,10,10,10,10,10,10], nums2 = [9,9,9,9,9,9,9,9,9,9]",
        "output": "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "nums1 = [8,11,13,18,12,14,10,17,15,16], nums2 = [9,11,10,13,12,15,14,17,18,16]",
        "output": "[10, 12, 11, 14, 13, 16, 15, 18, 8, 17]"
      },
      {
        "input": "nums1 = [7,14,21,28,35,42,49,56], nums2 = [8,16,24,32,40,48,54,60]",
        "output": "[14, 21, 28, 35, 42, 49, 56, 7]"
      },
      {
        "input": "nums1 = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991], nums2 = [999999992, 999999995, 999999991, 999999998, 999999997, 999999994, 999999993, 999999996, 1000000000, 999999999]",
        "output": "[999999993, 999999996, 999999992, 999999999, 999999998, 999999995, 999999994, 999999997, 999999991, 1000000000]"
      },
      {
        "input": "nums1 = [100,99,98,97,96,95,94,93,92,91], nums2 = [90,91,92,93,94,95,96,97,98,99]",
        "output": "[91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], nums2 = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [2,4,6,8,10,12,14,15,13,11,9,7,5,3,1]",
        "output": "[3, 5, 7, 9, 11, 13, 15, 1, 14, 12, 10, 8, 6, 4, 2]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], nums2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "[3, 5, 7, 9, 11, 13, 15, 17, 19, 1]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5]",
        "output": "[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]"
      },
      {
        "input": "nums1 = [100,90,80,70,60,50,40,30,20,10], nums2 = [95,85,75,65,55,45,35,25,15,5]",
        "output": "[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]"
      },
      {
        "input": "nums1 = [3, 6, 7, 8, 13, 22, 24, 45, 50, 60], nums2 = [9, 12, 25, 32, 35, 40, 46, 51, 61, 62]",
        "output": "[13, 22, 45, 50, 60, 24, 8, 7, 6, 3]"
      },
      {
        "input": "nums1 = [50,40,30,20,10], nums2 = [45,35,25,15,5]",
        "output": "[50, 40, 30, 20, 10]"
      },
      {
        "input": "nums1 = [1,10,100,1000,10000], nums2 = [5000,500,50,5,50000]",
        "output": "[10000, 1000, 100, 10, 1]"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60,70,80,90,100], nums2 = [1,5,9,13,17,21,25,29,33,37]",
        "output": "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"
      },
      {
        "input": "nums1 = [100,50,75,25,60,90], nums2 = [55,80,65,40,95,30]",
        "output": "[75, 100, 90, 60, 25, 50]"
      },
      {
        "input": "nums1 = [50,40,30,20,10], nums2 = [1,2,3,4,5]",
        "output": "[10, 20, 30, 40, 50]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], nums2 = [25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], nums2 = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [1000000000,999999999,999999998,999999997,999999996], nums2 = [999999995,999999994,999999993,999999992,999999991]",
        "output": "[1000000000, 999999999, 999999998, 999999997, 999999996]"
      },
      {
        "input": "nums1 = [1000000000, 500000000, 250000000, 125000000, 62500000, 31250000, 15625000], nums2 = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]",
        "output": "[1000000000, 500000000, 250000000, 125000000, 62500000, 31250000, 15625000]"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60,70,80,90,100], nums2 = [99,98,97,96,95,94,93,92,91,90]",
        "output": "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"
      },
      {
        "input": "nums1 = [5, 21, 17, 13, 29, 3, 19, 11], nums2 = [6, 25, 18, 14, 28, 4, 20, 12]",
        "output": "[11, 29, 19, 17, 3, 5, 21, 13]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 1]"
      },
      {
        "input": "nums1 = [5,21,17,19,13,25,18], nums2 = [10,15,20,24,22,21,19]",
        "output": "[13, 17, 25, 5, 18, 19, 21]"
      },
      {
        "input": "nums1 = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], nums2 = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99]",
        "output": "[15, 25, 35, 45, 55, 65, 75, 85, 95, 5]"
      },
      {
        "input": "nums1 = [100,200,300,400,500,600,700,800,900,1000], nums2 = [950,850,750,650,550,450,350,250,150,50]",
        "output": "[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]"
      },
      {
        "input": "nums1 = [1, 2, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 9, 10, 10], nums2 = [10, 10, 9, 9, 8, 7, 6, 5, 5, 5, 4, 3, 2, 2, 1]",
        "output": "[2, 1, 10, 5, 10, 9, 9, 6, 7, 8, 5, 5, 3, 4, 2]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], nums2 = [2,1,4,3,6,5,8,7,10,9,12,11,14,13,16,15,18,17,20,19]",
        "output": "[3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 1, 20]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [150, 250, 350, 450, 550, 650, 750, 850, 950, 1050]",
        "output": "[200, 300, 400, 500, 600, 700, 800, 900, 1000, 100]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [2,2,2,5,5,5,7,7,7,11,11,11,13,13,13], nums2 = [1,3,4,4,6,8,9,10,10,12,12,14,15,16,17]",
        "output": "[2, 5, 5, 5, 7, 11, 11, 11, 13, 13, 13, 7, 7, 2, 2]"
      },
      {
        "input": "nums1 = [5,3,8,9,1,7,6,2,4,10], nums2 = [8,7,6,5,4,3,2,1,10,9]",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 10]"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], nums2 = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]",
        "output": "[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 1]"
      },
      {
        "input": "nums1 = [2,1,2,1,2,1,2,1,2,1], nums2 = [1,2,1,2,1,2,1,2,1,2]",
        "output": "[2, 1, 2, 1, 2, 1, 2, 1, 2, 1]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500], nums2 = [99, 199, 299, 399, 499, 599, 699, 799, 899, 999, 1099, 1199, 1299, 1399, 1499]",
        "output": "[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]"
      },
      {
        "input": "nums1 = [999999999,999999998,999999997,999999996,999999995,999999994,999999993,999999992,999999991,999999990], nums2 = [999999990,999999991,999999992,999999993,999999994,999999995,999999996,999999997,999999998,999999999]",
        "output": "[999999991, 999999992, 999999993, 999999994, 999999995, 999999996, 999999997, 999999998, 999999999, 999999990]"
      },
      {
        "input": "nums1 = [100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119], nums2 = [119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100]",
        "output": "[100, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "[10, 100, 90, 80, 70, 60, 50, 40, 30, 20]"
      },
      {
        "input": "nums1 = [25,15,35,5,45,10,55,20,65,30], nums2 = [23,24,25,26,27,28,29,30,31,32]",
        "output": "[25, 30, 35, 45, 55, 65, 20, 15, 10, 5]"
      },
      {
        "input": "nums1 = [23,34,45,56,67,78,89,90,101,112], nums2 = [12,23,34,45,56,67,78,89,90,101]",
        "output": "[23, 34, 45, 56, 67, 78, 89, 90, 101, 112]"
      },
      {
        "input": "nums1 = [5,5,5,5,5,5,5,5,5,5], nums2 = [5,5,5,5,5,5,5,5,5,5]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [3,6,9,12,15,18,21,24,27,30,33,36], nums2 = [2,5,8,11,14,17,20,23,26,29,32,35]",
        "output": "[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36]"
      },
      {
        "input": "nums1 = [1000000000,1000000000,1000000000,1000000000,1000000000], nums2 = [1000000000,1000000000,1000000000,1000000000,1000000000]",
        "output": "[1000000000, 1000000000, 1000000000, 1000000000, 1000000000]"
      },
      {
        "input": "nums1 = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50], nums2 = [49, 49, 49, 49, 49, 49, 49, 49, 49, 49]",
        "output": "[50, 50, 50, 50, 50, 50, 50, 50, 50, 50]"
      },
      {
        "input": "nums1 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], nums2 = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [99, 199, 299, 399, 499, 599, 699, 799, 899, 999]",
        "output": "[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]"
      },
      {
        "input": "nums1 = [3,3,3,3,3], nums2 = [2,2,2,2,2]",
        "output": "[3, 3, 3, 3, 3]"
      },
      {
        "input": "nums1 = [3,10,7,8,9,5,2,1,4,6], nums2 = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [29,14,37,18,25,19,40,32], nums2 = [26,35,33,28,31,17,41,16]",
        "output": "[29, 25, 40, 32, 37, 19, 14, 18]"
      },
      {
        "input": "nums1 = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1]"
      },
      {
        "input": "nums1 = [5,5,5,5,5,5,5,5,5,5], nums2 = [3,2,6,4,1,9,7,8,5,10]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49], nums2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]",
        "output": "[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 1]"
      },
      {
        "input": "nums1 = [1,2,2,3,4,5,5,6,7,8,8,9,10,10,11], nums2 = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[6, 7, 8, 8, 9, 10, 10, 11, 5, 5, 4, 3, 2, 2, 1]"
      },
      {
        "input": "nums1 = [8,18,11,19,22,17,9,13,15,12,14,20,7,21,10,16,5,6,4,3,2,1], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,24,23]",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 1, 0, 0]"
      },
      {
        "input": "nums1 = [8, 5, 12, 19, 22, 31, 42, 55, 60, 65], nums2 = [10, 9, 20, 21, 30, 35, 50, 54, 56, 61]",
        "output": "[19, 12, 22, 31, 42, 55, 60, 65, 8, 5]"
      },
      {
        "input": "nums1 = [41,39,33,21,32,30,25,14,17,13,27,22,15,20,26], nums2 = [24,7,29,38,5,44,3,12,10,22,13,26,23,46,6]",
        "output": "[27, 17, 32, 39, 14, 41, 13, 21, 20, 25, 22, 30, 26, 33, 15]"
      },
      {
        "input": "nums1 = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[999999991, 999999992, 999999993, 999999994, 999999995, 999999996, 999999997, 999999998, 999999999, 1000000000]"
      },
      {
        "input": "nums1 = [5,14,13,21,24,17,8,16], nums2 = [18,20,19,16,15,14,13,12]",
        "output": "[24, 5, 8, 21, 17, 16, 14, 13]"
      },
      {
        "input": "nums1 = [5,23,15,32,6,9,18,20], nums2 = [17,30,25,16,10,2,19,8]",
        "output": "[20, 6, 32, 18, 15, 5, 23, 9]"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], nums2 = [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24]",
        "output": "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], nums2 = [200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "[10, 200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20]"
      },
      {
        "input": "nums1 = [3,5,8,2,1,9,7,4,6], nums2 = [6,7,8,2,1,5,4,3,9]",
        "output": "[7, 8, 9, 3, 2, 6, 5, 4, 1]"
      },
      {
        "input": "nums1 = [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135], nums2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "[18, 27, 36, 45, 54, 63, 72, 81, 99, 108, 117, 126, 135, 90, 9]"
      },
      {
        "input": "nums1 = [100,200,300,400,500,600,700,800,900,1000], nums2 = [500,400,300,200,100,1100,900,800,700,600]",
        "output": "[600, 500, 400, 300, 200, 100, 1000, 900, 800, 700]"
      },
      {
        "input": "nums1 = [1000000000,500000000,750000000,250000000,600000000,900000000], nums2 = [550000000,800000000,650000000,400000000,950000000,300000000]",
        "output": "[750000000, 1000000000, 900000000, 600000000, 250000000, 500000000]"
      },
      {
        "input": "nums1 = [3,1,4,1,5,9,2,6,5,3,5], nums2 = [3,1,4,1,5,9,2,6,5,3,5]",
        "output": "[4, 2, 5, 3, 6, 1, 3, 1, 9, 5, 5]"
      },
      {
        "input": "nums1 = [7,5,6,4,3,8,2,9,1,10], nums2 = [6,7,8,5,4,9,3,10,1,2]",
        "output": "[7, 8, 9, 6, 5, 10, 4, 1, 2, 3]"
      },
      {
        "input": "nums1 = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], nums2 = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "nums1 = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75], nums2 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125]",
        "output": "[6, 12, 18, 21, 27, 33, 36, 42, 48, 51, 57, 63, 66, 72, 75, 69, 60, 54, 45, 39, 30, 24, 15, 9, 3]"
      }
    ]
  },
  {
    "id": 86,
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "problemDescription": "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\nYou should preserve the original relative order of the nodes in each of the two partitions.\n\u00a0\nExample 1:\n\n\nInput: head = [1,4,3,2,5,2], x = 3\nOutput: [1,2,2,4,3,5]\n\nExample 2:\n\nInput: head = [2,1], x = 2\nOutput: [1,2]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [0, 200].\n-100 <= Node.val <= 100\n-200 <= x <= 200\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "head = [], x = 0",
        "output": "None"
      },
      {
        "input": "head = [5,4,3,2,1], x = 3",
        "output": "[2, 1, 5, 4, 3]"
      },
      {
        "input": "head = [100,-100,50,0,-50], x = 0",
        "output": "[-100, -50, 100, 50, 0]"
      },
      {
        "input": "head = [1,1,1,1,1], x = 2",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [1,2,3,4,5], x = 3",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [1,4,3,2,5,2], x = 3",
        "output": "[1, 2, 2, 4, 3, 5]"
      },
      {
        "input": "head = [5,1,2,3,4], x = 3",
        "output": "[1, 2, 5, 3, 4]"
      },
      {
        "input": "head = [-100, 100, 0], x = 0",
        "output": "[-100, 100, 0]"
      },
      {
        "input": "head = [1,2,3,4,5], x = 6",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [], x = 5",
        "output": "None"
      },
      {
        "input": "head = [2,1], x = 2",
        "output": "[1, 2]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], x = 5",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 1",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [100, 50, 0, -50, -100], x = 0",
        "output": "[-50, -100, 100, 50, 0]"
      },
      {
        "input": "head = [200,-200,100,-100,50,-50,0,25,-25,75,-75,125,-125,150,-150], x = -50",
        "output": "[-200, -100, -75, -125, -150, 200, 100, 50, -50, 0, 25, -25, 75, 125, 150]"
      },
      {
        "input": "head = [10, 5, 10, 5, 10, 5, 10, 5], x = 7",
        "output": "[5, 5, 5, 5, 10, 10, 10, 10]"
      },
      {
        "input": "head = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], x = 100",
        "output": "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], x = 10",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 5",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [0, 0, 0, 0, 0, 0, 0, 0], x = 0",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], x = 6",
        "output": "[5, 4, 3, 2, 1, 10, 9, 8, 7, 6]"
      },
      {
        "input": "head = [10, 10, 10, 5, 5, 5, 1, 1, 1, 0, 0, 0], x = 5",
        "output": "[1, 1, 1, 0, 0, 0, 10, 10, 10, 5, 5, 5]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19], x = 10",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
      },
      {
        "input": "head = [-50, -40, -30, -20, -10], x = -25",
        "output": "[-50, -40, -30, -20, -10]"
      },
      {
        "input": "head = [0, 0, 0, 0, 0], x = 0",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [100, -100, 50, -50, 25, -25, 0], x = 0",
        "output": "[-100, -50, -25, 100, 50, 25, 0]"
      },
      {
        "input": "head = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91], x = 95",
        "output": "[94, 93, 92, 91, 100, 99, 98, 97, 96, 95]"
      },
      {
        "input": "head = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], x = 3",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "head = [5,1,5,2,5,3,5,4,5,5,5], x = 5",
        "output": "[1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [50, 20, 60, 30, 40, 50, 10, 90], x = 50",
        "output": "[20, 30, 40, 10, 50, 60, 50, 90]"
      },
      {
        "input": "head = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], x = 5",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], x = 8",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [50, 40, 30, 20, 10, 0, -10, -20, -30, -40], x = 0",
        "output": "[-10, -20, -30, -40, 50, 40, 30, 20, 10, 0]"
      },
      {
        "input": "head = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2], x = 2",
        "output": "[1, 1, 1, 1, 1, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], x = 5",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], x = 1",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], x = 5",
        "output": "[4, 3, 2, 1, 10, 9, 8, 7, 6, 5]"
      },
      {
        "input": "head = [5, 1, 8, 0, 3, 9, 2, 7], x = 5",
        "output": "[1, 0, 3, 2, 5, 8, 9, 7]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 5.5",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50], x = 0",
        "output": "[-10, -20, -30, -40, -50, 50, 40, 30, 20, 10, 0]"
      },
      {
        "input": "head = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 1",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [2, 2, 2, 2, 2, 1, 1, 1, 1, 1], x = 2",
        "output": "[1, 1, 1, 1, 1, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 2",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [100, 99, 98, 97, 96, 95], x = 98",
        "output": "[97, 96, 95, 100, 99, 98]"
      },
      {
        "input": "head = [50,40,30,20,10,0,-10,-20,-30,-40,-50], x = 30",
        "output": "[20, 10, 0, -10, -20, -30, -40, -50, 50, 40, 30]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 11",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 0",
        "output": "[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1, 1, 1, 1, 1, 1, 1, 1], x = 2",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], x = 8",
        "output": "[7, 7, 7, 7, 7, 7, 7, 7, 7, 7]"
      },
      {
        "input": "head = [3, 3, 3, 3, 3], x = 3",
        "output": "[3, 3, 3, 3, 3]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1,0], x = 4",
        "output": "[3, 2, 1, 0, 9, 8, 7, 6, 5, 4]"
      },
      {
        "input": "head = [0, 1, -1, 2, -2, 3, -3, 4, -4, 5, -5], x = 0",
        "output": "[-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], x = 5",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [100, -100, 50, -50, 25, -25, 75, -75, 0], x = 0",
        "output": "[-100, -50, -25, -75, 100, 50, 25, 75, 0]"
      },
      {
        "input": "head = [5,1,2,3,4,5,6,7,8,9,10], x = 5",
        "output": "[1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 0",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [1, 5, 3, 2, 4, 6, 2, 3, 1, 5], x = 4",
        "output": "[1, 3, 2, 2, 3, 1, 5, 4, 6, 5]"
      },
      {
        "input": "head = [1, 3, 2, 5, 4, 7, 6, 9, 8, 10], x = 5",
        "output": "[1, 3, 2, 4, 5, 7, 6, 9, 8, 10]"
      },
      {
        "input": "head = [1,2,2,3,1,2,3,1,2,3,1,2,3], x = 2",
        "output": "[1, 1, 1, 1, 2, 2, 3, 2, 3, 2, 3, 2, 3]"
      },
      {
        "input": "head = [50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50], x = -20",
        "output": "[-30, -40, -50, 50, 40, 30, 20, 10, 0, -10, -20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,5], x = 5",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], x = 6",
        "output": "[5, 4, 3, 2, 1, 10, 9, 8, 7, 6]"
      },
      {
        "input": "head = [-50, 50, -50, 50, -50, 50, -50, 50, -50, 50], x = 0",
        "output": "[-50, -50, -50, -50, -50, 50, 50, 50, 50, 50]"
      },
      {
        "input": "head = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], x = 8",
        "output": "[7, 6, 5, 4, 3, 2, 1, 15, 14, 13, 12, 11, 10, 9, 8]"
      },
      {
        "input": "head = [-100, 0, 100, 50, -50, 25, -25], x = 0",
        "output": "[-100, -50, -25, 0, 100, 50, 25]"
      },
      {
        "input": "head = [91, 92, 93, 94, 95, 96, 97, 98, 99, 100], x = 95",
        "output": "[91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
      },
      {
        "input": "head = [1,3,2,4,5,6,7,8,9,10], x = 7",
        "output": "[1, 3, 2, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], x = 10",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]"
      },
      {
        "input": "head = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10], x = 6",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10]"
      },
      {
        "input": "head = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], x = 0",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [-100, -99, -98, -97, -96, -95, -94, -93, -92, -91], x = -95",
        "output": "[-100, -99, -98, -97, -96, -95, -94, -93, -92, -91]"
      },
      {
        "input": "head = [5, 1, 8, 3, 6, 2, 7, 4], x = 5",
        "output": "[1, 3, 2, 4, 5, 8, 6, 7]"
      },
      {
        "input": "head = [10, 15, 5, 20, 1, 9, 11], x = 10",
        "output": "[5, 1, 9, 10, 15, 20, 11]"
      },
      {
        "input": "head = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], x = 5",
        "output": "[1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], x = 5",
        "output": "[4, 3, 2, 1, 10, 9, 8, 7, 6, 5]"
      },
      {
        "input": "head = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10], x = 0",
        "output": "[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "head = [100, -100, 50, 0, 25, -50], x = 0",
        "output": "[-100, -50, 100, 50, 0, 25]"
      },
      {
        "input": "head = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 2",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [100, -100, 50, -50, 25, -25, 0, 0, 0, 0], x = 0",
        "output": "[-100, -50, -25, 100, 50, 25, 0, 0, 0, 0]"
      },
      {
        "input": "head = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], x = 1",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [-50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50], x = 0",
        "output": "[-50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50]"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5], x = 3",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5]"
      },
      {
        "input": "head = [5, 1, 3, 5, 1, 3, 5, 1, 3, 5], x = 3",
        "output": "[1, 1, 1, 5, 3, 5, 3, 5, 3, 5]"
      },
      {
        "input": "head = [7,7,7,7,7,7,7,7,7,7], x = 7",
        "output": "[7, 7, 7, 7, 7, 7, 7, 7, 7, 7]"
      },
      {
        "input": "head = [3,3,3,3,3,3,3,3,3,3], x = 3",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "head = [1, 3, 2, 4, 2, 1, 3, 2], x = 2",
        "output": "[1, 1, 3, 2, 4, 2, 3, 2]"
      },
      {
        "input": "head = [1, 3, 2, 2, 4, 1, 5, 3, 2, 1], x = 2",
        "output": "[1, 1, 1, 3, 2, 2, 4, 5, 3, 2]"
      },
      {
        "input": "head = [100,-100,50,-50,0,25,-25,75,-75], x = 0",
        "output": "[-100, -50, -25, -75, 100, 50, 0, 25, 75]"
      },
      {
        "input": "head = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], x = 6",
        "output": "[7, 7, 7, 7, 7, 7, 7, 7, 7, 7]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], x = 6",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [7, 3, 5, 8, 5, 10, 2, 1], x = 5",
        "output": "[3, 2, 1, 7, 5, 8, 5, 10]"
      },
      {
        "input": "head = [3,1,4,1,5,9,2,6,5,3,5], x = 5",
        "output": "[3, 1, 4, 1, 2, 3, 5, 9, 6, 5, 5]"
      },
      {
        "input": "head = [20,18,16,14,12,10,8,6,4,2], x = 11",
        "output": "[10, 8, 6, 4, 2, 20, 18, 16, 14, 12]"
      },
      {
        "input": "head = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5], x = 0",
        "output": "[-1, -2, -3, -4, -5, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 10",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], x = -1",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [1, 3, 2, 2, 5, 4, 3, 2, 1, 0], x = 2",
        "output": "[1, 1, 0, 3, 2, 2, 5, 4, 3, 2]"
      },
      {
        "input": "head = [-5, -3, -1, 0, 2, 4, 6, 8, 10], x = 0",
        "output": "[-5, -3, -1, 0, 2, 4, 6, 8, 10]"
      },
      {
        "input": "head = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], x = 5",
        "output": "[1, 3, 2, 4, 5, 7, 9, 6, 8, 10]"
      },
      {
        "input": "head = [100, 50, 25, 12, 6, 3, 1, -1, -3, -6, -12, -25, -50, -100], x = 0",
        "output": "[-1, -3, -6, -12, -25, -50, -100, 100, 50, 25, 12, 6, 3, 1]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 0",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1, 3, 2, 4, 2, 3, 1, 4, 2, 3], x = 3",
        "output": "[1, 2, 2, 1, 2, 3, 4, 3, 4, 3]"
      },
      {
        "input": "head = [10,10,10,10,10,10,10,10,10,10], x = 5",
        "output": "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      }
    ]
  },
  {
    "id": 255,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Tree",
      "Binary Search Tree",
      "Recursion",
      "Array",
      "Binary Tree",
      "Monotonic Stack"
    ],
    "problemDescription": "Given an array of unique integers preorder, return true if it is the correct preorder traversal sequence of a binary search tree.\n\u00a0\nExample 1:\n\n\nInput: preorder = [5,2,1,3,6]\nOutput: true\n\nExample 2:\n\nInput: preorder = [5,2,6,1,3]\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= preorder.length <= 104\n1 <= preorder[i] <= 104\nAll the elements of preorder are unique.\n\n\u00a0\nFollow up: Could you do it using only constant space complexity?\n",
    "starterCode": "class Solution:\n    def verifyPreorder(self, preorder: List[int]) -> bool:\n        ",
    "testCases": [
      {
        "input": "preorder = [5,2,6,1,3]",
        "output": "False"
      },
      {
        "input": "preorder = [1,3,2]",
        "output": "True"
      },
      {
        "input": "preorder = [1]",
        "output": "True"
      },
      {
        "input": "preorder = [8,5,1,7,10,12]",
        "output": "True"
      },
      {
        "input": "preorder = [1,2,3,4,5]",
        "output": "True"
      },
      {
        "input": "preorder = [5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "preorder = [5,2,1,3,6]",
        "output": "True"
      },
      {
        "input": "preorder = [10,5,1,7,40,50]",
        "output": "True"
      },
      {
        "input": "preorder = [2,1,3]",
        "output": "True"
      },
      {
        "input": "preorder = [2,1]",
        "output": "True"
      },
      {
        "input": "preorder = [4,2,1,3,6,5,7]",
        "output": "True"
      },
      {
        "input": "preorder = [45,30,25,20,15,35,40,48,43,44,60,55,58,59,70,80,90]",
        "output": "False"
      },
      {
        "input": "preorder = [25,15,10,5,3,7,6,8,12,11,13,20,17,16,18,35,30,28,29,32,31,33,40,37,36,38,42,41,43]",
        "output": "True"
      },
      {
        "input": "preorder = [20,10,5,15,30,25,35,40,50,60,55,70]",
        "output": "True"
      },
      {
        "input": "preorder = [100,50,25,10,5,15,75,60,80,150,125,110,130,175,160,180]",
        "output": "True"
      },
      {
        "input": "preorder = [30,20,10,5,15,25,40,35,45,50,60,55,65,70]",
        "output": "True"
      },
      {
        "input": "preorder = [6,4,3,2,5,7,9,8,10]",
        "output": "True"
      },
      {
        "input": "preorder = [10,5,3,1,4,7,6,8,15,12,11,13,20,18,19,25]",
        "output": "True"
      },
      {
        "input": "preorder = [10,5,1,3,7,6,8,15,12,13,20,18,25]",
        "output": "True"
      },
      {
        "input": "preorder = [45,25,15,10,5,20,30,35,55,40,60,70,80]",
        "output": "False"
      },
      {
        "input": "preorder = [20,10,5,1,7,6,9,15,12,13,14,18,25,22,24,30]",
        "output": "True"
      },
      {
        "input": "preorder = [7,4,3,2,5,6,9,8,10]",
        "output": "True"
      },
      {
        "input": "preorder = [10,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "preorder = [1,2,3,4,5,6,7,8,9,10]",
        "output": "True"
      },
      {
        "input": "preorder = [50,30,20,10,25,40,70,60,80,90,100]",
        "output": "True"
      },
      {
        "input": "preorder = [30,20,10,5,3,2,1,4,7,6,8,25,22,21,23,28,27,26,29,40,35,32,31,33,38,37,36,39,50]",
        "output": "True"
      },
      {
        "input": "preorder = [8,5,3,1,4,6,7,10,9,11,12]",
        "output": "True"
      },
      {
        "input": "preorder = [15,10,5,3,7,6,8,12,11,13,20,17,16,18,25,22,21,23,27,26,28]",
        "output": "True"
      },
      {
        "input": "preorder = [50,30,20,10,25,40,70,60,80,90]",
        "output": "True"
      },
      {
        "input": "preorder = [20,10,5,3,1,7,15,12,13,18,25,23,27,30]",
        "output": "True"
      },
      {
        "input": "preorder = [42,21,10,5,3,1,7,15,12,13,60,55,50,45,40,35,30,25,20,65,70,80,85,90,95,100]",
        "output": "False"
      },
      {
        "input": "preorder = [15,10,5,3,2,1,4,7,6,8,13,12,11,14,20,17,16,18,19,25,22,21,23,28,27,26,29,30]",
        "output": "True"
      },
      {
        "input": "preorder = [100,50,25,10,30,75,60,80,200,150,125,175,250,225,275]",
        "output": "True"
      },
      {
        "input": "preorder = [7,3,1,2,5,4,6,10,8,9,12,11,13]",
        "output": "True"
      },
      {
        "input": "preorder = [10,5,1,3,7,8,15,12,20]",
        "output": "True"
      },
      {
        "input": "preorder = [10,15,8,5,6,12,9,14,20,18,25,22,27,30]",
        "output": "False"
      },
      {
        "input": "preorder = [20,10,5,3,1,7,15,12,13,25,22,21,23,30,28,29,35,32,33,34,38,36,37,39]",
        "output": "True"
      },
      {
        "input": "preorder = [10,5,1,3,7,6,8,20,15,13,18,25]",
        "output": "True"
      },
      {
        "input": "preorder = [20,10,5,1,3,7,9,15,12,13,18,16,17,30,25,23,21,22,27,26,29,28,35,32,31,33,38,36,34,37,40,39,41]",
        "output": "False"
      },
      {
        "input": "preorder = [10,5,3,7,6,8,15,12,20,17,25]",
        "output": "True"
      },
      {
        "input": "preorder = [10,5,1,7,6,9,15,12,20]",
        "output": "True"
      },
      {
        "input": "preorder = [30,15,10,8,9,12,11,14,20,18,17,19,25,23,22,24,27,26,28,40,35,33,32,31,34,38,36,37,39,45,43,42,44,48,46,47,50,49,55,53,52,54,58,56,57,60,59]",
        "output": "True"
      },
      {
        "input": "preorder = [20,10,5,3,1,7,6,8,15,12,11,13,30,25,22,21,23,28,27,29,40,35,33,31,34,38,36,37,39,50,45,42,41,43,48,47,49,55,52,51,53,58,57,59]",
        "output": "True"
      },
      {
        "input": "preorder = [3,1,2,5,4,7,6,8]",
        "output": "True"
      },
      {
        "input": "preorder = [8,3,2,1,5,4,7,6,9,12,10,11,14,13,15]",
        "output": "True"
      },
      {
        "input": "preorder = [15,10,5,1,7,20,18,17,19,30,25,27,35,40]",
        "output": "True"
      },
      {
        "input": "preorder = [40,20,10,5,15,30,35,60,50,55,65,70,80,90,100,110,120,130,140]",
        "output": "True"
      },
      {
        "input": "preorder = [100,50,25,10,5,15,35,75,60,55,58,59,65,80,90,125,110,115,120,130,140]",
        "output": "True"
      },
      {
        "input": "preorder = [100,50,25,12,30,75,60,80,200,150,175,250]",
        "output": "True"
      },
      {
        "input": "preorder = [20,10,5,1,3,8,6,7,15,12,11,13,25,22,21,23,30,27,26,28,35,32,31,33,40]",
        "output": "True"
      },
      {
        "input": "preorder = [100,50,25,10,5,7,30,20,28,27,35,75,60,55,57,65,85,80,77,79,90,88,89,100,95,92,94,98,96,97]",
        "output": "False"
      },
      {
        "input": "preorder = [100,50,20,10,15,30,40,70,60,80,90,110]",
        "output": "True"
      },
      {
        "input": "preorder = [20,10,5,1,7,15,12,18,30,25,27,35,40]",
        "output": "True"
      },
      {
        "input": "preorder = [100,90,80,70,60,50,40,30,20,10]",
        "output": "True"
      },
      {
        "input": "preorder = [30,15,5,3,7,10,25,20,22,27,26,29,40,35,32,37,45,42,47,50]",
        "output": "True"
      },
      {
        "input": "preorder = [7,4,2,1,3,5,6,8,10,9,12,11,13]",
        "output": "True"
      },
      {
        "input": "preorder = [25,15,10,5,12,20,17,22,30,27,28,29,35,32,33,34,38,36,37,39]",
        "output": "True"
      },
      {
        "input": "preorder = [50,30,20,10,5,7,15,25,40,35,45,70,60,55,57,65,80,75,77,85,90,88,89,95,92,94,98,96,97]",
        "output": "True"
      },
      {
        "input": "preorder = [7,4,3,2,6,5,8,9,10]",
        "output": "True"
      },
      {
        "input": "preorder = [200,100,50,25,10,5,15,35,75,60,55,58,59,65,150,125,110,115,120,130,140,250,225,210,205,215,230,240,245,255,300]",
        "output": "True"
      },
      {
        "input": "preorder = [42,27,23,19,37,40,41,50,35,45,44]",
        "output": "False"
      },
      {
        "input": "preorder = [10,5,3,1,2,7,6,8,15,12,11,13,20,18,17,19,25,22,21,23,27]",
        "output": "True"
      },
      {
        "input": "preorder = [40,30,20,25,35,50,45,60]",
        "output": "True"
      },
      {
        "input": "preorder = [20,15,10,5,1,3,7,9,12,18,16,17,25,23,21,22,27,26,29,28,30]",
        "output": "True"
      },
      {
        "input": "preorder = [60,50,40,30,20,10,15,55,52,57,65,70,80,90,100]",
        "output": "True"
      },
      {
        "input": "preorder = [5,3,2,4,7,6,8,10,9,12,11,13,15,14,16]",
        "output": "True"
      },
      {
        "input": "preorder = [1,3,2,4,5]",
        "output": "True"
      },
      {
        "input": "preorder = [20,10,5,1,3,7,6,8,15,12,11,13,25,22,21,23,27,26,28]",
        "output": "True"
      },
      {
        "input": "preorder = [5,3,2,1,4,8,6,7,10,9,11]",
        "output": "True"
      },
      {
        "input": "preorder = [9,5,3,1,4,7,6,8,14,12,11,13,16,15,17,19,18,20]",
        "output": "True"
      },
      {
        "input": "preorder = [100,50,40,30,20,60,70,55,80,150,120,110,130,180,170,190]",
        "output": "False"
      },
      {
        "input": "preorder = [50,25,10,5,1,7,3,6,4,30,20,15,12,11,13,28,27,26,29,40,35,32,31,33,38,36,37,45,42,41,43,48,47,49]",
        "output": "False"
      },
      {
        "input": "preorder = [90,80,70,60,50,40,30,20,10,100,110,120,130]",
        "output": "True"
      },
      {
        "input": "preorder = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "True"
      },
      {
        "input": "preorder = [100,50,25,12,6,18,37,29,30,45,75,60,55,57,70,80,150,125,120,115,110,130,200,180,170,175,190,220]",
        "output": "True"
      },
      {
        "input": "preorder = [100,50,25,10,5,7,30,20,27,75,60,55,57,70,90,80,85,120,110,105,107,130,125,127]",
        "output": "False"
      },
      {
        "input": "preorder = [50,40,35,30,25,45,48,37,42,43,60,55,58,59,70,80,90]",
        "output": "False"
      },
      {
        "input": "preorder = [85,50,30,20,10,15,40,60,70,90,80,100,110,120,130,140,150]",
        "output": "False"
      },
      {
        "input": "preorder = [7,4,2,1,3,5,6,9,8,10]",
        "output": "True"
      },
      {
        "input": "preorder = [70,60,50,40,30,20,10,5,15,35,45,55,65,80,90,100,110]",
        "output": "True"
      },
      {
        "input": "preorder = [70,50,40,30,20,10,15,60,55,57,65,80,90,100]",
        "output": "True"
      },
      {
        "input": "preorder = [100,90,80,70,60,50,40,30,20,10,110,120,130,140,150]",
        "output": "True"
      },
      {
        "input": "preorder = [9,5,3,2,1,4,7,6,8,15,12,10,11,13,18,17,16,19,20]",
        "output": "True"
      },
      {
        "input": "preorder = [10,5,3,1,4,7,6,8,15,12,11,13,20,18,17,19,25]",
        "output": "True"
      },
      {
        "input": "preorder = [15,10,5,3,2,1,4,7,6,8,20,17,16,18,25,22,21,23,28,27,26,29,30]",
        "output": "True"
      },
      {
        "input": "preorder = [42,21,10,5,3,7,15,12,14,30,25,27,35,33,31,32,40,45,44,43,50,48,49,55,53,54,60,57,58,65,63,64,70,67,68,75,72,74,80,77,78,85,82,84,90,87,88,95,92,94,100,97,98]",
        "output": "True"
      },
      {
        "input": "preorder = [5,10,15,20,25,30,35,40,45,50,55,60,65,70]",
        "output": "True"
      },
      {
        "input": "preorder = [7,3,1,0,-1,2,5,4,6,15,10,9,8,11,13,12,14,20,18,16,17,19,25,23,22,21,24,27,26,28,30,29,35,33,32,31,34,38,36,37,39,40]",
        "output": "True"
      },
      {
        "input": "preorder = [10,15,8,12,20,18,25]",
        "output": "False"
      },
      {
        "input": "preorder = [3,1,2,5,4,6]",
        "output": "True"
      },
      {
        "input": "preorder = [20,10,5,3,1,7,15,12,11,13,25,22,21,23,30,27,26,28,35,32,31,33,37,36,38]",
        "output": "True"
      },
      {
        "input": "preorder = [50,25,10,5,3,1,4,7,6,8,15,12,11,13,20,30,27,26,28,75,50,45,43,42,44,55,52,51,53,60,58,57,59,70,65,63,62,64,68,67,69,80,78,77,79,90,85,83,82,84,88,87,89,95,92,91,93,100]",
        "output": "False"
      },
      {
        "input": "preorder = [4,2,1,3,5,7,6,8]",
        "output": "True"
      },
      {
        "input": "preorder = [15,10,5,3,7,12,13,20,17,16,18,25,22,27,30]",
        "output": "True"
      },
      {
        "input": "preorder = [33,25,18,15,20,27,40,35,38,50,45,55,65,60,70]",
        "output": "True"
      },
      {
        "input": "preorder = [4,2,1,3,6,5,7,8,9,10]",
        "output": "True"
      },
      {
        "input": "preorder = [30,20,10,5,15,25,40,35,38,50,45,48,55,60,70]",
        "output": "True"
      }
    ]
  },
  {
    "id": 2477,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "problemDescription": "There is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of n cities numbered from 0 to n - 1 and exactly n - 1 roads. The capital city is city 0. You are given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.\nThere is a meeting for the representatives of each city. The meeting is in the capital city.\nThere is a car in each city. You are given an integer seats that indicates the number of seats in each car.\nA representative can use the car in their city to travel or change the car and ride with another representative. The cost of traveling between two cities is one liter of fuel.\nReturn the minimum number of liters of fuel to reach the capital city.\n\u00a0\nExample 1:\n\n\nInput: roads = [[0,1],[0,2],[0,3]], seats = 5\nOutput: 3\nExplanation: \n- Representative1 goes directly to the capital with 1 liter of fuel.\n- Representative2 goes directly to the capital with 1 liter of fuel.\n- Representative3 goes directly to the capital with 1 liter of fuel.\nIt costs 3 liters of fuel at minimum. \nIt can be proven that 3 is the minimum number of liters of fuel needed.\n\nExample 2:\n\n\nInput: roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2\nOutput: 7\nExplanation: \n- Representative2 goes directly to city 3 with 1 liter of fuel.\n- Representative2 and representative3 go together to city 1 with 1 liter of fuel.\n- Representative2 and representative3 go together to the capital with 1 liter of fuel.\n- Representative1 goes directly to the capital with 1 liter of fuel.\n- Representative5 goes directly to the capital with 1 liter of fuel.\n- Representative6 goes directly to city 4 with 1 liter of fuel.\n- Representative4 and representative6 go together to the capital with 1 liter of fuel.\nIt costs 7 liters of fuel at minimum. \nIt can be proven that 7 is the minimum number of liters of fuel needed.\n\nExample 3:\n\n\nInput: roads = [], seats = 1\nOutput: 0\nExplanation: No representatives need to travel to the capital city.\n\n\u00a0\nConstraints:\n\n1 <= n <= 105\nroads.length == n - 1\nroads[i].length == 2\n0 <= ai, bi < n\nai != bi\nroads represents a valid tree.\n1 <= seats <= 105\n\n",
    "starterCode": "class Solution:\n    def minimumFuelCost(self, roads: List[List[int]], seats: int) -> int:\n        ",
    "testCases": [
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], seats = 4",
        "output": "6"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3]], seats = 5",
        "output": "3"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4]], seats = 3",
        "output": "5"
      },
      {
        "input": "roads = [], seats = 1",
        "output": "0"
      },
      {
        "input": "roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2",
        "output": "7"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]], seats = 8",
        "output": "28"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[6,8],[6,9]], seats = 3",
        "output": "11"
      },
      {
        "input": "roads = [[0,1],[0,2],[2,3],[2,4],[4,5],[4,6],[6,7],[6,8],[8,9],[8,10],[10,11]], seats = 2",
        "output": "21"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13]], seats = 4",
        "output": "15"
      },
      {
        "input": "roads = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23]], seats = 6",
        "output": "31"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16]], seats = 5",
        "output": "34"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9]], seats = 10",
        "output": "9"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39],[19,40]], seats = 5",
        "output": "53"
      },
      {
        "input": "roads = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39]], seats = 12",
        "output": "45"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9],[6,10]], seats = 3",
        "output": "12"
      },
      {
        "input": "roads = [[0,1],[1,2],[1,3],[3,4],[3,5],[5,6],[5,7],[6,8],[6,9],[7,10],[7,11]], seats = 4",
        "output": "16"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[3,9],[4,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24],[10,25],[11,26],[11,27],[11,28],[12,29],[12,30],[12,31],[13,32],[13,33],[13,34],[14,35],[14,36],[15,37],[15,38],[16,39],[16,40]], seats = 2",
        "output": "84"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], seats = 3",
        "output": "12"
      },
      {
        "input": "roads = [[0,1],[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[3,9],[4,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24],[10,25],[11,26],[11,27],[11,28],[12,29],[12,30],[12,31]], seats = 3",
        "output": "53"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12]], seats = 7",
        "output": "12"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], seats = 5",
        "output": "13"
      },
      {
        "input": "roads = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7]], seats = 4",
        "output": "8"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], seats = 4",
        "output": "11"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], seats = 6",
        "output": "29"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11],[6,12],[7,13],[8,14],[9,15],[10,16],[11,17],[12,18],[13,19],[14,20],[15,21],[16,22],[17,23],[18,24],[19,25],[20,26],[21,27],[22,28],[23,29],[24,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36]], seats = 8",
        "output": "42"
      },
      {
        "input": "roads = [[0,1],[1,2],[1,3],[3,4],[3,5],[5,6],[5,7]], seats = 3",
        "output": "10"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], seats = 5",
        "output": "16"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], seats = 4",
        "output": "32"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], seats = 4",
        "output": "15"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[0,6],[6,7],[7,8],[8,9],[9,10],[10,11]], seats = 6",
        "output": "11"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]], seats = 2",
        "output": "12"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], seats = 5",
        "output": "11"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8],[3,9],[3,10],[3,11],[4,12],[4,13],[4,14],[5,15],[5,16],[5,17]], seats = 10",
        "output": "18"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39],[19,40]], seats = 9",
        "output": "44"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,10],[10,11],[11,12],[12,13],[13,14]], seats = 3",
        "output": "25"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11],[6,12],[7,13],[8,14],[9,15],[10,16],[11,17],[12,18],[13,19],[14,20],[15,21],[16,22],[17,23],[18,24],[19,25],[20,26],[21,27],[22,28],[23,29],[24,30]], seats = 7",
        "output": "33"
      },
      {
        "input": "roads = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31]], seats = 8",
        "output": "36"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24],[10,25],[10,26],[11,27],[11,28],[12,29],[12,30]], seats = 8",
        "output": "33"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]], seats = 7",
        "output": "29"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]], seats = 6",
        "output": "32"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[6,19],[7,20],[7,21],[8,22],[8,23],[9,24],[9,25],[9,26],[10,27],[10,28],[10,29]], seats = 10",
        "output": "31"
      },
      {
        "input": "roads = [[0,1],[1,2],[1,3],[3,4],[3,5],[5,6],[6,7],[7,8]], seats = 4",
        "output": "10"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11],[6,12],[7,13],[8,14],[9,15]], seats = 4",
        "output": "18"
      },
      {
        "input": "roads = [[0,1],[1,2],[1,3],[2,4],[2,5],[2,6],[3,7],[3,8],[3,9],[7,10],[7,11],[8,12],[8,13],[9,14],[9,15]], seats = 6",
        "output": "18"
      },
      {
        "input": "roads = [[0,1],[1,2],[1,3],[3,4],[3,5],[5,6]], seats = 3",
        "output": "8"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24],[11,25],[11,26],[12,27],[12,28]], seats = 6",
        "output": "32"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], seats = 5",
        "output": "11"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[4,15],[5,16],[5,17],[5,18],[6,19],[6,20],[6,21],[7,22],[7,23],[7,24],[8,25],[8,26],[8,27],[9,28],[9,29],[9,30]], seats = 9",
        "output": "32"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17]], seats = 5",
        "output": "19"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], seats = 2",
        "output": "25"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[5,8],[6,9],[6,10]], seats = 5",
        "output": "11"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[11,24],[11,25],[12,26],[12,27],[13,28],[13,29],[14,30],[14,31],[15,32],[15,33]], seats = 9",
        "output": "35"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13]], seats = 5",
        "output": "14"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29]], seats = 2",
        "output": "225"
      },
      {
        "input": "roads = [[0,1],[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[10,24],[11,25],[11,26]], seats = 6",
        "output": "33"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], seats = 7",
        "output": "27"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]], seats = 7",
        "output": "36"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], seats = 2",
        "output": "30"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[3,9],[4,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24],[10,25],[11,26],[11,27],[11,28],[12,29],[12,30],[12,31],[13,32],[13,33],[13,34],[14,35],[14,36],[15,37],[15,38],[16,39],[16,40],[17,41],[17,42],[18,43],[18,44],[19,45],[19,46],[20,47],[20,48],[21,49],[21,50],[22,51],[22,52],[23,53],[23,54],[23,55],[24,56],[24,57],[25,58],[25,59]], seats = 4",
        "output": "88"
      },
      {
        "input": "roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], seats = 6",
        "output": "16"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[4,15],[5,16],[5,17],[5,18],[6,19],[6,20],[6,21]], seats = 8",
        "output": "22"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], seats = 6",
        "output": "24"
      },
      {
        "input": "roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17]], seats = 4",
        "output": "19"
      },
      {
        "input": "roads = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19]], seats = 5",
        "output": "26"
      },
      {
        "input": "roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], seats = 2",
        "output": "64"
      }
    ]
  },
  {
    "id": 2979,
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Number Theory"
    ],
    "problemDescription": "You are given two distinct prime numbers primeOne and primeTwo.\nAlice and Bob are visiting a market. The market has an infinite number of items, for any positive integer x there exists an item whose price is x. Alice wants to buy some items from the market to gift to Bob. She has an infinite number of coins in the denomination primeOne and primeTwo. She wants to know the most expensive item she can not buy to gift to Bob.\nReturn the price of the most expensive item which Alice can not gift to Bob.\n\u00a0\nExample 1:\n\nInput: primeOne = 2, primeTwo = 5\nOutput: 3\nExplanation: The prices of items which cannot be bought are [1,3]. It can be shown that all items with a price greater than 3 can be bought using a combination of coins of denominations 2 and 5.\n\nExample 2:\n\nInput: primeOne = 5, primeTwo = 7\nOutput: 23\nExplanation: The prices of items which cannot be bought are [1,2,3,4,6,8,9,11,13,16,18,23]. It can be shown that all items with a price greater than 23 can be bought.\n\n\u00a0\nConstraints:\n\n1 < primeOne, primeTwo < 104\nprimeOne, primeTwo are prime numbers.\nprimeOne * primeTwo < 105\n\n",
    "starterCode": "class Solution:\n    def mostExpensiveItem(self, primeOne: int, primeTwo: int) -> int:\n        ",
    "testCases": [
      {
        "input": "primeOne = 19, primeTwo = 23",
        "output": "395"
      },
      {
        "input": "primeOne = 5, primeTwo = 7",
        "output": "23"
      },
      {
        "input": "primeOne = 2, primeTwo = 5",
        "output": "3"
      },
      {
        "input": "primeOne = 11, primeTwo = 17",
        "output": "159"
      },
      {
        "input": "primeOne = 7, primeTwo = 13",
        "output": "71"
      },
      {
        "input": "primeOne = 13, primeTwo = 17",
        "output": "191"
      },
      {
        "input": "primeOne = 3, primeTwo = 11",
        "output": "19"
      },
      {
        "input": "primeOne = 157, primeTwo = 163",
        "output": "25271"
      },
      {
        "input": "primeOne = 31, primeTwo = 61",
        "output": "1799"
      },
      {
        "input": "primeOne = 109, primeTwo = 151",
        "output": "16199"
      },
      {
        "input": "primeOne = 191, primeTwo = 193",
        "output": "36479"
      },
      {
        "input": "primeOne = 331, primeTwo = 353",
        "output": "116159"
      },
      {
        "input": "primeOne = 53, primeTwo = 59",
        "output": "3015"
      },
      {
        "input": "primeOne = 79, primeTwo = 83",
        "output": "6395"
      },
      {
        "input": "primeOne = 353, primeTwo = 359",
        "output": "126015"
      },
      {
        "input": "primeOne = 47, primeTwo = 71",
        "output": "3219"
      },
      {
        "input": "primeOne = 173, primeTwo = 199",
        "output": "34055"
      },
      {
        "input": "primeOne = 373, primeTwo = 379",
        "output": "140615"
      },
      {
        "input": "primeOne = 29, primeTwo = 31",
        "output": "839"
      },
      {
        "input": "primeOne = 3, primeTwo = 13",
        "output": "23"
      },
      {
        "input": "primeOne = 389, primeTwo = 397",
        "output": "153647"
      },
      {
        "input": "primeOne = 73, primeTwo = 97",
        "output": "6911"
      },
      {
        "input": "primeOne = 103, primeTwo = 107",
        "output": "10811"
      },
      {
        "input": "primeOne = 47, primeTwo = 53",
        "output": "2391"
      },
      {
        "input": "primeOne = 71, primeTwo = 79",
        "output": "5459"
      },
      {
        "input": "primeOne = 131, primeTwo = 139",
        "output": "17939"
      },
      {
        "input": "primeOne = 11, primeTwo = 29",
        "output": "279"
      },
      {
        "input": "primeOne = 71, primeTwo = 73",
        "output": "5039"
      },
      {
        "input": "primeOne = 31, primeTwo = 37",
        "output": "1079"
      },
      {
        "input": "primeOne = 149, primeTwo = 151",
        "output": "22199"
      },
      {
        "input": "primeOne = 107, primeTwo = 109",
        "output": "11447"
      },
      {
        "input": "primeOne = 61, primeTwo = 67",
        "output": "3959"
      },
      {
        "input": "primeOne = 179, primeTwo = 191",
        "output": "33819"
      },
      {
        "input": "primeOne = 101, primeTwo = 103",
        "output": "10199"
      },
      {
        "input": "primeOne = 509, primeTwo = 521",
        "output": "264159"
      },
      {
        "input": "primeOne = 211, primeTwo = 223",
        "output": "46619"
      },
      {
        "input": "primeOne = 89, primeTwo = 97",
        "output": "8447"
      },
      {
        "input": "primeOne = 151, primeTwo = 179",
        "output": "26699"
      },
      {
        "input": "primeOne = 41, primeTwo = 47",
        "output": "1839"
      },
      {
        "input": "primeOne = 229, primeTwo = 233",
        "output": "52895"
      },
      {
        "input": "primeOne = 401, primeTwo = 409",
        "output": "163199"
      },
      {
        "input": "primeOne = 191, primeTwo = 223",
        "output": "42179"
      },
      {
        "input": "primeOne = 227, primeTwo = 251",
        "output": "56499"
      },
      {
        "input": "primeOne = 109, primeTwo = 113",
        "output": "12095"
      },
      {
        "input": "primeOne = 131, primeTwo = 137",
        "output": "17679"
      },
      {
        "input": "primeOne = 23, primeTwo = 29",
        "output": "615"
      },
      {
        "input": "primeOne = 233, primeTwo = 239",
        "output": "55215"
      },
      {
        "input": "primeOne = 421, primeTwo = 431",
        "output": "180599"
      },
      {
        "input": "primeOne = 701, primeTwo = 719",
        "output": "502599"
      },
      {
        "input": "primeOne = 23, primeTwo = 41",
        "output": "879"
      },
      {
        "input": "primeOne = 97, primeTwo = 101",
        "output": "9599"
      },
      {
        "input": "primeOne = 7, primeTwo = 19",
        "output": "107"
      },
      {
        "input": "primeOne = 41, primeTwo = 43",
        "output": "1679"
      },
      {
        "input": "primeOne = 907, primeTwo = 911",
        "output": "824459"
      },
      {
        "input": "primeOne = 17, primeTwo = 23",
        "output": "351"
      },
      {
        "input": "primeOne = 163, primeTwo = 167",
        "output": "26891"
      },
      {
        "input": "primeOne = 331, primeTwo = 337",
        "output": "110879"
      },
      {
        "input": "primeOne = 37, primeTwo = 41",
        "output": "1439"
      },
      {
        "input": "primeOne = 241, primeTwo = 251",
        "output": "59999"
      },
      {
        "input": "primeOne = 59, primeTwo = 83",
        "output": "4755"
      },
      {
        "input": "primeOne = 263, primeTwo = 271",
        "output": "70739"
      },
      {
        "input": "primeOne = 139, primeTwo = 149",
        "output": "20423"
      },
      {
        "input": "primeOne = 113, primeTwo = 127",
        "output": "14111"
      },
      {
        "input": "primeOne = 233, primeTwo = 263",
        "output": "60783"
      },
      {
        "input": "primeOne = 101, primeTwo = 131",
        "output": "12999"
      },
      {
        "input": "primeOne = 29, primeTwo = 53",
        "output": "1455"
      },
      {
        "input": "primeOne = 113, primeTwo = 149",
        "output": "16575"
      },
      {
        "input": "primeOne = 809, primeTwo = 821",
        "output": "662559"
      },
      {
        "input": "primeOne = 151, primeTwo = 157",
        "output": "23399"
      },
      {
        "input": "primeOne = 281, primeTwo = 293",
        "output": "81759"
      },
      {
        "input": "primeOne = 239, primeTwo = 271",
        "output": "64259"
      },
      {
        "input": "primeOne = 53, primeTwo = 61",
        "output": "3119"
      },
      {
        "input": "primeOne = 101, primeTwo = 109",
        "output": "10799"
      },
      {
        "input": "primeOne = 59, primeTwo = 61",
        "output": "3479"
      },
      {
        "input": "primeOne = 43, primeTwo = 47",
        "output": "1931"
      },
      {
        "input": "primeOne = 601, primeTwo = 617",
        "output": "369599"
      },
      {
        "input": "primeOne = 83, primeTwo = 89",
        "output": "7215"
      },
      {
        "input": "primeOne = 137, primeTwo = 167",
        "output": "22575"
      },
      {
        "input": "primeOne = 311, primeTwo = 313",
        "output": "96719"
      },
      {
        "input": "primeOne = 179, primeTwo = 181",
        "output": "32039"
      }
    ]
  },
  {
    "id": 2698,
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Backtracking"
    ],
    "problemDescription": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\n1 <= i <= n\nThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.\n\n\u00a0\nExample 1:\n\nInput: n = 10\nOutput: 182\nExplanation: There are exactly 3 integers i in the range [1, 10] that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1\n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 and 1 with a sum equal to 8 + 1 == 9.\n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 and 0 with a sum equal to 10 + 0 == 10.\nHence, the punishment number of 10 is 1 + 81 + 100 = 182\n\nExample 2:\n\nInput: n = 37\nOutput: 1478\nExplanation: There are exactly 4 integers i in the range [1, 37] that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1. \n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. \n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. \n- 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.\nHence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478\n\n\u00a0\nConstraints:\n\n1 <= n <= 1000\n\n",
    "starterCode": "class Solution:\n    def punishmentNumber(self, n: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 700",
        "output": "1660140"
      },
      {
        "input": "n = 800",
        "output": "3353149"
      },
      {
        "input": "n = 100",
        "output": "41334"
      },
      {
        "input": "n = 600",
        "output": "772866"
      },
      {
        "input": "n = 37",
        "output": "1478"
      },
      {
        "input": "n = 200",
        "output": "41334"
      },
      {
        "input": "n = 400",
        "output": "601470"
      },
      {
        "input": "n = 900",
        "output": "3353149"
      },
      {
        "input": "n = 9",
        "output": "82"
      },
      {
        "input": "n = 2",
        "output": "1"
      },
      {
        "input": "n = 25",
        "output": "182"
      },
      {
        "input": "n = 1",
        "output": "1"
      },
      {
        "input": "n = 500",
        "output": "772866"
      },
      {
        "input": "n = 1000",
        "output": "10804657"
      },
      {
        "input": "n = 10",
        "output": "182"
      },
      {
        "input": "n = 300",
        "output": "184768"
      },
      {
        "input": "n = 50",
        "output": "3503"
      },
      {
        "input": "n = 625",
        "output": "772866"
      },
      {
        "input": "n = 999",
        "output": "9804657"
      },
      {
        "input": "n = 750",
        "output": "2154349"
      },
      {
        "input": "n = 150",
        "output": "41334"
      }
    ]
  },
  {
    "id": 1877,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "problemDescription": "The pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs.\\r\n\\r\n\\r\n\tFor example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8.\\r\n\\r\n\\r\nGiven an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:\\r\n\\r\n\\r\n\tEach element of nums is in exactly one pair, and\\r\n\tThe maximum pair sum is minimized.\\r\n\\r\n\\r\nReturn the minimized maximum pair sum after optimally pairing up the elements.\\r\n\\r\n\u00a0\\r\nExample 1:\\r\n\\r\n\\r\nInput: nums = [3,5,2,3]\\r\nOutput: 7\\r\nExplanation: The elements can be paired up into pairs (3,3) and (5,2).\\r\nThe maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7.\\r\n\\r\n\\r\nExample 2:\\r\n\\r\n\\r\nInput: nums = [3,5,4,2,4,6]\\r\nOutput: 8\\r\nExplanation: The elements can be paired up into pairs (3,5), (4,4), and (6,2).\\r\nThe maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.\\r\n\\r\n\\r\n\u00a0\\r\nConstraints:\\r\n\\r\n\\r\n\tn == nums.length\\r\n\t2 <= n <= 105\\r\n\tn is even.\\r\n\t1 <= nums[i] <= 105\\r\n",
    "starterCode": "class Solution:\n    def minPairSum(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,6,2,5,3,4]",
        "output": "7"
      },
      {
        "input": "nums = [10,10,10,10]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8]",
        "output": "9"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5]",
        "output": "10"
      },
      {
        "input": "nums = [100000,1,100000,1,100000,1]",
        "output": "100001"
      },
      {
        "input": "nums = [1,2,3,4,5,6]",
        "output": "7"
      },
      {
        "input": "nums = [1,1,1,1]",
        "output": "2"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1]",
        "output": "2"
      },
      {
        "input": "nums = [10,10,10,10,10,10]",
        "output": "20"
      },
      {
        "input": "nums = [3,5,4,2,4,6]",
        "output": "8"
      },
      {
        "input": "nums = [1,9,2,8,3,7,4,6,5,5]",
        "output": "10"
      },
      {
        "input": "nums = [3,5,2,3]",
        "output": "7"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "32"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "105"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]",
        "output": "32"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "1100"
      },
      {
        "input": "nums = [1, 9, 2, 8, 3, 7, 4, 6, 5, 5]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "11"
      },
      {
        "input": "nums = [1,100000,2,99999,3,99998,4,99997,5,99996,6,99995,7,99994]",
        "output": "100001"
      },
      {
        "input": "nums = [100000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99999]",
        "output": "100001"
      },
      {
        "input": "nums = [5,8,12,19,22,28,33,45,50,55]",
        "output": "60"
      },
      {
        "input": "nums = [8, 3, 5, 7, 1, 9, 2, 6, 4, 10]",
        "output": "11"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "4"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "10"
      },
      {
        "input": "nums = [7,3,1,4,9,8,2,5,6,10]",
        "output": "11"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "17"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "16"
      },
      {
        "input": "nums = [1,99999,2,99998,3,99997,4,99996,5,99995]",
        "output": "100000"
      },
      {
        "input": "nums = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]",
        "output": "200000"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "31"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "10"
      },
      {
        "input": "nums = [4,1,2,3,6,5,7,8]",
        "output": "9"
      },
      {
        "input": "nums = [1, 99999, 2, 99998, 3, 99997, 4, 99996, 5, 99995]",
        "output": "100000"
      },
      {
        "input": "nums = [15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]",
        "output": "17"
      },
      {
        "input": "nums = [1, 100000, 2, 99999, 3, 99998, 4, 99997, 5, 99996, 6, 99995, 7, 99994, 8, 99993]",
        "output": "100001"
      },
      {
        "input": "nums = [1, 9, 2, 8, 3, 7, 4, 6, 5, 5, 4, 6, 3, 7, 2, 8]",
        "output": "10"
      },
      {
        "input": "nums = [34,8,64,51,32,21]",
        "output": "72"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "55"
      },
      {
        "input": "nums = [100000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "100001"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "11"
      },
      {
        "input": "nums = [100000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100000]",
        "output": "100002"
      },
      {
        "input": "nums = [100000, 1, 99999, 2, 99998, 3, 99997, 4, 99996, 5]",
        "output": "100001"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "10"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 2, 4, 6, 8, 10]",
        "output": "11"
      },
      {
        "input": "nums = [1000,999,998,997,996,995,994,993,992,991]",
        "output": "1991"
      },
      {
        "input": "nums = [23,34,45,56,67,78,89,90]",
        "output": "123"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5]",
        "output": "10"
      },
      {
        "input": "nums = [2, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]",
        "output": "9"
      },
      {
        "input": "nums = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]",
        "output": "100000"
      },
      {
        "input": "nums = [100,1,2,99,3,98,4,97]",
        "output": "101"
      },
      {
        "input": "nums = [9, 1, 4, 8, 5, 7, 6, 2]",
        "output": "11"
      },
      {
        "input": "nums = [1, 99999, 2, 99998, 3, 99997, 4, 99996]",
        "output": "100000"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 2, 4, 6, 8, 10, 12, 14, 16]",
        "output": "17"
      },
      {
        "input": "nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]",
        "output": "3"
      },
      {
        "input": "nums = [8, 3, 2, 1, 6, 5, 4, 7]",
        "output": "9"
      },
      {
        "input": "nums = [100000, 1, 100000, 2, 100000, 3, 100000, 4]",
        "output": "100004"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "31"
      },
      {
        "input": "nums = [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]",
        "output": "50"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11]",
        "output": "12"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 6, 7, 8, 9, 10, 11, 12]",
        "output": "13"
      },
      {
        "input": "nums = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]",
        "output": "100000"
      },
      {
        "input": "nums = [1,3,2,4,6,5,9,8,11,10]",
        "output": "12"
      },
      {
        "input": "nums = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "100"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55, 65, 75, 85]",
        "output": "100"
      },
      {
        "input": "nums = [7,10,4,17,15,9,2,12]",
        "output": "19"
      },
      {
        "input": "nums = [50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50]",
        "output": "100"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "11"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140, 147, 154, 161, 168, 175, 182, 189, 196, 203, 210]",
        "output": "217"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]",
        "output": "9"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]",
        "output": "170"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11]",
        "output": "12"
      },
      {
        "input": "nums = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15]",
        "output": "30"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "130"
      },
      {
        "input": "nums = [100000, 99999, 1, 2, 99998, 3, 99997, 4, 99996, 5, 99995, 6]",
        "output": "100001"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6]",
        "output": "3"
      },
      {
        "input": "nums = [100000, 1, 100000, 2, 100000, 3, 100000, 4, 100000, 5]",
        "output": "100005"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "21"
      },
      {
        "input": "nums = [100000, 100000, 100000, 100000, 100000, 100000]",
        "output": "200000"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120]",
        "output": "130"
      },
      {
        "input": "nums = [100000, 1, 2, 99999, 3, 99998, 4, 99997, 5, 99996]",
        "output": "100001"
      },
      {
        "input": "nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 11, 10, 12]",
        "output": "13"
      },
      {
        "input": "nums = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "21"
      },
      {
        "input": "nums = [99999,1,99998,2,99997,3,99996,4,99995,5]",
        "output": "100000"
      },
      {
        "input": "nums = [1, 99999, 2, 99998, 3, 99997, 4, 99996, 5, 99995, 6, 99994]",
        "output": "100000"
      },
      {
        "input": "nums = [15, 21, 33, 44, 55, 60, 65, 70, 75, 80, 85, 90]",
        "output": "125"
      },
      {
        "input": "nums = [9,3,2,8,6,5,7,4,1,10]",
        "output": "11"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 18, 17, 16, 15, 14, 13, 12]",
        "output": "19"
      },
      {
        "input": "nums = [100000, 1, 100000, 1, 100000, 1, 100000, 1]",
        "output": "100001"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
        "output": "17"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "10"
      },
      {
        "input": "nums = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]",
        "output": "100000"
      },
      {
        "input": "nums = [1,100,2,99,3,98,4,97,5,96,6,95,7,94,8,93,9,92,10,91]",
        "output": "101"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "9"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]",
        "output": "24"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "1100"
      },
      {
        "input": "nums = [9, 2, 8, 4, 5, 1, 6, 3, 7, 10]",
        "output": "11"
      }
    ]
  },
  {
    "id": 1201,
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Binary Search",
      "Combinatorics",
      "Number Theory"
    ],
    "problemDescription": "An ugly number is a positive integer that is divisible by a, b, or c.\nGiven four integers n, a, b, and c, return the nth ugly number.\n\u00a0\nExample 1:\n\nInput: n = 3, a = 2, b = 3, c = 5\nOutput: 4\nExplanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.\n\nExample 2:\n\nInput: n = 4, a = 2, b = 3, c = 4\nOutput: 6\nExplanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.\n\nExample 3:\n\nInput: n = 5, a = 2, b = 11, c = 13\nOutput: 10\nExplanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.\n\n\u00a0\nConstraints:\n\n1 <= n, a, b, c <= 109\n1 <= a * b * c <= 1018\nIt is guaranteed that the result will be in range [1, 2 * 109].\n\n",
    "starterCode": "class Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 4, a = 2, b = 3, c = 4",
        "output": "6"
      },
      {
        "input": "n = 1, a = 1000000000, b = 1000000000, c = 1000000000",
        "output": "1000000000"
      },
      {
        "input": "n = 1, a = 2, b = 3, c = 5",
        "output": "2"
      },
      {
        "input": "n = 3, a = 2, b = 3, c = 5",
        "output": "4"
      },
      {
        "input": "n = 10, a = 2, b = 7, c = 13",
        "output": "16"
      },
      {
        "input": "n = 10, a = 5, b = 7, c = 15",
        "output": "30"
      },
      {
        "input": "n = 10, a = 6, b = 8, c = 14",
        "output": "32"
      },
      {
        "input": "n = 5, a = 2, b = 11, c = 13",
        "output": "10"
      },
      {
        "input": "n = 1000000, a = 2, b = 217983653, c = 336916467",
        "output": "2000000"
      },
      {
        "input": "n = 10, a = 6, b = 7, c = 8",
        "output": "28"
      },
      {
        "input": "n = 1000000, a = 11, b = 17, c = 19",
        "output": "5279350"
      },
      {
        "input": "n = 100, a = 15, b = 25, c = 35",
        "output": "925"
      },
      {
        "input": "n = 100000000, a = 41, b = 89, c = 97",
        "output": "2000000000"
      },
      {
        "input": "n = 1000, a = 10, b = 20, c = 30",
        "output": "10000"
      },
      {
        "input": "n = 500000, a = 17, b = 23, c = 29",
        "output": "3822991"
      },
      {
        "input": "n = 1000000, a = 7, b = 17, c = 19",
        "output": "4242027"
      },
      {
        "input": "n = 500, a = 7, b = 11, c = 13",
        "output": "1782"
      },
      {
        "input": "n = 89, a = 23, b = 31, c = 41",
        "output": "902"
      },
      {
        "input": "n = 500000, a = 7, b = 11, c = 13",
        "output": "1781136"
      },
      {
        "input": "n = 1000000, a = 13, b = 17, c = 19",
        "output": "5651417"
      },
      {
        "input": "n = 100, a = 23, b = 47, c = 83",
        "output": "1328"
      },
      {
        "input": "n = 25, a = 12, b = 18, c = 30",
        "output": "204"
      },
      {
        "input": "n = 200000, a = 89, b = 97, c = 101",
        "output": "6427123"
      },
      {
        "input": "n = 1000000, a = 2, b = 11, c = 17",
        "output": "1747664"
      },
      {
        "input": "n = 10000, a = 11, b = 19, c = 29",
        "output": "59367"
      },
      {
        "input": "n = 1000000, a = 3, b = 17, c = 19",
        "output": "2465649"
      },
      {
        "input": "n = 999999, a = 5, b = 6, c = 7",
        "output": "2333330"
      },
      {
        "input": "n = 1500, a = 2, b = 5, c = 17",
        "output": "2405"
      },
      {
        "input": "n = 1000000, a = 3, b = 11, c = 17",
        "output": "2327802"
      },
      {
        "input": "n = 100, a = 10, b = 15, c = 20",
        "output": "750"
      },
      {
        "input": "n = 100000, a = 13, b = 17, c = 19",
        "output": "565148"
      },
      {
        "input": "n = 1000000, a = 999999937, b = 999999931, c = 999999929",
        "output": "2000000000"
      },
      {
        "input": "n = 100000, a = 5, b = 7, c = 11",
        "output": "265518"
      },
      {
        "input": "n = 100000, a = 11, b = 13, c = 17",
        "output": "475735"
      },
      {
        "input": "n = 500, a = 11, b = 19, c = 23",
        "output": "2838"
      },
      {
        "input": "n = 1000000, a = 5, b = 11, c = 13",
        "output": "3042555"
      },
      {
        "input": "n = 1000000, a = 3, b = 7, c = 13",
        "output": "2116281"
      },
      {
        "input": "n = 10000000, a = 29, b = 61, c = 67",
        "output": "155073912"
      },
      {
        "input": "n = 50, a = 17, b = 23, c = 29",
        "output": "374"
      },
      {
        "input": "n = 1234567, a = 3, b = 5, c = 7",
        "output": "2274202"
      },
      {
        "input": "n = 1000000, a = 11, b = 13, c = 19",
        "output": "4877917"
      },
      {
        "input": "n = 250000, a = 47, b = 53, c = 61",
        "output": "4505704"
      },
      {
        "input": "n = 7, a = 11, b = 13, c = 17",
        "output": "34"
      },
      {
        "input": "n = 30, a = 4, b = 6, c = 8",
        "output": "90"
      },
      {
        "input": "n = 200000, a = 13, b = 17, c = 19",
        "output": "1130285"
      },
      {
        "input": "n = 999999, a = 2, b = 3, c = 4",
        "output": "1499998"
      },
      {
        "input": "n = 100000, a = 31, b = 37, c = 41",
        "output": "1228811"
      },
      {
        "input": "n = 500000, a = 3, b = 1000000000, c = 1000000001",
        "output": "1500000"
      },
      {
        "input": "n = 100, a = 7, b = 13, c = 17",
        "output": "391"
      },
      {
        "input": "n = 750000, a = 31, b = 37, c = 41",
        "output": "9216182"
      },
      {
        "input": "n = 10000000, a = 3, b = 5, c = 7",
        "output": "18421053"
      },
      {
        "input": "n = 150, a = 2, b = 3, c = 5",
        "output": "205"
      },
      {
        "input": "n = 500000000, a = 2, b = 217983653, c = 336916467",
        "output": "999999994"
      },
      {
        "input": "n = 1000000, a = 7, b = 14, c = 21",
        "output": "7000000"
      },
      {
        "input": "n = 100, a = 4, b = 6, c = 8",
        "output": "300"
      },
      {
        "input": "n = 50000, a = 19, b = 23, c = 29",
        "output": "399779"
      },
      {
        "input": "n = 250, a = 4, b = 6, c = 8",
        "output": "750"
      },
      {
        "input": "n = 1000000, a = 11, b = 13, c = 17",
        "output": "4757346"
      },
      {
        "input": "n = 987654, a = 1000000, b = 2000000, c = 3000000",
        "output": "2000000000"
      },
      {
        "input": "n = 30, a = 17, b = 23, c = 29",
        "output": "230"
      },
      {
        "input": "n = 2000000, a = 11, b = 19, c = 29",
        "output": "11872682"
      },
      {
        "input": "n = 50, a = 10, b = 15, c = 20",
        "output": "375"
      },
      {
        "input": "n = 50000000, a = 37, b = 79, c = 83",
        "output": "981984141"
      },
      {
        "input": "n = 750, a = 6, b = 14, c = 21",
        "output": "3150"
      },
      {
        "input": "n = 100, a = 2, b = 3, c = 5",
        "output": "136"
      },
      {
        "input": "n = 1000000, a = 2, b = 4, c = 8",
        "output": "2000000"
      },
      {
        "input": "n = 50, a = 13, b = 17, c = 19",
        "output": "285"
      },
      {
        "input": "n = 150000, a = 13, b = 17, c = 19",
        "output": "847717"
      },
      {
        "input": "n = 100000, a = 999999937, b = 999999931, c = 999999919",
        "output": "2000000000"
      },
      {
        "input": "n = 50000, a = 3, b = 5, c = 7",
        "output": "92105"
      },
      {
        "input": "n = 1000, a = 3, b = 7, c = 11",
        "output": "2082"
      },
      {
        "input": "n = 1000000, a = 2, b = 3, c = 7",
        "output": "1400000"
      },
      {
        "input": "n = 1000000, a = 2, b = 5, c = 7",
        "output": "1521738"
      },
      {
        "input": "n = 999999, a = 23, b = 31, c = 41",
        "output": "10318743"
      },
      {
        "input": "n = 10, a = 2, b = 3, c = 5",
        "output": "14"
      },
      {
        "input": "n = 999999999, a = 3, b = 5, c = 7",
        "output": "1842105261"
      },
      {
        "input": "n = 1000000, a = 7, b = 11, c = 13",
        "output": "3562279"
      },
      {
        "input": "n = 2000000, a = 3, b = 5, c = 7",
        "output": "3684212"
      },
      {
        "input": "n = 30, a = 9, b = 21, c = 28",
        "output": "180"
      },
      {
        "input": "n = 500000, a = 25, b = 45, c = 65",
        "output": "7276125"
      },
      {
        "input": "n = 1000000, a = 1000000000, b = 1000000000, c = 1000000000",
        "output": "2000000000"
      },
      {
        "input": "n = 2000000, a = 123456789, b = 987654321, c = 1122334455",
        "output": "2000000000"
      },
      {
        "input": "n = 1000000, a = 2, b = 17, c = 19",
        "output": "1804468"
      },
      {
        "input": "n = 1000000, a = 2, b = 13, c = 19",
        "output": "1776978"
      },
      {
        "input": "n = 5000, a = 17, b = 37, c = 41",
        "output": "46904"
      },
      {
        "input": "n = 1000000, a = 3, b = 6, c = 9",
        "output": "3000000"
      },
      {
        "input": "n = 1000, a = 123, b = 456, c = 789",
        "output": "86838"
      },
      {
        "input": "n = 500000, a = 6, b = 10, c = 15",
        "output": "1875000"
      },
      {
        "input": "n = 100, a = 4, b = 9, c = 25",
        "output": "276"
      },
      {
        "input": "n = 600000, a = 59, b = 61, c = 67",
        "output": "12632448"
      },
      {
        "input": "n = 300000, a = 3, b = 5, c = 11",
        "output": "582354"
      },
      {
        "input": "n = 10, a = 3, b = 3, c = 3",
        "output": "30"
      },
      {
        "input": "n = 1000000, a = 3, b = 5, c = 11",
        "output": "1941177"
      },
      {
        "input": "n = 100, a = 2, b = 2, c = 3",
        "output": "150"
      },
      {
        "input": "n = 7, a = 5, b = 7, c = 11",
        "output": "20"
      },
      {
        "input": "n = 750000, a = 2, b = 3, c = 6",
        "output": "1125000"
      },
      {
        "input": "n = 500000, a = 2, b = 2, c = 3",
        "output": "750000"
      },
      {
        "input": "n = 1000, a = 11, b = 22, c = 33",
        "output": "11000"
      },
      {
        "input": "n = 50, a = 4, b = 6, c = 8",
        "output": "150"
      },
      {
        "input": "n = 1000000000, a = 1000000000, b = 999999999, c = 999999998",
        "output": "2000000000"
      },
      {
        "input": "n = 200, a = 7, b = 11, c = 13",
        "output": "714"
      },
      {
        "input": "n = 20, a = 3, b = 5, c = 7",
        "output": "36"
      },
      {
        "input": "n = 5000, a = 9, b = 14, c = 21",
        "output": "26250"
      },
      {
        "input": "n = 1000000, a = 2, b = 7, c = 13",
        "output": "1654546"
      },
      {
        "input": "n = 500, a = 100, b = 200, c = 300",
        "output": "50000"
      },
      {
        "input": "n = 1000000, a = 3, b = 13, c = 19",
        "output": "2398058"
      },
      {
        "input": "n = 1000000, a = 5, b = 10, c = 15",
        "output": "5000000"
      },
      {
        "input": "n = 50, a = 2, b = 4, c = 8",
        "output": "100"
      },
      {
        "input": "n = 1000000, a = 23, b = 53, c = 59",
        "output": "12914523"
      },
      {
        "input": "n = 1000000, a = 5, b = 7, c = 11",
        "output": "2655170"
      },
      {
        "input": "n = 1000000, a = 5, b = 17, c = 19",
        "output": "3488125"
      },
      {
        "input": "n = 750000, a = 17, b = 23, c = 29",
        "output": "5734491"
      },
      {
        "input": "n = 2500, a = 8, b = 15, c = 20",
        "output": "12500"
      },
      {
        "input": "n = 1000, a = 1000000000, b = 1000000000, c = 1000000000",
        "output": "2000000000"
      },
      {
        "input": "n = 500, a = 5, b = 17, c = 19",
        "output": "1745"
      },
      {
        "input": "n = 800000, a = 29, b = 31, c = 37",
        "output": "8802636"
      },
      {
        "input": "n = 100000, a = 19, b = 43, c = 47",
        "output": "1059864"
      },
      {
        "input": "n = 30, a = 7, b = 11, c = 13",
        "output": "105"
      },
      {
        "input": "n = 20000000, a = 31, b = 71, c = 73",
        "output": "339223049"
      },
      {
        "input": "n = 20, a = 2, b = 3, c = 5",
        "output": "27"
      },
      {
        "input": "n = 10000000, a = 1000000, b = 1000001, c = 1000002",
        "output": "2000000000"
      },
      {
        "input": "n = 15, a = 4, b = 6, c = 8",
        "output": "44"
      },
      {
        "input": "n = 1000000, a = 2, b = 5, c = 11",
        "output": "1571428"
      },
      {
        "input": "n = 1000000, a = 7, b = 13, c = 17",
        "output": "3916458"
      },
      {
        "input": "n = 25, a = 11, b = 13, c = 17",
        "output": "117"
      },
      {
        "input": "n = 1000, a = 13, b = 29, c = 31",
        "output": "7280"
      },
      {
        "input": "n = 1000000000, a = 10, b = 11, c = 12",
        "output": "2000000000"
      },
      {
        "input": "n = 10000, a = 7, b = 11, c = 13",
        "output": "35623"
      },
      {
        "input": "n = 1000000, a = 3, b = 5, c = 7",
        "output": "1842106"
      },
      {
        "input": "n = 2000000, a = 5, b = 10, c = 15",
        "output": "10000000"
      },
      {
        "input": "n = 1000, a = 4, b = 6, c = 8",
        "output": "3000"
      },
      {
        "input": "n = 1000000, a = 5, b = 13, c = 17",
        "output": "3278930"
      },
      {
        "input": "n = 6, a = 10, b = 15, c = 20",
        "output": "45"
      }
    ]
  },
  {
    "id": 347,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Bucket Sort",
      "Counting",
      "Quickselect",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\n\u00a0\nExample 1:\nInput: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\nExample 2:\nInput: nums = [1], k = 1\nOutput: [1]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\nk is in the range [1, the number of unique elements in the array].\nIt is guaranteed that the answer is unique.\n\n\u00a0\nFollow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.\n",
    "starterCode": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [5,3,1,1,1,3,5,2,2,2,4,4,4,4], k = 3",
        "output": "[4, 1, 2]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 10",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [5,3,1,1,1,3,73,1], k = 1",
        "output": "[1]"
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]"
      },
      {
        "input": "nums = [1,1,1,2,2,3], k = 2",
        "output": "[1, 2]"
      },
      {
        "input": "nums = [-1,-1,-1,2,2,3,4,4,4,4], k = 2",
        "output": "[4, -1]"
      },
      {
        "input": "nums = [1,2], k = 2",
        "output": "[1, 2]"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,1,1], k = 3",
        "output": "[5, 4, 3]"
      },
      {
        "input": "nums = [5,3,1,1,1,3,5,7,7,7,7], k = 3",
        "output": "[7, 1, 5]"
      },
      {
        "input": "nums = [4,1,-1,2,-1,2,3], k = 2",
        "output": "[-1, 2]"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], k = 4",
        "output": "[9, 8, 7, 6]"
      },
      {
        "input": "nums = [-1000, -1000, -999, -999, -999, -998, -998, -998, -997, -997, -997, -997, -996, -996, -995, -994, -993, -992, -991, -990], k = 4",
        "output": "[-997, -999, -998, -1000]"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8], k = 3",
        "output": "[8, 7, 6]"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9], k = 3",
        "output": "[9, 8, 7]"
      },
      {
        "input": "nums = [1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 6",
        "output": "[9, 10, 8, 7, 6, 5]"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5], k = 4",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], k = 20",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [100,101,102,103,104,105,106,107,108,109,100,101,102,103,104,105,106,107,108,109,100,101,102,103,104,105,106,107,108,109,100,101,102,103,104,105,106,107,108,109], k = 3",
        "output": "[100, 101, 102]"
      },
      {
        "input": "nums = [7,10,11,5,2,5,5,7,11,11,5,2,10,10,10,10,10,10,10,10], k = 2",
        "output": "[10, 5]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 5",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], k = 4",
        "output": "[9, 8, 7, 6]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], k = 10",
        "output": "[100, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000], k = 5",
        "output": "[1000, 10, 20, 30, 40]"
      },
      {
        "input": "nums = [-5, -5, -5, -4, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 2",
        "output": "[5, -5]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5], k = 5",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums = [99,98,97,96,95,94,93,92,91,90,99,98,97,96,95,94,93,92,91,90,99,98,97,96,95,94,93,92,91,90,99,98,97,96,95,94,93,92,91,90,99,98,97,96,95,94,93,92,91,90], k = 5",
        "output": "[99, 98, 97, 96, 95]"
      },
      {
        "input": "nums = [-100,-200,-300,-400,-500,-600,-700,-800,-900,-1000,-100,-200,-300,-400,-500,-600,-700,-800,-900,-1000,-100,-200,-300,-400,-500,-600,-700,-800,-900,-1000,-100,-200,-300,-400,-500,-600,-700,-800,-900,-1000,-100,-200,-300,-400,-500,-600,-700,-800,-900,-1000], k = 4",
        "output": "[-100, -200, -300, -400]"
      },
      {
        "input": "nums = [100, 100, 100, 101, 101, 102, 103, 103, 103, 103, 104, 104, 104, 105, 105, 106, 106, 107, 108, 109, 110], k = 5",
        "output": "[103, 100, 104, 101, 105]"
      },
      {
        "input": "nums = [10000, 10000, 9999, 9999, 9999, 9998, 9998, 9997, 9996, 9995], k = 3",
        "output": "[9999, 10000, 9998]"
      },
      {
        "input": "nums = [1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], k = 5",
        "output": "[8, 7, 6, 5, 4]"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], k = 5",
        "output": "[9, 8, 7, 6, 5]"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 10",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      }
    ]
  },
  {
    "id": 1190,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "String"
    ],
    "problemDescription": "You are given a string s that consists of lower case English letters and brackets.\nReverse the strings in each pair of matching parentheses, starting from the innermost one.\nYour result should not contain any brackets.\n\u00a0\nExample 1:\n\nInput: s = \"(abcd)\"\nOutput: \"dcba\"\n\nExample 2:\n\nInput: s = \"(u(love)i)\"\nOutput: \"iloveu\"\nExplanation: The substring \"love\" is reversed first, then the whole string is reversed.\n\nExample 3:\n\nInput: s = \"(ed(et(oc))el)\"\nOutput: \"leetcode\"\nExplanation: First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 2000\ns only contains lower case English characters and parentheses.\nIt is guaranteed that all parentheses are balanced.\n\n",
    "starterCode": "class Solution:\n    def reverseParentheses(self, s: str) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"(a(b(c)d)e)\"",
        "output": "ebcda"
      },
      {
        "input": "s = \"(a(b)c(d(e)f)g)\"",
        "output": "gdefcba"
      },
      {
        "input": "s = \"(abc)(def)\"",
        "output": "cbafed"
      },
      {
        "input": "s = \"(a(b)c(d)e(f)g)\"",
        "output": "gfedcba"
      },
      {
        "input": "s = \"(z)\"",
        "output": "z"
      },
      {
        "input": "s = \"(abcd)\"",
        "output": "dcba"
      },
      {
        "input": "s = \"a(b)c(d(e)f)g\"",
        "output": "abcfedg"
      },
      {
        "input": "s = \"(ed(et(oc))el)\"",
        "output": "leetcode"
      },
      {
        "input": "s = \"x(abc)d(efg)h(ij(k(lm)n)op)q\"",
        "output": "xcbadgfehpokmlnjiq"
      },
      {
        "input": "s = \"abcdefghij(klmnop(qrstuvwxyz))\"",
        "output": "abcdefghijqrstuvwxyzponmlk"
      },
      {
        "input": "s = \"abc\"",
        "output": "abc"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)))))))\")",
        "output": "Error: Solution.reverseParentheses() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"(abc)d(efg)\"",
        "output": "cbadgfe"
      },
      {
        "input": "s = \"(a(b(c)d)e(f(g)h)i\"",
        "output": "(adcbehgfi"
      },
      {
        "input": "s = \"()\"",
        "output": ""
      },
      {
        "input": "s = \"a(bcdefghijkl(mno)p)q\"",
        "output": "apmnolkjihgfedcbq"
      },
      {
        "input": "s = \"(a)\"",
        "output": "a"
      },
      {
        "input": "s = \"(u(love)i)\"",
        "output": "iloveu"
      },
      {
        "input": "s = \"ab(c(d(e(fg)h)i)j)k\"",
        "output": "abjdhfgeick"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)i)j)k)l)m)n)o\"",
        "output": "(anclejghifkdmbo"
      },
      {
        "input": "s = \"x(y(z(wvu)tsr)qpo)nm\"",
        "output": "xopqzuvwtsrynm"
      },
      {
        "input": "s = \"(a(b(c)d)e(f(g(h)i)j)k)l\"",
        "output": "kfihgjebcdal"
      },
      {
        "input": "s = \"a(bc(def(ghi)jkl)mno(pqr(stu)vwx)y(z))\"",
        "output": "azypqrutsvwxonmdefihgjklcb"
      },
      {
        "input": "s = \"a(b(c)d(e(f(g)h)i)j(k(l(m)n)o)p\"",
        "output": "a(bcdifghejolmnkp"
      },
      {
        "input": "s = \"a(bc(def(ghi(jkl(mno)pqr)stu)vwx(yz))\"",
        "output": "a(bcyzxwvghirqpmnolkjstufed"
      },
      {
        "input": "s = \"a(b(c)d(e(f(g(h)i)j)k)l)m\"",
        "output": "alejghifkdcbm"
      },
      {
        "input": "s = \"x(y(z))a(b(c)d)e(f(g(h)i)j)k\"",
        "output": "xzyadcbejghifk"
      },
      {
        "input": "s = \"x(y(z))w\"",
        "output": "xzyw"
      },
      {
        "input": "s = \"a(b(c(d(e(f(g(h)i(j(k(l)m)n)o(p)q)r)s)t)u(v(w(x(y(z))))))))))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"p(q(r(s(t(u(v(w(x(y(z)))))))))))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"(a(b(c(d(e(f)g)h)i)j)k)l(m(n(o(p)q)r)s)t(u(v)w)x(y)z)\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z))))))))))))))))))))z(y(x(w(v(u(t(s(r(q(p(o(n(m(l(k(j(i(h(g(f(e(d(c(b(a))))))))))))))))))))\"",
        "output": "(a(b(c(d(e(fhjlnprtvxzywusqomkigz(y(x(w(v(usqomkigecabdfhjlnprt"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p)q)r)s)t)u)v)w)x)y)z))))\"",
        "output": "(a(bdfyhwjulsnqpormtkvixgzec"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z)))))))))))))))))))))(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z))))))))))))))))))))\"",
        "output": "(a(b(c(d(egikmoqsuwyzxvtrpnljhf(a(b(c(d(e(fhjlnprtvxzywusqomkig"
      },
      {
        "input": "s = \"(abc)(def)((ghi)(jkl))(mno)(pqr)((stu)(vwx))(yz)\"",
        "output": "cbafedjklghionmrqpvwxstuzy"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h(i))))))))\"",
        "output": "(acegihfdb"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p)q)r)s)t)u)v)w)x)y)z))))z(y(x(w(v(u(t(s(r(q(p(o(n(m(l(k(j(i(h(g(f(e(d(c(b(a))))))))))))))))))))\"",
        "output": "(a(bdfyhwjulsnqpormtkvixgzecz(y(x(w(v(usqomkigecabdfhjlnprt"
      },
      {
        "input": "s = \"a(b(c)d(e(f(g(h)i)j)k(l)m)n)o(p(q(r)s)t)u(v(w)x)y(z))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"p(q(r(s)t)u)v(w(x(y(z))w)v)u\"",
        "output": "purstqvvxzywwu"
      },
      {
        "input": "s = \"a(b(c(d(e(f(g)h)i)j)k)l)m\"",
        "output": "alcjehgfidkbm"
      },
      {
        "input": "s = \"(a(bc)de)\"",
        "output": "edbca"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z))))))))))))))))))))\")",
        "output": "Error: Solution.reverseParentheses() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)i)j)k)l)m)n)o(p(q(r(s(t(u(v(w(x(yz))))))))))\"",
        "output": "(anclejghifkdmboqsuwyzxvtrp"
      },
      {
        "input": "s = \"a(bc(def(ghi(jkl(mno(pqr(stu(vwx(yz)))))))))b\"",
        "output": "adefjklpqrvwxzyutsonmihgcbb"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)i)j)k)l)m)n)o(p(q(r(s(t(u)v)w)x)y)z)\"",
        "output": "(anclejghifkdmbozqxsvutwryp"
      },
      {
        "input": "s = \"abcdefgh(ijklmnopqrstuvwxyz)\"",
        "output": "abcdefghzyxwvutsrqponmlkji"
      },
      {
        "input": "s = \"(abc(def(ghi(jkl(mno)pqr)stu)vwx(yz))(abc(def(ghi(jkl(mno)pqr)stu)vwx(yz))\"",
        "output": "(abcyzxwvghirqpmnolkjstufed(abcyzxwvghirqpmnolkjstufed"
      },
      {
        "input": "s = \"a(b(c(d(e(f(g(h)i(j)k)l)m)n)o(p(q(r)s)t)u(v(w(x(y(z))))))))))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"(abcdefgh)ijklmnopqrstuvwxyz\"",
        "output": "hgfedcbaijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"((a(b)c)d)e(f(g(h)i)j)k(l(m(n)o)p)q(r(s)t)u(v(w)x)y(z))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"a(b(c(d(e(f(g(h)i)j)k)l)m)n)o(p(q(r(s(t(u(vw)x)y)z)))\"",
        "output": "anclejghifkdmbo(prztxvwuysq"
      },
      {
        "input": "s = \"a(b(c)d(e(f)g)h)i\"",
        "output": "ahefgdcbi"
      },
      {
        "input": "s = \"((abc)(def))\"",
        "output": "defabc"
      },
      {
        "input": "s = \"(a(b(c)d)e(f(g(h)i)j)k)\"",
        "output": "kfihgjebcda"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)i)j)k(l)m)n)o(p(q(r)s)t)u(v(w)x)y(z)))\"",
        "output": "(acnejghifklmdotqrspuxwvyzb"
      },
      {
        "input": "s = \"a(b(c)d(e(f(g)h)i)j(k(l(m)n)o)p(q(r)s)t(u(v)w)x(y(z)))\"",
        "output": "ayzxuvwtqrspknmlojehgfidcb"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)i)j)k)l)m)n)o(p(q(r(s(t(u(v(w(x(y(z(u(v(w(x)y)z))))))))))))))\"",
        "output": "prtvxzvyxwzuywusqobmdkfihgjelcna"
      },
      {
        "input": "s = \"a(b(c)d)e(f(g(h)i)j)k(l(m(n(o)p)q)r)s(t(u(v)w)x)yz\"",
        "output": "adcbejghifkrmponqlsxuvwtyz"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)i)j)k)l)m)n)o(p(q(r)s)t)u(v(w)x)y(z))\"",
        "output": "zyvwxupsrqtobmdkfihgjelcna"
      },
      {
        "input": "s = \"(a(b(c)d)e(f(g)h)i)\"",
        "output": "ifghebcda"
      },
      {
        "input": "s = \"abc(def(ghi)jkl)(mno(pqr)stu)(vw(x(yz)))\"",
        "output": "abclkjghifedutspqronmxzywv"
      },
      {
        "input": "s = \"a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z))))))))))))))))))))b)c\"",
        "output": "a(b(c(d(ebgikmoqsuwyzxvtrpnljhfc"
      },
      {
        "input": "s = \"a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r)s)t)u)v)w)x)y)z)))))))))\"",
        "output": "acegizkxmvotqrspunwlyjhfdb"
      },
      {
        "input": "s = \"(ab)(cd)(ef)(gh)(ij)(kl)(mn)(op)(qr)(st)(uv)(wx)(yz)\"",
        "output": "badcfehgjilknmporqtsvuxwzy"
      },
      {
        "input": "s = \"(abcdefgh(i(jklm(nopq)rst)uv)wxyz)\"",
        "output": "zyxwitsrnopqmlkjuvhgfedcba"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)i)j)k)l)m)n)o(p(q(r(s(t(u)v(w)x)y)z)))\"",
        "output": "(anclejghifkdmboqzsxwvutyrp"
      },
      {
        "input": "s = \"(p(q(r)s)t)(u(v(w)x)y)\"",
        "output": "tqrspyvwxu"
      },
      {
        "input": "s = \"a(b(c(d(e(f(g(h)i)j)k)l)m)n)o(p(q(r)s)t)u\"",
        "output": "anclejghifkdmbotqrspu"
      },
      {
        "input": "s = \"(ab(cd(ef(gh(ij)kl)mn)op)qr)st\"",
        "output": "rqcdnmghjiklfeopbast"
      },
      {
        "input": "s = \"(x(y(z)))\"",
        "output": "yzx"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)i)j)k)l)m)n)o(p(q(r(s(t(u(v(w)x)y)z)u)v)w)x)y(z))\"",
        "output": "zypwrutyvwxuzsvqxobmdkfihgjelcna"
      },
      {
        "input": "s = \"(a(b)c(d(e(f(g)h)i)j)k(l(m)n)o(p(q(r)s)t)u)\"",
        "output": "upsrqtolmnkdifghejcba"
      },
      {
        "input": "s = \"((a(b)c)(d(e(f)g)h)i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z))))))))))))))))j)\"",
        "output": "(cbahefgdijkmoqsuwyzxvtrpnlj"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)i(j)k)l)m)n)o(p(q(r)s)t)u)v)\"",
        "output": "(avcnelghijkfmdotqrspub"
      },
      {
        "input": "s = \"x(y(z))\"",
        "output": "xzy"
      },
      {
        "input": "s = \"x(a(y(b(z(c)d)e)f)g)h(i(j(k(l)m)n)o)p\"",
        "output": "xgyezcdbfahojmlknip"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)i)j)k)l)m)n)o(p(q(r(s(t(u(v(w(x)y)z)u)v)w)x)y(z))w)x)y(z)\"",
        "output": "xpzyrwtuvyxwzuvsxqwobmdkfihgjelcnayz"
      },
      {
        "input": "s = \"(ab)(cd)((ef)(gh))(ij(kl(mn(op)qr)st)(uv(w(x(yz))))\"",
        "output": "badcghef(ijtsmnpoqrlkwyzxvu"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z))))))))))))))))))))\"",
        "output": "(a(b(c(d(e(fhjlnprtvxzywusqomkig"
      },
      {
        "input": "s = \"x(y(z)(w))v(u(t(s(r(q(p(o(n(m(l(k(j(i(h(g(f(e(d(c(b(a))))))))))))))))))))\"",
        "output": "xwzyv(usqomkigecabdfhjlnprt"
      },
      {
        "input": "s = \"((((((((((((a))))))))))))\"",
        "output": "a"
      },
      {
        "input": "s = \"((a(b(c(d(e(f(g(h)i)j)k)l)m)n)o(p(q(r(s(t(u)v)w)x)y)z))\"",
        "output": "(pyrwtuvsxqzobmdkfihgjelcna"
      },
      {
        "input": "s = \"x(y(z))a(b(c)d)e(f(g(h)i)j)k(l(m)n)o(p(q(r)s)t(u(v)w)x(y(z)))\"",
        "output": "xzyadcbejghifknmloyzxuvwtqrsp"
      },
      {
        "input": "s = \"a(b(c(d(e(f(g(h)i)j)k)l)m)n)o(p(q(r)s)t)u(v(w(x(y(z))))))))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g)))))))\"",
        "output": "bdfgeca"
      },
      {
        "input": "s = \"m(n(o(p(q(r(s(t(u(v(w(x(y(z(abc)def)ghi)jkl)mno)pqr)stu)vwx)yzz)\"",
        "output": "m(n(o(p(q(rzzytutsvonmxihgzcbadefyjklwpqruvwxs"
      },
      {
        "input": "s = \"(p(q(r(s(t(u(v(w(x(y(z)))))))))))\"",
        "output": "qsuwyzxvtrp"
      },
      {
        "input": "s = \"a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z))))))))))))))))))))b\"",
        "output": "a(b(c(d(e(fhjlnprtvxzywusqomkigb"
      },
      {
        "input": "s = \"(p(q(r(s(t(u)v)w)x)y)z)\"",
        "output": "zqxsvutwryp"
      },
      {
        "input": "s = \"(abc(def(ghi(jkl(mno(pqr(stu(vwx(yz)))))))))\"",
        "output": "defjklpqrvwxzyutsonmihgcba"
      },
      {
        "input": "s = \"a(b(c(d(e(f(g)h)i)j)k)l)\"",
        "output": "alcjehgfidkb"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h(ij)kl)mno)pqr)stu)vw)xy)z)\"",
        "output": "(azcwverqpglkijhmnofstudxyb"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)i)j)k)l)m)n)o(p(q(r)s)t(u(v)w)x)y(z))\"",
        "output": "zypsrqtwvuxobmdkfihgjelcna"
      },
      {
        "input": "s = \"(a(bc(def)ghi)jkl)\"",
        "output": "lkjbcfedghia"
      },
      {
        "input": "s = \"x(y(z)(w(v(u(t(s(r(q(p(o(n(m(l(k(j(i(h(g(f(e(d(c(b(a))))))))))))))))))))\"",
        "output": "x(yz(w(v(usqomkigecabdfhjlnprt"
      },
      {
        "input": "s = \"((a(b)c)(d(e(f)g)h)i(j(k(l(m)n)o)p)q\"",
        "output": "(cbahefgdipknmlojq"
      },
      {
        "input": "s = \"(p(q(r(s(t(u(v(w(x(y(z))))))))))))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abc(def(ghi(jkl(mno(pqr(stu(vwx)y(z)))))))\"",
        "output": "abcghimnostuxwvyzrqplkjfed"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h)i)j)k(l)m)n)o(p(q(r)s)t)u(v(w)x)y(z)))(a(b(c(d(e(f(g(h)i)j)k(l)m)n)o(p(q(r)s)t)u(v(w)x)y(z))))\"",
        "output": "(acnejghifklmdotqrspuxwvyzbbzyvwxupsrqtodmlkfihgjenca"
      },
      {
        "input": "s = \"a(b)c(d(e(f(g(h)i)j)k)l)m(n(o(p)q)r)s(t(u)w)v)x(y(z))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z))))))))))))))))))))l(m(n(o(p(q(r(s(t(u(v(w(x(y(z))))))))))))))))\"",
        "output": "(a(b(c(dfhjlnprtvxzywusqomkiglnprtvxzywusqome"
      },
      {
        "input": "s = \"((a(b)c)d(e(f)g)h(i(j)k)l(m(n)o)p(q(r)s)t(u(v)w)x)y(z))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"(a(b(c(d(e(f)g)h)i)j)\"",
        "output": "(ajchefgdib"
      },
      {
        "input": "s = \"x(y(z((a)(b))c)d)e\"",
        "output": "xdzbacye"
      },
      {
        "input": "s = \"(a(b(c(d(e(f(g(h(i(jk)lm)n)o)p)q)r)s)t)u)\"",
        "output": "ubsdqfohmljkingpercta"
      }
    ]
  },
  {
    "id": 2196,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Array",
      "Hash Table",
      "Binary Tree"
    ],
    "problemDescription": "You are given a 2D integer array descriptions where descriptions[i] = [parenti, childi, isLefti] indicates that parenti is the parent of childi in a binary tree of unique values. Furthermore,\n\nIf isLefti == 1, then childi is the left child of parenti.\nIf isLefti == 0, then childi is the right child of parenti.\n\nConstruct the binary tree described by descriptions and return its root.\nThe test cases will be generated such that the binary tree is valid.\n\u00a0\nExample 1:\n\n\nInput: descriptions = [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]]\nOutput: [50,20,80,15,17,19]\nExplanation: The root node is the node with value 50 since it has no parent.\nThe resulting binary tree is shown in the diagram.\n\nExample 2:\n\n\nInput: descriptions = [[1,2,1],[2,3,0],[3,4,1]]\nOutput: [1,2,null,null,3,4]\nExplanation: The root node is the node with value 1 since it has no parent.\nThe resulting binary tree is shown in the diagram.\n\n\u00a0\nConstraints:\n\n1 <= descriptions.length <= 104\ndescriptions[i].length == 3\n1 <= parenti, childi <= 105\n0 <= isLefti <= 1\nThe binary tree described by descriptions is valid.\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def createBinaryTree(self, descriptions: List[List[int]]) -> Optional[TreeNode]:\n        ",
    "testCases": [
      {
        "input": "descriptions = [[1,2,1],[2,3,0],[3,4,1]]",
        "output": "[1, 2, None, None, 3, 4]"
      },
      {
        "input": "descriptions = [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]]",
        "output": "[50, 20, 80, 15, 17, 19]"
      },
      {
        "input": "descriptions = [[10,5,1],[10,15,0],[5,3,1],[5,7,0],[15,12,1],[15,18,0],[3,1,1],[3,4,0],[7,6,1],[7,8,0]]",
        "output": "[10, 5, 15, 3, 7, 12, 18, 1, 4, 6, 8]"
      },
      {
        "input": "descriptions = [[1,2,1],[1,3,0],[2,4,1],[2,5,0],[3,6,1],[3,7,0],[4,8,1],[4,9,0],[5,10,1],[5,11,0],[6,12,1],[6,13,0],[7,14,1],[7,15,0]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "descriptions = [[99,98,1],[98,97,1],[97,96,1],[96,95,1],[95,94,1],[94,93,1],[93,92,1],[92,91,1],[91,90,1],[90,89,1],[89,88,1],[88,87,1],[87,86,1],[86,85,1]]",
        "output": "[99, 98, None, 97, None, 96, None, 95, None, 94, None, 93, None, 92, None, 91, None, 90, None, 89, None, 88, None, 87, None, 86, None, 85]"
      },
      {
        "input": "descriptions = [[1,2,1],[2,4,1],[4,8,1],[8,16,1],[16,32,1],[32,64,1],[64,128,1],[1,3,0],[3,5,1],[5,9,1],[9,17,1],[17,33,1],[33,65,1],[65,129,1],[1,6,0],[6,10,1],[10,18,1],[18,34,1],[34,66,1],[66,130,1],[1,7,0],[7,11,1],[11,19,1],[19,35,1],[35,67,1],[67,131,1],[1,8,0],[8,12,1],[12,20,1],[20,36,1],[36,68,1],[68,132,1],[1,9,0],[9,13,1],[13,21,1],[21,37,1],[37,69,1],[69,133,1],[1,10,0],[10,14,1],[14,22,1],[22,38,1],[38,70,1],[70,134,1]]",
        "output": "[1, 2, 10, 4, None, 14, None, 8, None, 22, None, 12, None, 38, None, 20, None, 70, None, 36, None, 134, None, 68, None, None, None, 132]"
      },
      {
        "input": "descriptions = [[2,1,1],[2,3,0],[3,6,0],[6,12,0],[12,24,0],[24,48,0],[48,96,0],[96,192,0],[192,384,0],[384,768,0]]",
        "output": "[2, 1, 3, None, None, None, 6, None, 12, None, 24, None, 48, None, 96, None, 192, None, 384, None, 768]"
      },
      {
        "input": "descriptions = [[1,2,1],[2,4,1],[2,5,0],[1,3,0],[3,6,1],[3,7,0],[7,14,1],[7,15,0],[15,30,1],[15,31,0],[31,62,1],[31,63,0],[63,126,1],[63,127,0]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, None, None, None, None, None, None, 14, 15, None, None, 30, 31, None, None, 62, 63, None, None, 126, 127]"
      },
      {
        "input": "descriptions = [[100,50,1],[100,150,0],[50,25,1],[50,75,0],[150,125,1],[150,175,0]]",
        "output": "[100, 50, 150, 25, 75, 125, 175]"
      },
      {
        "input": "descriptions = [[1000,500,1],[500,250,1],[500,750,0],[1000,1500,0],[1500,1250,1],[1500,1750,0],[1750,1600,1],[1750,1800,0],[1800,1775,1],[1800,1825,0]]",
        "output": "[1000, 500, 1500, 250, 750, 1250, 1750, None, None, None, None, None, None, 1600, 1800, None, None, 1775, 1825]"
      },
      {
        "input": "descriptions = [[1,2,1],[2,4,1],[2,5,0],[4,8,1],[4,9,0],[5,10,1],[5,11,0],[1,3,0],[3,6,1],[3,7,0]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"
      },
      {
        "input": "descriptions = [[1000,500,1],[1000,1500,0],[500,250,1],[500,750,0],[1500,1250,1],[1500,1750,0],[750,375,1],[750,1125,0],[1250,625,1],[1250,937,0],[1750,1562,1],[1750,1875,0],[375,187,1],[375,562,0],[1125,843,1],[1125,1406,0],[625,312,1],[625,468,0],[937,468,1],[937,703,0],[1562,781,1],[1562,1281,0],[1875,937,1],[1875,938,0]]",
        "output": "[1000, 500, 1500, 250, 750, 1250, 1750, None, None, 375, 1125, 625, 937, 1562, 1875, 187, 562, 843, 1406, 312, 468, 468, 703, 781, 1281, 937, 938, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 468, 703]"
      },
      {
        "input": "descriptions = [[5,3,1],[5,8,0],[3,2,1],[3,4,0],[8,7,1],[8,9,0],[4,6,0],[9,10,1]]",
        "output": "[5, 3, 8, 2, 4, 7, 9, None, None, None, 6, None, None, 10]"
      },
      {
        "input": "descriptions = [[60,30,1],[60,90,0],[30,15,1],[30,45,0],[45,40,1],[45,50,0],[90,75,1],[90,105,0],[105,100,1],[105,110,0]]",
        "output": "[60, 30, 90, 15, 45, 75, 105, None, None, 40, 50, None, None, 100, 110]"
      },
      {
        "input": "descriptions = [[100,50,1],[100,150,0],[50,25,1],[50,75,0],[150,125,1],[150,175,0],[175,160,1],[175,190,0]]",
        "output": "[100, 50, 150, 25, 75, 125, 175, None, None, None, None, None, None, 160, 190]"
      },
      {
        "input": "descriptions = [[30,20,1],[30,40,0],[20,10,1],[20,25,0],[40,35,1],[40,45,0],[10,5,1],[10,15,0]]",
        "output": "[30, 20, 40, 10, 25, 35, 45, 5, 15]"
      },
      {
        "input": "descriptions = [[1000,500,1],[1000,1500,0],[500,250,1],[500,750,0],[1500,1250,1],[1500,1750,0],[1250,1125,1],[1250,1375,0],[1750,1625,1],[1750,1875,0],[1875,1825,1],[1875,1925,0]]",
        "output": "[1000, 500, 1500, 250, 750, 1250, 1750, None, None, None, None, 1125, 1375, 1625, 1875, None, None, None, None, None, None, 1825, 1925]"
      },
      {
        "input": "descriptions = [[100,50,1],[100,150,0],[50,25,1],[50,75,0],[150,125,1],[150,175,0],[175,200,0]]",
        "output": "[100, 50, 150, 25, 75, 125, 175, None, None, None, None, None, None, None, 200]"
      },
      {
        "input": "descriptions = [[99,88,1],[99,77,0],[88,66,1],[88,55,0],[77,44,1],[77,33,0],[66,22,1],[66,11,0],[55,9,1],[55,8,0],[44,7,1],[44,6,0],[33,5,1],[33,4,0],[22,3,1],[22,2,0],[11,1,1],[11,0,0]]",
        "output": "[99, 88, 77, 66, 55, 44, 33, 22, 11, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "descriptions = [[25,10,1],[25,30,0],[10,5,1],[10,15,0],[30,28,1],[30,32,0],[5,3,1],[5,7,0],[15,12,1],[15,18,0],[28,26,1],[28,29,0],[32,31,1],[32,33,0]]",
        "output": "[25, 10, 30, 5, 15, 28, 32, 3, 7, 12, 18, 26, 29, 31, 33]"
      },
      {
        "input": "descriptions = [[1,3,1],[1,2,0],[3,5,1],[3,4,0],[5,7,1],[5,6,0],[7,11,1],[7,8,0],[8,9,1],[8,10,0]]",
        "output": "[1, 3, 2, 5, 4, None, None, 7, 6, None, None, 11, 8, None, None, None, None, 9, 10]"
      },
      {
        "input": "descriptions = [[100,50,1],[100,150,0],[50,25,1],[50,75,0],[150,125,1],[150,175,0],[75,60,0],[175,180,0]]",
        "output": "[100, 50, 150, 25, 75, 125, 175, None, None, None, 60, None, None, None, 180]"
      },
      {
        "input": "descriptions = [[200,100,1],[200,300,0],[100,50,1],[100,150,0],[300,250,1],[300,350,0],[150,125,1],[150,175,0],[350,325,1],[350,375,0]]",
        "output": "[200, 100, 300, 50, 150, 250, 350, None, None, 125, 175, None, None, 325, 375]"
      },
      {
        "input": "descriptions = [[30,20,1],[30,40,0],[20,10,1],[20,25,0],[40,35,1],[40,50,0],[50,45,1],[50,55,0]]",
        "output": "[30, 20, 40, 10, 25, 35, 50, None, None, None, None, None, None, 45, 55]"
      },
      {
        "input": "descriptions = [[10,5,1],[10,15,0],[5,3,1],[5,7,0],[15,12,1],[15,18,0],[18,17,1],[18,19,0],[19,16,0],[19,20,1]]",
        "output": "[10, 5, 15, 3, 7, 12, 18, None, None, None, None, None, None, 17, 19, None, None, 20, 16]"
      },
      {
        "input": "descriptions = [[100,50,1],[100,150,0],[50,25,1],[50,75,0],[150,125,1],[150,175,0],[25,10,1],[75,60,0],[125,110,0],[175,190,1]]",
        "output": "[100, 50, 150, 25, 75, 125, 175, 10, None, None, 60, None, 110, 190]"
      },
      {
        "input": "descriptions = [[8,4,1],[8,12,0],[4,2,1],[4,6,0],[12,10,1],[12,14,0],[2,1,1],[2,3,0],[6,5,1],[6,7,0]]",
        "output": "[8, 4, 12, 2, 6, 10, 14, 1, 3, 5, 7]"
      },
      {
        "input": "descriptions = [[99,66,1],[66,33,1],[33,16,1],[16,8,1],[8,4,1],[4,2,1],[2,1,1],[99,77,0],[77,55,0],[55,38,0],[38,19,0],[19,9,0],[9,4,0],[4,2,0],[99,88,0],[88,55,1],[55,34,1],[34,17,1],[17,8,0]]",
        "output": "[99, 66, 88, 33, None, 55, None, 16, None, 34, 38, 8, None, 17, None, None, 19, 4, None, None, 8, None, 9, 2, 2, 4, None, None, 4, 1, None, 1, None, 2, 2, 2, 2, None, None, None, None, 1, None, 1, None, 1, None, 1]"
      },
      {
        "input": "descriptions = [[100,50,1],[100,150,0],[50,25,1],[50,75,0],[150,125,1],[150,175,0],[25,10,1],[25,40,0],[75,60,1],[75,85,0],[125,110,1],[125,135,0],[175,160,1],[175,185,0]]",
        "output": "[100, 50, 150, 25, 75, 125, 175, 10, 40, 60, 85, 110, 135, 160, 185]"
      },
      {
        "input": "descriptions = [[5,3,1],[5,7,0],[3,2,1],[3,4,0],[7,6,1],[7,8,0],[2,1,1],[4,9,0],[9,10,1]]",
        "output": "[5, 3, 7, 2, 4, 6, 8, 1, None, None, 9, None, None, None, None, None, None, 10]"
      },
      {
        "input": "descriptions = [[30,20,1],[20,10,1],[20,25,0],[30,40,0],[40,35,1],[40,45,0],[35,32,1],[35,37,0],[45,42,1],[45,47,0]]",
        "output": "[30, 20, 40, 10, 25, 35, 45, None, None, None, None, 32, 37, 42, 47]"
      },
      {
        "input": "descriptions = [[5,3,1],[5,7,0],[3,1,1],[3,4,0],[7,6,1],[7,8,0],[8,9,1],[9,10,0],[10,11,1],[11,12,0],[12,13,1]]",
        "output": "[5, 3, 7, 1, 4, 6, 8, None, None, None, None, None, None, 9, None, None, 10, 11, None, None, 12, 13]"
      },
      {
        "input": "descriptions = [[1,3,1],[1,2,0],[2,4,1],[2,5,0],[3,6,1],[3,7,0],[4,8,1],[4,9,0],[5,10,1],[5,11,0],[6,12,1],[6,13,0],[7,14,1],[7,15,0],[8,16,1],[8,17,0],[9,18,1],[9,19,0]]",
        "output": "[1, 3, 2, 6, 7, 4, 5, 12, 13, 14, 15, 8, 9, 10, 11, None, None, None, None, None, None, None, None, 16, 17, 18, 19]"
      },
      {
        "input": "descriptions = [[10,5,1],[10,15,0],[5,3,1],[5,7,0],[15,12,1],[15,18,0]]",
        "output": "[10, 5, 15, 3, 7, 12, 18]"
      },
      {
        "input": "descriptions = [[500,250,1],[500,750,0],[250,125,1],[250,375,0],[750,625,1],[750,875,0],[125,60,1],[125,180,0],[375,290,1],[375,440,0],[625,550,1],[625,680,0],[875,800,1],[875,940,0]]",
        "output": "[500, 250, 750, 125, 375, 625, 875, 60, 180, 290, 440, 550, 680, 800, 940]"
      },
      {
        "input": "descriptions = [[5,4,1],[5,6,0],[4,3,1],[4,2,0],[6,7,1],[6,8,0],[7,9,1],[7,10,0],[8,11,1],[8,12,0],[9,13,1],[9,14,0],[10,15,1],[10,16,0],[11,17,1],[11,18,0],[12,19,1],[12,20,0],[13,21,1],[13,22,0],[14,23,1],[14,24,0],[15,25,1],[15,26,0],[16,27,1],[16,28,0]]",
        "output": "[5, 4, 6, 3, 2, 7, 8, None, None, None, None, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]"
      },
      {
        "input": "descriptions = [[7,3,1],[7,10,0],[3,1,1],[3,5,0],[10,8,1],[10,12,0],[5,4,0],[5,6,1],[8,9,1],[12,11,0]]",
        "output": "[7, 3, 10, 1, 5, 8, 12, None, None, 6, 4, 9, None, None, 11]"
      },
      {
        "input": "descriptions = [[60,30,1],[60,90,0],[30,15,1],[30,45,0],[90,75,1],[90,105,0],[15,10,1],[15,20,0],[45,35,1],[45,50,0],[75,65,1],[75,85,0],[105,100,1],[105,110,0]]",
        "output": "[60, 30, 90, 15, 45, 75, 105, 10, 20, 35, 50, 65, 85, 100, 110]"
      },
      {
        "input": "descriptions = [[5,3,1],[5,7,0],[3,2,1],[3,4,0],[7,6,1],[7,8,0],[2,1,1],[4,9,0],[6,11,1],[8,13,0],[1,0,1],[9,12,0],[11,10,0],[13,14,1]]",
        "output": "[5, 3, 7, 2, 4, 6, 8, 1, None, None, 9, 11, None, None, 13, 0, None, None, 12, None, 10, 14]"
      },
      {
        "input": "descriptions = [[100,50,1],[100,150,0],[50,25,1],[50,75,0],[150,125,1],[150,175,0],[75,60,1],[75,90,0]]",
        "output": "[100, 50, 150, 25, 75, 125, 175, None, None, 60, 90]"
      },
      {
        "input": "descriptions = [[100,50,1],[100,150,0],[50,25,1],[50,75,0],[150,125,1],[150,175,0],[175,160,1]]",
        "output": "[100, 50, 150, 25, 75, 125, 175, None, None, None, None, None, None, 160]"
      },
      {
        "input": "descriptions = [[1000,500,1],[1000,1500,0],[500,250,1],[500,750,0],[1500,1250,1],[1500,1750,0],[250,100,1],[750,600,0],[1250,1100,0],[1750,1900,1],[100,50,1],[600,550,0],[1100,1050,0],[1900,1850,1]]",
        "output": "[1000, 500, 1500, 250, 750, 1250, 1750, 100, None, None, 600, None, 1100, 1900, None, 50, None, None, 550, None, 1050, 1850]"
      },
      {
        "input": "descriptions = [[30,20,1],[30,40,0],[20,10,1],[20,25,0],[40,35,1],[40,45,0],[10,5,1],[25,15,0],[35,32,1],[45,47,0]]",
        "output": "[30, 20, 40, 10, 25, 35, 45, 5, None, None, 15, 32, None, None, 47]"
      },
      {
        "input": "descriptions = [[30,20,1],[20,10,1],[10,5,1],[5,2,1],[30,40,0],[40,50,0],[50,60,0]]",
        "output": "[30, 20, 40, 10, None, None, 50, 5, None, None, 60, 2]"
      },
      {
        "input": "descriptions = [[99,66,1],[99,33,0],[66,33,1],[66,22,0],[33,11,1],[33,44,0],[22,77,1],[22,88,0],[11,55,1],[11,66,0],[44,22,1],[44,33,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "descriptions = [[1,3,1],[1,2,0],[2,4,1],[2,5,0],[3,6,1],[3,7,0],[4,8,1],[4,9,0],[5,10,1],[5,11,0]]",
        "output": "[1, 3, 2, 6, 7, 4, 5, None, None, None, None, 8, 9, 10, 11]"
      },
      {
        "input": "descriptions = [[1,2,1],[2,3,1],[3,4,1],[4,5,1],[5,6,1],[6,7,1],[7,8,1],[8,9,1],[9,10,1],[10,11,1],[11,12,1],[12,13,1],[13,14,1],[14,15,1],[15,16,1],[16,17,1],[17,18,1],[18,19,1],[19,20,1]]",
        "output": "[1, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14, None, 15, None, 16, None, 17, None, 18, None, 19, None, 20]"
      },
      {
        "input": "descriptions = [[1,2,1],[2,3,0],[3,4,1],[4,5,0],[5,6,1],[6,7,0],[7,8,1],[8,9,0],[9,10,1],[10,11,0]]",
        "output": "[1, 2, None, None, 3, 4, None, None, 5, 6, None, None, 7, 8, None, None, 9, 10, None, None, 11]"
      },
      {
        "input": "descriptions = [[5,3,1],[5,8,0],[3,2,1],[3,4,0],[8,7,1],[8,9,0],[7,6,1],[9,10,0],[6,11,1],[6,12,0],[10,13,1],[10,14,0],[12,15,1],[12,16,0]]",
        "output": "[5, 3, 8, 2, 4, 7, 9, None, None, None, None, 6, None, None, 10, 11, 12, 13, 14, None, None, 15, 16]"
      }
    ]
  },
  {
    "id": 12,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Math",
      "String"
    ],
    "problemDescription": "Seven different symbols represent Roman numerals with the following values:\n\n\n\nSymbol\nValue\n\n\n\n\nI\n1\n\n\nV\n5\n\n\nX\n10\n\n\nL\n50\n\n\nC\n100\n\n\nD\n500\n\n\nM\n1000\n\n\n\nRoman numerals are formed by appending\u00a0the conversions of\u00a0decimal place values\u00a0from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\n\nIf the value does not start with 4 or\u00a09, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\nIf the value starts with 4 or 9 use the\u00a0subtractive form\u00a0representing\u00a0one symbol subtracted from the following symbol, for example,\u00a04 is 1 (I) less than 5 (V): IV\u00a0and 9 is 1 (I) less than 10 (X): IX.\u00a0Only the following subtractive forms are used: 4 (IV), 9 (IX),\u00a040 (XL), 90 (XC), 400 (CD) and 900 (CM).\nOnly powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5\u00a0(V), 50 (L), or 500 (D) multiple times. If you need to append a symbol\u00a04 times\u00a0use the subtractive form.\n\nGiven an integer, convert it to a Roman numeral.\n\u00a0\nExample 1:\n\nInput: num = 3749\nOutput: \"MMMDCCXLIX\"\nExplanation:\n\n3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC as 500 (D) + 100 (C) + 100 (C)\n  40 = XL as 10 (X) less of 50 (L)\n   9 = IX as 1 (I) less of 10 (X)\nNote: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places\n\n\nExample 2:\n\nInput: num = 58\nOutput: \"LVIII\"\nExplanation:\n\n50 = L\n 8 = VIII\n\n\nExample 3:\n\nInput: num = 1994\nOutput: \"MCMXCIV\"\nExplanation:\n\n1000 = M\n 900 = CM\n  90 = XC\n   4 = IV\n\n\n\u00a0\nConstraints:\n\n1 <= num <= 3999\n\n",
    "starterCode": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        ",
    "testCases": [
      {
        "input": "num = 44",
        "output": "XLIV"
      },
      {
        "input": "num = 9",
        "output": "IX"
      },
      {
        "input": "num = 4",
        "output": "IV"
      },
      {
        "input": "num = 2023",
        "output": "MMXXIII"
      },
      {
        "input": "num = 589",
        "output": "DLXXXIX"
      },
      {
        "input": "num = 444",
        "output": "CDXLIV"
      },
      {
        "input": "num = 1000",
        "output": "M"
      },
      {
        "input": "num = 789",
        "output": "DCCLXXXIX"
      },
      {
        "input": "num = 58",
        "output": "LVIII"
      },
      {
        "input": "num = 3999",
        "output": "MMMCMXCIX"
      },
      {
        "input": "num = 399",
        "output": "CCCXCIX"
      },
      {
        "input": "num = 3749",
        "output": "MMMDCCXLIX"
      },
      {
        "input": "num = 1994",
        "output": "MCMXCIV"
      },
      {
        "input": "num = 1",
        "output": "I"
      },
      {
        "input": "num = 3549",
        "output": "MMMDXLIX"
      },
      {
        "input": "num = 944",
        "output": "CMXLIV"
      },
      {
        "input": "num = 199",
        "output": "CXCIX"
      },
      {
        "input": "num = 60",
        "output": "LX"
      },
      {
        "input": "num = 621",
        "output": "DCXXI"
      },
      {
        "input": "num = 3000",
        "output": "MMM"
      },
      {
        "input": "num = 1499",
        "output": "MCDXCIX"
      },
      {
        "input": "num = 1602",
        "output": "MDCII"
      },
      {
        "input": "num = 999",
        "output": "CMXCIX"
      },
      {
        "input": "num = 207",
        "output": "CCVII"
      },
      {
        "input": "num = 2078",
        "output": "MMLXXVIII"
      },
      {
        "input": "num = 894",
        "output": "DCCCXCIV"
      },
      {
        "input": "num = 2421",
        "output": "MMCDXXI"
      },
      {
        "input": "num = 2999",
        "output": "MMCMXCIX"
      },
      {
        "input": "num = 149",
        "output": "CXLIX"
      },
      {
        "input": "num = 3949",
        "output": "MMMCMXLIX"
      },
      {
        "input": "num = 99",
        "output": "XCIX"
      },
      {
        "input": "num = 1492",
        "output": "MCDXCII"
      },
      {
        "input": "num = 1234",
        "output": "MCCXXXIV"
      },
      {
        "input": "num = 647",
        "output": "DCXLVII"
      },
      {
        "input": "num = 844",
        "output": "DCCCXLIV"
      },
      {
        "input": "num = 798",
        "output": "DCCXCVIII"
      },
      {
        "input": "num = 1043",
        "output": "MXLIII"
      },
      {
        "input": "num = 3001",
        "output": "MMMI"
      },
      {
        "input": "num = 2345",
        "output": "MMCCCXLV"
      },
      {
        "input": "num = 500",
        "output": "D"
      },
      {
        "input": "num = 746",
        "output": "DCCXLVI"
      },
      {
        "input": "num = 2944",
        "output": "MMCMXLIV"
      },
      {
        "input": "num = 1500",
        "output": "MD"
      },
      {
        "input": "num = 3357",
        "output": "MMMCCCLVII"
      },
      {
        "input": "num = 3388",
        "output": "MMMCCCLXXXVIII"
      },
      {
        "input": "num = 1597",
        "output": "MDXCVII"
      },
      {
        "input": "num = 2737",
        "output": "MMDCCXXXVII"
      },
      {
        "input": "num = 40",
        "output": "XL"
      },
      {
        "input": "num = 2708",
        "output": "MMDCCVIII"
      },
      {
        "input": "num = 349",
        "output": "CCCXLIX"
      },
      {
        "input": "num = 799",
        "output": "DCCXCIX"
      },
      {
        "input": "num = 1001",
        "output": "MI"
      },
      {
        "input": "num = 583",
        "output": "DLXXXIII"
      },
      {
        "input": "num = 2422",
        "output": "MMCDXXII"
      },
      {
        "input": "num = 891",
        "output": "DCCCXCI"
      },
      {
        "input": "num = 39",
        "output": "XXXIX"
      },
      {
        "input": "num = 1444",
        "output": "MCDXLIV"
      },
      {
        "input": "num = 1094",
        "output": "MXCIV"
      },
      {
        "input": "num = 2751",
        "output": "MMDCCLI"
      },
      {
        "input": "num = 3888",
        "output": "MMMDCCCLXXXVIII"
      },
      {
        "input": "num = 2994",
        "output": "MMCMXCIV"
      },
      {
        "input": "num = 876",
        "output": "DCCCLXXVI"
      },
      {
        "input": "num = 1009",
        "output": "MIX"
      },
      {
        "input": "num = 1648",
        "output": "MDCXLVIII"
      },
      {
        "input": "num = 1066",
        "output": "MLXVI"
      },
      {
        "input": "num = 2349",
        "output": "MMCCCXLIX"
      },
      {
        "input": "num = 2763",
        "output": "MMDCCLXIII"
      },
      {
        "input": "num = 1646",
        "output": "MDCXLVI"
      },
      {
        "input": "num = 3499",
        "output": "MMMCDXCIX"
      },
      {
        "input": "num = 1529",
        "output": "MDXXIX"
      },
      {
        "input": "num = 1453",
        "output": "MCDLIII"
      },
      {
        "input": "num = 1099",
        "output": "MXCIX"
      },
      {
        "input": "num = 299",
        "output": "CCXCIX"
      },
      {
        "input": "num = 89",
        "output": "LXXXIX"
      },
      {
        "input": "num = 2074",
        "output": "MMLXXIV"
      },
      {
        "input": "num = 2549",
        "output": "MMDXLIX"
      },
      {
        "input": "num = 1423",
        "output": "MCDXXIII"
      }
    ]
  },
  {
    "id": 3185,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "problemDescription": "Given an integer array hours representing times in hours, return an integer denoting the number of pairs i, j where i < j and hours[i] + hours[j] forms a complete day.\nA complete day is defined as a time duration that is an exact multiple of 24 hours.\nFor example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.\n\u00a0\nExample 1:\n\nInput: hours = [12,12,30,24,24]\nOutput: 2\nExplanation: The pairs of indices that form a complete day are (0, 1) and (3, 4).\n\nExample 2:\n\nInput: hours = [72,48,24,3]\nOutput: 3\nExplanation: The pairs of indices that form a complete day are (0, 1), (0, 2), and (1, 2).\n\n\u00a0\nConstraints:\n\n1 <= hours.length <= 5 * 105\n1 <= hours[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def countCompleteDayPairs(self, hours: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "hours = [5,19,15,1,23,7,17,11,3,21,9,13,20,18,4,16,8,12,6,22,14,2,10,10,10]",
        "output": "13"
      },
      {
        "input": "hours = [24,48,72,96,120,144,168,192,216,240,264,288,312,336,360,384,408,432,456,480,504,528,552,576,600]",
        "output": "300"
      },
      {
        "input": "hours = [24,48,72,96,120]",
        "output": "10"
      },
      {
        "input": "hours = [1,2,3,23,47,71]",
        "output": "3"
      },
      {
        "input": "hours = [10,10,10,10,10,10,10,10,10,10]",
        "output": "0"
      },
      {
        "input": "hours = [12,12,30,24,24]",
        "output": "2"
      },
      {
        "input": "hours = [1,23,2,22,3,21,4,20,5,19]",
        "output": "5"
      },
      {
        "input": "hours = [24]",
        "output": "0"
      },
      {
        "input": "hours = [10,20,30,40,50,60,70,80,90,100]",
        "output": "4"
      },
      {
        "input": "hours = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "hours = [72,48,24,3]",
        "output": "3"
      },
      {
        "input": "hours = [5,19,29,39,49,59,69,79,89,99,109,119,129,139,149,159,169,179,189,199]",
        "output": "16"
      },
      {
        "input": "hours = [10,14,16,8,12]",
        "output": "2"
      },
      {
        "input": "hours = [1,2,3,4,5,23,22,21,20,19]",
        "output": "5"
      },
      {
        "input": "hours = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]",
        "output": "11"
      },
      {
        "input": "hours = [24,48,72,96]",
        "output": "6"
      },
      {
        "input": "hours = [48, 24, 96, 72, 144, 120, 192, 168, 240, 216, 336, 312, 384, 360, 456, 432, 528, 504, 600, 576, 768, 744, 840, 816, 912, 888]",
        "output": "325"
      },
      {
        "input": "hours = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580, 600]",
        "output": "70"
      },
      {
        "input": "hours = [1, 5, 23, 29, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101, 107, 113, 119, 125, 131, 137, 143, 149, 155, 161, 167, 173, 179, 185]",
        "output": "7"
      },
      {
        "input": "hours = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200]",
        "output": "590"
      },
      {
        "input": "hours = [8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216, 224, 232, 240]",
        "output": "145"
      },
      {
        "input": "hours = [240, 480, 720, 960, 1200, 1440, 1680, 1920, 2160, 2400, 2640, 2880, 3120, 3360, 3600, 3840, 4080, 4320, 4560, 4800, 5040, 5280, 5520, 5760, 6000, 6240, 6480, 6720, 6960, 7200, 7440, 7680, 7920, 8160, 8400, 8640, 8880, 9120, 9360, 9600, 9840, 10080, 10320, 10560, 10800, 11040, 11280, 11520, 11760, 12000, 12240, 12480, 12720, 12960, 13200, 13440, 13680, 13920, 14160, 14400, 14640, 14880, 15120, 15360, 15600, 15840, 16080, 16320, 16560, 16800, 17040, 17280, 17520, 17760, 18000, 18240, 18480, 18720, 18960, 19200, 19440, 19680, 19920, 20160]",
        "output": "3486"
      },
      {
        "input": "hours = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127]",
        "output": "117"
      },
      {
        "input": "hours = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324, 336, 348, 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540, 552, 564, 576, 588, 600, 612, 624, 636, 648, 660, 672, 684, 696, 708, 720, 732, 744, 756, 768, 780, 792, 804, 816, 828, 840, 852, 864, 876, 888, 900, 912, 924, 936, 948, 960, 972, 984, 996, 1008, 1020, 1032, 1044, 1056, 1068, 1080, 1092, 1104, 1116, 1128, 1140, 1152, 1164, 1176, 1188, 1200, 1212, 1224, 1236, 1248, 1260, 1272, 1284, 1296, 1308, 1320, 1332, 1344, 1356, 1368, 1380, 1392, 1404, 1416, 1428, 1440]",
        "output": "3540"
      },
      {
        "input": "hours = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000, 6000000000, 7000000000, 8000000000, 9000000000, 10000000000, 11000000000, 12000000000]",
        "output": "22"
      },
      {
        "input": "hours = [1, 2, 3, 23, 47, 71, 95, 119, 143, 167, 191, 215, 239, 263, 287, 311, 335, 359, 383, 407, 431, 455, 479, 503, 527, 551, 575, 599, 623, 647, 671, 695, 719, 743, 767, 791, 815, 839, 863, 887, 911, 935, 959, 983, 1007, 1031, 1055, 1079, 1103, 1127, 1151, 1175, 1199, 1223, 1247, 1271, 1295, 1319, 1343, 1367, 1391, 1415, 1439, 1463, 1487, 1511, 1535, 1559, 1583, 1607, 1631, 1655, 1679, 1703, 1727, 1751, 1775, 1799, 1823, 1847, 1871, 1895, 1919, 1943, 1967, 1991, 2015, 2039, 2063, 2087, 2111, 2135, 2159, 2183, 2207, 2231, 2255, 2279, 2303, 2327, 2351, 2375, 2399]",
        "output": "100"
      },
      {
        "input": "hours = [23, 49, 73, 97, 121, 145, 169, 193, 217, 241, 265, 289, 313, 337, 361, 385, 409, 433, 457, 481, 505, 529, 553, 577, 601]",
        "output": "24"
      },
      {
        "input": "hours = [24, 48, 72, 96, 120, 144, 168, 192, 216, 240, 264, 288, 312, 336, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576, 600, 624, 648, 672, 696, 720, 744, 768, 792, 816, 840, 864, 888, 912, 936, 960, 984, 1008, 1032, 1056, 1080]",
        "output": "990"
      },
      {
        "input": "hours = [123456789, 123456789, 246913578, 246913578, 370370370, 370370370, 493826958, 493826958, 617283546, 617283546, 740740134, 740740134]",
        "output": "24"
      },
      {
        "input": "hours = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300]",
        "output": "70"
      },
      {
        "input": "hours = [22, 46, 70, 94, 118, 142, 166, 190, 214, 238, 262, 286, 310, 334, 358, 382, 406, 430, 454, 478, 502, 526, 550, 574, 598]",
        "output": "0"
      },
      {
        "input": "hours = [1, 23, 47, 71, 95, 119, 143, 167, 191, 215, 239, 263, 287, 311, 335, 359, 383, 407, 431, 455, 479, 503, 527, 551, 575, 599, 623, 647, 671, 695, 719, 743, 767, 791, 815, 839, 863, 887, 911, 935, 959, 983, 1007, 1031, 1055, 1079, 1103, 1127, 1151, 1175, 1199, 1223, 1247, 1271, 1295, 1319, 1343, 1367, 1391, 1415, 1439]",
        "output": "60"
      },
      {
        "input": "hours = [12, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324, 336, 348, 360]",
        "output": "225"
      },
      {
        "input": "hours = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]",
        "output": "36"
      },
      {
        "input": "hours = [14, 28, 42, 56, 70, 84, 98, 112, 126, 140, 154, 168, 182, 196, 210, 224, 238, 252, 266, 280, 294, 308, 322, 336, 350, 364, 378, 392, 406, 420]",
        "output": "34"
      },
      {
        "input": "hours = [1000000000, 1000000024, 1000000048, 1000000072, 1000000096, 1000000120, 1000000144, 1000000168, 1000000192, 1000000216]",
        "output": "0"
      },
      {
        "input": "hours = [5, 29, 19, 43, 67, 91, 115, 139, 163, 187, 211, 235, 259, 283, 307, 331, 355, 379, 403, 427, 451, 475, 499, 523, 547, 571, 595, 619, 643, 667, 691, 715, 739, 763, 787, 811, 835, 859, 883, 907, 931, 955, 979]",
        "output": "82"
      },
      {
        "input": "hours = [24, 48, 24, 72, 96, 120, 144, 168, 192, 216, 240, 264, 288, 312, 336, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576, 600, 12, 60, 84, 108, 132, 156, 180, 204, 228, 252, 276, 300, 324, 348, 372, 396, 420, 444, 468, 492, 516, 540, 564, 588]",
        "output": "601"
      },
      {
        "input": "hours = [3, 21, 39, 57, 75, 93, 111, 129, 147, 165, 183, 201, 219, 237, 255, 273, 291, 309, 327, 345, 363, 381, 399, 417, 435, 453, 471, 489, 507, 525, 543, 561, 579, 597, 615, 633, 651, 669, 687, 705, 723, 741, 759, 777, 795, 813, 831, 849, 867, 885, 903, 921, 939, 957, 975, 993]",
        "output": "392"
      },
      {
        "input": "hours = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000]",
        "output": "408"
      },
      {
        "input": "hours = [24, 48, 24, 72, 96, 120, 144, 168, 192, 216, 240, 264, 288, 312, 336, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576, 600, 12, 60, 84, 108, 132, 156, 180, 204, 228, 252, 276, 300, 324, 348, 372, 396, 420, 444, 468, 492, 516, 540, 564, 588, 123, 246, 369, 492, 615, 738, 861, 984, 1107, 1230, 1353, 1476, 1599, 1722, 1845, 1968, 2091, 2214, 2337, 2460]",
        "output": "747"
      },
      {
        "input": "hours = [12, 36, 60, 84, 108, 132, 156, 180, 204, 228, 252, 276, 300, 324, 348, 372, 396, 420, 444, 468, 492, 516, 540, 564, 588, 612, 636, 660, 684, 708, 732, 756, 780, 804, 828, 852, 876, 900, 924, 948, 972, 996]",
        "output": "861"
      },
      {
        "input": "hours = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300]",
        "output": "144"
      },
      {
        "input": "hours = [11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275, 286, 297, 308, 319, 330, 341, 352, 363, 374, 385, 396, 407, 418, 429, 440, 451, 462, 473, 484, 495, 506, 517, 528, 539, 550, 561, 572, 583, 594, 605, 616, 627, 638, 649, 660, 671, 682, 693, 704, 715, 726, 737, 748, 759, 770, 781, 792, 803, 814, 825, 836, 847, 858, 869, 880, 891, 902, 913, 924, 935, 946, 957, 968, 979, 990, 1001, 1012, 1023, 1034, 1045, 1056, 1067, 1078, 1089, 1100, 1111, 1122, 1133, 1144, 1155, 1166, 1177, 1188, 1199]",
        "output": "241"
      },
      {
        "input": "hours = [12, 48, 84, 120, 156, 192, 228, 264, 300, 336, 372, 408, 444, 480, 516, 552, 588, 624, 660, 696, 732, 768, 804, 840, 876, 912, 948, 984, 1020, 1056, 1092, 1128, 1164, 1200, 1236, 1272, 1308, 1344, 1380, 1416, 1452, 1488, 1524, 1560, 1596, 1632, 1668, 1704, 1740, 1776, 1812, 1848, 1884, 1920, 1956, 1992, 2028, 2064, 2100, 2136, 2172, 2208, 2244, 2280, 2316, 2352, 2388, 2424, 2460, 2496, 2532, 2568, 2604, 2640, 2676, 2712, 2748, 2784, 2820, 2856, 2892, 2928, 2964, 3000]",
        "output": "1722"
      },
      {
        "input": "hours = [5, 19, 29, 35, 43, 59, 65, 77, 83, 95, 101, 113, 119, 131, 137, 149, 155, 167, 173, 185, 191, 203, 209, 221, 227]",
        "output": "14"
      },
      {
        "input": "hours = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324, 336, 348, 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540, 552, 564, 576, 588, 600]",
        "output": "600"
      },
      {
        "input": "hours = [1, 2, 3, 22, 23, 46, 47, 70, 71, 94, 95, 118, 119, 142, 143, 166, 167, 190, 191, 214, 215, 238, 239, 262, 263, 286, 287, 310, 311, 334, 335, 358, 359, 382, 383, 406, 407, 430, 431, 454, 455, 478, 479, 502, 503, 526, 527, 550, 551, 574, 575, 598, 599, 622, 623, 646, 647, 670, 671, 694, 695, 718, 719, 742, 743, 766, 767, 790, 791, 814, 815, 838, 839, 862, 863, 886, 887, 910, 911, 934, 935, 958, 959, 982, 983, 1006, 1007, 1030, 1031, 1054, 1055, 1078, 1079, 1102, 1103, 1126, 1127, 1150, 1151, 1174, 1175, 1198, 1199]",
        "output": "100"
      },
      {
        "input": "hours = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239]",
        "output": "600"
      },
      {
        "input": "hours = [48, 96, 144, 192, 240, 288, 336, 384, 432, 480, 528, 576, 624, 672, 720, 768, 816, 864, 912, 960, 1008, 1056, 1104, 1152, 1200, 1248, 1296, 1344, 1392, 1440]",
        "output": "435"
      },
      {
        "input": "hours = [1, 23, 47, 71, 95, 119, 143, 167, 191, 215, 239, 263, 287, 311, 335, 359, 383, 407, 431, 455, 479, 503, 527, 551, 575, 599, 623, 647, 671, 695, 719, 743, 767, 791, 815, 839, 863, 887, 911, 935, 959, 983, 1007, 1031, 1055, 1079, 1103, 1127, 1151, 1175, 1199, 1223, 1247, 1271, 1295, 1319, 1343, 1367, 1391, 1415, 1439, 1463, 1487, 1511, 1535, 1559, 1583, 1607, 1631, 1655, 1679, 1703, 1727, 1751, 1775, 1799, 1823, 1847, 1871, 1895, 1919, 1943, 1967, 1991, 2015]",
        "output": "84"
      },
      {
        "input": "hours = [7, 17, 27, 37, 47, 57, 67, 77, 87, 97, 107, 117, 127, 137, 147, 157, 167, 177, 187, 197, 207, 217, 227, 237, 247, 257, 267, 277, 287, 297]",
        "output": "37"
      },
      {
        "input": "hours = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 290, 292, 294, 296, 298, 300, 312, 324, 336, 348, 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540, 552, 564, 576, 588, 600, 612, 624, 636, 648, 660, 672, 684, 696, 708, 720]",
        "output": "870"
      },
      {
        "input": "hours = [24, 48, 72, 96, 120, 144, 168, 192, 216, 240, 264, 288, 312, 336, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576, 600, 624, 648, 672, 696, 720]",
        "output": "435"
      },
      {
        "input": "hours = [23, 1, 22, 2, 21, 3, 20, 4, 19, 5, 18, 6, 17, 7, 16, 8, 15, 9, 14, 10, 13, 11]",
        "output": "11"
      },
      {
        "input": "hours = [3, 21, 39, 57, 75, 93, 111, 129, 147, 165, 183, 201, 219, 237, 255, 273, 291, 309, 327, 345, 363, 381, 399, 417, 435]",
        "output": "78"
      },
      {
        "input": "hours = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 299, 311, 323, 335, 347, 359]",
        "output": "132"
      },
      {
        "input": "hours = [25, 19, 7, 23, 11, 17, 9, 15, 13, 1, 19, 21, 23, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]",
        "output": "50"
      },
      {
        "input": "hours = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324, 336, 348, 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540, 552, 564, 576, 588, 600, 612, 624, 636, 648, 660, 672, 684, 696, 708, 720, 732, 744, 756, 768, 780, 792, 804, 816, 828, 840]",
        "output": "1190"
      },
      {
        "input": "hours = [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109]",
        "output": "40"
      },
      {
        "input": "hours = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324, 336, 348, 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540, 552, 564, 576, 588, 600, 612, 624, 636, 648, 660, 672, 684, 696, 708, 720, 732, 744, 756, 768, 780, 792, 804, 816, 828, 840, 852, 864, 876, 888, 900, 912, 924, 936, 948, 960, 972, 984, 996, 1008]",
        "output": "1722"
      },
      {
        "input": "hours = [11, 13, 23, 35, 47, 59, 71, 83, 95, 107, 119, 131, 143, 155, 167, 179, 191, 203, 215, 227, 239, 251, 263, 275, 287, 299, 311, 323, 335, 347]",
        "output": "15"
      },
      {
        "input": "hours = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 290, 292, 294, 296, 298, 300]",
        "output": "144"
      },
      {
        "input": "hours = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 299]",
        "output": "132"
      },
      {
        "input": "hours = [24, 48, 72, 96, 120, 144, 168, 192, 216, 240, 264, 288, 312, 336, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576, 600, 624, 648, 672, 696, 720, 744, 768, 792, 816, 840, 864, 888, 912, 936, 960, 984, 1008, 1032, 1056, 1080, 1104, 1128, 1152, 1176, 1200, 1224, 1248, 1272, 1296, 1320, 1344, 1368, 1392, 1416, 1440]",
        "output": "1770"
      },
      {
        "input": "hours = [1, 5, 11, 13, 19, 21, 25, 27, 31, 33, 37, 39, 43, 45, 49, 51, 55, 57, 61, 63, 67, 69, 73, 75, 79, 81, 85, 87, 91, 93, 97, 99, 103, 105, 109, 111, 115, 117, 121, 123, 127, 129, 133, 135, 139, 141, 145, 147, 151, 153, 157, 159, 163, 165, 169, 171, 175, 177, 181, 183, 187, 189, 193, 195, 199, 201, 205, 207, 211, 213, 217, 219, 223, 225, 229, 231, 235, 237, 241, 243, 247, 249, 253, 255, 259, 261, 265, 267, 271, 273, 277, 279, 283, 285, 289, 291, 295, 297, 301, 303, 307, 309, 313, 315, 319, 321, 325, 327, 331, 333, 337, 339, 343, 345, 349, 351, 355, 357, 361, 363, 367, 369, 373, 375, 379, 381, 385, 387, 391, 393, 397, 399, 403, 405, 409, 411, 415, 417, 421, 423, 427, 429, 433, 435, 439, 441, 445, 447, 451, 453, 457, 459, 463, 465, 469, 471, 475, 477, 481, 483, 487, 489, 493, 495, 499, 501, 505, 507, 511, 513, 517, 519, 523, 525, 529, 531, 535, 537, 541, 543, 547, 549, 553, 555, 559, 561, 565, 567, 571, 573, 577, 579, 583, 585, 589, 591, 595, 597, 601, 603, 607, 609, 613, 615, 619, 621, 625, 627, 631, 633, 637, 639, 643, 645, 649, 651, 655, 657, 661, 663, 667, 669, 673, 675, 679, 681, 685, 687, 691, 693, 697, 699, 703, 705, 709, 711, 715, 717, 721, 723, 727, 729, 733, 735, 739, 741, 745, 747, 751, 753, 757, 759, 763, 765, 769, 771, 775, 777, 781, 783, 787, 789, 793, 795, 799, 801, 805, 807, 811, 813, 817, 819, 823, 825, 829, 831, 835, 837, 841, 843, 847, 849, 853, 855, 859, 861, 865, 867, 871, 873, 877, 879, 883, 885, 889, 891, 895, 897, 901, 903, 907, 909, 913, 915, 919, 921, 925, 927, 931, 933, 937, 939, 943, 945, 949, 951, 955, 957, 961, 963, 967, 969, 973, 975, 979, 981, 985, 987, 991, 993, 997, 999]",
        "output": "3445"
      },
      {
        "input": "hours = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000]",
        "output": "200"
      },
      {
        "input": "hours = [12, 36, 60, 84, 108, 132, 156, 180, 204, 228, 252, 276, 300, 324, 348, 372, 396, 420, 444, 468, 492, 516, 540, 564, 588, 612, 636, 660, 684, 708]",
        "output": "435"
      },
      {
        "input": "hours = [13, 37, 61, 85, 109, 133, 157, 181, 205, 229, 253, 277, 301, 325, 349, 373, 397, 421, 445, 469, 493, 517, 541, 565, 589, 613, 637, 661, 685, 709, 733, 757, 781, 805, 829, 853, 877, 901, 925, 949, 973, 997, 1021, 1045, 1069, 1093, 1117, 1141, 1165, 1189, 1213, 1237, 1261, 1285, 1309, 1333, 1357, 1381, 1405, 1429, 1453, 1477, 1501, 1525, 1549, 1573, 1597, 1621, 1645, 1669, 1693, 1717, 1741, 1765, 1789, 1813, 1837, 1861, 1885, 1909, 1933, 1957, 1981, 2005]",
        "output": "0"
      },
      {
        "input": "hours = [23, 47, 71, 95, 119, 143, 167, 191, 215, 239, 263, 287, 311, 335, 359, 383, 407, 431, 455, 479, 503, 527, 551, 575, 599, 623, 647, 671, 695, 719, 743, 767, 791, 815, 839, 863, 887, 911, 935, 959, 983, 1007, 1031, 1055, 1079, 1103, 1127, 1151, 1175, 1199]",
        "output": "0"
      },
      {
        "input": "hours = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324, 336, 348, 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540, 552, 564, 576, 588, 600, 612, 624, 636, 648, 660, 672, 684, 696, 708, 720, 732, 744, 756, 768, 780, 792, 804, 816, 828, 840, 852, 864, 876, 888, 900, 912, 924, 936, 948, 960, 972, 984, 996]",
        "output": "1681"
      },
      {
        "input": "hours = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 138, 141, 144, 147, 150, 153, 156, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 189, 192, 195, 198, 201, 204, 207, 210, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240]",
        "output": "390"
      },
      {
        "input": "hours = [5, 19, 29, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101, 107, 113, 119, 125, 131, 137, 143, 149, 155, 161, 167, 173, 179, 185, 191, 197, 203, 209, 215, 221, 227, 233, 239]",
        "output": "10"
      }
    ]
  },
  {
    "id": 2177,
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Simulation"
    ],
    "problemDescription": "Given an integer num, return three consecutive integers (as a sorted array) that sum to num. If num cannot be expressed as the sum of three consecutive integers, return an empty array.\n\u00a0\nExample 1:\n\nInput: num = 33\nOutput: [10,11,12]\nExplanation: 33 can be expressed as 10 + 11 + 12 = 33.\n10, 11, 12 are 3 consecutive integers, so we return [10, 11, 12].\n\nExample 2:\n\nInput: num = 4\nOutput: []\nExplanation: There is no way to express 4 as the sum of 3 consecutive integers.\n\n\u00a0\nConstraints:\n\n0 <= num <= 1015\n\n",
    "starterCode": "class Solution:\n    def sumOfThree(self, num: int) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "num = 9",
        "output": "[2, 3, 4]"
      },
      {
        "input": "num = 1000000000001",
        "output": "[]"
      },
      {
        "input": "num = 0",
        "output": "[-1, 0, 1]"
      },
      {
        "input": "num = 4",
        "output": "[]"
      },
      {
        "input": "num = 33",
        "output": "[10, 11, 12]"
      },
      {
        "input": "num = 1000000000000",
        "output": "[]"
      },
      {
        "input": "num = 3",
        "output": "[0, 1, 2]"
      },
      {
        "input": "num = 15",
        "output": "[4, 5, 6]"
      },
      {
        "input": "num = 100000000000000",
        "output": "[]"
      },
      {
        "input": "num = 300000000000003",
        "output": "[100000000000000, 100000000000001, 100000000000002]"
      },
      {
        "input": "num = 3000000000",
        "output": "[999999999, 1000000000, 1000000001]"
      },
      {
        "input": "num = 3000000000000",
        "output": "[999999999999, 1000000000000, 1000000000001]"
      },
      {
        "input": "num = 999",
        "output": "[332, 333, 334]"
      },
      {
        "input": "num = 1000000000003",
        "output": "[]"
      },
      {
        "input": "num = 27",
        "output": "[8, 9, 10]"
      },
      {
        "input": "num = 45",
        "output": "[14, 15, 16]"
      },
      {
        "input": "num = 999999999999",
        "output": "[333333333332, 333333333333, 333333333334]"
      },
      {
        "input": "num = 300000000000000",
        "output": "[99999999999999, 100000000000000, 100000000000001]"
      },
      {
        "input": "num = 99",
        "output": "[32, 33, 34]"
      },
      {
        "input": "num = 1234567890125",
        "output": "[]"
      },
      {
        "input": "num = 3000000000001",
        "output": "[]"
      },
      {
        "input": "num = 123456789",
        "output": "[41152262, 41152263, 41152264]"
      },
      {
        "input": "num = 777777777777777",
        "output": "[259259259259258, 259259259259259, 259259259259260]"
      },
      {
        "input": "num = 2999999999997",
        "output": "[999999999998, 999999999999, 1000000000000]"
      },
      {
        "input": "num = 299999999999997",
        "output": "[99999999999998, 99999999999999, 100000000000000]"
      },
      {
        "input": "num = 105",
        "output": "[34, 35, 36]"
      },
      {
        "input": "num = 999999999999999",
        "output": "[333333333333332, 333333333333333, 333333333333334]"
      },
      {
        "input": "num = 1000",
        "output": "[]"
      },
      {
        "input": "num = 81",
        "output": "[26, 27, 28]"
      },
      {
        "input": "num = 1000000000000002",
        "output": "[333333333333333, 333333333333334, 333333333333335]"
      },
      {
        "input": "num = 1000000000002",
        "output": "[333333333333, 333333333334, 333333333335]"
      },
      {
        "input": "num = 987654321",
        "output": "[329218106, 329218107, 329218108]"
      },
      {
        "input": "num = 7500000000000",
        "output": "[2499999999999, 2500000000000, 2500000000001]"
      },
      {
        "input": "num = 1001",
        "output": "[]"
      },
      {
        "input": "num = 21",
        "output": "[6, 7, 8]"
      },
      {
        "input": "num = 123456789012345",
        "output": "[41152263004114, 41152263004115, 41152263004116]"
      },
      {
        "input": "num = 6",
        "output": "[1, 2, 3]"
      },
      {
        "input": "num = 299792458",
        "output": "[]"
      },
      {
        "input": "num = 2",
        "output": "[]"
      },
      {
        "input": "num = 1",
        "output": "[]"
      },
      {
        "input": "num = 100",
        "output": "[]"
      },
      {
        "input": "num = 1500000000000",
        "output": "[499999999999, 500000000000, 500000000001]"
      },
      {
        "input": "num = 999999999",
        "output": "[333333332, 333333333, 333333334]"
      },
      {
        "input": "num = 500000000000001",
        "output": "[166666666666666, 166666666666667, 166666666666668]"
      },
      {
        "input": "num = 1000000",
        "output": "[]"
      },
      {
        "input": "num = 1234567890123",
        "output": "[411522630040, 411522630041, 411522630042]"
      },
      {
        "input": "num = 1234567890124",
        "output": "[]"
      },
      {
        "input": "num = 1000000000000000",
        "output": "[]"
      },
      {
        "input": "num = 180",
        "output": "[59, 60, 61]"
      },
      {
        "input": "num = 101",
        "output": "[]"
      },
      {
        "input": "num = 8999999999997",
        "output": "[2999999999998, 2999999999999, 3000000000000]"
      },
      {
        "input": "num = 1000000000000001",
        "output": "[]"
      }
    ]
  },
  {
    "id": 3085,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Hash Table",
      "String",
      "Counting",
      "Sorting"
    ],
    "problemDescription": "You are given a string word and an integer k.\nWe consider word to be k-special if |freq(word[i]) - freq(word[j])| <= k for all indices i and j in the string.\nHere, freq(x) denotes the frequency of the character x in word, and |y| denotes the absolute value of y.\nReturn the minimum number of characters you need to delete to make word k-special.\n\u00a0\nExample 1:\n\nInput: word = \"aabcaba\", k = 0\nOutput: 3\nExplanation: We can make word 0-special by deleting 2 occurrences of \"a\" and 1 occurrence of \"c\". Therefore, word becomes equal to \"baba\" where freq('a') == freq('b') == 2.\n\nExample 2:\n\nInput: word = \"dabdcbdcdcd\", k = 2\nOutput: 2\nExplanation: We can make word 2-special by deleting 1 occurrence of \"a\" and 1 occurrence of \"d\". Therefore, word becomes equal to \"bdcbdcdcd\" where freq('b') == 2, freq('c') == 3, and freq('d') == 4.\n\nExample 3:\n\nInput: word = \"aaabaaa\", k = 2\nOutput: 1\nExplanation: We can make word 2-special by deleting 1 occurrence of \"b\". Therefore, word becomes equal to \"aaaaaa\" where each letter's frequency is now uniformly 6.\n\n\u00a0\nConstraints:\n\n1 <= word.length <= 105\n0 <= k <= 105\nword consists only of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def minimumDeletions(self, word: str, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "word = \"abacabadaba\", k = 2",
        "output": "3"
      },
      {
        "input": "word = \"abacabadabacaba\", k = 3",
        "output": "4"
      },
      {
        "input": "word = \"xyz\", k = 0",
        "output": "0"
      },
      {
        "input": "word = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 10",
        "output": "0"
      },
      {
        "input": "word = \"abcabcabc\", k = 1",
        "output": "0"
      },
      {
        "input": "word = \"mnbvcxzlkjhgfdsapoiuytrewq\", k = 5",
        "output": "0"
      },
      {
        "input": "word = \"aabcaba\", k = 0",
        "output": "3"
      },
      {
        "input": "word = \"dabdcbdcdcd\", k = 2",
        "output": "2"
      },
      {
        "input": "word = \"zzzzz\", k = 0",
        "output": "0"
      },
      {
        "input": "word = \"aaabaaa\", k = 2",
        "output": "1"
      },
      {
        "input": "word = \"abcdabcdabcd\", k = 1",
        "output": "0"
      },
      {
        "input": "word = \"aaaaa\", k = 0",
        "output": "0"
      },
      {
        "input": "word = \"xyz\", k = 1",
        "output": "0"
      },
      {
        "input": "word = \"abcde\", k = 3",
        "output": "0"
      },
      {
        "input": "word = \"abacabadabacaba\", k = 1",
        "output": "6"
      },
      {
        "input": "word = \"qqwweerrttyyuuiioopp\", k = 2",
        "output": "0"
      },
      {
        "input": "word = \"aabcccdddd\", k = 1",
        "output": "2"
      },
      {
        "input": "word = \"xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\", k = 2",
        "output": "0"
      },
      {
        "input": "word = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 0",
        "output": "0"
      },
      {
        "input": "word = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 10",
        "output": "0"
      },
      {
        "input": "word = \"lkjghwertyuiopasdfghjklzxcvbnmlkjhgfdwsazxcvbnmlkjhgfdwsazxcvbnmlkjhgfdwsa\", k = 15",
        "output": "0"
      },
      {
        "input": "word = \"zzzzzyyyyyxxxxxwwwwvvvvuttttssssrrrrqqqqppppooooonnnnmmmmmllllkkkkjjjjiiiihhhhggggffffffeeeeee\", k = 5",
        "output": "0"
      },
      {
        "input": "word = \"xyzzzzzzzzzyxyzzzzzzzzzyxyzzzzzzzzzy\", k = 5",
        "output": "9"
      },
      {
        "input": "word = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 3",
        "output": "0"
      },
      {
        "input": "word = \"mnbvcxzlkjhgfdsapoiuytrewqmnbvcxzlkjhgfdsapoiuytrewqmnbvcxzlkjhgfdsapoiuytrewq\", k = 8",
        "output": "0"
      },
      {
        "input": "word = \"aaabbbcccddddeeeffffffgggggggg\", k = 4",
        "output": "1"
      },
      {
        "input": "word = \"thisisanexamplestringwithvariousfrequencies\", k = 3",
        "output": "4"
      },
      {
        "input": "word = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 5",
        "output": "0"
      },
      {
        "input": "word = \"almosteveryletterisusedbutnotallabcdefghijklmnopqrstuvwxyzzzzzzzzzzz\", k = 2",
        "output": "17"
      },
      {
        "input": "word = \"thisisaverylongwordthatcontainsmanycharactersandneedscomplexprocessing\", k = 10",
        "output": "0"
      },
      {
        "input": "word = \"aaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbcccccccccccccccc\", k = 2",
        "output": "0"
      },
      {
        "input": "word = \"aaaaaaaaaaabbbbbbbbbbbccccccccccdddddddddd\", k = 5",
        "output": "0"
      },
      {
        "input": "word = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 25",
        "output": "0"
      },
      {
        "input": "word = \"zzzzzzzzzzzzzzzzzzzz\", k = 0",
        "output": "0"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyz\", k = 0",
        "output": "0"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyzzzzzzzzzz\", k = 5",
        "output": "4"
      },
      {
        "input": "word = \"aaaaaaaaaabbbbbbbbccccccccddddddddeeeeeeeffffffffggggggghhhhhhhhiiiiiiiiii\", k = 3",
        "output": "0"
      },
      {
        "input": "word = \"unevenfrequenciesaxbxcxdxeuxyvxuyvyvxvyvxvyvxvyvxvyvxvyvxyvxyvxyvxyvxyvxyvxyvxyvxyvxyvxyvxy\", k = 10",
        "output": "23"
      },
      {
        "input": "word = \"aaaaaabbbccccdddddeeeeeffffffffggggghhhhhiiiiijjjjjkkkkklllllmmmmmnnnnnooooo\", k = 5",
        "output": "0"
      },
      {
        "input": "word = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzzzzzzzzzzzzzzzzzz\", k = 1",
        "output": "17"
      },
      {
        "input": "word = \"abcdefghij\", k = 0",
        "output": "0"
      },
      {
        "input": "word = \"ppppppppppqqqqqqqqqqrrrrrrrrrrssssssssssttttttttttuuuuuuuuuuvvvvvvvvvvwwwwwwwwwwxxxxxxxxxxxyyyyyyyyyyzzzzzzzzzz\", k = 10",
        "output": "0"
      },
      {
        "input": "word = \"qwertyuiopasdfghjklzxcvbnm\", k = 10",
        "output": "0"
      },
      {
        "input": "word = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\", k = 10",
        "output": "0"
      },
      {
        "input": "word = \"verylongstringwithrepeatingcharactersaaaaaaaaaabbbbbbbbbbcccccccccc\", k = 4",
        "output": "20"
      },
      {
        "input": "word = \"ppppppppppppppppppppppppppppppppppppppppppppppppppppp\", k = 0",
        "output": "0"
      },
      {
        "input": "word = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 1",
        "output": "0"
      },
      {
        "input": "word = \"abcdeabcdabcdeabcdeabcdeabcdeabcde\", k = 2",
        "output": "0"
      },
      {
        "input": "word = \"ppppqqqqrrrsssttttuuuuvvvvwwwwxxxxxyyyyyzzzzzaaaaabbbbccccddddeeeeffffgggghhhhiiii\", k = 5",
        "output": "0"
      },
      {
        "input": "word = \"aabbaaccddccbbbaaadddcccbbaaa\", k = 1",
        "output": "6"
      },
      {
        "input": "word = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 0",
        "output": "0"
      },
      {
        "input": "word = \"abcabcabcabcabcabcabcabcabcabc\", k = 1",
        "output": "0"
      },
      {
        "input": "word = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzqqqqqqqqqq\", k = 4",
        "output": "6"
      }
    ]
  },
  {
    "id": 1750,
    "difficulty": "Medium",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "problemDescription": "Given a string s consisting only of characters 'a', 'b', and 'c'. You are asked to apply the following algorithm on the string any number of times:\n\nPick a non-empty prefix from the string s where all the characters in the prefix are equal.\nPick a non-empty suffix from the string s where all the characters in this suffix are equal.\nThe prefix and the suffix should not intersect at any index.\nThe characters from the prefix and suffix must be the same.\nDelete both the prefix and the suffix.\n\nReturn the minimum length of s after performing the above operation any number of times (possibly zero times).\n\u00a0\nExample 1:\n\nInput: s = \"ca\"\nOutput: 2\nExplanation: You can't remove any characters, so the string stays as is.\n\nExample 2:\n\nInput: s = \"cabaabac\"\nOutput: 0\nExplanation: An optimal sequence of operations is:\n- Take prefix = \"c\" and suffix = \"c\" and remove them, s = \"abaaba\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"baab\".\n- Take prefix = \"b\" and suffix = \"b\" and remove them, s = \"aa\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"\".\nExample 3:\n\nInput: s = \"aabccabba\"\nOutput: 3\nExplanation: An optimal sequence of operations is:\n- Take prefix = \"aa\" and suffix = \"a\" and remove them, s = \"bccabb\".\n- Take prefix = \"b\" and suffix = \"bb\" and remove them, s = \"cca\".\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 105\ns only consists of characters 'a', 'b', and 'c'.\n\n",
    "starterCode": "class Solution:\n    def minimumLength(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"abcba\"",
        "output": "1"
      },
      {
        "input": "s = \"ca\"",
        "output": "2"
      },
      {
        "input": "s = \"abac\"",
        "output": "4"
      },
      {
        "input": "s = \"aabccabba\"",
        "output": "3"
      },
      {
        "input": "s = \"aabbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aababbaa\"",
        "output": "1"
      },
      {
        "input": "s = \"cabaabac\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbccbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abcabc\"",
        "output": "6"
      },
      {
        "input": "s = \"aabbbcccbbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aababa\"",
        "output": "1"
      },
      {
        "input": "s = \"aabcccbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abc\"",
        "output": "3"
      },
      {
        "input": "s = \"abbaccaa\"",
        "output": "5"
      },
      {
        "input": "s = \"aaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abccba\"",
        "output": "0"
      },
      {
        "input": "s = \"aaabaaa\"",
        "output": "1"
      },
      {
        "input": "s = \"aabbcc\"",
        "output": "6"
      },
      {
        "input": "s = \"abca\"",
        "output": "2"
      },
      {
        "input": "s = \"cccccc\"",
        "output": "0"
      },
      {
        "input": "s = \"abababababababababababababababababababababababababababababababababababababab\"",
        "output": "76"
      },
      {
        "input": "s = \"aabacccbaa\"",
        "output": "4"
      },
      {
        "input": "s = \"abacabacabacabacabacabacabacabacabacabacab\"",
        "output": "42"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiii\"",
        "output": "36"
      },
      {
        "input": "s = \"aabbbcccbbbbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"",
        "output": "66"
      },
      {
        "input": "s = \"ccabbbcccabbbcccabbbcc\"",
        "output": "18"
      },
      {
        "input": "s = \"abccbaabccbaabccbaabccba\"",
        "output": "0"
      },
      {
        "input": "s = \"acabacabacabacabacabacabacabacab\"",
        "output": "32"
      },
      {
        "input": "s = \"cccaaaaabbb\"",
        "output": "11"
      },
      {
        "input": "s = \"aaaabbbbccccaaaabbbbcccc\"",
        "output": "24"
      },
      {
        "input": "s = \"aaabbbbbbbbccccccaaa\"",
        "output": "14"
      },
      {
        "input": "s = \"cbabcbabcb\"",
        "output": "10"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"",
        "output": "76"
      },
      {
        "input": "s = \"bbbbbbaaaaa\"",
        "output": "11"
      },
      {
        "input": "s = \"abcabcabc\"",
        "output": "9"
      },
      {
        "input": "s = \"aaaabaaaabaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abcabcabcabc\"",
        "output": "12"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbccccc\"",
        "output": "24"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiiiiiiiiiiiiiiiiiiiiii\"",
        "output": "56"
      },
      {
        "input": "s = \"abccbaabcbaabccba\"",
        "output": "1"
      },
      {
        "input": "s = \"abacabacabaacaba\"",
        "output": "1"
      },
      {
        "input": "s = \"aaabaaaabbaaaabaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abacaabacaabaca\"",
        "output": "13"
      },
      {
        "input": "s = \"aabbbccccdddeeeccccbbbaaa\"",
        "output": "6"
      },
      {
        "input": "s = \"abacbacbacbacbacba\"",
        "output": "14"
      },
      {
        "input": "s = \"aaaabaaaabaaaabaaa\"",
        "output": "1"
      },
      {
        "input": "s = \"aabccccbbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaabbbbcccc\"",
        "output": "12"
      },
      {
        "input": "s = \"aabccbaaab\"",
        "output": "10"
      },
      {
        "input": "s = \"aaabbbcccbbbbaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffeeddccbaabbaaabcabcabc\"",
        "output": "34"
      },
      {
        "input": "s = \"aabbbcccbbaaaabbbcccbbaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiiiiiii\"",
        "output": "41"
      },
      {
        "input": "s = \"abbbbaaaaabbbaaaaabbbb\"",
        "output": "22"
      },
      {
        "input": "s = \"cccaaaaabbbcccbaaabccbaaabccbaaabccbaa\"",
        "output": "38"
      },
      {
        "input": "s = \"bbbbaaaaabbbb\"",
        "output": "0"
      },
      {
        "input": "s = \"abccbaabccba\"",
        "output": "0"
      },
      {
        "input": "s = \"aaabaaaabbbaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaabbbbbbccccccdddddd\"",
        "output": "22"
      },
      {
        "input": "s = \"abacabacaba\"",
        "output": "1"
      },
      {
        "input": "s = \"aaabaaaabaaaabaaa\"",
        "output": "1"
      },
      {
        "input": "s = \"aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\"",
        "output": "0"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "36"
      },
      {
        "input": "s = \"abacaba\"",
        "output": "1"
      },
      {
        "input": "s = \"cccbbbaaa\"",
        "output": "9"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbbccccccccccdddddddddd\"",
        "output": "41"
      },
      {
        "input": "s = \"abcbaabcbacba\"",
        "output": "7"
      },
      {
        "input": "s = \"aaabaaaabba\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbaabbaabbaabb\"",
        "output": "16"
      },
      {
        "input": "s = \"aaaabbbbccccddddccccdddd\"",
        "output": "24"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabc\"",
        "output": "21"
      },
      {
        "input": "s = \"ccabbbccbbbbcabcabbbccabc\"",
        "output": "22"
      },
      {
        "input": "s = \"cccccccccccccccccccccc\"",
        "output": "0"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "99"
      },
      {
        "input": "s = \"acaacacaacac\"",
        "output": "12"
      },
      {
        "input": "s = \"aaabbbcccbbbaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abcbaabcbaabcbaabcbaabcbaabcbaabcba\"",
        "output": "1"
      },
      {
        "input": "s = \"abccbaabccbaabccba\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"",
        "output": "71"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\"",
        "output": "30"
      },
      {
        "input": "s = \"aabbaabbaabbaabbaabbaabbaabbaabb\"",
        "output": "32"
      },
      {
        "input": "s = \"aaaaabbbbbcccccaaaa\"",
        "output": "10"
      },
      {
        "input": "s = \"aabbbccccdddddeeecccbbbbaaa\"",
        "output": "8"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "48"
      },
      {
        "input": "s = \"ababbababbababb\"",
        "output": "15"
      },
      {
        "input": "s = \"aabbbcccdddeeeeeeccccbbbaa\"",
        "output": "9"
      },
      {
        "input": "s = \"aabbccddeedccbbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbbcccbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"acaacaaca\"",
        "output": "1"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "93"
      },
      {
        "input": "s = \"aabbaaabbbaaabbbaaabbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"accbabcbaccbacc\"",
        "output": "15"
      },
      {
        "input": "s = \"abcabcabcabcabcabc\"",
        "output": "18"
      },
      {
        "input": "s = \"abcbaabcba\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbccbbccbbccaa\"",
        "output": "12"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaabbbcccbbbaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"cbbccbbcc\"",
        "output": "0"
      },
      {
        "input": "s = \"abacbacbacbacbacbacbac\"",
        "output": "22"
      },
      {
        "input": "s = \"aaaaabccccbaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaabbbbccccddddeee\"",
        "output": "19"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiiiiiiiiiii\"",
        "output": "45"
      },
      {
        "input": "s = \"ccccaaaabbbbaaaa\"",
        "output": "16"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbbccccccccccddddddddddeeeeeeeeeeeeeeefffffffff\"",
        "output": "65"
      },
      {
        "input": "s = \"aaabbbcccbbbbaaabbbcccbbbbaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"ababababababababababab\"",
        "output": "22"
      },
      {
        "input": "s = \"aaaabbbbccccccaaaabbbb\"",
        "output": "22"
      },
      {
        "input": "s = \"aabbaaabbbaaabbbaaabbaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbbccccccccccddddddddddeeeeeeeeeeeeeeefffffffffgggggggggghhhhhhhhhhhiiiiiiiiiii\"",
        "output": "97"
      },
      {
        "input": "s = \"aabbaabbccddeeffeeddccbaabbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abababababababababab\"",
        "output": "20"
      },
      {
        "input": "s = \"aaaabccccbbbbaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbbbccccbbbbaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeedccbbaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abacabadabacaba\"",
        "output": "1"
      },
      {
        "input": "s = \"aabaaabaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeeedddccbaabb\"",
        "output": "22"
      },
      {
        "input": "s = \"aabccccbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"acccba\"",
        "output": "4"
      },
      {
        "input": "s = \"abacbacbacbacbaba\"",
        "output": "11"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "42"
      },
      {
        "input": "s = \"aaaabbbaaabbbbaaaabbbaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabac\"",
        "output": "96"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "90"
      },
      {
        "input": "s = \"aaabbbcccbbaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffgg\"",
        "output": "14"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"",
        "output": "82"
      },
      {
        "input": "s = \"ccbaaaabbbcccbaaaabbbccc\"",
        "output": "0"
      },
      {
        "input": "s = \"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbaabbccddccbbbaa\"",
        "output": "10"
      },
      {
        "input": "s = \"cccccccccccccccccc\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaabbaaabbbaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbaabbaabbaabbaabb\"",
        "output": "20"
      },
      {
        "input": "s = \"aaaaabbbbbccccdddddccccbbbaaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"ababaababa\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abcbaabcbaabcba\"",
        "output": "1"
      },
      {
        "input": "s = \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbaaccbbbaa\"",
        "output": "4"
      },
      {
        "input": "s = \"ccccccc\"",
        "output": "0"
      },
      {
        "input": "s = \"aaabbbcccdddeeecccccbbbaaa\"",
        "output": "6"
      },
      {
        "input": "s = \"aabbccddeeecccbbbaa\"",
        "output": "5"
      },
      {
        "input": "s = \"abccbaabcba\"",
        "output": "0"
      },
      {
        "input": "s = \"ababababab\"",
        "output": "10"
      },
      {
        "input": "s = \"aaaabbbbccccddddccccddddeeeeffff\"",
        "output": "32"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"",
        "output": "61"
      },
      {
        "input": "s = \"ccccaaaabbbbcccc\"",
        "output": "8"
      },
      {
        "input": "s = \"aabbccddeedccbbaaabbccddeedccbbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"babbacabacababb\"",
        "output": "1"
      },
      {
        "input": "s = \"ccccccabbbbbbbcc\"",
        "output": "8"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabc\"",
        "output": "24"
      },
      {
        "input": "s = \"aabbaabbccbbccbbccaa\"",
        "output": "16"
      },
      {
        "input": "s = \"aaabbbcccbaabbbcccbaaabbb\"",
        "output": "25"
      },
      {
        "input": "s = \"ababa\"",
        "output": "1"
      },
      {
        "input": "s = \"acaabaaaca\"",
        "output": "1"
      },
      {
        "input": "s = \"aabbccbbccbbccbbccaa\"",
        "output": "16"
      },
      {
        "input": "s = \"ccccbaaaabbbcccbaaaabbbccc\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaabbbcccdddeeecccbbbbaaaa\"",
        "output": "6"
      },
      {
        "input": "s = \"aaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaab\"",
        "output": "72"
      },
      {
        "input": "s = \"aaaaabbbbbccccccccbbbbbbaaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"ccabbaacc\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiiiiiiiiiiiiiiiii\"",
        "output": "51"
      },
      {
        "input": "s = \"aabbccddeedccbbaaacccccccccccbbbbaaa\"",
        "output": "12"
      },
      {
        "input": "s = \"acbacbacbacbacba\"",
        "output": "14"
      },
      {
        "input": "s = \"abcabcabcabcabc\"",
        "output": "15"
      },
      {
        "input": "s = \"ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\"",
        "output": "0"
      },
      {
        "input": "s = \"caabaccaabaaccaaa\"",
        "output": "17"
      }
    ]
  },
  {
    "id": 19,
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "problemDescription": "Given the head of a linked list, remove the nth node from the end of the list and return its head.\n\u00a0\nExample 1:\n\n\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\nExample 2:\n\nInput: head = [1], n = 1\nOutput: []\n\nExample 3:\n\nInput: head = [1,2], n = 1\nOutput: [1]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is sz.\n1 <= sz <= 30\n0 <= Node.val <= 100\n1 <= n <= sz\n\n\u00a0\nFollow up: Could you do this in one pass?\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "head = [100,90,80,70,60], n = 3",
        "output": "[100, 90, 70, 60]"
      },
      {
        "input": "head = [1,2], n = 1",
        "output": "[1]"
      },
      {
        "input": "head = [5,4,3,2,1], n = 5",
        "output": "[4, 3, 2, 1]"
      },
      {
        "input": "head = [1,2,3,4,5], n = 2",
        "output": "[1, 2, 3, 5]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], n = 5",
        "output": "[1, 2, 3, 4, 5, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1], n = 1",
        "output": "None"
      },
      {
        "input": "head = [1,2,3], n = 3",
        "output": "[2, 3]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], n = 15",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], n = 15",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], n = 1",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100], n = 5",
        "output": "[10, 20, 30, 40, 50, 70, 80, 90, 100]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29], n = 1",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], n = 3",
        "output": "[1, 2, 3, 4, 5, 6, 7, 9, 10]"
      },
      {
        "input": "head = [30,20,10], n = 2",
        "output": "[30, 10]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], n = 29",
        "output": "[1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], n = 30",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [7,14,21,28,35,42,49,56,63,70,77,84,91,98], n = 13",
        "output": "[7, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98]"
      },
      {
        "input": "head = [10,20,30,40,50,60], n = 1",
        "output": "[10, 20, 30, 40, 50]"
      },
      {
        "input": "head = [2,3,4,5], n = 1",
        "output": "[2, 3, 4]"
      },
      {
        "input": "head = [1,0,1,0,1,0,1,0,1,0], n = 2",
        "output": "[1, 0, 1, 0, 1, 0, 1, 0, 0]"
      },
      {
        "input": "head = [5,10], n = 2",
        "output": "[10]"
      },
      {
        "input": "head = [3,2,1], n = 1",
        "output": "[3, 2]"
      },
      {
        "input": "head = [99,98,97,96,95,94,93,92,91,90,89], n = 1",
        "output": "[99, 98, 97, 96, 95, 94, 93, 92, 91, 90]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90], n = 5",
        "output": "[10, 20, 30, 40, 60, 70, 80, 90]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], n = 10",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100], n = 10",
        "output": "[20, 30, 40, 50, 60, 70, 80, 90, 100]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], n = 29",
        "output": "Error: 'NoneType' object has no attribute 'next'"
      },
      {
        "input": "head = [5], n = 1",
        "output": "None"
      },
      {
        "input": "head = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], n = 29",
        "output": "[30, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45], n = 7",
        "output": "[3, 6, 9, 12, 15, 18, 21, 24, 30, 33, 36, 39, 42, 45]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], n = 29",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1], n = 10",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60], n = 30",
        "output": "[4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], n = 10",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], n = 10",
        "output": "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 65, 70, 75, 80, 85, 90, 95, 100]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,30], n = 16",
        "output": "[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30]"
      },
      {
        "input": "head = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], n = 1",
        "output": "[30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1], n = 5",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [100,99,98,97,96,95,94,93,92,91,90], n = 3",
        "output": "[100, 99, 98, 97, 96, 95, 94, 93, 91, 90]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], n = 1",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "head = [3,1,4,1,5,9,2,6,5,3,5,9,7,9,3,2,3,8,4,6,2,6,4,3,3,8,3,2,7,9], n = 10",
        "output": "[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3, 2, 3, 8, 4, 6, 6, 4, 3, 3, 8, 3, 2, 7, 9]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], n = 25",
        "output": "[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], n = 28",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], n = 10",
        "output": "[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1], n = 29",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], n = 20",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [3,5,1,2,4,7,6,8,9], n = 3",
        "output": "[3, 5, 1, 2, 4, 7, 8, 9]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], n = 1",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]"
      },
      {
        "input": "head = [1,2], n = 2",
        "output": "[2]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], n = 28",
        "output": "[1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], n = 4",
        "output": "[1, 2, 3, 4, 5, 6, 8, 9, 10]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1], n = 4",
        "output": "[9, 8, 7, 6, 5, 3, 2, 1]"
      },
      {
        "input": "head = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], n = 15",
        "output": "[30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], n = 1",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]"
      },
      {
        "input": "head = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], n = 2",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [2,3,4,5], n = 4",
        "output": "[3, 4, 5]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], n = 14",
        "output": "[10, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100], n = 1",
        "output": "[10, 20, 30, 40, 50, 60, 70, 80, 90]"
      },
      {
        "input": "head = [29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], n = 29",
        "output": "[28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], n = 15",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], n = 30",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], n = 25",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70], n = 15",
        "output": "[99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70]"
      },
      {
        "input": "head = [6,2,8,2,8,4,1,8,5,2,8,6,4,3,2,8,6,2,4,3,8,2,6,4,3,2,8,6,2,4], n = 20",
        "output": "[6, 2, 8, 2, 8, 4, 1, 8, 5, 2, 6, 4, 3, 2, 8, 6, 2, 4, 3, 8, 2, 6, 4, 3, 2, 8, 6, 2, 4]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], n = 20",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71], n = 10",
        "output": "[100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 79, 78, 77, 76, 75, 74, 73, 72, 71]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], n = 10",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [99,88,77,66,55,44,33,22,11], n = 9",
        "output": "[88, 77, 66, 55, 44, 33, 22, 11]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], n = 1",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,28,26,24,22,20,18,16,14,12,10,8,6,4,2], n = 14",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]"
      },
      {
        "input": "head = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7], n = 15",
        "output": "[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]"
      },
      {
        "input": "head = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71], n = 1",
        "output": "[99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72]"
      },
      {
        "input": "head = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71], n = 1",
        "output": "[100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], n = 30",
        "output": "[0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], n = 7",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [3,2,1], n = 2",
        "output": "[3, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], n = 2",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30]"
      },
      {
        "input": "head = [1,2,2,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15], n = 8",
        "output": "[1, 2, 2, 3, 4, 5, 5, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], n = 15",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1], n = 9",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1]"
      }
    ]
  },
  {
    "id": 2445,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "There is an undirected connected tree with n nodes labeled from 1 to n and n - 1 edges. You are given the integer n. The parent node of a node with a label v is the node with the label floor (v / 2). The root of the tree is the node with the label 1.\n\nFor example, if n = 7, then the node with the label 3 has the node with the label floor(3 / 2) = 1 as its parent, and the node with the label 7 has the node with the label floor(7 / 2) = 3 as its parent.\n\nYou are also given an integer array queries. Initially, every node has a value 0 on it. For each query queries[i], you should flip all values in the subtree of the node with the label queries[i].\nReturn the total number of nodes with the value 1 after processing all the queries.\nNote that:\n\nFlipping the value of a node means that the node with the value 0 becomes 1 and vice versa.\nfloor(x) is equivalent to rounding x down to the nearest integer.\n\n\u00a0\nExample 1:\n\n\nInput: n = 5 , queries = [1,2,5]\nOutput: 3\nExplanation: The diagram above shows the tree structure and its status after performing the queries. The blue node represents the value 0, and the red node represents the value 1.\nAfter processing the queries, there are three red nodes (nodes with value 1): 1, 3, and 5.\n\nExample 2:\n\n\nInput: n = 3, queries = [2,3,3]\nOutput: 1\nExplanation: The diagram above shows the tree structure and its status after performing the queries. The blue node represents the value 0, and the red node represents the value 1.\nAfter processing the queries, there are one red node (node with value 1): 2.\n\n\u00a0\nConstraints:\n\n1 <= n <= 105\n1 <= queries.length <= 105\n1 <= queries[i] <= n\n\n",
    "starterCode": "class Solution:\n    def numberOfNodes(self, n: int, queries: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "n",
        "output": "Error: Solution.numberOfNodes() missing 2 required positional arguments: 'n' and 'queries'"
      },
      {
        "input": "queries",
        "output": "Error: Solution.numberOfNodes() missing 2 required positional arguments: 'n' and 'queries'"
      },
      {
        "input": "n = 100000, queries = [50000, 25000, 75000, 37500, 62500, 12500, 87500, 68750, 93750, 43750]",
        "output": "13"
      },
      {
        "input": "n = 7, queries = [3, 3, 3]",
        "output": "3"
      },
      {
        "input": "n = 2, queries = [1, 2, 1]",
        "output": "1"
      },
      {
        "input": "n = 100000, queries = [50000, 25000, 75000, 12500, 87500]",
        "output": "8"
      },
      {
        "input": "n = 9, queries = [9, 4, 2, 1, 5, 6, 7, 8, 3]",
        "output": "5"
      },
      {
        "input": "n = 20, queries = [1, 2, 4, 8, 16]",
        "output": "13"
      },
      {
        "input": "n = 15, queries = [1, 2, 4, 8, 16]",
        "output": "10"
      },
      {
        "input": "n = 100000, queries = [1, 2, 3, ..., 100000]",
        "output": "Error: '>' not supported between instances of 'ellipsis' and 'int'"
      },
      {
        "input": "n = 1000, queries = [500, 250, 750, 125, 375, 625, 875, 63, 313, 438]",
        "output": "31"
      },
      {
        "input": "n = 10, queries = [5, 10, 1]",
        "output": "9"
      },
      {
        "input": "n = 7, queries = [4, 2, 3, 6, 5, 7]",
        "output": "2"
      },
      {
        "input": "n = 10, queries = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "0"
      },
      {
        "input": "n = 10, queries = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "5"
      },
      {
        "input": "n = 100, queries = [50, 25, 75, 1, 99]",
        "output": "96"
      },
      {
        "input": "n = 100000, queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "50849"
      },
      {
        "input": "n = 15, queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "5"
      },
      {
        "input": "n = 5, queries = [1, 2, 5]",
        "output": "3"
      },
      {
        "input": "n = 7, queries = [1, 1, 1, 1, 1, 1, 1]",
        "output": "7"
      },
      {
        "input": "n = 20, queries = [10, 15, 20, 5, 1]",
        "output": "16"
      },
      {
        "input": "n = 100, queries = [50, 25, 75, 100, 1]",
        "output": "96"
      },
      {
        "input": "n = 50000, queries = [25000, 12500, 37500, 6250, 18750, 43750, 75000, 3125, 15625, 23438]",
        "output": "19"
      },
      {
        "input": "n = 10, queries = [1, 1, 1, 1, 1]",
        "output": "10"
      },
      {
        "input": "n = 15, queries = [7, 10, 14, 15]",
        "output": "2"
      },
      {
        "input": "n = 50000, queries = [25000, 12500, 37500, 50000, 1, 2, 3, 4, 5]",
        "output": "32769"
      },
      {
        "input": "n = 100000, queries = [50000, 50000, 50000]",
        "output": "2"
      },
      {
        "input": "n = 2, queries = [1, 2]",
        "output": "1"
      },
      {
        "input": "n = 50000, queries = [25000, 12500, 37500, 18750, 43750]",
        "output": "5"
      },
      {
        "input": "n = 20, queries = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "10"
      },
      {
        "input": "n = 100000, queries = [1, 50000, 99999]",
        "output": "99997"
      },
      {
        "input": "n = 100000, queries = [50000]",
        "output": "2"
      },
      {
        "input": "n = 15, queries = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "15"
      },
      {
        "input": "n = 10, queries = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]",
        "output": "7"
      },
      {
        "input": "n = 7, queries = [1, 3, 5, 7]",
        "output": "4"
      },
      {
        "input": "n = 20, queries = [10, 5, 15, 2, 3, 7, 11, 13, 17, 19]",
        "output": "13"
      },
      {
        "input": "n = 10, queries = [1, 5, 10, 5]",
        "output": "9"
      },
      {
        "input": "n = 10, queries = [1, 2, 3, 4, 5]",
        "output": "6"
      },
      {
        "input": "n = 20, queries = [10, 5, 1, 15, 20]",
        "output": "16"
      },
      {
        "input": "n = 1000, queries = [500, 250, 125, 625, 312, 156, 78, 39, 20, 10]",
        "output": "91"
      },
      {
        "input": "n = 10, queries = [5, 5, 5, 5, 5]",
        "output": "2"
      },
      {
        "input": "n = 7, queries = [1, 3, 7, 5]",
        "output": "4"
      },
      {
        "input": "n = 15, queries = [1, 3, 7, 15]",
        "output": "10"
      },
      {
        "input": "n = 15, queries = [1, 4, 8, 12, 15]",
        "output": "11"
      },
      {
        "input": "n = 1, queries = [1]",
        "output": "1"
      },
      {
        "input": "n = 15, queries = [1, 1, 1, 1, 1]",
        "output": "15"
      },
      {
        "input": "n = 100, queries = [50, 25, 75, 80, 90]",
        "output": "5"
      },
      {
        "input": "n = 100, queries = [50, 25, 75, 1, 100]",
        "output": "96"
      },
      {
        "input": "n = 20, queries = [10, 15, 20, 5, 1, 3]",
        "output": "11"
      },
      {
        "input": "n = 10, queries = [1]",
        "output": "10"
      },
      {
        "input": "n = 1000, queries = [500, 250, 750, 1000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "613"
      },
      {
        "input": "n = 100000, queries = [50000, 50000, 50000, 50000, 50000]",
        "output": "2"
      },
      {
        "input": "n = 10, queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "5"
      },
      {
        "input": "n = 15, queries = [1, 3, 5, 7, 9, 11, 13, 15]",
        "output": "8"
      },
      {
        "input": "n = 100, queries = [50, 25, 12, 6, 3, 1]",
        "output": "74"
      },
      {
        "input": "n = 10, queries = [1, 2, 4, 8, 10]",
        "output": "7"
      },
      {
        "input": "n = 7, queries = [3, 7, 3]",
        "output": "1"
      },
      {
        "input": "n = 7, queries = [3, 3, 3, 3, 3, 3, 3]",
        "output": "3"
      },
      {
        "input": "n = 10, queries = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "5"
      },
      {
        "input": "n = 7, queries = [1, 3, 5]",
        "output": "3"
      },
      {
        "input": "n = 1, queries = []",
        "output": "0"
      },
      {
        "input": "n = 20, queries = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "10"
      },
      {
        "input": "n = 100000, queries = [50000, 25000, 12500, 6250, 3125, 1562, 781, 390, 195, 97, 48, 24, 12, 6, 3, 1]",
        "output": "77130"
      },
      {
        "input": "n = 7, queries = [3, 3, 3, 3]",
        "output": "0"
      },
      {
        "input": "n = 100000, queries = [50000, 25000, 75000, 100000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "50847"
      },
      {
        "input": "n = 15, queries = [1, 3, 7, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 2]",
        "output": "5"
      },
      {
        "input": "n = 10, queries = [1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "n = 100000, queries = [1, 50000, 100000]",
        "output": "99999"
      },
      {
        "input": "n = 7, queries = [4, 5, 6, 7]",
        "output": "4"
      },
      {
        "input": "n = 8, queries = [2, 4, 6, 8, 1, 3, 5, 7]",
        "output": "5"
      },
      {
        "input": "n = 100000, queries = [1, 100000]",
        "output": "99999"
      },
      {
        "input": "n = 7, queries = [1, 3, 7, 3, 7]",
        "output": "7"
      },
      {
        "input": "n = 10, queries = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "n = 3, queries = [2, 3, 3]",
        "output": "1"
      },
      {
        "input": "n = 7, queries = [1, 3, 7]",
        "output": "5"
      },
      {
        "input": "n = 100, queries = [50, 25, 75, 12, 37, 63, 88, 4, 69, 92]",
        "output": "41"
      },
      {
        "input": "n = 1000, queries = [500, 250, 125, 62, 31, 15, 7, 3, 1]",
        "output": "662"
      },
      {
        "input": "n = 10, queries = [1, 1, 1]",
        "output": "10"
      },
      {
        "input": "n = 100000, queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 50000, 100000]",
        "output": "50848"
      },
      {
        "input": "n = 10, queries = [1, 4, 4, 8]",
        "output": "9"
      },
      {
        "input": "n = 10, queries = [1, 3, 7, 9]",
        "output": "7"
      }
    ]
  },
  {
    "id": 684,
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "problemDescription": "In this problem, a tree is an undirected graph that is connected and has no cycles.\nYou are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.\nReturn an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.\n\u00a0\nExample 1:\n\n\nInput: edges = [[1,2],[1,3],[2,3]]\nOutput: [2,3]\n\nExample 2:\n\n\nInput: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]\nOutput: [1,4]\n\n\u00a0\nConstraints:\n\nn == edges.length\n3 <= n <= 1000\nedges[i].length == 2\n1 <= ai < bi <= edges.length\nai != bi\nThere are no repeated edges.\nThe given graph is connected.\n\n",
    "starterCode": "class Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "edges = [[1,2],[2,3],[3,4],[1,4],[4,5],[5,1]]",
        "output": "[1, 4]"
      },
      {
        "input": "edges = [[3,4],[1,2],[2,4],[3,5],[2,5]]",
        "output": "[2, 5]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,1]]",
        "output": "[3, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[1,3]]",
        "output": "[1, 3]"
      },
      {
        "input": "edges = [[1,4],[3,4],[1,3],[1,2],[4,5]]",
        "output": "[1, 3]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,3]]",
        "output": "[2, 3]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[3,5],[4,5]]",
        "output": "[4, 5]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]",
        "output": "[1, 4]"
      },
      {
        "input": "edges = [[1,2],[2,3],[1,3],[4,5],[5,6],[4,6]]",
        "output": "[1, 3]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,3]]",
        "output": "[5, 3]"
      },
      {
        "input": "edges = [[1,3],[3,4],[1,5],[3,5],[2,4]]",
        "output": "[3, 5]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,1],[1,6],[6,7],[7,8],[8,9],[9,10],[10,6],[1,7],[2,8],[3,9],[4,10],[5,6],[7,9],[8,10],[1,3],[2,4],[5,7],[6,8],[9,11],[10,12],[11,13],[12,14],[13,15],[14,1],[15,2]]",
        "output": "[5, 1]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,9],[10,11],[12,13],[14,15],[1,8]]",
        "output": "[8, 9]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,1],[1,3]]",
        "output": "[9, 1]"
      },
      {
        "input": "edges = [[1,2],[1,3],[1,4],[2,4],[2,5],[3,5],[4,6],[5,6]]",
        "output": "[2, 4]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,5],[3,6],[4,7],[1,8]]",
        "output": "[10, 5]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,1],[2,5],[3,6]]",
        "output": "[5, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[1,20]]",
        "output": "[1, 20]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,1],[1,2]]",
        "output": "[20, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,1]]",
        "output": "[15, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10],[5,7]]",
        "output": "[1, 10]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1],[5,8]]",
        "output": "[10, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1],[3,6],[4,7],[1,8],[2,9],[3,10],[5,8]]",
        "output": "[10, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10],[5,10]]",
        "output": "[1, 10]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,9],[10,11],[12,13],[14,15],[9,15],[1,15],[2,6],[3,8],[4,10],[5,12],[6,14],[7,15]]",
        "output": "[8, 9]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1],[5,7]]",
        "output": "[10, 1]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[4,5],[5,6]]",
        "output": "[4, 5]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,17],[18,19],[20,21],[22,23],[24,25],[26,27],[28,29],[30,31]]",
        "output": "[16, 17]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,5]]",
        "output": "[20, 5]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[2,5],[3,4],[3,5],[4,5]]",
        "output": "[3, 4]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[1,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,1]]",
        "output": "[1, 4]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,9],[10,11],[12,13],[14,15],[15,1]]",
        "output": "[8, 9]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,1],[2,5]]",
        "output": "[5, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,3],[5,9]]",
        "output": "[10, 3]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,1],[1,3]]",
        "output": "[5, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,5]]",
        "output": "[10, 5]"
      },
      {
        "input": "edges = [[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5],[1,6],[2,6],[3,6],[4,6],[5,6]]",
        "output": "[2, 3]"
      },
      {
        "input": "edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,10]]",
        "output": "[5, 10]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,5],[3,6],[4,7],[1,8],[2,9]]",
        "output": "[10, 5]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,1],[1,10]]",
        "output": "[12, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,4],[6,8]]",
        "output": "[10, 4]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,1]]",
        "output": "[20, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,1],[1,3],[2,4],[2,5],[3,5]]",
        "output": "[5, 1]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[5,7]]",
        "output": "[5, 7]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,5],[3,6],[4,7],[1,8],[2,9],[3,10]]",
        "output": "[10, 5]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,5]]",
        "output": "[1, 5]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[1,4],[2,4],[1,3]]",
        "output": "[1, 4]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,9],[10,11],[12,13],[14,15],[9,15],[1,15]]",
        "output": "[8, 9]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,1],[1,3]]",
        "output": "[6, 1]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,10]]",
        "output": "[9, 10]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[1,4],[4,5],[5,6],[6,1]]",
        "output": "[1, 4]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39],[20,40],[20,41],[21,42],[21,43],[22,44],[22,45],[23,46],[23,47],[24,48],[24,49],[25,50],[25,51],[26,52],[26,53],[27,54],[27,55],[28,56],[28,57],[29,58],[29,59],[30,60],[30,61],[31,62],[31,63],[32,64],[32,65],[33,66],[33,67],[34,68],[34,69],[35,70],[35,71],[36,72],[36,73],[37,74],[37,75],[38,76],[38,77],[39,78],[39,79],[40,80],[40,81],[41,82],[41,83],[42,84],[42,85],[43,86],[43,87],[44,88],[44,89],[45,90],[45,91],[46,92],[46,93],[47,94],[47,95],[48,96],[48,97],[49,98],[49,99],[50,100],[50,1],[1,50]]",
        "output": "[50, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,1],[1,3]]",
        "output": "[16, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10]]",
        "output": "[1, 10]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[1,11],[1,3],[4,7]]",
        "output": "[1, 11]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10],[4,6],[7,9]]",
        "output": "[1, 10]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,1],[1,10],[2,11],[3,12],[4,13],[5,14],[6,15],[7,1],[8,2],[9,3],[10,4],[11,5],[12,6],[13,7],[14,8],[15,9]]",
        "output": "[15, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,1],[1,3],[3,5],[5,2]]",
        "output": "[5, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,1],[2,5]]",
        "output": "[6, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1]]",
        "output": "[10, 1]"
      },
      {
        "input": "edges = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12],[1,13],[1,14],[1,15],[1,16],[1,17],[1,18],[1,19],[1,20],[1,21],[1,22],[1,23],[1,24],[1,25],[1,26],[1,27],[1,28],[1,29],[1,30],[1,31],[1,32],[1,33],[1,34],[1,35],[1,36],[1,37],[1,38],[1,39],[1,40],[1,41],[1,42],[1,43],[1,44],[1,45],[1,46],[1,47],[1,48],[1,49],[1,50],[1,51],[1,52],[1,53],[1,54],[1,55],[1,56],[1,57],[1,58],[1,59],[1,60],[1,61],[1,62],[1,63],[1,64],[1,65],[1,66],[1,67],[1,68],[1,69],[1,70],[1,71],[1,72],[1,73],[1,74],[1,75],[1,76],[1,77],[1,78],[1,79],[1,80],[1,81],[1,82],[1,83],[1,84],[1,85],[1,86],[1,87],[1,88],[1,89],[1,90],[1,91],[1,92],[1,93],[1,94],[1,95],[1,96],[1,97],[1,98],[1,99],[1,100],[2,100]]",
        "output": "[2, 100]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1],[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,1],[8,2],[9,3],[10,4]]",
        "output": "[10, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,1],[1,3]]",
        "output": "[40, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10],[2,4],[3,5],[6,8],[7,9]]",
        "output": "[1, 10]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,10]]",
        "output": "[20, 10]"
      },
      {
        "input": "edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,5]]",
        "output": "[2, 3]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10],[2,5]]",
        "output": "[1, 10]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,1],[2,4]]",
        "output": "[5, 1]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,9],[10,11],[12,13],[14,15],[1,15]]",
        "output": "[8, 9]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,5],[3,6]]",
        "output": "[10, 5]"
      },
      {
        "input": "edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[4,5],[5,6],[6,1],[1,5]]",
        "output": "[2, 3]"
      },
      {
        "input": "edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,9],[10,11],[12,13],[14,15],[9,15]]",
        "output": "[8, 9]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,1],[6,7],[7,8],[8,9],[9,10],[10,6]]",
        "output": "[5, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,5],[3,6],[4,7]]",
        "output": "[10, 5]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,1],[1,4]]",
        "output": "[13, 1]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,1],[1,6],[6,7],[7,8],[8,9],[9,10],[10,6],[1,7],[2,8],[3,9],[4,10],[5,6],[7,9],[8,10]]",
        "output": "[5, 1]"
      }
    ]
  },
  {
    "id": 2787,
    "difficulty": "Medium",
    "tags": [
      "Dynamic Programming"
    ],
    "problemDescription": "Given two positive integers n and x.\nReturn the number of ways n can be expressed as the sum of the xth power of unique positive integers, in other words, the number of sets of unique integers [n1, n2, ..., nk] where n = n1x + n2x + ... + nkx.\nSince the result can be very large, return it modulo 109 + 7.\nFor example, if n = 160 and x = 3, one way to express n is n = 23 + 33 + 53.\n\u00a0\nExample 1:\n\nInput: n = 10, x = 2\nOutput: 1\nExplanation: We can express n as the following: n = 32 + 12 = 10.\nIt can be shown that it is the only way to express 10 as the sum of the 2nd power of unique integers.\n\nExample 2:\n\nInput: n = 4, x = 1\nOutput: 2\nExplanation: We can express n in the following ways:\n- n = 41 = 4.\n- n = 31 + 11 = 4.\n\n\u00a0\nConstraints:\n\n1 <= n <= 300\n1 <= x <= 5\n\n",
    "starterCode": "class Solution:\n    def numberOfWays(self, n: int, x: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 100, x = 4",
        "output": "0"
      },
      {
        "input": "n = 50, x = 2",
        "output": "3"
      },
      {
        "input": "n = 200, x = 2",
        "output": "9"
      },
      {
        "input": "n = 300, x = 5",
        "output": "0"
      },
      {
        "input": "n = 160, x = 3",
        "output": "1"
      },
      {
        "input": "n = 4, x = 1",
        "output": "2"
      },
      {
        "input": "n = 10, x = 2",
        "output": "1"
      },
      {
        "input": "n = 20, x = 2",
        "output": "1"
      },
      {
        "input": "n = 200, x = 5",
        "output": "0"
      },
      {
        "input": "n = 144, x = 2",
        "output": "2"
      },
      {
        "input": "n = 225, x = 4",
        "output": "0"
      },
      {
        "input": "n = 180, x = 5",
        "output": "0"
      },
      {
        "input": "n = 125, x = 2",
        "output": "5"
      },
      {
        "input": "n = 80, x = 3",
        "output": "0"
      },
      {
        "input": "n = 190, x = 5",
        "output": "0"
      },
      {
        "input": "n = 300, x = 3",
        "output": "0"
      },
      {
        "input": "n = 199, x = 4",
        "output": "0"
      },
      {
        "input": "n = 243, x = 5",
        "output": "1"
      },
      {
        "input": "n = 210, x = 5",
        "output": "0"
      },
      {
        "input": "n = 290, x = 5",
        "output": "0"
      },
      {
        "input": "n = 200, x = 4",
        "output": "0"
      },
      {
        "input": "n = 120, x = 2",
        "output": "4"
      },
      {
        "input": "n = 260, x = 4",
        "output": "0"
      },
      {
        "input": "n = 100, x = 2",
        "output": "3"
      },
      {
        "input": "n = 128, x = 2",
        "output": "0"
      },
      {
        "input": "n = 160, x = 2",
        "output": "4"
      },
      {
        "input": "n = 150, x = 4",
        "output": "0"
      },
      {
        "input": "n = 180, x = 4",
        "output": "0"
      },
      {
        "input": "n = 150, x = 2",
        "output": "9"
      },
      {
        "input": "n = 299, x = 5",
        "output": "0"
      },
      {
        "input": "n = 175, x = 3",
        "output": "0"
      },
      {
        "input": "n = 180, x = 2",
        "output": "6"
      },
      {
        "input": "n = 210, x = 2",
        "output": "18"
      },
      {
        "input": "n = 220, x = 3",
        "output": "0"
      },
      {
        "input": "n = 280, x = 3",
        "output": "1"
      },
      {
        "input": "n = 275, x = 5",
        "output": "1"
      },
      {
        "input": "n = 275, x = 4",
        "output": "0"
      },
      {
        "input": "n = 300, x = 1",
        "output": "872471266"
      },
      {
        "input": "n = 190, x = 2",
        "output": "14"
      },
      {
        "input": "n = 140, x = 5",
        "output": "0"
      },
      {
        "input": "n = 170, x = 3",
        "output": "0"
      },
      {
        "input": "n = 299, x = 3",
        "output": "0"
      },
      {
        "input": "n = 195, x = 2",
        "output": "16"
      },
      {
        "input": "n = 275, x = 3",
        "output": "0"
      },
      {
        "input": "n = 280, x = 4",
        "output": "0"
      },
      {
        "input": "n = 140, x = 4",
        "output": "0"
      },
      {
        "input": "n = 260, x = 5",
        "output": "0"
      },
      {
        "input": "n = 196, x = 4",
        "output": "0"
      },
      {
        "input": "n = 250, x = 3",
        "output": "0"
      },
      {
        "input": "n = 289, x = 3",
        "output": "1"
      },
      {
        "input": "n = 150, x = 3",
        "output": "0"
      },
      {
        "input": "n = 200, x = 1",
        "output": "487067746"
      },
      {
        "input": "n = 120, x = 3",
        "output": "0"
      },
      {
        "input": "n = 100, x = 1",
        "output": "444793"
      },
      {
        "input": "n = 175, x = 4",
        "output": "0"
      },
      {
        "input": "n = 260, x = 2",
        "output": "19"
      },
      {
        "input": "n = 180, x = 3",
        "output": "0"
      },
      {
        "input": "n = 170, x = 5",
        "output": "0"
      },
      {
        "input": "n = 290, x = 2",
        "output": "31"
      },
      {
        "input": "n = 299, x = 2",
        "output": "33"
      },
      {
        "input": "n = 256, x = 4",
        "output": "1"
      },
      {
        "input": "n = 270, x = 3",
        "output": "0"
      },
      {
        "input": "n = 90, x = 3",
        "output": "0"
      },
      {
        "input": "n = 250, x = 4",
        "output": "0"
      },
      {
        "input": "n = 17, x = 2",
        "output": "1"
      },
      {
        "input": "n = 1, x = 5",
        "output": "1"
      },
      {
        "input": "n = 3, x = 1",
        "output": "2"
      },
      {
        "input": "n = 125, x = 3",
        "output": "1"
      },
      {
        "input": "n = 2, x = 2",
        "output": "0"
      },
      {
        "input": "n = 50, x = 3",
        "output": "0"
      },
      {
        "input": "n = 81, x = 4",
        "output": "1"
      },
      {
        "input": "n = 20, x = 4",
        "output": "0"
      },
      {
        "input": "n = 17, x = 4",
        "output": "1"
      },
      {
        "input": "n = 5, x = 1",
        "output": "3"
      },
      {
        "input": "n = 15, x = 2",
        "output": "0"
      },
      {
        "input": "n = 120, x = 4",
        "output": "0"
      },
      {
        "input": "n = 100, x = 3",
        "output": "1"
      },
      {
        "input": "n = 27, x = 3",
        "output": "1"
      },
      {
        "input": "n = 64, x = 2",
        "output": "1"
      },
      {
        "input": "n = 8, x = 3",
        "output": "1"
      },
      {
        "input": "n = 31, x = 1",
        "output": "340"
      },
      {
        "input": "n = 1, x = 1",
        "output": "1"
      },
      {
        "input": "n = 256, x = 5",
        "output": "0"
      },
      {
        "input": "n = 64, x = 3",
        "output": "1"
      },
      {
        "input": "n = 25, x = 2",
        "output": "2"
      },
      {
        "input": "n = 28, x = 2",
        "output": "0"
      },
      {
        "input": "n = 9, x = 2",
        "output": "1"
      },
      {
        "input": "n = 12, x = 2",
        "output": "0"
      },
      {
        "input": "n = 250, x = 5",
        "output": "0"
      },
      {
        "input": "n = 81, x = 2",
        "output": "3"
      },
      {
        "input": "n = 70, x = 1",
        "output": "29927"
      },
      {
        "input": "n = 50, x = 5",
        "output": "0"
      },
      {
        "input": "n = 9, x = 4",
        "output": "0"
      },
      {
        "input": "n = 15, x = 1",
        "output": "27"
      },
      {
        "input": "n = 250, x = 2",
        "output": "21"
      },
      {
        "input": "n = 30, x = 1",
        "output": "296"
      }
    ]
  },
  {
    "id": 2375,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Greedy",
      "String",
      "Backtracking"
    ],
    "problemDescription": "You are given a 0-indexed string pattern of length n consisting of the characters 'I' meaning increasing and 'D' meaning decreasing.\nA 0-indexed string num of length n + 1 is created using the following conditions:\n\nnum consists of the digits '1' to '9', where each digit is used at most once.\nIf pattern[i] == 'I', then num[i] < num[i + 1].\nIf pattern[i] == 'D', then num[i] > num[i + 1].\n\nReturn the lexicographically smallest possible string num that meets the conditions.\n\u00a0\nExample 1:\n\nInput: pattern = \"IIIDIDDD\"\nOutput: \"123549876\"\nExplanation:\nAt indices 0, 1, 2, and 4 we must have that num[i] < num[i+1].\nAt indices 3, 5, 6, and 7 we must have that num[i] > num[i+1].\nSome possible values of num are \"245639871\", \"135749862\", and \"123849765\".\nIt can be proven that \"123549876\" is the smallest possible num that meets the conditions.\nNote that \"123414321\" is not possible because the digit '1' is used more than once.\nExample 2:\n\nInput: pattern = \"DDD\"\nOutput: \"4321\"\nExplanation:\nSome possible values of num are \"9876\", \"7321\", and \"8742\".\nIt can be proven that \"4321\" is the smallest possible num that meets the conditions.\n\n\u00a0\nConstraints:\n\n1 <= pattern.length <= 8\npattern consists of only the letters 'I' and 'D'.\n\n",
    "starterCode": "class Solution:\n    def smallestNumber(self, pattern: str) -> str:\n        ",
    "testCases": [
      {
        "input": "pattern = \"DDD\"",
        "output": "4321"
      },
      {
        "input": "pattern = \"IIIDIDDD\"",
        "output": "123549876"
      },
      {
        "input": "pattern = \"ID\"",
        "output": "132"
      },
      {
        "input": "pattern = \"IIDDD\"",
        "output": "126543"
      },
      {
        "input": "pattern = \"DDIII\"",
        "output": "321456"
      },
      {
        "input": "pattern = \"IDID\"",
        "output": "13254"
      },
      {
        "input": "pattern = \"IIII\"",
        "output": "12345"
      },
      {
        "input": "pattern = \"DI\"",
        "output": "213"
      },
      {
        "input": "pattern = \"IID\"",
        "output": "1243"
      },
      {
        "input": "pattern = \"DDIDDIID\"",
        "output": "321654798"
      },
      {
        "input": "pattern = \"IDIDIDID\"",
        "output": "132547698"
      },
      {
        "input": "pattern = \"I\"",
        "output": "12"
      },
      {
        "input": "pattern = \"DID\"",
        "output": "2143"
      },
      {
        "input": "pattern = \"IIIII\"",
        "output": "123456"
      },
      {
        "input": "pattern = \"DDDDD\"",
        "output": "654321"
      },
      {
        "input": "pattern = \"D\"",
        "output": "21"
      },
      {
        "input": "pattern = \"DDDD\"",
        "output": "54321"
      },
      {
        "input": "pattern = \"DDIIDDIID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IDIDIDIDID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDDIDIII\"",
        "output": "432165789"
      },
      {
        "input": "pattern = \"DDDDDDIIIIIIII\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDDIIIII\"",
        "output": "432156789"
      },
      {
        "input": "pattern = \"IIIIIIIII\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IDDDDDID\"",
        "output": "176543298"
      },
      {
        "input": "pattern = \"IDDDDDIDI\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDIDIDIDIDIDID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIDID\"",
        "output": "124365"
      },
      {
        "input": "pattern = \"DIIIDDDI\"",
        "output": "213487659"
      },
      {
        "input": "pattern = \"DDDDDDDDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIIIIIIIII\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIDDDDDDII\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDIIDIDID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIIIIIDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDDDDDD\"",
        "output": "87654321"
      },
      {
        "input": "pattern = \"DIDIDIDI\"",
        "output": "214365879"
      },
      {
        "input": "pattern = \"IIDDDDDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDDDDDDD\"",
        "output": "987654321"
      },
      {
        "input": "pattern = \"IIDDIIDDI\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIDDDIIID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDDDIIII\"",
        "output": "543216789"
      },
      {
        "input": "pattern = \"DDIIDDDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIDIDIDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIIIIDDDDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IDIDIDDDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIIDIDID\"",
        "output": "123547698"
      },
      {
        "input": "pattern = \"IDDDIIDI\"",
        "output": "154326879"
      },
      {
        "input": "pattern = \"IIDIDDDI\"",
        "output": "124387659"
      },
      {
        "input": "pattern = \"IIDDIDDIID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDDDDDDDDDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DIDIDID\"",
        "output": "21436587"
      },
      {
        "input": "pattern = \"IIIDDDIID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDIIIDDDIDI\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIDDIIIIID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDDDIII\"",
        "output": "54321678"
      },
      {
        "input": "pattern = \"IDIDID\"",
        "output": "1325476"
      },
      {
        "input": "pattern = \"IIDIDIDI\"",
        "output": "124365879"
      },
      {
        "input": "pattern = \"DDDDDDDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDDDDDI\"",
        "output": "76543218"
      },
      {
        "input": "pattern = \"DDIDDDID\"",
        "output": "321765498"
      },
      {
        "input": "pattern = \"DDIIIIIII\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DIIIIIII\"",
        "output": "213456789"
      },
      {
        "input": "pattern = \"IIIDDDDDDID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IDDDIDII\"",
        "output": "154327689"
      },
      {
        "input": "pattern = \"DDIIDIDDDI\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDDDIIIID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDIDIDID\"",
        "output": "321547698"
      },
      {
        "input": "pattern = \"IIIDDDDD\"",
        "output": "123987654"
      },
      {
        "input": "pattern = \"DDDDDIIIIII\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIIDDDDIII\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIIIIIIDDDDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIIIIID\"",
        "output": "12345687"
      },
      {
        "input": "pattern = \"IIIIIIIIIII\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IDIDDDID\"",
        "output": "132765498"
      },
      {
        "input": "pattern = \"IDIDIDIDIDIDID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IDIDIIDID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIIIIII\"",
        "output": "12345678"
      },
      {
        "input": "pattern = \"DDIIDDDD\"",
        "output": "321498765"
      },
      {
        "input": "pattern = \"IIIIIIID\"",
        "output": "123456798"
      },
      {
        "input": "pattern = \"IDIDIDIDIDID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DIIDIDID\"",
        "output": "213547698"
      },
      {
        "input": "pattern = \"DDIIDIDI\"",
        "output": "321465879"
      },
      {
        "input": "pattern = \"DDDIIIDID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIDDDIIII\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIDDDIID\"",
        "output": "126543798"
      },
      {
        "input": "pattern = \"IIDDDIII\"",
        "output": "126543789"
      },
      {
        "input": "pattern = \"IDIDIDIDIDIDIDID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DIDID\"",
        "output": "214365"
      },
      {
        "input": "pattern = \"DDDDDIII\"",
        "output": "654321789"
      },
      {
        "input": "pattern = \"DDII\"",
        "output": "32145"
      },
      {
        "input": "pattern = \"DDDIDDDD\"",
        "output": "432198765"
      },
      {
        "input": "pattern = \"IIIDDDIDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDIDDDDDDID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IDDDDDD\"",
        "output": "18765432"
      },
      {
        "input": "pattern = \"IDII\"",
        "output": "13245"
      },
      {
        "input": "pattern = \"DDDDDDII\"",
        "output": "765432189"
      },
      {
        "input": "pattern = \"IIIDDDDI\"",
        "output": "123876549"
      },
      {
        "input": "pattern = \"IDDDIDID\"",
        "output": "154327698"
      },
      {
        "input": "pattern = \"IIIIIDDI\"",
        "output": "123458769"
      },
      {
        "input": "pattern = \"DDDDDD\"",
        "output": "7654321"
      },
      {
        "input": "pattern = \"IIDDDIDDDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIIIIDDD\"",
        "output": "123459876"
      },
      {
        "input": "pattern = \"IDIDDDIDID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIIIIIIID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDDDDDDDDDDID\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIIIIDDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDDDIID\"",
        "output": "54321687"
      },
      {
        "input": "pattern = \"IDDDIIDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"IIIDDDDDDDDDD\"",
        "output": "None"
      },
      {
        "input": "pattern = \"DDIIDDID\"",
        "output": "321476598"
      },
      {
        "input": "pattern = \"IIDDDDDD\"",
        "output": "129876543"
      },
      {
        "input": "pattern = \"IIDDDII\"",
        "output": "12654378"
      },
      {
        "input": "pattern = \"DDIIDIDD\"",
        "output": "321465987"
      },
      {
        "input": "pattern = \"IIDDIIDD\"",
        "output": "125436987"
      },
      {
        "input": "pattern = \"IIIIIIII\"",
        "output": "123456789"
      },
      {
        "input": "pattern = \"IIIDDDD\"",
        "output": "12387654"
      },
      {
        "input": "pattern = \"DDIID\"",
        "output": "321465"
      }
    ]
  },
  {
    "id": 3207,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array"
    ],
    "problemDescription": "You are given an integer array enemyEnergies denoting the energy values of various enemies.\nYou are also given an integer currentEnergy denoting the amount of energy you have initially.\nYou start with 0 points, and all the enemies are unmarked initially.\nYou can perform either of the following operations zero or multiple times to gain points:\n\nChoose an unmarked enemy, i, such that currentEnergy >= enemyEnergies[i]. By choosing this option:\n\n\t\nYou gain 1 point.\nYour energy is reduced by the enemy's energy, i.e. currentEnergy = currentEnergy - enemyEnergies[i].\n\n\nIf you have at least 1 point, you can choose an unmarked enemy, i. By choosing this option:\n\t\nYour energy increases by the enemy's energy, i.e. currentEnergy = currentEnergy + enemyEnergies[i].\nThe enemy i is marked.\n\n\n\nReturn an integer denoting the maximum points you can get in the end by optimally performing operations.\n\u00a0\nExample 1:\n\nInput: enemyEnergies = [3,2,2], currentEnergy = 2\nOutput: 3\nExplanation:\nThe following operations can be performed to get 3 points, which is the maximum:\n\nFirst operation on enemy 1: points increases by 1, and currentEnergy decreases by 2. So, points = 1, and currentEnergy = 0.\nSecond operation on enemy 0: currentEnergy increases by 3, and enemy 0 is marked. So, points = 1, currentEnergy = 3, and marked enemies = [0].\nFirst operation on enemy 2: points increases by 1, and currentEnergy decreases by 2. So, points = 2, currentEnergy = 1, and marked enemies = [0].\nSecond operation on enemy 2: currentEnergy increases by 2, and enemy 2 is marked. So, points = 2, currentEnergy = 3, and marked enemies = [0, 2].\nFirst operation on enemy 1: points increases by 1, and currentEnergy decreases by 2. So, points = 3, currentEnergy = 1, and marked enemies = [0, 2].\n\n\nExample 2:\n\nInput: enemyEnergies = [2], currentEnergy = 10\nOutput: 5\nExplanation: \nPerforming the first operation 5 times on enemy 0 results in the maximum number of points.\n\n\u00a0\nConstraints:\n\n1 <= enemyEnergies.length <= 105\n1 <= enemyEnergies[i] <= 109\n0 <= currentEnergy <= 109\n\n",
    "starterCode": "class Solution:\n    def maximumPoints(self, enemyEnergies: List[int], currentEnergy: int) -> int:\n        ",
    "testCases": [
      {
        "input": "enemyEnergies = [1,1,1,1,1], currentEnergy = 1",
        "output": "5"
      },
      {
        "input": "enemyEnergies = [1,1000000000,1], currentEnergy = 1000000001",
        "output": "2000000002"
      },
      {
        "input": "enemyEnergies = [5,5,5,5,5], currentEnergy = 15",
        "output": "7"
      },
      {
        "input": "enemyEnergies = [2], currentEnergy = 10",
        "output": "5"
      },
      {
        "input": "enemyEnergies = [1], currentEnergy = 0",
        "output": "0"
      },
      {
        "input": "enemyEnergies = [5,5,5,5,5,5,5,5,5,5], currentEnergy = 25",
        "output": "14"
      },
      {
        "input": "enemyEnergies = [10,9,8,7,6,5,4,3,2,1], currentEnergy = 55",
        "output": "109"
      },
      {
        "input": "enemyEnergies = [1,2,3,4,5,6,7,8,9,10], currentEnergy = 55",
        "output": "109"
      },
      {
        "input": "enemyEnergies = [1,2,3,4,5], currentEnergy = 15",
        "output": "29"
      },
      {
        "input": "enemyEnergies = [3,2,2], currentEnergy = 2",
        "output": "3"
      },
      {
        "input": "enemyEnergies = [1,1,1,1,1,1,1,1,1,1], currentEnergy = 5",
        "output": "14"
      },
      {
        "input": "enemyEnergies = [10,20,30], currentEnergy = 5",
        "output": "0"
      },
      {
        "input": "enemyEnergies = [1000000000], currentEnergy = 1000000000",
        "output": "1"
      },
      {
        "input": "enemyEnergies = [10,10,10,10,10], currentEnergy = 50",
        "output": "9"
      },
      {
        "input": "enemyEnergies = [5,4,3,2,1], currentEnergy = 15",
        "output": "29"
      },
      {
        "input": "enemyEnergies = [1,1,1,1,1], currentEnergy = 5",
        "output": "9"
      },
      {
        "input": "enemyEnergies = [10,9,8,7,6,5,4,3,2,1], currentEnergy = 5",
        "output": "59"
      },
      {
        "input": "enemyEnergies = [1,2,3,4,5,6,7,8,9,10], currentEnergy = 1",
        "output": "55"
      },
      {
        "input": "enemyEnergies = [1,2,3,4,5], currentEnergy = 10",
        "output": "24"
      },
      {
        "input": "enemyEnergies = [10,20,30], currentEnergy = 15",
        "output": "6"
      },
      {
        "input": "enemyEnergies = [10, 20, 30, 40, 50], currentEnergy = 100",
        "output": "24"
      },
      {
        "input": "enemyEnergies = [100, 200, 300, 400, 500], currentEnergy = 150",
        "output": "15"
      },
      {
        "input": "enemyEnergies = [100, 200, 300, 400, 500], currentEnergy = 100",
        "output": "15"
      },
      {
        "input": "enemyEnergies = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], currentEnergy = 10",
        "output": "53"
      },
      {
        "input": "enemyEnergies = [100, 200, 300, 400, 500], currentEnergy = 250",
        "output": "16"
      },
      {
        "input": "enemyEnergies = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], currentEnergy = 100",
        "output": "219"
      },
      {
        "input": "enemyEnergies = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], currentEnergy = 10",
        "output": "64"
      },
      {
        "input": "enemyEnergies = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], currentEnergy = 99",
        "output": "18"
      },
      {
        "input": "enemyEnergies = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], currentEnergy = 10",
        "output": "39"
      },
      {
        "input": "enemyEnergies = [100, 200, 300, 400, 500], currentEnergy = 1000",
        "output": "24"
      },
      {
        "input": "enemyEnergies = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], currentEnergy = 100",
        "output": "29"
      },
      {
        "input": "enemyEnergies = [30, 20, 10, 5, 2, 1], currentEnergy = 20",
        "output": "87"
      },
      {
        "input": "enemyEnergies = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], currentEnergy = 55",
        "output": "59"
      },
      {
        "input": "enemyEnergies = [1, 10, 100, 1000, 10000], currentEnergy = 5000",
        "output": "16110"
      },
      {
        "input": "enemyEnergies = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], currentEnergy = 15",
        "output": "29"
      },
      {
        "input": "enemyEnergies = [9, 8, 7, 6, 5, 4, 3, 2, 1], currentEnergy = 15",
        "output": "59"
      },
      {
        "input": "enemyEnergies = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], currentEnergy = 10",
        "output": "17"
      },
      {
        "input": "enemyEnergies = [1, 10, 100, 1000, 10000], currentEnergy = 10000",
        "output": "21110"
      },
      {
        "input": "enemyEnergies = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], currentEnergy = 1",
        "output": "55"
      },
      {
        "input": "enemyEnergies = [2, 3, 5, 7, 11, 13, 17, 19], currentEnergy = 50",
        "output": "62"
      },
      {
        "input": "enemyEnergies = [1000000000, 500000000, 250000000], currentEnergy = 1000000000",
        "output": "10"
      },
      {
        "input": "enemyEnergies = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0], currentEnergy = 45",
        "output": "Error: integer division or modulo by zero"
      },
      {
        "input": "enemyEnergies = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], currentEnergy = 15",
        "output": "44"
      },
      {
        "input": "enemyEnergies = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], currentEnergy = 100",
        "output": "19"
      },
      {
        "input": "enemyEnergies = [5, 3, 1, 2, 4, 6], currentEnergy = 3",
        "output": "23"
      },
      {
        "input": "enemyEnergies = [9, 8, 7, 6, 5, 4, 3, 2, 1], currentEnergy = 45",
        "output": "89"
      },
      {
        "input": "enemyEnergies = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], currentEnergy = 5",
        "output": "14"
      },
      {
        "input": "enemyEnergies = [5, 4, 3, 2, 1], currentEnergy = 15",
        "output": "29"
      },
      {
        "input": "enemyEnergies = [5, 3, 8, 2, 10], currentEnergy = 7",
        "output": "16"
      },
      {
        "input": "enemyEnergies = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], currentEnergy = 0",
        "output": "0"
      },
      {
        "input": "enemyEnergies = [5, 3, 7, 2, 8, 1, 4], currentEnergy = 10",
        "output": "39"
      },
      {
        "input": "enemyEnergies = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], currentEnergy = 27",
        "output": "18"
      },
      {
        "input": "enemyEnergies = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], currentEnergy = 15",
        "output": "58"
      },
      {
        "input": "enemyEnergies = [5, 3, 8, 6, 2, 7], currentEnergy = 10",
        "output": "19"
      },
      {
        "input": "enemyEnergies = [1, 3, 5, 7, 9], currentEnergy = 20",
        "output": "44"
      },
      {
        "input": "enemyEnergies = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], currentEnergy = 25",
        "output": "66"
      },
      {
        "input": "enemyEnergies = [10, 5, 15, 20, 25, 30, 35, 40, 45, 50], currentEnergy = 50",
        "output": "64"
      },
      {
        "input": "enemyEnergies = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], currentEnergy = 10",
        "output": "10"
      },
      {
        "input": "enemyEnergies = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], currentEnergy = 50",
        "output": "59"
      },
      {
        "input": "enemyEnergies = [5, 3, 6, 2, 8, 1], currentEnergy = 10",
        "output": "34"
      },
      {
        "input": "enemyEnergies = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], currentEnergy = 10",
        "output": "109"
      },
      {
        "input": "enemyEnergies = [1000000000, 500000000, 250000000, 125000000, 62500000, 31250000, 15625000, 7812500, 3906250, 1953125], currentEnergy = 500000000",
        "output": "1278"
      },
      {
        "input": "enemyEnergies = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], currentEnergy = 2500",
        "output": "79"
      },
      {
        "input": "enemyEnergies = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], currentEnergy = 10",
        "output": "55"
      },
      {
        "input": "enemyEnergies = [100, 200, 300, 400, 500], currentEnergy = 500",
        "output": "19"
      },
      {
        "input": "enemyEnergies = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], currentEnergy = 1024",
        "output": "3070"
      },
      {
        "input": "enemyEnergies = [9, 7, 5, 3, 1], currentEnergy = 15",
        "output": "39"
      },
      {
        "input": "enemyEnergies = [1000000000, 500000000, 250000000, 125000000, 62500000], currentEnergy = 1000000000",
        "output": "46"
      },
      {
        "input": "enemyEnergies = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], currentEnergy = 5",
        "output": "0"
      },
      {
        "input": "enemyEnergies = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], currentEnergy = 50",
        "output": "109"
      },
      {
        "input": "enemyEnergies = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], currentEnergy = 15",
        "output": "69"
      },
      {
        "input": "enemyEnergies = [50, 25, 75, 100, 200, 300, 400], currentEnergy = 100",
        "output": "49"
      },
      {
        "input": "enemyEnergies = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], currentEnergy = 21",
        "output": "12"
      },
      {
        "input": "enemyEnergies = [50, 25, 75, 100, 200, 150], currentEnergy = 125",
        "output": "28"
      },
      {
        "input": "enemyEnergies = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], currentEnergy = 1",
        "output": "0"
      },
      {
        "input": "enemyEnergies = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], currentEnergy = 10",
        "output": "14"
      },
      {
        "input": "enemyEnergies = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], currentEnergy = 1",
        "output": "55"
      },
      {
        "input": "enemyEnergies = [5, 3, 8, 1, 9], currentEnergy = 10",
        "output": "35"
      },
      {
        "input": "enemyEnergies = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], currentEnergy = 100",
        "output": "309"
      },
      {
        "input": "enemyEnergies = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], currentEnergy = 25",
        "output": "24"
      },
      {
        "input": "enemyEnergies = [1, 2, 3, 4, 5], currentEnergy = 15",
        "output": "29"
      },
      {
        "input": "enemyEnergies = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], currentEnergy = 100",
        "output": "113"
      },
      {
        "input": "enemyEnergies = [9, 8, 7, 6, 5, 4, 3, 2, 1], currentEnergy = 20",
        "output": "64"
      },
      {
        "input": "enemyEnergies = [1000, 500, 250, 125, 62, 31, 15, 7, 3, 1], currentEnergy = 1000",
        "output": "2993"
      },
      {
        "input": "enemyEnergies = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], currentEnergy = 10",
        "output": "64"
      },
      {
        "input": "enemyEnergies = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20], currentEnergy = 100",
        "output": "14"
      },
      {
        "input": "enemyEnergies = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], currentEnergy = 1023",
        "output": "2045"
      },
      {
        "input": "enemyEnergies = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], currentEnergy = 55",
        "output": "109"
      },
      {
        "input": "enemyEnergies = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], currentEnergy = 1024",
        "output": "2046"
      },
      {
        "input": "enemyEnergies = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], currentEnergy = 100",
        "output": "119"
      },
      {
        "input": "enemyEnergies = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71], currentEnergy = 100",
        "output": "368"
      },
      {
        "input": "enemyEnergies = [5, 5, 5, 5, 5], currentEnergy = 15",
        "output": "7"
      },
      {
        "input": "enemyEnergies = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], currentEnergy = 50",
        "output": "79"
      },
      {
        "input": "enemyEnergies = [10, 20, 30, 40, 50], currentEnergy = 30",
        "output": "17"
      },
      {
        "input": "enemyEnergies = [1, 2, 3, 4, 5], currentEnergy = 10",
        "output": "24"
      },
      {
        "input": "enemyEnergies = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], currentEnergy = 20",
        "output": "63"
      },
      {
        "input": "enemyEnergies = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], currentEnergy = 100",
        "output": "64"
      },
      {
        "input": "enemyEnergies = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], currentEnergy = 10",
        "output": "19"
      },
      {
        "input": "enemyEnergies = [9, 8, 7, 6, 5, 4, 3, 2, 1], currentEnergy = 5",
        "output": "49"
      },
      {
        "input": "enemyEnergies = [1000000000, 1000000000, 1000000000], currentEnergy = 1500000000",
        "output": "3"
      },
      {
        "input": "enemyEnergies = [100, 200, 300], currentEnergy = 1000",
        "output": "15"
      },
      {
        "input": "enemyEnergies = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], currentEnergy = 500",
        "output": "104"
      },
      {
        "input": "enemyEnergies = [3, 2, 2, 4, 1, 5], currentEnergy = 6",
        "output": "22"
      },
      {
        "input": "enemyEnergies = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], currentEnergy = 100",
        "output": "199"
      },
      {
        "input": "enemyEnergies = [10, 15, 20, 25, 30, 35, 40, 45, 50], currentEnergy = 100",
        "output": "36"
      }
    ]
  },
  {
    "id": 1966,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "problemDescription": "Consider a function that implements an algorithm similar to Binary Search. The function has two input parameters: sequence is a sequence of integers, and target is an integer value. The purpose of the function is to find if the target exists in the sequence.\nThe pseudocode of the function is as follows:\n\nfunc(sequence, target)\n  while sequence is not empty\n    randomly choose an element from sequence as the pivot\n    if pivot = target, return true\n    else if pivot < target, remove pivot and all elements to its left from the sequence\n    else, remove pivot and all elements to its right from the sequence\n  end while\n  return false\n\nWhen the sequence is sorted, the function works correctly for all values. When the sequence is not sorted, the function does not work for all values, but may still work for some values.\nGiven an integer array nums, representing the sequence, that contains unique numbers and may or may not be sorted, return the number of values that are guaranteed to be found using the function, for every possible pivot selection.\n\u00a0\nExample 1:\n\nInput: nums = [7]\nOutput: 1\nExplanation: \nSearching for value 7 is guaranteed to be found.\nSince the sequence has only one element, 7 will be chosen as the pivot. Because the pivot equals the target, the function will return true.\n\nExample 2:\n\nInput: nums = [-1,5,2]\nOutput: 1\nExplanation: \nSearching for value -1 is guaranteed to be found.\nIf -1 was chosen as the pivot, the function would return true.\nIf 5 was chosen as the pivot, 5 and 2 would be removed. In the next loop, the sequence would have only -1 and the function would return true.\nIf 2 was chosen as the pivot, 2 would be removed. In the next loop, the sequence would have -1 and 5. No matter which number was chosen as the next pivot, the function would find -1 and return true.\n\nSearching for value 5 is NOT guaranteed to be found.\nIf 2 was chosen as the pivot, -1, 5 and 2 would be removed. The sequence would be empty and the function would return false.\n\nSearching for value 2 is NOT guaranteed to be found.\nIf 5 was chosen as the pivot, 5 and 2 would be removed. In the next loop, the sequence would have only -1 and the function would return false.\n\nBecause only -1 is guaranteed to be found, you should return 1.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n-105 <= nums[i] <= 105\nAll the values of nums are unique.\n\n\u00a0\nFollow-up: If nums has duplicates, would you modify your algorithm? If so, how?\n",
    "starterCode": "class Solution:\n    def binarySearchableNumbers(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,3,2,4,5]",
        "output": "3"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10]",
        "output": "0"
      },
      {
        "input": "nums = [9,7,5,3,1]",
        "output": "0"
      },
      {
        "input": "nums = [2,1]",
        "output": "0"
      },
      {
        "input": "nums = [20,18,16,14,12,10,8,6,4,2]",
        "output": "0"
      },
      {
        "input": "nums = [1,3,5,7,9]",
        "output": "5"
      },
      {
        "input": "nums = [0,-1,-2,-3,-4,-5,-6,-7,-8,-9]",
        "output": "0"
      },
      {
        "input": "nums = [10,20,15,30,25,40]",
        "output": "2"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,5,4,6,7,8,9,10]",
        "output": "8"
      },
      {
        "input": "nums = [10,5,15,3,7,12,18]",
        "output": "1"
      },
      {
        "input": "nums = [-1,5,2]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19]",
        "output": "10"
      },
      {
        "input": "nums = [1,10,3,9,5,8,6,7,4,2]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [1,5,3,4,2]",
        "output": "1"
      },
      {
        "input": "nums = [10,5,15,3,7,18]",
        "output": "1"
      },
      {
        "input": "nums = [10,20,15,30,25,40,35]",
        "output": "1"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10]",
        "output": "0"
      },
      {
        "input": "nums = [3,1,4,2]",
        "output": "0"
      },
      {
        "input": "nums = [1,100,2,99,3,98,4,97,5,96,6,95,7,94,8,93,9,92,10,91]",
        "output": "1"
      },
      {
        "input": "nums = [20,10,30,5,15,25,35,0,2,4,6,8,12,14,16,18,22,24,26,28,32,34,36]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,2,4,5,6]",
        "output": "4"
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [1,2]",
        "output": "2"
      },
      {
        "input": "nums = [7]",
        "output": "1"
      },
      {
        "input": "nums = [3,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "50"
      },
      {
        "input": "nums = [3, 1, 2, 4, 5, 6, 7]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [100, 50, 150, 25, 75, 125, 175, 10, 40, 60, 80, 110, 140, 160, 190, 200]",
        "output": "2"
      },
      {
        "input": "nums = [100000, -100000, 0, 50000, -50000]",
        "output": "0"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "37"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [5,1,2,3,4,6,7,8,9,10]",
        "output": "5"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "15"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 10]",
        "output": "2"
      },
      {
        "input": "nums = [3,2,1,4,5,6,7,8,9,10]",
        "output": "7"
      },
      {
        "input": "nums = [5, 1, 9, 3, 7, 2, 8, 4, 6, 10]",
        "output": "1"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 12, 13, 14, 15]",
        "output": "5"
      },
      {
        "input": "nums = [20, 30, 10, 40, 50, 60, 5, 15, 25, 35, 45, 55, 65]",
        "output": "1"
      },
      {
        "input": "nums = [5, 1, 9, 2, 8, 3, 7, 4, 6, 10]",
        "output": "1"
      },
      {
        "input": "nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10]",
        "output": "4"
      },
      {
        "input": "nums = [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "0"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [9, 4, 2, 1, 3, 6, 5, 7, 8]",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 25, 26, 27, 28, 29, 15, 16, 17, 18, 19, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "15"
      },
      {
        "input": "nums = [5,3,8,6,7,2,4,1,9]",
        "output": "1"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "nums = [1, 5, 3, 7, 6, 11, 10, 13, 12, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 26]",
        "output": "2"
      },
      {
        "input": "nums = [1, 5, 2, 3, 6, 4, 7, 8, 9, 10]",
        "output": "5"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110]",
        "output": "11"
      },
      {
        "input": "nums = [50, 10, 30, 20, 40, 60, 50, 70, 80, 90]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,3,4,5,10,6,7,8,9]",
        "output": "5"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 30, 29]",
        "output": "0"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 7, 4, 1, 9]",
        "output": "1"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 950, 900, 850, 800, 750, 700, 650, 600, 550, 500, 450, 400, 350, 300, 250, 200, 150, 100, 50, 0, -50, -100, -150, -200, -250, -300, -350, -400, -450, -500, -550, -600, -650, -700, -750, -800, -850, -900, -950]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10]",
        "output": "1"
      },
      {
        "input": "nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [20, 15, 25, 10, 30, 5, 27, 35, 17, 18, 19, 32, 31, 33, 34, 36, 37, 38, 39, 40]",
        "output": "5"
      },
      {
        "input": "nums = [1, 5, 3, 7, 9, 11, 13, 15, 17, 19]",
        "output": "8"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "25"
      },
      {
        "input": "nums = [1, 2, 4, 3, 5, 7, 6, 8, 10, 9]",
        "output": "4"
      },
      {
        "input": "nums = [10, 5, 3, 1, 2, 8, 6, 4, 7, 9]",
        "output": "0"
      },
      {
        "input": "nums = [5, 8, 6, 7, 9, 2, 1, 3, 4, 10]",
        "output": "1"
      },
      {
        "input": "nums = [5, 9, 3, 7, 1, 8, 2, 6, 4, 10]",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "40"
      },
      {
        "input": "nums = [3, 1, 4, 2, 5]",
        "output": "1"
      },
      {
        "input": "nums = [100, 200, 150, 300, 250, 400, 350, 500, 450, 600]",
        "output": "2"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "nums = [9, 5, 7, 3, 8, 6, 4, 2, 1, 10, 11, 12, 13]",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]",
        "output": "15"
      },
      {
        "input": "nums = [30, 20, 10, 15, 25, 5, 40, 50, 60, 70]",
        "output": "4"
      },
      {
        "input": "nums = [10, 5, 15, 3, 7, 18, 25, 2, 8, 13, 20, 28, 1, 4, 6, 9, 11, 14, 16, 17, 19, 21, 22, 23, 24, 26, 27, 29, 30]",
        "output": "2"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "0"
      },
      {
        "input": "nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]",
        "output": "12"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "30"
      },
      {
        "input": "nums = [1,2,3,10,5,6,7,8,9,4]",
        "output": "3"
      },
      {
        "input": "nums = [30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 15, 25, 35, 45, 55]",
        "output": "2"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "20"
      },
      {
        "input": "nums = [25, 20, 26, 15, 21, 30, 22, 27, 23, 28, 24, 29, 10, 16, 35, 12, 17, 40, 13, 18]",
        "output": "0"
      },
      {
        "input": "nums = [16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]",
        "output": "1"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 2, 3]",
        "output": "1"
      },
      {
        "input": "nums = [100000, -100000, 50000, 25000, -50000, 75000]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10]",
        "output": "8"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [1,3,5,7,9,2,4,6,8,10]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 2, 4, 6, 5, 8, 7, 10, 9]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 10, 9]",
        "output": "8"
      },
      {
        "input": "nums = [1,3,2,4,6,5,7,9,8,10]",
        "output": "4"
      },
      {
        "input": "nums = [5, 3, 8, 1, 9, 7, 2, 6, 4, 10]",
        "output": "1"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]",
        "output": "0"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8]",
        "output": "1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "2"
      },
      {
        "input": "nums = [42, 23, 65, 12, 34, 56, 78, 90, 12, 34, 56, 78, 90]",
        "output": "1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]",
        "output": "1"
      },
      {
        "input": "nums = [3, 1, 2, 5, 4, 7, 6, 9, 8, 11, 10]",
        "output": "0"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]",
        "output": "1"
      },
      {
        "input": "nums = [10, 20, 15, 30, 25, 40, 35, 50]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 10, 9, 8, 7, 6]",
        "output": "5"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105]",
        "output": "15"
      },
      {
        "input": "nums = [1, 3, 2, 4, 5]",
        "output": "3"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 10, 6, 7, 8, 9]",
        "output": "5"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]",
        "output": "0"
      },
      {
        "input": "nums = [100, 50, 25, 75, 125, 10, 60, 40, 90, 130, 30, 80, 110, 70, 140, 20, 150, 160, 105, 170]",
        "output": "1"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 6, 7, 8, 9, 10]",
        "output": "5"
      },
      {
        "input": "nums = [5,3,8,6,2,7,4,1,9]",
        "output": "1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "2"
      },
      {
        "input": "nums = [10, 5, 1, 8, 12, 15, 7, 9, 14, 3, 2, 11, 6]",
        "output": "0"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]",
        "output": "11"
      },
      {
        "input": "nums = [20,15,25,10,18,22,30,5,8]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 5, 4, 3, 6, 7, 8, 9, 10]",
        "output": "7"
      },
      {
        "input": "nums = [5,4,3,2,1,10,9,8,7,6]",
        "output": "0"
      },
      {
        "input": "nums = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [4,3,2,1,5,6,7,8,9,10]",
        "output": "6"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "nums = [33, 21, 45, 19, 50, 27, 39, 40, 25, 31, 29, 42]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]",
        "output": "2"
      },
      {
        "input": "nums = [15, 10, 20, 5, 12, 18, 3, 7, 17, 25]",
        "output": "1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]",
        "output": "12"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]",
        "output": "0"
      },
      {
        "input": "nums = [100, 1, 101, 2, 102, 3, 103, 4, 104, 5]",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "15"
      },
      {
        "input": "nums = [10,8,6,4,2,1,3,5,7,9]",
        "output": "0"
      }
    ]
  },
  {
    "id": 1786,
    "difficulty": "Medium",
    "tags": [
      "Graph",
      "Topological Sort",
      "Dynamic Programming",
      "Shortest Path",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "There is an undirected weighted connected graph. You are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, and an array edges where each edges[i] = [ui, vi, weighti] denotes that there is an edge between nodes ui and vi with weight equal to weighti.\nA path from node start to node end is a sequence of nodes [z0, z1, z2, ..., zk] such that z0 = start and zk = end and there is an edge between zi and zi+1 where 0 <= i <= k-1.\nThe distance of a path is the sum of the weights on the edges of the path. Let distanceToLastNode(x) denote the shortest distance of a path between node n and node x. A restricted path is a path that also satisfies that distanceToLastNode(zi) > distanceToLastNode(zi+1) where 0 <= i <= k-1.\nReturn the number of restricted paths from node 1 to node n. Since that number may be too large, return it modulo 109 + 7.\n\u00a0\nExample 1:\n\n\nInput: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]\nOutput: 3\nExplanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are:\n1) 1 --> 2 --> 5\n2) 1 --> 2 --> 3 --> 5\n3) 1 --> 3 --> 5\n\nExample 2:\n\n\nInput: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]\nOutput: 1\nExplanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --> 3 --> 7.\n\n\u00a0\nConstraints:\n\n1 <= n <= 2 * 104\nn - 1 <= edges.length <= 4 * 104\nedges[i].length == 3\n1 <= ui, vi <= n\nui != vi\n1 <= weighti <= 105\nThere is at most one edge between any two nodes.\nThere is at least one path between any two nodes.\n\n",
    "starterCode": "class Solution:\n    def countRestrictedPaths(self, n: int, edges: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 4, edges = [[1,2,1],[2,3,2],[3,4,3],[4,1,4]]",
        "output": "1"
      },
      {
        "input": "n = 3, edges = [[1,2,5],[1,3,6],[2,3,1]]",
        "output": "2"
      },
      {
        "input": "n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]",
        "output": "1"
      },
      {
        "input": "n = 6, edges = [[1,2,2],[1,3,4],[2,4,3],[3,4,1],[4,5,2],[5,6,1]]",
        "output": "2"
      },
      {
        "input": "n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]",
        "output": "3"
      },
      {
        "input": "n = 25, edges = [[1,2,1],[2,3,1],[3,4,1],[4,5,1],[5,6,1],[6,7,1],[7,8,1],[8,9,1],[9,10,1],[10,11,1],[11,12,1],[12,13,1],[13,14,1],[14,15,1],[15,16,1],[16,17,1],[17,18,1],[18,19,1],[19,20,1],[20,21,1],[21,22,1],[22,23,1],[23,24,1],[24,25,1],[1,25,5],[2,24,5],[3,23,5],[4,22,5],[5,21,5],[6,20,5],[7,19,5],[8,18,5],[9,17,5],[10,16,5],[11,15,5],[12,14,5],[13,13,5]]",
        "output": "1"
      },
      {
        "input": "n = 15, edges = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9],[10,11,10],[11,12,11],[12,13,12],[13,14,13],[14,15,14],[1,15,15]]",
        "output": "1"
      },
      {
        "input": "n = 12, edges = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9],[10,11,10],[11,12,11],[1,3,12],[2,4,13],[3,5,14],[4,6,15],[5,7,16],[6,8,17],[7,9,18],[8,10,19],[9,11,20],[10,12,21],[1,4,22],[2,5,23],[3,6,24],[4,7,25],[5,8,26],[6,9,27],[7,10,28],[8,11,29],[9,12,30]]",
        "output": "504"
      },
      {
        "input": "n = 10, edges = [[1,2,5],[2,3,4],[3,4,3],[4,5,2],[5,6,1],[6,7,6],[7,8,5],[8,9,4],[9,10,3]]",
        "output": "1"
      },
      {
        "input": "n = 20, edges = [[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19],[19,20,20],[1,20,10],[2,19,10],[3,18,10],[4,17,10],[5,16,10],[6,15,10],[7,14,10],[8,13,10],[9,12,10],[10,11,10]]",
        "output": "1"
      },
      {
        "input": "n = 10, edges = [[1,2,1],[1,3,4],[2,4,2],[3,4,1],[4,5,3],[5,6,2],[6,7,1],[7,8,2],[8,9,3],[9,10,1]]",
        "output": "2"
      },
      {
        "input": "n = 8, edges = [[1,2,5],[2,3,4],[3,4,3],[4,5,2],[5,6,1],[6,7,6],[7,8,7],[8,1,8],[2,5,9],[3,6,10],[4,7,11],[1,8,12]]",
        "output": "2"
      },
      {
        "input": "n = 10, edges = [[1,2,2],[2,3,3],[3,4,1],[4,5,2],[5,6,1],[6,7,3],[7,8,2],[8,9,1],[9,10,2],[1,10,5]]",
        "output": "1"
      },
      {
        "input": "n = 50, edges = [[1,2,1000],[2,3,2000],[3,4,3000],[4,5,4000],[5,6,5000],[6,7,6000],[7,8,7000],[8,9,8000],[9,10,9000],[10,11,10000],[11,12,11000],[12,13,12000],[13,14,13000],[14,15,14000],[15,16,15000],[16,17,16000],[17,18,17000],[18,19,18000],[19,20,19000],[20,21,20000],[21,22,21000],[22,23,22000],[23,24,23000],[24,25,24000],[25,26,25000],[26,27,26000],[27,28,27000],[28,29,28000],[29,30,29000],[30,31,30000],[31,32,31000],[32,33,32000],[33,34,33000],[34,35,34000],[35,36,35000],[36,37,36000],[37,38,37000],[38,39,38000],[39,40,39000],[40,41,40000],[41,42,41000],[42,43,42000],[43,44,43000],[44,45,44000],[45,46,45000],[46,47,46000],[47,48,47000],[48,49,48000],[49,50,49000]]",
        "output": "1"
      },
      {
        "input": "n = 15, edges = [[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45],[9,10,50],[10,11,55],[11,12,60],[12,13,65],[13,14,70],[14,15,75]]",
        "output": "1"
      },
      {
        "input": "n = 15, edges = [[1,2,5],[1,3,3],[2,4,7],[3,4,2],[4,5,5],[5,6,4],[6,7,8],[7,8,2],[8,9,1],[9,10,2],[10,11,3],[11,12,1],[12,13,5],[13,14,4],[14,15,6]]",
        "output": "1"
      },
      {
        "input": "n = 8, edges = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[1,3,8],[2,4,9],[3,5,10],[4,6,11],[5,7,12],[6,8,13]]",
        "output": "21"
      },
      {
        "input": "n = 10, edges = [[1,2,4],[1,3,3],[2,4,2],[3,4,1],[4,5,5],[5,6,3],[6,7,2],[7,8,1],[8,9,4],[9,10,5],[2,5,3],[3,6,4],[5,8,2],[6,9,1]]",
        "output": "4"
      },
      {
        "input": "n = 15, edges = [[1,2,2],[1,3,3],[2,4,5],[3,5,4],[4,6,1],[5,7,2],[6,8,3],[7,9,4],[8,10,5],[9,11,1],[10,12,2],[11,13,3],[12,14,4],[13,15,5],[4,7,2],[5,8,1],[6,9,4],[7,10,3],[8,11,2],[9,12,1],[10,13,4],[11,14,5],[12,15,1]]",
        "output": "7"
      },
      {
        "input": "n = 30, edges = [[1,2,5],[2,3,4],[3,4,1],[4,5,3],[5,6,2],[6,7,4],[7,8,3],[8,9,5],[9,10,4],[10,11,2],[11,12,1],[12,13,3],[13,14,2],[14,15,4],[15,16,1],[16,17,2],[17,18,3],[18,19,2],[19,20,1],[20,21,5],[21,22,4],[22,23,3],[23,24,2],[24,25,4],[25,26,3],[26,27,5],[27,28,1],[28,29,2],[29,30,3],[30,1,4]]",
        "output": "1"
      },
      {
        "input": "n = 25, edges = [[1,2,20],[1,3,10],[2,4,5],[2,5,15],[3,6,1],[3,7,20],[4,8,25],[4,9,1],[5,9,30],[5,10,1],[6,11,10],[6,12,25],[7,12,15],[7,13,1],[8,14,20],[9,14,5],[10,14,10],[11,15,25],[11,16,1],[12,16,30],[12,17,5],[13,17,10],[14,18,15],[15,18,1],[16,19,20],[17,19,30],[18,20,10],[19,20,25],[20,21,1],[21,22,5],[22,23,10],[23,24,15],[24,25,20]]",
        "output": "2"
      },
      {
        "input": "n = 30, edges = [[1,2,100],[2,3,200],[3,4,300],[4,5,400],[5,6,500],[6,7,600],[7,8,700],[8,9,800],[9,10,900],[10,11,1000],[11,12,1100],[12,13,1200],[13,14,1300],[14,15,1400],[15,16,1500],[16,17,1600],[17,18,1700],[18,19,1800],[19,20,1900],[20,21,2000],[21,22,2100],[22,23,2200],[23,24,2300],[24,25,2400],[25,26,2500],[26,27,2600],[27,28,2700],[28,29,2800],[29,30,2900]]",
        "output": "1"
      },
      {
        "input": "n = 8, edges = [[1,2,5],[1,3,6],[2,4,2],[3,5,4],[4,5,3],[4,6,1],[5,7,2],[6,8,3],[7,8,1],[2,3,4],[4,7,6],[5,6,2],[3,8,5],[2,6,3]]",
        "output": "8"
      },
      {
        "input": "n = 20, edges = [[1,2,2],[1,3,1],[2,4,3],[2,5,4],[3,6,5],[3,7,6],[4,8,7],[4,9,8],[5,10,9],[5,11,10],[6,12,11],[6,13,12],[7,14,13],[7,15,14],[8,16,15],[9,17,16],[10,18,17],[11,19,18],[12,20,19],[13,18,20],[14,19,11],[15,20,12],[16,17,13],[17,18,14],[18,19,15],[19,20,16]]",
        "output": "2"
      },
      {
        "input": "n = 15, edges = [[1,2,10],[2,3,5],[3,4,15],[4,5,20],[5,6,25],[6,7,30],[7,8,35],[8,9,40],[9,10,45],[10,11,50],[11,12,55],[12,13,60],[13,14,65],[14,15,70],[1,3,5],[2,4,5],[3,5,5],[4,6,5],[5,7,5],[6,8,5],[7,9,5],[8,10,5],[9,11,5],[10,12,5],[11,13,5],[12,14,5],[13,15,5]]",
        "output": "1"
      },
      {
        "input": "n = 10, edges = [[1,2,4],[1,3,2],[2,4,1],[2,5,6],[3,5,3],[4,6,2],[5,6,1],[6,7,5],[6,8,3],[7,9,4],[8,9,2],[9,10,1]]",
        "output": "6"
      },
      {
        "input": "n = 20, edges = [[1,2,2],[1,3,1],[2,4,3],[2,5,4],[3,5,2],[4,6,5],[4,7,6],[5,6,7],[5,8,8],[6,9,1],[7,9,2],[8,10,3],[9,10,4],[10,11,5],[11,12,6],[11,13,7],[12,14,8],[13,14,9],[14,15,10],[15,16,1],[16,17,2],[16,18,3],[17,19,4],[18,19,5],[19,20,6]]",
        "output": "24"
      },
      {
        "input": "n = 20, edges = [[1,2,10],[2,3,9],[3,4,8],[4,5,7],[5,6,6],[6,7,5],[7,8,4],[8,9,3],[9,10,2],[10,11,1],[11,12,2],[12,13,3],[13,14,4],[14,15,5],[15,16,6],[16,17,7],[17,18,8],[18,19,9],[19,20,10],[1,20,15],[2,19,16],[3,18,17],[4,17,18],[5,16,19],[6,15,20]]",
        "output": "1"
      },
      {
        "input": "n = 15, edges = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90],[10,11,100],[11,12,110],[12,13,120],[13,14,130],[14,15,140],[1,3,15],[3,5,25],[5,7,35],[7,9,45],[9,11,55],[11,13,65],[13,15,75],[2,4,25],[4,6,35],[6,8,45],[8,10,55],[10,12,65],[12,14,75],[2,5,30],[5,8,40],[8,11,50],[11,14,60],[3,6,35],[6,9,45],[9,12,55],[12,15,65],[4,7,45],[7,10,55],[10,13,65],[4,8,50],[8,12,60],[8,13,65],[10,14,75],[10,15,80],[5,9,55],[9,13,70],[5,10,60],[10,15,90]]",
        "output": "174"
      },
      {
        "input": "n = 12, edges = [[1,2,5],[1,3,3],[2,4,2],[3,4,1],[4,5,4],[5,6,5],[6,7,4],[7,8,3],[8,9,2],[9,10,1],[10,11,6],[11,12,7]]",
        "output": "2"
      },
      {
        "input": "n = 10, edges = [[1,2,5],[2,3,10],[3,4,15],[4,5,20],[5,6,25],[6,7,30],[7,8,35],[8,9,40],[9,10,45],[1,3,2],[3,5,3],[5,7,4],[7,9,5],[2,4,7],[4,6,8],[6,8,9],[8,10,11],[1,4,6],[4,7,7],[7,10,8]]",
        "output": "3"
      },
      {
        "input": "n = 20, edges = [[1,2,10],[1,3,20],[2,4,15],[3,4,5],[4,5,25],[5,6,10],[6,7,30],[7,8,15],[8,9,5],[9,10,25],[10,11,10],[11,12,30],[12,13,15],[13,14,5],[14,15,25],[15,16,10],[16,17,30],[17,18,15],[18,19,5],[19,20,25]]",
        "output": "2"
      },
      {
        "input": "n = 50, edges = [[1,2,1],[2,3,1],[3,4,1],[4,5,1],[5,6,1],[6,7,1],[7,8,1],[8,9,1],[9,10,1],[10,11,1],[11,12,1],[12,13,1],[13,14,1],[14,15,1],[15,16,1],[16,17,1],[17,18,1],[18,19,1],[19,20,1],[20,21,1],[21,22,1],[22,23,1],[23,24,1],[24,25,1],[25,26,1],[26,27,1],[27,28,1],[28,29,1],[29,30,1],[30,31,1],[31,32,1],[32,33,1],[33,34,1],[34,35,1],[35,36,1],[36,37,1],[37,38,1],[38,39,1],[39,40,1],[40,41,1],[41,42,1],[42,43,1],[43,44,1],[44,45,1],[45,46,1],[46,47,1],[47,48,1],[48,49,1],[49,50,1],[1,50,10],[2,49,10],[3,48,10],[4,47,10],[5,46,10],[6,45,10],[7,44,10],[8,43,10],[9,42,10],[10,41,10],[11,40,10],[12,39,10],[13,38,10],[14,37,10],[15,36,10],[16,35,10],[17,34,10],[18,33,10],[19,32,10],[20,31,10],[21,30,10],[22,29,10],[23,28,10],[24,27,10],[25,26,10]]",
        "output": "1"
      },
      {
        "input": "n = 15, edges = [[1,2,10],[1,3,20],[2,4,5],[2,5,7],[3,5,3],[4,6,2],[4,7,8],[5,7,1],[5,8,6],[6,9,4],[7,9,3],[8,10,1],[9,10,5],[10,11,3],[11,12,4],[12,13,1],[12,14,7],[13,15,2],[14,15,6]]",
        "output": "5"
      },
      {
        "input": "n = 20, edges = [[1,2,1],[2,3,2],[3,4,1],[4,5,3],[5,6,2],[6,7,4],[7,8,1],[8,9,2],[9,10,3],[10,11,2],[11,12,1],[12,13,3],[13,14,2],[14,15,4],[15,16,1],[16,17,2],[17,18,3],[18,19,2],[19,20,1],[20,1,5]]",
        "output": "1"
      },
      {
        "input": "n = 20, edges = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9],[10,11,10],[11,12,11],[12,13,12],[13,14,13],[14,15,14],[15,16,15],[16,17,16],[17,18,17],[18,19,18],[19,20,19],[1,3,3],[3,5,5],[5,7,7],[7,9,9],[9,11,11],[11,13,13],[13,15,15],[15,17,17],[17,19,19],[2,4,4],[4,6,6],[6,8,8],[8,10,10],[10,12,12],[12,14,14],[14,16,16],[16,18,18],[2,5,5],[5,8,8],[8,11,11],[11,14,14],[14,17,17],[3,6,6],[6,9,9],[9,12,12],[12,15,15],[12,16,16],[15,18,18],[4,7,7],[7,10,10],[10,13,13],[10,14,14],[13,16,16],[6,11,11],[11,16,16],[11,17,17],[7,12,12],[12,17,17],[12,18,18]]",
        "output": "494"
      },
      {
        "input": "n = 20, edges = [[1,2,2],[1,3,3],[2,4,1],[2,5,4],[3,6,5],[3,7,7],[4,8,8],[4,9,9],[5,9,2],[5,10,3],[6,11,6],[6,12,10],[7,12,4],[7,13,5],[8,14,3],[9,14,4],[10,14,7],[11,15,1],[11,16,2],[12,16,3],[12,17,8],[13,17,9],[14,18,6],[15,18,5],[16,19,4],[17,19,3],[18,20,10],[19,20,7]]",
        "output": "6"
      },
      {
        "input": "n = 20, edges = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9],[10,11,10],[11,12,11],[12,13,12],[13,14,13],[14,15,14],[15,16,15],[16,17,16],[17,18,17],[18,19,18],[19,20,19]]",
        "output": "1"
      },
      {
        "input": "n = 10, edges = [[1,2,5],[1,3,3],[2,4,2],[2,5,6],[3,4,1],[3,6,4],[4,7,7],[5,7,8],[5,8,2],[6,8,3],[7,9,5],[8,9,6],[8,10,9],[9,10,10]]",
        "output": "2"
      },
      {
        "input": "n = 50, edges = [[1,2,5],[2,3,4],[3,4,1],[4,5,3],[5,6,2],[6,7,4],[7,8,3],[8,9,5],[9,10,4],[10,11,2],[11,12,1],[12,13,3],[13,14,2],[14,15,4],[15,16,1],[16,17,2],[17,18,3],[18,19,2],[19,20,1],[20,21,5],[21,22,4],[22,23,3],[23,24,2],[24,25,4],[25,26,3],[26,27,5],[27,28,1],[28,29,2],[29,30,3],[30,31,4],[31,32,5],[32,33,4],[33,34,3],[34,35,2],[35,36,1],[36,37,2],[37,38,3],[38,39,2],[39,40,1],[40,41,5],[41,42,4],[42,43,3],[43,44,2],[44,45,4],[45,46,3],[46,47,5],[47,48,1],[48,49,2],[49,50,3],[50,1,4]]",
        "output": "1"
      },
      {
        "input": "n = 15, edges = [[1,2,10],[1,3,5],[2,4,3],[2,5,4],[3,6,2],[3,7,6],[4,8,7],[4,9,8],[5,9,3],[5,10,1],[6,11,5],[6,12,3],[7,12,2],[7,13,9],[8,14,5],[9,14,6],[10,14,4],[11,15,7],[12,15,8],[13,15,3]]",
        "output": "4"
      },
      {
        "input": "n = 50, edges = [[1,2,1],[2,3,1],[3,4,1],[4,5,1],[5,6,1],[6,7,1],[7,8,1],[8,9,1],[9,10,1],[10,11,1],[11,12,1],[12,13,1],[13,14,1],[14,15,1],[15,16,1],[16,17,1],[17,18,1],[18,19,1],[19,20,1],[20,21,1],[21,22,1],[22,23,1],[23,24,1],[24,25,1],[25,26,1],[26,27,1],[27,28,1],[28,29,1],[29,30,1],[30,31,1],[31,32,1],[32,33,1],[33,34,1],[34,35,1],[35,36,1],[36,37,1],[37,38,1],[38,39,1],[39,40,1],[40,41,1],[41,42,1],[42,43,1],[43,44,1],[44,45,1],[45,46,1],[46,47,1],[47,48,1],[48,49,1],[49,50,1],[1,50,50]]",
        "output": "2"
      },
      {
        "input": "n = 15, edges = [[1,2,2],[2,3,3],[3,4,2],[4,5,1],[5,6,2],[6,7,3],[7,8,4],[8,9,2],[9,10,1],[10,11,3],[11,12,2],[12,13,1],[13,14,3],[14,15,2],[15,1,5]]",
        "output": "1"
      },
      {
        "input": "n = 10, edges = [[1,2,2],[1,3,4],[2,4,3],[3,4,1],[4,5,2],[5,6,1],[6,7,5],[7,8,1],[8,9,4],[9,10,3],[10,1,7]]",
        "output": "1"
      },
      {
        "input": "n = 10, edges = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9],[1,10,5],[2,8,4],[3,9,3],[4,7,2],[5,6,1]]",
        "output": "1"
      }
    ]
  },
  {
    "id": 2764,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given a 0-indexed integer 2D array nodes, your task is to determine if the given array represents the preorder traversal of some binary tree.\nFor each index i, nodes[i] = [id, parentId], where id is the id of the node at the index i and parentId is the id of its parent in the tree (if the node has no parent, then parentId == -1).\nReturn true if the given array represents the preorder traversal of some tree, and false otherwise.\nNote: the preorder traversal of a tree is a recursive way to traverse a tree in which we first visit the current node, then we do the preorder traversal for the left child, and finally, we do it for the right child.\n\u00a0\nExample 1:\n\nInput: nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2]]\nOutput: true\nExplanation: The given nodes make the tree in the picture below.\nWe can show that this is the preorder traversal of the tree, first we visit node 0, then we do the preorder traversal of the right child which is [1], then we do the preorder traversal of the left child which is [2,3,4].\n\n\nExample 2:\n\nInput: nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1]]\nOutput: false\nExplanation: The given nodes make the tree in the picture below.\nFor the preorder traversal, first we visit node 0, then we do the preorder traversal of the right child which is [1,3,4], but we can see that in the given order, 2 comes between 1 and 3, so, it's not the preorder traversal of the tree.\n\n\n\u00a0\nConstraints:\n\n1 <= nodes.length <= 105\nnodes[i].length == 2\n0 <= nodes[i][0] <= 105\n-1 <= nodes[i][1] <= 105\nThe input is generated such that nodes make a binary tree.\n\n",
    "starterCode": "class Solution:\n    def isPreorder(self, nodes: List[List[int]]) -> bool:\n        ",
    "testCases": [
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[3,1],[2,0],[4,2]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,0]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[2,0],[1,0]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[3,1],[4,1],[2,0]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[5,2],[4,2],[6,3],[7,3]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[5,1],[6,1],[3,2],[4,2],[7,3],[8,3]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[2,0],[3,2],[4,2],[1,0]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,2],[4,2]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,3]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[3,1],[2,1],[4,2]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[4,2],[5,2],[3,1],[6,1]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[2,0],[1,0],[4,2],[3,2]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,2],[4,3]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,4],[11,6],[12,6],[13,7],[14,7],[15,8],[16,8],[17,11],[18,11],[19,12],[20,12],[21,13],[22,13]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,3],[5,3],[6,4],[7,4],[8,6],[9,6],[10,5],[11,5],[12,4],[13,2]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,5],[11,5],[12,6],[13,7],[14,7],[15,10],[16,10]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[3,1],[5,3],[6,3],[2,0],[4,2],[7,4],[8,4],[9,7],[10,7],[11,8],[12,8]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,1],[6,2],[7,2],[8,2],[9,3],[10,3]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,2],[5,2],[6,3],[7,3],[8,4],[9,4],[10,6]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,0],[4,0],[5,1],[6,1],[7,2],[8,2],[9,3],[10,3],[11,4],[12,4],[13,5],[14,5],[15,6],[16,6],[17,7],[18,7],[19,8],[20,8]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,5],[8,5]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,2],[4,2],[5,3],[6,3],[7,4],[8,4],[9,5],[10,5]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,0],[4,1],[5,1],[6,2],[7,2],[8,3],[9,3],[10,3],[11,4],[12,4]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,3],[6,3],[7,4],[8,4],[9,7],[10,7],[11,8],[12,8],[13,10],[14,10]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,3],[6,3],[7,5],[8,5],[9,1],[10,1],[11,9],[12,9],[13,4],[14,4],[15,12],[16,12]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,4]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,4],[11,5],[12,5]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,3],[5,3],[6,2],[7,2]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,2],[5,2],[6,4],[7,6],[8,6],[9,5],[10,5],[11,0],[12,11],[13,11],[14,12],[15,12],[16,3],[17,3],[18,16],[19,16],[20,17],[21,17]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,3],[6,3],[7,4],[8,4],[9,5],[10,5],[11,6],[12,6]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,0],[4,1],[5,1],[6,2],[7,2],[8,3],[9,3],[10,4],[11,4],[12,5],[13,5]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,3],[5,3],[6,2],[7,6],[8,6],[9,1],[10,1],[11,9],[12,9]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,3],[6,3],[7,4],[8,4],[9,5],[10,5],[11,6],[12,6],[13,1],[14,1]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,4],[6,4],[7,6],[8,6],[9,3],[10,3],[11,9],[12,9],[13,2],[14,2],[15,13],[16,13]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,3],[6,3],[7,2],[8,2]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,2],[5,2],[6,4],[7,4],[8,5],[9,5],[10,0],[11,10],[12,10]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[3,1],[5,3],[7,5],[9,7],[11,9],[2,0],[4,2],[6,4],[8,6]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,0],[4,0],[5,1],[6,1],[7,2],[8,2],[9,3],[10,3],[11,4],[12,4],[13,5],[14,5]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[5,2],[6,2],[3,1],[4,1],[7,3],[8,3],[9,4]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,3],[6,3],[7,4],[8,4],[9,5],[10,5],[11,6],[12,6]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,2],[4,2],[5,3],[6,3],[7,1],[8,7],[9,7],[10,8]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,5],[11,5],[12,6],[13,7],[14,7]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,2],[5,2],[6,3],[7,3],[8,4],[9,4],[10,5]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,5],[11,5],[12,6],[13,7],[14,7],[15,10],[16,10],[17,13],[18,13],[19,16],[20,16],[21,19],[22,19],[23,20],[24,20]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[5,1],[6,1],[2,0],[3,2],[4,2],[7,3],[8,3],[9,4],[10,9]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,0],[6,5],[7,6],[8,6],[9,7],[10,7],[11,8],[12,8]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,3],[6,3],[7,2],[8,2],[9,7],[10,7]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,3],[6,3],[7,4],[8,4],[9,6],[10,6],[11,8],[12,8]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,2],[5,2],[6,3],[7,3],[8,4],[9,4],[10,5],[11,5],[12,6],[13,6]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,5],[8,5],[9,6],[10,6],[11,7],[12,7]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,2],[4,2],[5,1],[6,5],[7,6],[8,6],[9,5],[10,5],[11,1],[12,1],[13,0],[14,0]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,2],[4,2],[5,1],[6,1]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,3],[6,3],[7,4],[8,4],[9,5],[10,5],[11,6],[12,6],[13,7],[14,7]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,5],[8,5],[9,6],[10,6],[11,3],[12,3],[13,4],[14,4]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,5],[11,5],[12,6],[13,7],[14,7],[15,10],[16,10],[17,13],[18,13],[19,16],[20,16]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,5],[8,5],[9,6],[10,6],[11,7],[12,7],[13,8],[14,8]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,3],[6,3],[7,4],[8,4],[9,7],[10,7],[11,8],[12,8],[13,5],[14,5],[15,6],[16,6],[17,9],[18,9],[19,10],[20,10],[21,11],[22,11],[23,12],[24,12]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,3],[6,3],[7,5],[8,5],[9,7],[10,7],[11,8],[12,8]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,5],[11,5],[12,6]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,2],[4,2],[5,1],[6,5],[7,6],[8,6],[9,5],[10,5],[11,1],[12,1],[13,0],[14,15]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,3],[5,3],[6,2],[7,2],[8,6],[9,6]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,2],[5,2],[6,4],[7,6],[8,6],[9,5],[10,5]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,4],[6,4],[7,2],[8,2],[9,7],[10,7],[11,8],[12,8],[13,0],[14,0],[15,13],[16,13]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,5],[11,5],[12,6],[13,7],[14,7],[15,10],[16,10],[17,13],[18,13]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,3],[6,3],[7,5],[8,5],[9,3],[10,2],[11,2],[12,0]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,2],[4,2],[5,1],[6,5],[7,6],[8,6],[9,5],[10,9]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,3],[5,4],[6,4],[7,3],[8,2],[9,1],[10,1]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,3],[6,3],[7,2],[8,2],[9,7]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,4],[6,4],[7,5],[8,5],[9,2],[10,1],[11,1]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,5],[11,5],[12,6],[13,7],[14,7],[15,10],[16,10],[17,13],[18,13],[19,16],[20,16],[21,19],[22,19],[23,20],[24,20],[25,23],[26,23],[27,24],[28,24]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[3,1],[5,3],[7,5],[8,5],[9,3],[11,9],[12,9],[2,0],[4,2],[6,4],[10,6]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,0],[6,5],[7,5],[8,0]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,0],[4,1],[5,1],[6,2],[7,2],[8,3],[9,3],[10,3]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,0],[6,5],[7,6],[8,6],[9,3],[10,3],[11,4],[12,4],[13,1],[14,1],[15,13],[16,13],[17,14],[18,14]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,4],[11,5],[12,5],[13,6],[14,6]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,4],[11,5],[12,5],[13,6],[14,6],[15,7],[16,7],[17,8],[18,8],[19,9],[20,9],[21,10],[22,10]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,2],[5,2],[6,4],[7,6],[8,6],[9,5],[10,5],[11,0],[12,11],[13,11],[14,12],[15,12]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,4],[6,4],[7,5],[8,5],[9,6],[10,6],[11,0],[12,11],[13,12],[14,12]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,4],[6,4],[7,6],[8,6],[9,8],[10,8]]",
        "output": "True"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,3],[6,5],[7,5],[8,3],[9,8],[10,8],[11,10],[12,10],[13,2],[14,13],[15,13],[16,14],[17,14],[18,14]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,3],[5,3],[6,4],[7,4],[8,6],[9,6],[10,5]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,2],[5,2],[6,4],[7,4]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1],[5,3],[6,3],[7,5],[8,5],[9,2],[10,2],[11,9],[12,9],[13,11],[14,11]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,4],[6,4],[7,5],[8,5],[9,2]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,2],[5,2],[6,4],[7,6],[8,6],[9,5],[10,5],[11,0],[12,11],[13,11],[14,12],[15,12],[16,3],[17,3],[18,16],[19,16]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2],[5,3],[6,3],[7,5],[8,5],[9,4],[10,4],[11,9],[12,9],[13,10],[14,10]]",
        "output": "False"
      },
      {
        "input": "nodes = [[0,-1],[1,0],[2,1],[3,1],[4,3],[5,3],[6,4],[7,4],[8,2]]",
        "output": "False"
      }
    ]
  },
  {
    "id": 2023,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Counting"
    ],
    "problemDescription": "Given an array of digit strings nums and a digit string target, return the number of pairs of indices (i, j) (where i != j) such that the concatenation of nums[i] + nums[j] equals target.\n\u00a0\nExample 1:\n\nInput: nums = [\"777\",\"7\",\"77\",\"77\"], target = \"7777\"\nOutput: 4\nExplanation: Valid pairs are:\n- (0, 1): \"777\" + \"7\"\n- (1, 0): \"7\" + \"777\"\n- (2, 3): \"77\" + \"77\"\n- (3, 2): \"77\" + \"77\"\n\nExample 2:\n\nInput: nums = [\"123\",\"4\",\"12\",\"34\"], target = \"1234\"\nOutput: 2\nExplanation: Valid pairs are:\n- (0, 1): \"123\" + \"4\"\n- (2, 3): \"12\" + \"34\"\n\nExample 3:\n\nInput: nums = [\"1\",\"1\",\"1\"], target = \"11\"\nOutput: 6\nExplanation: Valid pairs are:\n- (0, 1): \"1\" + \"1\"\n- (1, 0): \"1\" + \"1\"\n- (0, 2): \"1\" + \"1\"\n- (2, 0): \"1\" + \"1\"\n- (1, 2): \"1\" + \"1\"\n- (2, 1): \"1\" + \"1\"\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 100\n1 <= nums[i].length <= 100\n2 <= target.length <= 100\nnums[i] and target consist of digits.\nnums[i] and target do not have leading zeros.\n\n",
    "starterCode": "class Solution:\n    def numOfPairs(self, nums: List[str], target: str) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [\"777\",\"7\",\"77\",\"77\"], target = \"7777\"",
        "output": "4"
      },
      {
        "input": "nums = [\"10\",\"11\",\"1\"], target = \"101\"",
        "output": "1"
      },
      {
        "input": "nums = [\"1234\",\"56\",\"78\",\"9\"], target = \"123456\"",
        "output": "1"
      },
      {
        "input": "nums = [\"99\",\"9\",\"999\"], target = \"9999\"",
        "output": "2"
      },
      {
        "input": "nums = [\"50\",\"2\",\"5\",\"0\"], target = \"5025\"",
        "output": "0"
      },
      {
        "input": "nums = [\"10\",\"100\",\"1\"], target = \"10100\"",
        "output": "1"
      },
      {
        "input": "nums = [\"123\",\"4\",\"12\",\"34\"], target = \"1234\"",
        "output": "2"
      },
      {
        "input": "nums = [\"50\",\"5\",\"500\"], target = \"505\"",
        "output": "1"
      },
      {
        "input": "nums = [\"1\",\"1\",\"1\"], target = \"11\"",
        "output": "6"
      },
      {
        "input": "nums = [\"123\",\"234\",\"345\",\"456\",\"567\",\"678\",\"789\",\"890\"], target = \"123234\"",
        "output": "1"
      },
      {
        "input": "nums = [\"66\",\"666\",\"6666\",\"66666\"], target = \"66666666\"",
        "output": "2"
      },
      {
        "input": "nums = [\"33\",\"3\",\"333\",\"3333\",\"33\"], target = \"333333\"",
        "output": "4"
      },
      {
        "input": "nums = [\"555\",\"55\",\"5\",\"5555\"], target = \"555555\"",
        "output": "2"
      },
      {
        "input": "nums = [\"1\",\"1\",\"2\",\"2\",\"3\",\"3\"], target = \"11\"",
        "output": "2"
      },
      {
        "input": "nums = [\"78\",\"87\",\"7\",\"8\"], target = \"7887\"",
        "output": "1"
      },
      {
        "input": "nums = [\"7777\",\"777\",\"77\",\"7\"], target = \"7777777\"",
        "output": "2"
      },
      {
        "input": "nums = [\"0\",\"00\",\"000\",\"0000\"], target = \"0000\"",
        "output": "2"
      },
      {
        "input": "nums = [\"001\",\"010\",\"100\",\"1\"], target = \"1001\"",
        "output": "2"
      },
      {
        "input": "nums = [\"15\",\"51\",\"1515\",\"151\",\"515\"], target = \"151515\"",
        "output": "3"
      },
      {
        "input": "nums = [\"10\",\"01\",\"100\",\"001\",\"1000\",\"0001\"], target = \"1001\"",
        "output": "1"
      },
      {
        "input": "nums = [\"789\",\"897\",\"978\",\"78\",\"89\",\"97\"], target = \"789897\"",
        "output": "1"
      },
      {
        "input": "nums = [\"10\",\"20\",\"30\",\"40\",\"50\"], target = \"1020\"",
        "output": "1"
      },
      {
        "input": "nums = [\"1234\",\"5678\",\"4321\",\"8765\"], target = \"12345678\"",
        "output": "1"
      },
      {
        "input": "nums = [\"111\",\"222\",\"333\",\"444\",\"555\",\"666\",\"777\",\"888\",\"999\"], target = \"111222\"",
        "output": "1"
      },
      {
        "input": "nums = [\"5\",\"55\",\"555\",\"5555\",\"55555\"], target = \"555555\"",
        "output": "4"
      },
      {
        "input": "nums = [\"9\",\"99\",\"999\",\"9999\"], target = \"999999\"",
        "output": "2"
      },
      {
        "input": "nums = [\"18\",\"81\",\"181\",\"818\",\"1818\"], target = \"181818\"",
        "output": "3"
      },
      {
        "input": "nums = [\"20\",\"02\",\"2\",\"2002\"], target = \"200202\"",
        "output": "1"
      },
      {
        "input": "nums = [\"5\",\"55\",\"555\",\"5555\"], target = \"55555\"",
        "output": "4"
      },
      {
        "input": "nums = [\"9\",\"99\",\"999\",\"9999\",\"99999\"], target = \"999999\"",
        "output": "4"
      },
      {
        "input": "nums = [\"90\",\"09\",\"9\",\"0\"], target = \"9009\"",
        "output": "1"
      },
      {
        "input": "nums = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"], target = \"12\"",
        "output": "1"
      },
      {
        "input": "nums = [\"111\",\"222\",\"333\",\"111\",\"222\"], target = \"111222\"",
        "output": "4"
      },
      {
        "input": "nums = [\"222\",\"2222\",\"2\",\"22\",\"22222\"], target = \"22222222\"",
        "output": "2"
      },
      {
        "input": "nums = [\"1234\",\"5678\",\"12\",\"34\",\"56\",\"78\"], target = \"12345678\"",
        "output": "1"
      },
      {
        "input": "nums = [\"111\",\"222\",\"333\",\"444\"], target = \"111222\"",
        "output": "1"
      },
      {
        "input": "nums = [\"98765\",\"4321\",\"9876\",\"54321\"], target = \"987654321\"",
        "output": "2"
      },
      {
        "input": "nums = [\"90\",\"909\",\"09\",\"9\"], target = \"90909\"",
        "output": "2"
      },
      {
        "input": "nums = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"09\"], target = \"09\"",
        "output": "1"
      },
      {
        "input": "nums = [\"100000\",\"10000\",\"1000\",\"100\",\"10\",\"1\"], target = \"10000010000\"",
        "output": "1"
      },
      {
        "input": "nums = [\"0\",\"0\",\"0\",\"0\"], target = \"00\"",
        "output": "12"
      },
      {
        "input": "nums = [\"8\",\"88\",\"888\",\"8888\"], target = \"88888\"",
        "output": "4"
      },
      {
        "input": "nums = [\"123\",\"456\",\"789\",\"0\",\"1\",\"2\"], target = \"123456\"",
        "output": "1"
      },
      {
        "input": "nums = [\"111111\",\"11111\",\"1111\",\"111\",\"11\"], target = \"111111111\"",
        "output": "4"
      },
      {
        "input": "nums = [\"100\",\"200\",\"300\",\"400\",\"500\"], target = \"100200\"",
        "output": "1"
      },
      {
        "input": "nums = [\"123\",\"234\",\"345\",\"456\",\"567\"], target = \"123234\"",
        "output": "1"
      },
      {
        "input": "nums = [\"1234\",\"4321\",\"2341\",\"3412\",\"5678\",\"8765\",\"6785\",\"7856\"], target = \"12344321\"",
        "output": "1"
      },
      {
        "input": "nums = [\"123\",\"345\",\"567\",\"789\"], target = \"123345\"",
        "output": "1"
      },
      {
        "input": "nums = [\"10\",\"20\",\"30\",\"40\",\"50\"], target = \"2030\"",
        "output": "1"
      },
      {
        "input": "nums = [\"0000\",\"000\",\"00\",\"0\"], target = \"00000000\"",
        "output": "0"
      },
      {
        "input": "nums = [\"0001\",\"10\",\"01\",\"1\"], target = \"00011\"",
        "output": "1"
      },
      {
        "input": "nums = [\"123\",\"456\",\"789\",\"0\"], target = \"123456\"",
        "output": "1"
      },
      {
        "input": "nums = [\"16\",\"61\",\"161\",\"6\",\"1661\"], target = \"166161\"",
        "output": "1"
      },
      {
        "input": "nums = [\"21\",\"12\",\"22\",\"11\",\"2112\"], target = \"211221\"",
        "output": "1"
      },
      {
        "input": "nums = [\"42\",\"424\",\"2\",\"4\"], target = \"4242\"",
        "output": "1"
      },
      {
        "input": "nums = [\"777\",\"77\",\"7\",\"7777\"], target = \"777777\"",
        "output": "2"
      },
      {
        "input": "nums = [\"11\",\"11\",\"11\",\"11\",\"11\"], target = \"1111\"",
        "output": "20"
      },
      {
        "input": "nums = [\"19\",\"91\",\"191\",\"9\",\"1991\"], target = \"199191\"",
        "output": "1"
      },
      {
        "input": "nums = [\"987654321\",\"123456789\",\"1234\",\"4321\"], target = \"987654321123456789\"",
        "output": "1"
      },
      {
        "input": "nums = [\"111111\",\"1111\",\"111\",\"11\",\"1\"], target = \"111111111111\"",
        "output": "0"
      },
      {
        "input": "nums = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"], target = \"12\"",
        "output": "1"
      },
      {
        "input": "nums = [\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"], target = \"11\"",
        "output": "90"
      },
      {
        "input": "nums = [\"101\",\"101\",\"101\",\"101\"], target = \"101101\"",
        "output": "12"
      },
      {
        "input": "nums = [\"8888\",\"888\",\"88\",\"8\",\"88\",\"888\",\"8888\"], target = \"88888888\"",
        "output": "2"
      },
      {
        "input": "nums = [\"22\",\"2\",\"222\",\"2222\"], target = \"222222\"",
        "output": "2"
      },
      {
        "input": "nums = [\"123456\",\"654321\",\"1234\",\"4321\",\"5678\",\"8765\"], target = \"123456654321\"",
        "output": "1"
      },
      {
        "input": "nums = [\"12\",\"21\",\"11\",\"22\"], target = \"1221\"",
        "output": "1"
      },
      {
        "input": "nums = [\"55\",\"555\",\"5555\",\"55555\"], target = \"5555555\"",
        "output": "4"
      },
      {
        "input": "nums = [\"14\",\"41\",\"144\",\"4\"], target = \"1441\"",
        "output": "1"
      },
      {
        "input": "nums = [\"8\",\"88\",\"888\",\"8888\",\"88888\",\"888888\"], target = \"8888888\"",
        "output": "6"
      },
      {
        "input": "nums = [\"12\",\"23\",\"34\",\"45\",\"56\"], target = \"2345\"",
        "output": "1"
      },
      {
        "input": "nums = [\"12345\",\"54321\",\"123\",\"321\",\"12\",\"21\"], target = \"1234554321\"",
        "output": "1"
      },
      {
        "input": "nums = [\"55\",\"5\",\"555\",\"5555\"], target = \"55555\"",
        "output": "4"
      },
      {
        "input": "nums = [\"987\",\"654\",\"321\",\"654\"], target = \"987654\"",
        "output": "2"
      },
      {
        "input": "nums = [\"111\",\"11\",\"1\",\"1111\",\"11111\"], target = \"1111111\"",
        "output": "4"
      },
      {
        "input": "nums = [\"1234\",\"4321\",\"2341\",\"3412\"], target = \"12344321\"",
        "output": "1"
      },
      {
        "input": "nums = [\"101\",\"01\",\"10\",\"1\"], target = \"1010\"",
        "output": "0"
      },
      {
        "input": "nums = [\"8\",\"88\",\"888\",\"8888\",\"88888\"], target = \"888888888\"",
        "output": "2"
      },
      {
        "input": "nums = [\"6\",\"66\",\"666\",\"6666\"], target = \"666666\"",
        "output": "2"
      },
      {
        "input": "nums = [\"10\",\"01\",\"0\",\"1\"], target = \"1001\"",
        "output": "1"
      },
      {
        "input": "nums = [\"10\",\"20\",\"30\",\"40\",\"50\",\"60\",\"70\",\"80\",\"90\"], target = \"1020\"",
        "output": "1"
      },
      {
        "input": "nums = [\"111\",\"11\",\"1\",\"1111\"], target = \"111111\"",
        "output": "2"
      },
      {
        "input": "nums = [\"1\",\"2\",\"3\",\"4\",\"5\"], target = \"12\"",
        "output": "1"
      },
      {
        "input": "nums = [\"111\",\"222\",\"112\",\"121\",\"211\"], target = \"111222\"",
        "output": "1"
      },
      {
        "input": "nums = [\"12345\",\"23456\",\"34567\",\"45678\",\"56789\"], target = \"1234523456\"",
        "output": "1"
      },
      {
        "input": "nums = [\"12\",\"12\",\"12\",\"12\"], target = \"1212\"",
        "output": "12"
      },
      {
        "input": "nums = [\"555\",\"55\",\"5\",\"5555\",\"55555\"], target = \"5555555\"",
        "output": "4"
      },
      {
        "input": "nums = [\"23\",\"32\",\"232\",\"2\",\"3223\"], target = \"233223\"",
        "output": "1"
      },
      {
        "input": "nums = [\"11\",\"22\",\"33\",\"44\",\"55\",\"66\",\"77\",\"88\",\"99\"], target = \"1122\"",
        "output": "1"
      },
      {
        "input": "nums = [\"123\",\"321\",\"213\",\"132\",\"231\",\"312\"], target = \"123213\"",
        "output": "1"
      },
      {
        "input": "nums = [\"12\",\"21\",\"121\",\"212\"], target = \"1212\"",
        "output": "0"
      },
      {
        "input": "nums = [\"555\",\"555\",\"555\",\"555\",\"555\"], target = \"555555\"",
        "output": "20"
      },
      {
        "input": "nums = [\"89\",\"98\",\"8998\",\"9889\"], target = \"899889\"",
        "output": "2"
      },
      {
        "input": "nums = [\"22\",\"222\",\"2\",\"2222\"], target = \"222222\"",
        "output": "2"
      },
      {
        "input": "nums = [\"23\",\"32\",\"123\",\"456\",\"654\",\"321\"], target = \"23456\"",
        "output": "1"
      },
      {
        "input": "nums = [\"9876\",\"8765\",\"7654\",\"6543\",\"5432\",\"4321\",\"3210\",\"2109\"], target = \"98768765\"",
        "output": "1"
      },
      {
        "input": "nums = [\"1010\",\"0101\",\"10\",\"01\",\"101\",\"010\"], target = \"10100101\"",
        "output": "1"
      },
      {
        "input": "nums = [\"90\",\"80\",\"70\",\"60\"], target = \"7080\"",
        "output": "1"
      },
      {
        "input": "nums = [\"101\",\"010\",\"10\",\"01\"], target = \"101010\"",
        "output": "1"
      },
      {
        "input": "nums = [\"9\",\"99\",\"999\",\"9999\"], target = \"99999999\"",
        "output": "0"
      },
      {
        "input": "nums = [\"5050\",\"50\",\"5\",\"500\",\"5000\"], target = \"505050\"",
        "output": "2"
      },
      {
        "input": "nums = [\"12\",\"21\",\"121\",\"112\"], target = \"12112\"",
        "output": "2"
      },
      {
        "input": "nums = [\"13\",\"31\",\"1\",\"3\"], target = \"1331\"",
        "output": "1"
      },
      {
        "input": "nums = [\"2\",\"22\",\"222\",\"2222\",\"22222\"], target = \"222222\"",
        "output": "4"
      },
      {
        "input": "nums = [\"2020\",\"20\",\"2\",\"0202\"], target = \"202020\"",
        "output": "2"
      },
      {
        "input": "nums = [\"12\",\"23\",\"34\",\"45\",\"56\",\"67\",\"78\",\"89\"], target = \"1223\"",
        "output": "1"
      },
      {
        "input": "nums = [\"999\",\"99\",\"9\",\"9999\"], target = \"9999999\"",
        "output": "2"
      },
      {
        "input": "nums = [\"00\",\"0\",\"000\",\"0000\"], target = \"000000\"",
        "output": "2"
      },
      {
        "input": "nums = [\"17\",\"71\",\"1717\",\"717\",\"177\"], target = \"171717\"",
        "output": "2"
      },
      {
        "input": "nums = [\"987\",\"876\",\"765\",\"654\",\"543\"], target = \"987876\"",
        "output": "1"
      },
      {
        "input": "nums = [\"12\",\"23\",\"34\",\"45\",\"56\",\"67\",\"78\",\"89\",\"90\"], target = \"1223\"",
        "output": "1"
      },
      {
        "input": "nums = [\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\"], target = \"1212\"",
        "output": "90"
      },
      {
        "input": "nums = [\"00\",\"000\",\"0000\",\"00000\"], target = \"00000000\"",
        "output": "2"
      },
      {
        "input": "nums = [\"1010\",\"10\",\"1\",\"101\",\"10101\"], target = \"10101010\"",
        "output": "0"
      },
      {
        "input": "nums = [\"12\",\"23\",\"34\",\"45\",\"56\"], target = \"1223\"",
        "output": "1"
      },
      {
        "input": "nums = [\"55\",\"5\",\"555\",\"5555\"], target = \"5555\"",
        "output": "2"
      },
      {
        "input": "nums = [\"1234\",\"456\",\"12\",\"3456\"], target = \"123456\"",
        "output": "1"
      },
      {
        "input": "nums = [\"45\",\"54\",\"4\",\"5\"], target = \"4554\"",
        "output": "1"
      },
      {
        "input": "nums = [\"10\",\"01\",\"100\",\"1\"], target = \"101\"",
        "output": "2"
      },
      {
        "input": "nums = [\"100\",\"10\",\"1\",\"1000\"], target = \"1001000\"",
        "output": "1"
      },
      {
        "input": "nums = [\"1111\",\"111\",\"11\",\"1\"], target = \"11111111\"",
        "output": "0"
      },
      {
        "input": "nums = [\"11\",\"111\",\"1111\",\"11111\"], target = \"111111111\"",
        "output": "2"
      },
      {
        "input": "nums = [\"9876\",\"8769\",\"7698\",\"6987\",\"987\",\"876\",\"769\",\"698\"], target = \"98768769\"",
        "output": "1"
      },
      {
        "input": "nums = [\"12345\",\"67890\",\"123\",\"4567890\"], target = \"1234567890\"",
        "output": "2"
      },
      {
        "input": "nums = [\"9\",\"9\",\"9\",\"9\",\"9\",\"9\",\"9\",\"9\",\"9\",\"9\"], target = \"99\"",
        "output": "90"
      },
      {
        "input": "nums = [\"123\",\"456\",\"789\",\"1234\"], target = \"123456\"",
        "output": "1"
      },
      {
        "input": "nums = [\"1234\",\"5678\",\"91011\",\"121314\"], target = \"12345678\"",
        "output": "1"
      }
    ]
  },
  {
    "id": 161,
    "difficulty": "Medium",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "problemDescription": "Given two strings s and t, return true if they are both one edit distance apart, otherwise return false.\nA string s is said to be one distance apart from a string t if you can:\n\nInsert exactly one character into s to get t.\nDelete exactly one character from s to get t.\nReplace exactly one character of s with a different character to get t.\n\n\u00a0\nExample 1:\n\nInput: s = \"ab\", t = \"acb\"\nOutput: true\nExplanation: We can insert 'c' into s\u00a0to get\u00a0t.\n\nExample 2:\n\nInput: s = \"\", t = \"\"\nOutput: false\nExplanation: We cannot get t from s by only one step.\n\n\u00a0\nConstraints:\n\n0 <= s.length, t.length <= 104\ns and t consist of lowercase letters, uppercase letters, and digits.\n\n",
    "starterCode": "class Solution:\n    def isOneEditDistance(self, s: str, t: str) -> bool:\n        ",
    "testCases": [
      {
        "input": "s = \"123\", t = \"1234\"",
        "output": "True"
      },
      {
        "input": "s = \"abc\", t = \"abcd\"",
        "output": "True"
      },
      {
        "input": "s = \"ab\", t = \"acb\"",
        "output": "True"
      },
      {
        "input": "s = \"abcd\", t = \"abde\"",
        "output": "False"
      },
      {
        "input": "s = \"cat\", t = \"dog\"",
        "output": "False"
      },
      {
        "input": "s = \"123\", t = \"113\"",
        "output": "True"
      },
      {
        "input": "s = \"\", t = \"\"",
        "output": "False"
      },
      {
        "input": "s = \"abc\", t = \"ab\"",
        "output": "True"
      },
      {
        "input": "s = \"aAbB\", t = \"aabb\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd\", t = \"abcde\"",
        "output": "True"
      },
      {
        "input": "s = \"a\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"abcd\", t = \"abcf\"",
        "output": "True"
      },
      {
        "input": "s = \"1234\", t = \"2234\"",
        "output": "True"
      },
      {
        "input": "s = \"abc\", t = \"aabbcc\"",
        "output": "False"
      },
      {
        "input": "s = \"1234\", t = \"123\"",
        "output": "True"
      },
      {
        "input": "s = \"123\", t = \"143\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdef\", t = \"abcde\"",
        "output": "True"
      },
      {
        "input": "s = \"abcd\", t = \"abdc\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd\", t = \"abc\"",
        "output": "True"
      },
      {
        "input": "s = \"123\", t = \"12\"",
        "output": "True"
      },
      {
        "input": "s = \"aAbB\", t = \"aAb\"",
        "output": "True"
      },
      {
        "input": "s = \"abc\", t = \"adc\"",
        "output": "True"
      },
      {
        "input": "s = \"cat\", t = \"catt\"",
        "output": "True"
      },
      {
        "input": "s = \"teacher\", t = \"teach\"",
        "output": "False"
      },
      {
        "input": "s = \"123\", t = \"123\"",
        "output": "False"
      },
      {
        "input": "s = \"\", t = \"a\"",
        "output": "True"
      },
      {
        "input": "s = \"aAbB\", t = \"aAbBB\"",
        "output": "True"
      },
      {
        "input": "s = \"abc\", t = \"abc\"",
        "output": "False"
      },
      {
        "input": "s = \"umbrella\", t = \"umbrell\"",
        "output": "True"
      },
      {
        "input": "s = \"algorithm\", t = \"alorithm\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"aefghijkl\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd\", t = \"ab\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghikl\"",
        "output": "False"
      },
      {
        "input": "s = \"algorithm\", t = \"algoritm\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abxdefghij\"",
        "output": "True"
      },
      {
        "input": "s = \"abcde\", t = \"abcd\"",
        "output": "True"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnm\", t = \"qwertyuiopasdfghjklzxcvbn\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghi\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefgha\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"a\"",
        "output": "False"
      },
      {
        "input": "s = \"zoo\", t = \"zoology\"",
        "output": "False"
      },
      {
        "input": "s = \"a1b2c3d4\", t = \"a1b2c3d4e5\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefg\", t = \"abecdefg\"",
        "output": "True"
      },
      {
        "input": "s = \"abcde\", t = \"abcdex\"",
        "output": "True"
      },
      {
        "input": "s = \"aaaaaa\", t = \"aaaaaaa\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefg\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijk\"",
        "output": "False"
      },
      {
        "input": "s = \"abacaxi\", t = \"abacax\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghjk\"",
        "output": "False"
      },
      {
        "input": "s = \"gumbo\", t = \"gambol\"",
        "output": "False"
      },
      {
        "input": "s = \"happy\", t = \"happiness\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghikj\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefgh\", t = \"abcdfgh\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdexyz\", t = \"abcdexyz\"",
        "output": "False"
      },
      {
        "input": "s = \"hello world\", t = \"hello wold\"",
        "output": "True"
      },
      {
        "input": "s = \"aabbcc\", t = \"aabbca\"",
        "output": "True"
      },
      {
        "input": "s = \"aabbcc\", t = \"aabbc\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghix\"",
        "output": "True"
      },
      {
        "input": "s = \"umbrella\", t = \"umbralra\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd\", t = \"abec\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcd\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghi\"",
        "output": "False"
      },
      {
        "input": "s = \"abc\", t = \"abcde\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghijkabc\"",
        "output": "False"
      },
      {
        "input": "s = \"12345\", t = \"12346\"",
        "output": "True"
      },
      {
        "input": "s = \"abcd\", t = \"dabc\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefgh\", t = \"abcdegh\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefgh\", t = \"abcdef\"",
        "output": "False"
      },
      {
        "input": "s = \"algorithm\", t = \"algoritam\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkdefghijk\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijka\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkij\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefgh\", t = \"abcdefh\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijl\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abchijk\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkabcdefghijkabcdefghijk\"",
        "output": "False"
      },
      {
        "input": "s = \"pale\", t = \"ple\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijk\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghia\"",
        "output": "True"
      },
      {
        "input": "s = \"abcd\", t = \"acbd\"",
        "output": "False"
      },
      {
        "input": "s = \"mississippi\", t = \"missisipi\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdef\", t = \"abcdefg\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkj\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abc\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd\", t = \"abx\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghijabc\"",
        "output": "False"
      },
      {
        "input": "s = \"algorithm\", t = \"alorhythm\"",
        "output": "False"
      },
      {
        "input": "s = \"example\", t = \"exmple\"",
        "output": "True"
      },
      {
        "input": "s = \"abcd\", t = \"dcba\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd\", t = \"abfd\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghijab\"",
        "output": "False"
      },
      {
        "input": "s = \"a\", t = \"b\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefgh\", t = \"abcdefghi\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghijx\"",
        "output": "True"
      },
      {
        "input": "s = \"abcde\", t = \"abcde\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd\", t = \"abce\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghijabchij\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghijac\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcde\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijabc\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefg\", t = \"abcdegh\"",
        "output": "False"
      },
      {
        "input": "s = \"short\", t = \"forty\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghjik\"",
        "output": "False"
      },
      {
        "input": "s = \"12345\", t = \"1234\"",
        "output": "True"
      },
      {
        "input": "s = \"elephant\", t = \"eleppant\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"\"",
        "output": "False"
      },
      {
        "input": "s = \"12345\", t = \"123456\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijlk\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefgh\", t = \"abcefg\"",
        "output": "False"
      },
      {
        "input": "s = \"hello\", t = \"h3llo\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkk\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghijk\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefg\", t = \"abcdef\"",
        "output": "True"
      },
      {
        "input": "s = \"kitten\", t = \"sitting\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkkl\"",
        "output": "False"
      },
      {
        "input": "s = \"\", t = \"abcdefghijk\"",
        "output": "False"
      },
      {
        "input": "s = \"distance\", t = \"distane\"",
        "output": "True"
      },
      {
        "input": "s = \"gumbo\", t = \"sumo\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdef\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghi\", t = \"abcdefghij\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"bacdefghijk\"",
        "output": "False"
      },
      {
        "input": "s = \"123456\", t = \"12345\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghij\"",
        "output": "True"
      },
      {
        "input": "s = \"abcd\", t = \"abdd\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefgh\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghixj\"",
        "output": "True"
      },
      {
        "input": "s = \"abracadabra\", t = \"abracadabrA\"",
        "output": "True"
      },
      {
        "input": "s = \"accomodate\", t = \"accommodate\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkaa\"",
        "output": "False"
      },
      {
        "input": "s = \"abacax\", t = \"abacaxx\"",
        "output": "True"
      },
      {
        "input": "s = \"hello\", t = \"hallo\"",
        "output": "True"
      },
      {
        "input": "s = \"1234567890\", t = \"12345678901\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkabcdefghijkabcdefghijkabcdefghijk\"",
        "output": "False"
      },
      {
        "input": "s = \"abcde\", t = \"abfde\"",
        "output": "True"
      },
      {
        "input": "s = \"algorithm\", t = \"altruistic\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefgh\", t = \"abcdefg\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkabcdefghijk\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijk\"",
        "output": "False"
      },
      {
        "input": "s = \"flaw\", t = \"lawn\"",
        "output": "False"
      },
      {
        "input": "s = \"aaaaaa\", t = \"aaaaa\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijk\"",
        "output": "False"
      },
      {
        "input": "s = \"qwertyuiop\", t = \"qwertyuiopo\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefgijk\"",
        "output": "True"
      },
      {
        "input": "s = \"mississippi\", t = \"mississipp\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijk\"",
        "output": "False"
      },
      {
        "input": "s = \"0123456789\", t = \"1234567890\"",
        "output": "False"
      },
      {
        "input": "s = \"karolin\", t = \"kathrin\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghiij\"",
        "output": "False"
      },
      {
        "input": "s = \"phoneme\", t = \"phonam\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijak\"",
        "output": "True"
      },
      {
        "input": "s = \"racecar\", t = \"racecer\"",
        "output": "True"
      },
      {
        "input": "s = \"abcde\", t = \"abc\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghijkg\"",
        "output": "True"
      },
      {
        "input": "s = \"xylophone\", t = \"xyophone\"",
        "output": "True"
      },
      {
        "input": "s = \"algorithm\", t = \"altrithm\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd\", t = \"\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghiabc\"",
        "output": "False"
      },
      {
        "input": "s = \"interspecies\", t = \"interpres\"",
        "output": "False"
      },
      {
        "input": "s = \"mississippi\", t = \"mssissippi\"",
        "output": "True"
      },
      {
        "input": "s = \"mississippi\", t = \"mississsippi\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghj\"",
        "output": "True"
      },
      {
        "input": "s = \"algorithm\", t = \"altrithem\"",
        "output": "False"
      },
      {
        "input": "s = \"supercalifragilisticexpialidocious\", t = \"superduperfragilisticexpialidocious\"",
        "output": "False"
      },
      {
        "input": "s = \"intention\", t = \"execution\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefgh\", t = \"abcefgh\"",
        "output": "True"
      },
      {
        "input": "s = \"computer\", t = \"comuter\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghik\"",
        "output": "True"
      },
      {
        "input": "s = \"123456\", t = \"123457\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"ab\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghija\"",
        "output": "True"
      },
      {
        "input": "s = \"umbrella\", t = \"umbrellaa\"",
        "output": "True"
      },
      {
        "input": "s = \"same\", t = \"same\"",
        "output": "False"
      },
      {
        "input": "s = \"a1b2c3\", t = \"a1b2c4\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"abcdefghija\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"bcdefghijk\"",
        "output": "True"
      }
    ]
  },
  {
    "id": 791,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Sorting"
    ],
    "problemDescription": "You are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously.\nPermute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.\nReturn any permutation of s that satisfies this property.\n\u00a0\nExample 1:\n\nInput:   order = \"cba\", s = \"abcd\" \nOutput:   \"cbad\" \nExplanation:  \"a\", \"b\", \"c\" appear in order, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\".\nSince \"d\" does not appear in order, it can be at any position in the returned string. \"dcba\", \"cdba\", \"cbda\" are also valid outputs.\n\nExample 2:\n\nInput:   order = \"bcafg\", s = \"abcd\" \nOutput:   \"bcad\" \nExplanation:  The characters \"b\", \"c\", and \"a\" from order dictate the order for the characters in s. The character \"d\" in s does not appear in order, so its position is flexible.\nFollowing the order of appearance in order, \"b\", \"c\", and \"a\" from s should be arranged as \"b\", \"c\", \"a\". \"d\" can be placed at any position since it's not in order. The output \"bcad\" correctly follows this rule. Other arrangements like \"dbca\" or \"bcda\" would also be valid, as long as \"b\", \"c\", \"a\" maintain their order.\n\n\u00a0\nConstraints:\n\n1 <= order.length <= 26\n1 <= s.length <= 200\norder and s consist of lowercase English letters.\nAll the characters of order are unique.\n\n",
    "starterCode": "class Solution:\n    def customSortString(self, order: str, s: str) -> str:\n        ",
    "testCases": [
      {
        "input": "order = \"zyx\", s = \"zyxwvut\"",
        "output": "zwvutyx"
      },
      {
        "input": "order = \"abcdefg\", s = \"gfedcba\"",
        "output": "abcdefg"
      },
      {
        "input": "order = \"xyz\", s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "order = \"mnopqr\", s = \"abcdefghij\"",
        "output": "abcdefghij"
      },
      {
        "input": "order = \"abcdef\", s = \"fedcba\"",
        "output": "abcdef"
      },
      {
        "input": "order = \"\", s = \"abcdefg\"",
        "output": "abcdefg"
      },
      {
        "input": "order = \"zyx\", s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "abcdefghijklmnopqrstuvwzyx"
      },
      {
        "input": "order = \"abc\", s = \"\"",
        "output": ""
      },
      {
        "input": "order = \"a\", s = \"b\"",
        "output": "b"
      },
      {
        "input": "order = \"\", s = \"abc\"",
        "output": "abc"
      },
      {
        "input": "order = \"xyz\", s = \"aabbcc\"",
        "output": "aabbcc"
      },
      {
        "input": "order = \"zyxwvutsrqponmlkjihgfedcba\", s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "order = \"abc\", s = \"abc\"",
        "output": "abc"
      },
      {
        "input": "order = \"cba\", s = \"abcd\"",
        "output": "cdba"
      },
      {
        "input": "order = \"zyx\", s = \"xyz\"",
        "output": "zyx"
      },
      {
        "input": "order = \"abcd\", s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "zyxwvutsrqponmlkjihgfeabcd"
      },
      {
        "input": "order = \"qrstuv\", s = \"uvwxyz\"",
        "output": "wxyzuv"
      },
      {
        "input": "order = \"a\", s = \"aabbcc\"",
        "output": "aabbcc"
      },
      {
        "input": "order = \"xyz\", s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz"
      },
      {
        "input": "order = \"abcdefg\", s = \"\"",
        "output": ""
      },
      {
        "input": "order = \"abcdefghijklmnopqrstuvwxyz\", s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "order = \"mnopqr\", s = \"abcdefghijklzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "abcdefghijklzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "order = \"bcafg\", s = \"abcd\"",
        "output": "bdca"
      },
      {
        "input": "order = \"\", s = \"anything\"",
        "output": "anything"
      },
      {
        "input": "order = \"xyz\", s = \"zyxzyxzyx\"",
        "output": "xxxyyyzzz"
      },
      {
        "input": "order = \"poiuytrewqlkjhgfdsamnbvcxz\", s = \"thequickbrownfoxjumpsoverthelazydog\"",
        "output": "pooooiuuyttrreeewqlkjhhgfdsamnbvcxz"
      },
      {
        "input": "order = \"acegikm\", s = \"fedcbahjilnmporqstuvwxyz\"",
        "output": "fdbahjlnporqstuvwxyzceim"
      },
      {
        "input": "order = \"ghjklm\", s = \"abcdefghijklmnopqrstuvmnopqrstuvwxyz\"",
        "output": "abcdefginopqrstuvnopqrstuvwxyzhjklmm"
      },
      {
        "input": "order = \"qrstuv\", s = \"qwertyuiopasdfghjklzxcvbnm\"",
        "output": "qweyiopadfghjklzxcbnmrstuv"
      },
      {
        "input": "order = \"abcdef\", s = \"fedcbahgfedcba\"",
        "output": "ahgabbccddeeff"
      },
      {
        "input": "order = \"pqrs\", s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "zyxwvutponmlkjihgfedcbaqrs"
      },
      {
        "input": "order = \"ghijklmnop\", s = \"fedcbazxcvbnmopqrstuvw\"",
        "output": "fedcbazxcvbqrstuvwmnop"
      },
      {
        "input": "order = \"abcdefghijklmnop\", s = \"abcdefghijklmnopabcdefghijklmnop\"",
        "output": "aabbccddeeffgghhiijjkkllmmnnoopp"
      },
      {
        "input": "order = \"zyxwvutsrqponmlkjihgfedcba\", s = \"aaabbbcccddd\"",
        "output": "dddcccbbbaaa"
      },
      {
        "input": "order = \"aeiouy\", s = \"aeiouyaeiouyaeiouyaeiouy\"",
        "output": "aaaaeeeeiiiioooouuuuyyyy"
      },
      {
        "input": "order = \"acegikmoqsuwy\", s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "abdfhjlnprtvxzcegikmoqsuwy"
      },
      {
        "input": "order = \"abcdef\", s = \"ghijklmnopqrstuvwxyz\"",
        "output": "ghijklmnopqrstuvwxyz"
      },
      {
        "input": "order = \"qweasdzxc\", s = \"sazxqwecvfr\"",
        "output": "qvfrweaszxc"
      },
      {
        "input": "order = \"abcd\", s = \"aabbccddeeffaabbccddeeff\"",
        "output": "aaeeffaaeeffbbbbccccdddd"
      },
      {
        "input": "order = \"fjlad\", s = \"flafjlajldalfajfladflajfl\"",
        "output": "ffffffjjjjlllllllaaaaaadd"
      },
      {
        "input": "order = \"abcdefg\", s = \"zyxcba\"",
        "output": "zyxabc"
      },
      {
        "input": "order = \"xyz\", s = \"xyzxyzxyzxyzxyz\"",
        "output": "xxxxxyyyyyzzzzz"
      },
      {
        "input": "order = \"abcde\", s = \"edcbafghijklmnopqrstuvwxyz\"",
        "output": "afghijklmnopqrstuvwxyzbcde"
      },
      {
        "input": "order = \"qrstuv\", s = \"thequickbrownfoxjumpsoverthelazydog\"",
        "output": "heqickbownfoxjmpoehelazydogrrsttuuv"
      },
      {
        "input": "order = \"abcd\", s = \"dbcaabcd\"",
        "output": "aabbccdd"
      },
      {
        "input": "order = \"qwertyuiopasdfghjklzxcvbnm\", s = \"thequickbrownfoxjumpsoverthelazydog\"",
        "output": "qweeerrttyuuioooopasdfghhjklzxcvbnm"
      },
      {
        "input": "order = \"bac\", s = \"abcabcabc\"",
        "output": "bbbaaaccc"
      },
      {
        "input": "order = \"abcdefghijklmnopqrstuvwxy\", s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "azbcdefghijklmnopqrstuvwxy"
      },
      {
        "input": "order = \"jkl\", s = \"thequickbrownfoxjumpsoverthelazydog\"",
        "output": "thequicbrownfoxjumpsovertheazydogkl"
      },
      {
        "input": "order = \"abc\", s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "aaddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzbbcc"
      },
      {
        "input": "order = \"bdfhjlnprtvxz\", s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "abcegikmoqsuwydfhjlnprtvxz"
      },
      {
        "input": "order = \"xyz\", s = \"abcdef\"",
        "output": "abcdef"
      },
      {
        "input": "order = \"qrstuvw\", s = \"vwutsrqponmlkjihgfedcba\"",
        "output": "qponmlkjihgfedcbarstuvw"
      },
      {
        "input": "order = \"qrstuvw\", s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "zyxqponmlkjihgfedcbarstuvw"
      },
      {
        "input": "order = \"vwxyz\", s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "order = \"abc\", s = \"cccbbaaa\"",
        "output": "aaabbccc"
      },
      {
        "input": "order = \"mnop\", s = \"wertyuiopasdfghjklzxcvbnm\"",
        "output": "wertyuiasdfghjklzxcvbmnop"
      },
      {
        "input": "order = \"mnopqr\", s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzmnopqr\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzmnopqr"
      },
      {
        "input": "order = \"abcdef\", s = \"fedcbafedcbafedcbafedcba\"",
        "output": "aaaabbbbccccddddeeeeffff"
      },
      {
        "input": "order = \"xyzabc\", s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "xwvutsrqponmlkjihgfedyzabc"
      },
      {
        "input": "order = \"bdfhjlnprtvxz\", s = \"aegikmoqsuwy\"",
        "output": "aegikmoqsuwy"
      },
      {
        "input": "order = \"aeiou\", s = \"thequickbrownfoxjumpsoverthelazydog\"",
        "output": "thqckbrwnfxjmpsvrthlazydgeeeioooouu"
      },
      {
        "input": "order = \"mnopqr\", s = \"rmqponlksjihgfedcba\"",
        "output": "mlksjihgfedcbanopqr"
      },
      {
        "input": "order = \"qwer\", s = \"qwertyuiopasdfghjklzxcvbnm\"",
        "output": "qtyuiopasdfghjklzxcvbnmwer"
      },
      {
        "input": "order = \"pqrs\", s = \"pqrspqrspqrspqrspqrs\"",
        "output": "pppppqqqqqrrrrrsssss"
      },
      {
        "input": "order = \"xyz\", s = \"abcxyzdefxyz\"",
        "output": "abcxdefxyyzz"
      },
      {
        "input": "order = \"abcdefghijklm\", s = \"nopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "nopqrstuvwxyzzyxwvutsrqponabcdefghijklm"
      },
      {
        "input": "order = \"xyz\", s = \"aabbccxxzzyy\"",
        "output": "aabbccxxyyzz"
      },
      {
        "input": "order = \"jihgfedcba\", s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "jklmnopqrstuvwxyzihgfedcba"
      },
      {
        "input": "order = \"lmnop\", s = \"lkjhgfedcba\"",
        "output": "lkjhgfedcba"
      },
      {
        "input": "order = \"qwertyuiopasdfghjklzxcvbnm\", s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "qqwweerrttyyuuiiooppaassddffgghhjjkkllzzxxccvvbbnnmm"
      },
      {
        "input": "order = \"zxcvbnmlkjhgfdsapoiuytrewq\", s = \"qwertyuiopasdfghjklzxcvbnm\"",
        "output": "zxcvbnmlkjhgfdsapoiuytrewq"
      },
      {
        "input": "order = \"a\", s = \"aaaaaaaa\"",
        "output": "aaaaaaaa"
      },
      {
        "input": "order = \"qrstuv\", s = \"qoprtusvklmijnhgfeabcdxyz\"",
        "output": "qopklmijnhgfeabcdxyzrstuv"
      },
      {
        "input": "order = \"acegikmoqsuwy\", s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "zxvtrpnljhfdbacegikmoqsuwy"
      },
      {
        "input": "order = \"abcdefg\", s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "zyxwvutsrqponmlkjihabcdefg"
      },
      {
        "input": "order = \"abcd\", s = \"ddcbaaabbccdddddd\"",
        "output": "aaabbbcccdddddddd"
      },
      {
        "input": "order = \"mno\", s = \"lkjhgfdcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "lkjhgfdcbazyxwvutsrqpmlkjihgfedcbano"
      },
      {
        "input": "order = \"pqrstuvwxyz\", s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "order = \"zyxwvutsrqponmlkjihgfedcba\", s = \"thequickbrownfoxjumpsoverthelazydog\"",
        "output": "zyxwvuuttsrrqpoooonmlkjihhgfeeedcba"
      },
      {
        "input": "order = \"mnop\", s = \"pnmlkjoiehgfcdcba\"",
        "output": "mlkjiehgfcdcbanop"
      },
      {
        "input": "order = \"ace\", s = \"aaabbbcccddd\"",
        "output": "aaabbbdddccc"
      },
      {
        "input": "order = \"abcd\", s = \"dcbaedcba\"",
        "output": "aeabbccdd"
      },
      {
        "input": "order = \"abcxyz\", s = \"xyzabczyxcba\"",
        "output": "aabbccxxyyzz"
      },
      {
        "input": "order = \"mnopqr\", s = \"mnopqrabcdefghijklmnop\"",
        "output": "mabcdefghijklmnnooppqr"
      },
      {
        "input": "order = \"abcdefghij\", s = \"zzzzzyyyxxxwwwwvvvuuuuttttssssrrrrqqqqppppooolllkkkkjjjjiijjhhhgggfffeeedddccccbbbaaaa\"",
        "output": "zzzzzyyyxxxwwwwvvvuuuuttttssssrrrrqqqqppppooolllkkkkaaaabbbccccdddeeefffggghhhiijjjjjj"
      },
      {
        "input": "order = \"zyxwvutsrqponmlkjihgfedcba\", s = \"fedcba\"",
        "output": "fedcba"
      },
      {
        "input": "order = \"qaz\", s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "bcdefghijklmnopqrstuvwxyaz"
      },
      {
        "input": "order = \"aeiou\", s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "abcdfghjklmnpqrstvwxyzeiou"
      },
      {
        "input": "order = \"mnopqr\", s = \"rqponmlkjihgfedcba\"",
        "output": "mlkjihgfedcbanopqr"
      },
      {
        "input": "order = \"xyzabc\", s = \"fedcba\"",
        "output": "fedabc"
      },
      {
        "input": "order = \"abc\", s = \"ccccbaaabbbccc\"",
        "output": "aaabbbbccccccc"
      },
      {
        "input": "order = \"abcdef\", s = \"fedcbafghijklmnopqrstuvwxyz\"",
        "output": "aghijklmnopqrstuvwxyzbcdeff"
      },
      {
        "input": "order = \"a\", s = \"a\"",
        "output": "a"
      },
      {
        "input": "order = \"bzdx\", s = \"abcdexyz\"",
        "output": "abceyzdx"
      },
      {
        "input": "order = \"mnbvcxzlkjhgfdsapoiuytrewq\", s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "mmnnbbvvccxxzzllkkjjhhggffddssaappooiiuuyyttrreewwqq"
      },
      {
        "input": "order = \"uvwxy\", s = \"uvwxyuvwxyuvwxyuvwxyuvwxyuvwxy\"",
        "output": "uuuuuuvvvvvvwwwwwwxxxxxxyyyyyy"
      },
      {
        "input": "order = \"abcdefghij\", s = \"jihgfedcba\"",
        "output": "abcdefghij"
      },
      {
        "input": "order = \"t\", s = \"tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\"",
        "output": "tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt"
      },
      {
        "input": "order = \"mnop\", s = \"mnopmnopmnopmnopmnopmnopmnop\"",
        "output": "mmmmmmmnnnnnnnoooooooppppppp"
      },
      {
        "input": "order = \"abcdefgh\", s = \"hgfedcba\"",
        "output": "abcdefgh"
      },
      {
        "input": "order = \"a\", s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "order = \"tuvwxyz\", s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "tsrqponmlkjihgfedcbauvwxyz"
      },
      {
        "input": "order = \"abc\", s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "order = \"bdfhjlnprtvxz\", s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "ywusqomkigecbadfhjlnprtvxz"
      },
      {
        "input": "order = \"fedcba\", s = \"abcdef\"",
        "output": "fedcba"
      },
      {
        "input": "order = \"gfedcba\", s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "order = \"mnop\", s = \"abmncdopefqrsgthijkl\"",
        "output": "abmcdefqrsgthijklnop"
      },
      {
        "input": "order = \"nvmb\", s = \"nvbnvmbvmbnnbmvmbnb\"",
        "output": "nnnnnvvvvmmmmbbbbbb"
      },
      {
        "input": "order = \"mnopqr\", s = \"mnopqrstuvwxynmlkjihgfedcba\"",
        "output": "mstuvwxymlkjihgfedcbannopqr"
      },
      {
        "input": "order = \"abcxyz\", s = \"zyxcba\"",
        "output": "abcxyz"
      },
      {
        "input": "order = \"qrst\", s = \"trqs\"",
        "output": "qrst"
      },
      {
        "input": "order = \"xyzuvw\", s = \"zzzzzyyyxxxwwwwvvvuuuuttttssssrrrrqqqqppppooolllkkkkjjjjiijjhhhgggfffeeedddccccbbbaaaa\"",
        "output": "xxxttttssssrrrrqqqqppppooolllkkkkjjjjiijjhhhgggfffeeedddccccbbbaaaayyyzzzzzuuuuvvvwwww"
      },
      {
        "input": "order = \"z\", s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "order = \"qz\", s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "order = \"thq\", s = \"thequickbrownfoxjumpsoverthelazydog\"",
        "output": "teuickbrownfoxjumpsovertelazydoghhq"
      },
      {
        "input": "order = \"zyxwvutsrqponmlkjihgfedcba\", s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      }
    ]
  },
  {
    "id": 2527,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Math"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums.\nThe effective value of three indices i, j, and k is defined as ((nums[i] | nums[j]) & nums[k]).\nThe xor-beauty of the array is the XORing of the effective values of all the possible triplets of indices (i, j, k) where 0 <= i, j, k < n.\nReturn the xor-beauty of nums.\nNote that:\n\nval1 | val2 is bitwise OR of val1 and val2.\nval1 & val2 is bitwise AND of val1 and val2.\n\n\u00a0\nExample 1:\n\nInput: nums = [1,4]\nOutput: 5\nExplanation: \nThe triplets and their corresponding effective values are listed below:\n- (0,0,0) with effective value ((1 | 1) & 1) = 1\n- (0,0,1) with effective value ((1 | 1) & 4) = 0\n- (0,1,0) with effective value ((1 | 4) & 1) = 1\n- (0,1,1) with effective value ((1 | 4) & 4) = 4\n- (1,0,0) with effective value ((4 | 1) & 1) = 1\n- (1,0,1) with effective value ((4 | 1) & 4) = 4\n- (1,1,0) with effective value ((4 | 4) & 1) = 0\n- (1,1,1) with effective value ((4 | 4) & 4) = 4 \nXor-beauty of array will be bitwise XOR of all beauties = 1 ^ 0 ^ 1 ^ 4 ^ 1 ^ 4 ^ 0 ^ 4 = 5.\nExample 2:\n\nInput: nums = [15,45,20,2,34,35,5,44,32,30]\nOutput: 34\nExplanation: The xor-beauty of the given array is 34.\n\n\u00a0\nConstraints:\n\n1 <= nums.length\u00a0<= 105\n1 <= nums[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def xorBeauty(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "11"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "14"
      },
      {
        "input": "nums = [15,45,20,2,34,35,5,44,32,30]",
        "output": "34"
      },
      {
        "input": "nums = [1,4]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [10,20,30,40,50]",
        "output": "26"
      },
      {
        "input": "nums = [2,3,5,7,11]",
        "output": "8"
      },
      {
        "input": "nums = [2,4,8,16,32]",
        "output": "62"
      },
      {
        "input": "nums = [7,14,21,28,35]",
        "output": "35"
      },
      {
        "input": "nums = [1000000000, 500000000, 250000000, 125000000]",
        "output": "801260736"
      },
      {
        "input": "nums = [7,7,7,7,7,7]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "1"
      },
      {
        "input": "nums = [1000000000,999999999,888888888,777777777]",
        "output": "446738358"
      },
      {
        "input": "nums = [31, 14, 7, 3, 1]",
        "output": "20"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "0"
      },
      {
        "input": "nums = [999999999, 888888888, 777777777, 666666666, 555555555, 444444444, 333333333, 222222222, 111111111, 1]",
        "output": "630827518"
      },
      {
        "input": "nums = [1000000007, 1000000006, 1000000005, 1000000004, 1000000003, 1000000002, 1000000001, 1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993]",
        "output": "999999992"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "588"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "1023"
      },
      {
        "input": "nums = [2147483647, 2147483646, 2147483645, 2147483644, 2147483643, 2147483642, 2147483641, 2147483640, 2147483639, 2147483638]",
        "output": "1"
      },
      {
        "input": "nums = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072]",
        "output": "262136"
      },
      {
        "input": "nums = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575]",
        "output": "699050"
      },
      {
        "input": "nums = [2147483647, 1073741823, 536870911, 268435455, 134217727, 67108863, 33554431, 16777215, 8388607, 4194303]",
        "output": "1430257664"
      },
      {
        "input": "nums = [135792468, 246813579, 357924681, 468135792, 579246813, 681357924, 789246813, 892468135, 924681357, 24681357, 46813579, 68135792, 81357924, 13579246, 35792468, 57924681, 79246813, 92468135]",
        "output": "753001139"
      },
      {
        "input": "nums = [1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216]",
        "output": "33553408"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]",
        "output": "0"
      },
      {
        "input": "nums = [123456789, 987654321, 456789123, 321987654, 789123456]",
        "output": "445095137"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "31"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]",
        "output": "2"
      },
      {
        "input": "nums = [987654321, 876543219, 765432198, 654321987, 543219876, 432198765, 321987654, 219876543, 198765432, 98765432, 8765432, 765432, 65432, 5432, 432, 32, 2, 1]",
        "output": "759310468"
      },
      {
        "input": "nums = [531911163, 381216167, 84627534, 595912280, 691055427, 374083484, 163888428, 741109182, 830024027, 981830112]",
        "output": "1055643324"
      },
      {
        "input": "nums = [123456789, 987654321, 246813579, 864209753, 135792468, 753951876, 321654987, 654987321, 987321654]",
        "output": "715524962"
      },
      {
        "input": "nums = [1098765432, 2098765431, 3098765430, 4098765429, 5098765428, 6098765427, 7098765426, 8098765425, 9098765424, 1198765423, 2198765422, 3198765421, 4198765420, 5198765419, 6198765418]",
        "output": "11462454905"
      },
      {
        "input": "nums = [1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]",
        "output": "1047552"
      },
      {
        "input": "nums = [123456789, 987654321, 135792468, 246813579, 111213141516171819, 222324252627282930, 333435363738394041, 444546474849505152, 555657585960616263]",
        "output": "550309707244680156"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000]",
        "output": "974967"
      },
      {
        "input": "nums = [1000000007, 1000000009, 1000000011, 1000000013, 1000000015]",
        "output": "1000000007"
      },
      {
        "input": "nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]",
        "output": "1000000004"
      },
      {
        "input": "nums = [987654321, 876543219, 765432198, 654321987, 543219876, 432198765, 321987654, 219876543, 198765432]",
        "output": "674225103"
      },
      {
        "input": "nums = [987654321, 876543219, 765432109, 654321099, 543210989, 432109879, 321098769, 210987659, 109876549, 98765439]",
        "output": "553747934"
      },
      {
        "input": "nums = [12345, 67890, 13579, 24680, 97531, 86420, 75310, 64200, 53100, 42000, 31000, 20000, 10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000]",
        "output": "49509"
      },
      {
        "input": "nums = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023]",
        "output": "682"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "nums = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]",
        "output": "8184"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "0"
      },
      {
        "input": "nums = [13, 29, 47, 61, 73, 89, 101, 127, 149, 167]",
        "output": "58"
      },
      {
        "input": "nums = [999999999, 888888888, 777777777, 666666666, 555555555, 444444444, 333333333, 222222222, 111111111, 99999999, 88888888, 77777777, 66666666, 55555555, 44444444, 33333333, 22222222, 11111111, 9999999, 8888888, 7777777, 6666666, 5555555, 4444444, 3333333, 2222222, 1111111, 999999, 888888, 777777, 666666, 555555, 444444, 333333, 222222, 111111]",
        "output": "596022080"
      },
      {
        "input": "nums = [233, 344, 567, 789, 901, 123, 456, 789, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "433"
      },
      {
        "input": "nums = [5, 17, 34, 68, 136, 272, 544, 1088, 2176, 4352]",
        "output": "7690"
      },
      {
        "input": "nums = [123456789, 987654321, 135792468, 246813579]",
        "output": "992719227"
      },
      {
        "input": "nums = [123456789, 987654321, 111111111, 222222222, 333333333, 444444444, 555555555, 666666666, 777777777, 888888888]",
        "output": "596034980"
      },
      {
        "input": "nums = [987654321, 987654320, 987654319, 987654318, 987654317, 987654316, 987654315, 987654314, 987654313, 987654312]",
        "output": "1"
      },
      {
        "input": "nums = [1000000007, 999999937, 899999937, 799999937, 699999937, 599999937, 499999937, 399999937, 299999937, 199999937]",
        "output": "6360006"
      },
      {
        "input": "nums = [2147483647, 1073741823, 536870911, 268435455, 134217727, 67108863, 33554431, 16777215, 8388607, 4194303, 2097151, 1048575, 524287, 262143, 131071]",
        "output": "1431699455"
      },
      {
        "input": "nums = [123, 456, 789, 101112, 131415, 161718, 192021, 222324, 252627, 282930, 313233, 343536, 373839, 404142, 434445]",
        "output": "211634"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "42"
      },
      {
        "input": "nums = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000, 6000000000, 7000000000, 8000000000, 9000000000, 10000000000]",
        "output": "1848004096"
      },
      {
        "input": "nums = [2^31-1, 2^30-1, 2^29-1, 2^28-1, 2^27-1, 2^26-1, 2^25-1, 2^24-1, 2^23-1, 2^22-1, 2^21-1, 2^20-1]",
        "output": "Error: Solution.xorBeauty() missing 1 required positional argument: 'nums'"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]",
        "output": "32767"
      },
      {
        "input": "nums = [1000000007, 999999937, 888888888, 777777777, 666666666, 555555555, 444444444, 333333333, 222222222, 111111111]",
        "output": "503538630"
      },
      {
        "input": "nums = [64, 32, 16, 8, 4, 2, 1, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216]",
        "output": "33554431"
      },
      {
        "input": "nums = [89, 67, 45, 23, 1, 24, 46, 68, 90, 11, 33, 55, 77, 99, 22, 44, 66, 88, 10, 30]",
        "output": "14"
      },
      {
        "input": "nums = [123, 456, 789, 101112, 131415, 161718, 192021, 222324, 252627, 282930]",
        "output": "524095"
      },
      {
        "input": "nums = [2147483647, 1073741823, 536870911, 268435455, 134217727, 67108863, 33554431, 16777215, 8388607, 4194303, 2097151]",
        "output": "1432354815"
      },
      {
        "input": "nums = [7, 5, 3, 1, 9, 11, 13, 15]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "0"
      },
      {
        "input": "nums = [13, 27, 41, 55, 69, 83, 97, 111, 125, 139, 153, 167, 181, 195, 209]",
        "output": "127"
      },
      {
        "input": "nums = [17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]",
        "output": "69"
      },
      {
        "input": "nums = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1]",
        "output": "682"
      },
      {
        "input": "nums = [255, 511, 767, 1023, 1279, 1535, 1791, 2047, 2303, 2559]",
        "output": "256"
      },
      {
        "input": "nums = [987654321, 876543210, 765432109, 654321098, 543210987, 432109876, 321098765, 210987654, 109876543]",
        "output": "618827735"
      },
      {
        "input": "nums = [1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]",
        "output": "2096128"
      },
      {
        "input": "nums = [135792468, 246813579, 357924681, 468135792, 579246813, 681357924, 792468135, 813579246, 924681357]",
        "output": "710527387"
      },
      {
        "input": "nums = [123456789, 987654321, 111222333, 444555666, 777888999]",
        "output": "252083948"
      },
      {
        "input": "nums = [13, 29, 47, 61, 73, 89, 101, 113, 131, 137, 151, 163, 173, 191, 197, 211, 223, 229, 233, 239]",
        "output": "0"
      },
      {
        "input": "nums = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000, 6000000000, 7000000000, 8000000000, 9000000000]",
        "output": "9566005760"
      },
      {
        "input": "nums = [987654321, 987654322, 987654323, 987654324, 987654325, 987654326, 987654327, 987654328, 987654329]",
        "output": "987654321"
      },
      {
        "input": "nums = [1099511627776, 549755813888, 274877906944, 137438953472, 68719476736, 34359738368, 17179869184, 8589934592, 4294967296, 2147483648]",
        "output": "2196875771904"
      },
      {
        "input": "nums = [255, 127, 63, 31, 15, 7, 3, 1]",
        "output": "170"
      },
      {
        "input": "nums = [500000000, 500000001, 500000002, 500000003, 500000004, 500000005, 500000006, 500000007, 500000008, 500000009]",
        "output": "1"
      },
      {
        "input": "nums = [123456789, 234567891, 345678912, 456789123, 567891234, 678912345, 789123456, 891234567, 912345678, 123456789]",
        "output": "662886050"
      },
      {
        "input": "nums = [234567890, 345678901, 456789012, 567890123, 678901234, 789012345]",
        "output": "619883187"
      },
      {
        "input": "nums = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43]",
        "output": "47"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "0"
      },
      {
        "input": "nums = [123456789, 987654321, 1122334455, 5544332211]",
        "output": "5185673440"
      },
      {
        "input": "nums = [31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [101010101, 202020202, 303030303, 404040404, 505050505, 606060606, 707070707, 808080808, 909090909]",
        "output": "372268965"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]",
        "output": "2047"
      },
      {
        "input": "nums = [1048575, 2097150, 3145725, 4194300, 5242875, 6291450, 7340025, 8388500, 9437075, 10485650]",
        "output": "1048685"
      },
      {
        "input": "nums = [123456789, 987654321, 135792468, 246813579, 1112131415]",
        "output": "2036495916"
      },
      {
        "input": "nums = [1337, 2674, 4011, 5348, 6685, 8022, 9359, 10696, 12033, 13370]",
        "output": "1843"
      },
      {
        "input": "nums = [111111111, 222222222, 333333333, 444444444, 555555555, 666666666, 777777777, 888888888, 999999999]",
        "output": "630827519"
      },
      {
        "input": "nums = [999999937, 999999938, 999999939, 999999940, 999999941, 999999942, 999999943, 999999944, 999999945, 999999946]",
        "output": "11"
      },
      {
        "input": "nums = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]",
        "output": "2047"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [987654321, 876543210, 765432109, 654321098, 543210987, 432109876, 321098765, 210987654, 109876543, 98765432]",
        "output": "553747887"
      },
      {
        "input": "nums = [100000000, 200000000, 300000000, 400000000, 500000000, 600000000, 700000000, 800000000, 900000000, 1000000000]",
        "output": "1041115904"
      },
      {
        "input": "nums = [1000000000, 999999999, 888888888, 777777777, 666666666, 555555555, 444444444, 333333333, 222222222, 111111111]",
        "output": "503538687"
      }
    ]
  },
  {
    "id": 1833,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Counting Sort",
      "Sorting"
    ],
    "problemDescription": "It is a sweltering summer day, and a boy wants to buy some ice cream bars.\nAt the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible.\u00a0\nNote: The boy can buy the ice cream bars in any order.\nReturn the maximum number of ice cream bars the boy can buy with coins coins.\nYou must solve the problem by counting sort.\n\u00a0\nExample 1:\n\nInput: costs = [1,3,2,4,1], coins = 7\nOutput: 4\nExplanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.\n\nExample 2:\n\nInput: costs = [10,6,8,7,7,8], coins = 5\nOutput: 0\nExplanation: The boy cannot afford any of the ice cream bars.\n\nExample 3:\n\nInput: costs = [1,6,3,1,2,5], coins = 20\nOutput: 6\nExplanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.\n\n\u00a0\nConstraints:\n\ncosts.length == n\n1 <= n <= 105\n1 <= costs[i] <= 105\n1 <= coins <= 108\n\n",
    "starterCode": "class Solution:\n    def maxIceCream(self, costs: List[int], coins: int) -> int:\n        ",
    "testCases": [
      {
        "input": "costs = [1,3,2,4,1], coins = 7",
        "output": "4"
      },
      {
        "input": "costs = [10,6,8,7,7,8], coins = 5",
        "output": "0"
      },
      {
        "input": "costs = [1], coins = 1",
        "output": "1"
      },
      {
        "input": "costs = [1,6,3,1,2,5], coins = 20",
        "output": "6"
      },
      {
        "input": "costs = [100000], coins = 100000",
        "output": "1"
      },
      {
        "input": "costs = [1,2,3,4,5,6,7,8,9,10], coins = 10",
        "output": "4"
      },
      {
        "input": "costs = [1,2,3,4,5,6,7,8,9,10], coins = 55",
        "output": "10"
      },
      {
        "input": "costs = [5,5,5,5,5], coins = 15",
        "output": "3"
      },
      {
        "input": "costs = [10,20,30,40,50], coins = 100",
        "output": "4"
      },
      {
        "input": "costs = [1,2,3,4,5,6,7,8,9,10], coins = 15",
        "output": "5"
      },
      {
        "input": "costs = [1,2,3,4,5,6,7,8,9,10], coins = 50",
        "output": "9"
      },
      {
        "input": "costs = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], coins = 19",
        "output": "19"
      },
      {
        "input": "costs = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], coins = 5",
        "output": "5"
      },
      {
        "input": "costs = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], coins = 15",
        "output": "6"
      },
      {
        "input": "costs = [5,4,2,3,1,6,7,8,9,10], coins = 15",
        "output": "5"
      },
      {
        "input": "costs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], coins = 250",
        "output": "6"
      },
      {
        "input": "costs = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], coins = 25",
        "output": "12"
      },
      {
        "input": "costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], coins = 210",
        "output": "20"
      },
      {
        "input": "costs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], coins = 55",
        "output": "2"
      },
      {
        "input": "costs = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], coins = 40",
        "output": "8"
      },
      {
        "input": "costs = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], coins = 100",
        "output": "13"
      },
      {
        "input": "costs = [100000, 99999, 99998, 99997, 99996, 99995], coins = 599985",
        "output": "6"
      },
      {
        "input": "costs = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], coins = 50",
        "output": "13"
      },
      {
        "input": "costs = [1, 1000000, 2, 999999, 3, 999998, 4, 999997, 5, 999996], coins = 1000000",
        "output": "5"
      },
      {
        "input": "costs = [50, 25, 75, 100, 200, 300, 400, 500, 600, 700], coins = 2000",
        "output": "8"
      },
      {
        "input": "costs = [1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], coins = 10",
        "output": "10"
      },
      {
        "input": "costs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], coins = 800",
        "output": "12"
      },
      {
        "input": "costs = [1, 1000000, 2, 999999, 3, 999998, 4, 999997, 5, 999996], coins = 5000000",
        "output": "9"
      },
      {
        "input": "costs = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], coins = 10",
        "output": "10"
      },
      {
        "input": "costs = [5, 1, 4, 2, 3], coins = 10",
        "output": "4"
      },
      {
        "input": "costs = [1000, 500, 200, 100, 50, 20, 10, 5, 2, 1], coins = 1000",
        "output": "9"
      },
      {
        "input": "costs = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500], coins = 8000",
        "output": "12"
      },
      {
        "input": "costs = [5,7,8,6,3,2,1,4,9,10], coins = 20",
        "output": "5"
      },
      {
        "input": "costs = [50, 20, 30, 10, 40], coins = 100",
        "output": "4"
      },
      {
        "input": "costs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], coins = 1000",
        "output": "10"
      },
      {
        "input": "costs = [100000, 100000, 100000, 100000, 100000], coins = 500000",
        "output": "5"
      },
      {
        "input": "costs = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], coins = 50",
        "output": "5"
      },
      {
        "input": "costs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], coins = 300",
        "output": "24"
      },
      {
        "input": "costs = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6], coins = 25",
        "output": "6"
      },
      {
        "input": "costs = [99999, 1, 99999, 1, 99999, 1, 99999, 1, 99999, 1], coins = 5",
        "output": "5"
      },
      {
        "input": "costs = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], coins = 20",
        "output": "4"
      },
      {
        "input": "costs = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], coins = 10",
        "output": "10"
      },
      {
        "input": "costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], coins = 50",
        "output": "9"
      },
      {
        "input": "costs = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], coins = 50",
        "output": "10"
      },
      {
        "input": "costs = [9, 8, 7, 6, 5, 4, 3, 2, 1], coins = 25",
        "output": "6"
      },
      {
        "input": "costs = [10,9,8,7,6,5,4,3,2,1], coins = 55",
        "output": "10"
      },
      {
        "input": "costs = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], coins = 1500",
        "output": "5"
      },
      {
        "input": "costs = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], coins = 15",
        "output": "7"
      },
      {
        "input": "costs = [5,1,3,1,2,5,3,1,2,5], coins = 15",
        "output": "7"
      },
      {
        "input": "costs = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], coins = 10",
        "output": "10"
      },
      {
        "input": "costs = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], coins = 55",
        "output": "2"
      },
      {
        "input": "costs = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], coins = 20",
        "output": "4"
      },
      {
        "input": "costs = [1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4], coins = 10",
        "output": "7"
      },
      {
        "input": "costs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], coins = 550",
        "output": "10"
      },
      {
        "input": "costs = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], coins = 10",
        "output": "10"
      },
      {
        "input": "costs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], coins = 190",
        "output": "19"
      },
      {
        "input": "costs = [3, 1, 2, 1, 4, 2, 2, 3, 2, 1, 2, 3, 4, 1, 2], coins = 20",
        "output": "11"
      },
      {
        "input": "costs = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75], coins = 300",
        "output": "10"
      },
      {
        "input": "costs = [3,5,7,11,13,17,19,23,29,31], coins = 100",
        "output": "8"
      },
      {
        "input": "costs = [1] * 100000, coins = 99999",
        "output": "Error: Solution.maxIceCream() missing 1 required positional argument: 'costs'"
      },
      {
        "input": "costs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], coins = 1000",
        "output": "13"
      },
      {
        "input": "costs = [100000, 1, 100000, 1, 100000, 1, 100000], coins = 100003",
        "output": "4"
      },
      {
        "input": "costs = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], coins = 100",
        "output": "10"
      },
      {
        "input": "costs = [5, 1, 3, 2, 4, 1], coins = 10",
        "output": "4"
      },
      {
        "input": "costs = [5,3,3,2,7,8,9], coins = 15",
        "output": "4"
      },
      {
        "input": "costs = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000], coins = 500000",
        "output": "9"
      },
      {
        "input": "costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], coins = 100",
        "output": "13"
      },
      {
        "input": "costs = [99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999], coins = 1000000",
        "output": "10"
      },
      {
        "input": "costs = [1,1,1,1,1,1,1,1,1,1], coins = 5",
        "output": "5"
      },
      {
        "input": "costs = [100000, 50000, 25000, 12500, 6250, 3125, 1562, 781, 390, 195], coins = 150000",
        "output": "9"
      },
      {
        "input": "costs = [100000] * 100000, coins = 5000000000",
        "output": "Error: Solution.maxIceCream() missing 1 required positional argument: 'costs'"
      },
      {
        "input": "costs = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], coins = 250",
        "output": "18"
      },
      {
        "input": "costs = [5,2,3,1,4,2,3,5,1,2], coins = 15",
        "output": "7"
      },
      {
        "input": "costs = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], coins = 2500",
        "output": "6"
      },
      {
        "input": "costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], coins = 30",
        "output": "7"
      },
      {
        "input": "costs = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], coins = 60",
        "output": "10"
      },
      {
        "input": "costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], coins = 100",
        "output": "13"
      }
    ]
  },
  {
    "id": 2938,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Two Pointers",
      "String"
    ],
    "problemDescription": "There are n balls on a table, each ball has a color black or white.\nYou are given a 0-indexed binary string s of length n, where 1 and 0 represent black and white balls, respectively.\nIn each step, you can choose two adjacent balls and swap them.\nReturn the minimum number of steps to group all the black balls to the right and all the white balls to the left.\n\u00a0\nExample 1:\n\nInput: s = \"101\"\nOutput: 1\nExplanation: We can group all the black balls to the right in the following way:\n- Swap s[0] and s[1], s = \"011\".\nInitially, 1s are not grouped together, requiring at least 1 step to group them to the right.\nExample 2:\n\nInput: s = \"100\"\nOutput: 2\nExplanation: We can group all the black balls to the right in the following way:\n- Swap s[0] and s[1], s = \"010\".\n- Swap s[1] and s[2], s = \"001\".\nIt can be proven that the minimum number of steps needed is 2.\n\nExample 3:\n\nInput: s = \"0111\"\nOutput: 0\nExplanation: All the black balls are already grouped to the right.\n\n\u00a0\nConstraints:\n\n1 <= n == s.length <= 105\ns[i] is either '0' or '1'.\n\n",
    "starterCode": "class Solution:\n    def minimumSteps(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"110100\"",
        "output": "8"
      },
      {
        "input": "s = \"1111\"",
        "output": "0"
      },
      {
        "input": "s = \"100100101\"",
        "output": "9"
      },
      {
        "input": "s = \"110011\"",
        "output": "4"
      },
      {
        "input": "s = \"00110011\"",
        "output": "4"
      },
      {
        "input": "s = \"11110000\"",
        "output": "16"
      },
      {
        "input": "s = \"0000\"",
        "output": "0"
      },
      {
        "input": "s = \"0111\"",
        "output": "0"
      },
      {
        "input": "s = \"111000\"",
        "output": "9"
      },
      {
        "input": "s = \"100\"",
        "output": "2"
      },
      {
        "input": "s = \"00001111\"",
        "output": "0"
      },
      {
        "input": "s = \"000111\"",
        "output": "0"
      },
      {
        "input": "s = \"101\"",
        "output": "1"
      },
      {
        "input": "s = \"1001001001\"",
        "output": "12"
      },
      {
        "input": "s = \"11111\"",
        "output": "0"
      },
      {
        "input": "s = \"01010101\"",
        "output": "6"
      },
      {
        "input": "s = \"10101010\"",
        "output": "10"
      },
      {
        "input": "s = \"1010101010\"",
        "output": "15"
      },
      {
        "input": "s = \"010101\"",
        "output": "3"
      },
      {
        "input": "s = \"101010\"",
        "output": "6"
      },
      {
        "input": "s = \"1101001\"",
        "output": "8"
      },
      {
        "input": "s = \"11001100\"",
        "output": "12"
      },
      {
        "input": "s = \"0101010101\"",
        "output": "10"
      },
      {
        "input": "s = \"00000\"",
        "output": "0"
      },
      {
        "input": "s = \"101010101010101010\"",
        "output": "45"
      },
      {
        "input": "s = \"11111111110000000000000000000000111111111100000000000000000\"",
        "output": "560"
      },
      {
        "input": "s = \"1111111111111111111110\"",
        "output": "21"
      },
      {
        "input": "s = \"010101010101010101010101010101010101010101010101010101010101010101010101010101010\"",
        "output": "820"
      },
      {
        "input": "s = \"111000111000111000\"",
        "output": "54"
      },
      {
        "input": "s = \"010101010101010101010101010101010101\"",
        "output": "153"
      },
      {
        "input": "s = \"000000000000000000000000000000111111\"",
        "output": "0"
      },
      {
        "input": "s = \"1000001000001000001000001000\"",
        "output": "65"
      },
      {
        "input": "s = \"0110110110110110110110110110\"",
        "output": "90"
      },
      {
        "input": "s = \"00101011010\"",
        "output": "12"
      },
      {
        "input": "s = \"0000000000000000000000001111\"",
        "output": "0"
      },
      {
        "input": "s = \"1111111111111111111111110000\"",
        "output": "96"
      },
      {
        "input": "s = \"110110110110110110110110110110110110110110110110110110110110110\"",
        "output": "462"
      },
      {
        "input": "s = \"000111000111000111000111000111000111\"",
        "output": "135"
      },
      {
        "input": "s = \"10101010101010101010101010\"",
        "output": "91"
      },
      {
        "input": "s = \"00001111000011110000\"",
        "output": "48"
      },
      {
        "input": "s = \"11111111111100000000\"",
        "output": "96"
      },
      {
        "input": "s = \"11110000000000111100\"",
        "output": "56"
      },
      {
        "input": "s = \"101010101010101010101010\"",
        "output": "78"
      },
      {
        "input": "s = \"0000000000\"",
        "output": "0"
      },
      {
        "input": "s = \"101010101010101010101010101\"",
        "output": "91"
      },
      {
        "input": "s = \"1101101101101101101101101101\"",
        "output": "90"
      },
      {
        "input": "s = \"0000000000000000000001\"",
        "output": "0"
      },
      {
        "input": "s = \"1001001001001001001001001001001001001\"",
        "output": "156"
      },
      {
        "input": "s = \"011011011011011011011011011011011011011011011011011011011011011\"",
        "output": "420"
      },
      {
        "input": "s = \"0001110001110001110001110001\"",
        "output": "90"
      },
      {
        "input": "s = \"000111000111000111000111\"",
        "output": "54"
      },
      {
        "input": "s = \"100100100100100100100\"",
        "output": "56"
      },
      {
        "input": "s = \"0111110111110111110111110111\"",
        "output": "50"
      },
      {
        "input": "s = \"10000000000000000000\"",
        "output": "19"
      },
      {
        "input": "s = \"111000111000111000111000111000111000\"",
        "output": "189"
      },
      {
        "input": "s = \"0101010101010101010101\"",
        "output": "55"
      },
      {
        "input": "s = \"00000000000000000000000000000000111111\"",
        "output": "0"
      },
      {
        "input": "s = \"0011001100110011\"",
        "output": "24"
      },
      {
        "input": "s = \"0000000000000000000000000000111111\"",
        "output": "0"
      },
      {
        "input": "s = \"00001111000011110000111100001111000011110000111100001111\"",
        "output": "336"
      },
      {
        "input": "s = \"00000001111111111111\"",
        "output": "0"
      },
      {
        "input": "s = \"0010010010010010010010010010\"",
        "output": "81"
      },
      {
        "input": "s = \"1001001001001001001001001001001\"",
        "output": "110"
      },
      {
        "input": "s = \"11110000111100001111\"",
        "output": "48"
      },
      {
        "input": "s = \"01010101010101010101010101\"",
        "output": "78"
      },
      {
        "input": "s = \"1111100000000000\"",
        "output": "55"
      },
      {
        "input": "s = \"10101010101010101010101010101010101010101010101010101010\"",
        "output": "406"
      },
      {
        "input": "s = \"100100100100100\"",
        "output": "30"
      },
      {
        "input": "s = \"10101001010101010101\"",
        "output": "48"
      },
      {
        "input": "s = \"0110110110110110110110\"",
        "output": "56"
      },
      {
        "input": "s = \"0000011111\"",
        "output": "0"
      },
      {
        "input": "s = \"11111111111111111111\"",
        "output": "0"
      },
      {
        "input": "s = \"00000000000000000000000000000000000000000000000000000000000000001\"",
        "output": "0"
      },
      {
        "input": "s = \"01101101101101101101101101\"",
        "output": "72"
      },
      {
        "input": "s = \"01010101010101010101010101010101010101010101010101010101010101010101\"",
        "output": "561"
      },
      {
        "input": "s = \"0000111111\"",
        "output": "0"
      },
      {
        "input": "s = \"111000000000\"",
        "output": "27"
      },
      {
        "input": "s = \"0000000000000000000000111111\"",
        "output": "0"
      },
      {
        "input": "s = \"001100110011\"",
        "output": "12"
      },
      {
        "input": "s = \"1110000000000000000000000000\"",
        "output": "75"
      },
      {
        "input": "s = \"001001001001001001001001001001001\"",
        "output": "110"
      },
      {
        "input": "s = \"01010110101010101010\"",
        "output": "52"
      },
      {
        "input": "s = \"00000000001111111111\"",
        "output": "0"
      },
      {
        "input": "s = \"101010101010101010101010101010101010101010101010101010101010101010101010\"",
        "output": "666"
      },
      {
        "input": "s = \"100000000001\"",
        "output": "10"
      },
      {
        "input": "s = \"100000100001000010001000010000100001\"",
        "output": "109"
      },
      {
        "input": "s = \"0000000000001111111111111111111111111111111111111111111\"",
        "output": "0"
      },
      {
        "input": "s = \"11111111110000000000\"",
        "output": "100"
      },
      {
        "input": "s = \"11100011100011100011\"",
        "output": "54"
      },
      {
        "input": "s = \"10010010010010010010\"",
        "output": "49"
      },
      {
        "input": "s = \"1010101010101010101010101010\"",
        "output": "105"
      },
      {
        "input": "s = \"00000000000000000000000000000000000000000000000000\"",
        "output": "0"
      },
      {
        "input": "s = \"000111111100000000\"",
        "output": "56"
      },
      {
        "input": "s = \"1001001001001001001001\"",
        "output": "56"
      },
      {
        "input": "s = \"00000000000000000000000000000000000000000000\"",
        "output": "0"
      },
      {
        "input": "s = \"11110000111100001111000011110000111100001111000011110000\"",
        "output": "448"
      },
      {
        "input": "s = \"011001100110011001100110011001100110\"",
        "output": "162"
      },
      {
        "input": "s = \"1111111000000000000000000000\"",
        "output": "147"
      },
      {
        "input": "s = \"11111000011110000111\"",
        "output": "56"
      },
      {
        "input": "s = \"000011111111111111110000\"",
        "output": "64"
      },
      {
        "input": "s = \"01100110011001100110\"",
        "output": "50"
      },
      {
        "input": "s = \"111110000111100001111\"",
        "output": "56"
      },
      {
        "input": "s = \"11011011011011011011\"",
        "output": "42"
      },
      {
        "input": "s = \"10000000001111111111100000000000111111111111100000000000\"",
        "output": "416"
      },
      {
        "input": "s = \"00000000001111111111111111111111000000000011111111111111111\"",
        "output": "220"
      },
      {
        "input": "s = \"1111111111111111111111111111\"",
        "output": "0"
      },
      {
        "input": "s = \"1110001110001110001110001110\"",
        "output": "105"
      },
      {
        "input": "s = \"00000100000100000100\"",
        "output": "21"
      },
      {
        "input": "s = \"0101010101010101010101010101\"",
        "output": "91"
      },
      {
        "input": "s = \"11111111111111111111111111111111111111111111\"",
        "output": "0"
      },
      {
        "input": "s = \"0110101010101010101010101010101010101010101010101010\"",
        "output": "350"
      },
      {
        "input": "s = \"10001000100010001000\"",
        "output": "45"
      },
      {
        "input": "s = \"11111111111111111111111111111111111111111111111111\"",
        "output": "0"
      },
      {
        "input": "s = \"01001001001001001001\"",
        "output": "42"
      },
      {
        "input": "s = \"00110011001100110011\"",
        "output": "40"
      },
      {
        "input": "s = \"1001001001001001001001001001001001001001001001001001001001\"",
        "output": "380"
      },
      {
        "input": "s = \"0010010010\"",
        "output": "9"
      },
      {
        "input": "s = \"01010101010101010101010101010101010101010101010101010101010101\"",
        "output": "465"
      },
      {
        "input": "s = \"111111000000000000000000000000000000\"",
        "output": "180"
      },
      {
        "input": "s = \"00000111100001111000\"",
        "output": "40"
      },
      {
        "input": "s = \"100101001010101010\"",
        "output": "40"
      },
      {
        "input": "s = \"00000000000000000000\"",
        "output": "0"
      },
      {
        "input": "s = \"00110011001100110011001100110011001100\"",
        "output": "180"
      },
      {
        "input": "s = \"1001001001001001001001001\"",
        "output": "72"
      },
      {
        "input": "s = \"0000000000000001\"",
        "output": "0"
      },
      {
        "input": "s = \"111110000000000000000000000000000000\"",
        "output": "155"
      },
      {
        "input": "s = \"0110001100001111\"",
        "output": "22"
      },
      {
        "input": "s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010\"",
        "output": "741"
      },
      {
        "input": "s = \"1010101010101010101010\"",
        "output": "66"
      },
      {
        "input": "s = \"1111111111\"",
        "output": "0"
      },
      {
        "input": "s = \"110011001100110011001100110011001100\"",
        "output": "180"
      },
      {
        "input": "s = \"0000000000000000011111111111111\"",
        "output": "0"
      },
      {
        "input": "s = \"00011100011100011100\"",
        "output": "45"
      },
      {
        "input": "s = \"11101110111011101110\"",
        "output": "45"
      },
      {
        "input": "s = \"001001001001001001001001001001001001001001001001001001001001001001\"",
        "output": "462"
      },
      {
        "input": "s = \"11100000011\"",
        "output": "18"
      },
      {
        "input": "s = \"1111110000000000000000000000000000000000000000000000000\"",
        "output": "294"
      },
      {
        "input": "s = \"1010101010101010101010101010101010101010101010101010\"",
        "output": "351"
      },
      {
        "input": "s = \"110011001100110011001100110011\"",
        "output": "112"
      },
      {
        "input": "s = \"01010101010101010101\"",
        "output": "45"
      },
      {
        "input": "s = \"1001001001001001001001001001\"",
        "output": "90"
      },
      {
        "input": "s = \"1000011110000111100001\"",
        "output": "60"
      },
      {
        "input": "s = \"101010101010101010101010101010101010\"",
        "output": "171"
      },
      {
        "input": "s = \"011111111111111111111111111111111111\"",
        "output": "0"
      },
      {
        "input": "s = \"110110110110110\"",
        "output": "30"
      },
      {
        "input": "s = \"10101010101010101010\"",
        "output": "55"
      },
      {
        "input": "s = \"111000111000111000111000\"",
        "output": "90"
      },
      {
        "input": "s = \"1000010000100001000010000100001\"",
        "output": "84"
      },
      {
        "input": "s = \"0111100001110000111000\"",
        "output": "74"
      },
      {
        "input": "s = \"0000000000000000000000000000\"",
        "output": "0"
      },
      {
        "input": "s = \"000111000111000\"",
        "output": "27"
      },
      {
        "input": "s = \"0000111100001111\"",
        "output": "16"
      }
    ]
  },
  {
    "id": 148,
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Divide and Conquer",
      "Sorting",
      "Merge Sort"
    ],
    "problemDescription": "Given the head of a linked list, return the list after sorting it in ascending order.\n\u00a0\nExample 1:\n\n\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\nExample 2:\n\n\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n\nExample 3:\n\nInput: head = []\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [0, 5 * 104].\n-105 <= Node.val <= 105\n\n\u00a0\nFollow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "head = [1,-1,2,-2,3,-3,4,-4,5,-5]",
        "output": "[-5, -4, -3, -2, -1, 1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [5,4,3,2,1]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [0,0,0,0]",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "head = [-1,5,3,4,0]",
        "output": "[-1, 0, 3, 4, 5]"
      },
      {
        "input": "head = [1,3,2,5,4,7,6,9,8,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [0,0,0,0,0]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "head = []",
        "output": "None"
      },
      {
        "input": "head = [1]",
        "output": "[1]"
      },
      {
        "input": "head = [1,2,3,4,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [100000,-100000,0,50000,-50000]",
        "output": "[-100000, -50000, 0, 50000, 100000]"
      },
      {
        "input": "head = [10,-10,20,-20,30,-30]",
        "output": "[-30, -20, -10, 10, 20, 30]"
      },
      {
        "input": "head = [-100000,100000,-100000,100000]",
        "output": "[-100000, -100000, 100000, 100000]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [100000,-100000,0]",
        "output": "[-100000, 0, 100000]"
      },
      {
        "input": "head = [4,2,1,3]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [5]",
        "output": "[5]"
      },
      {
        "input": "head = [1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]"
      },
      {
        "input": "head = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10]",
        "output": "[1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [25000, 25001, 25002, 25003, 25004, 25005, 25006, 25007, 25008, 25009, 25010, 25011, 25012, 25013, 25014]",
        "output": "[25000, 25001, 25002, 25003, 25004, 25005, 25006, 25007, 25008, 25009, 25010, 25011, 25012, 25013, 25014]"
      },
      {
        "input": "head = [1000,500,250,125,62,31,15,7,3,1]",
        "output": "[1, 3, 7, 15, 31, 62, 125, 250, 500, 1000]"
      },
      {
        "input": "head = [5,1,9,3,7,2,8,6,4,0]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [5, 3, 1, 4, 2, 7, 6, 9, 8, 10, 0, -1, -2, -3, -4, -5]",
        "output": "[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [20,18,16,14,12,10,8,6,4,2,19,17,15,13,11,9,7,5,3,1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000,950,850,750,650,550,450,350,250,150,50]",
        "output": "[50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000]"
      },
      {
        "input": "head = [50000, -50000, 100000, -100000, 150000, -150000, 200000, -200000, 250000, -250000, 300000, -300000]",
        "output": "[-300000, -250000, -200000, -150000, -100000, -50000, 50000, 100000, 150000, 200000, 250000, 300000]"
      },
      {
        "input": "head = [5,4,3,2,1,10,9,8,7,6,15,14,13,12,11]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [100000,90000,80000,70000,60000,50000,40000,30000,20000,10000,0,-10000,-20000,-30000,-40000,-50000,-60000,-70000,-80000,-90000]",
        "output": "[-90000, -80000, -70000, -60000, -50000, -40000, -30000, -20000, -10000, 0, 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]"
      },
      {
        "input": "head = [5,1,9,2,8,3,7,4,6,0]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [5,1,4,2,8,3,7,6,9,10,11,12,13,14,15]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [1000000, 100000, 10000, 1000, 100, 10, 1, 0, -1, -10, -100, -1000, -10000, -100000, -1000000]",
        "output": "[-1000000, -100000, -10000, -1000, -100, -10, -1, 0, 1, 10, 100, 1000, 10000, 100000, 1000000]"
      },
      {
        "input": "head = [5,1,4,2,8,5,1,4,2,8]",
        "output": "[1, 1, 2, 2, 4, 4, 5, 5, 8, 8]"
      },
      {
        "input": "head = [-99999,-99998,-99997,-99996,-99995,-99994,-99993,-99992,-99991,-99990]",
        "output": "[-99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991, -99990]"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]"
      },
      {
        "input": "head = [1,10,100,1000,10000,100000,-1,-10,-100,-1000,-10000,-100000]",
        "output": "[-100000, -10000, -1000, -100, -10, -1, 1, 10, 100, 1000, 10000, 100000]"
      },
      {
        "input": "head = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [-100000,-99999,-99998,-99997,-99996,-99995,-99994,-99993,-99992,-99991,-99990]",
        "output": "[-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991, -99990]"
      },
      {
        "input": "head = [100000,50000,25000,12500,6250,3125,1562,781,390,195,97,48,24,12,6,3,1,-1,-3,-6,-12,-24,-48,-97,-195,-390,-781,-1562,-3125,-6250,-12500,-25000,-50000,-100000]",
        "output": "[-100000, -50000, -25000, -12500, -6250, -3125, -1562, -781, -390, -195, -97, -48, -24, -12, -6, -3, -1, 1, 3, 6, 12, 24, 48, 97, 195, 390, 781, 1562, 3125, 6250, 12500, 25000, 50000, 100000]"
      },
      {
        "input": "head = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [-100000,100000,-99999,99999,-99998,99998,-99997,99997,-99996,99996,-99995,99995]",
        "output": "[-100000, -99999, -99998, -99997, -99996, -99995, 99995, 99996, 99997, 99998, 99999, 100000]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [100000,100000,100000,100000,100000,100000,100000,100000,100000,100000]",
        "output": "[100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]"
      },
      {
        "input": "head = [10,20,30,40,50,1,2,3,4,5]",
        "output": "[1, 2, 3, 4, 5, 10, 20, 30, 40, 50]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [1,0,-1,2,-2,3,-3,4,-4,5]",
        "output": "[-4, -3, -2, -1, 0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [1000,900,800,700,600,500,400,300,200,100,0,-100,-200,-300,-400,-500,-600,-700,-800,-900,-1000]",
        "output": "[-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]"
      },
      {
        "input": "head = [1,9,2,8,3,7,4,6,5,0]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
        "output": "[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [100000,99999,99998,99997,99996,99995,99994,99993,99992,99991,99990]",
        "output": "[99990, 99991, 99992, 99993, 99994, 99995, 99996, 99997, 99998, 99999, 100000]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]"
      },
      {
        "input": "head = [5,1,9,3,7,2,8,6,4,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [50000, 50001, 50002, 50003, 50004, 49999, 49998, 49997, 49996, 49995]",
        "output": "[49995, 49996, 49997, 49998, 49999, 50000, 50001, 50002, 50003, 50004]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9]",
        "output": "[-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [-1, 0, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]",
        "output": "[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [-50000,-40000,-30000,-20000,-10000,0,10000,20000,30000,40000,50000]",
        "output": "[-50000, -40000, -30000, -20000, -10000, 0, 10000, 20000, 30000, 40000, 50000]"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [23,8,45,78,1,3,89,4,2,67,43,90,12,34,56,78,9,10,21,11,13,14,15,16,17,18,19,20]",
        "output": "[1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 34, 43, 45, 56, 67, 78, 78, 89, 90]"
      },
      {
        "input": "head = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,10,-1,-2,-3,-4,-5,-6,-7,-8,-9]",
        "output": "[-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991]",
        "output": "[-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991]"
      },
      {
        "input": "head = [5,2,9,1,5,6,3,8,4,7,1,5,6,3,8,4,7]",
        "output": "[1, 1, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9]"
      },
      {
        "input": "head = [1,-2,3,-4,5,-6,7,-8,9,-10,11,-12,13,-14,15,-15]",
        "output": "[-15, -14, -12, -10, -8, -6, -4, -2, 1, 3, 5, 7, 9, 11, 13, 15]"
      },
      {
        "input": "head = [1, 3, 2, 5, 4, 7, 6, 9, 8, 10, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
        "output": "[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [10, 1, 20, 2, 30, 3, 40, 4, 50, 5, 60, 6, 70, 7, 80, 8, 90, 9]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1,-1,2,-2,3,-3,4,-4,5,-5,6,-6,7,-7,8,-8]",
        "output": "[-8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]"
      },
      {
        "input": "head = [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]"
      },
      {
        "input": "head = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [1,10,2,9,3,8,4,7,5,6,11,20,12,19,13,18,14,17,15,16]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [100000,99999,99998,99997,99996,99995,99994,99993,99992,99991]",
        "output": "[99991, 99992, 99993, 99994, 99995, 99996, 99997, 99998, 99999, 100000]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [10000,1000,100,10,1,0,-1,-10,-100,-1000,-10000]",
        "output": "[-10000, -1000, -100, -10, -1, 0, 1, 10, 100, 1000, 10000]"
      },
      {
        "input": "head = [10000,9999,9998,9997,9996,9995,9994,9993,9992,9991,9990,9989,9988,9987,9986,9985,9984,9983,9982,9981]",
        "output": "[9981, 9982, 9983, 9984, 9985, 9986, 9987, 9988, 9989, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999, 10000]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,2,4,6,8,10,12,14,16,18,20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]",
        "output": "[99991, 99992, 99993, 99994, 99995, 99996, 99997, 99998, 99999, 100000]"
      },
      {
        "input": "head = [5,4,3,2,1,0,-1,-2,-3,-4,-5]",
        "output": "[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [-100000,-99999,-99998,-99997,-99996,-99995,-99994,-99993,-99992,-99991]",
        "output": "[-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991]"
      },
      {
        "input": "head = [2,1,4,3,6,5,8,7,10,9,12,11,14,13,16,15,18,17,20,19,22,21,24,23,25]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "head = [5,-5,5,-5,5,-5,5,-5,5,-5,5,-5,5,-5,5,-5,5,-5,5,-5]",
        "output": "[-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [5,-5,10,-10,15,-15,20,-20,25,-25,30,-30]",
        "output": "[-30, -25, -20, -15, -10, -5, 5, 10, 15, 20, 25, 30]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,5,15,25,35,45,55,65,75,85,95]",
        "output": "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]"
      },
      {
        "input": "head = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [1,5,9,13,17,2,6,10,14,18,3,7,11,15,19,4,8,12,16,20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [9,3,7,1,5,13,11,2,6,12,8,4,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]"
      }
    ]
  },
  {
    "id": 333,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Dynamic Programming",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree, find the largest subtree, which is also a Binary Search Tree (BST), where the largest means subtree has the largest number of nodes.\nA Binary Search Tree (BST) is a tree in which all the nodes follow the below-mentioned properties:\n\nThe left subtree values are less than the value of their parent (root) node's value.\nThe right subtree values are greater than the value of their parent (root) node's value.\n\nNote: A subtree must include all of its descendants.\n\u00a0\nExample 1:\n\n\nInput: root = [10,5,15,1,8,null,7]\nOutput: 3\nExplanation: The Largest BST Subtree in this case is the highlighted one. The return value is the subtree's size, which is 3.\nExample 2:\n\nInput: root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1]\nOutput: 2\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n-104 <= Node.val <= 104\n\n\u00a0\nFollow up: Can you figure out ways to solve it with O(n) time complexity?\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def largestBSTSubtree(self, root: Optional[TreeNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "1"
      },
      {
        "input": "root = [5,4,6,null,null,3,7]",
        "output": "3"
      },
      {
        "input": "root = [3,1,4,null,null,2]",
        "output": "2"
      },
      {
        "input": "root = [10,5,15,1,8,null,7]",
        "output": "3"
      },
      {
        "input": "root = [5,1,4,null,null,3,6]",
        "output": "3"
      },
      {
        "input": "root = [3,1,5,0,2,4,6]",
        "output": "7"
      },
      {
        "input": "root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1]",
        "output": "2"
      },
      {
        "input": "root = []",
        "output": "0"
      },
      {
        "input": "root = [3,2,1]",
        "output": "1"
      },
      {
        "input": "root = [5,4,6,null,null,7,8]",
        "output": "1"
      },
      {
        "input": "root = [2,1,3]",
        "output": "3"
      },
      {
        "input": "root = [30,10,20,5,15,null,null,null,null,13,18]",
        "output": "5"
      },
      {
        "input": "root = [1]",
        "output": "1"
      },
      {
        "input": "root = [1,null,2,null,3]",
        "output": "3"
      },
      {
        "input": "root = [50,30,60,5,20,45,70,0,10,null,null,35,50,65,75]",
        "output": "7"
      },
      {
        "input": "root = [20,10,30,5,15,null,null,3,7,12,18,null,null,null,null,null,25,27,35,40,null,null,null,null,null,null,null,null,null,null,22]",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,1,8,7,18,0,6,null,null,3,9,null,null,null,null,2]",
        "output": "5"
      },
      {
        "input": "root = [50,10,60,5,20,55,70,2,8,null,30,null,51,65,75]",
        "output": "6"
      },
      {
        "input": "root = [30,10,50,5,20,45,60,1,null,15,25,40,48,55,70]",
        "output": "14"
      },
      {
        "input": "root = [10,5,15,3,7,12,20,1,4,6,8,11,13,18,25,null,9]",
        "output": "7"
      },
      {
        "input": "root = [10,5,15,3,7,12,20,1,4,6,8,11,null,14,18,25,null,9]",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,1,8,12,20,null,null,6,9,null,14,18,25]",
        "output": "12"
      },
      {
        "input": "root = [20,10,30,5,15,null,35,2,null,7,null,25,38,null,null,32,40,null,null,null,null]",
        "output": "3"
      },
      {
        "input": "root = [50,30,60,5,20,45,70,null,null,10,25,null,null,35,47,65,80,1,null,null,null,null,null,null,null,null,null,62,67]",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,4,6,9,3,2,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,1,8,12,20,0,4,null,null,11,14,null,7]",
        "output": "5"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,null,null,6,9]",
        "output": "8"
      },
      {
        "input": "root = [10,5,15,1,null,6,20]",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,null,null,4,null,null,5]",
        "output": "2"
      },
      {
        "input": "root = [10,5,15,1,8,12,20,0,3,7,null,null,11,17,25,null,null,null,null,null,null,null,2,4,6,null,null,9,13,16,19,21,24,null,null,null,null,null,null,14,null,18,22,23,null,null,null,null,null,null,26,null,null,null,null,null,null,null,null,null,null,null]",
        "output": "6"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,4,6,9,8.5,12,11,13,10.5,10.7,10.6,10.8,10.9,11.1,11.2,11.3,11.4,11.5,11.6,11.7,11.8,11.9,12.1,12.2,12.3,12.4,12.5,12.6,12.7,12.8,12.9,13.1,13.2,13.3,13.4,13.5,13.6,13.7,13.8,13.9]",
        "output": "1"
      },
      {
        "input": "root = [3,2,5,null,null,4,6]",
        "output": "5"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,null,6,8,11,14,16,19]",
        "output": "14"
      },
      {
        "input": "root = [3,2,5,null,4,1,7,null,null,null,null,null,6,8,9]",
        "output": "2"
      },
      {
        "input": "root = [10,5,15,1,8,7,16,0,4,6,9,14,17,null,null,null,null,null,null,null,null,13,null,null,null,null]",
        "output": "3"
      },
      {
        "input": "root = [3,2,4,1,null,null,5]",
        "output": "5"
      },
      {
        "input": "root = [50,30,60,5,20,55,70,null,null,15,35,52,65,68,75,72,73,74,76,77]",
        "output": "3"
      },
      {
        "input": "root = [50,30,60,5,20,null,70,null,null,15,35]",
        "output": "3"
      },
      {
        "input": "root = [50,30,60,5,20,55,70,null,null,15,35,52,65,68,75]",
        "output": "3"
      },
      {
        "input": "root = [50,30,60,20,40,55,70,15,null,null,null,null,65,80,52]",
        "output": "4"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,3,null,9,null,16,null,null,null,2,null,null,null,null,17,null,null,null,18]",
        "output": "2"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,4,6,9,3,12,null,null,null,null,null,null,null,11,13,14]",
        "output": "8"
      },
      {
        "input": "root = [3,2,4,1,null,null,null]",
        "output": "4"
      },
      {
        "input": "root = [1,2,null,3]",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,3,7,12,20,1,4,6,8,11,null,14,null,25,null,9]",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,1,8,7,20]",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,1,8,null,20,0,null,null,9,16,25]",
        "output": "10"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,4,6,9,3,12,null,null,null,null,null,null,null,11]",
        "output": "8"
      },
      {
        "input": "root = [15,10,20,8,12,16,25,6,9,11,13,14,17,22,27]",
        "output": "7"
      },
      {
        "input": "root = [5,4,6,3,7]",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,null,null,null,null,6]",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,2,6,9]",
        "output": "7"
      },
      {
        "input": "root = [10,5,15,1,8,null,20,null,null,null,16]",
        "output": "4"
      },
      {
        "input": "root = [2,1,3,4,null,null,6]",
        "output": "2"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,12,18,23,28,33,37]",
        "output": "15"
      },
      {
        "input": "root = [15,10,20,8,12,16,25,7,9,11,13,14,18,19,23]",
        "output": "7"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,null,null,9,null,16]",
        "output": "5"
      },
      {
        "input": "root = [30,20,50,10,25,40,60,5,15,null,null,35,45,55,65,1,null,12,18,23,28,32,37,null,null,null,null,null,43,48,null,53,58,null,null,null,null,null,null,null,null,null]",
        "output": "3"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,12,18,23,28,32,37]",
        "output": "15"
      },
      {
        "input": "root = [3,1,4,null,null,2,null,null,null,5,6,7,8,9,10]",
        "output": "2"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,4,6,8,11,14,16,19]",
        "output": "15"
      },
      {
        "input": "root = [2,1,3,null,null,2,4]",
        "output": "3"
      },
      {
        "input": "root = [5,2,8,1,3,7,10,0,null,2.5,4,6,9,null,null,null,null,null,15,12,13,null,null,11]",
        "output": "2"
      },
      {
        "input": "root = [10,5,15,1,8,12,20,0,4,6,9,11,13,18,25]",
        "output": "15"
      },
      {
        "input": "root = [2,1,3,null,4,null,5,null,null,null,null]",
        "output": "2"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,12,18,22,27,32,37,1,4,6,8,11,13,16,17,19,21,23,24,26,28,29,31,33,34,36,38]",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,4,6,9,null,null,16,17,18,19,20,21,22,23,24]",
        "output": "1"
      },
      {
        "input": "root = [50,30,60,5,20,55,70,null,null,10,25,null,65,80]",
        "output": "3"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,null,7,null,18,22,27,32,40]",
        "output": "13"
      },
      {
        "input": "root = [15,10,20,8,12,16,25,4,9,11,13,14,17,22,27,2,6,null,10,null,null,null,null,18,21,24,26,28,30,null,null,5,7,null,null,19,null,23,null,29,null,null,null,null,3,1]",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,null,null,9,null,null,6,null]",
        "output": "2"
      },
      {
        "input": "root = [50,30,70,20,40,60,80,10,25,35,45,55,65,75,90,5,15,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null,32,null,null,44,null,null,null,48,null,null,null,52,null,null,null,null,62,null,null,null,null,68,null,null,null,null,null,null,72,null,null,null,null,null,null,78,null,null,null,null,85,null,null,null,95,null]",
        "output": "7"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,8,12,16,25,35,48,7,9,11,13,18,22,24,33,37,42,46,6,5,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null,null,null]",
        "output": "2"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,null,17,35,43,48,55,null,8,13,16,null,null,33,38,null,47,null,53,57,null,null,null,null,null,null,null,null,null]",
        "output": "6"
      },
      {
        "input": "root = [10,5,15,1,8,12,20,0,4,null,null,11,14,null,7,2,9,3,6,13,17,21,16,18,19,22,23,24,25,26,27,28,29,30]",
        "output": "1"
      },
      {
        "input": "root = [30,10,60,5,15,null,null,3,7,12,18]",
        "output": "9"
      },
      {
        "input": "root = [10,5,15,1,8,12,20,null,null,null,9,null,16,18,25,null,17,null,19,null,null,null,13]",
        "output": "5"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,null,null,null,null,null,20,null,null]",
        "output": "7"
      },
      {
        "input": "root = [5,-2,6,-3,-1,null,8]",
        "output": "6"
      },
      {
        "input": "root = [10,5,15,3,7,12,20,1,null,6,8,11,13,18,25]",
        "output": "14"
      },
      {
        "input": "root = [100,50,150,25,75,125,200,10,35,60,90,110,140,180,250]",
        "output": "15"
      },
      {
        "input": "root = [2,1,3,null,null,4,5]",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,3,null,9,null,16,null,null,null,2]",
        "output": "2"
      },
      {
        "input": "root = [3,2,5,null,3,null,9]",
        "output": "2"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,4,9,null,null,6,3,null]",
        "output": "1"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,13,17,23,27,33,37]",
        "output": "15"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,null,6,8,11,14,17,20]",
        "output": "14"
      },
      {
        "input": "root = [100,50,200,25,75,150,300,10,40,60,80,125,175,250,350]",
        "output": "15"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,6,null,null,3,9,null,null,null,null,2]",
        "output": "4"
      },
      {
        "input": "root = [30,15,45,10,20,35,50,5,12,18,25,40,48,55,60]",
        "output": "7"
      },
      {
        "input": "root = [5,-2,6,null,3,5,8]",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,4,6,9,8.5,12,null,null,null,null,null,null,11,null,null,null,null,null,13]",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,4,6,9,null,null,16,17,null,null,18,19,20]",
        "output": "1"
      },
      {
        "input": "root = [30,15,60,5,20,45,70,3,7,18,25,40,50,65,80,1,4,6,9,17,22,35,43,55,62,75,85,null,null,null,null,null,null,null,null,10,13,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,11]",
        "output": "3"
      },
      {
        "input": "root = [3,2,4,1,5]",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,4,6,9,null,null,null,3]",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,null,null,9,null,null,6]",
        "output": "2"
      },
      {
        "input": "root = [3,2,5,null,4,null,7]",
        "output": "2"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,null,null,null,null,9,16,14,17,null,null,null,null,null,null,null,null,18,null,null,null,null,null,19,20,21,22,23,24,25]",
        "output": "3"
      },
      {
        "input": "root = [5,3,9,2,4,7,11,null,null,null,null,6,8,10,12]",
        "output": "11"
      },
      {
        "input": "root = [30,10,50,5,15,40,60,1,7,12,18,35,45,55,65,0,4,8,11,13,17,19,33,36,44,46,54,56,64,66]",
        "output": "3"
      },
      {
        "input": "root = [50,30,60,10,55,null,80,5,null,45,58,null,90]",
        "output": "6"
      },
      {
        "input": "root = [2,1,3,null,null,4]",
        "output": "1"
      },
      {
        "input": "root = [5,3,8,2,4,7,9,1,6,null,null,null,null,null,null,null,null,10]",
        "output": "3"
      },
      {
        "input": "root = [5,3,6,2,4,5,7,1,null,null,null,null,null,null,null]",
        "output": "4"
      },
      {
        "input": "root = [3,2,4,null,null,null,5]",
        "output": "4"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,null,12,9,14]",
        "output": "2"
      },
      {
        "input": "root = [3,2,5,1,null,4,6]",
        "output": "6"
      },
      {
        "input": "root = [1,2,null,3,null,null,null,null,4,null,null,null,5,null,null,null,6,null,null,null,7,null,null,null,8]",
        "output": "1"
      },
      {
        "input": "root = [30,10,50,5,15,40,60,3,7,12,18,35,45,55,65]",
        "output": "15"
      },
      {
        "input": "root = [3,2,5,null,3,null,9,10,null,null,null,8,null]",
        "output": "2"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,80,110,140,160,180]",
        "output": "15"
      },
      {
        "input": "root = [5,3,8,2,4,6,9,1,null,null,null,null,null,null,10,null,11]",
        "output": "4"
      },
      {
        "input": "root = [10,5,15,1,8,7,20,0,6,null,null,9,16,14,17]",
        "output": "3"
      },
      {
        "input": "root = [100,50,150,25,75,125,200,10,30,60,80,110,140,180,220]",
        "output": "15"
      },
      {
        "input": "root = [10,5,15,1,8,12,20,null,null,6,9,16,25,11,14,17,22,null,null,null,null,null,null,null,null,null,null,null,21,24,27,18,19,23,26,30,28,29,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]",
        "output": "3"
      },
      {
        "input": "root = [50,30,60,5,20,45,70,null,null,10,25,40,55,65,80]",
        "output": "7"
      },
      {
        "input": "root = [10,5,15,1,8,12,20,null,null,6,9,11,14,18,25]",
        "output": "13"
      },
      {
        "input": "root = [5,3,6,2,4,1,null,1,null,null,null,null,null,null,null]",
        "output": "4"
      }
    ]
  },
  {
    "id": 2497,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Graph",
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "There is an undirected graph consisting of n nodes numbered from 0 to n - 1. You are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node.\nYou are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.\nA star graph is a subgraph of the given graph having a center node containing 0 or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges.\nThe image below shows star graphs with 3 and 4 neighbors respectively, centered at the blue node.\n\nThe star sum is the sum of the values of all the nodes present in the star graph.\nGiven an integer k, return the maximum star sum of a star graph containing at most k edges.\n\u00a0\nExample 1:\n\n\nInput: vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2\nOutput: 16\nExplanation: The above diagram represents the input graph.\nThe star graph with the maximum star sum is denoted by blue. It is centered at 3 and includes its neighbors 1 and 4.\nIt can be shown it is not possible to get a star graph with a sum greater than 16.\n\nExample 2:\n\nInput: vals = [-5], edges = [], k = 0\nOutput: -5\nExplanation: There is only one possible star graph, which is node 0 itself.\nHence, we return -5.\n\n\u00a0\nConstraints:\n\nn == vals.length\n1 <= n <= 105\n-104 <= vals[i] <= 104\n0 <= edges.length <= min(n * (n - 1) / 2, 105)\nedges[i].length == 2\n0 <= ai, bi <= n - 1\nai != bi\n0 <= k <= n - 1\n\n",
    "starterCode": "class Solution:\n    def maxStarSum(self, vals: List[int], edges: List[List[int]], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "vals = [5, -2, 3, 1], edges = [[0, 1], [0, 2], [0, 3]], k = 3",
        "output": "9"
      },
      {
        "input": "vals = [1,2,3], edges = [[0,1],[1,2]], k = 0",
        "output": "3"
      },
      {
        "input": "vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2",
        "output": "16"
      },
      {
        "input": "vals = [100,200,300,400,500], edges = [[0,1],[1,2],[2,3],[3,4]], k = 4",
        "output": "1200"
      },
      {
        "input": "vals = [-5], edges = [], k = 0",
        "output": "-5"
      },
      {
        "input": "vals = [5,6,7,8,9], edges = [[0,1],[0,2],[1,3],[1,4],[2,3],[2,4]], k = 3",
        "output": "29"
      },
      {
        "input": "vals = [1, 2, 3], edges = [[0, 1], [1, 2]], k = 0",
        "output": "3"
      },
      {
        "input": "vals = [1, 3, -2, 5], edges = [[0, 1], [1, 2], [2, 3]], k = 1",
        "output": "5"
      },
      {
        "input": "vals = [1,-1,1,-1,1], edges = [[0,1],[1,2],[2,3],[3,4]], k = 1",
        "output": "1"
      },
      {
        "input": "vals = [100,200,300,400,500], edges = [[0,1],[1,2],[2,3],[3,4],[4,0]], k = 5",
        "output": "1200"
      },
      {
        "input": "vals = [-1,-2,-3,-4,-5], edges = [[0,1],[1,2],[2,3],[3,4]], k = 2",
        "output": "-1"
      },
      {
        "input": "vals = [1,2,3], edges = [[0,1],[1,2]], k = 1",
        "output": "5"
      },
      {
        "input": "vals = [5,5,5,5], edges = [[0,1],[1,2],[2,3]], k = 3",
        "output": "15"
      },
      {
        "input": "vals = [100,-200,300,400,-500], edges = [[0,1],[1,2],[2,3],[3,4]], k = 1",
        "output": "700"
      },
      {
        "input": "vals = [10,-10,20,-20,30,-30], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]], k = 2",
        "output": "30"
      },
      {
        "input": "vals = [5,5,5,5], edges = [[0,1],[1,2],[2,3],[3,0]], k = 3",
        "output": "15"
      },
      {
        "input": "vals = [-10,-20,-30,-40], edges = [[0,1],[1,2],[2,3]], k = 1",
        "output": "-10"
      },
      {
        "input": "vals = [5,5,5,5,5], edges = [[0,1],[0,2],[0,3],[0,4]], k = 3",
        "output": "20"
      },
      {
        "input": "vals = [10,-1,2,3,-4], edges = [[0,1],[0,2],[0,3],[0,4]], k = 2",
        "output": "15"
      },
      {
        "input": "vals = [1,1,1,1,1,1,1,1,1,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], k = 5",
        "output": "3"
      },
      {
        "input": "vals = [10, 20, 30, -40, 50], edges = [[0,1],[1,2],[2,3],[3,4],[4,0],[0,2]], k = 3",
        "output": "110"
      },
      {
        "input": "vals = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 0], [0, 2], [2, 4], [4, 6], [6, 8], [8, 0]], k = 5",
        "output": "350"
      },
      {
        "input": "vals = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], k = 3",
        "output": "-1"
      },
      {
        "input": "vals = [100, 200, 300, 400, 500, 600], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], k = 2",
        "output": "1500"
      },
      {
        "input": "vals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 9]], k = 4",
        "output": "0"
      },
      {
        "input": "vals = [100, 200, 300, 400, 500], edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 2], [2, 3], [3, 4]], k = 4",
        "output": "1500"
      },
      {
        "input": "vals = [5, -1, 3, 9, 2, -6, 7], edges = [[0, 1], [0, 2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 6]], k = 3",
        "output": "13"
      },
      {
        "input": "vals = [100, -50, 20, -10, 5], edges = [[0, 1], [0, 2], [0, 3], [0, 4]], k = 3",
        "output": "125"
      },
      {
        "input": "vals = [-5, -3, -10, -4, -1], edges = [[0,1],[0,2],[1,2],[1,3],[2,4]], k = 2",
        "output": "-1"
      },
      {
        "input": "vals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], k = 10",
        "output": "27"
      },
      {
        "input": "vals = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], k = 5",
        "output": "3"
      },
      {
        "input": "vals = [-10, 20, -30, 40, -50, 60], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 0]], k = 4",
        "output": "70"
      },
      {
        "input": "vals = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 9], [0, 8], [0, 7], [0, 6], [0, 5], [0, 4], [0, 3], [0, 2]], k = 3",
        "output": "140"
      },
      {
        "input": "vals = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], k = 5",
        "output": "270"
      },
      {
        "input": "vals = [5, -1, 3, 7, 9, -2], edges = [[0, 1], [0, 2], [1, 3], [2, 4], [3, 4], [4, 5]], k = 3",
        "output": "19"
      },
      {
        "input": "vals = [10, 20, 30, 40, 50], edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]], k = 2",
        "output": "120"
      },
      {
        "input": "vals = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9]], k = 5",
        "output": "6"
      },
      {
        "input": "vals = [-10, -20, -30, -40, -50], edges = [[0,1],[1,2],[2,3],[3,4],[4,0]], k = 2",
        "output": "-10"
      },
      {
        "input": "vals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 0]], k = 5",
        "output": "0"
      },
      {
        "input": "vals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]], k = 7",
        "output": "42"
      },
      {
        "input": "vals = [5, -3, 8, 0, 2], edges = [[0, 1], [0, 2], [1, 3], [2, 3], [3, 4]], k = 3",
        "output": "13"
      },
      {
        "input": "vals = [5, 1, 3, 7, 9, 2, 8, 6], edges = [[0, 1], [0, 2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7]], k = 3",
        "output": "20"
      },
      {
        "input": "vals = [10, 20, 30, 40, 50], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0], [0, 2], [1, 3], [2, 4]], k = 2",
        "output": "120"
      },
      {
        "input": "vals = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 0]], k = 5",
        "output": "3"
      },
      {
        "input": "vals = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], k = 3",
        "output": "-10"
      },
      {
        "input": "vals = [-10, -20, -30, -40, -50], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]], k = 4",
        "output": "-10"
      },
      {
        "input": "vals = [5, 15, 25, 35, 45, 55], edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0]], k = 4",
        "output": "135"
      },
      {
        "input": "vals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]], k = 3",
        "output": "24"
      },
      {
        "input": "vals = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], k = 2",
        "output": "210"
      },
      {
        "input": "vals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], k = 2",
        "output": "0"
      },
      {
        "input": "vals = [10000, -10000, 5000, -5000, 2500, -2500], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], k = 3",
        "output": "10000"
      },
      {
        "input": "vals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9]], k = 4",
        "output": "35"
      },
      {
        "input": "vals = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5], edges = [[0,1],[2,3],[4,5],[6,7],[8,9],[0,2],[1,3],[4,6],[5,7],[8,0],[9,1],[2,4],[3,5],[6,8],[7,9]], k = 3",
        "output": "12"
      },
      {
        "input": "vals = [100, 200, 300, 400, 500], edges = [[0,1],[1,2],[2,3],[3,4],[4,0]], k = 5",
        "output": "1200"
      },
      {
        "input": "vals = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], k = 3",
        "output": "2700"
      },
      {
        "input": "vals = [100, -50, 20, -30, 60, 10], edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 4], [3, 5]], k = 3",
        "output": "180"
      },
      {
        "input": "vals = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]], k = 10",
        "output": "27000"
      },
      {
        "input": "vals = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 9], [0, 5], [1, 6], [2, 7], [3, 8], [4, 9]], k = 3",
        "output": "-10"
      },
      {
        "input": "vals = [5, -5, 15, -15, 25, -25], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 0]], k = 4",
        "output": "25"
      },
      {
        "input": "vals = [1000, -1000, 2000, -2000, 3000, -3000, 4000, -4000, 5000, -5000, 6000, -6000, 7000, -7000, 8000, -8000, 9000, -9000, 10000, -10000], edges = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[0,2],[1,3],[4,6],[5,7],[8,10],[9,11],[12,14],[13,15],[16,18],[17,19]], k = 4",
        "output": "19000"
      },
      {
        "input": "vals = [100, 200, 300, 400, 500, 600, 700, 800, 900], edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], k = 5",
        "output": "2400"
      },
      {
        "input": "vals = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9]], k = 9",
        "output": "50"
      },
      {
        "input": "vals = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], edges = [], k = 3",
        "output": "-1"
      },
      {
        "input": "vals = [10, -10, 20, -20, 30, -30, 40, -40, 50, -50], edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], k = 5",
        "output": "50"
      },
      {
        "input": "vals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9]], k = 5",
        "output": "41"
      },
      {
        "input": "vals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [4, 9]], k = 4",
        "output": "21"
      },
      {
        "input": "vals = [-10, 20, 30, -40, 50, -60], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 0]], k = 4",
        "output": "50"
      },
      {
        "input": "vals = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100], edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [4, 5]], k = 3",
        "output": "130"
      },
      {
        "input": "vals = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], edges = [], k = 4",
        "output": "100"
      },
      {
        "input": "vals = [100, -100, 200, -200, 300, -300], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [0, 3], [1, 4], [2, 5]], k = 4",
        "output": "500"
      },
      {
        "input": "vals = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]], k = 10",
        "output": "3"
      },
      {
        "input": "vals = [1, -1, 1, -1, 1, -1, 1, -1, 1], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 0]], k = 3",
        "output": "2"
      },
      {
        "input": "vals = [1000, -1000, 2000, -2000, 3000, -3000, 4000, -4000, 5000, -5000], edges = [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]], k = 1",
        "output": "5000"
      },
      {
        "input": "vals = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 9]], k = 2",
        "output": "270"
      },
      {
        "input": "vals = [-10, -20, -30, -40, -50], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0], [1, 3], [2, 4]], k = 3",
        "output": "-10"
      },
      {
        "input": "vals = [5, -1, 2, 4, 6, -3], edges = [[0,1],[0,2],[0,3],[1,2],[2,3],[3,4],[4,5]], k = 3",
        "output": "17"
      },
      {
        "input": "vals = [100, -100, 200, -200, 300, -300, 400, -400, 500, -500], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 0]], k = 10",
        "output": "500"
      },
      {
        "input": "vals = [100, 200, 300, 400, 500], edges = [[0, 1], [1, 2], [2, 3], [3, 4]], k = 0",
        "output": "500"
      },
      {
        "input": "vals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 0]], k = 0",
        "output": "10"
      },
      {
        "input": "vals = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5], edges = [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [0, 2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9], [8, 0], [9, 1]], k = 4",
        "output": "12"
      },
      {
        "input": "vals = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9]], k = 3",
        "output": "-1"
      },
      {
        "input": "vals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 0]], k = 7",
        "output": "42"
      },
      {
        "input": "vals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]], k = 6",
        "output": "24"
      },
      {
        "input": "vals = [-10, -20, -30, -40, -50, -60], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], k = 0",
        "output": "-10"
      },
      {
        "input": "vals = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], k = 4",
        "output": "10000"
      },
      {
        "input": "vals = [-1000, -2000, -3000, -4000, -5000], edges = [[0, 1], [1, 2], [2, 3], [3, 4]], k = 3",
        "output": "-1000"
      },
      {
        "input": "vals = [-10, 20, 30, -40, 50], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 2], [1, 3]], k = 2",
        "output": "50"
      },
      {
        "input": "vals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [5, 9]], k = 2",
        "output": "21"
      },
      {
        "input": "vals = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], k = 3",
        "output": "270"
      },
      {
        "input": "vals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], k = 5",
        "output": "0"
      },
      {
        "input": "vals = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 0], [0, 2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]], k = 4",
        "output": "25"
      },
      {
        "input": "vals = [10, 20, 30, 40, 50], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0], [0, 2], [1, 3]], k = 3",
        "output": "140"
      },
      {
        "input": "vals = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5], edges = [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [0, 2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]], k = 5",
        "output": "12"
      },
      {
        "input": "vals = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], edges = [[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9]], k = 4",
        "output": "5"
      },
      {
        "input": "vals = [10, -10, 20, -20, 30, -30, 40, -40], edges = [[0, 1], [2, 3], [4, 5], [6, 7], [0, 2], [1, 3], [4, 6], [5, 7]], k = 2",
        "output": "70"
      },
      {
        "input": "vals = [10, -5, 20, 0, 15], edges = [[0, 1], [0, 2], [1, 3], [2, 3], [3, 4]], k = 3",
        "output": "35"
      },
      {
        "input": "vals = [50, 30, 10, -10, -30, -50, -70, 90, 110], edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[1,3],[2,4],[5,7]], k = 6",
        "output": "250"
      },
      {
        "input": "vals = [5, 15, 25, 35, 45, 55, 65], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [0, 6], [0, 3], [1, 4], [2, 5]], k = 5",
        "output": "190"
      },
      {
        "input": "vals = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [2, 6], [3, 7], [4, 8], [5, 9], [6, 7], [7, 8], [8, 9]], k = 5",
        "output": "320"
      },
      {
        "input": "vals = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], edges = [], k = 2",
        "output": "-1"
      },
      {
        "input": "vals = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 0]], k = 10",
        "output": "270"
      },
      {
        "input": "vals = [5, 10, 15, 20, 25, 30], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 0]], k = 2",
        "output": "75"
      },
      {
        "input": "vals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9]], k = 3",
        "output": "0"
      },
      {
        "input": "vals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], edges = [], k = 5",
        "output": "10"
      },
      {
        "input": "vals = [1000, -1000, 2000, -2000, 3000, -3000, 4000, -4000, 5000, -5000], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], k = 5",
        "output": "5000"
      },
      {
        "input": "vals = [-10000, 10000, -9000, 9000, -8000, 8000, -7000, 7000, -6000, 6000], edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9]], k = 2",
        "output": "10000"
      },
      {
        "input": "vals = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 9], [0, 5], [1, 6], [2, 7], [3, 8], [4, 9]], k = 5",
        "output": "310"
      }
    ]
  },
  {
    "id": 698,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Memoization",
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bitmask"
    ],
    "problemDescription": "Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.\n\u00a0\nExample 1:\n\nInput: nums = [4,3,2,3,5,2,1], k = 4\nOutput: true\nExplanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n\nExample 2:\n\nInput: nums = [1,2,3,4], k = 3\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= k <= nums.length <= 16\n1 <= nums[i] <= 104\nThe frequency of each element is in the range [1, 4].\n\n",
    "starterCode": "class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "nums = [2,2,2,2,3,4,5], k = 4",
        "output": "False"
      },
      {
        "input": "nums = [4,4,6,2,3,8,10,2,10,7], k = 4",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1], k = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4], k = 3",
        "output": "False"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8], k = 4",
        "output": "True"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10], k = 4",
        "output": "True"
      },
      {
        "input": "nums = [4,3,2,3,5,2,1], k = 4",
        "output": "True"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 16",
        "output": "True"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [9,4,4,9,2,4,5,4,5,3,2,9,10,7,4,7], k = 8",
        "output": "False"
      },
      {
        "input": "nums = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,16], k = 4",
        "output": "False"
      },
      {
        "input": "nums = [2,2,2,2,3,4,5,5,5,5,6,6,6,6,7,7], k = 7",
        "output": "False"
      },
      {
        "input": "nums = [12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27], k = 6",
        "output": "False"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], k = 16",
        "output": "True"
      },
      {
        "input": "nums = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9], k = 6",
        "output": "False"
      },
      {
        "input": "nums = [3,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 5",
        "output": "False"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0], k = 5",
        "output": "True"
      },
      {
        "input": "nums = [33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33], k = 12",
        "output": "False"
      },
      {
        "input": "nums = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], k = 8",
        "output": "False"
      },
      {
        "input": "nums = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8], k = 12",
        "output": "False"
      },
      {
        "input": "nums = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8], k = 16",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 16",
        "output": "False"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 2",
        "output": "True"
      },
      {
        "input": "nums = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15], k = 12",
        "output": "False"
      },
      {
        "input": "nums = [8,16,32,64,128,256,512,1024,1,2,3,4,5,6,7,8], k = 8",
        "output": "False"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7], k = 16",
        "output": "True"
      },
      {
        "input": "nums = [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6], k = 12",
        "output": "False"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1], k = 8",
        "output": "False"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 1",
        "output": "True"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [10,10,20,20,30,30,40,40,50,50,60,60,70,70,80,80], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6], k = 6",
        "output": "False"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3], k = 8",
        "output": "False"
      },
      {
        "input": "nums = [9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144], k = 9",
        "output": "False"
      },
      {
        "input": "nums = [10000,10000,10000,10000,10000,10000,10000,10000], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [16,16,16,16,4,4,4,4,4,4,4,4,4,4,4,4], k = 8",
        "output": "False"
      },
      {
        "input": "nums = [7,2,1,6,3,4,3,3,1,2,1,2,2,2,3,3], k = 6",
        "output": "False"
      },
      {
        "input": "nums = [9,4,5,9,8,4,5,10,3,4,6,7,1,2,8], k = 3",
        "output": "False"
      },
      {
        "input": "nums = [9,3,9,3,9,3,9,3,9,3,9,3,9,3,9,3], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 15",
        "output": "False"
      },
      {
        "input": "nums = [16,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8], k = 16",
        "output": "False"
      },
      {
        "input": "nums = [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,6,9,12,18,27,54,81,162,324,648,1296,2592,5184], k = 6",
        "output": "False"
      },
      {
        "input": "nums = [15,15,15,15,10,10,10,10,5,5,5,5,1,1,1,1], k = 6",
        "output": "False"
      },
      {
        "input": "nums = [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2], k = 16",
        "output": "False"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], k = 4",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32], k = 16",
        "output": "True"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], k = 16",
        "output": "True"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], k = 15",
        "output": "False"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7], k = 7",
        "output": "False"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 4",
        "output": "True"
      },
      {
        "input": "nums = [4,1,5,3,2,7,6,9,8,11,10,13,12,15,14,16], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], k = 4",
        "output": "True"
      },
      {
        "input": "nums = [2,2,2,2,3,4,5,5,5,5,5,5,5,5,5,5], k = 5",
        "output": "False"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48], k = 16",
        "output": "False"
      },
      {
        "input": "nums = [15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 6",
        "output": "False"
      },
      {
        "input": "nums = [1,2,3,6,9,12,15,18,21,24,27,30,33,36,39,42], k = 8",
        "output": "False"
      },
      {
        "input": "nums = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15], k = 15",
        "output": "False"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15], k = 16",
        "output": "True"
      },
      {
        "input": "nums = [7,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36], k = 16",
        "output": "False"
      },
      {
        "input": "nums = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9], k = 9",
        "output": "False"
      },
      {
        "input": "nums = [16,8,4,2,1,1,1,1,1,1,1,1,1,1,1,1], k = 10",
        "output": "False"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4], k = 4",
        "output": "True"
      },
      {
        "input": "nums = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,128], k = 16",
        "output": "False"
      },
      {
        "input": "nums = [5,5,10,10,15,15,20,20,25,25,30,30,35,35,40,40], k = 8",
        "output": "True"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160], k = 16",
        "output": "False"
      },
      {
        "input": "nums = [2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5], k = 16",
        "output": "False"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160], k = 4",
        "output": "True"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], k = 16",
        "output": "False"
      },
      {
        "input": "nums = [7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6], k = 3",
        "output": "False"
      },
      {
        "input": "nums = [12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12], k = 6",
        "output": "False"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9], k = 6",
        "output": "False"
      },
      {
        "input": "nums = [3,1,2,2,3,3,2,2,1,3,3,3,2,1,2,2], k = 6",
        "output": "False"
      },
      {
        "input": "nums = [3,5,1,1,3,2,2,3,1,1,1,1,1,1,1,1], k = 5",
        "output": "False"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 10",
        "output": "False"
      }
    ]
  },
  {
    "id": 494,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking"
    ],
    "problemDescription": "You are given an integer array nums and an integer target.\nYou want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.\n\nFor example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression \"+2-1\".\n\nReturn the number of different expressions that you can build, which evaluates to target.\n\u00a0\nExample 1:\n\nInput: nums = [1,1,1,1,1], target = 3\nOutput: 5\nExplanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n\nExample 2:\n\nInput: nums = [1], target = 1\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 20\n0 <= nums[i] <= 1000\n0 <= sum(nums[i]) <= 1000\n-1000 <= target <= 1000\n\n",
    "starterCode": "class Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [10,20,30], target = 60",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], target = 3",
        "output": "3"
      },
      {
        "input": "nums = [0,0,0,0,0], target = 0",
        "output": "32"
      },
      {
        "input": "nums = [1000], target = 1000",
        "output": "1"
      },
      {
        "input": "nums = [1], target = 1",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5], target = 10",
        "output": "0"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0], target = 0",
        "output": "1024"
      },
      {
        "input": "nums = [10,20,30,40,50], target = 100",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5], target = 3",
        "output": "3"
      },
      {
        "input": "nums = [5,5,5,5,5], target = 15",
        "output": "5"
      },
      {
        "input": "nums = [10,20,30,40,50], target = 15",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1], target = 3",
        "output": "5"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], target = 5",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], target = 1000",
        "output": "10"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], target = -250",
        "output": "20"
      },
      {
        "input": "nums = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50], target = 250",
        "output": "0"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], target = 500",
        "output": "3"
      },
      {
        "input": "nums = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400], target = 2000",
        "output": "2865"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target = 300",
        "output": "0"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], target = 3000",
        "output": "0"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], target = 1",
        "output": "524288"
      },
      {
        "input": "nums = [33, 49, 84, 43, 22, 14, 15, 57, 31, 30, 83, 84, 29, 3, 23, 76, 69, 38, 83, 12], target = 21",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 2",
        "output": "167960"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 0",
        "output": "184756"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], target = 1",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19], target = 20",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 100",
        "output": "2865"
      },
      {
        "input": "nums = [100, 50, 25, 12, 6, 3, 1], target = 100",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 2, 3, 5], target = 3",
        "output": "0"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], target = 1000",
        "output": "2865"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 5",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target = 0",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], target = 0",
        "output": "76"
      },
      {
        "input": "nums = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105], target = 525",
        "output": "0"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], target = 1500",
        "output": "31"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = -5",
        "output": "39"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 10",
        "output": "15504"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target = 250",
        "output": "20"
      },
      {
        "input": "nums = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500], target = 1000",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 10",
        "output": "15504"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], target = 250",
        "output": "20"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], target = 100",
        "output": "5126"
      },
      {
        "input": "nums = [500, 500, 500, 500, 500], target = 1000",
        "output": "0"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], target = 550",
        "output": "1969"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], target = 0",
        "output": "29504"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 0",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 10",
        "output": "15029"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5], target = 5",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = 1",
        "output": "40"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70], target = 100",
        "output": "6"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], target = -500",
        "output": "10206"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], target = 500",
        "output": "10206"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target = 20",
        "output": "0"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], target = 5000",
        "output": "0"
      },
      {
        "input": "nums = [999, 1000, 999, 1000, 999, 1000], target = 0",
        "output": "0"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], target = 2",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], target = 1000",
        "output": "2865"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1], target = 3",
        "output": "1"
      },
      {
        "input": "nums = [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25], target = 250",
        "output": "15504"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 50",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = 30",
        "output": "0"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], target = 500",
        "output": "2865"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 20",
        "output": "0"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], target = 2500",
        "output": "20"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5], target = 15",
        "output": "1062"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], target = 5",
        "output": "0"
      },
      {
        "input": "nums = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], target = 45",
        "output": "0"
      },
      {
        "input": "nums = [2, 10, 3, 5, 6, 9, 8], target = 20",
        "output": "0"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], target = 15",
        "output": "0"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], target = 15",
        "output": "0"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], target = 1500",
        "output": "31"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 0",
        "output": "184756"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], target = 1500",
        "output": "1"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 0",
        "output": "252"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 50",
        "output": "10206"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = 25",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5",
        "output": "39"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 20",
        "output": "14326"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target = 550",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 0",
        "output": "15272"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], target = 15",
        "output": "34"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = 10",
        "output": "21"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], target = 0",
        "output": "15272"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40], target = 200",
        "output": "2865"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30], target = 50",
        "output": "0"
      }
    ]
  },
  {
    "id": 1328,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "String"
    ],
    "problemDescription": "Given a palindromic string of lowercase English letters palindrome, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.\nReturn the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. For example, \"abcc\" is lexicographically smaller than \"abcd\" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.\n\u00a0\nExample 1:\n\nInput: palindrome = \"abccba\"\nOutput: \"aaccba\"\nExplanation: There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\".\nOf all the ways, \"aaccba\" is the lexicographically smallest.\n\nExample 2:\n\nInput: palindrome = \"a\"\nOutput: \"\"\nExplanation: There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string.\n\n\u00a0\nConstraints:\n\n1 <= palindrome.length <= 1000\npalindrome consists of only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def breakPalindrome(self, palindrome: str) -> str:\n        ",
    "testCases": [
      {
        "input": "palindrome = \"refer\"",
        "output": "aefer"
      },
      {
        "input": "palindrome = \"abba\"",
        "output": "aaba"
      },
      {
        "input": "palindrome = \"rotor\"",
        "output": "aotor"
      },
      {
        "input": "palindrome = \"aa\"",
        "output": "ab"
      },
      {
        "input": "palindrome = \"aba\"",
        "output": "abb"
      },
      {
        "input": "palindrome = \"a\"",
        "output": ""
      },
      {
        "input": "palindrome = \"madam\"",
        "output": "aadam"
      },
      {
        "input": "palindrome = \"abccba\"",
        "output": "aaccba"
      },
      {
        "input": "palindrome = \"racecar\"",
        "output": "aacecar"
      },
      {
        "input": "palindrome = \"moom\"",
        "output": "aoom"
      },
      {
        "input": "palindrome = \"aabaa\"",
        "output": "aabab"
      },
      {
        "input": "palindrome = \"zzz\"",
        "output": "azz"
      },
      {
        "input": "palindrome = \"xyx\"",
        "output": "ayx"
      },
      {
        "input": "palindrome = \"level\"",
        "output": "aevel"
      },
      {
        "input": "palindrome = \"aaaaa\"",
        "output": "aaaab"
      },
      {
        "input": "palindrome = \"abcdedcba\"",
        "output": "aacdedcba"
      },
      {
        "input": "palindrome = \"abcba\"",
        "output": "aacba"
      },
      {
        "input": "palindrome = \"bcb\"",
        "output": "acb"
      },
      {
        "input": "palindrome = \"noon\"",
        "output": "aoon"
      },
      {
        "input": "palindrome = \"mamad\"",
        "output": "aamad"
      },
      {
        "input": "palindrome = \"deified\"",
        "output": "aeified"
      },
      {
        "input": "palindrome = \"z\"",
        "output": ""
      },
      {
        "input": "palindrome = \"aabaaa\"",
        "output": "aaaaaa"
      },
      {
        "input": "palindrome = \"toot\"",
        "output": "aoot"
      },
      {
        "input": "palindrome = \"babababab\"",
        "output": "aabababab"
      },
      {
        "input": "palindrome = \"peep\"",
        "output": "aeep"
      },
      {
        "input": "palindrome = \"ppppppppp\"",
        "output": "apppppppp"
      },
      {
        "input": "palindrome = \"aabbaa\"",
        "output": "aaabaa"
      },
      {
        "input": "palindrome = \"abcdefghihgfedcba\"",
        "output": "aacdefghihgfedcba"
      },
      {
        "input": "palindrome = \"zzzzzzzz\"",
        "output": "azzzzzzz"
      },
      {
        "input": "palindrome = \"bbaab\"",
        "output": "abaab"
      },
      {
        "input": "palindrome = \"redder\"",
        "output": "aedder"
      },
      {
        "input": "palindrome = \"abcdefghgfedcba\"",
        "output": "aacdefghgfedcba"
      },
      {
        "input": "palindrome = \"abcdefghijklmnoponmlkjihgfedcbaedcbafghijklmnop\"",
        "output": "aacdefghijklmnoponmlkjihgfedcbaedcbafghijklmnop"
      },
      {
        "input": "palindrome = \"abacaba\"",
        "output": "aaacaba"
      },
      {
        "input": "palindrome = \"aabbccddeeffgggggeeeddccbbaa\"",
        "output": "aaabccddeeffgggggeeeddccbbaa"
      },
      {
        "input": "palindrome = \"xyzzyx\"",
        "output": "ayzzyx"
      },
      {
        "input": "palindrome = \"kayakkayak\"",
        "output": "aayakkayak"
      },
      {
        "input": "palindrome = \"repaper\"",
        "output": "aepaper"
      },
      {
        "input": "palindrome = \"aaaaaaaa\"",
        "output": "aaaaaaab"
      },
      {
        "input": "palindrome = \"ivicc\"",
        "output": "avicc"
      },
      {
        "input": "palindrome = \"abaacaaba\"",
        "output": "aaaacaaba"
      },
      {
        "input": "palindrome = \"racecarxracecar\"",
        "output": "aacecarxracecar"
      },
      {
        "input": "palindrome = \"abacdfgdcaba\"",
        "output": "aaacdfgdcaba"
      },
      {
        "input": "palindrome = \"nnnnnnnnna\"",
        "output": "annnnnnnna"
      },
      {
        "input": "palindrome = \"aaaaaaaaa\"",
        "output": "aaaaaaaab"
      },
      {
        "input": "palindrome = \"abcdddcba\"",
        "output": "aacdddcba"
      },
      {
        "input": "palindrome = \"aabbccddeeffgggeeeddccbbaa\"",
        "output": "aaabccddeeffgggeeeddccbbaa"
      },
      {
        "input": "palindrome = \"stats\"",
        "output": "atats"
      },
      {
        "input": "palindrome = \"aacaaca\"",
        "output": "aaaaaca"
      },
      {
        "input": "palindrome = \"reviver\"",
        "output": "aeviver"
      },
      {
        "input": "palindrome = \"aabbccddeedccbaa\"",
        "output": "aaabccddeedccbaa"
      },
      {
        "input": "palindrome = \"amanaplanacanalpanama\"",
        "output": "aaanaplanacanalpanama"
      },
      {
        "input": "palindrome = \"xyzyx\"",
        "output": "ayzyx"
      },
      {
        "input": "palindrome = \"ababababab\"",
        "output": "aaabababab"
      },
      {
        "input": "palindrome = \"zzzzzzzzz\"",
        "output": "azzzzzzzz"
      },
      {
        "input": "palindrome = \"abaababa\"",
        "output": "aaaababa"
      },
      {
        "input": "palindrome = \"aaaaaaaaaa\"",
        "output": "aaaaaaaaab"
      },
      {
        "input": "palindrome = \"aabbccddeedccbbaa\"",
        "output": "aaabccddeedccbbaa"
      },
      {
        "input": "palindrome = \"noonnoon\"",
        "output": "aoonnoon"
      },
      {
        "input": "palindrome = \"aabbccddeeffgggeeddccbbaa\"",
        "output": "aaabccddeeffgggeeddccbbaa"
      },
      {
        "input": "palindrome = \"reviled\"",
        "output": "aeviled"
      },
      {
        "input": "palindrome = \"aabbbaa\"",
        "output": "aaabbaa"
      },
      {
        "input": "palindrome = \"aabbccddeeffggfeeddccbbaa\"",
        "output": "aaabccddeeffggfeeddccbbaa"
      },
      {
        "input": "palindrome = \"rotator\"",
        "output": "aotator"
      },
      {
        "input": "palindrome = \"abccbaa\"",
        "output": "aaccbaa"
      },
      {
        "input": "palindrome = \"bbbbb\"",
        "output": "abbbb"
      },
      {
        "input": "palindrome = \"aaa\"",
        "output": "aab"
      },
      {
        "input": "palindrome = \"aabbccddeccbaa\"",
        "output": "aaabccddeccbaa"
      },
      {
        "input": "palindrome = \"ababababa\"",
        "output": "aaabababa"
      },
      {
        "input": "palindrome = \"aabbccddeeffgggggggeeeddccbbaa\"",
        "output": "aaabccddeeffgggggggeeeddccbbaa"
      },
      {
        "input": "palindrome = \"aaaabaaa\"",
        "output": "aaaabaab"
      },
      {
        "input": "palindrome = \"fedcbafedcba\"",
        "output": "aedcbafedcba"
      },
      {
        "input": "palindrome = \"abcbaba\"",
        "output": "aacbaba"
      },
      {
        "input": "palindrome = \"aaabaaa\"",
        "output": "aaabaab"
      },
      {
        "input": "palindrome = \"zyxwvutsrqponmlkjihgfedcbaedcba\"",
        "output": "ayxwvutsrqponmlkjihgfedcbaedcba"
      },
      {
        "input": "palindrome = \"sees\"",
        "output": "aees"
      },
      {
        "input": "palindrome = \"aabbccddeeffggggggfeeddccbbaa\"",
        "output": "aaabccddeeffggggggfeeddccbbaa"
      },
      {
        "input": "palindrome = \"aaaaaaa\"",
        "output": "aaaaaab"
      },
      {
        "input": "palindrome = \"bbcb\"",
        "output": "abcb"
      },
      {
        "input": "palindrome = \"zyxwvutsrqponmlkjihgfedcbaedcbafghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "ayxwvutsrqponmlkjihgfedcbaedcbafghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "palindrome = \"civic\"",
        "output": "aivic"
      },
      {
        "input": "palindrome = \"zzzzzzz\"",
        "output": "azzzzzz"
      },
      {
        "input": "palindrome = \"babababababababababababababababababa\"",
        "output": "aabababababababababababababababababa"
      },
      {
        "input": "palindrome = \"repaid\"",
        "output": "aepaid"
      },
      {
        "input": "palindrome = \"rotorrotor\"",
        "output": "aotorrotor"
      },
      {
        "input": "palindrome = \"abcdeedcba\"",
        "output": "aacdeedcba"
      },
      {
        "input": "palindrome = \"reeve\"",
        "output": "aeeve"
      },
      {
        "input": "palindrome = \"abcddddcba\"",
        "output": "aacddddcba"
      },
      {
        "input": "palindrome = \"kayak\"",
        "output": "aayak"
      },
      {
        "input": "palindrome = \"reviler\"",
        "output": "aeviler"
      },
      {
        "input": "palindrome = \"abcdefedcba\"",
        "output": "aacdefedcba"
      },
      {
        "input": "palindrome = \"rotavator\"",
        "output": "aotavator"
      },
      {
        "input": "palindrome = \"madamimadam\"",
        "output": "aadamimadam"
      },
      {
        "input": "palindrome = \"redivider\"",
        "output": "aedivider"
      },
      {
        "input": "palindrome = \"abacabadaba\"",
        "output": "aaacabadaba"
      },
      {
        "input": "palindrome = \"abcddcba\"",
        "output": "aacddcba"
      },
      {
        "input": "palindrome = \"aaaabaaaa\"",
        "output": "aaaabaaab"
      },
      {
        "input": "palindrome = \"leveler\"",
        "output": "aeveler"
      },
      {
        "input": "palindrome = \"abababa\"",
        "output": "aaababa"
      },
      {
        "input": "palindrome = \"abecba\"",
        "output": "aaecba"
      },
      {
        "input": "palindrome = \"zaz\"",
        "output": "aaz"
      },
      {
        "input": "palindrome = \"aabbccbaa\"",
        "output": "aaabccbaa"
      },
      {
        "input": "palindrome = \"abcdcba\"",
        "output": "aacdcba"
      },
      {
        "input": "palindrome = \"aabbccddeeffggggfeeddccbbaa\"",
        "output": "aaabccddeeffggggfeeddccbbaa"
      },
      {
        "input": "palindrome = \"bcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb\"",
        "output": "acbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb"
      },
      {
        "input": "palindrome = \"anana\"",
        "output": "aaana"
      },
      {
        "input": "palindrome = \"bababababa\"",
        "output": "aababababa"
      },
      {
        "input": "palindrome = \"zzzzz\"",
        "output": "azzzz"
      },
      {
        "input": "palindrome = \"abcaaba\"",
        "output": "aacaaba"
      },
      {
        "input": "palindrome = \"bob\"",
        "output": "aob"
      },
      {
        "input": "palindrome = \"abaabaaabaabaa\"",
        "output": "aaaabaaabaabaa"
      },
      {
        "input": "palindrome = \"deed\"",
        "output": "aeed"
      },
      {
        "input": "palindrome = \"detartrated\"",
        "output": "aetartrated"
      },
      {
        "input": "palindrome = \"civiccivic\"",
        "output": "aiviccivic"
      },
      {
        "input": "palindrome = \"zzzz\"",
        "output": "azzz"
      },
      {
        "input": "palindrome = \"repel\"",
        "output": "aepel"
      },
      {
        "input": "palindrome = \"deedeed\"",
        "output": "aeedeed"
      }
    ]
  },
  {
    "id": 1488,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Hash Table",
      "Binary Search",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. If it rains over a lake that is full of water, there will be a flood. Your goal is to avoid floods in any lake.\nGiven an integer array rains where:\n\nrains[i] > 0 means there will be rains over the rains[i] lake.\nrains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it.\n\nReturn an array ans where:\n\nans.length == rains.length\nans[i] == -1 if rains[i] > 0.\nans[i] is the lake you choose to dry in the ith day if rains[i] == 0.\n\nIf there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.\nNotice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.\n\u00a0\nExample 1:\n\nInput: rains = [1,2,3,4]\nOutput: [-1,-1,-1,-1]\nExplanation: After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day full lakes are [1,2,3]\nAfter the fourth day full lakes are [1,2,3,4]\nThere's no day to dry any lake and there is no flood in any lake.\n\nExample 2:\n\nInput: rains = [1,2,0,0,2,1]\nOutput: [-1,-1,2,1,-1,-1]\nExplanation: After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day, we dry lake 2. Full lakes are [1]\nAfter the fourth day, we dry lake 1. There is no full lakes.\nAfter the fifth day, full lakes are [2].\nAfter the sixth day, full lakes are [1,2].\nIt is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.\n\nExample 3:\n\nInput: rains = [1,2,0,1,2]\nOutput: []\nExplanation: After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.\nAfter that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.\n\n\u00a0\nConstraints:\n\n1 <= rains.length <= 105\n0 <= rains[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def avoidFlood(self, rains: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "rains = [0,1,1,0,2,0,1]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,0,1,2]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,2,0,0,1,0,2]",
        "output": "[-1, 1, -1, 2, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [0,0,0,0]",
        "output": "[1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,0,0,2,1]",
        "output": "[-1, -1, 2, 1, -1, -1]"
      },
      {
        "input": "rains = [1,0,2,0,2,1]",
        "output": "[-1, 1, -1, 2, -1, -1]"
      },
      {
        "input": "rains = [1,2,3,0,0,1,2,3]",
        "output": "[]"
      },
      {
        "input": "rains = [2,3,0,0,3,1,0,1,0,1]",
        "output": "[-1, -1, 3, 1, -1, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [0,1,0,2,0,1,0,2]",
        "output": "[1, -1, 1, -1, 2, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,0,2,1,0,1,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,0,0,2,0,1,0]",
        "output": "[-1, -1, 2, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,4]",
        "output": "[-1, -1, -1, -1]"
      },
      {
        "input": "rains = [0,1,1]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,0,0,0,1,2]",
        "output": "[-1, -1, 1, 2, 1, -1, -1]"
      },
      {
        "input": "rains = [1,0,0,2,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,0]",
        "output": "[-1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0,5,0,1]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,1,0,2,0,3,0]",
        "output": "[-1, 1, -1, 2, -1, 3, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0]",
        "output": "[-1, 1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 6, -1, 7, -1, 8, -1, 9, -1, 10, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9]",
        "output": "[]"
      },
      {
        "input": "rains = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "[]"
      },
      {
        "input": "rains = [0,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 6, -1, 7, -1, 8, -1, 9, -1, 10, -1, 11, -1, 12, -1, 13, -1, 14, -1, 15, -1, 16, -1, 17, -1, 18, -1, 19, -1, 20, -1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,1,0,2,0,3]",
        "output": "[-1, 1, -1, 2, -1, 3, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,0,0,3,0,0,0,4,0,0,0,0,0,5,0,0,0,0,0,6,0,0,0,0,0,7,0,0,0,0,0,8,0,0,0,0,0]",
        "output": "[-1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "[-1, 1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 6, -1, 7, -1, 8, -1, 9, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "rains = [1,2,0,3,4,0,5,6,0,7,8,0,9,10,0,1,2,3,4,5,6,7,8,9,10,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "[]"
      },
      {
        "input": "rains = [1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1]",
        "output": "[]"
      },
      {
        "input": "rains = [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "[]"
      },
      {
        "input": "rains = [1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0]",
        "output": "[-1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,2,3,4,0,0,1,2,3,4,0,0,1,2,3,4,0,0,1,2,3,4]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,0,0,0,2,1,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, 2, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 6, -1, 7, -1, 8, -1, 9, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,0,1,0,2,0,3,0,1,0,2,0,3,0,1,0,2,0,3]",
        "output": "[-1, -1, -1, 1, -1, 2, -1, 3, -1, 1, -1, 2, -1, 3, -1, 1, -1, 2, -1, 3, -1]"
      },
      {
        "input": "rains = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,4,5,0,0,0,0,0,0,0,1,2,3,4,5]",
        "output": "[-1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 1, 1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,0,0,2,0,1,0,1,0,0,0,1,0,0,0,0,0,0]",
        "output": "[-1, -1, 2, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,1,0,2,0,2,0,3,0,3,0,4,0,4,0,5,0,5,0]",
        "output": "[-1, 1, -1, 1, -1, 2, -1, 1, -1, 3, -1, 1, -1, 4, -1, 1, -1, 5, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,0,4,5,0,6,7,0,8,9,0,10,11,0,12,13,0,14,15,0,16,17,0,18,19,0,20]",
        "output": "[-1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,1]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,0,0,0,1,2,3,4,5,0,0,0,1,2,3,4,5]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,2,0,1,0,2,0,1,0,2,0,1,0,2,0,1,0,2,0,1,0,2,0,1,0,2,0,1,0,2,0,1,0,2,0,1,0,2,0,1,0,2,0,1,0]",
        "output": "[-1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,0,1,2,3,0,3,4,0,4,5,0,5,6,0,6,7,0,7,8,0,8,9,0,9,10,0,10]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,1,0,2,0,3,0,1,0,2,0,3]",
        "output": "[-1, 1, -1, 2, -1, 3, -1, 1, -1, 2, -1, 3, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,0,4,5,0,1,2,3,0,4,5,0,1,2,3,0,4,5]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [3,0,4,0,5,0,3,0,4,0,5]",
        "output": "[-1, 3, -1, 4, -1, 5, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,0,0,0,0,5,6,7,8,0,0,0,0]",
        "output": "[-1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,1,0,2,0,3,0]",
        "output": "[-1, 1, -1, 2, -1, 3, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,0,0,0,0,0,0,1,2,3,4,5]",
        "output": "[-1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "rains = [1,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,0,1,0,2,0,3,0,1,0,2,0,3,0]",
        "output": "[-1, -1, -1, 1, -1, 2, -1, 3, -1, 1, -1, 2, -1, 3, -1, 1]"
      },
      {
        "input": "rains = [1,0,0,0,0,2,0,0,0,3,0,0,0,0,4,0,0,0,0,5,0,0,0,0,1,0,0,0,0,2,0,0,0,0,3,0,0,0,0,4,0,0,0,0,5,0,0,0,0]",
        "output": "[-1, 1, 1, 1, 1, -1, 2, 1, 1, -1, 3, 1, 1, 1, -1, 4, 1, 1, 1, -1, 5, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,0,1,2,0,1,2,0,1,2,0,1,2,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "rains = [1,2,0,0,2,0,1,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2]",
        "output": "[]"
      },
      {
        "input": "rains = [1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,1]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [0,0,0,1,2,3,4,0,0,1,2,3,4,0,0,0,1,2,3,4]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,0,0,0,1,2,3,0,0,0,1,2,3,0,0,0,1,2,3,0,0,0,1,2,3]",
        "output": "[-1, -1, -1, 1, 2, 3, -1, -1, -1, 1, 2, 3, -1, -1, -1, 1, 2, 3, -1, -1, -1, 1, 2, 3, -1, -1, -1]"
      },
      {
        "input": "rains = [1,2,0,0,0,0,2,0,1,0,0,0,1,0,0,0]",
        "output": "[-1, -1, 2, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,0,2,0,0,2,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5]",
        "output": "[-1, 1, 1, -1, 2, 1, -1, 1, -1, 3, 1, -1, 1, 1, -1, 4, 1, -1, 1, 1, -1, 5, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0,1,0,2,0,3,0,4]",
        "output": "[-1, 1, -1, 2, -1, 3, -1, 4, -1, 1, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,2,0,1,0,3,0,1,0,2,0,3,0,1,0]",
        "output": "[-1, 1, -1, 2, -1, 3, -1, 2, -1, 1, -1, 3, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,0,0,0,0,1,2,3,4,5,6,7,8,9,10,0,0,0,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1]",
        "output": "[-1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,0,0,0,0,0,0,0,1,2,3,4,5,6]",
        "output": "[-1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 6, 1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "rains = [1,2,3,0,0,0,4,5,6,0,0,0,7,8,9,0,0,0,1,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 6, -1, 7, -1, 8, -1, 9, -1, 10, -1, 1]"
      },
      {
        "input": "rains = [1,0,0,2,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0]",
        "output": "[-1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,0,5,0,4,0,3,0,2,0,1,0,1,0,2,0,3,0,4,0,5]",
        "output": "[-1, -1, -1, -1, -1, 5, -1, 4, -1, 3, -1, 2, -1, 1, -1, 1, -1, 2, -1, 3, -1, 4, -1, 5, -1]"
      },
      {
        "input": "rains = [1,2,0,3,4,0,5,6,0,7,8,0,9,10,0,11,12,0,13,14]",
        "output": "[-1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,2,0,1,0,2]",
        "output": "[-1, 1, -1, 2, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,1,0,2,0,3,0,4,0]",
        "output": "[-1, -1, 1, -1, 2, -1, 3, -1, 4, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,0,2,0,3,0,0,1,0,2,0,3,0,0,1,0,2,0,3]",
        "output": "[-1, 1, 1, -1, 2, -1, 3, 1, -1, 1, -1, 2, -1, 3, 1, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,1,0,0,0,2,2,0,0,3,3,0,0,4,4,0,0,5,5,0,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,0,0,0,0,0,0,1,2,3,4,5,6]",
        "output": "[-1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 6, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "rains = [1,0,2,0,0,0,0,0,3,0,4,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, 1, -1, 2, 1, 1, 1, 1, -1, 3, -1, 4, 1, 1, -1, 5, 1, 1, -1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0]",
        "output": "[-1, -1, 1, 2, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,0,2,0,0,1,0,0,2,0,0,1,0,0,2,0,0]",
        "output": "[-1, 1, 1, -1, 2, 1, -1, 1, 1, -1, 2, 1, -1, 1, 1, -1, 1, 1]"
      },
      {
        "input": "rains = [1,1,0,2,2,0,3,3,0,4,4,0,5,5,0,6,6,0,7,7,0,8,8,0,9,9,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,2,0,1,0,2,3,0,4,0,5,0,4]",
        "output": "[-1, 1, -1, 2, -1, 1, -1, -1, 1, -1, 4, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5]",
        "output": "[-1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,1,2,3,4,5,6,7,8,9,10,1]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,0,0,0,0,0,1,2,3,4,5,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,2,0,2,0,1,0,1,0,2,0]",
        "output": "[-1, 1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1000000000, 0, 1000000000, 0, 1000000000, 0, 1000000000, 0]",
        "output": "[-1, 1000000000, -1, 1000000000, -1, 1000000000, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,5,0,0,1,2,3,4,5,0,0,1,2,3,4,5]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,4,0,0,0,0,1,2,3,4]",
        "output": "[-1, -1, -1, -1, 1, 2, 3, 4, -1, -1, -1, -1]"
      },
      {
        "input": "rains = [1,0,2,3,0,1,2,0,3,4,0,5,4,0,3,2,1,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1, 1, 0, 0]",
        "output": "[]"
      },
      {
        "input": "rains = [0,1,2,3,0,1,2]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,0,0,0,1,2,0,0,1]",
        "output": "[-1, -1, 1, 2, 1, -1, -1, 1, 1, -1]"
      },
      {
        "input": "rains = [1,1,0,2,0,2,1]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,4,5,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [0]",
        "output": "[1]"
      },
      {
        "input": "rains = [1,0,1,0,1,0]",
        "output": "[-1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,0,0,0,2]",
        "output": "[-1, 1, -1, 2, 1, 1, 1, -1]"
      },
      {
        "input": "rains = [1,1,1,0,2,0,1,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,2,0,2,0,1]",
        "output": "[-1, 1, -1, 2, -1, 1, -1]"
      },
      {
        "input": "rains = [1, 2, 0, 1, 2]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,0,0,0,1,2,3]",
        "output": "[-1, -1, -1, 1, 2, 3, -1, -1, -1]"
      },
      {
        "input": "rains = [1,1,2,2,0,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,0,4,0,5,0,6,0,1,2,3,4,5,6]",
        "output": "[]"
      },
      {
        "input": "rains = [1, 0, 2, 0, 2, 0, 1]",
        "output": "[-1, 1, -1, 2, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,0,0,0,3,0,2,0,1]",
        "output": "[-1, -1, -1, 3, 2, 1, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,2,3,0,1,2]",
        "output": "[-1, 1, -1, -1, 2, -1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,2,0,1,0,2]",
        "output": "[-1, 1, -1, 2, -1, 2, -1, 1, -1]"
      },
      {
        "input": "rains = [0, 0, 0, 0]",
        "output": "[1, 1, 1, 1]"
      },
      {
        "input": "rains = [1, 2, 3, 0, 1, 2, 3]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,0,0,0,3,2,1]",
        "output": "[-1, -1, -1, 3, 2, 1, -1, -1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "rains = [1,2,0,0,2,0,1]",
        "output": "[-1, -1, 2, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,1,0,1,0,1,0,1,0]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,0,2,0,0,1,2]",
        "output": "[-1, 1, 1, -1, 2, 1, -1, -1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,2,0,1,0,3,0]",
        "output": "[-1, 1, -1, 2, -1, 3, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1, 2, 3, 0, 1, 0, 2, 0, 3]",
        "output": "[-1, -1, -1, 1, -1, 2, -1, 3, -1]"
      },
      {
        "input": "rains = [1,1,1,0,2,0,2]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,0,1,2,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,2,3,0,1,0,2,3]",
        "output": "[-1, 1, -1, -1, 2, -1, 3, -1, -1]"
      },
      {
        "input": "rains = [1,0,2,3,0,0,1,2]",
        "output": "[-1, 1, -1, -1, 2, 1, -1, -1]"
      },
      {
        "input": "rains = [2,3,0,0,2,1,0,1,2]",
        "output": "[]"
      },
      {
        "input": "rains = [1,1,0,0,2,2]",
        "output": "[]"
      },
      {
        "input": "rains = [0, 1, 0, 2, 0, 3, 0, 1, 2, 3]",
        "output": "[1, -1, 1, -1, 2, -1, 3, -1, -1, -1]"
      },
      {
        "input": "rains = [1,0,0,0,0,2,1]",
        "output": "[-1, 1, 1, 1, 1, -1, -1]"
      },
      {
        "input": "rains = [1,0,0,0,0,2,0,2]",
        "output": "[-1, 1, 1, 1, 1, -1, 2, -1]"
      },
      {
        "input": "rains = [1, 0, 2, 0, 3, 0, 4, 0, 1, 2, 3, 4, 0, 5]",
        "output": "[-1, 1, -1, 2, -1, 3, -1, 4, -1, -1, -1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,0,0,3,0,1,0,2,0,3]",
        "output": "[-1, -1, 1, 2, -1, 3, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,0,4,0,5,0,1,2,3]",
        "output": "[-1, -1, -1, 1, -1, 2, -1, 3, -1, -1, -1]"
      },
      {
        "input": "rains = [1,0,2,0,1,2]",
        "output": "[-1, 1, -1, 2, -1, -1]"
      },
      {
        "input": "rains = [1, 1, 1, 0, 2, 0, 2]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,0,1,0,2,0,3,0]",
        "output": "[-1, -1, -1, 1, -1, 2, -1, 3, -1, 1]"
      },
      {
        "input": "rains = [0,0,0,0,0]",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1, 2, 3, 4, 5, 0, 5, 0, 1, 2, 3, 4, 5]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,1,0,1,0,1,0]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,0,0,2,0,1,0]",
        "output": "[-1, 1, 1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,0,0,0,1,0,2]",
        "output": "[-1, 1, -1, 2, 1, 1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,0,0,0,0,0,1]",
        "output": "[-1, 1, 1, 1, 1, 1, -1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,1,0,2,2,0,3,3]",
        "output": "[]"
      },
      {
        "input": "rains = [0, 0, 0, 0, 1, 1, 1, 1]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,0,0,0,0,1,2,3]",
        "output": "[-1, -1, -1, 1, 2, 3, 1, -1, -1, -1]"
      },
      {
        "input": "rains = [1, 2, 0, 0, 2, 1]",
        "output": "[-1, -1, 2, 1, -1, -1]"
      },
      {
        "input": "rains = [1,2,3,0,4,5,0,1,2,3,4,5]",
        "output": "[]"
      },
      {
        "input": "rains = [1000000000,0,1000000000,0]",
        "output": "[-1, 1000000000, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,0,1,2,0,3]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,0,4,0,5,0,6,0,1]",
        "output": "[-1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,0,0,2,1,0,1,0,2]",
        "output": "[-1, -1, 2, 1, -1, -1, 1, -1, 2, -1]"
      },
      {
        "input": "rains = [1,0,2,3,0,4,5,0,6,7,0,8,9,0,10,11,0,12,13,0]",
        "output": "[-1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1]"
      },
      {
        "input": "rains = [1, 0, 2, 0, 3, 0, 4, 0]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,0,1,2,0,1,2,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,0,4,0,5,0,1,2,3,4,5]",
        "output": "[]"
      },
      {
        "input": "rains = [1,1,1,0,2,0,1]",
        "output": "[]"
      },
      {
        "input": "rains = [0,1,1,0,2,0,1,0,2,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,0,0,0,1,0,2,0]",
        "output": "[-1, -1, 1, 2, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,2]",
        "output": "[-1, 1, -1, 2, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1, 0, 2, 0, 3, 0, 4, 0, 1, 2]",
        "output": "[-1, 1, -1, 2, -1, 1, -1, 1, -1, -1]"
      },
      {
        "input": "rains = [1,2,3,0,2,1,0,1,2,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,0,0,0,1,0,2]",
        "output": "[-1, -1, 1, 2, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,0,0,0,0,4]",
        "output": "[-1, -1, -1, 1, 1, 1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,0,2,0,3,0,1]",
        "output": "[-1, -1, -1, 2, -1, 3, -1, 1, -1]"
      },
      {
        "input": "rains = [10,20,20]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,2,0,0,0,1,2]",
        "output": "[-1, 1, -1, 2, 1, 1, -1, -1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,2,0,4,0,2,0,1,0,2,0,1,0,1,0]",
        "output": "[-1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,0,4,5,3,0]",
        "output": "[-1, -1, -1, 3, -1, -1, -1, 1]"
      },
      {
        "input": "rains = [1,2,0,0,0,0,2,1]",
        "output": "[-1, -1, 2, 1, 1, 1, -1, -1]"
      },
      {
        "input": "rains = [1, 0, 1, 0, 1, 0, 1, 0]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,0,1,0,1,0,1]",
        "output": "[-1, 1, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1]",
        "output": "[-1]"
      },
      {
        "input": "rains = [1,0,2,0,1,0,3,0,2,0,4,0]",
        "output": "[-1, 1, -1, 2, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,2,0,1,0,2,0,1]",
        "output": "[-1, -1, 1, -1, 2, -1, 1, -1]"
      },
      {
        "input": "rains = [1,1,0,2,2,0,1]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,3,4,0,0]",
        "output": "[-1, -1, -1, -1, 1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,2,0,1]",
        "output": "[-1, 1, -1, 2, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,0,0,2,0,0,1,0,2]",
        "output": "[-1, 1, 1, -1, 2, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,0,0,2,1,0,0]",
        "output": "[-1, -1, 2, 1, -1, -1, 1, 1]"
      },
      {
        "input": "rains = [1,1,1,1,1]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,0,0,0,3,2]",
        "output": "[-1, -1, 2, 1, 1, -1, -1]"
      },
      {
        "input": "rains = [1, 0, 2, 0, 0, 1, 0, 2]",
        "output": "[-1, 1, -1, 2, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,4,0,5,0]",
        "output": "[-1, 1, -1, 1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,0,0,0,0,0,2]",
        "output": "[-1, 1, 1, 1, 1, 1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,0,0,0]",
        "output": "[-1, -1, -1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,3,0,4,5,0,1,0,2,3,4,5]",
        "output": "[]"
      },
      {
        "input": "rains = [3,3,0,0,0,2,0,0,3,2,1,0,0,1]",
        "output": "[]"
      },
      {
        "input": "rains = [1,1,0,1,2]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,0,0,2,0,0,2]",
        "output": "[-1, 1, 1, 1, -1, 2, 1, -1]"
      },
      {
        "input": "rains = [1,0,0,2,0,0,1,0]",
        "output": "[-1, 1, 1, -1, 1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,1,1,0,2,0,2,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,2,0,0,2,1,0]",
        "output": "[-1, -1, 2, 1, -1, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,0,0,0,0]",
        "output": "[-1, -1, -1, -1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1, 1, 1, 0, 2, 0, 3]",
        "output": "[]"
      },
      {
        "input": "rains = [1, 2, 0, 2, 3, 0, 1]",
        "output": "[-1, -1, 2, -1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,0,1,2,3]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,0,0,2,2,2,0]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,2,0,0,3,0,2,1,0]",
        "output": "[-1, 1, -1, 2, 1, -1, 1, -1, -1, 1]"
      },
      {
        "input": "rains = [1,2,3,4,0,0,0]",
        "output": "[-1, -1, -1, -1, 1, 1, 1]"
      },
      {
        "input": "rains = [1, 2, 3, 4]",
        "output": "[-1, -1, -1, -1]"
      },
      {
        "input": "rains = [1, 0, 2, 3, 0, 1, 0, 2, 0, 3]",
        "output": "[-1, 1, -1, -1, 2, -1, 3, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,5,0,0,0,0,1]",
        "output": "[-1, -1, -1, -1, -1, 1, 1, 1, 1, -1]"
      },
      {
        "input": "rains = [1,0,2,0,2,0,1,0]",
        "output": "[-1, 1, -1, 2, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1, 2, 3, 0, 0, 1, 2, 3, 0, 0, 1, 2]",
        "output": "[]"
      },
      {
        "input": "rains = [1,0,2,0,3,0,1]",
        "output": "[-1, 1, -1, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1, 2, 0, 0, 0, 1, 0, 2]",
        "output": "[-1, -1, 1, 2, 1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "rains = [1,2,3,0,4,5,0,1]",
        "output": "[-1, -1, -1, 1, -1, -1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,0,0,2,0,1,0]",
        "output": "[-1, -1, -1, 2, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [0,1,0,2,0,1,0]",
        "output": "[1, -1, 1, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,2,0,1,0,2,0]",
        "output": "[-1, 1, -1, 2, -1, 1, -1, 1]"
      },
      {
        "input": "rains = [1,0,0,0,2,0,0,1]",
        "output": "[-1, 1, 1, 1, -1, 1, 1, -1]"
      },
      {
        "input": "rains = [1,2,3,4,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[]"
      }
    ]
  },
  {
    "id": 114,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Linked List",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree, flatten the tree into a \"linked list\":\n\nThe \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\nThe \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n\n\u00a0\nExample 1:\n\n\nInput: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\nExample 3:\n\nInput: root = [0]\nOutput: [0]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 2000].\n-100 <= Node.val <= 100\n\n\u00a0\nFollow up: Can you flatten the tree in-place (with O(1) extra space)?",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,null,7]",
        "output": "None"
      },
      {
        "input": "root = [1,2]",
        "output": "None"
      },
      {
        "input": "root = [1,null,null,2,null,3,null,4]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2]",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7]",
        "output": "None"
      },
      {
        "input": "root = [0]",
        "output": "None"
      },
      {
        "input": "root = [1,2,5,3,4,null,6]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,3,null,4,null,5,6]",
        "output": "None"
      },
      {
        "input": "root = []",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,6,7,8,9,null,null,10,11,null,12,13,null,null,14]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,null,13,14,null,null,15,null,16,17,null,null,null,18,null,null,19,null,null,null,null,20]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,10,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20]",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,3,4,null,null,5,null,6,null,7,null,8,null,9,null,null,10,null,null,11,null,null,12]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,null,7,8,9,10,11,12,null,13,null,14,null,15]",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,3,4,null,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,4,5,null,6,7,8,9,null,10,null,null,11,12]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,null,4,null,null,5,null,null,6,null,null,7,null,null,8,null,null,9,null,null,10,null,null,11,null,null,12,null,null,13,null,null,14,null,null,15,null,null,16]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,6,7,8,9,null,null,10,null,null,11,null,null,12]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,4,5,6,7,null,null,null,8,null,null,9]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,16,null,null,17,null,null,18]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,null,null,8,9,null,null,10,11,null,null,12,13,null,null,14,15]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,3,null,4,null,5]",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,3,4,null,5,null,null,6,7]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,6,null,7,null,null,null,null,8]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35]",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,null,3,null,null,4,null,null,5,null,null,6]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,4,null,null,5,null,null,6,null,null,7,null,null,8]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,8,9,null,10,null,null,11,null,null,12,13,14,null,null,15]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,8,9,10,11,12,null,null,13,14]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,null,7,null,8,null,9,null,10]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25]",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "None"
      },
      {
        "input": "root = [10,5,15,null,7,13,null,null,null,6,8,11,14,null,null,null,9]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,3,null,null,4,5,null,null,6,7,null,null,null,8,9,null,null,10,11]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,6,7]",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,null,3,null,null,4,null,null,5,null,null,6,null,null,7]",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "None"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,null,null,18,19,21,22]",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,3,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,6,null,7,null,8,null,9]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,null,8,null,9,null,null,10,11,null,null,12,13]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,null,null,null,null,null,null,null,9,10,11,12,null,null,null,null,13,null,14,null,15,null,16]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,null,7,8,9,10,null,null,11,12,13,14,null,null,15,16,17,null,null,18,19,20]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,6,7,null,null,8,9]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,4,5,6,null,7,null,null,null,8,null,null,9,null,null,10,null,null,11,null,null,null,12,null,null,13,null,null,14,null,null,null,15]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,16,17,18,19,20,null,null,null,null,21,22,23,24,25,26,27,28,29,30,null,31,null,32]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,6,7,null,null,null,null,8,null]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,16,17,18,19,20,null,21,22,23,24,null,25,26,27,28,29,30,null,31,32,33,34,35,36,37,38,39,40]",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,null,null,4,null,null,null,5]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,16,null,17,null,18,null,19,null,20]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,6,7,null,8,null,9,null,10]",
        "output": "None"
      },
      {
        "input": "root = [5,3,8,1,4,null,9,null,2,null,null,null,6,7]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,null,null,8,9]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,null,null,null,null,8,9]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,6,null,7,null,8,null,9,null,10,null,11,null,12]",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12]",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,null,3,4,null,null,5,null,6,7,null,null,8,9,null,null,10]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,null,null,9,null,10,11,12,13,null,null,null,14,null,null,15]",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,null,6,7,null,null,null,null,null,8,9]",
        "output": "None"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1]",
        "output": "None"
      }
    ]
  },
  {
    "id": 2115,
    "difficulty": "Medium",
    "tags": [
      "Graph",
      "Topological Sort",
      "Array",
      "Hash Table",
      "String"
    ],
    "problemDescription": "You have information about n different recipes. You are given a string array recipes and a 2D string array ingredients. The ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. A recipe can also be an ingredient for other recipes, i.e., ingredients[i] may contain a string that is in recipes.\nYou are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them.\nReturn a list of all the recipes that you can create. You may return the answer in any order.\nNote that two recipes may contain each other in their ingredients.\n\u00a0\nExample 1:\n\nInput: recipes = [\"bread\"], ingredients = [[\"yeast\",\"flour\"]], supplies = [\"yeast\",\"flour\",\"corn\"]\nOutput: [\"bread\"]\nExplanation:\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\n\nExample 2:\n\nInput: recipes = [\"bread\",\"sandwich\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"]], supplies = [\"yeast\",\"flour\",\"meat\"]\nOutput: [\"bread\",\"sandwich\"]\nExplanation:\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\nWe can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\".\n\nExample 3:\n\nInput: recipes = [\"bread\",\"sandwich\",\"burger\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"],[\"sandwich\",\"meat\",\"bread\"]], supplies = [\"yeast\",\"flour\",\"meat\"]\nOutput: [\"bread\",\"sandwich\",\"burger\"]\nExplanation:\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\nWe can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\".\nWe can create \"burger\" since we have the ingredient \"meat\" and can create the ingredients \"bread\" and \"sandwich\".\n\n\u00a0\nConstraints:\n\nn == recipes.length == ingredients.length\n1 <= n <= 100\n1 <= ingredients[i].length, supplies.length <= 100\n1 <= recipes[i].length, ingredients[i][j].length, supplies[k].length <= 10\nrecipes[i], ingredients[i][j], and supplies[k] consist only of lowercase English letters.\nAll the values of recipes and supplies\u00a0combined are unique.\nEach ingredients[i] does not contain any duplicate values.\n\n",
    "starterCode": "class Solution:\n    def findAllRecipes(self, recipes: List[str], ingredients: List[List[str]], supplies: List[str]) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "recipes = [\"bread\",\"sandwich\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"]], supplies = [\"yeast\",\"flour\",\"meat\"]",
        "output": "['bread', 'sandwich']"
      },
      {
        "input": "recipes = [\"pasta\",\"salad\"], ingredients = [[\"noodles\",\"sauce\"],[\"lettuce\",\"tomato\"]], supplies = [\"noodles\",\"sauce\",\"lettuce\"]",
        "output": "['pasta']"
      },
      {
        "input": "recipes = [\"bread\",\"sandwich\",\"burger\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"],[\"sandwich\",\"meat\",\"bread\"]], supplies = [\"yeast\",\"flour\",\"meat\"]",
        "output": "['bread', 'sandwich', 'burger']"
      },
      {
        "input": "recipes = [\"cake\",\"muffin\"], ingredients = [[\"flour\",\"sugar\"],[\"flour\",\"eggs\"]], supplies = [\"flour\",\"sugar\"]",
        "output": "['cake']"
      },
      {
        "input": "recipes = [\"bread\"], ingredients = [[\"yeast\",\"flour\"]], supplies = [\"yeast\",\"flour\",\"corn\"]",
        "output": "['bread']"
      },
      {
        "input": "recipes = [\"sushi\",\"tempura\",\"udon\"], ingredients = [[\"rice\",\"seaweed\",\"fish\"],[\"vegetables\",\"tempura_flour\"],[\"noodles\",\"broth\",\"onion\"], supplies = [\"rice\",\"seaweed\",\"fish\",\"vegetables\",\"tempura_flour\",\"noodles\",\"broth\",\"onion\"]",
        "output": "Error: Solution.findAllRecipes() missing 1 required positional argument: 'ingredients'"
      },
      {
        "input": "recipes = [\"cake\",\"muffin\",\"brownie\"], ingredients = [[\"flour\",\"sugar\",\"eggs\"],[\"flour\",\"sugar\",\"butter\"],[\"flour\",\"sugar\",\"chocolate\"]], supplies = [\"flour\",\"sugar\",\"eggs\"]",
        "output": "['cake']"
      },
      {
        "input": "recipes = [\"cake\",\"muffin\"], ingredients = [[\"flour\",\"sugar\",\"eggs\"],[\"flour\",\"sugar\",\"eggs\",\"butter\"]], supplies = [\"flour\",\"sugar\",\"eggs\",\"butter\"]",
        "output": "['cake', 'muffin']"
      },
      {
        "input": "recipes = [\"pizza\",\"pasta\"], ingredients = [[\"dough\",\"tomato\",\"cheese\"],[\"noodles\",\"sauce\"]], supplies = [\"dough\",\"tomato\",\"cheese\",\"noodles\",\"sauce\"]",
        "output": "['pizza', 'pasta']"
      },
      {
        "input": "recipes = [\"steak_dinner\",\"chicken_soup\",\"pasta\"], ingredients = [[\"steak\",\"potato\",\"carrot\"],[\"chicken\",\"vegetable_stock\",\"carrot\"],[\"noodles\",\"sauce\",\"meat\"]], supplies = [\"steak\",\"potato\",\"carrot\",\"chicken\",\"vegetable_stock\",\"noodles\",\"sauce\",\"meat\"]",
        "output": "['steak_dinner', 'chicken_soup', 'pasta']"
      },
      {
        "input": "recipes = [\"soup\",\"stew\"], ingredients = [[\"water\",\"vegetables\",\"spices\"],[\"water\",\"meat\",\"vegetables\",\"spices\"]], supplies = [\"water\",\"vegetables\",\"spices\"]",
        "output": "['soup']"
      },
      {
        "input": "recipes = [\"cake\",\"ice_cream\",\"brownie\"], ingredients = [[\"flour\",\"sugar\",\"eggs\"],[\"milk\",\"sugar\",\"vanilla\"],[\"flour\",\"cocoa\",\"sugar\"]], supplies = [\"flour\",\"sugar\",\"eggs\",\"milk\",\"vanilla\"]",
        "output": "['cake', 'ice_cream']"
      },
      {
        "input": "recipes = [\"sushi\",\"ramen\"], ingredients = [[\"rice\",\"seaweed\",\"salmon\"],[\"noodles\",\"water\",\"meat\",\"vegetables\"]], supplies = [\"rice\",\"noodles\",\"water\",\"meat\"]",
        "output": "[]"
      },
      {
        "input": "recipes = [\"cake\",\"pudding\",\"pie\"], ingredients = [[\"flour\",\"sugar\",\"eggs\"],[\"milk\",\"sugar\",\"flour\"],[\"crust\",\"fruit\",\"filling\"]], supplies = [\"flour\",\"sugar\",\"eggs\",\"milk\",\"crust\",\"fruit\",\"filling\"]",
        "output": "['cake', 'pudding', 'pie']"
      },
      {
        "input": "recipes = [\"cake\",\"brownie\"], ingredients = [[\"flour\",\"sugar\",\"eggs\"],[\"flour\",\"cocoa\",\"sugar\"]], supplies = [\"flour\",\"sugar\",\"eggs\"]",
        "output": "['cake']"
      },
      {
        "input": "recipes = [\"omelette\",\"pancake\",\"waffle\"], ingredients = [[\"eggs\",\"milk\"],[\"flour\",\"eggs\",\"milk\"],[\"flour\",\"eggs\",\"milk\",\"butter\"]], supplies = [\"eggs\",\"milk\",\"flour\",\"butter\",\"sugar\"]",
        "output": "['omelette', 'pancake', 'waffle']"
      },
      {
        "input": "recipes = [\"bread\",\"sandwich\",\"burger\",\"wrap\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"],[\"bread\",\"meat\",\"cheese\"],[\"bread\",\"cheese\",\"lettuce\"]], supplies = [\"yeast\",\"flour\",\"meat\",\"cheese\",\"lettuce\"]",
        "output": "['bread', 'sandwich', 'burger', 'wrap']"
      },
      {
        "input": "recipes = [\"soup\",\"stew\"], ingredients = [[\"carrot\",\"onion\"],[\"carrot\",\"potato\",\"beef\"]], supplies = [\"carrot\",\"onion\",\"beef\",\"potato\",\"pepper\"]",
        "output": "['soup', 'stew']"
      },
      {
        "input": "recipes = [\"chocolate_chip_cookie\",\"oatmeal_cookie\"], ingredients = [[\"flour\",\"sugar\",\"chocolate_chips\"],[\"flour\",\"sugar\",\"oatmeal\"]], supplies = [\"flour\",\"sugar\",\"oatmeal\"]",
        "output": "['oatmeal_cookie']"
      },
      {
        "input": "recipes = [\"pizza\",\"pasta\",\"omelette\"], ingredients = [[\"dough\",\"tomato\",\"cheese\"],[\"noodles\",\"sauce\"],[\"eggs\",\"milk\"]], supplies = [\"dough\",\"tomato\",\"cheese\",\"noodles\",\"sauce\",\"eggs\",\"milk\",\"flour\"]",
        "output": "['pizza', 'pasta', 'omelette']"
      },
      {
        "input": "recipes = [\"juice\",\"smoothie\"], ingredients = [[\"fruit\",\"water\"],[\"fruit\",\"yogurt\",\"banana\"]], supplies = [\"fruit\",\"water\",\"yogurt\",\"banana\",\"milk\"]",
        "output": "['juice', 'smoothie']"
      },
      {
        "input": "recipes = [\"steak\",\"chicken\",\"beef\"], ingredients = [[\"beef\",\"salt\"],[\"chicken\",\"pepper\"],[\"salt\",\"spice\"]], supplies = [\"salt\",\"pepper\",\"spice\",\"chicken\"]",
        "output": "['beef', 'chicken', 'steak']"
      },
      {
        "input": "recipes = [\"cheese_pizza\",\"pepperoni_pizza\",\"margherita_pizza\"], ingredients = [[\"dough\",\"tomato\",\"cheese\"],[\"dough\",\"tomato\",\"cheese\",\"pepperoni\"],[\"dough\",\"tomato\",\"basil\",\"cheese\"]], supplies = [\"dough\",\"tomato\",\"cheese\",\"pepperoni\",\"basil\"]",
        "output": "['cheese_pizza', 'pepperoni_pizza', 'margherita_pizza']"
      },
      {
        "input": "recipes = [\"soup\",\"stew\"], ingredients = [[\"water\",\"vegetables\",\"meat\"],[\"water\",\"vegetables\",\"meat\",\"tomato\"]], supplies = [\"water\",\"vegetables\",\"meat\",\"tomato\",\"salt\"]",
        "output": "['soup', 'stew']"
      },
      {
        "input": "recipes = [\"pizza\",\"taco\",\"pasta\"], ingredients = [[\"dough\",\"tomato\",\"cheese\"],[\"tortilla\",\"meat\",\"cheese\"],[\"noodles\",\"sauce\",\"meat\"]], supplies = [\"dough\",\"tomato\",\"cheese\",\"tortilla\",\"meat\",\"noodles\",\"sauce\"]",
        "output": "['pizza', 'taco', 'pasta']"
      },
      {
        "input": "recipes = [\"salmon\",\"trout\"], ingredients = [[\"salmon_filet\",\"vegetables\",\"lemon\"],[\"trout_filet\",\"vegetables\",\"lemon\"]], supplies = [\"vegetables\",\"lemon\"]",
        "output": "[]"
      },
      {
        "input": "recipes = [\"steak_dinner\",\"pasta_dinner\",\"chicken_dinner\"], ingredients = [[\"steak\",\"potato\",\"carrot\"],[\"pasta\",\"sauce\"],[\"chicken\",\"vegetable_oil\"]], supplies = [\"steak\",\"potato\",\"carrot\",\"pasta\",\"sauce\",\"chicken\",\"vegetable_oil\"]",
        "output": "['steak_dinner', 'pasta_dinner', 'chicken_dinner']"
      },
      {
        "input": "recipes = [\"smoothie\",\"juice\"], ingredients = [[\"banana\",\"orange\",\"milk\"],[\"apple\",\"orange\",\"water\"]], supplies = [\"banana\",\"orange\",\"water\"]",
        "output": "[]"
      },
      {
        "input": "recipes = [\"apple_crisp\",\"apple_pie\",\"blueberry_pie\"], ingredients = [[\"apple\",\"oat\",\"sugar\"],[\"apple\",\"pie_crust\"],[\"blueberry\",\"pie_crust\"]], supplies = [\"apple\",\"oat\",\"sugar\",\"blueberry\",\"pie_crust\"]",
        "output": "['apple_crisp', 'apple_pie', 'blueberry_pie']"
      },
      {
        "input": "recipes = [\"chocolate_cake\",\"vanilla_cake\",\"red_velvet\"], ingredients = [[\"flour\",\"eggs\",\"chocolate\",\"sugar\"],[\"flour\",\"eggs\",\"vanilla\",\"sugar\"],[\"chocolate_cake\",\"red_food_color\"]], supplies = [\"flour\",\"eggs\",\"chocolate\",\"vanilla\",\"sugar\",\"red_food_color\"]",
        "output": "['chocolate_cake', 'vanilla_cake', 'red_velvet']"
      },
      {
        "input": "recipes = [\"omelette\",\"frittata\"], ingredients = [[\"eggs\",\"cheese\"],[\"eggs\",\"cheese\",\"spinach\",\"tomato\"]], supplies = [\"eggs\",\"cheese\",\"spinach\"]",
        "output": "['omelette']"
      },
      {
        "input": "recipes = [\"cake_layer\",\"chocolate_ganache\",\"frosting\"], ingredients = [[\"flour\",\"sugar\",\"eggs\"],[\"chocolate\",\"cream\"],[\"powdered_sugar\",\"milk\"]], supplies = [\"flour\",\"sugar\",\"eggs\",\"chocolate\",\"cream\",\"powdered_sugar\",\"milk\"]",
        "output": "['cake_layer', 'chocolate_ganache', 'frosting']"
      },
      {
        "input": "recipes = [\"pizza\",\"pasta\"], ingredients = [[\"dough\",\"tomato_sauce\",\"cheese\"],[\"dough\",\"noodles\",\"sauce\"]], supplies = [\"dough\",\"tomato_sauce\",\"cheese\",\"noodles\",\"sauce\"]",
        "output": "['pizza', 'pasta']"
      },
      {
        "input": "recipes = [\"taco\",\"burrito\",\"enchilada\"], ingredients = [[\"beef\",\"shell\"],[\"beef\",\"tortilla\"],[\"beef\",\"taco_shell\",\"sauce\"]], supplies = [\"beef\",\"shell\",\"tortilla\",\"taco_shell\",\"sauce\"]",
        "output": "['taco', 'burrito', 'enchilada']"
      },
      {
        "input": "recipes = [\"chocolate_cake\",\"vanilla_cake\",\"red_velvet_cake\"], ingredients = [[\"flour\",\"sugar\",\"cocoa\"],[\"flour\",\"sugar\"],[\"vanilla_cake\",\"cocoa\",\"red_food_color\"]], supplies = [\"flour\",\"sugar\",\"cocoa\",\"red_food_color\"]",
        "output": "['vanilla_cake', 'chocolate_cake', 'red_velvet_cake']"
      },
      {
        "input": "recipes = [\"omelette\",\"pancakes\"], ingredients = [[\"eggs\",\"milk\"],[\"eggs\",\"flour\",\"milk\"]], supplies = [\"eggs\",\"milk\",\"flour\",\"butter\"]",
        "output": "['omelette', 'pancakes']"
      },
      {
        "input": "recipes = [\"sandwich\",\"burger\",\"omelet\"], ingredients = [[\"bread\",\"meat\",\"cheese\"],[\"bread\",\"patty\",\"cheese\"],[\"eggs\",\"cheese\",\"spinach\"]], supplies = [\"bread\",\"meat\",\"cheese\",\"patty\",\"eggs\",\"spinach\"]",
        "output": "['sandwich', 'burger', 'omelet']"
      },
      {
        "input": "recipes = [\"salmon\",\"steak\",\"chicken\"], ingredients = [[\"salmon_fillet\",\"lemon\"],[\"beef_steak\",\"salt\"],[\"chicken_breast\",\"pepper\"]], supplies = [\"salmon_fillet\",\"lemon\",\"beef_steak\",\"salt\",\"chicken_breast\",\"pepper\",\"oil\"]",
        "output": "['salmon', 'steak', 'chicken']"
      },
      {
        "input": "recipes = [\"cake\",\"brownie\"], ingredients = [[\"sugar\",\"flour\",\"eggs\"],[\"sugar\",\"chocolate\",\"eggs\"]], supplies = [\"sugar\",\"eggs\"]",
        "output": "[]"
      },
      {
        "input": "recipes = [\"cake\",\"pie\",\"tiramisu\"], ingredients = [[\"flour\",\"eggs\",\"sugar\"],[\"apple\",\"flour\",\"sugar\"],[\"cake\",\"coffee\",\"mascarpone\"]], supplies = [\"flour\",\"eggs\",\"sugar\",\"apple\",\"coffee\",\"mascarpone\"]",
        "output": "['cake', 'pie', 'tiramisu']"
      },
      {
        "input": "recipes = [\"soup\",\"stew\",\"salad\",\"sandwich\"], ingredients = [[\"carrot\",\"onion\"],[\"carrot\",\"potato\",\"beef\"],[\"lettuce\",\"cucumber\"],[\"bread\",\"cheese\"]], supplies = [\"carrot\",\"onion\",\"beef\",\"potato\",\"pepper\",\"lettuce\",\"cucumber\",\"bread\",\"cheese\",\"eggs\"]",
        "output": "['soup', 'stew', 'salad', 'sandwich']"
      },
      {
        "input": "recipes = [\"chocolate_cake\",\"vanilla_cake\",\"red_velvet_cake\"], ingredients = [[\"flour\",\"sugar\",\"eggs\",\"chocolate\"],[\"flour\",\"sugar\",\"eggs\"],[\"vanilla_cake\",\"red_food_color\"]], supplies = [\"flour\",\"sugar\",\"eggs\",\"chocolate\",\"red_food_color\"]",
        "output": "['vanilla_cake', 'chocolate_cake', 'red_velvet_cake']"
      },
      {
        "input": "recipes = [\"mashed_potatoes\",\"grilled_cheese\",\"mac_n_cheese\"], ingredients = [[\"potatoes\",\"butter\",\"milk\"],[\"bread\",\"cheese\"],[\"macaroni\",\"cheese\",\"milk\"]], supplies = [\"potatoes\",\"butter\",\"milk\",\"bread\",\"cheese\",\"macaroni\"]",
        "output": "['mashed_potatoes', 'grilled_cheese', 'mac_n_cheese']"
      },
      {
        "input": "recipes = [\"pancake\",\"waffle\",\"muffin\"], ingredients = [[\"flour\",\"eggs\",\"milk\"],[\"flour\",\"eggs\",\"milk\",\"butter\"],[\"flour\",\"sugar\",\"eggs\"]], supplies = [\"flour\",\"eggs\",\"milk\",\"butter\",\"sugar\"]",
        "output": "['pancake', 'waffle', 'muffin']"
      },
      {
        "input": "recipes = [\"apple_pie\",\"blueberry_pie\"], ingredients = [[\"apple\",\"pie_crust\"],[\"blueberry\",\"pie_crust\"]], supplies = [\"apple\",\"blueberry\",\"pie_crust\"]",
        "output": "['apple_pie', 'blueberry_pie']"
      },
      {
        "input": "recipes = [\"chocolate_cake\",\"vanilla_cake\",\"red_velvet_cake\"], ingredients = [[\"flour\",\"sugar\",\"eggs\",\"chocolate\"],[\"flour\",\"sugar\",\"eggs\"],[\"vanilla_cake\",\"red_food_coloring\"]], supplies = [\"flour\",\"sugar\",\"eggs\",\"chocolate\",\"vanilla\",\"red_food_coloring\"]",
        "output": "['vanilla_cake', 'chocolate_cake', 'red_velvet_cake']"
      },
      {
        "input": "recipes = [\"pizza\",\"pasta\",\"soup\"], ingredients = [[\"dough\",\"tomato\",\"cheese\"],[\"noodles\",\"sauce\"],[\"carrots\",\"onions\",\"water\"]], supplies = [\"dough\",\"tomato\",\"noodles\",\"carrots\"]",
        "output": "[]"
      },
      {
        "input": "recipes = [\"a\",\"b\",\"c\",\"d\"], ingredients = [[\"e\",\"f\"],[\"a\",\"g\"],[\"b\",\"h\"],[\"c\",\"i\"]], supplies = [\"e\",\"f\",\"g\",\"h\",\"i\"]",
        "output": "['a', 'b', 'c', 'd']"
      },
      {
        "input": "recipes = [\"beer\",\"wine\"], ingredients = [[\"grains\",\"water\",\"hops\"],[\"grapes\",\"yeast\",\"sugar\"]], supplies = [\"grains\",\"water\",\"hops\",\"grapes\",\"yeast\",\"sugar\"]",
        "output": "['beer', 'wine']"
      },
      {
        "input": "recipes = [\"pizza\",\"pasta\",\"salad\"], ingredients = [[\"dough\",\"sauce\",\"cheese\"],[\"noodles\",\"sauce\"],[\"lettuce\",\"tomato\"]], supplies = [\"dough\",\"cheese\",\"noodles\",\"sauce\",\"lettuce\",\"tomato\",\"spinach\"]",
        "output": "['pizza', 'pasta', 'salad']"
      },
      {
        "input": "recipes = [\"smoothie\",\"juice\"], ingredients = [[\"banana\",\"strawberry\",\"milk\"],[\"apple\",\"orange\",\"water\"]], supplies = [\"banana\",\"strawberry\",\"milk\",\"apple\",\"orange\"]",
        "output": "['smoothie']"
      },
      {
        "input": "recipes = [\"fish_stew\",\"chicken_stew\",\"beef_stew\"], ingredients = [[\"fish\",\"potatoes\",\"carrots\"],[\"chicken\",\"potatoes\",\"carrots\"],[\"beef\",\"potatoes\",\"carrots\"]], supplies = [\"potatoes\",\"carrots\",\"fish\",\"chicken\"]",
        "output": "['fish_stew', 'chicken_stew']"
      },
      {
        "input": "recipes = [\"omelette\",\"pancake\"], ingredients = [[\"eggs\",\"milk\"],[\"flour\",\"eggs\",\"milk\"]], supplies = [\"eggs\",\"milk\",\"flour\",\"butter\"]",
        "output": "['omelette', 'pancake']"
      },
      {
        "input": "recipes = [\"cheesecake\",\"ice_cream\",\"fruit_salad\"], ingredients = [[\"cream\",\"sugar\",\"cheese\"],[\"cream\",\"sugar\"],[\"fruit\",\"sugar\"]], supplies = [\"cream\",\"sugar\",\"cheese\",\"fruit\"]",
        "output": "['ice_cream', 'cheesecake', 'fruit_salad']"
      },
      {
        "input": "recipes = [\"omelette\",\"scrambled_eggs\"], ingredients = [[\"egg\",\"cheese\",\"milk\"],[\"egg\",\"milk\"]], supplies = [\"egg\",\"milk\",\"cheese\",\"salt\"]",
        "output": "['scrambled_eggs', 'omelette']"
      },
      {
        "input": "recipes = [\"chocolate_cake\",\"vanilla_cake\"], ingredients = [[\"flour\",\"sugar\",\"cocoa\"],[\"flour\",\"sugar\"]], supplies = [\"flour\",\"sugar\",\"cocoa\"]",
        "output": "['vanilla_cake', 'chocolate_cake']"
      },
      {
        "input": "recipes = [\"bread\",\"toast\",\"baguette\"], ingredients = [[\"flour\",\"yeast\"],[\"bread\"],[\"flour\",\"yeast\",\"oil\"]], supplies = [\"flour\",\"yeast\",\"oil\",\"butter\"]",
        "output": "['bread', 'baguette', 'toast']"
      },
      {
        "input": "recipes = [\"soup\",\"stew\",\"omelette\"], ingredients = [[\"water\",\"vegetables\",\"salt\"],[\"water\",\"meat\",\"vegetables\"],[\"eggs\",\"cheese\",\"pepper\"]], supplies = [\"water\",\"vegetables\",\"meat\",\"eggs\",\"cheese\",\"pepper\"]",
        "output": "['stew', 'omelette']"
      },
      {
        "input": "recipes = [\"banana_bread\",\"apple_pie\",\"cheese_pie\"], ingredients = [[\"banana\",\"flour\",\"eggs\",\"sugar\"],[\"apple\",\"flour\",\"sugar\",\"eggs\"],[\"cheese\",\"flour\",\"eggs\",\"sugar\"]], supplies = [\"banana\",\"apple\",\"flour\",\"eggs\",\"sugar\",\"cheese\"]",
        "output": "['banana_bread', 'apple_pie', 'cheese_pie']"
      },
      {
        "input": "recipes = [\"steak_dish\",\"chicken_dish\",\"beef_dish\"], ingredients = [[\"steak\",\"salt\",\"pepper\"],[\"chicken\",\"salt\",\"pepper\"],[\"beef\",\"salt\",\"pepper\"]], supplies = [\"steak\",\"chicken\",\"beef\",\"salt\",\"pepper\"]",
        "output": "['steak_dish', 'chicken_dish', 'beef_dish']"
      },
      {
        "input": "recipes = [\"pizza\",\"fries\",\"burger\"], ingredients = [[\"dough\",\"tomato\",\"cheese\"],[\"potato\",\"salt\"],[\"patty\",\"cheese\",\"bun\"]], supplies = [\"dough\",\"tomato\",\"cheese\",\"potato\",\"salt\",\"patty\",\"bun\"]",
        "output": "['pizza', 'fries', 'burger']"
      },
      {
        "input": "recipes = [\"sushi\",\"ramen\"], ingredients = [[\"rice\",\"fish\",\"seaweed\"],[\"noodles\",\"broth\",\"egg\"]], supplies = [\"rice\",\"fish\",\"seaweed\",\"noodles\",\"broth\",\"egg\"]",
        "output": "['sushi', 'ramen']"
      },
      {
        "input": "recipes = [\"soup\",\"stew\",\"salad\"], ingredients = [[\"carrot\",\"onion\"],[\"carrot\",\"potato\",\"beef\"],[\"lettuce\",\"cucumber\"]], supplies = [\"carrot\",\"onion\",\"beef\",\"potato\",\"pepper\",\"lettuce\",\"cucumber\"]",
        "output": "['soup', 'stew', 'salad']"
      },
      {
        "input": "recipes = [\"pizza\",\"spaghetti\"], ingredients = [[\"dough\",\"tomato_sauce\",\"cheese\"],[\"pasta\",\"meat_sauce\",\"cheese\"]], supplies = [\"dough\",\"pasta\",\"cheese\"]",
        "output": "[]"
      },
      {
        "input": "recipes = [\"cake\",\"pie\"], ingredients = [[\"flour\",\"eggs\",\"sugar\"],[\"apple\",\"flour\",\"sugar\"]], supplies = [\"flour\",\"eggs\",\"sugar\",\"milk\"]",
        "output": "['cake']"
      },
      {
        "input": "recipes = [\"pasta\",\"pizza\",\"lasagna\"], ingredients = [[\"noodles\",\"sauce\"],[\"dough\",\"sauce\",\"cheese\"],[\"noodles\",\"sauce\",\"cheese\",\"milk\"]], supplies = [\"noodles\",\"sauce\",\"cheese\",\"dough\",\"milk\"]",
        "output": "['pasta', 'pizza', 'lasagna']"
      },
      {
        "input": "recipes = [\"omelette\",\"pancake\"], ingredients = [[\"eggs\",\"cheese\",\"bacon\"],[\"flour\",\"eggs\",\"milk\"]], supplies = [\"eggs\",\"flour\",\"milk\"]",
        "output": "['pancake']"
      },
      {
        "input": "recipes = [\"pizza\",\"sandwich\",\"omelette\",\"burger\"], ingredients = [[\"dough\",\"tomato\",\"cheese\"],[\"bread\",\"cheese\",\"meat\"],[\"egg\",\"milk\",\"cheese\"],[\"patty\",\"cheese\",\"bun\"]], supplies = [\"dough\",\"tomato\",\"cheese\",\"bread\",\"meat\",\"egg\",\"milk\",\"patty\",\"bun\"]",
        "output": "['pizza', 'sandwich', 'omelette', 'burger']"
      },
      {
        "input": "recipes = [\"chicken_salad\",\"turkey_salad\",\"veggie_salad\"], ingredients = [[\"chicken\",\"lettuce\",\"tomato\"],[\"turkey\",\"lettuce\",\"tomato\"],[\"lettuce\",\"tomato\",\"carrot\"],], supplies = [\"chicken\",\"turkey\",\"lettuce\",\"tomato\",\"carrot\"]",
        "output": "['chicken_salad', 'turkey_salad', 'veggie_salad']"
      },
      {
        "input": "recipes = [\"apple_pie\",\"banana_bread\",\"cherry_pie\"], ingredients = [[\"apples\",\"dough\",\"sugar\"],[\"bananas\",\"dough\",\"sugar\"],[\"cherries\",\"dough\",\"sugar\"]], supplies = [\"apples\",\"bananas\",\"cherries\",\"dough\",\"sugar\"]",
        "output": "['apple_pie', 'banana_bread', 'cherry_pie']"
      },
      {
        "input": "recipes = [\"recipe1\",\"recipe2\",\"recipe3\",\"recipe4\"], ingredients = [[\"ing1\",\"ing2\"],[\"recipe1\",\"ing3\"],[\"recipe2\",\"ing4\"],[\"recipe3\",\"ing5\"]], supplies = [\"ing1\",\"ing2\",\"ing3\",\"ing4\",\"ing5\"]",
        "output": "['recipe1', 'recipe2', 'recipe3', 'recipe4']"
      },
      {
        "input": "recipes = [\"cake\",\"pudding\",\"pie\"], ingredients = [[\"flour\",\"eggs\",\"sugar\"],[\"milk\",\"cornstarch\"],[\"crust\",\"apple\",\"sugar\"]], supplies = [\"flour\",\"eggs\",\"milk\",\"sugar\"]",
        "output": "['cake']"
      },
      {
        "input": "recipes = [\"ice_cream\",\"pudding\"], ingredients = [[\"cream\",\"sugar\",\"vanilla\"],[\"milk\",\"sugar\",\"flour\"]], supplies = [\"cream\",\"sugar\",\"vanilla\",\"milk\",\"flour\",\"chocolate\"]",
        "output": "['ice_cream', 'pudding']"
      },
      {
        "input": "recipes = [\"salad\",\"soup\",\"stew\"], ingredients = [[\"lettuce\",\"tomato\",\"onion\"],[\"carrot\",\"potato\",\"beef\"],[\"carrot\",\"potato\",\"beef\",\"tomato\"]], supplies = [\"lettuce\",\"tomato\",\"onion\",\"carrot\",\"potato\"]",
        "output": "['salad']"
      },
      {
        "input": "recipes = [\"omelette\",\"scramble\",\"frittata\"], ingredients = [[\"eggs\",\"cheese\"],[\"eggs\"],[\"eggs\",\"cheese\",\"spinach\"]], supplies = [\"eggs\",\"cheese\",\"spinach\",\"milk\"]",
        "output": "['scramble', 'omelette', 'frittata']"
      },
      {
        "input": "recipes = [\"cake\",\"brownie\",\"pudding\"], ingredients = [[\"flour\",\"sugar\",\"eggs\",\"milk\"],[\"flour\",\"sugar\",\"chocolate\"],[\"milk\",\"sugar\",\"gelatin\"]], supplies = [\"flour\",\"sugar\",\"eggs\",\"milk\",\"chocolate\",\"gelatin\"]",
        "output": "['cake', 'brownie', 'pudding']"
      },
      {
        "input": "recipes = [\"apple_pie\",\"cherry_pie\",\"blueberry_pie\"], ingredients = [[\"crust\",\"apple\",\"sugar\"],[\"crust\",\"cherry\",\"sugar\"],[\"crust\",\"blueberry\",\"sugar\"]], supplies = [\"crust\",\"sugar\",\"apple\",\"blueberry\"]",
        "output": "['apple_pie', 'blueberry_pie']"
      },
      {
        "input": "recipes = [\"soup\",\"stew\",\"chili\"], ingredients = [[\"water\",\"carrot\",\"potato\"],[\"water\",\"tomato\",\"carrot\",\"potato\"],[\"water\",\"tomato\",\"beef\",\"potato\"]], supplies = [\"water\",\"carrot\",\"potato\",\"tomato\",\"beef\"]",
        "output": "['soup', 'stew', 'chili']"
      },
      {
        "input": "recipes = [\"pizza\",\"lasagna\",\"taco\"], ingredients = [[\"dough\",\"tomato\",\"cheese\"],[\"pasta\",\"mozzarella\",\"sauce\"],[\"tortilla\",\"meat\",\"cheese\"]], supplies = [\"dough\",\"tomato\",\"cheese\",\"pasta\",\"mozzarella\",\"sauce\",\"tortilla\",\"meat\"]",
        "output": "['pizza', 'lasagna', 'taco']"
      },
      {
        "input": "recipes = [\"omelette\",\"french_toast\"], ingredients = [[\"egg\",\"milk\",\"cheese\"],[\"egg\",\"bread\",\"milk\"]], supplies = [\"egg\",\"milk\",\"cheese\",\"bread\"]",
        "output": "['omelette', 'french_toast']"
      },
      {
        "input": "recipes = [\"bread\",\"cake\",\"pudding\"], ingredients = [[\"flour\",\"yeast\",\"water\"],[\"flour\",\"eggs\",\"sugar\"],[\"milk\",\"cornstarch\",\"water\"]], supplies = [\"flour\",\"yeast\",\"eggs\",\"sugar\",\"milk\"]",
        "output": "['cake']"
      },
      {
        "input": "recipes = [\"steak_dish\",\"chicken_dish\"], ingredients = [[\"steak\",\"garlic\",\"onion\"],[\"chicken\",\"garlic\",\"onion\"]], supplies = [\"steak\",\"chicken\",\"garlic\",\"onion\",\"potato\"]",
        "output": "['steak_dish', 'chicken_dish']"
      },
      {
        "input": "recipes = [\"pizza\",\"lasagna\"], ingredients = [[\"dough\",\"tomato_sauce\",\"cheese\"],[\"pasta\",\"meat\",\"cheese\",\"tomato_sauce\"]], supplies = [\"dough\",\"tomato_sauce\",\"cheese\",\"pasta\",\"meat\"]",
        "output": "['pizza', 'lasagna']"
      },
      {
        "input": "recipes = [\"cake\",\"brownie\",\"tiramisu\"], ingredients = [[\"flour\",\"sugar\",\"eggs\"],[\"flour\",\"sugar\",\"chocolate\"],[\"coffee\",\"brownie\",\"cream\"]], supplies = [\"flour\",\"sugar\",\"eggs\",\"chocolate\",\"coffee\",\"cream\"]",
        "output": "['cake', 'brownie', 'tiramisu']"
      },
      {
        "input": "recipes = [\"pizza\",\"calzone\",\"taco\",\"burrito\"], ingredients = [[\"dough\",\"sauce\",\"cheese\"],[\"dough\",\"cheese\",\"meat\"],[\"tortilla\",\"meat\",\"lettuce\"],[\"tortilla\",\"meat\",\"beans\"]], supplies = [\"dough\",\"sauce\",\"cheese\",\"meat\",\"tortilla\",\"lettuce\",\"beans\"]",
        "output": "['pizza', 'calzone', 'taco', 'burrito']"
      },
      {
        "input": "recipes = [\"taco\",\"burrito\"], ingredients = [[\"tortilla\",\"ground_beef\",\"cheese\"],[\"tortilla\",\"beans\",\"cheese\",\"lettuce\"]], supplies = [\"tortilla\",\"ground_beef\",\"beans\",\"cheese\",\"lettuce\"]",
        "output": "['taco', 'burrito']"
      },
      {
        "input": "recipes = [\"steak\",\"chicken\",\"beef\"], ingredients = [[\"meat\",\"seasoning\"],[\"meat\",\"vegetables\"],[\"meat\",\"sauce\"]], supplies = [\"meat\",\"seasoning\",\"vegetables\"]",
        "output": "['steak', 'chicken']"
      },
      {
        "input": "recipes = [\"tacos\",\"burritos\",\"enchiladas\"], ingredients = [[\"shell\",\"ground beef\",\"cheese\"],[\"shell\",\"ground beef\",\"beans\"],[\"tortilla\",\"ground beef\",\"cheese\",\"sauce\"]], supplies = [\"shell\",\"tortilla\",\"ground beef\",\"cheese\"]",
        "output": "['tacos']"
      },
      {
        "input": "recipes = [\"taco\",\"burrito\"], ingredients = [[\"tortilla\",\"beef\",\"cheese\"],[\"tortilla\",\"chicken\",\"cheese\",\"lettuce\"]], supplies = [\"tortilla\",\"cheese\",\"lettuce\"]",
        "output": "[]"
      },
      {
        "input": "recipes = [\"muffin\",\"brownie\",\"cupcake\"], ingredients = [[\"flour\",\"eggs\",\"milk\",\"sugar\"],[\"flour\",\"eggs\",\"chocolate\",\"sugar\"],[\"muffin\",\"icing\"]], supplies = [\"flour\",\"eggs\",\"milk\",\"sugar\",\"chocolate\",\"icing\"]",
        "output": "['muffin', 'brownie', 'cupcake']"
      },
      {
        "input": "recipes = [\"soup\",\"stew\"], ingredients = [[\"water\",\"carrot\",\"potato\"],[\"water\",\"tomato\",\"carrot\",\"potato\"]], supplies = [\"water\",\"carrot\",\"potato\",\"tomato\"]",
        "output": "['soup', 'stew']"
      },
      {
        "input": "recipes = [\"chicken_soup\",\"veggie_soup\",\"beef_stew\"], ingredients = [[\"chicken\",\"carrot\",\"potato\"],[\"carrot\",\"potato\",\"onion\"],[\"beef\",\"carrot\",\"potato\"],], supplies = [\"chicken\",\"carrot\",\"potato\",\"onion\",\"beef\"]",
        "output": "['chicken_soup', 'veggie_soup', 'beef_stew']"
      },
      {
        "input": "recipes = [\"taco\",\"burrito\"], ingredients = [[\"shell\",\"meat\",\"cheese\"],[\"wrap\",\"meat\",\"cheese\",\"lettuce\"]], supplies = [\"shell\",\"wrap\",\"meat\",\"cheese\",\"lettuce\",\"tomato\"]",
        "output": "['taco', 'burrito']"
      },
      {
        "input": "recipes = [\"cake\",\"brownie\"], ingredients = [[\"flour\",\"eggs\",\"sugar\"],[\"flour\",\"eggs\",\"chocolate\"]], supplies = [\"flour\",\"eggs\",\"sugar\",\"chocolate\"]",
        "output": "['cake', 'brownie']"
      },
      {
        "input": "recipes = [\"smoothie\",\"juice\",\"shake\"], ingredients = [[\"banana\",\"milk\"],[\"orange\",\"apple\"],[\"banana\",\"milk\",\"peanut_butter\"]], supplies = [\"banana\",\"milk\",\"orange\",\"apple\",\"peanut_butter\"]",
        "output": "['smoothie', 'juice', 'shake']"
      },
      {
        "input": "recipes = [\"chocolate_cake\",\"vanilla_cake\"], ingredients = [[\"flour\",\"sugar\",\"cocoa\",\"eggs\"],[\"flour\",\"sugar\",\"vanilla\",\"eggs\"]], supplies = [\"flour\",\"sugar\",\"eggs\",\"vanilla\"]",
        "output": "['vanilla_cake']"
      },
      {
        "input": "recipes = [\"cake\",\"muffin\",\"brownie\"], ingredients = [[\"flour\",\"sugar\",\"eggs\"],[\"flour\",\"sugar\",\"eggs\",\"butter\"],[\"flour\",\"sugar\",\"chocolate\"]], supplies = [\"flour\",\"sugar\",\"eggs\",\"butter\",\"chocolate\"]",
        "output": "['cake', 'muffin', 'brownie']"
      },
      {
        "input": "recipes = [\"muffin\",\"pancake\",\"scone\"], ingredients = [[\"flour\",\"sugar\",\"milk\"],[\"flour\",\"eggs\",\"milk\"],[\"flour\",\"butter\",\"milk\"]], supplies = [\"flour\",\"eggs\",\"butter\",\"milk\"]",
        "output": "['pancake', 'scone']"
      },
      {
        "input": "recipes = [\"juice\",\"smoothie\"], ingredients = [[\"orange\",\"apple\"],[\"banana\",\"orange\",\"milk\"]], supplies = [\"orange\",\"apple\",\"banana\",\"milk\",\"water\"]",
        "output": "['juice', 'smoothie']"
      },
      {
        "input": "recipes = [\"smoothie\",\"yogurt_parfait\"], ingredients = [[\"banana\",\"mango\",\"yogurt\"],[\"yogurt\",\"berry\",\"honey\"]], supplies = [\"banana\",\"mango\",\"yogurt\",\"berry\",\"honey\"]",
        "output": "['smoothie', 'yogurt_parfait']"
      },
      {
        "input": "recipes = [\"pancake\",\"waffle\",\"omelette\"], ingredients = [[\"flour\",\"eggs\",\"milk\"],[\"flour\",\"eggs\",\"syrup\"],[\"eggs\",\"milk\",\"cheese\"]], supplies = [\"flour\",\"eggs\",\"milk\",\"syrup\",\"cheese\"]",
        "output": "['pancake', 'waffle', 'omelette']"
      },
      {
        "input": "recipes = [\"pizza\",\"pasta\"], ingredients = [[\"dough\",\"sauce\",\"cheese\"],[\"noodles\",\"sauce\"]], supplies = [\"dough\",\"sauce\",\"cheese\",\"noodles\",\"tomato\"]",
        "output": "['pizza', 'pasta']"
      },
      {
        "input": "recipes = [\"pizza\",\"spaghetti\"], ingredients = [[\"dough\",\"sauce\",\"cheese\"],[\"pasta\",\"sauce\",\"meat\"]], supplies = [\"dough\",\"sauce\",\"pasta\"]",
        "output": "[]"
      },
      {
        "input": "recipes = [\"chicken_soup\",\"beef_stew\"], ingredients = [[\"chicken\",\"vegetables\",\"water\"],[\"beef\",\"vegetables\",\"water\",\"potato\"]], supplies = [\"chicken\",\"vegetables\",\"water\",\"beef\",\"potato\"]",
        "output": "['chicken_soup', 'beef_stew']"
      }
    ]
  },
  {
    "id": 1100,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "problemDescription": "Given a string s and an integer k, return the number of substrings in s of length k with no repeated characters.\n\u00a0\nExample 1:\n\nInput: s = \"havefunonleetcode\", k = 5\nOutput: 6\nExplanation: There are 6 substrings they are: 'havef','avefu','vefun','efuno','etcod','tcode'.\n\nExample 2:\n\nInput: s = \"home\", k = 5\nOutput: 0\nExplanation: Notice k can be larger than the length of s. In this case, it is not possible to find any substring.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 104\ns consists of lowercase English letters.\n1 <= k <= 104\n\n",
    "starterCode": "class Solution:\n    def numKLenSubstrNoRepeats(self, s: str, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"leetcode\", k = 1",
        "output": "8"
      },
      {
        "input": "s = \"abcdef\", k = 6",
        "output": "1"
      },
      {
        "input": "s = \"abcde\", k = 6",
        "output": "0"
      },
      {
        "input": "s = \"abcd\", k = 2",
        "output": "3"
      },
      {
        "input": "s = \"\", k = 1",
        "output": "0"
      },
      {
        "input": "s = \"abcd\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"havefunonleetcode\", k = 5",
        "output": "6"
      },
      {
        "input": "s = \"aaaaa\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"abcabcabc\", k = 2",
        "output": "8"
      },
      {
        "input": "s = \"abcdefg\", k = 7",
        "output": "1"
      },
      {
        "input": "s = \"home\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"pqpqs\", k = 2",
        "output": "4"
      },
      {
        "input": "s = \"abcdefg\", k = 3",
        "output": "5"
      },
      {
        "input": "s = \"abcabcabc\", k = 3",
        "output": "7"
      },
      {
        "input": "s = \"aaaa\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"a\", k = 1",
        "output": "1"
      },
      {
        "input": "s = \"abacab\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"aabbcc\", k = 2",
        "output": "2"
      },
      {
        "input": "s = \"aabbccddeeff\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"longstringwithnorepeats\", k = 10",
        "output": "1"
      },
      {
        "input": "s = \"repeatedcharacters\", k = 8",
        "output": "0"
      },
      {
        "input": "s = \"thefastbrownfoxjumpsoverthelazydog\", k = 15",
        "output": "0"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffff\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"\", k = 0",
        "output": "1"
      },
      {
        "input": "s = \"abcdabcde\", k = 4",
        "output": "6"
      },
      {
        "input": "s = \"mississippi\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"xyzzaz\", k = 3",
        "output": "1"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnm\", k = 10",
        "output": "17"
      },
      {
        "input": "s = \"short\", k = 6",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 13",
        "output": "0"
      },
      {
        "input": "s = \"thisisaverylongstringwithrepeatedcharacters\", k = 15",
        "output": "0"
      },
      {
        "input": "s = \"pwwkew\", k = 2",
        "output": "4"
      },
      {
        "input": "s = \"thisisaverylongstringwithoutanyrepeatedcharacters\", k = 15",
        "output": "0"
      },
      {
        "input": "s = \"aaaabbbbcccc\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"longestsubstringwithoutrepeatingcharacters\", k = 10",
        "output": "0"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyz\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"abcdabcabcabcd\", k = 4",
        "output": "5"
      },
      {
        "input": "s = \"abcdeffedcba\", k = 5",
        "output": "4"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefg\", k = 5",
        "output": "17"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmqwerty\", k = 10",
        "output": "23"
      },
      {
        "input": "s = \"aaabbbcccdddeeefffggghhh\", k = 9",
        "output": "0"
      },
      {
        "input": "s = \"abcdabcdeabcdefabcdefg\", k = 4",
        "output": "19"
      },
      {
        "input": "s = \"\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"repeatedcharacters\", k = 10",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghij\", k = 11",
        "output": "0"
      },
      {
        "input": "s = \"quickbrownfox\", k = 5",
        "output": "8"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 20",
        "output": "0"
      },
      {
        "input": "s = \"uniquecharacters\", k = 5",
        "output": "8"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabc\", k = 10",
        "output": "0"
      },
      {
        "input": "s = \"repeatedcharactersrepeatedcharacters\", k = 9",
        "output": "0"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"abcdeabcdeabcde\", k = 5",
        "output": "11"
      },
      {
        "input": "s = \"uniquestring\", k = 9",
        "output": "1"
      },
      {
        "input": "s = \"uniquestring\", k = 6",
        "output": "6"
      },
      {
        "input": "s = \"repeatedcharactersarenotallowed\", k = 7",
        "output": "3"
      },
      {
        "input": "s = \"thisisaverylongstringthatincludesmanycharacterswithoutbeingtoolong\", k = 15",
        "output": "0"
      },
      {
        "input": "s = \"abcdabcdeabcdefg\", k = 5",
        "output": "8"
      },
      {
        "input": "s = \"banana\", k = 3",
        "output": "1"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzz\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnm\", k = 26",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 10",
        "output": "0"
      },
      {
        "input": "s = \"abacaba\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"xyzzxy\", k = 2",
        "output": "4"
      },
      {
        "input": "s = \"aaaabbbbccccdddd\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"unique\", k = 6",
        "output": "0"
      },
      {
        "input": "s = \"uniqueletters\", k = 11",
        "output": "0"
      },
      {
        "input": "s = \"aaaaaa\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmnoonnppqqrrssttuuvvwwxxyyzz\", k = 10",
        "output": "0"
      },
      {
        "input": "s = \"abcdef\", k = 1",
        "output": "6"
      },
      {
        "input": "s = \"abcdefghij\", k = 1",
        "output": "10"
      },
      {
        "input": "s = \"abcdabcabcdabcabcd\", k = 4",
        "output": "9"
      },
      {
        "input": "s = \"abcdefghij\", k = 15",
        "output": "0"
      },
      {
        "input": "s = \"uniquecharacterswithoutrepeats\", k = 8",
        "output": "5"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 10",
        "output": "17"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 30",
        "output": "0"
      },
      {
        "input": "s = \"abcdefg\", k = 1",
        "output": "7"
      },
      {
        "input": "s = \"uniquecharacters\", k = 15",
        "output": "0"
      },
      {
        "input": "s = \"longerstringwithvariouscharacters\", k = 7",
        "output": "13"
      },
      {
        "input": "s = \"aaaaaaa\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"aaaaabbbbcccccdddddeeeee\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"abcdefg\", k = 8",
        "output": "0"
      },
      {
        "input": "s = \"abcdeabcdeabcdeabcde\", k = 10",
        "output": "0"
      },
      {
        "input": "s = \"xyzzxyzzxyzz\", k = 3",
        "output": "5"
      },
      {
        "input": "s = \"xyzzxyzz\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"hellohellohellohello\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"aabacbebebe\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"abacabadabacaba\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"abacabadabacaba\", k = 3",
        "output": "6"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"aaaaaabbbbbbcccccc\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"xyzzzyzx\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"abcdabcdeabcdeabcde\", k = 5",
        "output": "11"
      },
      {
        "input": "s = \"abcdefgabcdeabcdeabcde\", k = 5",
        "output": "18"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 26",
        "output": "1"
      },
      {
        "input": "s = \"abcdefghijabcdefghij\", k = 5",
        "output": "16"
      },
      {
        "input": "s = \"aabaaaabaab\", k = 2",
        "output": "5"
      },
      {
        "input": "s = \"aaaaa\", k = 1",
        "output": "5"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"longerstringwithnorepeats\", k = 15",
        "output": "0"
      },
      {
        "input": "s = \"pneumonoultramicroscopicsilicovolcanoconiosis\", k = 15",
        "output": "0"
      }
    ]
  },
  {
    "id": 3223,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "problemDescription": "You are given a string s.\nYou can perform the following process on s any number of times:\n\nChoose an index i in the string such that there is at least one character to the left of index i that is equal to s[i], and at least one character to the right that is also equal to s[i].\nDelete the closest occurrence of s[i] located to the left of i.\nDelete the closest occurrence of s[i] located to the right of i.\n\nReturn the minimum length of the final string s that you can achieve.\n\u00a0\nExample 1:\n\nInput: s = \"abaacbcbb\"\nOutput: 5\nExplanation:\nWe do the following operations:\n\nChoose index 2, then remove the characters at indices 0 and 3. The resulting string is s = \"bacbcbb\".\nChoose index 3, then remove the characters at indices 0 and 5. The resulting string is s = \"acbcb\".\n\n\nExample 2:\n\nInput: s = \"aa\"\nOutput: 2\nExplanation:\nWe cannot perform any operations, so we return the length of the original string.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 2 * 105\ns consists only of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def minimumLength(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"zzzzyzyzyyzzyzz\"",
        "output": "3"
      },
      {
        "input": "s = \"abcba\"",
        "output": "5"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "26"
      },
      {
        "input": "s = \"abaacbcbb\"",
        "output": "5"
      },
      {
        "input": "s = \"aabbaa\"",
        "output": "4"
      },
      {
        "input": "s = \"aabbccddeeeedddccbaa\"",
        "output": "8"
      },
      {
        "input": "s = \"abababab\"",
        "output": "4"
      },
      {
        "input": "s = \"a\"",
        "output": "1"
      },
      {
        "input": "s = \"abacabadabacaba\"",
        "output": "7"
      },
      {
        "input": "s = \"abcabcabc\"",
        "output": "3"
      },
      {
        "input": "s = \"abcabcabcabc\"",
        "output": "6"
      },
      {
        "input": "s = \"aa\"",
        "output": "2"
      },
      {
        "input": "s = \"abcddcba\"",
        "output": "8"
      },
      {
        "input": "s = \"zzzzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzzzz\"",
        "output": "3"
      },
      {
        "input": "s = \"abcde\"",
        "output": "5"
      },
      {
        "input": "s = \"aabb\"",
        "output": "4"
      },
      {
        "input": "s = \"aabbccddeeeedddccba\"",
        "output": "7"
      },
      {
        "input": "s = \"abcdeedcba\"",
        "output": "10"
      },
      {
        "input": "s = \"zzzzzzzzzz\"",
        "output": "2"
      },
      {
        "input": "s = \"abcdefgfedcba\"",
        "output": "13"
      },
      {
        "input": "s = \"abcdabcdabcd\"",
        "output": "4"
      },
      {
        "input": "s = \"zzzyzzyyzzyyzzzzzyyzyzyzyz\"",
        "output": "4"
      },
      {
        "input": "s = \"abacabad\"",
        "output": "6"
      },
      {
        "input": "s = \"aabbaaabbbaaa\"",
        "output": "3"
      },
      {
        "input": "s = \"abcd\"",
        "output": "4"
      },
      {
        "input": "s = \"aabbccddeeff\"",
        "output": "12"
      },
      {
        "input": "s = \"aabbcc\"",
        "output": "6"
      },
      {
        "input": "s = \"mississippi\"",
        "output": "7"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "52"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijj\"",
        "output": "20"
      },
      {
        "input": "s = \"aabbccddeeaabbccddeeff\"",
        "output": "12"
      },
      {
        "input": "s = \"aabbccdd\"",
        "output": "8"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "52"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "2"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmnbvcxzlkjhgfdsapoiuytrewqqwertyuiopasdfghjklzxcvbnm\"",
        "output": "27"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzxyz\"",
        "output": "49"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "26"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "26"
      },
      {
        "input": "s = \"abababababababababababababababababababababababababababababababababababababababab\"",
        "output": "4"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "1"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\"",
        "output": "51"
      },
      {
        "input": "s = \"xyzzyxzyzxzyzyzyzyz\"",
        "output": "3"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "4"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "26"
      },
      {
        "input": "s = \"aaabbbbccccddddeeeeefffffggggghhhhhiiiiijjjjjkkkkklllllmmmmmnnnnnooooo\"",
        "output": "18"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaab\"",
        "output": "3"
      },
      {
        "input": "s = \"aabbaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "52"
      }
    ]
  },
  {
    "id": 2443,
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Enumeration"
    ],
    "problemDescription": "Given a non-negative integer num, return true if num can be expressed as the sum of any non-negative integer and its reverse, or false otherwise.\n\u00a0\nExample 1:\n\nInput: num = 443\nOutput: true\nExplanation: 172 + 271 = 443 so we return true.\n\nExample 2:\n\nInput: num = 63\nOutput: false\nExplanation: 63 cannot be expressed as the sum of a non-negative integer and its reverse so we return false.\n\nExample 3:\n\nInput: num = 181\nOutput: true\nExplanation: 140 + 041 = 181 so we return true. Note that when a number is reversed, there may be leading zeros.\n\n\u00a0\nConstraints:\n\n0 <= num <= 105\n\n",
    "starterCode": "class Solution:\n    def sumOfNumberAndReverse(self, num: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "num = 443",
        "output": "True"
      },
      {
        "input": "num = 181",
        "output": "True"
      },
      {
        "input": "num = 99999",
        "output": "False"
      },
      {
        "input": "num = 1001",
        "output": "True"
      },
      {
        "input": "num = 0",
        "output": "True"
      },
      {
        "input": "num = 63",
        "output": "False"
      },
      {
        "input": "num = 1000",
        "output": "False"
      },
      {
        "input": "num = 121",
        "output": "True"
      },
      {
        "input": "num = 100",
        "output": "False"
      },
      {
        "input": "num = 123",
        "output": "False"
      },
      {
        "input": "num = 100000",
        "output": "False"
      },
      {
        "input": "num = 696",
        "output": "False"
      },
      {
        "input": "num = 1101",
        "output": "False"
      },
      {
        "input": "num = 999",
        "output": "False"
      },
      {
        "input": "num = 67876",
        "output": "True"
      },
      {
        "input": "num = 727",
        "output": "True"
      },
      {
        "input": "num = 454",
        "output": "False"
      },
      {
        "input": "num = 6789",
        "output": "False"
      },
      {
        "input": "num = 929",
        "output": "True"
      },
      {
        "input": "num = 1202",
        "output": "False"
      },
      {
        "input": "num = 767",
        "output": "True"
      },
      {
        "input": "num = 646",
        "output": "True"
      },
      {
        "input": "num = 1230",
        "output": "False"
      },
      {
        "input": "num = 67890",
        "output": "False"
      },
      {
        "input": "num = 808",
        "output": "True"
      },
      {
        "input": "num = 131",
        "output": "False"
      },
      {
        "input": "num = 303",
        "output": "True"
      },
      {
        "input": "num = 535",
        "output": "False"
      },
      {
        "input": "num = 12345",
        "output": "False"
      },
      {
        "input": "num = 606",
        "output": "True"
      },
      {
        "input": "num = 101010",
        "output": "True"
      },
      {
        "input": "num = 98765432123456789",
        "output": "Execution timed out"
      },
      {
        "input": "num = 12321",
        "output": "False"
      },
      {
        "input": "num = 252",
        "output": "False"
      },
      {
        "input": "num = 474",
        "output": "False"
      },
      {
        "input": "num = 343",
        "output": "True"
      },
      {
        "input": "num = 434",
        "output": "False"
      },
      {
        "input": "num = 868",
        "output": "True"
      },
      {
        "input": "num = 56789",
        "output": "False"
      },
      {
        "input": "num = 171",
        "output": "False"
      },
      {
        "input": "num = 797",
        "output": "False"
      },
      {
        "input": "num = 22222",
        "output": "True"
      },
      {
        "input": "num = 101",
        "output": "True"
      },
      {
        "input": "num = 12345678987654321",
        "output": "Execution timed out"
      },
      {
        "input": "num = 987654",
        "output": "False"
      },
      {
        "input": "num = 8008",
        "output": "True"
      },
      {
        "input": "num = 86420",
        "output": "False"
      },
      {
        "input": "num = 50005",
        "output": "True"
      },
      {
        "input": "num = 666",
        "output": "True"
      },
      {
        "input": "num = 939",
        "output": "False"
      },
      {
        "input": "num = 585",
        "output": "True"
      },
      {
        "input": "num = 440044",
        "output": "True"
      },
      {
        "input": "num = 2002",
        "output": "True"
      },
      {
        "input": "num = 393",
        "output": "False"
      },
      {
        "input": "num = 222",
        "output": "True"
      },
      {
        "input": "num = 98765",
        "output": "False"
      },
      {
        "input": "num = 151",
        "output": "False"
      },
      {
        "input": "num = 99009",
        "output": "False"
      },
      {
        "input": "num = 11",
        "output": "True"
      },
      {
        "input": "num = 959",
        "output": "False"
      },
      {
        "input": "num = 654321",
        "output": "False"
      },
      {
        "input": "num = 5050",
        "output": "False"
      },
      {
        "input": "num = 8228",
        "output": "True"
      },
      {
        "input": "num = 414",
        "output": "False"
      },
      {
        "input": "num = 67676",
        "output": "True"
      },
      {
        "input": "num = 876543",
        "output": "False"
      },
      {
        "input": "num = 898",
        "output": "False"
      },
      {
        "input": "num = 87654321",
        "output": "Execution timed out"
      },
      {
        "input": "num = 292",
        "output": "False"
      },
      {
        "input": "num = 878",
        "output": "False"
      },
      {
        "input": "num = 1331",
        "output": "True"
      },
      {
        "input": "num = 89898",
        "output": "True"
      },
      {
        "input": "num = 141",
        "output": "True"
      },
      {
        "input": "num = 80708",
        "output": "False"
      },
      {
        "input": "num = 191",
        "output": "False"
      },
      {
        "input": "num = 55555",
        "output": "False"
      },
      {
        "input": "num = 282",
        "output": "True"
      },
      {
        "input": "num = 575",
        "output": "False"
      },
      {
        "input": "num = 919",
        "output": "False"
      },
      {
        "input": "num = 848",
        "output": "True"
      },
      {
        "input": "num = 550055",
        "output": "True"
      },
      {
        "input": "num = 123456",
        "output": "False"
      },
      {
        "input": "num = 6006",
        "output": "True"
      },
      {
        "input": "num = 828",
        "output": "True"
      },
      {
        "input": "num = 262",
        "output": "True"
      },
      {
        "input": "num = 272",
        "output": "False"
      },
      {
        "input": "num = 353",
        "output": "False"
      },
      {
        "input": "num = 818",
        "output": "False"
      },
      {
        "input": "num = 110011",
        "output": "True"
      },
      {
        "input": "num = 525",
        "output": "True"
      },
      {
        "input": "num = 9",
        "output": "False"
      },
      {
        "input": "num = 43211234",
        "output": "True"
      },
      {
        "input": "num = 330033",
        "output": "True"
      },
      {
        "input": "num = 979",
        "output": "False"
      },
      {
        "input": "num = 424",
        "output": "True"
      },
      {
        "input": "num = 99990",
        "output": "False"
      },
      {
        "input": "num = 456654",
        "output": "True"
      },
      {
        "input": "num = 616",
        "output": "False"
      },
      {
        "input": "num = 707",
        "output": "True"
      },
      {
        "input": "num = 66666",
        "output": "True"
      },
      {
        "input": "num = 595",
        "output": "False"
      },
      {
        "input": "num = 100001",
        "output": "True"
      },
      {
        "input": "num = 88888",
        "output": "True"
      },
      {
        "input": "num = 1221",
        "output": "True"
      },
      {
        "input": "num = 323",
        "output": "True"
      },
      {
        "input": "num = 555",
        "output": "False"
      },
      {
        "input": "num = 383",
        "output": "True"
      },
      {
        "input": "num = 888",
        "output": "True"
      },
      {
        "input": "num = 100100",
        "output": "False"
      },
      {
        "input": "num = 757",
        "output": "False"
      },
      {
        "input": "num = 636",
        "output": "False"
      },
      {
        "input": "num = 313",
        "output": "False"
      },
      {
        "input": "num = 464",
        "output": "True"
      },
      {
        "input": "num = 494",
        "output": "False"
      },
      {
        "input": "num = 717",
        "output": "False"
      },
      {
        "input": "num = 7007",
        "output": "True"
      },
      {
        "input": "num = 686",
        "output": "True"
      },
      {
        "input": "num = 9009",
        "output": "True"
      },
      {
        "input": "num = 60006",
        "output": "True"
      },
      {
        "input": "num = 20202",
        "output": "True"
      },
      {
        "input": "num = 24680",
        "output": "False"
      },
      {
        "input": "num = 737",
        "output": "False"
      },
      {
        "input": "num = 8888",
        "output": "True"
      },
      {
        "input": "num = 543210",
        "output": "False"
      },
      {
        "input": "num = 1",
        "output": "False"
      },
      {
        "input": "num = 1010",
        "output": "True"
      },
      {
        "input": "num = 545",
        "output": "True"
      },
      {
        "input": "num = 656",
        "output": "False"
      },
      {
        "input": "num = 909",
        "output": "True"
      },
      {
        "input": "num = 565",
        "output": "True"
      },
      {
        "input": "num = 232",
        "output": "False"
      },
      {
        "input": "num = 54321",
        "output": "False"
      },
      {
        "input": "num = 98789",
        "output": "False"
      },
      {
        "input": "num = 45454",
        "output": "True"
      },
      {
        "input": "num = 50505",
        "output": "False"
      },
      {
        "input": "num = 11111",
        "output": "False"
      },
      {
        "input": "num = 90000",
        "output": "False"
      },
      {
        "input": "num = 45654",
        "output": "True"
      },
      {
        "input": "num = 78987",
        "output": "False"
      },
      {
        "input": "num = 676",
        "output": "False"
      },
      {
        "input": "num = 6789876",
        "output": "False"
      },
      {
        "input": "num = 1234321",
        "output": "True"
      },
      {
        "input": "num = 505",
        "output": "True"
      },
      {
        "input": "num = 363",
        "output": "True"
      },
      {
        "input": "num = 123321",
        "output": "True"
      },
      {
        "input": "num = 949",
        "output": "True"
      },
      {
        "input": "num = 1020",
        "output": "False"
      },
      {
        "input": "num = 220022",
        "output": "True"
      },
      {
        "input": "num = 838",
        "output": "False"
      },
      {
        "input": "num = 161",
        "output": "True"
      },
      {
        "input": "num = 33333",
        "output": "False"
      },
      {
        "input": "num = 626",
        "output": "True"
      },
      {
        "input": "num = 444",
        "output": "True"
      },
      {
        "input": "num = 13579",
        "output": "False"
      },
      {
        "input": "num = 787",
        "output": "True"
      },
      {
        "input": "num = 202",
        "output": "True"
      },
      {
        "input": "num = 75309",
        "output": "False"
      },
      {
        "input": "num = 373",
        "output": "False"
      },
      {
        "input": "num = 333",
        "output": "False"
      },
      {
        "input": "num = 22",
        "output": "True"
      },
      {
        "input": "num = 50000",
        "output": "False"
      },
      {
        "input": "num = 404",
        "output": "True"
      },
      {
        "input": "num = 13531",
        "output": "False"
      },
      {
        "input": "num = 989",
        "output": "True"
      },
      {
        "input": "num = 2022",
        "output": "False"
      },
      {
        "input": "num = 10101",
        "output": "False"
      },
      {
        "input": "num = 858",
        "output": "False"
      },
      {
        "input": "num = 111",
        "output": "False"
      },
      {
        "input": "num = 484",
        "output": "True"
      },
      {
        "input": "num = 515",
        "output": "False"
      },
      {
        "input": "num = 242",
        "output": "True"
      },
      {
        "input": "num = 50050",
        "output": "False"
      },
      {
        "input": "num = 777",
        "output": "False"
      },
      {
        "input": "num = 54545",
        "output": "False"
      },
      {
        "input": "num = 969",
        "output": "True"
      },
      {
        "input": "num = 747",
        "output": "True"
      },
      {
        "input": "num = 5005",
        "output": "True"
      },
      {
        "input": "num = 9999",
        "output": "True"
      },
      {
        "input": "num = 212",
        "output": "False"
      },
      {
        "input": "num = 10000",
        "output": "False"
      }
    ]
  },
  {
    "id": 2345,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Array",
      "Sorting",
      "Monotonic Stack"
    ],
    "problemDescription": "You are given a 0-indexed 2D integer array peaks where peaks[i] = [xi, yi] states that mountain i has a peak at coordinates (xi, yi). A mountain can be described as a right-angled isosceles triangle, with its base along the x-axis and a right angle at its peak. More formally, the gradients of ascending and descending the mountain are 1 and -1 respectively.\nA mountain is considered visible if its peak does not lie within another mountain (including the border of other mountains).\nReturn the number of visible mountains.\n\u00a0\nExample 1:\n\n\nInput: peaks = [[2,2],[6,3],[5,4]]\nOutput: 2\nExplanation: The diagram above shows the mountains.\n- Mountain 0 is visible since its peak does not lie within another mountain or its sides.\n- Mountain 1 is not visible since its peak lies within the side of mountain 2.\n- Mountain 2 is visible since its peak does not lie within another mountain or its sides.\nThere are 2 mountains that are visible.\nExample 2:\n\n\nInput: peaks = [[1,3],[1,3]]\nOutput: 0\nExplanation: The diagram above shows the mountains (they completely overlap).\nBoth mountains are not visible since their peaks lie within each other.\n\n\u00a0\nConstraints:\n\n1 <= peaks.length <= 105\npeaks[i].length == 2\n1 <= xi, yi <= 105\n\n",
    "starterCode": "class Solution:\n    def visibleMountains(self, peaks: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "peaks = [[5,5],[5,5],[5,5]]",
        "output": "0"
      },
      {
        "input": "peaks = [[100,100],[200,50],[300,100]]",
        "output": "3"
      },
      {
        "input": "peaks = [[1,2],[2,3],[3,4],[4,5]]",
        "output": "1"
      },
      {
        "input": "peaks = [[10,10],[15,5],[20,15]]",
        "output": "2"
      },
      {
        "input": "peaks = [[10,10],[15,5],[20,10]]",
        "output": "2"
      },
      {
        "input": "peaks = [[5,5],[5,6],[5,7]]",
        "output": "1"
      },
      {
        "input": "peaks = [[2,2],[6,3],[5,4]]",
        "output": "2"
      },
      {
        "input": "peaks = [[1,3],[1,3]]",
        "output": "0"
      },
      {
        "input": "peaks = [[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,1],[4,4],[7,7]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,1],[2,2],[3,3]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,10],[2,9],[3,8],[4,7],[5,6]]",
        "output": "1"
      },
      {
        "input": "peaks = [[5,5],[6,3],[7,4]]",
        "output": "2"
      },
      {
        "input": "peaks = [[10,10],[5,5],[15,15]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "1"
      },
      {
        "input": "peaks = [[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "1"
      },
      {
        "input": "peaks = [[3,3],[3,3],[3,3]]",
        "output": "0"
      },
      {
        "input": "peaks = [[10,10],[15,5],[5,5],[20,15]]",
        "output": "2"
      },
      {
        "input": "peaks = [[1,10],[11,10],[21,10]]",
        "output": "3"
      },
      {
        "input": "peaks = [[3,5],[6,5],[9,5]]",
        "output": "3"
      },
      {
        "input": "peaks = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,5],[2,4],[3,3],[4,2],[5,1]]",
        "output": "1"
      },
      {
        "input": "peaks = [[3,5],[2,2],[4,4],[6,6]]",
        "output": "2"
      },
      {
        "input": "peaks = [[5,1],[4,2],[3,3],[2,4],[1,5]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,2],[3,4],[5,6],[7,8]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,5],[2,3],[3,5]]",
        "output": "2"
      },
      {
        "input": "peaks = [[5,10],[10,5],[15,10],[20,5],[25,10],[30,5],[35,10],[40,5],[45,10],[50,5]]",
        "output": "5"
      },
      {
        "input": "peaks = [[1,10],[3,4],[5,6],[7,8],[9,5],[11,7]]",
        "output": "3"
      },
      {
        "input": "peaks = [[100000,1],[100000,2],[100000,3],[100000,4],[100000,5],[100000,6]]",
        "output": "1"
      },
      {
        "input": "peaks = [[5,10],[15,10],[25,10],[35,10],[45,10]]",
        "output": "5"
      },
      {
        "input": "peaks = [[5,5],[4,4],[3,3],[2,2],[1,1],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "1"
      },
      {
        "input": "peaks = [[10,10],[11,11],[12,10],[13,11],[14,10],[15,11],[16,10],[17,11],[18,10],[19,11]]",
        "output": "5"
      },
      {
        "input": "peaks = [[10,5],[20,15],[30,25],[40,35],[50,45],[60,55],[70,65],[80,75],[90,85],[100,95]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20]]",
        "output": "1"
      },
      {
        "input": "peaks = [[10,5],[20,10],[30,15],[40,20],[50,25],[60,30],[70,35],[80,40],[90,45]]",
        "output": "9"
      },
      {
        "input": "peaks = [[10,5],[15,10],[20,5],[25,10],[30,5],[35,10]]",
        "output": "3"
      },
      {
        "input": "peaks = [[1, 1], [100000, 1], [50000, 50000], [25000, 25000], [75000, 25000]]",
        "output": "2"
      },
      {
        "input": "peaks = [[1,100000],[2,99999],[3,99998],[4,99997],[5,99996]]",
        "output": "1"
      },
      {
        "input": "peaks = [[10,10],[20,10],[15,20],[15,15],[25,15],[30,20],[5,5],[35,5]]",
        "output": "2"
      },
      {
        "input": "peaks = [[5,10],[10,15],[15,10],[20,15],[25,10]]",
        "output": "2"
      },
      {
        "input": "peaks = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]]",
        "output": "1"
      },
      {
        "input": "peaks = [[2,2],[4,4],[6,6],[8,8],[10,10],[12,12],[14,14],[16,16],[18,18],[20,20]]",
        "output": "1"
      },
      {
        "input": "peaks = [[10,5],[15,15],[20,5],[25,15],[30,5],[35,15],[40,5],[45,15],[50,5],[55,15]]",
        "output": "5"
      },
      {
        "input": "peaks = [[1,1],[2,2],[3,3],[4,4],[5,5],[4,6],[3,7],[2,8],[1,9]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,1],[10,10],[100,100],[1000,1000],[10000,10000],[100000,100000],[100000,100000],[10000,10000],[1000,1000],[100,100],[10,10],[1,1]]",
        "output": "0"
      },
      {
        "input": "peaks = [[10,5],[15,15],[20,5],[25,15],[30,5],[35,15]]",
        "output": "3"
      },
      {
        "input": "peaks = [[10, 10], [20, 20], [30, 10], [40, 20], [50, 10], [60, 20], [70, 10], [80, 20], [90, 10], [100, 20]]",
        "output": "5"
      },
      {
        "input": "peaks = [[1, 1], [2, 3], [3, 1], [4, 3], [5, 1], [6, 3], [7, 1], [8, 3], [9, 1], [10, 3]]",
        "output": "5"
      },
      {
        "input": "peaks = [[1,1],[3,3],[5,5],[7,7],[9,9],[11,11],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1, 10], [5, 5], [9, 1], [13, 5], [17, 10], [21, 5], [25, 1]]",
        "output": "2"
      },
      {
        "input": "peaks = [[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10],[10,10]]",
        "output": "10"
      },
      {
        "input": "peaks = [[100,100],[150,150],[200,200],[250,250],[300,300]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,5],[3,5],[5,5],[7,5],[9,5],[11,5],[13,5],[15,5],[17,5],[19,5]]",
        "output": "10"
      },
      {
        "input": "peaks = [[10,10],[20,10],[30,10],[40,10],[50,10]]",
        "output": "5"
      },
      {
        "input": "peaks = [[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]]",
        "output": "0"
      },
      {
        "input": "peaks = [[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91],[11,90],[12,89],[13,88],[14,87],[15,86],[16,85],[17,84],[18,83],[19,82],[20,81]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,3],[3,1],[5,3],[7,1],[9,3],[11,1],[13,3],[15,1],[17,3],[19,1],[21,3],[23,1],[25,3],[27,1],[29,3]]",
        "output": "8"
      },
      {
        "input": "peaks = [[1,10],[2,11],[3,12],[4,13],[5,14],[6,15],[7,16],[8,17],[9,18],[10,19],[11,20],[12,21],[13,22],[14,23],[15,24]]",
        "output": "1"
      },
      {
        "input": "peaks = [[5,5],[15,5],[25,5],[35,5],[45,5],[55,5],[65,5],[75,5],[85,5]]",
        "output": "9"
      },
      {
        "input": "peaks = [[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[8,5],[9,5],[10,5]]",
        "output": "10"
      },
      {
        "input": "peaks = [[1,1],[1,1],[2,2],[2,2],[3,3],[3,3],[4,4],[4,4],[5,5],[5,5]]",
        "output": "0"
      },
      {
        "input": "peaks = [[1,10],[5,5],[9,9],[13,13],[17,17],[21,21],[25,25],[29,29]]",
        "output": "2"
      },
      {
        "input": "peaks = [[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],[5,9],[5,10]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,1],[2,3],[3,1],[4,3],[5,1],[6,3],[7,1],[8,3],[9,1],[10,3]]",
        "output": "5"
      },
      {
        "input": "peaks = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,10]]",
        "output": "1"
      },
      {
        "input": "peaks = [[50000,50000],[60000,50000],[70000,50000],[80000,50000]]",
        "output": "4"
      },
      {
        "input": "peaks = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,1],[10,10],[2,2],[9,9],[3,3],[8,8],[4,4],[7,7],[5,5],[6,6]]",
        "output": "1"
      },
      {
        "input": "peaks = [[5,1],[15,1],[25,1],[35,1],[45,1],[55,1],[65,1],[75,1],[85,1]]",
        "output": "9"
      },
      {
        "input": "peaks = [[10,20],[15,15],[20,10],[25,5],[30,10],[35,15],[40,20],[45,15],[50,10],[55,5],[60,10],[65,15],[70,20]]",
        "output": "3"
      },
      {
        "input": "peaks = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1],[11,2],[12,3],[13,4],[14,5],[15,6],[16,7],[17,8],[18,9],[19,10]]",
        "output": "2"
      },
      {
        "input": "peaks = [[1,1],[1,1],[1,1],[2,2],[2,2],[3,3],[3,3],[4,4],[4,4],[5,5],[5,5]]",
        "output": "0"
      },
      {
        "input": "peaks = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]]",
        "output": "10"
      },
      {
        "input": "peaks = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,9],[8,8],[9,7],[10,6]]",
        "output": "1"
      },
      {
        "input": "peaks = [[5,5],[15,5],[10,10],[20,5],[12,8]]",
        "output": "2"
      },
      {
        "input": "peaks = [[10,100],[20,50],[30,100],[40,50],[50,100],[60,50],[70,100]]",
        "output": "4"
      },
      {
        "input": "peaks = [[1,1],[3,10],[5,1],[7,5],[9,1],[11,6],[13,1]]",
        "output": "2"
      },
      {
        "input": "peaks = [[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10]]",
        "output": "0"
      },
      {
        "input": "peaks = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "0"
      },
      {
        "input": "peaks = [[1,100],[100,100],[100,1],[1,1],[50,50],[75,25],[25,75]]",
        "output": "2"
      },
      {
        "input": "peaks = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1],[11,10],[12,9],[13,8],[14,7],[15,6],[16,5],[17,4],[18,3],[19,2],[20,1]]",
        "output": "2"
      },
      {
        "input": "peaks = [[10,5],[15,10],[20,5],[25,10],[30,5],[35,10],[40,5]]",
        "output": "3"
      },
      {
        "input": "peaks = [[1,10],[10,1],[2,8],[9,2],[5,5]]",
        "output": "1"
      },
      {
        "input": "peaks = [[10,50],[20,20],[30,50],[40,20],[50,50],[60,20],[70,50],[80,20],[90,50]]",
        "output": "5"
      },
      {
        "input": "peaks = [[10,15],[20,25],[30,15],[40,25],[50,15],[60,25],[70,15],[80,25],[90,15]]",
        "output": "4"
      },
      {
        "input": "peaks = [[10,10],[20,30],[30,50],[40,30],[50,10],[60,30],[70,50]]",
        "output": "2"
      },
      {
        "input": "peaks = [[5,20],[15,10],[25,20],[35,10],[45,20],[55,10],[65,20],[75,10],[85,20]]",
        "output": "5"
      },
      {
        "input": "peaks = [[5,10],[10,5],[15,10],[20,5],[25,10],[30,5]]",
        "output": "3"
      },
      {
        "input": "peaks = [[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,1],[3,3],[5,5],[7,7],[9,9],[11,11],[13,13],[15,15],[17,17]]",
        "output": "1"
      },
      {
        "input": "peaks = [[10,5],[15,10],[20,15],[25,20],[30,25],[35,30]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]]",
        "output": "1"
      },
      {
        "input": "peaks = [[10, 1], [20, 2], [30, 3], [40, 4], [50, 5], [60, 6], [70, 7]]",
        "output": "7"
      },
      {
        "input": "peaks = [[10,100],[20,100],[30,100],[40,100],[50,100],[60,100],[70,100],[80,100],[90,100]]",
        "output": "9"
      },
      {
        "input": "peaks = [[5,1],[10,2],[15,3],[20,4],[25,5],[30,6],[35,7],[40,8],[45,9],[50,10]]",
        "output": "10"
      },
      {
        "input": "peaks = [[10,10],[20,10],[30,10],[40,10],[50,10],[60,10],[70,10],[80,10],[90,10],[100,10]]",
        "output": "10"
      },
      {
        "input": "peaks = [[10,10],[11,9],[12,8],[13,7],[14,6],[15,5],[16,4],[17,3],[18,2],[19,1]]",
        "output": "1"
      },
      {
        "input": "peaks = [[5,25],[10,20],[15,25],[20,20],[25,25],[30,20],[35,25],[40,20],[45,25],[50,20]]",
        "output": "5"
      },
      {
        "input": "peaks = [[1,1],[10,10],[1,2],[10,9],[1,3],[10,8],[1,4],[10,7],[1,5],[10,6]]",
        "output": "2"
      },
      {
        "input": "peaks = [[1,1],[2,2],[3,3],[4,4],[5,5],[4,6],[3,7],[2,8],[1,9],[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10]]",
        "output": "9"
      },
      {
        "input": "peaks = [[1,100000],[2,99999],[3,99998],[4,99997],[5,99996],[6,99995],[7,99994],[8,99993],[9,99992]]",
        "output": "1"
      },
      {
        "input": "peaks = [[10,10],[15,10],[20,10],[12,15],[17,15],[22,15],[14,20],[19,20],[24,20]]",
        "output": "3"
      },
      {
        "input": "peaks = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1]]",
        "output": "10"
      },
      {
        "input": "peaks = [[5,10],[10,5],[15,10],[20,5],[25,10],[30,5],[35,10],[40,5],[45,10]]",
        "output": "5"
      },
      {
        "input": "peaks = [[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10]]",
        "output": "9"
      },
      {
        "input": "peaks = [[5,10],[15,10],[25,10],[35,10],[45,10],[55,10],[65,10]]",
        "output": "7"
      },
      {
        "input": "peaks = [[1, 100000], [2, 99999], [3, 99998], [4, 99997], [5, 99996], [6, 99995], [7, 99994], [8, 99993], [9, 99992], [10, 99991]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[1,10],[10,1]]",
        "output": "2"
      },
      {
        "input": "peaks = [[10,10],[20,15],[25,5],[30,20],[40,10],[50,25]]",
        "output": "4"
      },
      {
        "input": "peaks = [[1,1],[5,5],[9,9],[13,13],[17,17],[21,21],[25,25],[29,29]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,100000],[100000,1],[1,1],[100000,100000]]",
        "output": "2"
      },
      {
        "input": "peaks = [[1,1],[2,2],[2,2],[3,3],[3,3],[4,4],[4,4],[5,5],[5,5],[6,6],[6,6],[7,7],[7,7],[8,8],[8,8],[9,9],[9,9]]",
        "output": "0"
      },
      {
        "input": "peaks = [[1,100],[5,50],[10,100],[15,50],[20,100],[25,50],[30,100]]",
        "output": "4"
      },
      {
        "input": "peaks = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6]]",
        "output": "6"
      },
      {
        "input": "peaks = [[1,5],[2,6],[3,5],[4,6],[5,5],[6,6],[7,5],[8,6],[9,5],[10,6]]",
        "output": "5"
      },
      {
        "input": "peaks = [[1,1],[2,2],[3,3],[4,4],[5,5],[4,4],[3,3],[2,2],[1,1]]",
        "output": "1"
      },
      {
        "input": "peaks = [[5,3],[10,6],[15,9],[20,12],[25,15],[30,18],[35,21],[40,24],[45,27],[50,30]]",
        "output": "10"
      },
      {
        "input": "peaks = [[5,5],[6,6],[7,5],[8,6],[9,5],[10,6],[11,5],[12,6],[13,5],[14,6]]",
        "output": "5"
      },
      {
        "input": "peaks = [[1,2],[2,4],[3,6],[4,8],[5,10],[6,8],[7,6],[8,4],[9,2]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,100000],[2,99999],[3,99998],[4,99997],[5,99996],[6,99995]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,5],[4,5],[7,5],[10,5],[13,5],[16,5],[19,5]]",
        "output": "7"
      },
      {
        "input": "peaks = [[100,100],[200,200],[150,150],[250,250],[175,175],[225,225],[275,275],[325,325]]",
        "output": "1"
      },
      {
        "input": "peaks = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "1"
      },
      {
        "input": "peaks = [[10,10],[10,10],[20,20],[20,20],[30,30],[30,30]]",
        "output": "0"
      },
      {
        "input": "peaks = [[5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5]]",
        "output": "0"
      },
      {
        "input": "peaks = [[1,50],[10,50],[20,50],[30,50],[40,50],[50,50],[60,50],[70,50],[80,50],[90,50]]",
        "output": "10"
      }
    ]
  },
  {
    "id": 2856,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Counting"
    ],
    "problemDescription": "Given an integer array num sorted in non-decreasing order.\nYou can perform the following operation any number of times:\n\nChoose two indices, i and j, where nums[i] < nums[j].\nThen, remove the elements at indices i and j from nums. The remaining elements retain their original order, and the array is re-indexed.\n\nReturn the minimum length of nums after applying the operation zero or more times.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,3,4]\nOutput: 0\nExplanation:\n\n\nExample 2:\n\nInput: nums = [1,1,2,2,3,3]\nOutput: 0\nExplanation:\n\n\nExample 3:\n\nInput: nums = [1000000000,1000000000]\nOutput: 2\nExplanation:\nSince both numbers are equal, they cannot be removed.\n\nExample 4:\n\nInput: nums = [2,3,4,4,4]\nOutput: 1\nExplanation:\n\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\nnums is sorted in non-decreasing order.\n\n",
    "starterCode": "class Solution:\n    def minLengthAfterRemovals(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,3]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,2,2,3,3,3]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2]",
        "output": "9"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,2,3,3]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,2,2,3]",
        "output": "0"
      },
      {
        "input": "nums = [1000000000,1000000000]",
        "output": "2"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3]",
        "output": "1"
      },
      {
        "input": "nums = [2,3,4,4,4]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,2,2,2,2]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,2,3,3,3,3]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,3,3,4,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,4,5,6,7,8,8,8,9,10,11,12,12,13,14,15,16,16,17,18,19,20,20,20,20,20,20,21,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,6]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,2,3,3,3,4,4,5,5,5,5,5,6,6,6,6,7,7,7,7,7,7,7,7,7,7]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "20"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,7,8,9]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20]",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,5,5,5,5,6,6,6,6,7,7,7,8,8,8,9,9,10]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "14"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,4,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,5,5,5,5,6,6]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,2,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,7]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,2,2,2,2,3,3,4,4,4,4,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "42"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,7,7,8,8,8,8,8,9,9]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,10]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,4,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,2,2,3,4,4,4,4,5,5,5,5,5,6]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,6,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,7,7,7]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "38"
      },
      {
        "input": "nums = [1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,2,2,3,3,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,8,8,8]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,2,2,3,3,3,4,4]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]",
        "output": "16"
      },
      {
        "input": "nums = [1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,4,4]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "34"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,2,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,5,5,5,5,6,6,6,6]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,3,3,4,4,4,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]",
        "output": "23"
      },
      {
        "input": "nums = [1,1,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,2,3,3,3,4,4]",
        "output": "0"
      }
    ]
  },
  {
    "id": 2181,
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Simulation"
    ],
    "problemDescription": "You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0.\nFor every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.\nReturn the head of the modified linked list.\n\u00a0\nExample 1:\n\n\nInput: head = [0,3,1,0,4,5,2,0]\nOutput: [4,11]\nExplanation: \nThe above figure represents the given linked list. The modified list contains\n- The sum of the nodes marked in green: 3 + 1 = 4.\n- The sum of the nodes marked in red: 4 + 5 + 2 = 11.\n\nExample 2:\n\n\nInput: head = [0,1,0,3,0,2,2,0]\nOutput: [1,3,4]\nExplanation: \nThe above figure represents the given linked list. The modified list contains\n- The sum of the nodes marked in green: 1 = 1.\n- The sum of the nodes marked in red: 3 = 3.\n- The sum of the nodes marked in yellow: 2 + 2 = 4.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [3, 2 * 105].\n0 <= Node.val <= 1000\nThere are no two consecutive nodes with Node.val == 0.\nThe beginning and end of the linked list have Node.val == 0.\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "head = [0,3,1,0,4,5,2,0]",
        "output": "[4, 11]"
      },
      {
        "input": "head = [0,1,2,3,4,5,0,6,7,8,9,0]",
        "output": "[15, 30]"
      },
      {
        "input": "head = [0,10,0]",
        "output": "[10]"
      },
      {
        "input": "head = [0,5,6,7,8,0,9,10,11,0]",
        "output": "[26, 30]"
      },
      {
        "input": "head = [0,10,20,30,0,40,50,60,0]",
        "output": "[60, 150]"
      },
      {
        "input": "head = [0,1,2,3,0,4,5,6,0]",
        "output": "[6, 15]"
      },
      {
        "input": "head = [0,999,0,1,2,3,0,1000,0]",
        "output": "[999, 6, 1000]"
      },
      {
        "input": "head = [0,1,0,3,0,2,2,0]",
        "output": "[1, 3, 4]"
      },
      {
        "input": "head = [0,10,0,20,30,0,40,50,0]",
        "output": "[10, 50, 90]"
      },
      {
        "input": "head = [0,10,20,30,0,5,5,0,4,4,4,0]",
        "output": "[60, 10, 12]"
      },
      {
        "input": "head = [0,999,999,999,0]",
        "output": "[2997]"
      },
      {
        "input": "head = [0,0]",
        "output": "[0]"
      },
      {
        "input": "head = [0,1000,0,1000,1000,0]",
        "output": "[1000, 2000]"
      },
      {
        "input": "head = [0,1000,0]",
        "output": "[1000]"
      },
      {
        "input": "head = [0,1,0,0,1,0,0,1,0,0,1,0,0,1,0]",
        "output": "[1, 0, 1, 0, 1, 0, 1, 0, 1]"
      },
      {
        "input": "head = [0,100,0,200,0,300,0,400,0,500,0,600,0,700,0]",
        "output": "[100, 200, 300, 400, 500, 600, 700]"
      },
      {
        "input": "head = [0,10,20,30,40,50,0,60,70,80,90,100,0,110,120,130,0]",
        "output": "[150, 400, 360]"
      },
      {
        "input": "head = [0,10,0,20,0,30,0,40,0,50,0,60,0,70,0]",
        "output": "[10, 20, 30, 40, 50, 60, 70]"
      },
      {
        "input": "head = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0]",
        "output": "[210]"
      },
      {
        "input": "head = [0,10,20,30,40,50,0,60,70,80,90,100,0,110,120,130,0,140,150,160,170,180,190,0]",
        "output": "[150, 400, 360, 990]"
      },
      {
        "input": "head = [0,10,20,30,40,50,0,60,70,80,90,100,0,110,120,130,140,150,0,160,170,180,190,200,0]",
        "output": "[150, 400, 650, 900]"
      },
      {
        "input": "head = [0,999,1,0,998,2,0,997,3,0]",
        "output": "[1000, 1000, 1000]"
      },
      {
        "input": "head = [0,999,1,2,3,0,456,789,0,101,202,303,404,0]",
        "output": "[1005, 1245, 1010]"
      },
      {
        "input": "head = [0,100,200,300,400,500,0,600,700,800,900,1000,0]",
        "output": "[1500, 4000]"
      },
      {
        "input": "head = [0,1,2,3,0,4,5,6,0,7,8,9,0,10,11,12,0,13,14,15,0,16,17,18,0,19,20,21,0]",
        "output": "[6, 15, 24, 33, 42, 51, 60]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0]",
        "output": "[120]"
      },
      {
        "input": "head = [0,1,2,3,4,5,0,6,7,8,9,10,0,11,12,13,14,0,15,16,17,0,18,19,20,0]",
        "output": "[15, 40, 50, 48, 57]"
      },
      {
        "input": "head = [0,999,999,999,999,999,0,999,999,999,999,999,0]",
        "output": "[4995, 4995]"
      },
      {
        "input": "head = [0,1,2,3,0,4,5,6,7,8,9,0,10,11,12,13,14,15,16,17,18,19,0]",
        "output": "[6, 39, 145]"
      },
      {
        "input": "head = [0,1,2,3,4,5,0,6,7,8,9,0,10,11,12,0,13,14,15,16,17,0,18,19,20,0]",
        "output": "[15, 30, 33, 75, 57]"
      },
      {
        "input": "head = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [0,100,200,300,400,0,500,600,700,800,900,0,1000,0]",
        "output": "[1000, 3500, 1000]"
      },
      {
        "input": "head = [0,100,200,0,300,400,500,0,600,700,800,900,1000,0]",
        "output": "[300, 1200, 4000]"
      },
      {
        "input": "head = [0,100,200,300,400,0,500,600,700,800,0,900,1000,0]",
        "output": "[1000, 2600, 1900]"
      },
      {
        "input": "head = [0,999,0,998,0,997,0,996,0,995,0,994,0,993,0,992,0,991,0]",
        "output": "[999, 998, 997, 996, 995, 994, 993, 992, 991]"
      },
      {
        "input": "head = [0,1,2,3,0,4,5,6,0,7,8,9,0,10,11,12,0]",
        "output": "[6, 15, 24, 33]"
      },
      {
        "input": "head = [0,0,0,0,0,0]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [0,1,1,1,1,0,2,2,2,2,2,0,3,3,0]",
        "output": "[4, 10, 6]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0]",
        "output": "[325]"
      },
      {
        "input": "head = [0,1,1,1,1,1,0,2,2,2,2,2,0,3,3,3,3,3,0]",
        "output": "[5, 10, 15]"
      },
      {
        "input": "head = [0,10,10,10,10,0,10,10,10,10,0,10,10,10,10,0]",
        "output": "[40, 40, 40]"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [0,100,200,300,400,0,500,600,700,800,900,0,1000,0,1,2,3,4,5,6,7,8,9,0]",
        "output": "[1000, 3500, 1000, 45]"
      },
      {
        "input": "head = [0,9,8,7,6,5,4,3,2,1,0,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "[45, 55]"
      },
      {
        "input": "head = [0,1,2,0,3,4,5,0,6,7,8,9,10,0]",
        "output": "[3, 12, 40]"
      },
      {
        "input": "head = [0,999,0,999,999,0,999,999,999,0,999,999,999,0]",
        "output": "[999, 1998, 2997, 2997]"
      },
      {
        "input": "head = [0,100,200,300,0,400,500,600,0,700,800,900,0]",
        "output": "[600, 1500, 2400]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,0,10,11,12,13,14,15,16,17,18,19,0]",
        "output": "[45, 145]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,0,10,11,12,13,14,15,0]",
        "output": "[45, 75]"
      },
      {
        "input": "head = [0,1,2,3,4,5,0,6,7,8,9,0,10,11,12,13,14,15,16,17,18,19,0,20,21,22,23,24,25,0]",
        "output": "[15, 30, 145, 135]"
      },
      {
        "input": "head = [0,100,200,0,300,400,500,0,600,700,0,800,900,0]",
        "output": "[300, 1200, 1300, 1700]"
      },
      {
        "input": "head = [0,1,1,1,1,1,0,2,2,2,2,2,0,3,3,3,3,3,0,4,4,4,4,4,0]",
        "output": "[5, 10, 15, 20]"
      },
      {
        "input": "head = [0,999,1,0,998,2,0,997,3,0,996,4,0,995,5,0]",
        "output": "[1000, 1000, 1000, 1000, 1000]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,0,10,11,12,13,14,15,16,17,18,19,0,20,21,22,23,24,25,0,26,27,28,29,30,0]",
        "output": "[45, 145, 135, 140]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,0,9,8,7,6,5,4,3,2,1,0]",
        "output": "[45, 45]"
      },
      {
        "input": "head = [0,50,50,0,100,100,100,0,150,150,150,150,0]",
        "output": "[100, 300, 600]"
      },
      {
        "input": "head = [0,100,200,300,0,400,500,0,600,700,0,800,900,0,1000,0]",
        "output": "[600, 900, 1300, 1700, 1000]"
      },
      {
        "input": "head = [0,10,0,20,0,30,0,40,0,50,0,60,0,70,0,80,0,90,0,100,0]",
        "output": "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"
      },
      {
        "input": "head = [0,1,0,1,2,0,1,2,3,0,1,2,3,4,0,1,2,3,4,5,0]",
        "output": "[1, 3, 6, 10, 15]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,0,10,11,12,13,14,0,15,16,17,18,19,20,0]",
        "output": "[45, 60, 105]"
      },
      {
        "input": "head = [0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [0,500,0,500,0,500,0,500,0,500,0,500,0,500,0,500,0,500,0]",
        "output": "[500, 500, 500, 500, 500, 500, 500, 500, 500]"
      },
      {
        "input": "head = [0,1,0,2,0,3,0,4,0,5,0]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [0,1,2,3,0,4,5,0,6,7,8,0,9,10,11,0,12,13,14,0,15,16,17,0]",
        "output": "[6, 9, 21, 30, 39, 48]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,0,7,8,9,10,11,0,12,13,14,0]",
        "output": "[21, 45, 39]"
      },
      {
        "input": "head = [0,5,5,5,5,5,0,5,5,5,5,5,0,5,5,5,5,5,0]",
        "output": "[25, 25, 25]"
      },
      {
        "input": "head = [0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [0,250,250,250,0,750,0,125,125,125,125,0,625,625,0]",
        "output": "[750, 750, 500, 1250]"
      },
      {
        "input": "head = [0,100,0,200,0,300,0,400,0,500,0,600,0,700,0,800,0,900,0,1000,0]",
        "output": "[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]"
      },
      {
        "input": "head = [0,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,0]",
        "output": "[10, 20, 30]"
      },
      {
        "input": "head = [0,50,50,50,50,0,50,50,50,50,0,50,50,50,50,0,50,50,50,50,0,50,50,50,50,0]",
        "output": "[200, 200, 200, 200, 200]"
      },
      {
        "input": "head = [0,999,1,0,998,2,0,997,3,0,996,4,0]",
        "output": "[1000, 1000, 1000, 1000]"
      },
      {
        "input": "head = [0,1,2,3,0,4,5,6,0,7,8,9,10,0]",
        "output": "[6, 15, 34]"
      },
      {
        "input": "head = [0,50,25,0,75,100,0,200,150,0,300,400,0,500,600,0,700,800,900,0]",
        "output": "[75, 175, 350, 700, 1100, 2400]"
      },
      {
        "input": "head = [0,999,0,1,2,3,4,5,0,6,7,8,9,0,10,11,12,13,14,15,16,17,18,19,20,0]",
        "output": "[999, 15, 30, 165]"
      },
      {
        "input": "head = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,10,0,11,12,13,14,15,16,17,18,19,20,0]",
        "output": "[55, 155]"
      },
      {
        "input": "head = [0,100,200,300,400,0,500,600,700,800,900,0,1000,1000,1000,0]",
        "output": "[1000, 3500, 3000]"
      },
      {
        "input": "head = [0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [0,100,200,0,300,400,500,0,600,700,0]",
        "output": "[300, 1200, 1300]"
      },
      {
        "input": "head = [0,1,0,2,3,4,0,5,6,7,8,9,0,10,11,12,13,14,15,0,16,17,18,19,20,0]",
        "output": "[1, 9, 35, 75, 90]"
      },
      {
        "input": "head = [0,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,0]",
        "output": "[45, 45]"
      },
      {
        "input": "head = [0,100,200,0,300,400,500,0,600,700,800,900,0]",
        "output": "[300, 1200, 3000]"
      },
      {
        "input": "head = [0,500,400,300,200,100,0,900,800,700,600,500,0,400,300,200,100,0,900,800,700,600,500,0,400,300,200,100,0]",
        "output": "[1500, 3500, 1000, 3500, 1000]"
      },
      {
        "input": "head = [0,1,0,1,0,1,0,1,0,1,0]",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]",
        "output": "[19]"
      },
      {
        "input": "head = [0,10,20,0,30,40,0,50,60,70,0,80,90,0]",
        "output": "[30, 70, 180, 170]"
      },
      {
        "input": "head = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "[1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [0,0,0,0,0]",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,0]",
        "output": "[820]"
      }
    ]
  },
  {
    "id": 1302,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree, return the sum of values of its deepest leaves.\n\u00a0\nExample 1:\n\n\nInput: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\nOutput: 15\n\nExample 2:\n\nInput: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\nOutput: 19\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n1 <= Node.val <= 100\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "92"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,null,null,null,null,8]",
        "output": "15"
      },
      {
        "input": "root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
        "output": "19"
      },
      {
        "input": "root = [1]",
        "output": "1"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,null,null,null,6]",
        "output": "9"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,1,null,null,2,null,null,3,null,null,4]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,null,null,null,8,9,10,11,12,13,14,15]",
        "output": "29"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "10"
      },
      {
        "input": "root = [2,4,6,8,10,12,14,null,null,null,null,null,null,16,18,null,null,null,null,null,null,20,22,24,null,null,null,null,26,28,30]",
        "output": "34"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,null,null,31]",
        "output": "31"
      },
      {
        "input": "root = [1,2,3,null,4,5,null,6,7,null,8,9,null,10,11,null,12,13,null,14,15,null,16,17,null,18,19,null,20,21]",
        "output": "78"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,null,null,null,null,null,null,null,null,null,21]",
        "output": "111"
      },
      {
        "input": "root = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "184"
      },
      {
        "input": "root = [5,4,5,4,7,null,null,null,null,7,7]",
        "output": "14"
      },
      {
        "input": "root = [5,10,null,15,20,null,25,30,35,null,null,40,45,null,null,null,null,null,null,50,55]",
        "output": "85"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "15"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,16,null,null,null,null,17,null,null,null,null,18,null,null,null,null,19,null,null,null,null,20,null,null,null,null,21,null,null,null,null,22,null,null,null,null,23,null,null,null,null,24,null,null,null,null,25]",
        "output": "33"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,null,null,null,31,32,null,null,null,null,35,36,37,38]",
        "output": "209"
      },
      {
        "input": "root = [1,2,null,4,null,null,null,8,null,null,null,null,null,null,null,16]",
        "output": "4"
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4,null,null,null,null,9,10]",
        "output": "19"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1,null,3]",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,null,null,null,31,32]",
        "output": "63"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,null,7,8,null,null,null,null,null,null,null,9,10,null,null,null,null,11]",
        "output": "15"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,16,null,null,null,null,17,null,null,null,null,18,null,null,null,null,19,null,null,null,null,20,null,null,null,null,21,null,null,null,null,22,null,null,null,null,23,null,null,null,null,24]",
        "output": "33"
      },
      {
        "input": "root = [4,2,7,1,3,6,9,null,null,null,null,5,8,null,null,13,14]",
        "output": "27"
      },
      {
        "input": "root = [5,3,8,1,4,null,10,null,null,null,9,7,11]",
        "output": "27"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,11,null,12,null,13,null,14,null,15]",
        "output": "15"
      },
      {
        "input": "root = [31,15,47,7,23,39,55,3,11,19,27,35,43,51,59,1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,63]",
        "output": "63"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,16,17,18,19,20,21,22,23,24,25]",
        "output": "72"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,null,null,9,null,null,10,null,null,11,null,null,12,null,null,13,null,null,14,null,null,15,null,null,16,null,null,17,null,null,18,null,null,19,null,null,20,null,null,21,null,null,22,null,null,23,null,null,24,null,null,25]",
        "output": "15"
      },
      {
        "input": "root = [5,10,15,20,25,30,35,null,40,null,null,null,45,null,null,50,55]",
        "output": "105"
      },
      {
        "input": "root = [1,2,2,3,3,null,null,4,4,4,4,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]",
        "output": "16"
      },
      {
        "input": "root = [5,3,8,1,4,7,10,null,null,null,6,null,9,null,null,11,12]",
        "output": "23"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "234"
      },
      {
        "input": "root = [10,15,20,25,30,35,40,45,50,55,60,65,70,75,80]",
        "output": "500"
      },
      {
        "input": "root = [9,18,27,36,45,54,63,72,81,90,null,99,null,null,null,null,null,null,null,null,null,null,108,117,126,135,144,153,162,171,180]",
        "output": "351"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1]",
        "output": "10"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,6,7,null,null,8,9,10,11,null,null,null,null,null,null,null,null,12,null,null,null,13]",
        "output": "21"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,6,7,null,null,8,9,null,null,10,11,null,null,12,13,null,null,14,15,null,null,16,17]",
        "output": "33"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "345"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37]",
        "output": "37"
      },
      {
        "input": "root = [1,2,3,null,5,6,null,7,null,null,8,null,null,9,null,null,10]",
        "output": "10"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1,null,null,null,6]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "90"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20]",
        "output": "20"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,29,30]",
        "output": "59"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "140"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,16,null,null,null,null,17,null,null,null,null,18,null,null,null,null,19,null,null,null,null,20,null,null,null,null,21,null,null,null,null,22,null,null,null,null,23]",
        "output": "33"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,25,30,40,50,60,70,80,90]",
        "output": "300"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "205"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "779"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1,null,null,null,9]",
        "output": "9"
      },
      {
        "input": "root = [1,2,3,null,null,null,4,null,null,null,null,5,null,null,null,null,6,null,null,null,null,7,null,null,null,null,8,null,null,null,null,9]",
        "output": "4"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,1,null,null,null,null,2,null,null,16]",
        "output": "2"
      },
      {
        "input": "root = [10,9,20,null,null,15,7,null,null,1,2,null,null,3,4]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,null,null,null,31,32,null,null,33,34]",
        "output": "130"
      },
      {
        "input": "root = [1,2,3,null,4,5,6,null,null,7,8,9,10,11,12,null,null,null,null,null,13,14,15]",
        "output": "29"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,6,7,8,9,null,null,null,null,null,null,10,11,12,13]",
        "output": "25"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7]",
        "output": "7"
      },
      {
        "input": "root = [20,15,25,10,18,23,30,5,12,16,19,22,24,29,32,3,7,11,13,14,17,21,26,28,31,33]",
        "output": "204"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,16,null,null,null,null,17,null,null,null,null,18,null,null,null,null,19,null,null,null,null,20,null,null,null,null,21,null,null,null,null,22,null,null,null,null,23,null,null,null,null,24,null,null,null,null,25,null,null,null,null,26]",
        "output": "33"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,null,null,null,null,null,null,null,null,null,null,21,22,23,24,25,26,27,28,29,30,null,null,null,null,31,32,33,34,35]",
        "output": "165"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "15"
      },
      {
        "input": "root = [1,2,3,4,null,6,null,7,null,null,null,8,null,9,null,null,null,null,10,null]",
        "output": "9"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21]",
        "output": "60"
      },
      {
        "input": "root = [9,4,5,null,null,6,7,null,null,null,null,null,8]",
        "output": "13"
      },
      {
        "input": "root = [9,3,15,2,7,12,20,1,null,5,8,11,null,null,13,null,null,6,4,9,null,10]",
        "output": "29"
      },
      {
        "input": "root = [20,15,25,10,18,22,30,8,null,14,19,null,21,24,32]",
        "output": "118"
      },
      {
        "input": "root = [10,9,8,7,6,5,4,3,2,1,null,null,null,null,null,null,null,null,null,null,null,0]",
        "output": "6"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20]",
        "output": "20"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "17"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,8,16,20]",
        "output": "51"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,null,6,null,null,null,null,14]",
        "output": "21"
      },
      {
        "input": "root = [1,2,3,null,5,null,6,null,7,8,9,null,null,null,null,null,null,10,11]",
        "output": "24"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "10"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,null,null,36]",
        "output": "341"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12]",
        "output": "12"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,8,null,null,14,null,17,19]",
        "output": "50"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12]",
        "output": "12"
      },
      {
        "input": "root = [7,14,21,28,35,null,42,49,56,63,null,70,77,null,null,null,null,null,null,null,null,84,91,98]",
        "output": "98"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,null,6,7,null,null,8,9,null,null,10,11]",
        "output": "21"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]",
        "output": "306"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,null,16,null,null,null,null,17,null,null,null,null,18,null,null,null,null,19,null,null,null,null,20,null,null,null,null,21]",
        "output": "17"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11]",
        "output": "11"
      },
      {
        "input": "root = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]",
        "output": "31"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,16,17,18,19,20,21,22,23,24,25]",
        "output": "205"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,null,16,17,18,19,20,21,22,23,24,25]",
        "output": "115"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,null,null,null,null,8,null,null,null,null,null,9,null,null,null,null,10,null,null,null,null,11,null,null,null,null,12]",
        "output": "15"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]",
        "output": "305"
      },
      {
        "input": "root = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,null,null,null,null,null,null,null,null,null,null,null,null,null,105,110,115,120,125,130,135,140,145,150]",
        "output": "295"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,16,null,null,null,null,17,null,null,null,null,18,null,null,null,null,19,null,null,null,null,20]",
        "output": "33"
      },
      {
        "input": "root = [1,2,3,null,null,4,null,null,5,null,null,null,null,null,null,6,null,null,null,null,null,null,null,null,7]",
        "output": "5"
      },
      {
        "input": "root = [1,3,null,null,2]",
        "output": "2"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,null,7,8,null,9,10,null,11,12,null,13,14,null,15,16,null,17,18,null,19,20,null,21,22,null,23,24,null,25,26,null,27,28,null,29,30]",
        "output": "212"
      },
      {
        "input": "root = [3,6,9,12,15,null,18,null,null,null,null,21,24,null,null,null,null,null,null,null,27,null,null,null,null,30]",
        "output": "45"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1]",
        "output": "15"
      }
    ]
  },
  {
    "id": 2368,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
      "Array",
      "Hash Table"
    ],
    "problemDescription": "There is an undirected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given an integer array restricted which represents restricted nodes.\nReturn the maximum number of nodes you can reach from node 0 without visiting a restricted node.\nNote that node 0 will not be a restricted node.\n\u00a0\nExample 1:\n\n\nInput: n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5]\nOutput: 4\nExplanation: The diagram above shows the tree.\nWe have that [0,1,2,3] are the only nodes that can be reached from node 0 without visiting a restricted node.\n\nExample 2:\n\n\nInput: n = 7, edges = [[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]], restricted = [4,2,1]\nOutput: 3\nExplanation: The diagram above shows the tree.\nWe have that [0,5,6] are the only nodes that can be reached from node 0 without visiting a restricted node.\n\n\u00a0\nConstraints:\n\n2 <= n <= 105\nedges.length == n - 1\nedges[i].length == 2\n0 <= ai, bi < n\nai != bi\nedges represents a valid tree.\n1 <= restricted.length < n\n1 <= restricted[i] < n\nAll the values of restricted are unique.\n\n",
    "starterCode": "class Solution:\n    def reachableNodes(self, n: int, edges: List[List[int]], restricted: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[4,5]], restricted = [1,4]",
        "output": "3"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7]], restricted = [5,7]",
        "output": "6"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[3,7]], restricted = [2,4]",
        "output": "5"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9]], restricted = [7,8]",
        "output": "8"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[6,7]], restricted = [3,5]",
        "output": "6"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5]",
        "output": "4"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], restricted = [1,2]",
        "output": "1"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], restricted = [1,5]",
        "output": "2"
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]], restricted = [4,2,1]",
        "output": "3"
      },
      {
        "input": "n = 5, edges = [[0,1],[0,2],[1,3],[1,4]], restricted = [2,3]",
        "output": "3"
      },
      {
        "input": "n = 5, edges = [[0,1],[0,2],[2,3],[2,4]], restricted = [3]",
        "output": "4"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29]], restricted = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
        "output": "4"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], restricted = [1,5,9]",
        "output": "5"
      },
      {
        "input": "n = 18, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,12],[8,15]], restricted = [1,6,13,16]",
        "output": "10"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29]], restricted = [12,14,16,18,20,22,24,26,28]",
        "output": "19"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], restricted = [2,5,8,10]",
        "output": "6"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], restricted = [3,7,12,16]",
        "output": "11"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[6,11]], restricted = [9,10,11]",
        "output": "9"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], restricted = [3,5,7,9,11]",
        "output": "8"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9]], restricted = [1,5]",
        "output": "3"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], restricted = [2,4]",
        "output": "5"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24]], restricted = [3,5,8,12,15]",
        "output": "9"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9]], restricted = [1,4,6]",
        "output": "4"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], restricted = [8,9,10,11]",
        "output": "11"
      },
      {
        "input": "n = 21, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[10,20]], restricted = [2,6,10,15,18,20]",
        "output": "10"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], restricted = [2,3,5,7,9]",
        "output": "3"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], restricted = [1,3,5,7,9,11,13,15,17]",
        "output": "4"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], restricted = [5,11,17,23]",
        "output": "19"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], restricted = [1,2,3,5,6,7,10]",
        "output": "1"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14]], restricted = [3,5,8]",
        "output": "8"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9]], restricted = [0,1,2]",
        "output": "1"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19]], restricted = [2,4,7,12]",
        "output": "6"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9]], restricted = [1,3,5]",
        "output": "3"
      },
      {
        "input": "n = 9, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8]], restricted = [1,3,5,7]",
        "output": "3"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], restricted = [1,4,7]",
        "output": "4"
      },
      {
        "input": "n = 16, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15]], restricted = [1,4,6,7,11]",
        "output": "4"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], restricted = [0,4,8,12,16]",
        "output": "11"
      },
      {
        "input": "n = 18, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17]], restricted = [1,5,8,12,15]",
        "output": "5"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11]], restricted = [1,2,3,4]",
        "output": "1"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24],[10,25],[10,26],[10,27],[11,28],[11,29]], restricted = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]",
        "output": "1"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14]], restricted = [2,4,6,8]",
        "output": "5"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[12,24]], restricted = [0,2,4,6,8,10,12]",
        "output": "6"
      },
      {
        "input": "n = 18, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17]], restricted = [1,3,5,8,11,15]",
        "output": "5"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], restricted = [2,4,6,8,10,12,14,16,18,20,22,24]",
        "output": "5"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,12]], restricted = [0,2,5,8,15,18]",
        "output": "8"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], restricted = [1,5,9,13,17,21]",
        "output": "4"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], restricted = [2,6,10]",
        "output": "7"
      },
      {
        "input": "n = 35, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34]], restricted = [0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34]",
        "output": "6"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], restricted = [3,5,7]",
        "output": "6"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29]], restricted = [2,6,10,14,18,22,26]",
        "output": "12"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[5,11]], restricted = [0,4,7,10]",
        "output": "8"
      },
      {
        "input": "n = 17, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16]], restricted = [0,3,6,10,13,16]",
        "output": "8"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11],[6,12],[7,13],[8,14]], restricted = [2,4,6,8]",
        "output": "6"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], restricted = [3,5,7,10]",
        "output": "8"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], restricted = [2,4,7]",
        "output": "4"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], restricted = [1,5,10]",
        "output": "5"
      },
      {
        "input": "n = 14, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13]], restricted = [0,5,8,13]",
        "output": "9"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], restricted = [1,2,3,4,5,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14]], restricted = [1,4,6,9]",
        "output": "5"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], restricted = [1,3,5,8,11,15,21]",
        "output": "5"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17],[10,18],[11,19]], restricted = [1,3,5,7,9]",
        "output": "5"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29]], restricted = [2,4,7,12,15,20]",
        "output": "6"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], restricted = [1,4,6,9,11]",
        "output": "3"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], restricted = [1,3,5,8,11]",
        "output": "5"
      },
      {
        "input": "n = 14, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[5,11],[6,12],[6,13]], restricted = [0,1,2,3,4,5,6,7,8,9,10,11,12,13]",
        "output": "1"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24]], restricted = [2,4,6,8,10,12,14,16,18,20,22,24]",
        "output": "6"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11]], restricted = [2,7,9]",
        "output": "5"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], restricted = [3,6,9,12,15]",
        "output": "7"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9]], restricted = [3,6,8]",
        "output": "6"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], restricted = [3,10,15,19]",
        "output": "13"
      },
      {
        "input": "n = 18, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17]], restricted = [0,2,4,6,8,10,12,14,16]",
        "output": "5"
      }
    ]
  },
  {
    "id": 3148,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "problemDescription": "You are given an m x n matrix grid consisting of positive integers. You can move from a cell in the matrix to any other cell that is either to the bottom or to the right (not necessarily adjacent). The score of a move from a cell with the value c1 to a cell with the value c2 is c2 - c1.\nYou can start at any cell, and you have to make at least one move.\nReturn the maximum total score you can achieve.\n\u00a0\nExample 1:\n\n\nInput: grid = [[9,5,7,3],[8,9,6,1],[6,7,14,3],[2,5,3,1]]\nOutput: 9\nExplanation: We start at the cell (0, 1), and we perform the following moves:\n- Move from the cell (0, 1) to (2, 1) with a score of 7 - 5 = 2.\n- Move from the cell (2, 1) to (2, 2) with a score of 14 - 7 = 7.\nThe total score is 2 + 7 = 9.\n\nExample 2:\n\n\nInput: grid = [[4,3,2],[3,2,1]]\nOutput: -1\nExplanation: We start at the cell (0, 0), and we perform one move: (0, 0) to (0, 1). The score is 3 - 4 = -1.\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[i].length\n2 <= m, n <= 1000\n4 <= m * n <= 105\n1 <= grid[i][j] <= 105\n\n",
    "starterCode": "class Solution:\n    def maxScore(self, grid: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "grid = [[1,2,3,4],[2,3,4,5],[3,4,5,6],[4,5,6,7]]",
        "output": "6"
      },
      {
        "input": "grid = [[4,3,2],[3,2,1]]",
        "output": "-1"
      },
      {
        "input": "grid = [[100,90,80],[70,60,50],[40,30,20]]",
        "output": "-10"
      },
      {
        "input": "grid = [[9,5,7,3],[8,9,6,1],[6,7,14,3],[2,5,3,1]]",
        "output": "9"
      },
      {
        "input": "grid = [[5,1,3],[4,1,5],[7,9,3]]",
        "output": "8"
      },
      {
        "input": "grid = [[1,2,3,4,5],[10,9,8,7,6],[11,12,13,14,15]]",
        "output": "14"
      },
      {
        "input": "grid = [[10,15,20],[5,9,12],[3,6,8]]",
        "output": "10"
      },
      {
        "input": "grid = [[10,20,30],[40,50,60],[70,80,90]]",
        "output": "80"
      },
      {
        "input": "grid = [[5,3,6,2],[9,1,8,4],[7,10,11,5]]",
        "output": "10"
      },
      {
        "input": "grid = [[1,10,3,8],[12,2,9,6],[5,7,1,11],[3,4,13,4]]",
        "output": "12"
      },
      {
        "input": "grid = [[5,3,11,12],[9,10,13,14],[1,2,4,8]]",
        "output": "11"
      },
      {
        "input": "grid = [[1,2],[3,4],[5,6],[7,8]]",
        "output": "7"
      },
      {
        "input": "grid = [[5,3,10,7],[6,4,8,2],[7,5,9,3]]",
        "output": "7"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[2,4,6,8,10,12,14,16,18,20],[20,19,18,17,16,15,14,13,12,11]]",
        "output": "19"
      },
      {
        "input": "grid = [[100,99,98,97,96],[95,94,93,92,91],[90,89,88,87,86],[85,84,83,82,81],[80,79,78,77,76]]",
        "output": "-1"
      },
      {
        "input": "grid = [[99999, 99998, 99997, 99996], [99995, 99994, 99993, 99992], [99991, 99990, 99989, 99988], [99987, 99986, 99985, 99984], [99983, 99982, 99981, 99980]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1, 100000], [100000, 1], [1, 100000], [100000, 1], [1, 100000], [100000, 1]]",
        "output": "99999"
      },
      {
        "input": "grid = [[1, 1, 1, 1, 1000], [1, 1, 1, 1000, 1], [1, 1, 1000, 1, 1], [1, 1000, 1, 1, 1], [1000, 1, 1, 1, 1]]",
        "output": "999"
      },
      {
        "input": "grid = [[50,40,30,20,10,5],[45,35,25,15,5,0],[40,30,20,10,5,0],[35,25,15,5,0,1000],[30,20,10,5,0,500],[25,15,5,0,1000,250]]",
        "output": "1000"
      },
      {
        "input": "grid = [[8, 2, 10, 14, 11], [13, 5, 12, 3, 18], [9, 7, 15, 17, 6], [4, 16, 1, 19, 20]]",
        "output": "19"
      },
      {
        "input": "grid = [[100, 99, 98, 97], [96, 95, 94, 93], [92, 91, 90, 89], [88, 87, 86, 85], [84, 83, 82, 81]]",
        "output": "-1"
      },
      {
        "input": "grid = [[100,90,80,70,60],[50,40,30,20,10],[10,20,30,40,50],[95,85,75,65,55],[5,15,25,35,45]]",
        "output": "85"
      },
      {
        "input": "grid = [[99,98,97,96,95,94,93,92,91,90],[90,91,92,93,94,95,96,97,98,99],[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1]]",
        "output": "9"
      },
      {
        "input": "grid = [[1,3,5,7,9,11,13,15,17],[17,15,13,11,9,7,5,3,1],[2,4,6,8,10,12,14,16,18],[18,16,14,12,10,8,6,4,2]]",
        "output": "17"
      },
      {
        "input": "grid = [[1, 3, 5, 7, 9, 11, 13], [2, 4, 6, 8, 10, 12, 14], [15, 17, 19, 21, 23, 25, 27], [16, 18, 20, 22, 24, 26, 28]]",
        "output": "27"
      },
      {
        "input": "grid = [[1,100000,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,100000]]",
        "output": "99999"
      },
      {
        "input": "grid = [[100, 90, 80, 70, 60, 50], [95, 85, 75, 65, 55, 45], [92, 82, 72, 62, 52, 42], [89, 79, 69, 59, 49, 39], [86, 76, 66, 56, 46, 36], [83, 73, 63, 53, 43, 33]]",
        "output": "-3"
      },
      {
        "input": "grid = [[10, 20, 30, 40], [40, 30, 20, 10], [10, 20, 30, 40], [40, 30, 20, 10]]",
        "output": "30"
      },
      {
        "input": "grid = [[9,7,5,3,1],[8,6,4,2,0],[7,5,3,1,9],[6,4,2,0,8],[5,3,1,9,7]]",
        "output": "9"
      },
      {
        "input": "grid = [[5,1,2,3],[4,6,1,5],[7,1,8,9],[3,2,6,4]]",
        "output": "8"
      },
      {
        "input": "grid = [[5,15,25,35,45],[45,35,25,15,5],[10,20,30,40,50],[50,40,30,20,10],[15,25,35,45,55]]",
        "output": "50"
      },
      {
        "input": "grid = [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1000], [1, 1, 1, 1000, 1], [1, 1, 1000, 1, 1], [1, 1000, 1, 1, 1], [1000, 1, 1, 1, 1]]",
        "output": "999"
      },
      {
        "input": "grid = [[9, 8, 7, 6, 5], [4, 3, 2, 1, 0], [1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]",
        "output": "15"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,11,13,15,17,19],[20,18,16,14,12,10,8,6,4,2]]",
        "output": "19"
      },
      {
        "input": "grid = [[9,8,7,6,5],[4,3,2,1,0],[0,1,2,3,4],[5,6,7,8,9],[9,8,7,6,5]]",
        "output": "9"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40]]",
        "output": "39"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50]]",
        "output": "49"
      },
      {
        "input": "grid = [[5,2,3,8,1],[9,6,7,4,10],[15,12,13,14,11],[1,8,5,2,6],[7,4,3,9,12]]",
        "output": "12"
      },
      {
        "input": "grid = [[50,40,30,20,10],[5,15,25,35,45],[60,70,80,90,100],[10,20,30,40,50],[15,25,35,45,55]]",
        "output": "95"
      },
      {
        "input": "grid = [[9,8,7,6,5,4,3,2,1,0],[8,7,6,5,4,3,2,1,0,9],[7,6,5,4,3,2,1,0,9,8],[6,5,4,3,2,1,0,9,8,7]]",
        "output": "9"
      },
      {
        "input": "grid = [[30, 25, 20, 15, 10, 5], [29, 24, 19, 14, 9, 4], [28, 23, 18, 13, 8, 3], [27, 22, 17, 12, 7, 2], [26, 21, 16, 11, 6, 1]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,3,5,7,9,11],[2,4,6,8,10,12],[3,6,9,12,15,18],[4,8,12,16,20,24],[5,10,15,20,25,30],[6,12,18,24,30,36]]",
        "output": "35"
      },
      {
        "input": "grid = [[25,15,5,30,20],[10,40,60,50,55],[5,1,2,3,4],[22,28,24,18,26],[19,30,21,27,33]]",
        "output": "55"
      },
      {
        "input": "grid = [[9, 7, 5, 3, 1], [8, 6, 4, 2, 0], [7, 5, 3, 1, -1], [6, 4, 2, 0, -2], [5, 3, 1, -1, -3]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]]",
        "output": "19"
      },
      {
        "input": "grid = [[1, 1, 1, 1000], [1, 1, 1000, 1], [1, 1000, 1, 1], [1000, 1, 1, 1], [1, 1, 1, 1]]",
        "output": "999"
      },
      {
        "input": "grid = [[5, 4, 3, 2, 1, 0], [6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23], [24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35]]",
        "output": "35"
      },
      {
        "input": "grid = [[100, 200, 150, 250, 300], [120, 170, 220, 180, 230], [130, 160, 210, 240, 190], [140, 150, 200, 260, 210], [160, 140, 190, 270, 220]]",
        "output": "200"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,2,2,2,1],[1,2,3,2,1],[1,2,2,2,1],[1,1,1,1,1]]",
        "output": "2"
      },
      {
        "input": "grid = [[10, 10, 10, 10], [10, 20, 30, 40], [10, 30, 50, 70], [10, 40, 70, 100], [10, 50, 100, 150]]",
        "output": "140"
      },
      {
        "input": "grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 100], [1, 1, 1, 1, 1, 1, 1, 1, 100, 1], [1, 1, 1, 1, 1, 1, 1, 100, 1, 1], [1, 1, 1, 1, 1, 1, 100, 1, 1, 1], [1, 1, 1, 1, 1, 100, 1, 1, 1, 1], [1, 1, 1, 1, 100, 1, 1, 1, 1, 1], [1, 1, 1, 100, 1, 1, 1, 1, 1, 1], [1, 1, 100, 1, 1, 1, 1, 1, 1, 1], [1, 100, 1, 1, 1, 1, 1, 1, 1, 1], [100, 1, 1, 1, 1, 1, 1, 1, 1, 1]]",
        "output": "99"
      },
      {
        "input": "grid = [[3, 2, 1, 5, 4], [6, 5, 4, 3, 2], [7, 8, 9, 10, 11], [12, 13, 14, 15, 16], [17, 18, 19, 20, 21]]",
        "output": "20"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10,1],[3,4,5,6,7,8,9,10,1,2],[4,5,6,7,8,9,10,1,2,3]]",
        "output": "9"
      },
      {
        "input": "grid = [[2,2,2,2,2,2,2,2,2,2],[1,1,1,1,1,1,1,1,1,1],[10,10,10,10,10,10,10,10,10,10]]",
        "output": "9"
      },
      {
        "input": "grid = [[9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9],[9,1,9,1,9,1,9,1,9]]",
        "output": "8"
      },
      {
        "input": "grid = [[5, 8, 6, 2, 9], [4, 1, 7, 10, 3], [12, 11, 14, 13, 15], [6, 7, 5, 8, 1], [9, 3, 2, 4, 10]]",
        "output": "14"
      },
      {
        "input": "grid = [[100,200,150,300,100],[50,250,350,500,400],[450,550,600,650,700],[350,250,300,350,400],[400,450,500,550,600]]",
        "output": "650"
      },
      {
        "input": "grid = [[1, 2, 3], [2, 1, 3], [3, 2, 1], [1, 3, 2], [2, 1, 3], [3, 2, 1]]",
        "output": "2"
      },
      {
        "input": "grid = [[9,8,7,6,5,4,3,2,1],[10,9,8,7,6,5,4,3,2],[11,10,9,8,7,6,5,4,3],[12,11,10,9,8,7,6,5,4],[13,12,11,10,9,8,7,6,5],[14,13,12,11,10,9,8,7,6]]",
        "output": "5"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[2,4,6,8,10,12,14,16,18,20],[20,18,16,14,12,10,8,6,4,2],[3,6,9,12,15,18,21,24,27,30]]",
        "output": "29"
      },
      {
        "input": "grid = [[1000, 100, 10, 1], [999, 99, 9, 2], [998, 98, 8, 3], [997, 97, 7, 4], [996, 96, 6, 5], [995, 95, 5, 6], [994, 94, 4, 7], [993, 93, 3, 8], [992, 92, 2, 9], [991, 91, 1, 10]]",
        "output": "9"
      },
      {
        "input": "grid = [[1,2,3,4,5],[5,4,3,2,1],[1,3,5,7,9],[9,7,5,3,1],[1,2,3,4,5]]",
        "output": "8"
      },
      {
        "input": "grid = [[90,85,70,65,55,50,45],[80,75,60,50,40,35,30],[70,65,60,50,45,40,35],[60,55,50,45,40,35,30],[50,45,40,35,30,25,20]]",
        "output": "5"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]]",
        "output": "3"
      },
      {
        "input": "grid = [[1,2,3,4,5],[5,4,3,2,1],[2,3,4,5,6],[6,5,4,3,2],[3,4,5,6,7]]",
        "output": "6"
      },
      {
        "input": "grid = [[100,200,300,400],[200,100,400,300],[300,400,100,200],[400,300,200,100]]",
        "output": "300"
      },
      {
        "input": "grid = [[5,15,25,35,45],[10,20,30,40,50],[5,10,15,20,25],[45,40,35,30,25],[50,45,40,35,30]]",
        "output": "45"
      },
      {
        "input": "grid = [[5,3,10,6,7],[1,4,8,9,2],[7,6,5,4,3],[10,9,8,7,6],[1,2,3,4,5]]",
        "output": "9"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,11,13,15,17,19]]",
        "output": "18"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10,1],[3,4,5,6,7,8,9,10,1,2],[4,5,6,7,8,9,10,1,2,3],[5,6,7,8,9,10,1,2,3,4]]",
        "output": "9"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,11,13,15,17,19],[20,19,18,17,16,15,14,13,12,11]]",
        "output": "19"
      },
      {
        "input": "grid = [[50,40,30,20,10],[90,80,70,60,50],[130,120,110,100,90],[170,160,150,140,130],[210,200,190,180,170]]",
        "output": "160"
      },
      {
        "input": "grid = [[9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9],[2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2]]",
        "output": "9"
      },
      {
        "input": "grid = [[10,20,30,40,50],[15,25,35,45,55],[20,30,40,50,60],[25,35,45,55,65],[30,40,50,60,70]]",
        "output": "60"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[1,9,1,9,1,9,1,9,1,9],[1,1,1,1,1,1,1,1,1,1],[9,1,9,1,9,1,9,1,9,1]]",
        "output": "8"
      },
      {
        "input": "grid = [[1,1000,2,1000,3,1000,4,1000,5,1000],[1000,1,1000,2,1000,3,1000,4,1000,5],[5,1000,4,1000,3,1000,2,1000,1,1000]]",
        "output": "999"
      },
      {
        "input": "grid = [[4, 1, 9, 13, 17, 20], [5, 2, 11, 14, 18, 21], [6, 3, 12, 15, 19, 22], [7, 4, 10, 16, 23, 24]]",
        "output": "23"
      },
      {
        "input": "grid = [[1000, 999, 998, 997, 996, 995, 994, 993, 992, 991], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]]",
        "output": "999"
      },
      {
        "input": "grid = [[5,10,15,20,25,30],[1,2,3,4,5,6],[6,5,4,3,2,1],[7,14,21,28,35,42],[8,16,24,32,40,48],[9,18,27,36,45,54]]",
        "output": "53"
      },
      {
        "input": "grid = [[23,18,15,25,16],[20,5,9,11,21],[30,3,14,22,24],[28,27,26,29,31],[19,17,13,8,7]]",
        "output": "28"
      },
      {
        "input": "grid = [[1,100,2,99,3,98,4,97,5,96],[95,94,93,92,91,90,89,88,87,86],[101,102,103,104,105,106,107,108,109,110],[85,84,83,82,81,80,79,78,77,76],[111,112,113,114,115,116,117,118,119,120]]",
        "output": "119"
      },
      {
        "input": "grid = [[100,90,80,70,60,50,40],[95,85,75,65,55,45,35],[90,80,70,60,50,40,30],[85,75,65,55,45,35,25],[80,70,60,50,40,30,20],[75,65,55,45,35,25,15]]",
        "output": "-5"
      },
      {
        "input": "grid = [[25, 17, 11, 22, 5, 3], [2, 18, 14, 23, 7, 16], [8, 20, 9, 21, 12, 10]]",
        "output": "21"
      }
    ]
  },
  {
    "id": 2305,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bitmask"
    ],
    "problemDescription": "You are given an integer array cookies, where cookies[i] denotes the number of cookies in the ith bag. You are also given an integer k that denotes the number of children to distribute all the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up.\nThe unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution.\nReturn the minimum unfairness of all distributions.\n\u00a0\nExample 1:\n\nInput: cookies = [8,15,10,20,8], k = 2\nOutput: 31\nExplanation: One optimal distribution is [8,15,8] and [10,20]\n- The 1st child receives [8,15,8] which has a total of 8 + 15 + 8 = 31 cookies.\n- The 2nd child receives [10,20] which has a total of 10 + 20 = 30 cookies.\nThe unfairness of the distribution is max(31,30) = 31.\nIt can be shown that there is no distribution with an unfairness less than 31.\n\nExample 2:\n\nInput: cookies = [6,1,3,2,2,4,1,2], k = 3\nOutput: 7\nExplanation: One optimal distribution is [6,1], [3,2,2], and [4,1,2]\n- The 1st child receives [6,1] which has a total of 6 + 1 = 7 cookies.\n- The 2nd child receives [3,2,2] which has a total of 3 + 2 + 2 = 7 cookies.\n- The 3rd child receives [4,1,2] which has a total of 4 + 1 + 2 = 7 cookies.\nThe unfairness of the distribution is max(7,7,7) = 7.\nIt can be shown that there is no distribution with an unfairness less than 7.\n\n\u00a0\nConstraints:\n\n2 <= cookies.length <= 8\n1 <= cookies[i] <= 105\n2 <= k <= cookies.length\n\n",
    "starterCode": "class Solution:\n    def distributeCookies(self, cookies: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "cookies = [1,1,1,1,1,1,1,100000], k = 7",
        "output": "100000"
      },
      {
        "input": "cookies = [8,15,10,20,8], k = 2",
        "output": "31"
      },
      {
        "input": "cookies = [100000,100000,100000,100000,100000,100000,100000,100000], k = 8",
        "output": "100000"
      },
      {
        "input": "cookies = [1,100000,1,1,1,1,1,1], k = 3",
        "output": "100000"
      },
      {
        "input": "cookies = [10,20,30,40,50,60,70,80], k = 2",
        "output": "180"
      },
      {
        "input": "cookies = [10,20,30,40,50,60,70,80], k = 8",
        "output": "80"
      },
      {
        "input": "cookies = [1,3,2,4,5,6,7,8], k = 2",
        "output": "18"
      },
      {
        "input": "cookies = [100000,1,1,1,1,1,1,1], k = 2",
        "output": "100000"
      },
      {
        "input": "cookies = [5,5,5,5,5,5,5,5], k = 8",
        "output": "5"
      },
      {
        "input": "cookies = [2,2,2,2,2,2,2,2], k = 2",
        "output": "8"
      },
      {
        "input": "cookies = [6,1,3,2,2,4,1,2], k = 3",
        "output": "7"
      },
      {
        "input": "cookies = [8,7,6,5,4,3,2,1], k = 4",
        "output": "9"
      },
      {
        "input": "cookies = [1,2,3,4,5,6,7,8], k = 4",
        "output": "9"
      },
      {
        "input": "cookies = [100000,1,1,1,1,1,1,1], k = 7",
        "output": "100000"
      },
      {
        "input": "cookies = [5,5,5,5,5,5,5,5], k = 2",
        "output": "20"
      },
      {
        "input": "cookies = [8,6,7,5,3,0,9,1], k = 5",
        "output": "9"
      },
      {
        "input": "cookies = [8,7,6,5,4,3,2,1], k = 2",
        "output": "18"
      },
      {
        "input": "cookies = [15,20,25,30,35,40,45,50], k = 7",
        "output": "50"
      },
      {
        "input": "cookies = [1, 2, 3, 4, 5, 6, 7, 8], k = 7",
        "output": "8"
      },
      {
        "input": "cookies = [9, 8, 7, 6, 5, 4, 3, 2], k = 5",
        "output": "9"
      },
      {
        "input": "cookies = [100,200,300,400,500,600,700,800], k = 5",
        "output": "800"
      },
      {
        "input": "cookies = [1, 1, 2, 2, 3, 3, 4, 4], k = 5",
        "output": "4"
      },
      {
        "input": "cookies = [7, 14, 21, 28, 35, 42, 49, 56], k = 2",
        "output": "126"
      },
      {
        "input": "cookies = [80,70,60,50,40,30,20,10], k = 4",
        "output": "90"
      },
      {
        "input": "cookies = [1,1,2,2,3,3,4,4], k = 2",
        "output": "10"
      },
      {
        "input": "cookies = [10, 20, 30, 40, 50, 60, 70, 80], k = 4",
        "output": "90"
      },
      {
        "input": "cookies = [12, 11, 10, 9, 8, 7, 6, 5], k = 3",
        "output": "23"
      },
      {
        "input": "cookies = [100, 200, 300, 150, 50, 25, 25, 50], k = 4",
        "output": "300"
      },
      {
        "input": "cookies = [30, 20, 10, 40, 60, 50, 70, 80], k = 5",
        "output": "80"
      },
      {
        "input": "cookies = [30, 20, 10, 20, 30, 20, 10, 20], k = 5",
        "output": "40"
      },
      {
        "input": "cookies = [10, 20, 30, 40, 50, 60, 70, 80], k = 5",
        "output": "80"
      },
      {
        "input": "cookies = [100000, 1, 2, 3, 4, 5, 6, 7], k = 2",
        "output": "100000"
      },
      {
        "input": "cookies = [1,10,100,1000,10000,100000,5,50], k = 5",
        "output": "100000"
      },
      {
        "input": "cookies = [1,10,100,1000,10000,100000,1000000,10000000], k = 4",
        "output": "10000000"
      },
      {
        "input": "cookies = [9, 6, 12, 4, 7, 11, 5, 3], k = 4",
        "output": "15"
      },
      {
        "input": "cookies = [1,1,1,1,1,1,1,1], k = 4",
        "output": "2"
      },
      {
        "input": "cookies = [9,9,9,9,9,9,9,9], k = 4",
        "output": "18"
      },
      {
        "input": "cookies = [1, 2, 4, 8, 16, 32, 64, 128], k = 5",
        "output": "128"
      },
      {
        "input": "cookies = [10, 10, 10, 10, 10, 10, 10, 10], k = 7",
        "output": "20"
      },
      {
        "input": "cookies = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 4",
        "output": "4"
      },
      {
        "input": "cookies = [18, 23, 45, 12, 34, 56, 78, 90], k = 3",
        "output": "123"
      },
      {
        "input": "cookies = [100, 200, 300, 400, 500, 600, 700, 800], k = 6",
        "output": "800"
      },
      {
        "input": "cookies = [100,200,300,400,500,600,700,800], k = 4",
        "output": "900"
      },
      {
        "input": "cookies = [8,1,5,7,3,6,4,2], k = 3",
        "output": "12"
      },
      {
        "input": "cookies = [9, 8, 7, 6, 5, 4, 3, 2], k = 6",
        "output": "9"
      },
      {
        "input": "cookies = [16, 14, 12, 10, 8, 6, 4, 2], k = 4",
        "output": "18"
      },
      {
        "input": "cookies = [5,10,15,20,25,30,35,40], k = 5",
        "output": "40"
      },
      {
        "input": "cookies = [5, 5, 5, 5, 5, 5, 5, 5], k = 3",
        "output": "15"
      },
      {
        "input": "cookies = [1,2,3,4,5,6,7,8], k = 7",
        "output": "8"
      },
      {
        "input": "cookies = [9,18,27,36,45,54,63,72], k = 4",
        "output": "81"
      },
      {
        "input": "cookies = [1, 1, 1, 1, 1, 1, 1, 1], k = 8",
        "output": "1"
      },
      {
        "input": "cookies = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5",
        "output": "11"
      },
      {
        "input": "cookies = [15,14,13,12,11,10,9,8], k = 4",
        "output": "23"
      },
      {
        "input": "cookies = [15,25,35,45,55,65,75,85], k = 5",
        "output": "85"
      },
      {
        "input": "cookies = [12,11,10,9,8,7,6,5], k = 2",
        "output": "34"
      },
      {
        "input": "cookies = [1, 1, 1, 1, 1, 1, 1, 1], k = 3",
        "output": "3"
      },
      {
        "input": "cookies = [30,20,10,10,20,30,40,50], k = 5",
        "output": "50"
      },
      {
        "input": "cookies = [10, 20, 30, 40, 50, 60, 70, 80], k = 3",
        "output": "120"
      },
      {
        "input": "cookies = [15, 15, 15, 15, 15, 15, 15, 15], k = 7",
        "output": "30"
      },
      {
        "input": "cookies = [1000,2000,3000,4000,5000,6000,7000,8000], k = 8",
        "output": "8000"
      },
      {
        "input": "cookies = [1,1,1,1,1,1,1,1], k = 8",
        "output": "1"
      },
      {
        "input": "cookies = [8,16,32,64,128,256,512,1024], k = 2",
        "output": "1024"
      },
      {
        "input": "cookies = [30,20,10,60,50,40,70,80], k = 5",
        "output": "80"
      },
      {
        "input": "cookies = [10, 20, 30, 40, 50, 60, 70, 80, 90], k = 3",
        "output": "150"
      },
      {
        "input": "cookies = [5,10,15,20,25,30,35,40], k = 6",
        "output": "40"
      },
      {
        "input": "cookies = [9, 3, 10, 12, 8, 15, 5, 7], k = 3",
        "output": "24"
      },
      {
        "input": "cookies = [3,1,2,4,5,6,7,8], k = 4",
        "output": "9"
      },
      {
        "input": "cookies = [1, 2, 3, 4, 5, 6, 7, 8], k = 4",
        "output": "9"
      },
      {
        "input": "cookies = [12, 17, 22, 14, 29, 18, 15, 20], k = 4",
        "output": "41"
      },
      {
        "input": "cookies = [1,2,4,8,16,32,64,128], k = 3",
        "output": "128"
      },
      {
        "input": "cookies = [100,100,100,100,100,100,100,100], k = 5",
        "output": "200"
      },
      {
        "input": "cookies = [12,23,34,45,56,67,78,89], k = 3",
        "output": "135"
      },
      {
        "input": "cookies = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000], k = 4",
        "output": "200000"
      },
      {
        "input": "cookies = [10,20,30,40,50,60,70,80], k = 6",
        "output": "80"
      },
      {
        "input": "cookies = [7,8,9,10,11,12,13,14], k = 6",
        "output": "17"
      },
      {
        "input": "cookies = [100,200,300,400,500,600,700,800], k = 3",
        "output": "1200"
      },
      {
        "input": "cookies = [8, 7, 6, 5, 4, 3, 2, 1], k = 5",
        "output": "8"
      },
      {
        "input": "cookies = [8, 15, 10, 20, 8, 5, 3, 7], k = 3",
        "output": "26"
      },
      {
        "input": "cookies = [5,15,25,35,45,55,65,75], k = 3",
        "output": "110"
      },
      {
        "input": "cookies = [1, 2, 3, 4, 5, 6, 7, 8], k = 8",
        "output": "8"
      },
      {
        "input": "cookies = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 8",
        "output": "10"
      },
      {
        "input": "cookies = [100, 200, 300, 400, 500, 600, 700, 800], k = 4",
        "output": "900"
      },
      {
        "input": "cookies = [15, 15, 15, 15, 15, 15, 15, 15], k = 6",
        "output": "30"
      },
      {
        "input": "cookies = [100, 200, 300, 400, 500, 600, 700, 800], k = 5",
        "output": "800"
      },
      {
        "input": "cookies = [2, 4, 6, 8, 10, 12, 14, 16], k = 3",
        "output": "24"
      },
      {
        "input": "cookies = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000], k = 2",
        "output": "18000"
      },
      {
        "input": "cookies = [50,40,30,20,10,5,3,1], k = 4",
        "output": "50"
      },
      {
        "input": "cookies = [5, 5, 15, 15, 25, 25, 35, 35], k = 4",
        "output": "40"
      },
      {
        "input": "cookies = [15, 15, 15, 15, 15, 15, 15, 15], k = 2",
        "output": "60"
      },
      {
        "input": "cookies = [2,2,2,2,2,2,2,2], k = 7",
        "output": "4"
      },
      {
        "input": "cookies = [25, 25, 25, 25, 25, 25, 25, 25], k = 8",
        "output": "25"
      },
      {
        "input": "cookies = [8, 15, 10, 20, 8, 12, 15, 10], k = 3",
        "output": "33"
      },
      {
        "input": "cookies = [8, 1, 2, 3, 4, 5, 6, 7], k = 2",
        "output": "18"
      },
      {
        "input": "cookies = [10, 20, 10, 20, 10, 20, 10, 20], k = 4",
        "output": "30"
      },
      {
        "input": "cookies = [50,40,30,20,10,1,2,3], k = 3",
        "output": "53"
      },
      {
        "input": "cookies = [1,1,2,2,3,3,4,4], k = 4",
        "output": "5"
      },
      {
        "input": "cookies = [1,2,3,4,5,6,7,8], k = 8",
        "output": "8"
      },
      {
        "input": "cookies = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], k = 4",
        "output": "34"
      },
      {
        "input": "cookies = [1,1,1,1,1,1,1,1], k = 2",
        "output": "4"
      },
      {
        "input": "cookies = [1,2,3,4,5,6,7,8], k = 3",
        "output": "12"
      },
      {
        "input": "cookies = [10,10,20,20,30,30,40,40], k = 4",
        "output": "50"
      },
      {
        "input": "cookies = [9, 18, 27, 36, 45, 54, 63, 72], k = 4",
        "output": "81"
      },
      {
        "input": "cookies = [8,1,2,3,4,5,6,7], k = 8",
        "output": "8"
      },
      {
        "input": "cookies = [100, 200, 300, 400, 500, 600, 700, 800], k = 7",
        "output": "800"
      }
    ]
  },
  {
    "id": 2892,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "Given an integer array nums and an integer k, you can perform the following operation on the array any number of times:\n\nSelect two adjacent elements of the array like x and y, such that x * y <= k, and replace both of them with a single element with value x * y (e.g. in one operation the array [1, 2, 2, 3] with k = 5 can become [1, 4, 3] or [2, 2, 3], but can't become [1, 2, 6]).\n\nReturn the minimum possible length of nums after any number of operations.\n\u00a0\nExample 1:\n\nInput: nums = [2,3,3,7,3,5], k = 20\nOutput: 3\nExplanation: We perform these operations:\n1. [2,3,3,7,3,5] -> [6,3,7,3,5]\n2. [6,3,7,3,5] -> [18,7,3,5]\n3. [18,7,3,5] -> [18,7,15]\nIt can be shown that 3 is the minimum length possible to achieve with the given operation.\n\nExample 2:\n\nInput: nums = [3,3,3,3], k = 6\nOutput: 4\nExplanation: We can't perform any operations since the product of every two adjacent elements is greater than 6.\nHence, the answer is 4.\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 109\n1 <= k <= 109\n\n",
    "starterCode": "class Solution:\n    def minArrayLength(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 50",
        "output": "6"
      },
      {
        "input": "nums = [3,3,3,3], k = 6",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "8"
      },
      {
        "input": "nums = [10,5,2,4,2], k = 20",
        "output": "3"
      },
      {
        "input": "nums = [10,5,2,1], k = 50",
        "output": "2"
      },
      {
        "input": "nums = [0,0,0,0,0], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], k = 50",
        "output": "5"
      },
      {
        "input": "nums = [10,10,10,10], k = 100",
        "output": "2"
      },
      {
        "input": "nums = [1,0,1,0,1], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [1,0,0,1], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 20",
        "output": "2"
      },
      {
        "input": "nums = [1000000000,1000000000], k = 1000000000000000000",
        "output": "1"
      },
      {
        "input": "nums = [5,1,2,4,6], k = 10",
        "output": "3"
      },
      {
        "input": "nums = [1,0,1,0,1], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [0,0,0,0], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,3], k = 5",
        "output": "2"
      },
      {
        "input": "nums = [1,1,1,1,1], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [5,5,5,5,5], k = 25",
        "output": "3"
      },
      {
        "input": "nums = [1,0,1,1], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [2,3,3,7,3,5], k = 20",
        "output": "3"
      },
      {
        "input": "nums = [5,5,5,5], k = 25",
        "output": "2"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], k = 20",
        "output": "6"
      },
      {
        "input": "nums = [2,4,8,16,32,64], k = 1024",
        "output": "3"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 1000",
        "output": "9"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 2, 3, 4, 5], k = 20",
        "output": "4"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 25",
        "output": "10"
      },
      {
        "input": "nums = [9, 3, 9, 3, 9, 3, 9, 3, 9, 3], k = 27",
        "output": "5"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], k = 4",
        "output": "5"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 25",
        "output": "5"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], k = 150",
        "output": "9"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30], k = 18",
        "output": "9"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 24",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2], k = 6",
        "output": "8"
      },
      {
        "input": "nums = [100, 50, 25, 12, 6, 3, 2, 1], k = 500",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 30",
        "output": "16"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], k = 10000000000",
        "output": "6"
      },
      {
        "input": "nums = [1,3,1,3,1,3,1,3,1,3], k = 4",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2], k = 4",
        "output": "5"
      },
      {
        "input": "nums = [100, 50, 25, 12, 6, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 500",
        "output": "4"
      },
      {
        "input": "nums = [100, 50, 25, 12, 6, 3, 1], k = 10000",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 20",
        "output": "7"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], k = 9",
        "output": "10"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], k = 4",
        "output": "10"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [9,9,9,9,9,9,9,9,9,9], k = 81",
        "output": "5"
      },
      {
        "input": "nums = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3], k = 6",
        "output": "5"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], k = 4",
        "output": "7"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 1000000000",
        "output": "2"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], k = 3",
        "output": "10"
      },
      {
        "input": "nums = [9, 3, 2, 2, 3, 9, 3, 2, 2, 3], k = 18",
        "output": "6"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000], k = 1000000000000000000",
        "output": "5"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 100",
        "output": "5"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2], k = 4",
        "output": "5"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k = 36",
        "output": "9"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1",
        "output": "10"
      },
      {
        "input": "nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10], k = 100",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10",
        "output": "8"
      },
      {
        "input": "nums = [10, 5, 10, 5, 10, 5, 10, 5, 10, 5], k = 50",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 1",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 24",
        "output": "7"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], k = 30",
        "output": "6"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7], k = 49",
        "output": "5"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 500",
        "output": "9"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 21",
        "output": "8"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6], k = 12",
        "output": "7"
      },
      {
        "input": "nums = [1000000000, 999999999, 1000000000, 999999999, 1000000000, 999999999], k = 1000000000000",
        "output": "6"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], k = 1000",
        "output": "9"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 30",
        "output": "6"
      },
      {
        "input": "nums = [3, 3, 1, 1, 3, 3, 1, 1, 3, 3], k = 9",
        "output": "3"
      },
      {
        "input": "nums = [3, 1, 3, 1, 3, 1, 3, 1, 3, 1], k = 4",
        "output": "5"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], k = 1",
        "output": "10"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [3, 6, 2, 8, 1, 4, 7, 5], k = 24",
        "output": "5"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 2, 6, 5, 3, 5, 9, 2, 6], k = 10",
        "output": "18"
      },
      {
        "input": "nums = [1, 3, 2, 6, 5, 4, 9, 8, 7, 10], k = 30",
        "output": "7"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], k = 16",
        "output": "5"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], k = 50",
        "output": "5"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 25",
        "output": "8"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k = 10",
        "output": "9"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], k = 50",
        "output": "8"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], k = 20",
        "output": "6"
      },
      {
        "input": "nums = [2, 5, 1, 3, 4, 2, 6, 1], k = 12",
        "output": "3"
      },
      {
        "input": "nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], k = 1024",
        "output": "7"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10], k = 20",
        "output": "15"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], k = 36",
        "output": "12"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 25",
        "output": "12"
      },
      {
        "input": "nums = [2,4,8,16,32,64,128,256,512,1024], k = 1024",
        "output": "7"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 25",
        "output": "7"
      },
      {
        "input": "nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10], k = 100",
        "output": "3"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], k = 100",
        "output": "7"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 15",
        "output": "8"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], k = 1000",
        "output": "9"
      },
      {
        "input": "nums = [1, 3, 1, 3, 1, 3, 1, 3, 1, 3], k = 4",
        "output": "5"
      },
      {
        "input": "nums = [999999999, 999999998, 999999997, 999999996, 999999995], k = 999999999999999999",
        "output": "3"
      },
      {
        "input": "nums = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], k = 81",
        "output": "5"
      },
      {
        "input": "nums = [2, 4, 2, 4, 2, 4, 2, 4, 2, 4], k = 16",
        "output": "5"
      },
      {
        "input": "nums = [1, 10, 1, 10, 1, 10, 1, 10], k = 100",
        "output": "2"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40], k = 50",
        "output": "18"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], k = 18",
        "output": "7"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5], k = 20",
        "output": "4"
      },
      {
        "input": "nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000], k = 1000000000000",
        "output": "5"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 100",
        "output": "7"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 0",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 30",
        "output": "6"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 50",
        "output": "6"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 20",
        "output": "8"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 2000",
        "output": "8"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3], k = 8",
        "output": "10"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 25",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], k = 256",
        "output": "7"
      },
      {
        "input": "nums = [3, 6, 2, 8, 1, 4, 5, 3, 2, 9, 10, 7], k = 30",
        "output": "7"
      },
      {
        "input": "nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765], k = 1000",
        "output": "14"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k = 30",
        "output": "9"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 9",
        "output": "8"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2], k = 2",
        "output": "5"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29], k = 50",
        "output": "8"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], k = 9",
        "output": "6"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 100",
        "output": "4"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 100",
        "output": "4"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 25",
        "output": "7"
      }
    ]
  },
  {
    "id": 2555,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search",
      "Sliding Window"
    ],
    "problemDescription": "There are some prizes on the X-axis. You are given an integer array prizePositions that is sorted in non-decreasing order, where prizePositions[i] is the position of the ith prize. There could be different prizes at the same position on the line. You are also given an integer k.\nYou are allowed to select two segments with integer endpoints. The length of each segment must be k. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect.\n\nFor example if k = 2, you can choose segments [1, 3] and [2, 4], and you will win any prize i that satisfies 1 <= prizePositions[i] <= 3 or 2 <= prizePositions[i] <= 4.\n\nReturn the maximum number of prizes you can win if you choose the two segments optimally.\n\u00a0\nExample 1:\n\nInput: prizePositions = [1,1,2,2,3,3,5], k = 2\nOutput: 7\nExplanation: In this example, you can win all 7 prizes by selecting two segments [1, 3] and [3, 5].\n\nExample 2:\n\nInput: prizePositions = [1,2,3,4], k = 0\nOutput: 2\nExplanation: For this example, one choice for the segments is [3, 3] and [4, 4], and you will be able to get 2 prizes. \n\n\u00a0\nConstraints:\n\n1 <= prizePositions.length <= 105\n1 <= prizePositions[i] <= 109\n0 <= k <= 109 \nprizePositions is sorted in non-decreasing order.\n\n\u00a0\n\n",
    "starterCode": "class Solution:\n    def maximizeWin(self, prizePositions: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "prizePositions = [1,1,1,1,1,1,1,1,1,1], k = 5",
        "output": "10"
      },
      {
        "input": "prizePositions = [1,3,5,7,9], k = 1",
        "output": "2"
      },
      {
        "input": "prizePositions = [5,5,5,5,5], k = 1",
        "output": "5"
      },
      {
        "input": "prizePositions = [5,5,5,5,5], k = 3",
        "output": "5"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10], k = 3",
        "output": "8"
      },
      {
        "input": "prizePositions = [1,1,2,2,3,3,5], k = 2",
        "output": "7"
      },
      {
        "input": "prizePositions = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 10",
        "output": "20"
      },
      {
        "input": "prizePositions = [1,1,1,1,2,2,2,3,3,4,5,5,6,6,7,8,8,9,9,9], k = 3",
        "output": "18"
      },
      {
        "input": "prizePositions = [1,3,5,7,9,11,13,15,17,19], k = 4",
        "output": "6"
      },
      {
        "input": "prizePositions = [10,10,20,20,30,30,40,40,50,50], k = 5",
        "output": "4"
      },
      {
        "input": "prizePositions = [1,3,5,7,9], k = 2",
        "output": "4"
      },
      {
        "input": "prizePositions = [1,1,1,1,1], k = 0",
        "output": "5"
      },
      {
        "input": "prizePositions = [1,2,3,4], k = 0",
        "output": "2"
      },
      {
        "input": "prizePositions = [1,2,2,2,3,4,5,5], k = 2",
        "output": "8"
      },
      {
        "input": "prizePositions = [10,20,30,40,50,60,70,80,90,100], k = 10",
        "output": "4"
      },
      {
        "input": "prizePositions = [1,2,2,3,3,3,4,4,5], k = 2",
        "output": "9"
      },
      {
        "input": "prizePositions = [1,3,5,7,9], k = 4",
        "output": "5"
      },
      {
        "input": "prizePositions = [1,1,1,2,2,3,3,3,4,4,4,5,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15], k = 3",
        "output": "20"
      },
      {
        "input": "prizePositions = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 15",
        "output": "4"
      },
      {
        "input": "prizePositions = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20], k = 3",
        "output": "16"
      },
      {
        "input": "prizePositions = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 10",
        "output": "4"
      },
      {
        "input": "prizePositions = [1, 3, 6, 10, 15, 20, 25, 30, 35, 40, 45, 50], k = 5",
        "output": "5"
      },
      {
        "input": "prizePositions = [1,1,1,1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,10], k = 1",
        "output": "14"
      },
      {
        "input": "prizePositions = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10], k = 5",
        "output": "30"
      },
      {
        "input": "prizePositions = [1, 2, 2, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 10, 10], k = 4",
        "output": "15"
      },
      {
        "input": "prizePositions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3",
        "output": "8"
      },
      {
        "input": "prizePositions = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190], k = 10",
        "output": "4"
      },
      {
        "input": "prizePositions = [1,1,1,2,2,3,4,5,5,5,6,6,6,7,7,7,7,8,8,9,9,9,10,10,10,11,11,11,12,12,13,13,14,14,15,15,16,16], k = 5",
        "output": "31"
      },
      {
        "input": "prizePositions = [1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10], k = 10",
        "output": "70"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10",
        "output": "20"
      },
      {
        "input": "prizePositions = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 5",
        "output": "6"
      },
      {
        "input": "prizePositions = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12], k = 6",
        "output": "36"
      },
      {
        "input": "prizePositions = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8], k = 2",
        "output": "33"
      },
      {
        "input": "prizePositions = [1,3,5,7,9,11,13,15,17,19], k = 5",
        "output": "6"
      },
      {
        "input": "prizePositions = [1,3,3,5,5,7,7,9,9,11,11,13,13,15,15,17,17,19,19,21,21,23,23,25,25,27,27,29,29], k = 2",
        "output": "8"
      },
      {
        "input": "prizePositions = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], k = 15",
        "output": "8"
      },
      {
        "input": "prizePositions = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 4",
        "output": "6"
      },
      {
        "input": "prizePositions = [1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10], k = 2",
        "output": "9"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80], k = 20",
        "output": "42"
      },
      {
        "input": "prizePositions = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10], k = 0",
        "output": "8"
      },
      {
        "input": "prizePositions = [1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10], k = 4",
        "output": "40"
      },
      {
        "input": "prizePositions = [1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10], k = 5",
        "output": "28"
      },
      {
        "input": "prizePositions = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], k = 4",
        "output": "6"
      },
      {
        "input": "prizePositions = [1,1,2,3,3,4,4,4,5,5,6,6,6,6,7,7,8,8,8,9,9,10,10,11,11,12,12,13,13], k = 4",
        "output": "24"
      },
      {
        "input": "prizePositions = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9], k = 5",
        "output": "62"
      },
      {
        "input": "prizePositions = [1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25], k = 5",
        "output": "12"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,5,5,5,5,6,7,8,9,10], k = 3",
        "output": "12"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 15",
        "output": "30"
      },
      {
        "input": "prizePositions = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5], k = 1",
        "output": "24"
      },
      {
        "input": "prizePositions = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], k = 5",
        "output": "6"
      },
      {
        "input": "prizePositions = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], k = 1",
        "output": "30"
      },
      {
        "input": "prizePositions = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 2",
        "output": "12"
      },
      {
        "input": "prizePositions = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21], k = 4",
        "output": "6"
      },
      {
        "input": "prizePositions = [1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 12, 13, 14, 15], k = 4",
        "output": "20"
      },
      {
        "input": "prizePositions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], k = 5",
        "output": "12"
      },
      {
        "input": "prizePositions = [1, 2, 2, 3, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10, 10, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 5",
        "output": "20"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 5",
        "output": "12"
      },
      {
        "input": "prizePositions = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], k = 3",
        "output": "16"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,19,20,20,20,20,20,20,20,20,20,20], k = 9",
        "output": "38"
      },
      {
        "input": "prizePositions = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15], k = 2",
        "output": "13"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10], k = 2",
        "output": "6"
      },
      {
        "input": "prizePositions = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 5",
        "output": "30"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 0",
        "output": "2"
      },
      {
        "input": "prizePositions = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10], k = 2",
        "output": "18"
      },
      {
        "input": "prizePositions = [1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10], k = 8",
        "output": "70"
      },
      {
        "input": "prizePositions = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30], k = 10",
        "output": "44"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10], k = 5",
        "output": "20"
      },
      {
        "input": "prizePositions = [1,2,2,3,4,5,5,5,6,7,8,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 7",
        "output": "20"
      },
      {
        "input": "prizePositions = [1,1,1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,7,7,8,8,9,9,10,10], k = 6",
        "output": "28"
      },
      {
        "input": "prizePositions = [1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6], k = 3",
        "output": "29"
      },
      {
        "input": "prizePositions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 0",
        "output": "2"
      },
      {
        "input": "prizePositions = [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30], k = 8",
        "output": "7"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], k = 15",
        "output": "32"
      },
      {
        "input": "prizePositions = [1,2,2,3,4,4,5,5,6,7,7,8,9,9,10,11,12,12,13,14,15,16,17,18,19,20], k = 7",
        "output": "22"
      },
      {
        "input": "prizePositions = [1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], k = 2",
        "output": "16"
      },
      {
        "input": "prizePositions = [1,2,2,2,3,4,5,6,6,7,8,9,10,10,10], k = 3",
        "output": "12"
      },
      {
        "input": "prizePositions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], k = 10",
        "output": "22"
      },
      {
        "input": "prizePositions = [1,1,2,2,3,3,3,4,4,5,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], k = 4",
        "output": "22"
      },
      {
        "input": "prizePositions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 0",
        "output": "2"
      },
      {
        "input": "prizePositions = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9], k = 2",
        "output": "18"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 6",
        "output": "14"
      },
      {
        "input": "prizePositions = [1,2,2,3,3,3,4,4,5,5,5,5,5,6,6,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13], k = 1",
        "output": "14"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 19",
        "output": "20"
      },
      {
        "input": "prizePositions = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20], k = 15",
        "output": "40"
      },
      {
        "input": "prizePositions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2",
        "output": "6"
      },
      {
        "input": "prizePositions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 3",
        "output": "17"
      },
      {
        "input": "prizePositions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 5",
        "output": "12"
      },
      {
        "input": "prizePositions = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10], k = 3",
        "output": "32"
      },
      {
        "input": "prizePositions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 10",
        "output": "22"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10], k = 0",
        "output": "12"
      },
      {
        "input": "prizePositions = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 5",
        "output": "20"
      },
      {
        "input": "prizePositions = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 10",
        "output": "22"
      },
      {
        "input": "prizePositions = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 4",
        "output": "20"
      },
      {
        "input": "prizePositions = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10], k = 2",
        "output": "16"
      },
      {
        "input": "prizePositions = [1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9], k = 3",
        "output": "49"
      },
      {
        "input": "prizePositions = [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10, 10, 10], k = 1",
        "output": "16"
      },
      {
        "input": "prizePositions = [1,3,5,7,9,11,13,15,17,19], k = 3",
        "output": "4"
      },
      {
        "input": "prizePositions = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], k = 1",
        "output": "2"
      }
    ]
  },
  {
    "id": 692,
    "difficulty": "Medium",
    "tags": [
      "Trie",
      "Array",
      "Hash Table",
      "String",
      "Bucket Sort",
      "Counting",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "Given an array of strings words and an integer k, return the k most frequent strings.\nReturn the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.\n\u00a0\nExample 1:\n\nInput: words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2\nOutput: [\"i\",\"love\"]\nExplanation: \"i\" and \"love\" are the two most frequent words.\nNote that \"i\" comes before \"love\" due to a lower alphabetical order.\n\nExample 2:\n\nInput: words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4\nOutput: [\"the\",\"is\",\"sunny\",\"day\"]\nExplanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.\n\n\u00a0\nConstraints:\n\n1 <= words.length <= 500\n1 <= words[i].length <= 10\nwords[i] consists of lowercase English letters.\nk is in the range [1, The number of unique words[i]]\n\n\u00a0\nFollow-up: Could you solve it in O(n log(k)) time and O(n) extra space?\n",
    "starterCode": "class Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "words = [\"a\",\"aa\",\"aaa\"], k = 1",
        "output": "['a']"
      },
      {
        "input": "words = [\"a\",\"aa\",\"aaa\"], k = 2",
        "output": "['a', 'aa']"
      },
      {
        "input": "words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2",
        "output": "['i', 'love']"
      },
      {
        "input": "words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4",
        "output": "['the', 'is', 'sunny', 'day']"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"apple\"], k = 3",
        "output": "['apple', 'banana', 'orange']"
      },
      {
        "input": "words = [\"zebra\",\"dog\",\"duck\",\"dog\",\"zebra\",\"zebra\"], k = 1",
        "output": "['zebra']"
      },
      {
        "input": "words = [\"hello\",\"world\",\"hello\",\"world\",\"hello\"], k = 2",
        "output": "['hello', 'world']"
      },
      {
        "input": "words = [\"sun\",\"moon\",\"star\",\"sun\",\"moon\",\"star\",\"sun\",\"moon\",\"star\",\"star\",\"star\",\"star\"], k = 2",
        "output": "['star', 'moon']"
      },
      {
        "input": "words = [\"apple\",\"orange\",\"banana\",\"grape\",\"apple\",\"orange\",\"banana\",\"grape\",\"apple\",\"orange\",\"banana\",\"grape\",\"apple\",\"orange\",\"banana\",\"grape\"], k = 4",
        "output": "['apple', 'banana', 'grape', 'orange']"
      },
      {
        "input": "words = [\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\",\"quick\",\"fox\",\"quick\"], k = 2",
        "output": "['quick', 'fox']"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], k = 10",
        "output": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']"
      },
      {
        "input": "words = [\"a\",\"abc\",\"abcd\",\"abc\",\"a\",\"abcde\",\"a\",\"abcdef\",\"a\",\"abcde\",\"a\",\"abcdef\",\"a\"], k = 4",
        "output": "['a', 'abc', 'abcde', 'abcdef']"
      },
      {
        "input": "words = [\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\"], k = 5",
        "output": "['brown', 'dog', 'fox', 'jumps', 'lazy']"
      },
      {
        "input": "words = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\"], k = 5",
        "output": "['eight', 'eleven', 'five', 'four', 'nine']"
      },
      {
        "input": "words = [\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\"], k = 4",
        "output": "['brown', 'dog', 'fox', 'jumps']"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"cherry\",\"apple\",\"banana\",\"apple\",\"cherry\",\"cherry\",\"banana\"], k = 2",
        "output": "['apple', 'banana']"
      },
      {
        "input": "words = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\"], k = 3",
        "output": "['a', 'aa', 'aaa']"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"apple\",\"kiwi\",\"banana\",\"kiwi\",\"kiwi\",\"kiwi\"], k = 3",
        "output": "['kiwi', 'apple', 'banana']"
      },
      {
        "input": "words = [\"sun\",\"moon\",\"star\",\"planet\",\"sun\",\"moon\",\"star\",\"moon\",\"moon\",\"sun\",\"star\",\"star\",\"star\",\"star\"], k = 3",
        "output": "['star', 'moon', 'sun']"
      },
      {
        "input": "words = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\"], k = 12",
        "output": "['eight', 'eleven', 'five', 'four', 'nine', 'one', 'seven', 'six', 'ten', 'three', 'twelve', 'two']"
      },
      {
        "input": "words = [\"zebra\",\"dog\",\"duck\",\"dog\",\"zebra\",\"zebra\",\"cat\",\"cat\",\"cat\",\"dog\",\"cat\"], k = 3",
        "output": "['cat', 'dog', 'zebra']"
      },
      {
        "input": "words = [\"zebra\",\"dog\",\"duck\",\"dog\",\"zebra\",\"zebra\",\"dog\",\"zebra\",\"dog\",\"duck\",\"duck\",\"zebra\",\"dog\",\"zebra\",\"zebra\",\"dog\"], k = 3",
        "output": "['zebra', 'dog', 'duck']"
      },
      {
        "input": "words = [\"coding\",\"programming\",\"hacking\",\"debugging\",\"coding\",\"programming\",\"debugging\",\"hacking\",\"hacking\",\"hacking\"], k = 2",
        "output": "['hacking', 'coding']"
      },
      {
        "input": "words = [\"x\",\"y\",\"z\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\"], k = 2",
        "output": "['x', 'y']"
      },
      {
        "input": "words = [\"alpha\",\"beta\",\"gamma\",\"delta\",\"epsilon\",\"zeta\",\"alpha\",\"beta\",\"gamma\",\"delta\",\"epsilon\",\"zeta\",\"alpha\",\"beta\",\"gamma\"], k = 5",
        "output": "['alpha', 'beta', 'gamma', 'delta', 'epsilon']"
      },
      {
        "input": "words = [\"a\",\"ab\",\"abc\",\"abcd\",\"abcde\",\"abcdef\",\"a\",\"ab\",\"abc\",\"abcd\",\"abcde\",\"abcdef\"], k = 2",
        "output": "['a', 'ab']"
      },
      {
        "input": "words = [\"red\",\"blue\",\"green\",\"red\",\"blue\",\"red\",\"green\",\"red\",\"blue\",\"green\",\"red\",\"red\"], k = 3",
        "output": "['red', 'blue', 'green']"
      },
      {
        "input": "words = [\"a\",\"abc\",\"abcd\",\"abc\",\"a\",\"abcde\",\"abcd\",\"abcde\",\"a\",\"abcd\"], k = 3",
        "output": "['a', 'abcd', 'abc']"
      },
      {
        "input": "words = [\"red\",\"blue\",\"green\",\"red\",\"blue\",\"green\",\"red\",\"blue\",\"green\",\"red\",\"blue\",\"green\",\"red\"], k = 2",
        "output": "['red', 'blue']"
      },
      {
        "input": "words = [\"cat\",\"bat\",\"rat\",\"cat\",\"bat\",\"rat\",\"rat\",\"cat\",\"bat\",\"cat\",\"bat\",\"bat\"], k = 3",
        "output": "['bat', 'cat', 'rat']"
      },
      {
        "input": "words = [\"leetcode\",\"coding\",\"interview\",\"questions\",\"leetcode\",\"interview\",\"coding\",\"coding\",\"leetcode\",\"questions\",\"questions\"], k = 3",
        "output": "['coding', 'leetcode', 'questions']"
      },
      {
        "input": "words = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\"], k = 5",
        "output": "['eight', 'eleven', 'five', 'four', 'nine']"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"apple\",\"kiwi\",\"kiwi\",\"kiwi\",\"banana\"], k = 2",
        "output": "['apple', 'banana']"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"banana\",\"kiwi\",\"kiwi\",\"kiwi\",\"kiwi\"], k = 2",
        "output": "['kiwi', 'banana']"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"cherry\",\"date\",\"elderberry\",\"fig\",\"grape\",\"honeydew\",\"kiwi\",\"lemon\",\"mango\",\"nectarine\",\"orange\",\"papaya\",\"quince\",\"raspberry\",\"strawberry\",\"tangerine\",\"ugli\",\"vanilla\",\"watermelon\",\"xigua\",\"yam\",\"zucchini\"], k = 10",
        "output": "['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon']"
      },
      {
        "input": "words = [\"zebra\",\"dog\",\"duck\",\"dog\",\"zebra\",\"zebra\",\"lion\",\"tiger\",\"lion\",\"tiger\",\"tiger\",\"lion\",\"zebra\"], k = 3",
        "output": "['zebra', 'lion', 'tiger']"
      },
      {
        "input": "words = [\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\"], k = 3",
        "output": "['x', 'y', 'z']"
      },
      {
        "input": "words = [\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"], k = 1",
        "output": "['a']"
      },
      {
        "input": "words = [\"sun\",\"moon\",\"star\",\"planet\",\"moon\",\"moon\",\"sun\",\"star\",\"planet\",\"planet\",\"star\"], k = 4",
        "output": "['moon', 'planet', 'star', 'sun']"
      },
      {
        "input": "words = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"a\",\"aa\",\"aaa\",\"aaaa\",\"a\",\"aa\",\"aaa\",\"aaaa\"], k = 4",
        "output": "['a', 'aa', 'aaa', 'aaaa']"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\"], k = 10",
        "output": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']"
      },
      {
        "input": "words = [\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\",\"d\",\"d\",\"d\",\"d\",\"d\",\"d\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\"], k = 2",
        "output": "['e', 'd']"
      },
      {
        "input": "words = [\"leetcode\",\"python\",\"java\",\"c\",\"cpp\",\"python\",\"java\",\"java\",\"c\",\"cpp\",\"cpp\",\"cpp\",\"c\",\"c\",\"java\",\"java\",\"java\",\"python\"], k = 4",
        "output": "['java', 'c', 'cpp', 'python']"
      },
      {
        "input": "words = [\"sun\",\"moon\",\"star\",\"sky\",\"sun\",\"moon\",\"star\",\"sky\",\"sun\",\"moon\",\"star\",\"sky\",\"sun\",\"moon\",\"star\",\"sky\",\"sun\",\"moon\",\"star\",\"sky\",\"sun\",\"moon\",\"star\",\"sky\",\"sun\",\"moon\",\"star\",\"sky\"], k = 4",
        "output": "['moon', 'sky', 'star', 'sun']"
      },
      {
        "input": "words = [\"zebra\",\"dog\",\"duck\",\"dog\",\"zebra\",\"zebra\",\"cat\",\"cat\",\"dog\",\"cat\"], k = 3",
        "output": "['cat', 'dog', 'zebra']"
      },
      {
        "input": "words = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"one\",\"two\",\"three\",\"four\",\"five\"], k = 5",
        "output": "['five', 'four', 'one', 'three', 'two']"
      },
      {
        "input": "words = [\"frequency\",\"of\",\"words\",\"frequency\",\"in\",\"a\",\"sentence\",\"frequency\",\"sentence\",\"frequency\"], k = 3",
        "output": "['frequency', 'sentence', 'a']"
      },
      {
        "input": "words = [\"ab\",\"abc\",\"abcd\",\"abcde\",\"abcdef\",\"abcdefg\",\"abcdefgh\",\"abcdefghi\",\"abcdefghij\",\"abcdefghijk\"], k = 4",
        "output": "['ab', 'abc', 'abcd', 'abcde']"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"apple\",\"kiwi\",\"kiwi\",\"kiwi\"], k = 3",
        "output": "['apple', 'kiwi', 'banana']"
      },
      {
        "input": "words = [\"aaa\",\"bbb\",\"ccc\",\"aaa\",\"bbb\",\"aaa\",\"bbb\",\"ccc\",\"aaa\",\"bbb\",\"ccc\",\"ccc\"], k = 2",
        "output": "['aaa', 'bbb']"
      },
      {
        "input": "words = [\"zebra\",\"dog\",\"duck\",\"dog\",\"zebra\",\"zebra\",\"cat\",\"cat\",\"cat\",\"bird\",\"bird\",\"bird\",\"bird\"], k = 4",
        "output": "['bird', 'cat', 'zebra', 'dog']"
      },
      {
        "input": "words = [\"alpha\",\"beta\",\"gamma\",\"delta\",\"epsilon\",\"zeta\",\"eta\",\"theta\",\"iota\",\"kappa\",\"lambda\",\"mu\",\"nu\",\"xi\",\"omicron\",\"pi\"], k = 5",
        "output": "['alpha', 'beta', 'delta', 'epsilon', 'eta']"
      },
      {
        "input": "words = [\"zebra\",\"dog\",\"duck\",\"dog\",\"zebra\",\"zebra\",\"dog\",\"dog\",\"dog\",\"zebra\",\"zebra\",\"zebra\",\"zebra\"], k = 2",
        "output": "['zebra', 'dog']"
      },
      {
        "input": "words = [\"cat\",\"dog\",\"cat\",\"dog\",\"cat\",\"dog\",\"cat\",\"dog\",\"cat\",\"dog\",\"cat\",\"dog\",\"cat\",\"dog\",\"cat\",\"dog\",\"cat\",\"dog\",\"cat\",\"dog\"], k = 2",
        "output": "['cat', 'dog']"
      },
      {
        "input": "words = [\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"], k = 1",
        "output": "['hello']"
      },
      {
        "input": "words = [\"python\",\"java\",\"c\",\"cpp\",\"python\",\"java\",\"python\",\"java\",\"java\",\"c\",\"c\",\"cpp\",\"cpp\",\"cpp\",\"cpp\"], k = 4",
        "output": "['cpp', 'java', 'c', 'python']"
      },
      {
        "input": "words = [\"algorithm\",\"data\",\"structure\",\"algorithm\",\"data\",\"data\",\"algorithm\",\"algorithm\",\"data\",\"structure\",\"structure\",\"structure\",\"structure\"], k = 2",
        "output": "['structure', 'algorithm']"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"a\",\"b\",\"b\",\"c\",\"d\",\"d\",\"e\",\"e\",\"e\",\"e\"], k = 4",
        "output": "['a', 'b', 'e', 'c']"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"apple\",\"banana\",\"kiwi\",\"kiwi\",\"kiwi\",\"kiwi\"], k = 3",
        "output": "['kiwi', 'apple', 'banana']"
      },
      {
        "input": "words = [\"panda\",\"polar\",\"bear\",\"panda\",\"polar\",\"polar\",\"polar\",\"bear\",\"bear\",\"bear\",\"bear\",\"bear\"], k = 3",
        "output": "['bear', 'polar', 'panda']"
      },
      {
        "input": "words = [\"flower\",\"flow\",\"flight\",\"flow\",\"flight\",\"flow\",\"flower\",\"flight\",\"flower\",\"flower\"], k = 4",
        "output": "['flower', 'flight', 'flow']"
      },
      {
        "input": "words = [\"zebra\",\"dog\",\"duck\",\"dog\",\"zebra\",\"zebra\",\"zebra\",\"dog\",\"dog\",\"dog\",\"duck\",\"duck\",\"duck\",\"duck\"], k = 2",
        "output": "['dog', 'duck']"
      },
      {
        "input": "words = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\"], k = 5",
        "output": "['eight', 'five', 'four', 'nine', 'one']"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], k = 5",
        "output": "['a', 'b', 'c', 'd', 'e']"
      },
      {
        "input": "words = [\"cat\",\"bat\",\"rat\",\"cat\",\"bat\",\"rat\",\"cat\",\"bat\",\"rat\",\"cat\"], k = 2",
        "output": "['cat', 'bat']"
      },
      {
        "input": "words = [\"cat\",\"bat\",\"rat\",\"cat\",\"bat\",\"rat\",\"cat\",\"bat\",\"rat\",\"cat\",\"bat\",\"rat\",\"cat\",\"bat\",\"rat\",\"cat\",\"bat\",\"rat\",\"cat\",\"bat\",\"rat\",\"cat\",\"bat\",\"rat\"], k = 2",
        "output": "['bat', 'cat']"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], k = 5",
        "output": "['a', 'b', 'c', 'd', 'e']"
      },
      {
        "input": "words = [\"red\",\"blue\",\"green\",\"red\",\"blue\",\"red\",\"blue\",\"red\",\"blue\",\"red\",\"blue\",\"red\",\"blue\",\"red\",\"blue\",\"red\",\"blue\",\"red\",\"blue\",\"red\",\"blue\",\"red\",\"blue\",\"red\",\"blue\",\"red\",\"blue\",\"red\",\"blue\",\"red\",\"blue\"], k = 3",
        "output": "['blue', 'red', 'green']"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"banana\",\"kiwi\",\"kiwi\",\"kiwi\",\"kiwi\"], k = 3",
        "output": "['kiwi', 'banana', 'apple']"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"banana\",\"grape\",\"grape\",\"grape\"], k = 3",
        "output": "['banana', 'grape', 'apple']"
      },
      {
        "input": "words = [\"x\",\"y\",\"z\",\"w\",\"v\",\"u\",\"t\",\"s\",\"r\",\"q\",\"p\",\"o\",\"n\",\"m\",\"l\",\"k\",\"j\",\"i\",\"h\",\"g\",\"f\",\"e\",\"d\",\"c\",\"b\",\"a\"], k = 5",
        "output": "['a', 'b', 'c', 'd', 'e']"
      },
      {
        "input": "words = [\"aaaaa\",\"aaa\",\"aa\",\"a\",\"aaaaa\",\"aaa\",\"aa\",\"a\",\"aaaaa\",\"aaa\",\"aa\",\"a\",\"aaaaa\",\"aaa\",\"aa\",\"a\",\"aaaaa\",\"aaa\",\"aa\",\"a\"], k = 4",
        "output": "['a', 'aa', 'aaa', 'aaaaa']"
      },
      {
        "input": "words = [\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\",\"jump\",\"run\",\"walk\"], k = 2",
        "output": "['jump', 'run']"
      },
      {
        "input": "words = [\"zebra\",\"dog\",\"duck\",\"dog\",\"zebra\",\"zebra\",\"zebra\",\"dog\",\"dog\",\"dog\",\"duck\",\"duck\",\"duck\",\"duck\",\"duck\",\"zebra\"], k = 3",
        "output": "['duck', 'dog', 'zebra']"
      },
      {
        "input": "words = [\"repeated\",\"word\",\"repeated\",\"word\",\"repeated\",\"word\",\"unique\",\"unique\",\"unique\",\"unique\",\"another\",\"another\",\"another\",\"another\",\"another\"], k = 3",
        "output": "['another', 'unique', 'repeated']"
      },
      {
        "input": "words = [\"sun\",\"moon\",\"star\",\"moon\",\"sun\",\"moon\",\"star\",\"sun\",\"star\",\"star\",\"star\",\"sun\",\"moon\",\"moon\",\"moon\"], k = 3",
        "output": "['moon', 'star', 'sun']"
      },
      {
        "input": "words = [\"car\",\"bike\",\"train\",\"car\",\"bike\",\"car\",\"bike\",\"train\",\"car\",\"bike\",\"car\",\"bike\",\"train\",\"car\",\"train\",\"car\",\"bike\",\"train\"], k = 3",
        "output": "['car', 'bike', 'train']"
      },
      {
        "input": "words = [\"alpha\",\"beta\",\"gamma\",\"delta\",\"epsilon\",\"alpha\",\"beta\",\"gamma\",\"delta\",\"epsilon\",\"alpha\",\"beta\",\"gamma\",\"delta\",\"epsilon\",\"alpha\",\"beta\",\"gamma\",\"delta\",\"epsilon\",\"alpha\",\"beta\",\"gamma\",\"delta\",\"epsilon\",\"alpha\",\"beta\",\"gamma\",\"delta\",\"epsilon\"], k = 3",
        "output": "['alpha', 'beta', 'delta']"
      },
      {
        "input": "words = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"a\",\"aa\",\"aaa\",\"aaaa\",\"a\",\"aa\",\"aaa\",\"aaaa\"], k = 3",
        "output": "['a', 'aa', 'aaa']"
      },
      {
        "input": "words = [\"cat\",\"bat\",\"rat\",\"hat\",\"mat\",\"pat\",\"sat\",\"fat\",\"tat\",\"cat\",\"bat\",\"rat\",\"hat\",\"mat\",\"pat\",\"sat\",\"fat\",\"tat\",\"cat\",\"bat\",\"rat\",\"hat\",\"mat\",\"pat\",\"sat\",\"fat\",\"tat\"], k = 5",
        "output": "['bat', 'cat', 'fat', 'hat', 'mat']"
      },
      {
        "input": "words = [\"zebra\",\"dog\",\"duck\",\"dog\",\"zebra\",\"zebra\",\"lion\",\"tiger\",\"bear\",\"zebra\",\"dog\",\"duck\"], k = 4",
        "output": "['zebra', 'dog', 'duck', 'bear']"
      },
      {
        "input": "words = [\"elephant\",\"giraffe\",\"lion\",\"tiger\",\"elephant\",\"lion\",\"giraffe\",\"tiger\",\"elephant\",\"lion\",\"giraffe\",\"tiger\",\"lion\",\"giraffe\",\"tiger\",\"elephant\",\"tiger\",\"giraffe\",\"lion\",\"tiger\"], k = 4",
        "output": "['tiger', 'giraffe', 'lion', 'elephant']"
      },
      {
        "input": "words = [\"sunrise\",\"sunset\",\"midnight\",\"noon\",\"sunrise\",\"sunset\",\"midnight\",\"noon\",\"sunrise\",\"sunset\",\"midnight\",\"noon\",\"sunrise\",\"sunset\",\"midnight\",\"noon\",\"sunrise\",\"sunset\",\"midnight\",\"noon\",\"sunrise\",\"sunset\",\"midnight\",\"noon\",\"sunrise\",\"sunset\",\"midnight\",\"noon\",\"sunrise\",\"sunset\",\"midnight\",\"noon\",\"sunrise\",\"sunset\",\"midnight\",\"noon\",\"sunrise\",\"sunset\",\"midnight\",\"noon\"], k = 4",
        "output": "['midnight', 'noon', 'sunrise', 'sunset']"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"apple\",\"banana\",\"banana\"], k = 2",
        "output": "['banana', 'apple']"
      },
      {
        "input": "words = [\"flower\",\"tree\",\"bush\",\"flower\",\"tree\",\"flower\",\"bush\",\"flower\",\"tree\",\"bush\",\"flower\",\"tree\",\"bush\",\"flower\",\"tree\",\"bush\",\"flower\",\"tree\",\"bush\",\"flower\",\"tree\",\"bush\",\"flower\",\"tree\",\"bush\",\"flower\",\"tree\",\"bush\",\"flower\",\"tree\",\"bush\"], k = 2",
        "output": "['flower', 'bush']"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"banana\",\"kiwi\",\"kiwi\",\"kiwi\"], k = 3",
        "output": "['banana', 'kiwi', 'apple']"
      },
      {
        "input": "words = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"a\",\"aa\",\"aaa\",\"aaaa\",\"a\",\"aa\",\"aaa\",\"aaaa\",\"a\",\"aa\",\"aaa\"], k = 2",
        "output": "['a', 'aa']"
      },
      {
        "input": "words = [\"sun\",\"moon\",\"star\",\"planet\",\"galaxy\",\"universe\",\"sun\",\"moon\",\"star\",\"planet\",\"galaxy\",\"universe\",\"sun\",\"moon\",\"star\",\"planet\",\"galaxy\",\"universe\",\"sun\",\"moon\",\"star\",\"planet\",\"galaxy\",\"universe\"], k = 3",
        "output": "['galaxy', 'moon', 'planet']"
      },
      {
        "input": "words = [\"aaa\",\"aa\",\"a\",\"aaaa\",\"aa\",\"a\",\"aaa\",\"aa\",\"a\",\"aaaa\",\"aa\",\"a\",\"aaa\",\"aa\",\"a\",\"aaaa\",\"aa\",\"a\",\"aaa\",\"aa\",\"a\"], k = 4",
        "output": "['a', 'aa', 'aaa', 'aaaa']"
      },
      {
        "input": "words = [\"cat\",\"dog\",\"cat\",\"bird\",\"dog\",\"cat\",\"dog\",\"dog\",\"dog\",\"cat\",\"cat\",\"bird\"], k = 3",
        "output": "['cat', 'dog', 'bird']"
      },
      {
        "input": "words = [\"sun\",\"moon\",\"star\",\"sun\",\"moon\",\"star\",\"sun\",\"moon\",\"star\",\"moon\",\"star\",\"star\",\"star\"], k = 1",
        "output": "['star']"
      },
      {
        "input": "words = [\"red\",\"blue\",\"green\",\"yellow\",\"red\",\"blue\",\"green\",\"yellow\",\"red\",\"blue\",\"green\",\"yellow\",\"red\",\"blue\",\"green\",\"yellow\",\"red\",\"blue\",\"green\",\"yellow\",\"red\",\"blue\",\"green\",\"yellow\",\"red\",\"blue\",\"green\",\"yellow\",\"red\",\"blue\"], k = 2",
        "output": "['blue', 'red']"
      }
    ]
  },
  {
    "id": 962,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Array",
      "Two Pointers",
      "Monotonic Stack"
    ],
    "problemDescription": "A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.\nGiven an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.\n\u00a0\nExample 1:\n\nInput: nums = [6,0,8,2,1,5]\nOutput: 4\nExplanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.\n\nExample 2:\n\nInput: nums = [9,8,1,0,1,9,4,0,4,1]\nOutput: 7\nExplanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 5 * 104\n0 <= nums[i] <= 5 * 104\n\n",
    "starterCode": "class Solution:\n    def maxWidthRamp(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,3,2,2,3,3,7,5,2,4]",
        "output": "9"
      },
      {
        "input": "nums = [1,5,2,5,6,3,5,4]",
        "output": "7"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0]",
        "output": "9"
      },
      {
        "input": "nums = [1,5,5,5,5,5]",
        "output": "5"
      },
      {
        "input": "nums = [1,5,2,5,6,6,1,3,2,5]",
        "output": "9"
      },
      {
        "input": "nums = [25,20,15,11,10,9,7,6,3,1]",
        "output": "0"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,0]",
        "output": "0"
      },
      {
        "input": "nums = [0,0,0,0,0]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,9,10,1,3,5,6,4,8,7]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "4"
      },
      {
        "input": "nums = [6,0,8,2,1,5]",
        "output": "4"
      },
      {
        "input": "nums = [0,5,4,3,2,1]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [6,6,6,6,6,6]",
        "output": "5"
      },
      {
        "input": "nums = [8,1,5,2,3,4,8,7,2]",
        "output": "7"
      },
      {
        "input": "nums = [9,8,1,0,1,9,4,0,4,1]",
        "output": "7"
      },
      {
        "input": "nums = [1,3,6,7,9,10,11,15,20,25]",
        "output": "9"
      },
      {
        "input": "nums = [1,2,3,2,1]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,1,2]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,3,2,1,2,3,4,5]",
        "output": "10"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "19"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "11"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2]",
        "output": "19"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0]",
        "output": "19"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 5]",
        "output": "19"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0]",
        "output": "18"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "19"
      },
      {
        "input": "nums = [45, 23, 11, 33, 22, 55, 44, 33, 22, 11, 77, 88, 99, 66, 55]",
        "output": "14"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]",
        "output": "20"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "25"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "50"
      },
      {
        "input": "nums = [1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,10,1,11]",
        "output": "19"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "19"
      },
      {
        "input": "nums = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50000]",
        "output": "20"
      },
      {
        "input": "nums = [0,10000,0,9999,0,9998,0,9997,0,9996,0,9995,0,9994,0,9993,0,9992,0,9991]",
        "output": "19"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "9"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10]",
        "output": "18"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]",
        "output": "20"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "19"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0]",
        "output": "18"
      },
      {
        "input": "nums = [4,8,6,5,1,0,5,9,10,11,12,13,14,15]",
        "output": "13"
      },
      {
        "input": "nums = [10000,9999,9998,9997,9996,9995,9994,9993,9992,9991,9990,9989,9988,9987,9986,9985,9984,9983,9982,9981,0,1,2,3,4,5,6,7,8,9]",
        "output": "9"
      },
      {
        "input": "nums = [1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10,9,11,10,12]",
        "output": "19"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "20"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "36"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0]",
        "output": "19"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "29"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,1,2,4,6,8,10,12,14,16,18]",
        "output": "29"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "19"
      },
      {
        "input": "nums = [50,40,30,20,10,0,10,20,30,40,50,60,70,80,90,100,110,120,130,140]",
        "output": "19"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10]",
        "output": "29"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,1,3,5,7,9,11,13,15,17,19]",
        "output": "29"
      },
      {
        "input": "nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]",
        "output": "20"
      },
      {
        "input": "nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1]",
        "output": "20"
      },
      {
        "input": "nums = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "29"
      },
      {
        "input": "nums = [5,4,3,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "18"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0]",
        "output": "29"
      },
      {
        "input": "nums = [45000, 44999, 44998, 44997, 44996, 44995, 44994, 44993, 44992, 44991, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9]",
        "output": "18"
      },
      {
        "input": "nums = [1, 3, 2, 4, 2, 5, 3, 6, 4, 7, 5, 8, 6, 9, 7, 10, 8, 11, 9, 12, 10]",
        "output": "20"
      },
      {
        "input": "nums = [50000,49999,49998,49997,49996,49995,49994,49993,49992,49991,0,1,2,3,4,5,6,7,8,9]",
        "output": "9"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]",
        "output": "20"
      },
      {
        "input": "nums = [100,0,99,1,98,2,97,3,96,4,95,5,94,6,93,7,92,8,91,9]",
        "output": "18"
      },
      {
        "input": "nums = [50000, 49999, 49998, 49997, 49996, 49995, 49994, 49993, 49992, 49991, 49990, 49989, 49988, 49987, 49986, 49985, 49984, 49983, 49982, 49981]",
        "output": "0"
      },
      {
        "input": "nums = [50000, 49999, 49998, 49997, 49996, 49995, 49994, 49993, 49992, 49991, 49990, 49989, 49988, 49987, 49986, 49985, 49984, 49983, 49982, 49981, 0]",
        "output": "0"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,1,3,5,7,9,11,13,15,17,19]",
        "output": "19"
      }
    ]
  },
  {
    "id": 2735,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Enumeration"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums of size n representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index i\u00a0is nums[i]. Each chocolate is of a different type, and initially, the chocolate at the index\u00a0i\u00a0is of ith type.\nIn one operation, you can do the following with an incurred cost of x:\n\nSimultaneously change the chocolate of ith type to ((i + 1) mod n)th type for all chocolates.\n\nReturn the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.\n\u00a0\nExample 1:\n\nInput: nums = [20,1,15], x = 5\nOutput: 13\nExplanation: Initially, the chocolate types are [0,1,2]. We will buy the 1st\u00a0type of chocolate at a cost of 1.\nNow, we will perform the operation at a cost of 5, and the types of chocolates will become [1,2,0]. We will buy the 2nd type of chocolate at a cost of 1.\nNow, we will again perform the operation at a cost of 5, and the chocolate types will become [2,0,1]. We will buy the 0th type of chocolate at a cost of 1. \nThus, the total cost will become (1 + 5 + 1 + 5 + 1) = 13. We can prove that this is optimal.\n\nExample 2:\n\nInput: nums = [1,2,3], x = 4\nOutput: 6\nExplanation: We will collect all three types of chocolates at their own price without performing any operations. Therefore, the total cost is 1 + 2 + 3 = 6.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 109\n1 <= x <= 109\n\n",
    "starterCode": "class Solution:\n    def minCost(self, nums: List[int], x: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [10,20,30,40,50], x = 10",
        "output": "90"
      },
      {
        "input": "nums = [10,20,30,40], x = 10",
        "output": "70"
      },
      {
        "input": "nums = [1,1,1,1,1], x = 1",
        "output": "5"
      },
      {
        "input": "nums = [7,7,7,7,7,7], x = 2",
        "output": "42"
      },
      {
        "input": "nums = [10,20,30,40,50], x = 1",
        "output": "54"
      },
      {
        "input": "nums = [3,1,2], x = 3",
        "output": "6"
      },
      {
        "input": "nums = [100,200,300], x = 50",
        "output": "400"
      },
      {
        "input": "nums = [1,2,3], x = 4",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], x = 1",
        "output": "10"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000], x = 1000000000",
        "output": "3000000000"
      },
      {
        "input": "nums = [1], x = 100",
        "output": "1"
      },
      {
        "input": "nums = [5,5,5,5], x = 10",
        "output": "20"
      },
      {
        "input": "nums = [1,3,5,7,9], x = 2",
        "output": "13"
      },
      {
        "input": "nums = [20,1,15], x = 5",
        "output": "13"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], x = 10",
        "output": "45"
      },
      {
        "input": "nums = [5,5,5,5], x = 1",
        "output": "20"
      },
      {
        "input": "nums = [10,20,30,40], x = 5",
        "output": "55"
      },
      {
        "input": "nums = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3], x = 1",
        "output": "21"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], x = 30",
        "output": "540"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], x = 500",
        "output": "1500"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], x = 10",
        "output": "190"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], x = 3",
        "output": "30"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], x = 1",
        "output": "39"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 100",
        "output": "20"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], x = 2",
        "output": "27"
      },
      {
        "input": "nums = [5,8,6,3,4,7,2,9,1], x = 3",
        "output": "26"
      },
      {
        "input": "nums = [8, 6, 4, 2, 0, 2, 4, 6, 8], x = 1",
        "output": "8"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31], x = 10",
        "output": "100"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 100",
        "output": "10"
      },
      {
        "input": "nums = [7, 6, 5, 4, 3, 2, 1, 8, 9, 10], x = 10",
        "output": "55"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3], x = 7",
        "output": "52"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], x = 2",
        "output": "70"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], x = 5",
        "output": "75"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], x = 20",
        "output": "200"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000], x = 1000000000",
        "output": "3000000000"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6], x = 15",
        "output": "55"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], x = 2",
        "output": "28"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], x = 100",
        "output": "10"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], x = 3",
        "output": "62"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 5",
        "output": "45"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 1",
        "output": "10"
      },
      {
        "input": "nums = [1,1000000000,1,1000000000,1], x = 500000000",
        "output": "500000005"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], x = 15",
        "output": "105"
      },
      {
        "input": "nums = [1000000000, 1, 1000000000, 1, 1000000000], x = 500000000",
        "output": "1000000005"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], x = 5",
        "output": "105"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], x = 5",
        "output": "96"
      },
      {
        "input": "nums = [7, 8, 9, 10, 11, 7, 8, 9, 10, 11], x = 2",
        "output": "78"
      },
      {
        "input": "nums = [100, 200, 150, 100, 50], x = 75",
        "output": "500"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10], x = 5",
        "output": "90"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], x = 7",
        "output": "92"
      },
      {
        "input": "nums = [3, 1, 2, 1, 3, 1, 2, 1, 3, 1], x = 1",
        "output": "11"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000], x = 1000",
        "output": "2112"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], x = 3",
        "output": "34"
      },
      {
        "input": "nums = [1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1], x = 100000000",
        "output": "100000010"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], x = 1",
        "output": "17"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], x = 2",
        "output": "24"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], x = 25",
        "output": "525"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 16, 17, 18, 19, 20], x = 10",
        "output": "165"
      },
      {
        "input": "nums = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000], x = 1",
        "output": "10000"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8], x = 2",
        "output": "23"
      },
      {
        "input": "nums = [5, 9, 3, 8, 2, 7, 4, 6, 1], x = 10",
        "output": "35"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5], x = 7",
        "output": "34"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], x = 25",
        "output": "305"
      },
      {
        "input": "nums = [29, 10, 6, 3, 5, 30, 50, 100, 3, 8, 9, 12, 15, 16, 20, 23, 25, 28, 30, 32], x = 15",
        "output": "220"
      },
      {
        "input": "nums = [1, 3, 2, 4, 5], x = 10",
        "output": "15"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 1",
        "output": "20"
      },
      {
        "input": "nums = [7, 8, 9, 1, 2, 3, 4, 5, 6], x = 3",
        "output": "30"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], x = 10",
        "output": "190"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], x = 1",
        "output": "17"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000], x = 500000000",
        "output": "4000000000"
      },
      {
        "input": "nums = [7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7], x = 8",
        "output": "56"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], x = 500",
        "output": "4500"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], x = 15",
        "output": "55"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], x = 7",
        "output": "248"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10], x = 5",
        "output": "145"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], x = 7",
        "output": "34"
      },
      {
        "input": "nums = [10,20,30,40,50], x = 7",
        "output": "78"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], x = 5",
        "output": "145"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], x = 5",
        "output": "51"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1], x = 1",
        "output": "9"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000], x = 1000000000",
        "output": "4000000000"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], x = 10",
        "output": "135"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 2, 4, 6, 8, 0], x = 4",
        "output": "21"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], x = 10",
        "output": "80"
      },
      {
        "input": "nums = [1000000000,1,1000000000,1,1000000000,1,1000000000,1,1000000000,1], x = 100000000",
        "output": "100000010"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], x = 3",
        "output": "140"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], x = 10",
        "output": "45"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], x = 50",
        "output": "1450"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], x = 2",
        "output": "27"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], x = 100",
        "output": "100"
      },
      {
        "input": "nums = [3, 2, 1, 4, 5], x = 2",
        "output": "12"
      },
      {
        "input": "nums = [10, 1, 10, 1, 10], x = 5",
        "output": "15"
      },
      {
        "input": "nums = [10, 10, 1, 10, 10], x = 2",
        "output": "13"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10, 100, 90, 80, 70, 60], x = 15",
        "output": "230"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70], x = 20",
        "output": "231"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000], x = 50000",
        "output": "61112"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], x = 100",
        "output": "1900"
      },
      {
        "input": "nums = [3,1,2,4,5,6,7,8,9,10], x = 1",
        "output": "19"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000], x = 500000000",
        "output": "3000000000"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], x = 5",
        "output": "70"
      }
    ]
  },
  {
    "id": 1358,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "problemDescription": "Given a string s\u00a0consisting only of characters a, b and c.\nReturn the number of substrings containing at least\u00a0one occurrence of all these characters a, b and c.\n\u00a0\nExample 1:\n\nInput: s = \"abcabc\"\nOutput: 10\nExplanation: The substrings containing\u00a0at least\u00a0one occurrence of the characters\u00a0a,\u00a0b\u00a0and\u00a0c are \"abc\", \"abca\", \"abcab\", \"abcabc\", \"bca\", \"bcab\", \"bcabc\", \"cab\", \"cabc\" and \"abc\" (again). \n\nExample 2:\n\nInput: s = \"aaacb\"\nOutput: 3\nExplanation: The substrings containing\u00a0at least\u00a0one occurrence of the characters\u00a0a,\u00a0b\u00a0and\u00a0c are \"aaacb\", \"aacb\" and \"acb\". \n\nExample 3:\n\nInput: s = \"abc\"\nOutput: 1\n\n\u00a0\nConstraints:\n\n3 <= s.length <= 5 x 10^4\ns\u00a0only consists of\u00a0a, b or c\u00a0characters.\n\n",
    "starterCode": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"aaabbbccc\"",
        "output": "9"
      },
      {
        "input": "s = \"abcba\"",
        "output": "5"
      },
      {
        "input": "s = \"cba\"",
        "output": "1"
      },
      {
        "input": "s = \"cbaacb\"",
        "output": "8"
      },
      {
        "input": "s = \"bbbacbac\"",
        "output": "18"
      },
      {
        "input": "s = \"ccccabc\"",
        "output": "9"
      },
      {
        "input": "s = \"abcabcabc\"",
        "output": "28"
      },
      {
        "input": "s = \"abcabcabcabc\"",
        "output": "55"
      },
      {
        "input": "s = \"aabbc\"",
        "output": "2"
      },
      {
        "input": "s = \"cccbaab\"",
        "output": "9"
      },
      {
        "input": "s = \"aabbbc\"",
        "output": "2"
      },
      {
        "input": "s = \"aabcbc\"",
        "output": "6"
      },
      {
        "input": "s = \"abcabc\"",
        "output": "10"
      },
      {
        "input": "s = \"aabbaacc\"",
        "output": "8"
      },
      {
        "input": "s = \"abacbc\"",
        "output": "8"
      },
      {
        "input": "s = \"abacabacabc\"",
        "output": "41"
      },
      {
        "input": "s = \"aaaabbbbcccc\"",
        "output": "16"
      },
      {
        "input": "s = \"ccbaaabb\"",
        "output": "10"
      },
      {
        "input": "s = \"baccab\"",
        "output": "7"
      },
      {
        "input": "s = \"bca\"",
        "output": "1"
      },
      {
        "input": "s = \"abc\"",
        "output": "1"
      },
      {
        "input": "s = \"ccccbaaa\"",
        "output": "12"
      },
      {
        "input": "s = \"aaacb\"",
        "output": "3"
      },
      {
        "input": "s = \"ccccbaab\"",
        "output": "12"
      },
      {
        "input": "s = \"abcababc\"",
        "output": "18"
      },
      {
        "input": "s = \"aabbcc\"",
        "output": "4"
      },
      {
        "input": "s = \"aaaabbbccc\"",
        "output": "12"
      },
      {
        "input": "s = \"abacbac\"",
        "output": "14"
      },
      {
        "input": "s = \"abcacbacbacbabc\"",
        "output": "89"
      },
      {
        "input": "s = \"aabbcacabcabc\"",
        "output": "59"
      },
      {
        "input": "s = \"ccabababc\"",
        "output": "17"
      },
      {
        "input": "s = \"abacbabacbabacbab\"",
        "output": "112"
      },
      {
        "input": "s = \"aabccbabcbacbac\"",
        "output": "85"
      },
      {
        "input": "s = \"abcabcabccba\"",
        "output": "52"
      },
      {
        "input": "s = \"aabbccbaa\"",
        "output": "18"
      },
      {
        "input": "s = \"aaabbbcccbbbccc\"",
        "output": "27"
      },
      {
        "input": "s = \"acbacbacbacbacb\"",
        "output": "91"
      },
      {
        "input": "s = \"abacbacbacb\"",
        "output": "44"
      },
      {
        "input": "s = \"aabcbacbacbabc\"",
        "output": "75"
      },
      {
        "input": "s = \"bcabcabcabcabc\"",
        "output": "78"
      },
      {
        "input": "s = \"aaabbbcccabcabcabc\"",
        "output": "115"
      },
      {
        "input": "s = \"abacbacbacbacbabcababcabc\"",
        "output": "271"
      },
      {
        "input": "s = \"acbacbacbacb\"",
        "output": "55"
      },
      {
        "input": "s = \"abacbacbacbabc\"",
        "output": "76"
      },
      {
        "input": "s = \"cccbbbaaa\"",
        "output": "9"
      },
      {
        "input": "s = \"caabcbacbacb\"",
        "output": "52"
      },
      {
        "input": "s = \"abbbcccaabbbabc\"",
        "output": "59"
      },
      {
        "input": "s = \"abacbcabc\"",
        "output": "26"
      },
      {
        "input": "s = \"aaabbbcccbbbaaa\"",
        "output": "45"
      },
      {
        "input": "s = \"bacbacbacbacb\"",
        "output": "66"
      },
      {
        "input": "s = \"cabcbacbacbabcb\"",
        "output": "88"
      },
      {
        "input": "s = \"abacbcacab\"",
        "output": "31"
      },
      {
        "input": "s = \"bbbbbbcccaaa\"",
        "output": "18"
      },
      {
        "input": "s = \"aaaaaaaaaabbbccc\"",
        "output": "30"
      },
      {
        "input": "s = \"ccbbbaaabbbccc\"",
        "output": "36"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\"",
        "output": "406"
      },
      {
        "input": "s = \"abcabcabcab\"",
        "output": "45"
      },
      {
        "input": "s = \"aabbaaccabcabcabc\"",
        "output": "104"
      },
      {
        "input": "s = \"bacbacbacbacbacba\"",
        "output": "120"
      },
      {
        "input": "s = \"ccccbbbaaaaa\"",
        "output": "20"
      },
      {
        "input": "s = \"abababababababab\"",
        "output": "0"
      },
      {
        "input": "s = \"abacbcabcabcab\"",
        "output": "76"
      },
      {
        "input": "s = \"abababababab\"",
        "output": "0"
      },
      {
        "input": "s = \"cacbacbacbac\"",
        "output": "54"
      },
      {
        "input": "s = \"cabbacbac\"",
        "output": "25"
      },
      {
        "input": "s = \"aabbaacccbaab\"",
        "output": "45"
      },
      {
        "input": "s = \"abcabcabcabcabcabc\"",
        "output": "136"
      },
      {
        "input": "s = \"cbacbacbacbac\"",
        "output": "66"
      },
      {
        "input": "s = \"aabbbcccaaaabbbccc\"",
        "output": "86"
      },
      {
        "input": "s = \"bacbacbacbacba\"",
        "output": "78"
      },
      {
        "input": "s = \"aabacababaac\"",
        "output": "40"
      },
      {
        "input": "s = \"abcababccbaabc\"",
        "output": "69"
      },
      {
        "input": "s = \"ababababcabcab\"",
        "output": "57"
      },
      {
        "input": "s = \"aaabbbcccbbb\"",
        "output": "18"
      },
      {
        "input": "s = \"abcabcabcabcababc\"",
        "output": "117"
      },
      {
        "input": "s = \"abccbaabccbaab\"",
        "output": "66"
      },
      {
        "input": "s = \"baccabaccabacc\"",
        "output": "69"
      },
      {
        "input": "s = \"abacbcacbacb\"",
        "output": "52"
      },
      {
        "input": "s = \"cccccbbaaaabbbccc\"",
        "output": "68"
      },
      {
        "input": "s = \"bbcccaabbcccaab\"",
        "output": "65"
      },
      {
        "input": "s = \"aabbbccccaaaabbbbccc\"",
        "output": "103"
      },
      {
        "input": "s = \"abababab\"",
        "output": "0"
      },
      {
        "input": "s = \"cbacbacbacbacbacbacbacbacbacbacb\"",
        "output": "465"
      },
      {
        "input": "s = \"abcbaabcbaabc\"",
        "output": "58"
      },
      {
        "input": "s = \"aabcbabacabc\"",
        "output": "49"
      },
      {
        "input": "s = \"aabacbacbacbac\"",
        "output": "75"
      },
      {
        "input": "s = \"aabbaaccbbacbbacaacabcbacbacbacbac\"",
        "output": "498"
      },
      {
        "input": "s = \"abacbabacbabac\"",
        "output": "71"
      },
      {
        "input": "s = \"aabbbcccaabbbabc\"",
        "output": "70"
      },
      {
        "input": "s = \"aaaabbccccabbbccc\"",
        "output": "85"
      },
      {
        "input": "s = \"cccaaaabbbcccbbb\"",
        "output": "51"
      },
      {
        "input": "s = \"ccccbbaaaabc\"",
        "output": "30"
      },
      {
        "input": "s = \"acbacbacbacbacbacbacbacbacbacbac\"",
        "output": "465"
      },
      {
        "input": "s = \"abcbbccaaa\"",
        "output": "20"
      },
      {
        "input": "s = \"cccaabbbaaacc\"",
        "output": "34"
      },
      {
        "input": "s = \"ccccccccabbaabbcbbb\"",
        "output": "100"
      },
      {
        "input": "s = \"cccbababac\"",
        "output": "23"
      },
      {
        "input": "s = \"ccccabcabcabc\"",
        "output": "60"
      },
      {
        "input": "s = \"aabacbababcabc\"",
        "output": "69"
      },
      {
        "input": "s = \"aaabbbcccbbbaaabbbc\"",
        "output": "87"
      },
      {
        "input": "s = \"abccabccabccabc\"",
        "output": "85"
      },
      {
        "input": "s = \"abcbacbacbacbaca\"",
        "output": "103"
      },
      {
        "input": "s = \"abcabcabcabacbacb\"",
        "output": "119"
      },
      {
        "input": "s = \"aabbbcccabcabcabc\"",
        "output": "103"
      },
      {
        "input": "s = \"abacbcabcabc\"",
        "output": "53"
      },
      {
        "input": "s = \"aabbaaccaabbcc\"",
        "output": "52"
      },
      {
        "input": "s = \"abcabcabacbcab\"",
        "output": "76"
      },
      {
        "input": "s = \"aabbbccc\"",
        "output": "6"
      },
      {
        "input": "s = \"aabbaacccbbcabab\"",
        "output": "77"
      },
      {
        "input": "s = \"babababacacacacbcbbcbcbcbacbacbacb\"",
        "output": "441"
      },
      {
        "input": "s = \"cacbacbacbacbacbac\"",
        "output": "135"
      },
      {
        "input": "s = \"cccbbaaaabacbacb\"",
        "output": "78"
      },
      {
        "input": "s = \"ccccbbbaaa\"",
        "output": "12"
      },
      {
        "input": "s = \"aaaaaaaaaabcabcabcabcabc\"",
        "output": "208"
      },
      {
        "input": "s = \"aabbbccccaaa\"",
        "output": "23"
      },
      {
        "input": "s = \"abacbacbac\"",
        "output": "35"
      },
      {
        "input": "s = \"aabbbaccccba\"",
        "output": "36"
      },
      {
        "input": "s = \"ccbaabccababab\"",
        "output": "62"
      },
      {
        "input": "s = \"ccccbaabccc\"",
        "output": "33"
      },
      {
        "input": "s = \"ccccbaa\"",
        "output": "8"
      },
      {
        "input": "s = \"bacabcabcabcabcabcabcabc\"",
        "output": "252"
      },
      {
        "input": "s = \"ccccccaaaabbbccc\"",
        "output": "48"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "496"
      },
      {
        "input": "s = \"abacbabcc\"",
        "output": "25"
      },
      {
        "input": "s = \"abacbacbacbacb\"",
        "output": "77"
      },
      {
        "input": "s = \"bacbacbacbacbacbacbac\"",
        "output": "190"
      },
      {
        "input": "s = \"abcabcabcabcabc\"",
        "output": "91"
      },
      {
        "input": "s = \"bbaacccaaaabbccba\"",
        "output": "76"
      },
      {
        "input": "s = \"aaaaabbbbbccccc\"",
        "output": "25"
      },
      {
        "input": "s = \"aaabbbcccabc\"",
        "output": "34"
      }
    ]
  },
  {
    "id": 166,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Math",
      "String"
    ],
    "problemDescription": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\nIf the fractional part is repeating, enclose the repeating part in parentheses.\nIf multiple answers are possible, return any of them.\nIt is guaranteed that the length of the answer string is less than 104 for all the given inputs.\n\u00a0\nExample 1:\n\nInput: numerator = 1, denominator = 2\nOutput: \"0.5\"\n\nExample 2:\n\nInput: numerator = 2, denominator = 1\nOutput: \"2\"\n\nExample 3:\n\nInput: numerator = 4, denominator = 333\nOutput: \"0.(012)\"\n\n\u00a0\nConstraints:\n\n-231 <=\u00a0numerator, denominator <= 231 - 1\ndenominator != 0\n\n",
    "starterCode": "class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n        ",
    "testCases": [
      {
        "input": "numerator = 7, denominator = -3",
        "output": "-2.(3)"
      },
      {
        "input": "numerator = 1, denominator = 6",
        "output": "0.1(6)"
      },
      {
        "input": "numerator = 1, denominator = 2147483647",
        "output": "Execution timed out"
      },
      {
        "input": "numerator = 4, denominator = 333",
        "output": "0.(012)"
      },
      {
        "input": "numerator = 22, denominator = 7",
        "output": "3.(142857)"
      },
      {
        "input": "numerator = -1, denominator = 1",
        "output": "-1"
      },
      {
        "input": "numerator = -1, denominator = 2",
        "output": "-0.5"
      },
      {
        "input": "numerator = 5, denominator = 2",
        "output": "2.5"
      },
      {
        "input": "numerator = 7, denominator = 6",
        "output": "1.1(6)"
      },
      {
        "input": "numerator = 1, denominator = 13",
        "output": "0.(076923)"
      },
      {
        "input": "numerator = 1, denominator = -2",
        "output": "-0.5"
      },
      {
        "input": "numerator = -1, denominator = -2",
        "output": "0.5"
      },
      {
        "input": "numerator = 2, denominator = 1",
        "output": "2"
      },
      {
        "input": "numerator = 11, denominator = 6",
        "output": "1.8(3)"
      },
      {
        "input": "numerator = 1, denominator = 2",
        "output": "0.5"
      },
      {
        "input": "numerator = 0, denominator = 1",
        "output": "0"
      },
      {
        "input": "numerator = -1, denominator = -1",
        "output": "1"
      },
      {
        "input": "numerator = 1, denominator = -1",
        "output": "-1"
      },
      {
        "input": "numerator = -50, denominator = 8",
        "output": "-6.25"
      },
      {
        "input": "numerator = -2147483648, denominator = 1",
        "output": "-2147483648"
      },
      {
        "input": "numerator = 1, denominator = 17",
        "output": "0.(0588235294117647)"
      },
      {
        "input": "numerator = 1, denominator = 3",
        "output": "0.(3)"
      },
      {
        "input": "numerator = 2, denominator = 3",
        "output": "0.(6)"
      },
      {
        "input": "numerator = 1, denominator = 7",
        "output": "0.(142857)"
      },
      {
        "input": "numerator = 1, denominator = 666",
        "output": "0.0(015)"
      },
      {
        "input": "numerator = 1, denominator = 997",
        "output": "0.(0010030090270812437311935807422266800401203610832497492477432296890672016048144433299899699097291875626880641925777331995987963891675025075225677031093279839518555667)"
      },
      {
        "input": "numerator = -2147483648, denominator = 2",
        "output": "-1073741824"
      },
      {
        "input": "numerator = 1000, denominator = 777",
        "output": "1.(287001)"
      },
      {
        "input": "numerator = 2147483647, denominator = 3",
        "output": "715827882.(3)"
      },
      {
        "input": "numerator = 7, denominator = 12",
        "output": "0.58(3)"
      },
      {
        "input": "numerator = 1, denominator = 999",
        "output": "0.(001)"
      },
      {
        "input": "numerator = 5, denominator = 20",
        "output": "0.25"
      },
      {
        "input": "numerator = 22, denominator = 3",
        "output": "7.(3)"
      },
      {
        "input": "numerator = 789, denominator = 321",
        "output": "2.(45794392523364485981308411214953271028037383177570093)"
      },
      {
        "input": "numerator = 111, denominator = 400",
        "output": "0.2775"
      },
      {
        "input": "numerator = -21, denominator = 6",
        "output": "-3.5"
      },
      {
        "input": "numerator = 29, denominator = 37",
        "output": "0.(783)"
      },
      {
        "input": "numerator = 1, denominator = 1000000000",
        "output": "0.000000001"
      },
      {
        "input": "numerator = 1, denominator = 10001",
        "output": "0.(00009999)"
      },
      {
        "input": "numerator = 1234567890, denominator = 100000000",
        "output": "12.3456789"
      },
      {
        "input": "numerator = 100, denominator = 999",
        "output": "0.(100)"
      },
      {
        "input": "numerator = 10, denominator = 16",
        "output": "0.625"
      },
      {
        "input": "numerator = 100, denominator = 101",
        "output": "0.(9900)"
      },
      {
        "input": "numerator = 111111111, denominator = 333333333",
        "output": "0.(3)"
      },
      {
        "input": "numerator = 123, denominator = 456",
        "output": "0.269(736842105263157894)"
      },
      {
        "input": "numerator = 500, denominator = 22",
        "output": "22.(72)"
      },
      {
        "input": "numerator = 1, denominator = 199",
        "output": "0.(005025125628140703517587939698492462311557788944723618090452261306532663316582914572864321608040201)"
      },
      {
        "input": "numerator = 1, denominator = 333",
        "output": "0.(003)"
      },
      {
        "input": "numerator = 1, denominator = 1001",
        "output": "0.(000999)"
      },
      {
        "input": "numerator = 1, denominator = 99",
        "output": "0.(01)"
      },
      {
        "input": "numerator = 123456789, denominator = 987654321",
        "output": "Execution timed out"
      },
      {
        "input": "numerator = 123456, denominator = 111111",
        "output": "1.(111105)"
      },
      {
        "input": "numerator = 5, denominator = 22",
        "output": "0.2(27)"
      },
      {
        "input": "numerator = 1, denominator = 1000",
        "output": "0.001"
      },
      {
        "input": "numerator = 77, denominator = 22",
        "output": "3.5"
      },
      {
        "input": "numerator = -22, denominator = 7",
        "output": "-3.(142857)"
      },
      {
        "input": "numerator = 10, denominator = -3",
        "output": "-3.(3)"
      },
      {
        "input": "numerator = 1, denominator = 1111111111",
        "output": "0.(0000000009)"
      },
      {
        "input": "numerator = 1000000000, denominator = 65537",
        "output": "Execution timed out"
      },
      {
        "input": "numerator = -1, denominator = -6",
        "output": "0.1(6)"
      },
      {
        "input": "numerator = 99, denominator = 77",
        "output": "1.(285714)"
      },
      {
        "input": "numerator = 1, denominator = 33333",
        "output": "0.(00003)"
      },
      {
        "input": "numerator = 111, denominator = 990",
        "output": "0.1(12)"
      },
      {
        "input": "numerator = -2, denominator = -3",
        "output": "0.(6)"
      },
      {
        "input": "numerator = 50, denominator = 22",
        "output": "2.(27)"
      },
      {
        "input": "numerator = 1, denominator = 100000",
        "output": "0.00001"
      },
      {
        "input": "numerator = 123456, denominator = 789012",
        "output": "0.(156469103131511307812808930662651518608082006357317759425712)"
      },
      {
        "input": "numerator = 987654321, denominator = 123456789",
        "output": "Execution timed out"
      },
      {
        "input": "numerator = 5, denominator = 12",
        "output": "0.41(6)"
      },
      {
        "input": "numerator = 100, denominator = 777",
        "output": "0.(128700)"
      },
      {
        "input": "numerator = 123456, denominator = 987654",
        "output": "0.(124999240624753203044790989557071606048271965688388848726375836072146723447685120497664161740852565777083877552260204484566457484098682332071757923321325079430650814961514862492330310007350752388994526423221087546853452727372136395944328681906821619717026408033582610914348547163277828065294121220589396691553924755025545383302249573231111300111172536131074242599128844716874532984223219872546458577599037719687258898359141966721139184370234920326349106063459470624327952906584694640025758008371352720689634224131122842614923849850251201331640432783140654520712719231633750280968841314873427333863883505762139372695296125971240940653305712324356505415864260155884550662478965305663724340710410730883487537133449568371109720610659198464239500877837785297280221616072025223408197607664222490872309533500598387694476000704700229027574433961691037549587203615841175148381923224125047840640548208178167657904488818958866161631502530238322327454756422795837408647157810326288356043715714207607117472313178501783013079479250830756519995868998657424563662983190469536902599493344835337071484548232478175555407055507293039870237957827336293884295512396041528713496831886470363102868008432102740433390640851958276886439988092996130223742322716254882782836904421993937148029573109611260623659702689403374056096568231384675200019440006318002053350667338966885164237678377245472604778596553043879739260915259797459434174316106652734662138765195098688407073732298962997162974077966575339136985219520196344063811820738841740123565540158800551610179273308263825185743185366535244123954340285160592677192620087601528470496752911444696219526271346038187462410925283550717153983075044499389462301575248011955603885571262810660413464634376006172202005965651938836880121986039645462884775437552017204405591431817215340594985693370350345363862243255229057949443833569245910004920751599244269754387670175992807197662339240260253084582252489232059000419175136231919275373764496473461353874940009355503040538488175008656877813485289382719049383691049699591152367124519315468777527352696389626326628556154280750141243795904233668875942384681275021414381959674136894094490580709438730567587434465916201422765462398775279601965870638907957645086234653026262233535225898948417158235576426562338632760055647018085280877716285257792708782630354354865165331178732633088105753634369931170227630323979855293452970372215370969995565248558705781579379013298179321908279620190876562034882661336864934481103706358704566578984138169844905199594189868111707136304819299066272196538463875000759375246796955209010442928393951728034311611151273624163927853276552314879502335838259147434222916122447739795515433542515901317667928242076678674920569349185038485137507669689992649247611005473576778912453146547272627863604055671318093178380282973591966417389085651452836722171934705878779410603308446075244974454616697750426768888699888827463868925757400871155283125467015776780127453541422400962280312741101640858033278860815629765079673650893936540529375672047093415305359974241991628647279310365775868877157385076150149748798668359567216859345479287280768366249719031158685126572666136116494237860627304703874028759059346694287675643494584135739844115449337521034694336275659289589269116512462866550431628890279389340801535760499122162214702719778383927974776591802392335777509127690466499401612305523999295299770972425566038308962450412796384158824851618076775874952159359451791821832342095511181041133838368497469761677672545243577204162591352842189673711643956284285792392882527686821498216986920520749169243480004131001342575436337016809530463097400506655164662928515451767521824444592944492706960129762042172663706115704487603958471286503168113529636897131991567897259566609359148041723113560011907003869776257677283745117217163095578006062851970426890388739376340297310596625943903431768615324799980559993681997946649332661033114835762321622754527395221403446956120260739084740202540565825683893347265337861234804901311592926267701037002837025922033424660863014780479803655936188179261158259876434459841199448389820726691736174814256814633464755876045659714839407322807379912398471529503247088555303780473728653961812537589074716449282846016924955500610537698424751988044396114428737189339586535365623993827797994034348061163119878013960354537115224562447982795594408568182784659405014306629649654636137756744770942050556166430754089995079248400755730245612329824007192802337660759739746915417747510767940999580824863768080724626235503526538646125059990644496959461511824991343122186514710617280950616308950300408847632875480684531222472647303610373673371443845719249858756204095766331124057615318724978585618040325863105905509419290561269432412565534083798577234537601224720398034129361092042354913765346973737766464774101051582841764423573437661367239944352981914719122283714742207291217369645645134834668821267366911894246365630068829772369676020144706547029627784629030004434751441294218420620986701820678091720379809123437965117338663135065518896293641295433421015861830155094800405810131888292863695180700933727803461536)"
      },
      {
        "input": "numerator = -5, denominator = 2",
        "output": "-2.5"
      },
      {
        "input": "numerator = 100, denominator = 77",
        "output": "1.(298701)"
      },
      {
        "input": "numerator = 1, denominator = 27",
        "output": "0.(037)"
      },
      {
        "input": "numerator = 100, denominator = 99",
        "output": "1.(01)"
      },
      {
        "input": "numerator = 2, denominator = 1000000007",
        "output": "Execution timed out"
      },
      {
        "input": "numerator = -1, denominator = -333",
        "output": "0.(003)"
      },
      {
        "input": "numerator = -1, denominator = 3",
        "output": "-0.(3)"
      },
      {
        "input": "numerator = 1, denominator = -2147483648",
        "output": "-0.0000000004656612873077392578125"
      },
      {
        "input": "numerator = 100, denominator = 33",
        "output": "3.(03)"
      },
      {
        "input": "numerator = 10, denominator = 3",
        "output": "3.(3)"
      },
      {
        "input": "numerator = 111, denominator = 999",
        "output": "0.(1)"
      },
      {
        "input": "numerator = 4, denominator = 11",
        "output": "0.(36)"
      },
      {
        "input": "numerator = 2147483647, denominator = 1",
        "output": "2147483647"
      },
      {
        "input": "numerator = 100, denominator = -3",
        "output": "-33.(3)"
      },
      {
        "input": "numerator = 1, denominator = 3333",
        "output": "0.(0003)"
      },
      {
        "input": "numerator = 1, denominator = 10007",
        "output": "0.()"
      },
      {
        "input": "numerator = 999, denominator = 77",
        "output": "12.(974025)"
      }
    ]
  },
  {
    "id": 2802,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Math",
      "String"
    ],
    "problemDescription": "We know that 4 and 7 are lucky digits. Also, a number is called lucky\u00a0if it contains only lucky digits.\nYou are given an integer k, return the kth\u00a0lucky number represented as a string.\n\u00a0\nExample 1:\n\nInput: k = 4\nOutput: \"47\"\nExplanation: The first lucky number is 4, the second one is 7, the third one is 44 and the fourth one is 47.\n\nExample 2:\n\nInput: k = 10\nOutput: \"477\"\nExplanation: Here are lucky numbers sorted in increasing order:\n4, 7, 44, 47, 74, 77, 444, 447, 474, 477. So the 10th lucky number is 477.\nExample 3:\n\nInput: k = 1000\nOutput: \"777747447\"\nExplanation: It can be shown that the 1000th lucky number is 777747447.\n\n\u00a0\nConstraints:\n\n1 <= k <= 109\n\n",
    "starterCode": "class Solution:\n    def kthLuckyNumber(self, k: int) -> str:\n        ",
    "testCases": [
      {
        "input": "k = 1073741823",
        "output": "444444444444444444444444444444"
      },
      {
        "input": "k = 4398046511103",
        "output": "444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 50",
        "output": "74477"
      },
      {
        "input": "k = 127",
        "output": "4444444"
      },
      {
        "input": "k = 6",
        "output": "77"
      },
      {
        "input": "k = 63",
        "output": "444444"
      },
      {
        "input": "k = 1048575",
        "output": "44444444444444444444"
      },
      {
        "input": "k = 1099511627775",
        "output": "4444444444444444444444444444444444444444"
      },
      {
        "input": "k = 281474976710655",
        "output": "444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 1",
        "output": "4"
      },
      {
        "input": "k = 140737488355327",
        "output": "44444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 17179869183",
        "output": "4444444444444444444444444444444444"
      },
      {
        "input": "k = 8191",
        "output": "4444444444444"
      },
      {
        "input": "k = 68719476735",
        "output": "444444444444444444444444444444444444"
      },
      {
        "input": "k = 262143",
        "output": "444444444444444444"
      },
      {
        "input": "k = 65535",
        "output": "4444444444444444"
      },
      {
        "input": "k = 35184372088831",
        "output": "444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 16383",
        "output": "44444444444444"
      },
      {
        "input": "k = 750",
        "output": "477747777"
      },
      {
        "input": "k = 1125899906842623",
        "output": "44444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 2097151",
        "output": "444444444444444444444"
      },
      {
        "input": "k = 288230376151711743",
        "output": "4444444444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 100",
        "output": "744747"
      },
      {
        "input": "k = 32767",
        "output": "444444444444444"
      },
      {
        "input": "k = 2251799813685247",
        "output": "444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 1000000000",
        "output": "77477744774747744747444444447"
      },
      {
        "input": "k = 131071",
        "output": "44444444444444444"
      },
      {
        "input": "k = 2",
        "output": "7"
      },
      {
        "input": "k = 8388607",
        "output": "44444444444444444444444"
      },
      {
        "input": "k = 17592186044415",
        "output": "44444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 4503599627370495",
        "output": "4444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 9",
        "output": "474"
      },
      {
        "input": "k = 10",
        "output": "477"
      },
      {
        "input": "k = 562949953421311",
        "output": "4444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 549755813887",
        "output": "444444444444444444444444444444444444444"
      },
      {
        "input": "k = 36028797018963967",
        "output": "4444444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 144115188075855871",
        "output": "444444444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 4095",
        "output": "444444444444"
      },
      {
        "input": "k = 15",
        "output": "4444"
      },
      {
        "input": "k = 2199023255551",
        "output": "44444444444444444444444444444444444444444"
      },
      {
        "input": "k = 18014398509481983",
        "output": "444444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 16777215",
        "output": "444444444444444444444444"
      },
      {
        "input": "k = 2147483647",
        "output": "4444444444444444444444444444444"
      },
      {
        "input": "k = 31",
        "output": "44444"
      },
      {
        "input": "k = 8589934591",
        "output": "444444444444444444444444444444444"
      },
      {
        "input": "k = 250",
        "output": "7777477"
      },
      {
        "input": "k = 274877906943",
        "output": "44444444444444444444444444444444444444"
      },
      {
        "input": "k = 4294967295",
        "output": "44444444444444444444444444444444"
      },
      {
        "input": "k = 16",
        "output": "4447"
      },
      {
        "input": "k = 137438953471",
        "output": "4444444444444444444444444444444444444"
      },
      {
        "input": "k = 268435455",
        "output": "4444444444444444444444444444"
      },
      {
        "input": "k = 9007199254740991",
        "output": "44444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 8796093022207",
        "output": "4444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 2047",
        "output": "44444444444"
      },
      {
        "input": "k = 524287",
        "output": "4444444444444444444"
      },
      {
        "input": "k = 5",
        "output": "74"
      },
      {
        "input": "k = 134217727",
        "output": "444444444444444444444444444"
      },
      {
        "input": "k = 4194303",
        "output": "4444444444444444444444"
      },
      {
        "input": "k = 20",
        "output": "4747"
      },
      {
        "input": "k = 1152921504606846975",
        "output": "444444444444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 576460752303423487",
        "output": "44444444444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 999",
        "output": "777747444"
      },
      {
        "input": "k = 500",
        "output": "77774747"
      },
      {
        "input": "k = 70368744177663",
        "output": "4444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 4611686018427387903",
        "output": "44444444444444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 33554431",
        "output": "4444444444444444444444444"
      },
      {
        "input": "k = 7",
        "output": "444"
      },
      {
        "input": "k = 4",
        "output": "47"
      },
      {
        "input": "k = 2305843009213693951",
        "output": "4444444444444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 255",
        "output": "44444444"
      },
      {
        "input": "k = 3",
        "output": "44"
      },
      {
        "input": "k = 67108863",
        "output": "44444444444444444444444444"
      },
      {
        "input": "k = 8",
        "output": "447"
      },
      {
        "input": "k = 34359738367",
        "output": "44444444444444444444444444444444444"
      },
      {
        "input": "k = 72057594037927935",
        "output": "44444444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 1023",
        "output": "4444444444"
      },
      {
        "input": "k = 9223372036854775807",
        "output": "444444444444444444444444444444444444444444444444444444444444444"
      },
      {
        "input": "k = 511",
        "output": "444444444"
      },
      {
        "input": "k = 1000",
        "output": "777747447"
      },
      {
        "input": "k = 536870911",
        "output": "44444444444444444444444444444"
      },
      {
        "input": "k = 2048",
        "output": "44444444447"
      },
      {
        "input": "k = 99999999",
        "output": "47777747477774444744444444"
      },
      {
        "input": "k = 1024",
        "output": "4444444447"
      },
      {
        "input": "k = 67108864",
        "output": "44444444444444444444444447"
      },
      {
        "input": "k = 100000000",
        "output": "47777747477774444744444447"
      },
      {
        "input": "k = 999999",
        "output": "7774744447447444444"
      },
      {
        "input": "k = 9999999",
        "output": "44774447447477474444444"
      },
      {
        "input": "k = 50000000",
        "output": "4777774747777444474444447"
      },
      {
        "input": "k = 12345",
        "output": "7444444777474"
      },
      {
        "input": "k = 1048576",
        "output": "44444444444444444447"
      },
      {
        "input": "k = 65536",
        "output": "4444444444444447"
      },
      {
        "input": "k = 98304",
        "output": "7444444444444447"
      },
      {
        "input": "k = 5000",
        "output": "447774447447"
      },
      {
        "input": "k = 123",
        "output": "777744"
      },
      {
        "input": "k = 524288",
        "output": "4444444444444444447"
      },
      {
        "input": "k = 999999999",
        "output": "77477744774747744747444444444"
      },
      {
        "input": "k = 312500000",
        "output": "4474747444444747777744744447"
      },
      {
        "input": "k = 134217728",
        "output": "444444444444444444444444447"
      },
      {
        "input": "k = 800000",
        "output": "7444477474744444447"
      },
      {
        "input": "k = 512",
        "output": "444444447"
      },
      {
        "input": "k = 10000000",
        "output": "44774447447477474444447"
      },
      {
        "input": "k = 32768",
        "output": "444444444444447"
      },
      {
        "input": "k = 131072",
        "output": "44444444444444447"
      },
      {
        "input": "k = 123456",
        "output": "7774447447444447"
      },
      {
        "input": "k = 500000000",
        "output": "7747774477474774474744444447"
      },
      {
        "input": "k = 10000",
        "output": "4477744474447"
      },
      {
        "input": "k = 1000000",
        "output": "7774744447447444447"
      },
      {
        "input": "k = 500000",
        "output": "777474444744744447"
      },
      {
        "input": "k = 987654321",
        "output": "77474774777744774744474774474"
      },
      {
        "input": "k = 100000",
        "output": "7444477474744447"
      },
      {
        "input": "k = 50000",
        "output": "744447747474447"
      }
    ]
  },
  {
    "id": 1471,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "problemDescription": "Given an array of integers arr and an integer k.\nA value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the centre of the array.\nIf |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j].\nReturn a list of the strongest k values in the array. return the answer in any arbitrary order.\nThe centre is the middle value in an ordered integer list. More formally, if the length of the list is n, the centre is the element in position ((n - 1) / 2) in the sorted list (0-indexed).\n\nFor arr = [6, -3, 7, 2, 11], n = 5 and the centre is obtained by sorting the array arr = [-3, 2, 6, 7, 11] and the centre is arr[m] where m = ((5 - 1) / 2) = 2. The centre is 6.\nFor arr = [-7, 22, 17,\u20093], n = 4 and the centre is obtained by sorting the array arr = [-7, 3, 17, 22] and the centre is arr[m] where m = ((4 - 1) / 2) = 1. The centre is 3.\n\n\n\n\u00a0\n\n\n\u00a0\n\n\u00a0\n\u00a0\n\n\n\n\n\n\u00a0\nExample 1:\n\nInput: arr = [1,2,3,4,5], k = 2\nOutput: [5,1]\nExplanation: Centre is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.\nPlease note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1.\n\nExample 2:\n\nInput: arr = [1,1,3,5,5], k = 2\nOutput: [5,5]\nExplanation: Centre is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].\n\nExample 3:\n\nInput: arr = [6,7,11,7,6,8], k = 5\nOutput: [11,8,6,6,7]\nExplanation: Centre is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].\nAny permutation of [11,8,6,6,7] is accepted.\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 105\n-105 <= arr[i] <= 105\n1 <= k <= arr.length\n\n",
    "starterCode": "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "arr = [1,2,3,4,5], k = 2",
        "output": "[5, 1]"
      },
      {
        "input": "arr = [100000,-100000,50000,-50000,0], k = 3",
        "output": "[100000, -100000, 50000]"
      },
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8,9], k = 3",
        "output": "[9, 8, 0]"
      },
      {
        "input": "arr = [1,1,3,5,5], k = 2",
        "output": "[5, 5]"
      },
      {
        "input": "arr = [1,3,2,4,5], k = 3",
        "output": "[5, 1, 4]"
      },
      {
        "input": "arr = [-100000, 100000], k = 1",
        "output": "[100000]"
      },
      {
        "input": "arr = [6,-3,7,2,11], k = 4",
        "output": "[-3, 11, 2, 7]"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10], k = 4",
        "output": "[10, 9, 1, 8]"
      },
      {
        "input": "arr = [-7,22,17,3], k = 2",
        "output": "[22, 17]"
      },
      {
        "input": "arr = [6,7,11,7,6,8], k = 5",
        "output": "[11, 8, 6, 6, 7]"
      },
      {
        "input": "arr = [5,3,1,2,4], k = 3",
        "output": "[5, 1, 4]"
      },
      {
        "input": "arr = [0,0,0,0,0], k = 1",
        "output": "[0]"
      },
      {
        "input": "arr = [-7,22,17,3], k = 3",
        "output": "[22, 17, -7]"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1], k = 3",
        "output": "[10, 9, 1]"
      },
      {
        "input": "arr = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15], k = 6",
        "output": "[-1, -15, -2, -14, -3, -13]"
      },
      {
        "input": "arr = [-99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991, -99990], k = 5",
        "output": "[-99990, -99991, -99999, -99992, -99998]"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110], k = 7",
        "output": "[110, 10, 100, 20, 90, 30, 80]"
      },
      {
        "input": "arr = [-5, 5, -10, 10, -15, 15, -20, 20, -25, 25, -30, 30, -35, 35], k = 6",
        "output": "[35, 30, 25, -35, 20, -30]"
      },
      {
        "input": "arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 3",
        "output": "[1, 1, 1]"
      },
      {
        "input": "arr = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 5",
        "output": "[-1, -2, -10, -3, -9]"
      },
      {
        "input": "arr = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 4",
        "output": "[-1, -2, -10, -3]"
      },
      {
        "input": "arr = [1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10], k = 10",
        "output": "[1, 10, 10, 10, 2, 2, 9, 9, 3, 8]"
      },
      {
        "input": "arr = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96, 6, 95, 7, 94, 8, 93, 9, 92, 10, 91], k = 8",
        "output": "[100, 99, 98, 97, 96, 95, 94, 93]"
      },
      {
        "input": "arr = [-5, -3, -1, 1, 3, 5, -4, -2, 0, 2, 4, 6], k = 5",
        "output": "[6, 5, -5, 4, -4]"
      },
      {
        "input": "arr = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], k = 7",
        "output": "[10000, 9000, 1000, 8000, 2000, 7000, 3000]"
      },
      {
        "input": "arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "arr = [-10, -5, 0, 5, 10, 15], k = 3",
        "output": "[15, 10, -10]"
      },
      {
        "input": "arr = [1, 3, 2, 4, 6, 5, 7, 8, 10, 9, 11], k = 8",
        "output": "[11, 1, 10, 2, 9, 3, 8, 4]"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 5",
        "output": "[100, 90, 10, 80, 20]"
      },
      {
        "input": "arr = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], k = 6",
        "output": "[100, 90, 10, 80, 20, 70]"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], k = 8",
        "output": "[29, 1, 27, 3, 25, 5, 23, 7]"
      },
      {
        "input": "arr = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], k = 3",
        "output": "[1000, 900, 100]"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, -100, -200, -300, -400, -500, -600, -700, -800, -900, -1000], k = 10",
        "output": "[1000, 900, 800, -1000, 700, -900, 600, -800, 500, -700]"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 5",
        "output": "[1000, 900, 100, 800, 200]"
      },
      {
        "input": "arr = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9], k = 10",
        "output": "[9, -9, 8, -8, 7, -7, 6, -6, 5, -5]"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130], k = 8",
        "output": "[130, 10, 120, 20, 110, 30, 100, 40]"
      },
      {
        "input": "arr = [1000, -1000, 500, -500, 250, -250, 750, -750, 375, -375], k = 5",
        "output": "[1000, 750, 500, -1000, 375]"
      },
      {
        "input": "arr = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 5",
        "output": "[5, 5, 5, 5, 5]"
      },
      {
        "input": "arr = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000], k = 6",
        "output": "[13000, 1000, 12000, 2000, 11000, 3000]"
      },
      {
        "input": "arr = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 3",
        "output": "[5, 5, 5]"
      },
      {
        "input": "arr = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 10",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "arr = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991], k = 5",
        "output": "[100000, 99999, 99991, 99998, 99992]"
      },
      {
        "input": "arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 6",
        "output": "[19, 17, 1, 15, 3, 13]"
      },
      {
        "input": "arr = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90], k = 8",
        "output": "[99, 98, 90, 97, 91, 96, 92, 95]"
      },
      {
        "input": "arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5], k = 8",
        "output": "[1, 2, 2, 5, 5, 5, 5, 5]"
      },
      {
        "input": "arr = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250], k = 7",
        "output": "[100000, -100000, 50000, -50000, 25000, 12500, -25000]"
      },
      {
        "input": "arr = [-10, -20, 15, 10, 0, 5, -5], k = 4",
        "output": "[-20, 15, 10, -10]"
      },
      {
        "input": "arr = [-1, 1, -2, 2, -3, 3, -4, 4, -5, 5], k = 4",
        "output": "[5, 4, 3, -5]"
      },
      {
        "input": "arr = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5], k = 9",
        "output": "[5, 5, 5, 1, 1, 1, 4, 4, 4]"
      },
      {
        "input": "arr = [-1000, -2000, -3000, -4000, -5000, -6000, -7000, -8000, -9000, -10000, -11000, -12000, -13000], k = 7",
        "output": "[-1000, -13000, -2000, -12000, -3000, -11000, -4000]"
      },
      {
        "input": "arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "arr = [1, 10, 100, 1000, 10000, 100000, -1, -10, -100, -1000, -10000, -100000], k = 6",
        "output": "[100000, -100000, 10000, -10000, 1000, -1000]"
      },
      {
        "input": "arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 6",
        "output": "[10, 9, 1, 8, 2, 7]"
      },
      {
        "input": "arr = [-500, -300, -100, 100, 300, 500, 700, 900, 1100, 1300], k = 8",
        "output": "[1300, 1100, -500, 900, -300, 700, -100, 500]"
      },
      {
        "input": "arr = [-5, -5, -5, -5, -5, 5, 5, 5, 5, 5], k = 8",
        "output": "[5, 5, 5, 5, 5, -5, -5, -5]"
      },
      {
        "input": "arr = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 7",
        "output": "[-1, -2, -10, -3, -9, -4, -8]"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 10",
        "output": "[20, 19, 1, 18, 2, 17, 3, 16, 4, 15]"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 5",
        "output": "[19, 17, 1, 15, 3]"
      },
      {
        "input": "arr = [23, 45, 12, 67, 34, 89, 90, 21, 56, 78, 9, 34, 56, 78, 90], k = 10",
        "output": "[9, 12, 21, 90, 90, 89, 23, 78, 78, 34]"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 7",
        "output": "[1000, 900, 100, 800, 200, 700, 300]"
      },
      {
        "input": "arr = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 4",
        "output": "[5, 5, 5, 5]"
      },
      {
        "input": "arr = [-10, -5, 0, 5, 10, 15, 20, 25, 30], k = 5",
        "output": "[30, -10, 25, -5, 20]"
      },
      {
        "input": "arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 5",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 7",
        "output": "[15, 1, 14, 2, 13, 3, 12]"
      },
      {
        "input": "arr = [39, 37, 35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1], k = 8",
        "output": "[39, 37, 1, 35, 3, 33, 5, 31]"
      },
      {
        "input": "arr = [9, 3, 7, -1, 2, 5, 8, -4, 6], k = 5",
        "output": "[-4, -1, 9, 8, 2]"
      },
      {
        "input": "arr = [-100, 100, -50, 50, 0], k = 3",
        "output": "[100, -100, 50]"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 10",
        "output": "[150, 10, 140, 20, 130, 30, 120, 40, 110, 50]"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], k = 7",
        "output": "[29, 1, 27, 3, 25, 5, 23]"
      },
      {
        "input": "arr = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40], k = 6",
        "output": "[40, -20, 35, -15, 30, -10]"
      },
      {
        "input": "arr = [-50, -40, -30, -20, -10, 10, 20, 30, 40, 50], k = 6",
        "output": "[50, 40, 30, -50, 20, -40]"
      },
      {
        "input": "arr = [10, -20, 30, -40, 50, -60, 70], k = 5",
        "output": "[-60, 70, -40, 50, -20]"
      },
      {
        "input": "arr = [-1, -2, -3, -4, -5, 5, 4, 3, 2, 1], k = 5",
        "output": "[5, 4, 3, -5, 2]"
      },
      {
        "input": "arr = [5, 3, 1, 2, 4, 6, 8, 7, 9, 10], k = 4",
        "output": "[10, 9, 1, 8]"
      },
      {
        "input": "arr = [-1, 1, -2, 2, -3, 3, -4, 4, -5, 5], k = 6",
        "output": "[5, 4, 3, -5, 2, -4]"
      },
      {
        "input": "arr = [100000, -100000, 99999, -99999, 0, 1, -1], k = 4",
        "output": "[100000, -100000, 99999, -99999]"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 4",
        "output": "[1000, 900, 100, 800]"
      },
      {
        "input": "arr = [-29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1], k = 5",
        "output": "[-1, -29, -3, -27, -5]"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 10",
        "output": "[15, 1, 14, 2, 13, 3, 12, 4, 11, 5]"
      },
      {
        "input": "arr = [-100, 0, 50, 100, 200], k = 3",
        "output": "[200, -100, 100]"
      },
      {
        "input": "arr = [-1, 0, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10], k = 10",
        "output": "[10, -10, 9, -9, 8, -8, 7, -7, 6, -6]"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 7",
        "output": "[150, 10, 140, 20, 130, 30, 120]"
      },
      {
        "input": "arr = [-100000, 100000, 0, 50000, -50000], k = 3",
        "output": "[100000, -100000, 50000]"
      },
      {
        "input": "arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 5",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500], k = 12",
        "output": "[1500, 100, 1400, 200, 1300, 300, 1200, 400, 1100, 500, 1000, 600]"
      },
      {
        "input": "arr = [-10, -20, -30, 0, 10, 20, 30, 40, 50, 60], k = 4",
        "output": "[60, 50, -30, 40]"
      },
      {
        "input": "arr = [10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40], k = 15",
        "output": "[40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 10, 10, 10, 10, 10]"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], k = 10",
        "output": "[29, 1, 27, 3, 25, 5, 23, 7, 21, 9]"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], k = 15",
        "output": "[39, 37, 1, 35, 3, 33, 5, 31, 7, 29, 9, 27, 11, 25, 13]"
      },
      {
        "input": "arr = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 7",
        "output": "[9, 8, -10, 7, -9, 6, -8]"
      }
    ]
  },
  {
    "id": 881,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "problemDescription": "You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.\nReturn the minimum number of boats to carry every given person.\n\u00a0\nExample 1:\n\nInput: people = [1,2], limit = 3\nOutput: 1\nExplanation: 1 boat (1, 2)\n\nExample 2:\n\nInput: people = [3,2,2,1], limit = 3\nOutput: 3\nExplanation: 3 boats (1, 2), (2) and (3)\n\nExample 3:\n\nInput: people = [3,5,3,4], limit = 5\nOutput: 4\nExplanation: 4 boats (3), (3), (4), (5)\n\n\u00a0\nConstraints:\n\n1 <= people.length <= 5 * 104\n1 <= people[i] <= limit <= 3 * 104\n\n",
    "starterCode": "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        ",
    "testCases": [
      {
        "input": "people = [1,2,3,4,5,6,7,8,9,10], limit = 11",
        "output": "5"
      },
      {
        "input": "people = [1,2,3,4,5,6,7,8,9,10], limit = 15",
        "output": "5"
      },
      {
        "input": "people = [3,2,2,1], limit = 3",
        "output": "3"
      },
      {
        "input": "people = [5,5,5,5,5], limit = 10",
        "output": "3"
      },
      {
        "input": "people = [10,20,30,40,50], limit = 50",
        "output": "3"
      },
      {
        "input": "people = [3,5,3,4], limit = 5",
        "output": "4"
      },
      {
        "input": "people = [1,2], limit = 3",
        "output": "1"
      },
      {
        "input": "people = [30,20,10], limit = 50",
        "output": "2"
      },
      {
        "input": "people = [1,3,5,7,9], limit = 10",
        "output": "3"
      },
      {
        "input": "people = [1,1,1,1,1,1,1,1,1,1], limit = 2",
        "output": "5"
      },
      {
        "input": "people = [3,2,3,2,2], limit = 6",
        "output": "3"
      },
      {
        "input": "people = [1,1,1,1,1,1], limit = 2",
        "output": "3"
      },
      {
        "input": "people = [5,5,5,5,5,5,5,5,5,5], limit = 10",
        "output": "5"
      },
      {
        "input": "people = [10,20,30,40,50], limit = 60",
        "output": "3"
      },
      {
        "input": "people = [3,3,3,3,3,3], limit = 6",
        "output": "3"
      },
      {
        "input": "people = [1,2,3,4,5], limit = 5",
        "output": "3"
      },
      {
        "input": "people = [1,1,2,2,3,3], limit = 4",
        "output": "3"
      },
      {
        "input": "people = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18], limit = 19",
        "output": "18"
      },
      {
        "input": "people = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], limit = 10",
        "output": "5"
      },
      {
        "input": "people = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], limit = 30",
        "output": "16"
      },
      {
        "input": "people = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], limit = 2",
        "output": "15"
      },
      {
        "input": "people = [1,99,2,98,3,97,4,96,5,95,6,94,7,93,8,92,9,91,10,90], limit = 100",
        "output": "10"
      },
      {
        "input": "people = [1,10,10,10,10,10,10,10,10,10,10,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], limit = 11",
        "output": "18"
      },
      {
        "input": "people = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], limit = 6",
        "output": "10"
      },
      {
        "input": "people = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], limit = 30",
        "output": "16"
      },
      {
        "input": "people = [1, 10, 100, 1000, 10000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000], limit = 10000",
        "output": "8"
      },
      {
        "input": "people = [15,20,15,25,30,35,5,10], limit = 40",
        "output": "4"
      },
      {
        "input": "people = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], limit = 11",
        "output": "10"
      },
      {
        "input": "people = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], limit = 30",
        "output": "10"
      },
      {
        "input": "people = [1,2,2,3,3,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10], limit = 15",
        "output": "26"
      },
      {
        "input": "people = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], limit = 20",
        "output": "16"
      },
      {
        "input": "people = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], limit = 150",
        "output": "5"
      },
      {
        "input": "people = [29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], limit = 29",
        "output": "20"
      },
      {
        "input": "people = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], limit = 2",
        "output": "49"
      },
      {
        "input": "people = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], limit = 15",
        "output": "8"
      },
      {
        "input": "people = [10,20,30,40,50,60,70,80,90,100], limit = 150",
        "output": "5"
      },
      {
        "input": "people = [30, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], limit = 40",
        "output": "10"
      },
      {
        "input": "people = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10], limit = 10",
        "output": "34"
      },
      {
        "input": "people = [30000, 30000, 30000, 30000, 30000, 30000, 30000, 30000, 30000, 30000], limit = 30000",
        "output": "10"
      },
      {
        "input": "people = [20, 40, 20, 40, 10, 30, 20, 10, 50, 30], limit = 60",
        "output": "5"
      },
      {
        "input": "people = [1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9], limit = 10",
        "output": "15"
      },
      {
        "input": "people = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], limit = 6",
        "output": "8"
      },
      {
        "input": "people = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], limit = 6",
        "output": "8"
      },
      {
        "input": "people = [15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000], limit = 30000",
        "output": "8"
      },
      {
        "input": "people = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], limit = 2",
        "output": "10"
      },
      {
        "input": "people = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], limit = 4",
        "output": "10"
      },
      {
        "input": "people = [30,40,50,20,10,60], limit = 80",
        "output": "3"
      },
      {
        "input": "people = [30000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], limit = 30000",
        "output": "11"
      },
      {
        "input": "people = [2,4,6,8,10,12,14,16,18,20], limit = 22",
        "output": "5"
      },
      {
        "input": "people = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], limit = 5",
        "output": "20"
      },
      {
        "input": "people = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10], limit = 11",
        "output": "15"
      },
      {
        "input": "people = [1,2,2,3,4,5,5,6,7,8,9,10], limit = 12",
        "output": "6"
      },
      {
        "input": "people = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], limit = 21",
        "output": "10"
      },
      {
        "input": "people = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], limit = 20",
        "output": "8"
      },
      {
        "input": "people = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], limit = 26",
        "output": "13"
      },
      {
        "input": "people = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], limit = 10",
        "output": "15"
      },
      {
        "input": "people = [5, 1, 4, 2, 3, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5], limit = 10",
        "output": "8"
      },
      {
        "input": "people = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71], limit = 80",
        "output": "10"
      },
      {
        "input": "people = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], limit = 30",
        "output": "10"
      },
      {
        "input": "people = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], limit = 10",
        "output": "8"
      },
      {
        "input": "people = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], limit = 3",
        "output": "41"
      },
      {
        "input": "people = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], limit = 21",
        "output": "10"
      },
      {
        "input": "people = [30,40,50,20,30,40,50,20,30,40,50], limit = 100",
        "output": "6"
      },
      {
        "input": "people = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], limit = 16",
        "output": "8"
      },
      {
        "input": "people = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], limit = 11",
        "output": "10"
      },
      {
        "input": "people = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], limit = 20",
        "output": "11"
      },
      {
        "input": "people = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], limit = 10",
        "output": "8"
      },
      {
        "input": "people = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5], limit = 6",
        "output": "11"
      },
      {
        "input": "people = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], limit = 2",
        "output": "67"
      },
      {
        "input": "people = [1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9], limit = 10",
        "output": "10"
      },
      {
        "input": "people = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250], limit = 300",
        "output": "13"
      },
      {
        "input": "people = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], limit = 190",
        "output": "5"
      },
      {
        "input": "people = [1,2,2,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17], limit = 18",
        "output": "17"
      },
      {
        "input": "people = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10], limit = 10",
        "output": "22"
      },
      {
        "input": "people = [3,6,7,9,10,12,13,15,18,20], limit = 25",
        "output": "5"
      },
      {
        "input": "people = [3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23], limit = 25",
        "output": "11"
      },
      {
        "input": "people = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], limit = 20",
        "output": "11"
      },
      {
        "input": "people = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], limit = 25",
        "output": "13"
      },
      {
        "input": "people = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], limit = 20",
        "output": "11"
      },
      {
        "input": "people = [1,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], limit = 11",
        "output": "11"
      },
      {
        "input": "people = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], limit = 6",
        "output": "133"
      },
      {
        "input": "people = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], limit = 110",
        "output": "5"
      },
      {
        "input": "people = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], limit = 10",
        "output": "19"
      },
      {
        "input": "people = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], limit = 2",
        "output": "16"
      },
      {
        "input": "people = [15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000], limit = 30000",
        "output": "10"
      },
      {
        "input": "people = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], limit = 30",
        "output": "11"
      },
      {
        "input": "people = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], limit = 31",
        "output": "15"
      },
      {
        "input": "people = [15,20,25,30,35,40,45,50,55,60], limit = 80",
        "output": "5"
      },
      {
        "input": "people = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], limit = 25",
        "output": "13"
      }
    ]
  },
  {
    "id": 1080,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree and an integer limit, delete all insufficient nodes in the tree simultaneously, and return the root of the resulting binary tree.\nA node is insufficient if every root to leaf path intersecting this node has a sum strictly less than limit.\nA leaf is a node with no children.\n\u00a0\nExample 1:\n\n\nInput: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1\nOutput: [1,2,3,4,null,null,7,8,9,null,14]\n\nExample 2:\n\n\nInput: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22\nOutput: [5,4,8,11,null,17,4,7,null,null,null,5]\n\nExample 3:\n\n\nInput: root = [1,2,-3,-5,null,4,null], limit = -1\nOutput: [1,null,-3,4]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 5000].\n-105 <= Node.val <= 105\n-109 <= limit <= 109\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sufficientSubset(self, root: Optional[TreeNode], limit: int) -> Optional[TreeNode]:\n        ",
    "testCases": [
      {
        "input": "limit",
        "output": "Error: Solution.sufficientSubset() missing 2 required positional arguments: 'root' and 'limit'"
      },
      {
        "input": "root",
        "output": "Error: Solution.sufficientSubset() missing 2 required positional arguments: 'root' and 'limit'"
      },
      {
        "input": "root = [1,-2,-3,-4,null,null,-5], limit = -2",
        "output": "None"
      },
      {
        "input": "root = [1,-10,20,100,-100,30,-30], limit = 50",
        "output": "[1, -10, 20, 100, None, 30]"
      },
      {
        "input": "root = [1,2], limit = 3",
        "output": "[1, 2]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], limit = 30",
        "output": "None"
      },
      {
        "input": "root = [10,-10,10,null,-10,null,-10,null,-10,null,-10], limit = 8",
        "output": "None"
      },
      {
        "input": "root = [2,-2,-3], limit = -2",
        "output": "[2, -2, -3]"
      },
      {
        "input": "root = [10,-10,5,null,-2,null,6], limit = 8",
        "output": "[10, None, 5, None, 6]"
      },
      {
        "input": "root = [1,null,2,null,3], limit = 6",
        "output": "[1, None, 2, None, 3]"
      },
      {
        "input": "root = [-10,-5,-3,-6,-20], limit = -15",
        "output": "[-10, None, -3]"
      },
      {
        "input": "root = [1,2,-3,-5,null,4,null], limit = -1",
        "output": "[1, None, -3, 4]"
      },
      {
        "input": "root = [-5,-10,-3,-1,-4,-2], limit = -13",
        "output": "[-5, None, -3, -2]"
      },
      {
        "input": "root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 28",
        "output": "[5, None, 8, 17]"
      },
      {
        "input": "root = [1,null,-2,-3,-4,-5,-6], limit = -1",
        "output": "None"
      },
      {
        "input": "root = [1,null,-2,null,-3], limit = -5",
        "output": "[1, None, -2, None, -3]"
      },
      {
        "input": "root = [1,null,-2,-3,-4], limit = -1",
        "output": "None"
      },
      {
        "input": "root = [2,-5,-2], limit = -4",
        "output": "[2, -5, -2]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,8,16,20,null,null,null,null,null,19], limit = 30",
        "output": "[10, 5, 15, None, 7, None, 18, None, 8, 16, 20, None, 19]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], limit = 5",
        "output": "[1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "root = [1,-10,10,-100,100,-1000,1000], limit = 0",
        "output": "[1, -10, 10, None, 100, None, 1000]"
      },
      {
        "input": "root = [1], limit = 1",
        "output": "[1]"
      },
      {
        "input": "root = [1,-1,-2,-3,-4,null,null,null,null,null], limit = -6",
        "output": "[1, -1, -2, -3, -4]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], limit = 15",
        "output": "None"
      },
      {
        "input": "root = [10,5,15,3,7,null,18], limit = 15",
        "output": "[10, 5, 15, 3, 7, None, 18]"
      },
      {
        "input": "root = [1,2,3], limit = 7",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1",
        "output": "[1, 2, 3, 4, None, None, 7, 8, 9, None, 14]"
      },
      {
        "input": "root = [1,null,-2,-3,null,-4,-5,null,-6,null,-7,null,-8,null,-9], limit = 0",
        "output": "None"
      },
      {
        "input": "root = [100,50,150,25,75,null,200], limit = 150",
        "output": "[100, 50, 150, 25, 75, None, 200]"
      },
      {
        "input": "root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22",
        "output": "[5, 4, 8, 11, None, 17, 4, 7, None, None, None, 5]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], limit = 10",
        "output": "[1, None, 3, 6, 7]"
      },
      {
        "input": "root = [5,-6,-6], limit = 0",
        "output": "None"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,18,23,27,32,38,1,3,6,8,11,13,17,19,22,26,28,31,33,37,39,40], limit = 50",
        "output": "[20, 10, 30, 5, 15, 25, 35, None, 7, 12, 18, 23, 27, 32, 38, None, 8, 11, 13, 17, 19, 22, 26, 28, 31, 33, 37, 39, 40]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5], limit = 14",
        "output": "[1, None, 2, None, 3, None, 4, None, 5]"
      },
      {
        "input": "root = [1,null,-2,null,-3,null,-4,-5,null], limit = -1",
        "output": "None"
      },
      {
        "input": "root = [5,-6,6,5,9,-6,-3,2,-5,2,2,-1,-6,-6,-6], limit = 2",
        "output": "[5, -6, 6, 5, 9, -6, -3, 2, None, 2, 2, -1, None, -6, -6]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], limit = 3",
        "output": "[1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "root = [1,2,3,4,5], limit = 8",
        "output": "[1, 2, None, None, 5]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5], limit = 6",
        "output": "[1, None, 2, None, 3, None, 4, None, 5]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9], limit = 15",
        "output": "[1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9]"
      },
      {
        "input": "root = [5,3,8,2,4,7,9,1,6,null,null,null,null,null,null,null,10], limit = 20",
        "output": "[5, 3, 8, 2, None, 7, 9, 1, None, None, None, None, None, None, 10]"
      },
      {
        "input": "root = [1], limit = 2",
        "output": "None"
      },
      {
        "input": "root = [10,5,15,3,7,null,18], limit = 22",
        "output": "[10, 5, 15, None, 7, None, 18]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18], limit = 25",
        "output": "[10, None, 15, None, 18]"
      },
      {
        "input": "root = [1,2,3,4,5], limit = 9",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5], limit = 15",
        "output": "[1, None, 2, None, 3, None, 4, None, 5]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], limit = 10",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4], limit = 6",
        "output": "[1, None, 2, None, 3, None, 4]"
      },
      {
        "input": "root = [1,null,-2,-3,-4,null,-5,-6,null,-7,null,-8,null,-9,null,-10,null,-11,null,-12,-13,null,-14], limit = -3",
        "output": "None"
      },
      {
        "input": "root = [1,2,3], limit = 6",
        "output": "None"
      },
      {
        "input": "root = [10,-10,10,null,null,null,-10,null,-10], limit = 0",
        "output": "[10, -10, 10, None, None, None, -10, None, -10]"
      },
      {
        "input": "root = [1,-2,-3,4,5,null,-6,-7,null,-8,null,9,null,-10,null], limit = -1",
        "output": "[1, None, -3, None, -6, 9]"
      },
      {
        "input": "root = [-5,-6,-7], limit = -15",
        "output": "[-5, -6, -7]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,null,null,6,9], limit = 25",
        "output": "[10, 5, 15, None, 7, None, 18, 6, 9]"
      },
      {
        "input": "root = [10,-10,10,null,null,-10,null,-10,null], limit = 8",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], limit = 20",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,-5,null,4], limit = 0",
        "output": "[1, None, 3, None, 4]"
      },
      {
        "input": "root = [1,2,3], limit = 5",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3], limit = 4",
        "output": "[1, None, 2, None, 3]"
      },
      {
        "input": "root = [1,null,2,null,3], limit = 5",
        "output": "[1, None, 2, None, 3]"
      },
      {
        "input": "root = [10,5,10], limit = 21",
        "output": "None"
      },
      {
        "input": "root = [10,5,15,3,7,12,18,1,2,6,8,11,13,17,19], limit = 25",
        "output": "[10, 5, 15, None, 7, 12, 18, 6, 8, 11, 13, 17, 19]"
      }
    ]
  },
  {
    "id": 947,
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Union Find",
      "Graph",
      "Hash Table"
    ],
    "problemDescription": "On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.\nA stone can be removed if it shares either the same row or the same column as another stone that has not been removed.\nGiven an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.\n\u00a0\nExample 1:\n\nInput: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\nOutput: 5\nExplanation: One way to remove 5 stones is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,1].\n2. Remove stone [2,1] because it shares the same column as [0,1].\n3. Remove stone [1,2] because it shares the same row as [1,0].\n4. Remove stone [1,0] because it shares the same column as [0,0].\n5. Remove stone [0,1] because it shares the same row as [0,0].\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.\n\nExample 2:\n\nInput: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\nOutput: 3\nExplanation: One way to make 3 moves is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,0].\n2. Remove stone [2,0] because it shares the same column as [0,0].\n3. Remove stone [0,2] because it shares the same row as [0,0].\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.\n\nExample 3:\n\nInput: stones = [[0,0]]\nOutput: 0\nExplanation: [0,0] is the only stone on the plane, so you cannot remove it.\n\n\u00a0\nConstraints:\n\n1 <= stones.length <= 1000\n0 <= xi, yi <= 104\nNo two stones are at the same coordinate point.\n\n",
    "starterCode": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "stones = [[4,8],[4,4],[4,4],[9,2],[3,8],[8,0],[7,5],[0,8],[5,7],[6,9],[3,0],[4,7],[8,5],[5,9],[7,4],[6,0],[6,4],[4,2],[6,3]]",
        "output": "18"
      },
      {
        "input": "stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]",
        "output": "3"
      },
      {
        "input": "stones = [[3,2],[2,3],[3,1],[2,2]]",
        "output": "3"
      },
      {
        "input": "stones = [[1,2],[2,3],[3,4]]",
        "output": "0"
      },
      {
        "input": "stones = [[4,0],[4,2],[1,1],[0,0],[0,2],[2,0],[2,2]]",
        "output": "5"
      },
      {
        "input": "stones = [[0,0]]",
        "output": "0"
      },
      {
        "input": "stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]",
        "output": "5"
      },
      {
        "input": "stones = [[3,4],[3,2],[4,2],[0,0],[1,2]]",
        "output": "3"
      },
      {
        "input": "stones = [[4,8],[4,4],[4,4],[9,2],[8,7],[2,3],[8,7],[5,0],[3,1],[0,5],[8,5],[7,2],[5,3],[1,7],[8,0],[2,6],[0,1],[1,0],[5,8],[6,4]]",
        "output": "18"
      },
      {
        "input": "stones = [[1,2],[2,3],[3,4],[4,5]]",
        "output": "0"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]",
        "output": "0"
      },
      {
        "input": "stones = [[4,8],[4,4],[4,4],[9,2],[8,8],[4,5],[0,7],[5,7],[1,8],[9,2],[9,7],[4,9],[4,8]]",
        "output": "11"
      },
      {
        "input": "stones = [[1,2],[2,1],[3,2],[4,2],[5,3],[4,4]]",
        "output": "3"
      },
      {
        "input": "stones = [[1,2],[1,3],[1,4],[1,5],[1,6]]",
        "output": "4"
      },
      {
        "input": "stones = [[0,1],[1,0],[1,2],[2,1],[2,2],[3,3]]",
        "output": "4"
      },
      {
        "input": "stones = [[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "0"
      },
      {
        "input": "stones = [[4,0],[4,2],[1,1],[0,2],[1,2],[2,2],[3,2]]",
        "output": "6"
      },
      {
        "input": "stones = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]]",
        "output": "0"
      },
      {
        "input": "stones = [[1,2],[2,1],[3,4],[4,3],[5,6],[6,5],[7,8],[8,7],[9,10],[10,9],[11,12],[12,11],[13,14],[14,13]]",
        "output": "0"
      },
      {
        "input": "stones = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1],[0,0],[11,11]]",
        "output": "0"
      },
      {
        "input": "stones = [[10,10],[10,20],[20,10],[20,20],[10,30],[30,10],[30,20],[20,30],[30,30],[10,40],[40,10]]",
        "output": "10"
      },
      {
        "input": "stones = [[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]",
        "output": "8"
      },
      {
        "input": "stones = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14]]",
        "output": "0"
      },
      {
        "input": "stones = [[1,1],[2,2],[3,3],[1,3],[2,3],[3,1],[1,2],[2,1],[3,2],[2,4],[4,2],[3,4],[4,3],[4,4]]",
        "output": "13"
      },
      {
        "input": "stones = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2]]",
        "output": "5"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[0,3],[3,0],[0,2],[2,0],[1,2],[2,1],[1,3],[3,1],[2,3],[3,2]]",
        "output": "13"
      },
      {
        "input": "stones = [[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10],[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9]]",
        "output": "16"
      },
      {
        "input": "stones = [[1,2],[2,1],[2,3],[3,2],[3,4],[4,3],[4,5],[5,4],[5,6],[6,5],[6,7],[7,6]]",
        "output": "10"
      },
      {
        "input": "stones = [[1,1],[1,2],[2,1],[2,2],[1,3],[3,1],[2,3],[3,2],[1,4],[4,1],[2,4],[4,2],[3,3],[3,4],[4,3],[4,4]]",
        "output": "15"
      },
      {
        "input": "stones = [[1,1],[2,2],[3,3],[4,4],[1,2],[2,3],[3,4],[4,5],[1,3],[2,4],[3,5],[4,6]]",
        "output": "11"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[0,9],[9,0]]",
        "output": "3"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]]",
        "output": "0"
      },
      {
        "input": "stones = [[0,0],[0,2],[2,0],[2,2],[4,4],[4,6],[6,4],[6,6],[8,8],[8,10],[10,8],[10,10]]",
        "output": "9"
      },
      {
        "input": "stones = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "0"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]]",
        "output": "19"
      },
      {
        "input": "stones = [[0,0],[0,1],[1,0],[1,1],[1,2],[2,1],[2,2],[2,3],[3,2],[3,3]]",
        "output": "9"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[0,1],[1,0],[2,3],[3,2],[0,3],[3,0],[1,2],[2,1]]",
        "output": "11"
      },
      {
        "input": "stones = [[0,1],[1,0],[1,2],[2,1],[2,3],[3,2],[3,4],[4,3],[4,5],[5,4]]",
        "output": "8"
      },
      {
        "input": "stones = [[1,2],[2,3],[3,1],[4,5],[5,4],[6,7],[7,6],[8,9],[9,8],[0,1],[1,0]]",
        "output": "2"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[0,5],[5,0]]",
        "output": "3"
      },
      {
        "input": "stones = [[1,2],[2,1],[2,3],[3,2],[3,4],[4,3],[4,5],[5,4],[5,6],[6,5],[6,7],[7,6],[7,8],[8,7],[8,9],[9,8]]",
        "output": "14"
      },
      {
        "input": "stones = [[1,1],[2,2],[3,3],[4,4],[1,2],[2,1],[3,2],[2,3]]",
        "output": "6"
      },
      {
        "input": "stones = [[0,0],[1,0],[2,0],[3,0],[0,1],[1,1],[2,1],[3,1],[0,2],[1,2],[2,2],[3,2]]",
        "output": "11"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[0,1],[1,0],[2,1],[1,2]]",
        "output": "6"
      },
      {
        "input": "stones = [[1,1],[1,2],[2,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]]",
        "output": "3"
      },
      {
        "input": "stones = [[1,2],[2,1],[3,4],[4,3],[5,6],[6,5]]",
        "output": "0"
      },
      {
        "input": "stones = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[0,1],[1,1],[2,1],[3,1],[4,1]]",
        "output": "14"
      },
      {
        "input": "stones = [[0,0],[0,1],[1,0],[1,1],[2,2],[3,3],[3,4],[4,3]]",
        "output": "5"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12]]",
        "output": "0"
      },
      {
        "input": "stones = [[0,0],[0,2],[2,0],[2,2],[1,1],[3,3],[3,5],[5,3]]",
        "output": "5"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,0]]",
        "output": "31"
      },
      {
        "input": "stones = [[0,0],[0,1],[0,2],[0,3],[1,0],[1,1],[1,2],[1,3],[2,0],[2,1],[2,2],[2,3],[3,0],[3,1],[3,2],[3,3]]",
        "output": "15"
      },
      {
        "input": "stones = [[0,1],[1,0],[1,2],[2,1],[2,3],[3,2],[3,4],[4,3]]",
        "output": "6"
      },
      {
        "input": "stones = [[0,0],[0,1],[1,0],[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "3"
      },
      {
        "input": "stones = [[1,1],[2,1],[3,1],[1,2],[2,2],[3,2],[1,3],[2,3],[3,3],[1,4],[2,4],[3,4]]",
        "output": "11"
      },
      {
        "input": "stones = [[1,2],[2,1],[3,4],[4,3],[5,6],[6,5],[7,8],[8,7],[9,10],[10,9]]",
        "output": "0"
      },
      {
        "input": "stones = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3]]",
        "output": "6"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
        "output": "0"
      },
      {
        "input": "stones = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[0,0]]",
        "output": "0"
      },
      {
        "input": "stones = [[0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2]]",
        "output": "8"
      },
      {
        "input": "stones = [[0,0],[0,1],[0,2],[0,3],[1,0],[1,1],[1,2],[1,3]]",
        "output": "7"
      },
      {
        "input": "stones = [[1,1],[2,2],[3,3],[4,4],[5,5],[1,5],[2,4],[3,3],[4,2],[5,1]]",
        "output": "7"
      },
      {
        "input": "stones = [[1,2],[1,3],[1,4],[1,5],[2,1],[2,3],[2,4],[2,5],[3,1],[3,2],[3,4],[3,5]]",
        "output": "11"
      },
      {
        "input": "stones = [[0,0],[0,2],[2,0],[1,1],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]]",
        "output": "2"
      },
      {
        "input": "stones = [[0,1],[1,0],[1,2],[2,1],[2,3],[3,2],[3,4],[4,3],[4,5],[5,4],[5,6],[6,5],[6,7],[7,6],[7,8],[8,7],[8,9],[9,8]]",
        "output": "16"
      },
      {
        "input": "stones = [[0,0],[0,1],[1,0],[1,1],[1,2],[2,1],[2,0],[3,3]]",
        "output": "6"
      },
      {
        "input": "stones = [[0,10],[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1],[10,0]]",
        "output": "0"
      },
      {
        "input": "stones = [[1,2],[2,3],[3,1],[4,5],[5,6],[6,4],[7,8],[8,7],[9,10],[10,9]]",
        "output": "0"
      },
      {
        "input": "stones = [[1,1],[1,2],[2,1],[2,2],[3,3],[3,4],[4,3],[4,4],[5,5],[5,6],[6,5],[6,6]]",
        "output": "9"
      },
      {
        "input": "stones = [[1,1],[1,3],[1,5],[1,7],[2,2],[2,4],[2,6],[2,8],[3,1],[3,3],[3,5],[3,7],[4,2],[4,4],[4,6],[4,8]]",
        "output": "14"
      },
      {
        "input": "stones = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "0"
      },
      {
        "input": "stones = [[0,0],[0,2],[1,1],[1,3],[2,0],[2,2],[3,1],[3,3]]",
        "output": "6"
      },
      {
        "input": "stones = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3],[4,4],[4,5],[5,4],[5,5],[6,6],[6,7],[7,6],[7,7]]",
        "output": "12"
      },
      {
        "input": "stones = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "0"
      },
      {
        "input": "stones = [[5,5],[5,6],[5,7],[6,5],[6,6],[6,7],[7,5],[7,6],[7,7],[8,8],[8,9],[9,8],[9,9]]",
        "output": "11"
      },
      {
        "input": "stones = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3],[4,4],[4,5],[5,4],[5,5]]",
        "output": "9"
      },
      {
        "input": "stones = [[0,1],[1,2],[2,0],[2,3],[3,1],[3,4],[4,2],[4,5],[5,3]]",
        "output": "6"
      },
      {
        "input": "stones = [[0,0],[1,2],[2,1],[3,3],[4,4],[5,6],[6,5],[7,7]]",
        "output": "0"
      },
      {
        "input": "stones = [[10,1],[11,2],[12,3],[13,4],[14,5],[15,6],[16,7],[17,8],[18,9],[19,10],[10,19],[11,18],[12,17],[13,16],[14,15]]",
        "output": "5"
      },
      {
        "input": "stones = [[0,0],[1,0],[2,0],[3,0],[0,1],[1,1],[2,1],[3,1],[0,2],[1,2],[2,2],[3,2],[0,3],[1,3],[2,3],[3,3]]",
        "output": "15"
      },
      {
        "input": "stones = [[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3],[4,4],[4,5],[4,6],[5,4],[5,5],[5,6],[6,4],[6,5],[6,6]]",
        "output": "16"
      },
      {
        "input": "stones = [[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2],[3,0],[3,1],[3,2],[4,0],[4,1],[4,2],[5,0],[5,1],[5,2]]",
        "output": "16"
      },
      {
        "input": "stones = [[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3],[4,1],[4,2],[4,3],[5,1],[5,2],[5,3]]",
        "output": "14"
      },
      {
        "input": "stones = [[0,0],[0,2],[1,1],[2,0],[2,2],[2,4],[3,3],[4,2],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "6"
      },
      {
        "input": "stones = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0]]",
        "output": "7"
      },
      {
        "input": "stones = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "0"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[0,1],[1,2],[2,0],[3,3],[4,4],[5,5],[3,4],[4,5],[5,3]]",
        "output": "10"
      },
      {
        "input": "stones = [[1,1],[1,2],[2,1],[2,2],[3,3],[3,4],[4,3],[4,4]]",
        "output": "6"
      },
      {
        "input": "stones = [[1,1],[2,1],[3,1],[4,1],[1,2],[1,3],[1,4],[2,2],[2,3],[2,4],[3,2],[3,3],[3,4],[4,2],[4,3],[4,4]]",
        "output": "15"
      },
      {
        "input": "stones = [[0,0],[0,1],[0,2],[1,0],[1,2],[2,0],[2,1],[3,3],[3,4],[4,3],[4,4]]",
        "output": "9"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[0,1],[1,2],[2,0],[1,0],[0,2],[2,1]]",
        "output": "8"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "0"
      },
      {
        "input": "stones = [[0,1],[0,2],[0,3],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2]]",
        "output": "8"
      },
      {
        "input": "stones = [[0,0],[0,2],[1,1],[2,0],[2,2],[3,3],[3,4],[4,3],[4,4],[5,5],[5,6],[6,5],[6,6]]",
        "output": "9"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "20"
      },
      {
        "input": "stones = [[0,0],[1,0],[2,0],[0,1],[1,1],[2,1],[0,2],[1,2],[2,2],[1,3],[2,3],[3,3]]",
        "output": "11"
      },
      {
        "input": "stones = [[1,1],[1,2],[1,3],[1,4],[2,1],[2,2],[2,3],[2,4],[3,1],[3,2],[3,3],[3,4],[4,1],[4,2],[4,3],[4,4]]",
        "output": "15"
      },
      {
        "input": "stones = [[0,0],[1,1],[0,2],[1,3],[0,4],[1,5],[0,6],[1,7]]",
        "output": "6"
      },
      {
        "input": "stones = [[0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2],[3,3],[3,4],[3,5],[4,3],[4,4],[4,5],[5,3],[5,4],[5,5]]",
        "output": "16"
      },
      {
        "input": "stones = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,4],[4,0],[0,2],[2,0],[2,4],[4,2],[0,3],[3,0],[3,4],[4,3]]",
        "output": "13"
      }
    ]
  },
  {
    "id": 837,
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Sliding Window",
      "Probability and Statistics"
    ],
    "problemDescription": "Alice plays the following game, loosely based on the card game \"21\".\nAlice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number of points randomly from the range [1, maxPts], where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities.\nAlice stops drawing numbers when she gets k or more points.\nReturn the probability that Alice has n or fewer points.\nAnswers within 10-5 of the actual answer are considered accepted.\n\u00a0\nExample 1:\n\nInput: n = 10, k = 1, maxPts = 10\nOutput: 1.00000\nExplanation: Alice gets a single card, then stops.\n\nExample 2:\n\nInput: n = 6, k = 1, maxPts = 10\nOutput: 0.60000\nExplanation: Alice gets a single card, then stops.\nIn 6 out of 10 possibilities, she is at or below 6 points.\n\nExample 3:\n\nInput: n = 21, k = 17, maxPts = 10\nOutput: 0.73278\n\n\u00a0\nConstraints:\n\n0 <= k <= n <= 104\n1 <= maxPts <= 104\n\n",
    "starterCode": "class Solution:\n    def new21Game(self, n: int, k: int, maxPts: int) -> float:\n        ",
    "testCases": [
      {
        "input": "n = 10000, k = 5000, maxPts = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10, k = 5, maxPts = 5",
        "output": "1.0"
      },
      {
        "input": "n = 100, k = 50, maxPts = 20",
        "output": "1.0"
      },
      {
        "input": "n = 100, k = 50, maxPts = 5",
        "output": "1.0"
      },
      {
        "input": "n = 6, k = 1, maxPts = 10",
        "output": "0.6"
      },
      {
        "input": "n = 10000, k = 0, maxPts = 10000",
        "output": "1"
      },
      {
        "input": "n = 10, k = 1, maxPts = 10",
        "output": "1.0"
      },
      {
        "input": "n = 21, k = 17, maxPts = 10",
        "output": "0.7327777870686083"
      },
      {
        "input": "n = 20, k = 15, maxPts = 5",
        "output": "1.0"
      },
      {
        "input": "n = 10000, k = 10000, maxPts = 1",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 0, k = 0, maxPts = 1",
        "output": "1"
      },
      {
        "input": "n = 100, k = 90, maxPts = 5",
        "output": "1.0"
      },
      {
        "input": "n = 5, k = 3, maxPts = 2",
        "output": "1.0"
      },
      {
        "input": "n = 20, k = 0, maxPts = 10",
        "output": "1"
      },
      {
        "input": "n = 15, k = 15, maxPts = 10",
        "output": "0.18009983358324094"
      },
      {
        "input": "n = 800, k = 800, maxPts = 5",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 75, k = 50, maxPts = 20",
        "output": "1.0"
      },
      {
        "input": "n = 25, k = 25, maxPts = 5",
        "output": "0.3333044673513253"
      },
      {
        "input": "n = 100, k = 100, maxPts = 1",
        "output": "1.0"
      },
      {
        "input": "n = 100, k = 50, maxPts = 50",
        "output": "1.0"
      },
      {
        "input": "n = 30, k = 25, maxPts = 5",
        "output": "1.0"
      },
      {
        "input": "n = 200, k = 150, maxPts = 50",
        "output": "1.0"
      },
      {
        "input": "n = 75, k = 30, maxPts = 30",
        "output": "1.0"
      },
      {
        "input": "n = 9999, k = 0, maxPts = 100",
        "output": "1"
      },
      {
        "input": "n = 45, k = 45, maxPts = 10",
        "output": "0.18183615529245928"
      },
      {
        "input": "n = 50, k = 30, maxPts = 20",
        "output": "1.0"
      },
      {
        "input": "n = 8000, k = 4000, maxPts = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 100, k = 80, maxPts = 20",
        "output": "1.0"
      },
      {
        "input": "n = 500, k = 400, maxPts = 50",
        "output": "1.0"
      },
      {
        "input": "n = 50, k = 40, maxPts = 10",
        "output": "1.0"
      },
      {
        "input": "n = 60, k = 55, maxPts = 10",
        "output": "0.818177813346613"
      },
      {
        "input": "n = 60, k = 30, maxPts = 10",
        "output": "1.0"
      },
      {
        "input": "n = 100, k = 0, maxPts = 1",
        "output": "1"
      },
      {
        "input": "n = 1000, k = 500, maxPts = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 200, k = 150, maxPts = 30",
        "output": "1.0"
      },
      {
        "input": "n = 15, k = 10, maxPts = 5",
        "output": "1.0"
      },
      {
        "input": "n = 100, k = 50, maxPts = 25",
        "output": "1.0"
      },
      {
        "input": "n = 50, k = 25, maxPts = 20",
        "output": "1.0"
      },
      {
        "input": "n = 5000, k = 2500, maxPts = 100",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 3000, k = 2500, maxPts = 100",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 80, k = 40, maxPts = 15",
        "output": "1.0"
      },
      {
        "input": "n = 80, k = 70, maxPts = 10",
        "output": "1.0"
      },
      {
        "input": "n = 5000, k = 4000, maxPts = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 90, k = 85, maxPts = 5",
        "output": "1.0"
      },
      {
        "input": "n = 4000, k = 3500, maxPts = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 750, k = 300, maxPts = 50",
        "output": "1.0"
      },
      {
        "input": "n = 30, k = 25, maxPts = 10",
        "output": "0.8193954028011721"
      },
      {
        "input": "n = 500, k = 250, maxPts = 100",
        "output": "1.0"
      },
      {
        "input": "n = 5000, k = 4999, maxPts = 1",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 15, k = 7, maxPts = 5",
        "output": "1.0"
      },
      {
        "input": "n = 1000, k = 500, maxPts = 100",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 80, k = 20, maxPts = 3",
        "output": "1.0"
      },
      {
        "input": "n = 15, k = 15, maxPts = 1",
        "output": "1.0"
      },
      {
        "input": "n = 80, k = 60, maxPts = 10",
        "output": "1.0"
      },
      {
        "input": "n = 9999, k = 9999, maxPts = 1",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 5000, k = 5000, maxPts = 10000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 15000, k = 7500, maxPts = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 25, k = 25, maxPts = 1",
        "output": "1.0"
      },
      {
        "input": "n = 25, k = 0, maxPts = 25",
        "output": "1"
      },
      {
        "input": "n = 9999, k = 9990, maxPts = 10",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 300, k = 1, maxPts = 100",
        "output": "1.0"
      },
      {
        "input": "n = 30, k = 20, maxPts = 10",
        "output": "1.0"
      },
      {
        "input": "n = 5000, k = 5000, maxPts = 1",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 25, k = 20, maxPts = 15",
        "output": "0.6217079716932831"
      },
      {
        "input": "n = 1000, k = 500, maxPts = 200",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 25, k = 20, maxPts = 5",
        "output": "1.0"
      },
      {
        "input": "n = 120, k = 90, maxPts = 20",
        "output": "1.0"
      },
      {
        "input": "n = 70, k = 60, maxPts = 3",
        "output": "1.0"
      },
      {
        "input": "n = 15, k = 10, maxPts = 3",
        "output": "1.0"
      },
      {
        "input": "n = 90, k = 75, maxPts = 12",
        "output": "1.0"
      },
      {
        "input": "n = 50, k = 25, maxPts = 5",
        "output": "1.0"
      },
      {
        "input": "n = 75, k = 50, maxPts = 25",
        "output": "1.0"
      },
      {
        "input": "n = 10000, k = 9999, maxPts = 10",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 40, k = 0, maxPts = 5",
        "output": "1"
      },
      {
        "input": "n = 200, k = 150, maxPts = 10",
        "output": "1.0"
      },
      {
        "input": "n = 70, k = 10, maxPts = 30",
        "output": "1.0"
      },
      {
        "input": "n = 150, k = 100, maxPts = 15",
        "output": "1.0"
      },
      {
        "input": "n = 30, k = 15, maxPts = 10",
        "output": "1.0"
      },
      {
        "input": "n = 100, k = 90, maxPts = 10",
        "output": "1.0"
      },
      {
        "input": "n = 30, k = 15, maxPts = 5",
        "output": "1.0"
      },
      {
        "input": "n = 90, k = 80, maxPts = 5",
        "output": "1.0"
      }
    ]
  },
  {
    "id": 2098,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Sorting"
    ],
    "problemDescription": "You are given an integer array nums and an integer k. Find the largest even sum of any subsequence of nums that has a length of k.\nReturn this sum, or -1 if such a sum does not exist.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nExample 1:\n\nInput: nums = [4,1,5,3,1], k = 3\nOutput: 12\nExplanation:\nThe subsequence with the largest possible even sum is [4,5,3]. It has a sum of 4 + 5 + 3 = 12.\n\nExample 2:\n\nInput: nums = [4,6,2], k = 3\nOutput: 12\nExplanation:\nThe subsequence with the largest possible even sum is [4,6,2]. It has a sum of 4 + 6 + 2 = 12.\n\nExample 3:\n\nInput: nums = [1,3,5], k = 1\nOutput: -1\nExplanation:\nNo subsequence of nums with length 1 has an even sum.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 105\n1 <= k <= nums.length\n\n",
    "starterCode": "class Solution:\n    def largestEvenSum(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [0,0,0,0,0], k = 2",
        "output": "0"
      },
      {
        "input": "nums = [0,0,0,0], k = 2",
        "output": "0"
      },
      {
        "input": "nums = [4,6,2], k = 3",
        "output": "12"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "40"
      },
      {
        "input": "nums = [1,3,5], k = 1",
        "output": "-1"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 4",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,4,5,6], k = 4",
        "output": "18"
      },
      {
        "input": "nums = [1,1,1,1,1,1], k = 3",
        "output": "-1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 5",
        "output": "-1"
      },
      {
        "input": "nums = [2,2,2,2,2], k = 2",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 4",
        "output": "34"
      },
      {
        "input": "nums = [4,1,5,3,1], k = 3",
        "output": "12"
      },
      {
        "input": "nums = [2,4,6,8,10], k = 5",
        "output": "30"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0], k = 3",
        "output": "0"
      },
      {
        "input": "nums = [8,6,4,2,0], k = 3",
        "output": "18"
      },
      {
        "input": "nums = [10,20,30,40,50], k = 3",
        "output": "120"
      },
      {
        "input": "nums = [10,21,32,43,54,65,76,87,98,109], k = 4",
        "output": "370"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 19",
        "output": "208"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991], k = 5",
        "output": "499990"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80], k = 10",
        "output": "954"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], k = 4",
        "output": "8"
      },
      {
        "input": "nums = [10, 21, 32, 43, 54, 65, 76, 87, 98, 109], k = 5",
        "output": "424"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], k = 10",
        "output": "300"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], k = 10",
        "output": "144"
      },
      {
        "input": "nums = [8, 6, 4, 2, 0, -2, -4, -6, -8], k = 4",
        "output": "20"
      },
      {
        "input": "nums = [11,22,33,44,55,66,77,88,99,110,121,132,143,154,165], k = 8",
        "output": "1012"
      },
      {
        "input": "nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89], k = 5",
        "output": "212"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 7",
        "output": "60"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k = 9",
        "output": "108"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], k = 8",
        "output": "184"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 10",
        "output": "50"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], k = 10",
        "output": "300"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], k = 10",
        "output": "200"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1",
        "output": "10"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 7",
        "output": "4900"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9], k = 4",
        "output": "24"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2",
        "output": "2"
      },
      {
        "input": "nums = [11, 13, 15, 17, 19, 21, 23, 25, 27, 29], k = 3",
        "output": "-1"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71], k = 15",
        "output": "600"
      },
      {
        "input": "nums = [100000,99999,99998,99997,99996,99995,99994,99993,99992,99991], k = 5",
        "output": "499990"
      },
      {
        "input": "nums = [5, 8, 13, 21, 34, 55, 89, 144, 233, 377], k = 3",
        "output": "754"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k = 8",
        "output": "104"
      },
      {
        "input": "nums = [99999,99998,99997,99996,99995,99994,99993,99992,99991,99990,99989,99988,99987,99986,99985,99984,99983,99982,99981,99980], k = 10",
        "output": "999944"
      },
      {
        "input": "nums = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288], k = 15",
        "output": "1048544"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18], k = 5",
        "output": "70"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1",
        "output": "-1"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 8",
        "output": "520"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 6",
        "output": "44"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10",
        "output": "-1"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], k = 4",
        "output": "88"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 15",
        "output": "1950"
      },
      {
        "input": "nums = [7,2,9,4,3,8,6], k = 4",
        "output": "30"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 15",
        "output": "344"
      },
      {
        "input": "nums = [11, 13, 17, 19, 23, 29, 31, 37, 41, 43], k = 6",
        "output": "204"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71], k = 10",
        "output": "510"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 3",
        "output": "-1"
      },
      {
        "input": "nums = [1,3,5,7,9], k = 3",
        "output": "-1"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 7",
        "output": "84"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], k = 5",
        "output": "10"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], k = 15",
        "output": "100"
      },
      {
        "input": "nums = [500, 400, 300, 200, 100, 90, 80, 70, 60, 50], k = 8",
        "output": "1740"
      },
      {
        "input": "nums = [1,3,5], k = 3",
        "output": "-1"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991], k = 6",
        "output": "599984"
      },
      {
        "input": "nums = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200], k = 3",
        "output": "540"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k = 10",
        "output": "110"
      },
      {
        "input": "nums = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15], k = 3",
        "output": "-1"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], k = 8",
        "output": "184"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5",
        "output": "-1"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 7",
        "output": "-1"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900], k = 5",
        "output": "3500"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 7",
        "output": "84"
      },
      {
        "input": "nums = [11,13,15,17,19,21,23,25], k = 3",
        "output": "-1"
      },
      {
        "input": "nums = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80], k = 10",
        "output": "944"
      },
      {
        "input": "nums = [99, 101, 103, 105, 107, 109, 111, 113, 115, 117], k = 2",
        "output": "232"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 5",
        "output": "400"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20], k = 10",
        "output": "110"
      },
      {
        "input": "nums = [8, 6, 4, 2, 0, 1, 3, 5, 7, 9], k = 8",
        "output": "44"
      },
      {
        "input": "nums = [7, 11, 13, 1, 5, 3, 8, 2], k = 4",
        "output": "36"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 10",
        "output": "50"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2",
        "output": "18"
      },
      {
        "input": "nums = [100000,90000,80000,70000,60000,50000,40000,30000,20000,10000], k = 4",
        "output": "340000"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991], k = 10",
        "output": "-1"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], k = 5",
        "output": "-1"
      },
      {
        "input": "nums = [1000,2000,3000,4000,5000,6000,7000,8000,9000,10000], k = 3",
        "output": "27000"
      },
      {
        "input": "nums = [1], k = 1",
        "output": "-1"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], k = 5",
        "output": "34"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], k = 3",
        "output": "2700"
      },
      {
        "input": "nums = [31,29,23,19,17,13,11,7,5,2], k = 7",
        "output": "134"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49], k = 10",
        "output": "400"
      },
      {
        "input": "nums = [10, 15, 3, 7, 8, 5, 2, 11], k = 4",
        "output": "44"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 3",
        "output": "-1"
      },
      {
        "input": "nums = [10, 15, 20, 25, 30, 35], k = 6",
        "output": "-1"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5",
        "output": "34"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], k = 7",
        "output": "1016"
      },
      {
        "input": "nums = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 6",
        "output": "164"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5",
        "output": "40"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], k = 3",
        "output": "270"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], k = 5",
        "output": "-1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 2",
        "output": "2"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], k = 10",
        "output": "144"
      },
      {
        "input": "nums = [10,21,32,43,54,65,76,87,98], k = 5",
        "output": "380"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], k = 15",
        "output": "1950"
      },
      {
        "input": "nums = [5,8,7,3,4,2,6,1], k = 4",
        "output": "26"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20], k = 5",
        "output": "80"
      },
      {
        "input": "nums = [99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 99990], k = 5",
        "output": "499984"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 10",
        "output": "-1"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], k = 8",
        "output": "16"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k = 5",
        "output": "80"
      },
      {
        "input": "nums = [2], k = 1",
        "output": "2"
      },
      {
        "input": "nums = [5,3,1,7,9,11,13,15,17,19], k = 3",
        "output": "-1"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], k = 6",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 10",
        "output": "154"
      },
      {
        "input": "nums = [2,4,6], k = 1",
        "output": "6"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 10",
        "output": "104"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 5",
        "output": "-1"
      },
      {
        "input": "nums = [10, 15, 20, 25, 30, 35], k = 4",
        "output": "110"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 2, 4, 6, 8, 10], k = 5",
        "output": "40"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 6",
        "output": "44"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 10",
        "output": "100"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], k = 15",
        "output": "390"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991], k = 7",
        "output": "699978"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91], k = 6",
        "output": "584"
      }
    ]
  },
  {
    "id": 1477,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "problemDescription": "You are given an array of integers arr and an integer target.\nYou have to find two non-overlapping sub-arrays of arr each with a sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.\nReturn the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.\n\u00a0\nExample 1:\n\nInput: arr = [3,2,2,4,3], target = 3\nOutput: 2\nExplanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.\n\nExample 2:\n\nInput: arr = [7,3,4,7], target = 7\nOutput: 2\nExplanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.\n\nExample 3:\n\nInput: arr = [4,3,2,6,2,3,4], target = 6\nOutput: -1\nExplanation: We have only one sub-array of sum = 6.\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 105\n1 <= arr[i] <= 1000\n1 <= target <= 108\n\n",
    "starterCode": "class Solution:\n    def minSumOfLengths(self, arr: List[int], target: int) -> int:\n        ",
    "testCases": [
      {
        "input": "arr = [5,5,5,5,5], target = 10",
        "output": "4"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10], target = 15",
        "output": "5"
      },
      {
        "input": "arr = [2,2,2,2,2,2,2,2,2,2], target = 6",
        "output": "6"
      },
      {
        "input": "arr = [1,1,1,2,2,2,3,3,3], target = 6",
        "output": "5"
      },
      {
        "input": "arr = [1,2,3,4,5], target = 9",
        "output": "-1"
      },
      {
        "input": "arr = [3,2,2,4,3], target = 3",
        "output": "2"
      },
      {
        "input": "arr = [5,5,4,4,5], target = 9",
        "output": "4"
      },
      {
        "input": "arr = [2,2,2,2,2,2,2,2,2,2], target = 4",
        "output": "4"
      },
      {
        "input": "arr = [1000,1000,1000], target = 2000",
        "output": "-1"
      },
      {
        "input": "arr = [7,3,4,7], target = 7",
        "output": "2"
      },
      {
        "input": "arr = [1000,1000,1000,1000,1000], target = 2000",
        "output": "4"
      },
      {
        "input": "arr = [1,1,1,2,2,2,3,3,3], target = 3",
        "output": "2"
      },
      {
        "input": "arr = [1,2,1,2,1,2,1,2,1,2], target = 3",
        "output": "4"
      },
      {
        "input": "arr = [1000,1000,1000,1000,1000], target = 5000",
        "output": "-1"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1], target = 2",
        "output": "4"
      },
      {
        "input": "arr = [5,5,5,5,5,5,5,5,5], target = 15",
        "output": "6"
      },
      {
        "input": "arr = [1,2,3,4,5], target = 10",
        "output": "-1"
      },
      {
        "input": "arr = [10,20,30,40,50], target = 60",
        "output": "-1"
      },
      {
        "input": "arr = [1,4,4,4,4,4,4,4,4,1], target = 8",
        "output": "4"
      },
      {
        "input": "arr = [5,5,5,5,5,5,5,5,5,5], target = 15",
        "output": "6"
      },
      {
        "input": "arr = [4,3,2,6,2,3,4], target = 6",
        "output": "-1"
      },
      {
        "input": "arr = [10,20,30,40,50], target = 90",
        "output": "-1"
      },
      {
        "input": "arr = [999, 1, 999, 1, 999, 1, 999, 1, 999, 1], target = 1000",
        "output": "4"
      },
      {
        "input": "arr = [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25], target = 50",
        "output": "4"
      },
      {
        "input": "arr = [3,1,2,4,3,2,1,3,4,2,1,3,5,2,1,3,4,2,1,3], target = 6",
        "output": "4"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], target = 30",
        "output": "4"
      },
      {
        "input": "arr = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], target = 15",
        "output": "3"
      },
      {
        "input": "arr = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], target = 500",
        "output": "-1"
      },
      {
        "input": "arr = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], target = 300",
        "output": "8"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], target = 100",
        "output": "13"
      },
      {
        "input": "arr = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], target = 20",
        "output": "8"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 20",
        "output": "-1"
      },
      {
        "input": "arr = [1, 3, 2, 1, 5, 2, 3, 1, 4, 2, 3, 1, 5, 2, 3, 1, 4, 2, 3, 1], target = 6",
        "output": "4"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], target = 15",
        "output": "3"
      },
      {
        "input": "arr = [1, 4, 2, 3, 5, 7, 9, 11, 13, 15], target = 15",
        "output": "4"
      },
      {
        "input": "arr = [5, 1, 3, 5, 10, 7, 4, 9, 2, 8, 6], target = 15",
        "output": "5"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], target = 15",
        "output": "4"
      },
      {
        "input": "arr = [1,4,4,1,1,2,3,5,3,2,3,4,1], target = 8",
        "output": "4"
      },
      {
        "input": "arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 5",
        "output": "10"
      },
      {
        "input": "arr = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = 30",
        "output": "6"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 10",
        "output": "20"
      },
      {
        "input": "arr = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], target = 20",
        "output": "8"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50], target = 60",
        "output": "4"
      },
      {
        "input": "arr = [9, 1, 2, 3, 9, 4, 5, 9, 6, 7, 8, 9], target = 9",
        "output": "2"
      },
      {
        "input": "arr = [3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], target = 6",
        "output": "6"
      },
      {
        "input": "arr = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], target = 15",
        "output": "6"
      },
      {
        "input": "arr = [5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1], target = 10",
        "output": "6"
      },
      {
        "input": "arr = [5,1,3,5,2,1,2,3,5,2,1,2,3,5,2,1,2,3,5,2,1,2,3,5,2,1,2,3], target = 9",
        "output": "-1"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], target = 1500",
        "output": "5"
      },
      {
        "input": "arr = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 15",
        "output": "4"
      },
      {
        "input": "arr = [7, 8, 3, 4, 7, 6, 5, 4, 3, 2, 1], target = 15",
        "output": "5"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 20",
        "output": "-1"
      },
      {
        "input": "arr = [7,1,3,1,2,1,3,1,7,1,3,1,2,1,3,1,7,1,3,1,2,1,3,1,7,1,3,1], target = 10",
        "output": "10"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 5",
        "output": "10"
      },
      {
        "input": "arr = [5,2,3,4,5,6,7,8,9,10], target = 15",
        "output": "5"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 21",
        "output": "5"
      },
      {
        "input": "arr = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500], target = 3000",
        "output": "8"
      },
      {
        "input": "arr = [1,4,2,3,5,2,3,1,4,2,3,5,2,3,1,4,2,3,5,2,3,1,4,2,3,5,2,3,1,4,2,3], target = 8",
        "output": "4"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 100, 200, 300, 400, 500], target = 600",
        "output": "5"
      },
      {
        "input": "arr = [2, 3, 2, 2, 3, 3, 2, 2, 2, 3], target = 6",
        "output": "5"
      },
      {
        "input": "arr = [100,200,300,400,500,600,700,800,900,1000], target = 1500",
        "output": "5"
      },
      {
        "input": "arr = [100,200,300,100,200,300,100,200,300,100,200,300,100,200,300], target = 600",
        "output": "6"
      },
      {
        "input": "arr = [5, 1, 3, 5, 2, 4, 8, 6, 3, 7], target = 10",
        "output": "5"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], target = 30",
        "output": "8"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target = 150",
        "output": "5"
      },
      {
        "input": "arr = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], target = 10",
        "output": "4"
      },
      {
        "input": "arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 5",
        "output": "10"
      },
      {
        "input": "arr = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], target = 15",
        "output": "6"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 15",
        "output": "5"
      },
      {
        "input": "arr = [3,2,2,4,3,3,2,2,4,3,3,2,2,4,3,3,2,2,4,3,3,2,2,4,3,3,2,2,4,3], target = 5",
        "output": "4"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 5",
        "output": "10"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 2",
        "output": "4"
      },
      {
        "input": "arr = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], target = 400",
        "output": "-1"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 20",
        "output": "40"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], target = 100",
        "output": "-1"
      },
      {
        "input": "arr = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], target = 9",
        "output": "6"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], target = 20",
        "output": "6"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 2",
        "output": "4"
      },
      {
        "input": "arr = [5,1,3,5,10,7,4,9,2,8], target = 15",
        "output": "5"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], target = 3",
        "output": "3"
      },
      {
        "input": "arr = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], target = 4",
        "output": "6"
      },
      {
        "input": "arr = [100, 200, 100, 300, 200, 400, 300, 500, 400, 600], target = 300",
        "output": "2"
      },
      {
        "input": "arr = [10,20,30,40,50,60,70,80,90,100], target = 150",
        "output": "5"
      },
      {
        "input": "arr = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], target = 10",
        "output": "4"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 100, 200, 300, 400, 500], target = 1000",
        "output": "8"
      }
    ]
  },
  {
    "id": 2182,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Hash Table",
      "String",
      "Counting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a string s and an integer repeatLimit. Construct a new string repeatLimitedString using the characters of s such that no letter appears more than repeatLimit times in a row. You do not have to use all characters from s.\nReturn the lexicographically largest repeatLimitedString possible.\nA string a is lexicographically larger than a string b if in the first position where a and b differ, string a has a letter that appears later in the alphabet than the corresponding letter in b. If the first min(a.length, b.length) characters do not differ, then the longer string is the lexicographically larger one.\n\u00a0\nExample 1:\n\nInput: s = \"cczazcc\", repeatLimit = 3\nOutput: \"zzcccac\"\nExplanation: We use all of the characters from s to construct the repeatLimitedString \"zzcccac\".\nThe letter 'a' appears at most 1 time in a row.\nThe letter 'c' appears at most 3 times in a row.\nThe letter 'z' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return \"zzcccac\".\nNote that the string \"zzcccca\" is lexicographically larger but the letter 'c' appears more than 3 times in a row, so it is not a valid repeatLimitedString.\n\nExample 2:\n\nInput: s = \"aababab\", repeatLimit = 2\nOutput: \"bbabaa\"\nExplanation: We use only some of the characters from s to construct the repeatLimitedString \"bbabaa\". \nThe letter 'a' appears at most 2 times in a row.\nThe letter 'b' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return \"bbabaa\".\nNote that the string \"bbabaaa\" is lexicographically larger but the letter 'a' appears more than 2 times in a row, so it is not a valid repeatLimitedString.\n\n\u00a0\nConstraints:\n\n1 <= repeatLimit <= s.length <= 105\ns consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def repeatLimitedString(self, s: str, repeatLimit: int) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"aabbccddeeff\", repeatLimit = 1",
        "output": "fefedcdcbaba"
      },
      {
        "input": "s = \"aabbccddeeff\", repeatLimit = 3",
        "output": "ffeeddccbbaa"
      },
      {
        "input": "s = \"cczazcc\", repeatLimit = 3",
        "output": "zzcccac"
      },
      {
        "input": "s = \"zzzzzzyyy\", repeatLimit = 2",
        "output": "zzyzzyzzy"
      },
      {
        "input": "s = \"zzzzzzzzz\", repeatLimit = 3",
        "output": "zzz"
      },
      {
        "input": "s = \"aababab\", repeatLimit = 2",
        "output": "bbabaa"
      },
      {
        "input": "s = \"leetcode\", repeatLimit = 3",
        "output": "toleeedc"
      },
      {
        "input": "s = \"a\", repeatLimit = 1",
        "output": "a"
      },
      {
        "input": "s = \"aabbcc\", repeatLimit = 1",
        "output": "cbcba"
      },
      {
        "input": "s = \"bbccddeee\", repeatLimit = 2",
        "output": "eededccbb"
      },
      {
        "input": "s = \"abcd\", repeatLimit = 1",
        "output": "dcba"
      },
      {
        "input": "s = \"zzzzzzzzzz\", repeatLimit = 2",
        "output": "zz"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzz\", repeatLimit = 2",
        "output": "zz"
      },
      {
        "input": "s = \"abcabcabc\", repeatLimit = 1",
        "output": "cbcbcba"
      },
      {
        "input": "s = \"aaaaaabbbccc\", repeatLimit = 1",
        "output": "cbcbcba"
      },
      {
        "input": "s = \"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpppppppppppppppppppppppppppppppp\", repeatLimit = 5",
        "output": "qqqqqpqqqqqpqqqqqpqqqqqpqqqqqpqqqqqpqqppppp"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeeffffffffggggggggghhhhhhhhhiiiiiiiiijjjjjjjjkkkkkkkkklllllllllmmmmmmmmmnnnnnnnnnoooooooooppppppppqqqqqqqqqrrrrrrrrrssssssssstttttttttuuuuuuuuuvvvvvvvvvwwwwwwwwwxxxxxxxxxyyyyyyyyzzzzzzzzz\", repeatLimit = 4",
        "output": "zzzzyzzzzyzyyyyxyyxxxxwxxxxwwwwvwwwwvvvvuvvvvuuuutuuuuttttsttttssssrssssrrrrqrrrrqqqqpqqqqppppopppoooonoooonnnnmnnnnmmmmlmmmmllllkllllkkkkjkkkkjjjjijjjiiiihiiiihhhhghhhhggggfggggffffefffeeeedeeeeddddcdddccccbcccbbbbabbbaaaa"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", repeatLimit = 5",
        "output": "zzyyxxwwvvuuttssrrqqppoonnmmllkkjjiihhggffeeddccbbaa"
      },
      {
        "input": "s = \"mmmmmmmllllllkkkkkkjjjjjjiiiiiihhhhhhggggggffffffeeeeee\", repeatLimit = 4",
        "output": "mmmmlmmmllllklkkkkjkjjjjijiiiihihhhhghggggfgffffefeeee"
      },
      {
        "input": "s = \"mnbvcxzlkjhgfdsapoiuytrewq\", repeatLimit = 1",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 10",
        "output": "zzzzzzzzzz"
      },
      {
        "input": "s = \"aabbbccccddeeeffffgggghhhhiiiiijjjjkkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxxyyyyyzzzzzzzzzzzz\", repeatLimit = 4",
        "output": "zzzzyzzzzyzzzzyyyxxxxwxwwwvvvvuuuuttttssssrrrrqqqqppppoooonnnnmmmmllllkkkkjkjjjiiiihihhhggggffffeeeddccccbbbaa"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", repeatLimit = 2",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", repeatLimit = 1",
        "output": "zyzyxwxwvuvutstsrqrqpoponmnmlklkjijihghgfefedcdcbaba"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggg\", repeatLimit = 4",
        "output": "ggggffffeeeeddddccccbbbbaaaa"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzyyyyyyyyyyyxxxxxxxxwwwwwwvvvvvvuuuuuuutttttttttssssrrrrqqqqqqqqpppponnnnmmmmlllkkkjjjiiiihhggggffffffeedddcccbba\", repeatLimit = 1",
        "output": "zyzyzyzyzyzyzyzyzyzyzyzxzxzxzxwxwxwxwxwvwvuvuvuvuvutututststststrtrtrqrqpqpqpqpqoqnqnmnmnmlmlklkjkjijihihigfgfgfgfefefdcdcdcbab"
      },
      {
        "input": "s = \"aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxxyyyyyzzzzz\", repeatLimit = 2",
        "output": "zzyzzyzyyxyxxwxxwwvwvvuvuututtstssrsrrqrqqpqppopoononnmnmmlmllklkkjkjjijiihihhggfgffeededdccbcbbaa"
      },
      {
        "input": "s = \"pppppppppooooooonnnnmmmllllkkkkjjjjiiiihhhhhggggfffffeeeee\", repeatLimit = 4",
        "output": "ppppoppppopoooononnnmmmllllkkkkjjjjiiiihhhhghgggffffefeeee"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", repeatLimit = 2",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzyyyyyyyyyyyxxxxxxxxwwwwwwvvvvvvuuuuuuutttttttttssssrrrrqqqqqqqqpppponnnnmmmmlllkkkjjjiiiihhggggffffffeedddcccbba\", repeatLimit = 5",
        "output": "zzzzzyzzzzzyzzzzzyyyyyxyyyyxxxxxwxxwwwwwvvvvvuvuuuuututttttstttsssrrrrqqqqqpqqqppponnnnmmmmlllkkkjjjiiiihhggggfffffefedddcccbba"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyza\", repeatLimit = 1",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeefffffff\", repeatLimit = 3",
        "output": "fffefffefeeedeeededddcdddcccbcccbcbbbabbbaaa"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 1",
        "output": "z"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzyyyyyyyyyyyxxxxxxxxwwwwwwvvvvvvuuuuuuutttttttttssssrrrrqqqqqqqqpppponnnnmmmmlllkkkjjjiiiihhggggffffffeedddcccbba\", repeatLimit = 3",
        "output": "zzzyzzzyzzzyzzzyzzzyyyxyyyxyxxxwxxxwwwvwwvvvuvvuuutuuutttstttsttssrrrqrqqqpqqqpqpponnnmnmmmlllkkkjjjiiihihgggfgfffeffedddcccbba"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzyyyyyyyyyyyxxxxxxxxwwwwwwvvvvvvuuuuuuutttttttttssssrrrrqqqqqqqqpppponnnnmmmmlllkkkjjjiiiihhggggffffffeedddcccbba\", repeatLimit = 10",
        "output": "zzzzzzzzzzyzzzzzyyyyyyyyyyxxxxxxxxwwwwwwvvvvvvuuuuuuutttttttttssssrrrrqqqqqqqqpppponnnnmmmmlllkkkjjjiiiihhggggffffffeedddcccbba"
      },
      {
        "input": "s = \"xyzzzzzzzzzzyx\", repeatLimit = 5",
        "output": "zzzzzyzzzzzyxx"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzyyyyyyyyyyyxxxxxxxxwwwwwwvvvvvvuuuuuuutttttttttssssrrrrqqqqqqqqpppponnnnmmmmlllkkkjjjiiiihhggggffffffeedddcccbba\", repeatLimit = 2",
        "output": "zzyzzyzzyzzyzzyzzyzzyzyyxyyxxwxxwxxwxwwvwvvuvvuvuutuututtsttsttstsrrqrrqqpqqpqqpqponnmnnmmlmllkkjkjjiihiihggfggffeffefddcdccbba"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 5",
        "output": "zzzzzyzzzzzxzzzzzwzzzzzvzzzzzuzzzzztzzzzzszzzzzrzzqponmlkjihgfedcba"
      },
      {
        "input": "s = \"nnnnnnnnnmmmmmmmmmllllllllllkkkkkkkkkkjjjjjjjjjjiiiiiiiiiihhhhhhhhhhggggggggggffffffeeeeeeeeddddddddccccccccbbbaaaaaaaa\", repeatLimit = 10",
        "output": "nnnnnnnnnmmmmmmmmmllllllllllkkkkkkkkkkjjjjjjjjjjiiiiiiiiiihhhhhhhhhhggggggggggffffffeeeeeeeeddddddddccccccccbbbaaaaaaaa"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 5",
        "output": "zzzzz"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 5",
        "output": "zzzzz"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 5",
        "output": "zzzzz"
      },
      {
        "input": "s = \"mnlkjihgfedcba\", repeatLimit = 1",
        "output": "nmlkjihgfedcba"
      },
      {
        "input": "s = \"aaaaaaaaaaaabbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccccdddddddddddddddddddddddddddddddddddddddddd\", repeatLimit = 5",
        "output": "dddddcdddddcdddddcdddddcdddddcdddddcdddddcdddddcddcccccbcccccbcccccbcccccbbbbbabbbbbabbbbbabaaaaa"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 1",
        "output": "z"
      },
      {
        "input": "s = \"pppppqqqqqrrrrrssssstttttuuuuuvvvvvwwwwwxxxxxyyyyyzzzzz\", repeatLimit = 2",
        "output": "zzyzzyzyyxyxxwxxwwvwwvvuvvuutuuttsttssrssrrqrrqqpqqpp"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaabbbbbbbbbbbbccccccccccccddddddddddddd\", repeatLimit = 3",
        "output": "dddcdddcdddcdddcdcccbcccbccbbbabbbabbbabaaa"
      },
      {
        "input": "s = \"zzzzzyyyyxxxxwwvvuttrrssqqppoonnmmllkkjjiihhggffeeddccbbaaa\", repeatLimit = 10",
        "output": "zzzzzyyyyxxxxwwvvuttssrrqqppoonnmmllkkjjiihhggffeeddccbbaaa"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 3",
        "output": "zzz"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 15",
        "output": "zzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 10",
        "output": "zzzzzzzzzz"
      },
      {
        "input": "s = \"zzzzzyyyyxxwwvvuuuutttssrrqqppoonnmmllkkjjiihhhggffeeddccbbaa\", repeatLimit = 2",
        "output": "zzyzzyzyyxxwwvvuutuuttssrrqqppoonnmmllkkjjiihhghgffeeddccbbaa"
      },
      {
        "input": "s = \"abacabadabacaba\", repeatLimit = 2",
        "output": "dccbbabbaa"
      },
      {
        "input": "s = \"ssssssssssssssssssssssssssssssss\", repeatLimit = 2",
        "output": "ss"
      },
      {
        "input": "s = \"zzzzzzzyyyy\", repeatLimit = 3",
        "output": "zzzyzzzyzyy"
      },
      {
        "input": "s = \"pppppppppppppppppppppppppppppppp\", repeatLimit = 3",
        "output": "ppp"
      },
      {
        "input": "s = \"zzzzzyyyyxxxxwwvvuttrrssqqppoonnmmllkkjjiihhggffeeddccbbaaa\", repeatLimit = 2",
        "output": "zzyzzyzyyxxwxxwvvuttssrrqqppoonnmmllkkjjiihhggffeeddccbbaa"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 5",
        "output": "zzzzz"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", repeatLimit = 4",
        "output": "zzyyxxwwvvuuttssrrqqppoonnmmllkkjjiihhggffeeddccbbaa"
      },
      {
        "input": "s = \"a\", repeatLimit = 10",
        "output": "a"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 10",
        "output": "zzzzzzzzzz"
      },
      {
        "input": "s = \"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\", repeatLimit = 7",
        "output": "qqqqqqq"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", repeatLimit = 1",
        "output": "z"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", repeatLimit = 1",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", repeatLimit = 3",
        "output": "zzyyxxwwvvuuttssrrqqppoonnmmllkkjjiihhggffeeddccbbaa"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", repeatLimit = 10",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      }
    ]
  },
  {
    "id": 853,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Array",
      "Sorting",
      "Monotonic Stack"
    ],
    "problemDescription": "There are n cars at given miles away from the starting mile 0, traveling to reach the mile target.\nYou are given two integer array position and speed, both of length n, where position[i] is the starting mile of the ith car and speed[i] is the speed of the ith car in miles per hour.\nA car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.\nA car fleet is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet.\nIf a car catches up to a car fleet at the mile target, it will still be considered as part of the car fleet.\nReturn the number of car fleets that will arrive at the destination.\n\u00a0\nExample 1:\n\nInput: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\nOutput: 3\nExplanation:\n\nThe cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The fleet forms at target.\nThe car starting at 0 (speed 1) does not catch up to any other car, so it is a fleet by itself.\nThe cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\n\n\nExample 2:\n\nInput: target = 10, position = [3], speed = [3]\nOutput: 1\nExplanation:\nThere is only one car, hence there is only one fleet.\nExample 3:\n\nInput: target = 100, position = [0,2,4], speed = [4,2,1]\nOutput: 1\nExplanation:\n\nThe cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The car starting at 4 (speed 1) travels to 5.\nThen, the fleet at 4 (speed 2) and the car at position 5 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\n\n\n\u00a0\nConstraints:\n\nn == position.length == speed.length\n1 <= n <= 105\n0 < target <= 106\n0 <= position[i] < target\nAll the values of position are unique.\n0 < speed[i] <= 106\n\n",
    "starterCode": "class Solution:\n    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "target = 1000, position = [100,200,300], speed = [100,50,25]",
        "output": "1"
      },
      {
        "input": "target = 100, position = [0,1,2,3,4], speed = [100,100,100,100,100]",
        "output": "5"
      },
      {
        "input": "target = 300, position = [0,50,100,150,200,250], speed = [50,40,30,20,10,5]",
        "output": "1"
      },
      {
        "input": "target = 100, position = [90,80,70,60,50], speed = [10,20,30,40,50]",
        "output": "1"
      },
      {
        "input": "target = 50, position = [0,10,20,30,40], speed = [10,9,8,7,6]",
        "output": "5"
      },
      {
        "input": "target = 50, position = [10,20,30], speed = [1,2,3]",
        "output": "3"
      },
      {
        "input": "target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]",
        "output": "3"
      },
      {
        "input": "target = 10, position = [3], speed = [3]",
        "output": "1"
      },
      {
        "input": "target = 1, position = [0], speed = [1]",
        "output": "1"
      },
      {
        "input": "target = 50, position = [10,20,30,40], speed = [5,4,3,2]",
        "output": "4"
      },
      {
        "input": "target = 100, position = [0,2,4], speed = [4,2,1]",
        "output": "1"
      },
      {
        "input": "target = 200, position = [50,60,70,80,90], speed = [10,9,8,7,6]",
        "output": "1"
      },
      {
        "input": "target = 100, position = [10,20,30,40,50,60,70,80,90], speed = [10,10,10,10,10,10,10,10,10]",
        "output": "9"
      },
      {
        "input": "target = 20, position = [0,18,5], speed = [4,4,4]",
        "output": "3"
      },
      {
        "input": "target = 20, position = [6,2,17], speed = [3,9,2]",
        "output": "2"
      },
      {
        "input": "target = 1000, position = [100,200,300,400], speed = [10,20,30,40]",
        "output": "4"
      },
      {
        "input": "target = 10, position = [6,8], speed = [3,2]",
        "output": "2"
      },
      {
        "input": "target = 12, position = [0,4,2], speed = [1,2,3]",
        "output": "2"
      },
      {
        "input": "target = 20, position = [5,15,10], speed = [5,1,3]",
        "output": "1"
      },
      {
        "input": "target = 100, position = [10,20,30], speed = [1,2,3]",
        "output": "3"
      },
      {
        "input": "target = 999999, position = [1,2,3,4,5], speed = [999998,999997,999996,999995,999994]",
        "output": "1"
      },
      {
        "input": "target = 200, position = [10, 50, 90, 130, 170], speed = [1, 2, 3, 4, 5]",
        "output": "5"
      },
      {
        "input": "target = 1000, position = [500,600,700,800,900], speed = [1,1,1,1,1]",
        "output": "5"
      },
      {
        "input": "target = 100, position = [10, 20, 30, 40, 50, 60, 70, 80, 90], speed = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "9"
      },
      {
        "input": "target = 600, position = [50, 150, 250, 350, 450, 550], speed = [5, 10, 15, 20, 25, 30]",
        "output": "6"
      },
      {
        "input": "target = 100, position = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], speed = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "10"
      },
      {
        "input": "target = 1000, position = [100, 200, 300, 400, 500], speed = [10, 20, 30, 40, 50]",
        "output": "5"
      },
      {
        "input": "target = 120, position = [10, 30, 50, 70, 90], speed = [10, 20, 30, 40, 50]",
        "output": "5"
      },
      {
        "input": "target = 100, position = [0, 25, 50, 75, 99], speed = [5, 4, 3, 2, 1]",
        "output": "5"
      },
      {
        "input": "target = 1000, position = [900,800,700,600,500,400,300,200,100], speed = [1,2,3,4,5,6,7,8,9]",
        "output": "1"
      },
      {
        "input": "target = 1000, position = [10, 200, 300, 400, 500, 600, 700, 800, 900], speed = [90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "2"
      },
      {
        "input": "target = 300, position = [0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190], speed = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "target = 250, position = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], speed = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "15"
      },
      {
        "input": "target = 1234, position = [123, 456, 789], speed = [321, 654, 987]",
        "output": "3"
      },
      {
        "input": "target = 50, position = [10, 20, 30, 40], speed = [1, 1, 1, 1]",
        "output": "4"
      },
      {
        "input": "target = 700, position = [10, 100, 200, 300, 400], speed = [5, 15, 25, 35, 45]",
        "output": "5"
      },
      {
        "input": "target = 200, position = [50,100,150,0], speed = [2,2,2,1]",
        "output": "4"
      },
      {
        "input": "target = 100, position = [10, 20, 30, 40, 50, 60, 70, 80, 90], speed = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "target = 200, position = [10,20,30,40,50,60,70,80,90,100], speed = [1,1,1,1,1,1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "target = 100, position = [10,20,30,40,50], speed = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "target = 300, position = [0,50,100,150,200,250], speed = [1,2,3,4,5,6]",
        "output": "6"
      },
      {
        "input": "target = 120, position = [10, 30, 50, 70, 90], speed = [10, 8, 6, 4, 2]",
        "output": "1"
      },
      {
        "input": "target = 120, position = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55], speed = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "output": "10"
      },
      {
        "input": "target = 10000, position = [9990, 9980, 9970, 9960, 9950, 9940, 9930, 9920, 9910, 9900], speed = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "10"
      },
      {
        "input": "target = 500, position = [490,480,470,460,450], speed = [10,10,10,10,10]",
        "output": "5"
      },
      {
        "input": "target = 200, position = [0, 50, 100, 150], speed = [20, 15, 10, 5]",
        "output": "1"
      },
      {
        "input": "target = 100, position = [5, 15, 25, 35, 45], speed = [2, 4, 6, 8, 10]",
        "output": "5"
      },
      {
        "input": "target = 150, position = [0, 25, 50, 75, 100], speed = [5, 10, 15, 20, 25]",
        "output": "5"
      },
      {
        "input": "target = 150, position = [10,20,30,40,50,60], speed = [6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "target = 100, position = [90, 80, 70, 60, 50], speed = [10, 10, 10, 10, 10]",
        "output": "5"
      },
      {
        "input": "target = 120, position = [0,10,20,30,40,50], speed = [1,2,3,4,5,6]",
        "output": "6"
      },
      {
        "input": "target = 2000, position = [500, 1000, 1500], speed = [1, 1, 1]",
        "output": "3"
      },
      {
        "input": "target = 600, position = [0,150,300,450], speed = [600,300,150,100]",
        "output": "2"
      },
      {
        "input": "target = 1000, position = [100, 200, 300, 400], speed = [10, 20, 30, 40]",
        "output": "4"
      },
      {
        "input": "target = 400, position = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380], speed = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "19"
      },
      {
        "input": "target = 120, position = [10,20,30,40,50,60], speed = [10,9,8,7,6,5]",
        "output": "1"
      },
      {
        "input": "target = 800, position = [10, 30, 50, 70, 90], speed = [10, 20, 30, 40, 50]",
        "output": "5"
      },
      {
        "input": "target = 750, position = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700], speed = [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "target = 1000, position = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900], speed = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "target = 400, position = [10,30,50,70,90,110,130,150,170,190,210,230,250,270,290,310,330,350,370,390], speed = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "target = 500, position = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], speed = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "10"
      },
      {
        "input": "target = 1000, position = [990, 980, 970, 960, 950, 940, 930, 920, 910], speed = [10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "9"
      },
      {
        "input": "target = 150, position = [5,10,20,30,40,50,60,70,80,90], speed = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "target = 200, position = [10,50,90,130,170], speed = [10,20,30,40,50]",
        "output": "5"
      },
      {
        "input": "target = 800, position = [100, 200, 300, 400, 500, 600, 700], speed = [1, 2, 3, 4, 5, 6, 7]",
        "output": "7"
      },
      {
        "input": "target = 500, position = [0,50,100,150,200,250,300,350,400,450], speed = [50,45,40,35,30,25,20,15,10,5]",
        "output": "1"
      },
      {
        "input": "target = 1000, position = [10, 50, 90, 130, 170], speed = [10, 10, 10, 10, 10]",
        "output": "5"
      },
      {
        "input": "target = 250, position = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125], speed = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "target = 2000, position = [1900, 1800, 1700, 1600, 1500, 1400, 1300, 1200, 1100, 1000], speed = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "1"
      },
      {
        "input": "target = 1000, position = [0, 250, 500, 750], speed = [50, 100, 150, 200]",
        "output": "4"
      },
      {
        "input": "target = 3000, position = [100, 300, 500, 700, 900, 1100, 1300, 1500, 1700, 1900], speed = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55]",
        "output": "10"
      },
      {
        "input": "target = 150, position = [10,20,30,40,50], speed = [5,5,5,5,5]",
        "output": "5"
      },
      {
        "input": "target = 5000, position = [10, 200, 3000, 4000, 4990], speed = [100, 90, 80, 70, 60]",
        "output": "4"
      },
      {
        "input": "target = 100, position = [10, 20, 30, 40, 50], speed = [10, 9, 8, 7, 6]",
        "output": "5"
      },
      {
        "input": "target = 1500, position = [100, 300, 500, 700, 900], speed = [100, 200, 300, 400, 500]",
        "output": "5"
      },
      {
        "input": "target = 600, position = [590, 580, 570, 560, 550], speed = [1, 1, 1, 1, 1]",
        "output": "5"
      },
      {
        "input": "target = 120, position = [10,20,30,40,50,60,70,80,90,100], speed = [10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "target = 600, position = [30, 150, 270, 390, 510], speed = [5, 10, 15, 20, 25]",
        "output": "5"
      },
      {
        "input": "target = 400, position = [100, 200, 300], speed = [1, 1, 1]",
        "output": "3"
      },
      {
        "input": "target = 300, position = [290, 280, 270, 260, 250], speed = [1, 2, 3, 4, 5]",
        "output": "1"
      },
      {
        "input": "target = 200, position = [10, 30, 50, 70, 90], speed = [50, 40, 30, 20, 10]",
        "output": "1"
      },
      {
        "input": "target = 350, position = [50,100,150,200,250,300], speed = [10,20,30,40,50,60]",
        "output": "6"
      },
      {
        "input": "target = 150, position = [10, 30, 50, 70, 90, 110, 130], speed = [10, 8, 6, 4, 2, 1, 5]",
        "output": "2"
      },
      {
        "input": "target = 200, position = [5,15,25,35,45,55,65,75,85,95], speed = [10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "target = 900, position = [10, 100, 200, 300, 400, 500, 600, 700, 800], speed = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "9"
      },
      {
        "input": "target = 500, position = [0,100,200,300,400], speed = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "target = 500, position = [0,10,20,30,40,50,60,70,80,90,100,110,120,130,140], speed = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "15"
      },
      {
        "input": "target = 300, position = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280], speed = [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "target = 300, position = [0,100,200], speed = [100,50,1]",
        "output": "1"
      },
      {
        "input": "target = 1200, position = [900, 600, 300, 0], speed = [10, 20, 30, 40]",
        "output": "1"
      },
      {
        "input": "target = 10000, position = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], speed = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "10"
      },
      {
        "input": "target = 800, position = [100,200,300,400,500,600,700], speed = [700,600,500,400,300,200,100]",
        "output": "1"
      },
      {
        "input": "target = 500, position = [100,200,300,400], speed = [100,100,100,100]",
        "output": "4"
      },
      {
        "input": "target = 900, position = [800, 700, 600, 500, 400, 300, 200, 100, 0], speed = [5, 10, 15, 20, 25, 30, 35, 40, 45]",
        "output": "1"
      },
      {
        "input": "target = 1000, position = [50, 250, 450, 650, 850], speed = [10, 20, 30, 40, 50]",
        "output": "5"
      },
      {
        "input": "target = 500, position = [100, 150, 200, 250, 300], speed = [5, 10, 15, 20, 25]",
        "output": "5"
      },
      {
        "input": "target = 1000, position = [500,600,700,800,900], speed = [100,200,300,400,500]",
        "output": "5"
      },
      {
        "input": "target = 500, position = [10,100,200,300,400], speed = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "target = 550, position = [25,50,75,100,125,150,175,200,225,250,275,300,325,350,375,400,425,450,475,500,525,550], speed = [22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "21"
      },
      {
        "input": "target = 300, position = [10, 50, 90, 130, 170, 210, 250, 290], speed = [1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "8"
      },
      {
        "input": "target = 500, position = [400,300,200,100,0], speed = [5,4,3,2,1]",
        "output": "5"
      },
      {
        "input": "target = 300, position = [25,50,75,100,125,150,175,200,225,250,275], speed = [10,9,8,7,6,5,4,3,2,1,1]",
        "output": "2"
      },
      {
        "input": "target = 500, position = [0, 100, 200, 300, 400], speed = [100, 100, 100, 100, 100]",
        "output": "5"
      },
      {
        "input": "target = 200, position = [50, 100, 150], speed = [1, 2, 3]",
        "output": "3"
      },
      {
        "input": "target = 800, position = [10, 100, 200, 300, 400, 500, 600, 700], speed = [1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "8"
      },
      {
        "input": "target = 1000, position = [50, 150, 250, 350, 450], speed = [100, 200, 300, 400, 500]",
        "output": "5"
      },
      {
        "input": "target = 1000, position = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950], speed = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "target = 1500, position = [0, 150, 300, 450, 600, 750, 900, 1050, 1200, 1350], speed = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]",
        "output": "10"
      },
      {
        "input": "target = 200, position = [0, 20, 40, 60, 80, 100, 120, 140, 160, 180], speed = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "target = 200, position = [10, 40, 70, 100], speed = [10, 5, 20, 15]",
        "output": "2"
      },
      {
        "input": "target = 300, position = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], speed = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "target = 1000, position = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], speed = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "target = 300, position = [25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275], speed = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "output": "11"
      },
      {
        "input": "target = 2000, position = [1000, 1500], speed = [500, 250]",
        "output": "1"
      },
      {
        "input": "target = 1000, position = [100,200,300,400,500,600,700,800,900], speed = [9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "target = 500, position = [50, 150, 250, 350, 450], speed = [5, 10, 15, 20, 25]",
        "output": "5"
      },
      {
        "input": "target = 700, position = [100,200,300,400,500,600], speed = [100,90,80,70,60,50]",
        "output": "6"
      },
      {
        "input": "target = 450, position = [10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150,155,160,165,170,175,180,185,190,195,200,205,210,215,220,225,230,235,240,245,250], speed = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "Error: list index out of range"
      },
      {
        "input": "target = 200, position = [10, 50, 90, 130, 170], speed = [10, 20, 30, 40, 50]",
        "output": "5"
      },
      {
        "input": "target = 100, position = [10, 20, 30, 40, 50], speed = [5, 5, 5, 5, 5]",
        "output": "5"
      },
      {
        "input": "target = 200, position = [10, 20, 30, 40, 50], speed = [1, 1, 1, 1, 1]",
        "output": "5"
      },
      {
        "input": "target = 500, position = [10, 50, 90, 130, 170], speed = [10, 20, 30, 40, 50]",
        "output": "5"
      },
      {
        "input": "target = 1000, position = [990, 980, 970, 960, 950], speed = [1, 2, 3, 4, 5]",
        "output": "1"
      },
      {
        "input": "target = 1000, position = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500], speed = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "10"
      },
      {
        "input": "target = 1000, position = [200, 400, 600, 800], speed = [50, 40, 30, 20]",
        "output": "4"
      }
    ]
  },
  {
    "id": 484,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Greedy",
      "Array",
      "String"
    ],
    "problemDescription": "A permutation perm of n\u00a0integers of all the integers in the range [1, n] can be represented as a string s of length n - 1 where:\n\ns[i] == 'I' if perm[i] < perm[i + 1], and\ns[i] == 'D' if perm[i] > perm[i + 1].\n\nGiven a string s, reconstruct the lexicographically smallest permutation perm and return it.\n\u00a0\nExample 1:\n\nInput: s = \"I\"\nOutput: [1,2]\nExplanation: [1,2] is the only legal permutation that can represented by s, where the number 1 and 2 construct an increasing relationship.\n\nExample 2:\n\nInput: s = \"DI\"\nOutput: [2,1,3]\nExplanation: Both [2,1,3] and [3,1,2] can be represented as \"DI\", but since we want to find the smallest lexicographical permutation, you should return [2,1,3]\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 105\ns[i] is either 'I' or 'D'.\n\n",
    "starterCode": "class Solution:\n    def findPermutation(self, s: str) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "s = \"IIDIIIDIDDDDDIII\"",
        "output": "[1, 2, 4, 3, 5, 6, 8, 7, 14, 13, 12, 11, 10, 9, 15, 16, 17]"
      },
      {
        "input": "s = \"DIDID\"",
        "output": "[2, 1, 4, 3, 6, 5]"
      },
      {
        "input": "s = \"IDID\"",
        "output": "[1, 3, 2, 5, 4]"
      },
      {
        "input": "s = \"DDDD\"",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"I\"",
        "output": "[1, 2]"
      },
      {
        "input": "s = \"DDIIIDD\"",
        "output": "[3, 2, 1, 4, 5, 8, 7, 6]"
      },
      {
        "input": "s = \"DDI\"",
        "output": "[3, 2, 1, 4]"
      },
      {
        "input": "s = \"IIII\"",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "s = \"IID\"",
        "output": "[1, 2, 4, 3]"
      },
      {
        "input": "s = \"IDDDI\"",
        "output": "[1, 5, 4, 3, 2, 6]"
      },
      {
        "input": "s = \"IIDDDII\"",
        "output": "[1, 2, 6, 5, 4, 3, 7, 8]"
      },
      {
        "input": "s = \"DIDD\"",
        "output": "[2, 1, 5, 4, 3]"
      },
      {
        "input": "s = \"IDDI\"",
        "output": "[1, 4, 3, 2, 5]"
      },
      {
        "input": "s = \"IIIDDDDDII\"",
        "output": "[1, 2, 3, 9, 8, 7, 6, 5, 4, 10, 11]"
      },
      {
        "input": "s = \"DI\"",
        "output": "[2, 1, 3]"
      },
      {
        "input": "s = \"DIDIDID\"",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"",
        "output": "[75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IDDDDDDDDDDDDD\"",
        "output": "[1, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "s = \"DDDDDIIDDDDIIDDD\"",
        "output": "[6, 5, 4, 3, 2, 1, 7, 12, 11, 10, 9, 8, 13, 17, 16, 15, 14]"
      },
      {
        "input": "s = \"DDDDDDDDDDID\"",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 13, 12]"
      },
      {
        "input": "s = \"DIIDIDIDIDIDIDID\"",
        "output": "[2, 1, 3, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16]"
      },
      {
        "input": "s = \"IDIDDDIDIDIDID\"",
        "output": "[1, 3, 2, 7, 6, 5, 4, 9, 8, 11, 10, 13, 12, 15, 14]"
      },
      {
        "input": "s = \"DDDDIIIIII\"",
        "output": "[5, 4, 3, 2, 1, 6, 7, 8, 9, 10, 11]"
      },
      {
        "input": "s = \"DIDIDIDIDIDIDIDIDID\"",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]"
      },
      {
        "input": "s = \"IDDDDDIIIIIIII\"",
        "output": "[1, 7, 6, 5, 4, 3, 2, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "s = \"IDIDDDDDII\"",
        "output": "[1, 3, 2, 9, 8, 7, 6, 5, 4, 10, 11]"
      },
      {
        "input": "s = \"IDIDDDDDIIII\"",
        "output": "[1, 3, 2, 9, 8, 7, 6, 5, 4, 10, 11, 12, 13]"
      },
      {
        "input": "s = \"IIIIIIIIIIIDIIIIIIII\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21]"
      },
      {
        "input": "s = \"IIDDDIIIIIDDDDD\"",
        "output": "[1, 2, 6, 5, 4, 3, 7, 8, 9, 10, 16, 15, 14, 13, 12, 11]"
      },
      {
        "input": "s = \"IIIIIIIIII\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"
      },
      {
        "input": "s = \"IDDDDDIIIIII\"",
        "output": "[1, 7, 6, 5, 4, 3, 2, 8, 9, 10, 11, 12, 13]"
      },
      {
        "input": "s = \"IIIIIDIIIIIDII\"",
        "output": "[1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 13, 12, 14, 15]"
      },
      {
        "input": "s = \"IDDDIIDDDD\"",
        "output": "[1, 5, 4, 3, 2, 6, 11, 10, 9, 8, 7]"
      },
      {
        "input": "s = \"IIIIIDDDID\"",
        "output": "[1, 2, 3, 4, 5, 9, 8, 7, 6, 11, 10]"
      },
      {
        "input": "s = \"DDDIIDDDDDDI\"",
        "output": "[4, 3, 2, 1, 5, 12, 11, 10, 9, 8, 7, 6, 13]"
      },
      {
        "input": "s = \"DDDDDDIDIDID\"",
        "output": "[7, 6, 5, 4, 3, 2, 1, 9, 8, 11, 10, 13, 12]"
      },
      {
        "input": "s = \"IIDDIDDDIID\"",
        "output": "[1, 2, 5, 4, 3, 9, 8, 7, 6, 10, 12, 11]"
      },
      {
        "input": "s = \"DDDDDDDD\"",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DDDDIDIDDDIDID\"",
        "output": "[5, 4, 3, 2, 1, 7, 6, 11, 10, 9, 8, 13, 12, 15, 14]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIIIIIIIIIDDDDDDDDDDDDDDDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22]"
      },
      {
        "input": "s = \"DDDDDDDDID\"",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 10]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDID\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14]"
      },
      {
        "input": "s = \"IIDDDIIDID\"",
        "output": "[1, 2, 6, 5, 4, 3, 7, 9, 8, 11, 10]"
      },
      {
        "input": "s = \"DDDDIDIDIDID\"",
        "output": "[5, 4, 3, 2, 1, 7, 6, 9, 8, 11, 10, 13, 12]"
      },
      {
        "input": "s = \"DDDDDDDIIIIIIIII\"",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17]"
      },
      {
        "input": "s = \"DDDDDDIDII\"",
        "output": "[7, 6, 5, 4, 3, 2, 1, 9, 8, 10, 11]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDDDDDDDDDDDD\"",
        "output": "[28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IDDDDDDDIII\"",
        "output": "[1, 9, 8, 7, 6, 5, 4, 3, 2, 10, 11, 12]"
      },
      {
        "input": "s = \"IDIDIDIDIDID\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIIIDDDDDDDDDDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16]"
      },
      {
        "input": "s = \"IDDDIIDID\"",
        "output": "[1, 5, 4, 3, 2, 6, 8, 7, 10, 9]"
      },
      {
        "input": "s = \"IIIIIIIIIDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 14, 13, 12, 11, 10]"
      },
      {
        "input": "s = \"IIIIIIII\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "s = \"IDDDDDDDDDDDDIIIIIIIIIIIIII\"",
        "output": "[1, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]"
      },
      {
        "input": "s = \"DDDDDDDIDIDDDD\"",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 15, 14, 13, 12, 11]"
      },
      {
        "input": "s = \"DIDIDIDIDIDIDIDI\"",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 17]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDIIIIIIIIIIIIIIII\"",
        "output": "[17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]"
      },
      {
        "input": "s = \"IIIIIIIDDDIIIIII\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 11, 10, 9, 8, 12, 13, 14, 15, 16, 17]"
      },
      {
        "input": "s = \"IIIIIIIIIID\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11]"
      },
      {
        "input": "s = \"IDDDDDIIID\"",
        "output": "[1, 7, 6, 5, 4, 3, 2, 8, 9, 11, 10]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIIIIIIIIIIIIII\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]"
      },
      {
        "input": "s = \"IDDDDDDDDDDDD\"",
        "output": "[1, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "s = \"DDIIIIIIID\"",
        "output": "[3, 2, 1, 4, 5, 6, 7, 8, 9, 11, 10]"
      },
      {
        "input": "s = \"IIIIIDDDDDIIIIID\"",
        "output": "[1, 2, 3, 4, 5, 11, 10, 9, 8, 7, 6, 12, 13, 14, 15, 17, 16]"
      },
      {
        "input": "s = \"IDIDDDDDDDDDIIII\"",
        "output": "[1, 3, 2, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 14, 15, 16, 17]"
      },
      {
        "input": "s = \"DDIIDIDIDI\"",
        "output": "[3, 2, 1, 4, 6, 5, 8, 7, 10, 9, 11]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDI\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 14]"
      },
      {
        "input": "s = \"DDDIDIDDD\"",
        "output": "[4, 3, 2, 1, 6, 5, 10, 9, 8, 7]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDIDID\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18]"
      },
      {
        "input": "s = \"DDDDDDIIIIII\"",
        "output": "[7, 6, 5, 4, 3, 2, 1, 8, 9, 10, 11, 12, 13]"
      },
      {
        "input": "s = \"IIIDDDIDDDI\"",
        "output": "[1, 2, 3, 7, 6, 5, 4, 11, 10, 9, 8, 12]"
      },
      {
        "input": "s = \"IDIDIDIDIDI\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 12]"
      },
      {
        "input": "s = \"IDDDDDDDDIDDDDDD\"",
        "output": "[1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 17, 16, 15, 14, 13, 12, 11]"
      },
      {
        "input": "s = \"IIIIIIIIIIIII\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "s = \"DIDIDIDIDIDIDI\"",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 15]"
      },
      {
        "input": "s = \"IDIDIDDDDD\"",
        "output": "[1, 3, 2, 5, 4, 11, 10, 9, 8, 7, 6]"
      },
      {
        "input": "s = \"IIIDDDDDDIIIDDDD\"",
        "output": "[1, 2, 3, 10, 9, 8, 7, 6, 5, 4, 11, 12, 17, 16, 15, 14, 13]"
      },
      {
        "input": "s = \"IIDDDIIDDD\"",
        "output": "[1, 2, 6, 5, 4, 3, 7, 11, 10, 9, 8]"
      },
      {
        "input": "s = \"IDDDDDDDDDDDDDDD\"",
        "output": "[1, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "s = \"DDDDDDDDDDDD\"",
        "output": "[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IIDDDDDDIIII\"",
        "output": "[1, 2, 9, 8, 7, 6, 5, 4, 3, 10, 11, 12, 13]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDIDIDIDID\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22]"
      },
      {
        "input": "s = \"DDDDDDI\"",
        "output": "[7, 6, 5, 4, 3, 2, 1, 8]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDID\"",
        "output": "[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 17, 16]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"",
        "output": "[38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IIIIIDDDDDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDDDDDDDDDDDDD\"",
        "output": "[29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IDIDDDIID\"",
        "output": "[1, 3, 2, 7, 6, 5, 4, 8, 10, 9]"
      },
      {
        "input": "s = \"DIIIDDDIIDDID\"",
        "output": "[2, 1, 3, 4, 8, 7, 6, 5, 9, 12, 11, 10, 14, 13]"
      },
      {
        "input": "s = \"IIDDDDD\"",
        "output": "[1, 2, 8, 7, 6, 5, 4, 3]"
      },
      {
        "input": "s = \"IIDDDDDDDDDDDDDDDD\"",
        "output": "[1, 2, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDD\"",
        "output": "[18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DDIIDDIDID\"",
        "output": "[3, 2, 1, 4, 7, 6, 5, 9, 8, 11, 10]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDD\"",
        "output": "[16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DDDDIDIDDD\"",
        "output": "[5, 4, 3, 2, 1, 7, 6, 11, 10, 9, 8]"
      },
      {
        "input": "s = \"DIDIDIDIDIDIDIDIDIDIDID\"",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23]"
      },
      {
        "input": "s = \"IIIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDID\"",
        "output": "[1, 2, 3, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48, 51, 50, 53, 52, 55, 54, 57, 56, 59, 58, 61, 60, 63, 62, 65, 64, 67, 66, 69, 68, 71, 70, 73, 72, 75, 74, 77, 76, 79, 78, 81, 80]"
      },
      {
        "input": "s = \"DDDDDDDDD\"",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IIIIIDDDDDDIIIIID\"",
        "output": "[1, 2, 3, 4, 5, 12, 11, 10, 9, 8, 7, 6, 13, 14, 15, 16, 18, 17]"
      },
      {
        "input": "s = \"IDDDDDIDDD\"",
        "output": "[1, 7, 6, 5, 4, 3, 2, 11, 10, 9, 8]"
      },
      {
        "input": "s = \"IIDDIDDDDI\"",
        "output": "[1, 2, 5, 4, 3, 10, 9, 8, 7, 6, 11]"
      },
      {
        "input": "s = \"DIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDID\"",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 32, 31, 34, 33, 36, 35, 38, 37, 40, 39, 42, 41, 44, 43, 46, 45, 48, 47, 50, 49, 52, 51, 54, 53, 56, 55, 58, 57, 60, 59, 62, 61, 64, 63, 66, 65, 68, 67, 70, 69, 72, 71, 74, 73, 76, 75, 78, 77, 80, 79, 82, 81]"
      },
      {
        "input": "s = \"IIDIDID\"",
        "output": "[1, 2, 4, 3, 6, 5, 8, 7]"
      },
      {
        "input": "s = \"IDIDDDDDIDIDID\"",
        "output": "[1, 3, 2, 9, 8, 7, 6, 5, 4, 11, 10, 13, 12, 15, 14]"
      },
      {
        "input": "s = \"IDIDDDIDIDID\"",
        "output": "[1, 3, 2, 7, 6, 5, 4, 9, 8, 11, 10, 13, 12]"
      },
      {
        "input": "s = \"DDDIIIII\"",
        "output": "[4, 3, 2, 1, 5, 6, 7, 8, 9]"
      },
      {
        "input": "s = \"IDDDDDDDDDDDDDID\"",
        "output": "[1, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 17, 16]"
      },
      {
        "input": "s = \"DDDDDDIIIIIIIIII\"",
        "output": "[7, 6, 5, 4, 3, 2, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]"
      },
      {
        "input": "s = \"DDIIDDIIDDIID\"",
        "output": "[3, 2, 1, 4, 7, 6, 5, 8, 11, 10, 9, 12, 14, 13]"
      },
      {
        "input": "s = \"IDIDDDDDDDDDDDDI\"",
        "output": "[1, 3, 2, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 17]"
      },
      {
        "input": "s = \"IIDIDDDIID\"",
        "output": "[1, 2, 4, 3, 8, 7, 6, 5, 9, 11, 10]"
      },
      {
        "input": "s = \"IIDDIDIDID\"",
        "output": "[1, 2, 5, 4, 3, 7, 6, 9, 8, 11, 10]"
      },
      {
        "input": "s = \"IIDDDDIIDDDDDD\"",
        "output": "[1, 2, 7, 6, 5, 4, 3, 8, 15, 14, 13, 12, 11, 10, 9]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIIIIIIII\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]"
      },
      {
        "input": "s = \"IDDDIIDDDIIDDD\"",
        "output": "[1, 5, 4, 3, 2, 6, 10, 9, 8, 7, 11, 15, 14, 13, 12]"
      },
      {
        "input": "s = \"IDIDDDIDID\"",
        "output": "[1, 3, 2, 7, 6, 5, 4, 9, 8, 11, 10]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDDDDD\"",
        "output": "[21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IDIDDDDDIDIDIDID\"",
        "output": "[1, 3, 2, 9, 8, 7, 6, 5, 4, 11, 10, 13, 12, 15, 14, 17, 16]"
      },
      {
        "input": "s = \"DDDIIDDDDDDDDI\"",
        "output": "[4, 3, 2, 1, 5, 14, 13, 12, 11, 10, 9, 8, 7, 6, 15]"
      },
      {
        "input": "s = \"DDDDDDDDDD\"",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DDDDDDDDIDDD\"",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 13, 12, 11, 10]"
      },
      {
        "input": "s = \"IDIDDDDDDDDI\"",
        "output": "[1, 3, 2, 12, 11, 10, 9, 8, 7, 6, 5, 4, 13]"
      },
      {
        "input": "s = \"IIIDDDIIIDDDIIID\"",
        "output": "[1, 2, 3, 7, 6, 5, 4, 8, 9, 13, 12, 11, 10, 14, 15, 17, 16]"
      },
      {
        "input": "s = \"IDIDDDDDDDIIII\"",
        "output": "[1, 3, 2, 11, 10, 9, 8, 7, 6, 5, 4, 12, 13, 14, 15]"
      },
      {
        "input": "s = \"DDDDDDDDDDDIIIIIIIIIIIIIDDDDDD\"",
        "output": "[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 31, 30, 29, 28, 27, 26, 25]"
      },
      {
        "input": "s = \"DDDDDDDDDDI\"",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 12]"
      },
      {
        "input": "s = \"DDDDDDDDDDDIDID\"",
        "output": "[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 14, 13, 16, 15]"
      },
      {
        "input": "s = \"IIDDDDIIDDDDDDDD\"",
        "output": "[1, 2, 7, 6, 5, 4, 3, 8, 17, 16, 15, 14, 13, 12, 11, 10, 9]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDIDIDIDIDIDID\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIIIIIIIDDDDDDDDDDDDDDDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]"
      },
      {
        "input": "s = \"DDDDDDDDDDIDDD\"",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 15, 14, 13, 12]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDID\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16]"
      },
      {
        "input": "s = \"DDDDIIIIIIIDDD\"",
        "output": "[5, 4, 3, 2, 1, 6, 7, 8, 9, 10, 11, 15, 14, 13, 12]"
      },
      {
        "input": "s = \"IIIIIIIIIIIDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 16, 15, 14, 13, 12]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDDD\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 17, 16, 15, 14]"
      },
      {
        "input": "s = \"IIIIIIIIIDDD\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 12, 11, 10]"
      },
      {
        "input": "s = \"DDIIIIIIIDDDDD\"",
        "output": "[3, 2, 1, 4, 5, 6, 7, 8, 9, 15, 14, 13, 12, 11, 10]"
      },
      {
        "input": "s = \"IIIIIIIIIIIDDDDDDDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12]"
      },
      {
        "input": "s = \"IIIIIIIIID\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10]"
      },
      {
        "input": "s = \"DDDDDDIIIIID\"",
        "output": "[7, 6, 5, 4, 3, 2, 1, 8, 9, 10, 11, 13, 12]"
      },
      {
        "input": "s = \"IDDDDDIIIIIIIIII\"",
        "output": "[1, 7, 6, 5, 4, 3, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIDDDDDDDDDDDDIIII\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 27, 28, 29, 30]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIIIIIDDDDDDDDDDDDDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18]"
      },
      {
        "input": "s = \"IIIDIDIDIDIDIDIDIDIDID\"",
        "output": "[1, 2, 3, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22]"
      },
      {
        "input": "s = \"IDDDDDDDDDDIDDDDDDDDDIDDDDDDDDD\"",
        "output": "[1, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23]"
      },
      {
        "input": "s = \"DDDDDDIIIIIIII\"",
        "output": "[7, 6, 5, 4, 3, 2, 1, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "s = \"IIIIIDDDDDDDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6]"
      },
      {
        "input": "s = \"IIDDIDIDIDIDID\"",
        "output": "[1, 2, 5, 4, 3, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14]"
      },
      {
        "input": "s = \"IIIIIDDDDDDDDIIII\"",
        "output": "[1, 2, 3, 4, 5, 14, 13, 12, 11, 10, 9, 8, 7, 6, 15, 16, 17, 18]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDIIIIIIIIII\"",
        "output": "[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]"
      },
      {
        "input": "s = \"IIDIDIDIDIDIDIDIDIDIDIDIDIDID\"",
        "output": "[1, 2, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29]"
      },
      {
        "input": "s = \"IIIIIIIDIDID\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 9, 8, 11, 10, 13, 12]"
      },
      {
        "input": "s = \"IDDDDDIDID\"",
        "output": "[1, 7, 6, 5, 4, 3, 2, 9, 8, 11, 10]"
      },
      {
        "input": "s = \"IDDDIDIDIDIDI\"",
        "output": "[1, 5, 4, 3, 2, 7, 6, 9, 8, 11, 10, 13, 12, 14]"
      },
      {
        "input": "s = \"IIDDDDDDIIIIIIIII\"",
        "output": "[1, 2, 9, 8, 7, 6, 5, 4, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18]"
      },
      {
        "input": "s = \"DIIDIIDIDI\"",
        "output": "[2, 1, 3, 5, 4, 6, 8, 7, 10, 9, 11]"
      },
      {
        "input": "s = \"DDIDIDIDID\"",
        "output": "[3, 2, 1, 5, 4, 7, 6, 9, 8, 11, 10]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDID\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48, 51, 50, 53, 52, 55, 54, 57, 56, 59, 58]"
      },
      {
        "input": "s = \"IIIIIDDDDDDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6]"
      },
      {
        "input": "s = \"IIIIIDDDDDDIIIIIDDDDDDIIIIIDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 12, 11, 10, 9, 8, 7, 6, 13, 14, 15, 16, 23, 22, 21, 20, 19, 18, 17, 24, 25, 26, 27, 33, 32, 31, 30, 29, 28]"
      },
      {
        "input": "s = \"DIIIIIIIIIIID\"",
        "output": "[2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13]"
      },
      {
        "input": "s = \"IIIIIDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 11, 10, 9, 8, 7, 6]"
      },
      {
        "input": "s = \"IDDDIIDDDIIDDDIID\"",
        "output": "[1, 5, 4, 3, 2, 6, 10, 9, 8, 7, 11, 15, 14, 13, 12, 16, 18, 17]"
      },
      {
        "input": "s = \"IDIDIDIDID\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10]"
      },
      {
        "input": "s = \"DDDDIIDDDD\"",
        "output": "[5, 4, 3, 2, 1, 6, 11, 10, 9, 8, 7]"
      },
      {
        "input": "s = \"IDDDDDDDDDDD\"",
        "output": "[1, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "s = \"DDIIIIIDDDDD\"",
        "output": "[3, 2, 1, 4, 5, 6, 7, 13, 12, 11, 10, 9, 8]"
      },
      {
        "input": "s = \"DDDDDDIIIIIIIIID\"",
        "output": "[7, 6, 5, 4, 3, 2, 1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDDDDDIIIIIIIIIIIIIIIIIIII\"",
        "output": "[21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]"
      },
      {
        "input": "s = \"DDDIIDDDDI\"",
        "output": "[4, 3, 2, 1, 5, 10, 9, 8, 7, 6, 11]"
      },
      {
        "input": "s = \"IIIDDDDDIII\"",
        "output": "[1, 2, 3, 9, 8, 7, 6, 5, 4, 10, 11, 12]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDI\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 16]"
      },
      {
        "input": "s = \"DDDDDDDIDIDIDIDIDID\"",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDID\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48, 51, 50, 53, 52, 55, 54, 57, 56, 59, 58, 61, 60, 63, 62, 65, 64, 67, 66, 69, 68, 71, 70, 73, 72]"
      },
      {
        "input": "s = \"DDIIIIIDDD\"",
        "output": "[3, 2, 1, 4, 5, 6, 7, 11, 10, 9, 8]"
      },
      {
        "input": "s = \"DDDDDIDIDIDIDID\"",
        "output": "[6, 5, 4, 3, 2, 1, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"",
        "output": "[65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DIDIDIDIDIDIDID\"",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDDDIIIIIIIIIIIIIIIIII\"",
        "output": "[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]"
      },
      {
        "input": "s = \"DDDDDD\"",
        "output": "[7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IDDDIIIDDIID\"",
        "output": "[1, 5, 4, 3, 2, 6, 7, 10, 9, 8, 11, 13, 12]"
      },
      {
        "input": "s = \"DDIDIDIDIDID\"",
        "output": "[3, 2, 1, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12]"
      },
      {
        "input": "s = \"IIIIIDDDDDIIII\"",
        "output": "[1, 2, 3, 4, 5, 11, 10, 9, 8, 7, 6, 12, 13, 14, 15]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIII\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]"
      },
      {
        "input": "s = \"DIIIIIDDDDDIIIIIDDDDDIIIIIDDDDDI\"",
        "output": "[2, 1, 3, 4, 5, 6, 12, 11, 10, 9, 8, 7, 13, 14, 15, 16, 22, 21, 20, 19, 18, 17, 23, 24, 25, 26, 32, 31, 30, 29, 28, 27, 33]"
      },
      {
        "input": "s = \"DDDDIDIDIDIDID\"",
        "output": "[5, 4, 3, 2, 1, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14]"
      },
      {
        "input": "s = \"DIDIDIDIDIDID\"",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13]"
      },
      {
        "input": "s = \"IIDDDDIIDDDD\"",
        "output": "[1, 2, 7, 6, 5, 4, 3, 8, 13, 12, 11, 10, 9]"
      },
      {
        "input": "s = \"DIDIDIDIDI\"",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 11]"
      },
      {
        "input": "s = \"DDDDIIIDID\"",
        "output": "[5, 4, 3, 2, 1, 6, 7, 9, 8, 11, 10]"
      },
      {
        "input": "s = \"IDIDDDDDDD\"",
        "output": "[1, 3, 2, 11, 10, 9, 8, 7, 6, 5, 4]"
      },
      {
        "input": "s = \"IIIIIIIIIDDDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 16, 15, 14, 13, 12, 11, 10]"
      },
      {
        "input": "s = \"DDIIIDDDDDIIIID\"",
        "output": "[3, 2, 1, 4, 5, 11, 10, 9, 8, 7, 6, 12, 13, 14, 16, 15]"
      },
      {
        "input": "s = \"DDIDIDI\"",
        "output": "[3, 2, 1, 5, 4, 7, 6, 8]"
      },
      {
        "input": "s = \"DDIIDDIDDDD\"",
        "output": "[3, 2, 1, 4, 7, 6, 5, 12, 11, 10, 9, 8]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDIDIDID\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDDDDDDDDDDD\"",
        "output": "[27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DDDDDIDDDDDIDDDD\"",
        "output": "[6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7, 17, 16, 15, 14, 13]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDD\"",
        "output": "[14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IIDDDDDIIID\"",
        "output": "[1, 2, 8, 7, 6, 5, 4, 3, 9, 10, 12, 11]"
      },
      {
        "input": "s = \"IDDDDDDDDDIIIIIII\"",
        "output": "[1, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 12, 13, 14, 15, 16, 17, 18]"
      },
      {
        "input": "s = \"IIDDIIIIDDDIDDD\"",
        "output": "[1, 2, 5, 4, 3, 6, 7, 8, 12, 11, 10, 9, 16, 15, 14, 13]"
      },
      {
        "input": "s = \"IIIIIIIIIII\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
      },
      {
        "input": "s = \"DDDDDDIIII\"",
        "output": "[7, 6, 5, 4, 3, 2, 1, 8, 9, 10, 11]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDII\"",
        "output": "[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 16, 17]"
      },
      {
        "input": "s = \"DIDIDIDIDIDIDIII\"",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 15, 16, 17]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDID\"",
        "output": "[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 15, 14]"
      },
      {
        "input": "s = \"DIDIDIDIDID\"",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11]"
      },
      {
        "input": "s = \"IIIIIDDDDDDIIIID\"",
        "output": "[1, 2, 3, 4, 5, 12, 11, 10, 9, 8, 7, 6, 13, 14, 15, 17, 16]"
      },
      {
        "input": "s = \"DDIDIDIDIDIDIDIDIDIDIDIDID\"",
        "output": "[3, 2, 1, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26]"
      },
      {
        "input": "s = \"DDDIIDDDDDDDDDDI\"",
        "output": "[4, 3, 2, 1, 5, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 17]"
      },
      {
        "input": "s = \"IIIIDDDDDDD\"",
        "output": "[1, 2, 3, 4, 12, 11, 10, 9, 8, 7, 6, 5]"
      },
      {
        "input": "s = \"DDDDDDDDDDD\"",
        "output": "[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IIIIII\"",
        "output": "[1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "s = \"DDDDDDIIIIIIID\"",
        "output": "[7, 6, 5, 4, 3, 2, 1, 8, 9, 10, 11, 12, 13, 15, 14]"
      },
      {
        "input": "s = \"IDDDDDDDDIIDIDID\"",
        "output": "[1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 11, 13, 12, 15, 14, 17, 16]"
      },
      {
        "input": "s = \"DDIIIIIIIIIDDDDD\"",
        "output": "[3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 17, 16, 15, 14, 13, 12]"
      },
      {
        "input": "s = \"DDIIIDDDII\"",
        "output": "[3, 2, 1, 4, 5, 9, 8, 7, 6, 10, 11]"
      },
      {
        "input": "s = \"DIDIDIDIDIDIDIDIDIDI\"",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 21]"
      },
      {
        "input": "s = \"IDDIDIDIDIDID\"",
        "output": "[1, 4, 3, 2, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13]"
      },
      {
        "input": "s = \"DDDDDIIIIIIIDDD\"",
        "output": "[6, 5, 4, 3, 2, 1, 7, 8, 9, 10, 11, 12, 16, 15, 14, 13]"
      },
      {
        "input": "s = \"IIDDDDDIII\"",
        "output": "[1, 2, 8, 7, 6, 5, 4, 3, 9, 10, 11]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDIIIIIIIIIIIII\"",
        "output": "[14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]"
      },
      {
        "input": "s = \"IIDDDDIIDID\"",
        "output": "[1, 2, 7, 6, 5, 4, 3, 8, 10, 9, 12, 11]"
      },
      {
        "input": "s = \"IDDDDDDDDD\"",
        "output": "[1, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "s = \"IIIIIIIIIIID\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12]"
      },
      {
        "input": "s = \"DDDIIIDDDD\"",
        "output": "[4, 3, 2, 1, 5, 6, 11, 10, 9, 8, 7]"
      },
      {
        "input": "s = \"IIDDIDDDIIDD\"",
        "output": "[1, 2, 5, 4, 3, 9, 8, 7, 6, 10, 13, 12, 11]"
      },
      {
        "input": "s = \"IIDDDDDDDD\"",
        "output": "[1, 2, 11, 10, 9, 8, 7, 6, 5, 4, 3]"
      },
      {
        "input": "s = \"IIIIIIIII\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "s = \"DDDDDIIDIDDDD\"",
        "output": "[6, 5, 4, 3, 2, 1, 7, 9, 8, 14, 13, 12, 11, 10]"
      },
      {
        "input": "s = \"DDDDIIIIIDDD\"",
        "output": "[5, 4, 3, 2, 1, 6, 7, 8, 9, 13, 12, 11, 10]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDIDDD\"",
        "output": "[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 17, 16, 15, 14]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDDDDDDD\"",
        "output": "[23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DDDDDIIIIIIIDDDD\"",
        "output": "[6, 5, 4, 3, 2, 1, 7, 8, 9, 10, 11, 12, 17, 16, 15, 14, 13]"
      },
      {
        "input": "s = \"IIIIIDDDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 13, 12, 11, 10, 9, 8, 7, 6]"
      },
      {
        "input": "s = \"IIIIIIIDDDDDDDDD\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDIDIDIDIDIDIDI\"",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 28]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDDDI\"",
        "output": "[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 20]"
      },
      {
        "input": "s = \"DDDDIIIIIIIIIDDD\"",
        "output": "[5, 4, 3, 2, 1, 6, 7, 8, 9, 10, 11, 12, 13, 17, 16, 15, 14]"
      },
      {
        "input": "s = \"IDIDDDDDDDDDDI\"",
        "output": "[1, 3, 2, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 15]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIID\"",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40]"
      },
      {
        "input": "s = \"IIDDDDDDDDDDII\"",
        "output": "[1, 2, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 14, 15]"
      }
    ]
  },
  {
    "id": 1055,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Two Pointers",
      "String",
      "Binary Search"
    ],
    "problemDescription": "A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\nGiven two strings source and target, return the minimum number of subsequences of source such that their concatenation equals target. If the task is impossible, return -1.\n\u00a0\nExample 1:\n\nInput: source = \"abc\", target = \"abcbc\"\nOutput: 2\nExplanation: The target \"abcbc\" can be formed by \"abc\" and \"bc\", which are subsequences of source \"abc\".\n\nExample 2:\n\nInput: source = \"abc\", target = \"acdbc\"\nOutput: -1\nExplanation: The target string cannot be constructed from the subsequences of source string due to the character \"d\" in target string.\n\nExample 3:\n\nInput: source = \"xyz\", target = \"xzyxz\"\nOutput: 3\nExplanation: The target string can be constructed as follows \"xz\" + \"y\" + \"xz\".\n\n\u00a0\nConstraints:\n\n1 <= source.length, target.length <= 1000\nsource and target consist of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def shortestWay(self, source: str, target: str) -> int:\n        ",
    "testCases": [
      {
        "input": "source = \"abcd\", target = \"dddbbbccccaaa\"",
        "output": "12"
      },
      {
        "input": "source = \"a\", target = \"a\"",
        "output": "1"
      },
      {
        "input": "source = \"xyz\", target = \"xyzxyz\"",
        "output": "2"
      },
      {
        "input": "source = \"abcd\", target = \"abcabcdabcd\"",
        "output": "3"
      },
      {
        "input": "source = \"\", target = \"a\"",
        "output": "-1"
      },
      {
        "input": "source = \"abcd\", target = \"dabcd\"",
        "output": "2"
      },
      {
        "input": "source = \"abc\", target = \"abcbc\"",
        "output": "2"
      },
      {
        "input": "source = \"abcd\", target = \"ababd\"",
        "output": "2"
      },
      {
        "input": "source = \"xyz\", target = \"zzz\"",
        "output": "3"
      },
      {
        "input": "source = \"adbc\", target = \"abcd\"",
        "output": "2"
      },
      {
        "input": "source = \"xyz\", target = \"xzyxz\"",
        "output": "3"
      },
      {
        "input": "source = \"abcd\", target = \"da\"",
        "output": "2"
      },
      {
        "input": "source = \"abcde\", target = \"edcba\"",
        "output": "5"
      },
      {
        "input": "source = \"ab\", target = \"bab\"",
        "output": "2"
      },
      {
        "input": "source = \"abcd\", target = \"a\"",
        "output": "1"
      },
      {
        "input": "source = \"abc\", target = \"\"",
        "output": "0"
      },
      {
        "input": "source = \"abc\", target = \"cba\"",
        "output": "3"
      },
      {
        "input": "source = \"a\", target = \"aaaa\"",
        "output": "4"
      },
      {
        "input": "source = \"abcd\", target = \"\"",
        "output": "0"
      },
      {
        "input": "source = \"ab\", target = \"bababababa\"",
        "output": "6"
      },
      {
        "input": "source = \"abcd\", target = \"abc\"",
        "output": "1"
      },
      {
        "input": "source = \"abcd\", target = \"aabbccdd\"",
        "output": "5"
      },
      {
        "input": "source = \"a\", target = \"aa\"",
        "output": "2"
      },
      {
        "input": "source = \"ab\", target = \"bba\"",
        "output": "3"
      },
      {
        "input": "source = \"abcd\", target = \"ddcba\"",
        "output": "5"
      },
      {
        "input": "source = \"abc\", target = \"acdbc\"",
        "output": "-1"
      },
      {
        "input": "source = \"zzz\", target = \"zzzzz\"",
        "output": "2"
      },
      {
        "input": "source = \"abcde\", target = \"cbabcde\"",
        "output": "3"
      },
      {
        "input": "source = \"abcde\", target = \"eabcd\"",
        "output": "2"
      },
      {
        "input": "source = \"abcd\", target = \"dddd\"",
        "output": "4"
      },
      {
        "input": "source = \"a\", target = \"b\"",
        "output": "-1"
      },
      {
        "input": "source = \"abcd\", target = \"abcabcabc\"",
        "output": "3"
      },
      {
        "input": "source = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", target = \"zzyyxxwwvvuuttrrssqqppoonnmmllkkjjiihhggffeeddccbbaa\"",
        "output": "25"
      },
      {
        "input": "source = \"abc\", target = \"aabcbcbabccbaabbccba\"",
        "output": "13"
      },
      {
        "input": "source = \"mnop\", target = \"ponmponmponmponm\"",
        "output": "13"
      },
      {
        "input": "source = \"xyz\", target = \"xyzzxyzzxyzz\"",
        "output": "6"
      },
      {
        "input": "source = \"qwertyuiopasdfghjklzxcvbnm\", target = \"mlkjihgfedcbapoiuytrewq\"",
        "output": "19"
      },
      {
        "input": "source = \"abcdefghijklmnopqrstuvwxyz\", target = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "3"
      },
      {
        "input": "source = \"abacabadabacaba\", target = \"abacabadabacabadabacabadabacabad\"",
        "output": "4"
      },
      {
        "input": "source = \"source\", target = \"target\"",
        "output": "-1"
      },
      {
        "input": "source = \"abcd\", target = \"dcbaabcdabcd\"",
        "output": "6"
      },
      {
        "input": "source = \"aabbcc\", target = \"abababcbcbccba\"",
        "output": "7"
      },
      {
        "input": "source = \"xyz\", target = \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\"",
        "output": "10"
      },
      {
        "input": "source = \"zxy\", target = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "34"
      },
      {
        "input": "source = \"abcd\", target = \"ddddccbbbaaa\"",
        "output": "12"
      },
      {
        "input": "source = \"abac\", target = \"abacabacabac\"",
        "output": "3"
      },
      {
        "input": "source = \"mnopqr\", target = \"mnopqrnopqrmonpqrmnopqrmno\"",
        "output": "6"
      },
      {
        "input": "source = \"abcabcabcabc\", target = \"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\"",
        "output": "17"
      },
      {
        "input": "source = \"abcdefg\", target = \"gfedcba\"",
        "output": "7"
      },
      {
        "input": "source = \"abcde\", target = \"abcabcabc\"",
        "output": "3"
      },
      {
        "input": "source = \"mnopqr\", target = \"qrpqrpmnopqm\"",
        "output": "5"
      },
      {
        "input": "source = \"hello\", target = \"hellohellohello\"",
        "output": "3"
      },
      {
        "input": "source = \"abcdabcd\", target = \"dcbaabcdabcd\"",
        "output": "3"
      },
      {
        "input": "source = \"abcde\", target = \"ecbaecba\"",
        "output": "7"
      },
      {
        "input": "source = \"abcabc\", target = \"aaaaaaabbbbbbcccccc\"",
        "output": "9"
      },
      {
        "input": "source = \"abc\", target = \"acbacbacbacbacbacbacbacb\"",
        "output": "16"
      },
      {
        "input": "source = \"xyz\", target = \"xzyzxzyzxzyzxzyzxzyz\"",
        "output": "10"
      },
      {
        "input": "source = \"xyz\", target = \"xyzxyzxyzxyz\"",
        "output": "4"
      },
      {
        "input": "source = \"abcdabcd\", target = \"dcbaabcd\"",
        "output": "3"
      },
      {
        "input": "source = \"abcdefg\", target = \"gfedcbagfedcbagfedcbagfedcbagfedcba\"",
        "output": "31"
      },
      {
        "input": "source = \"mnopqr\", target = \"qrstmnopqrnopqrmnqr\"",
        "output": "-1"
      },
      {
        "input": "source = \"xyzzyx\", target = \"zyxzyxzyxzyxzyx\"",
        "output": "5"
      },
      {
        "input": "source = \"abcdabcdabcdabcd\", target = \"ddddccccbbbaaaa\"",
        "output": "4"
      },
      {
        "input": "source = \"abcdef\", target = \"fedcbafedcbafedcba\"",
        "output": "16"
      },
      {
        "input": "source = \"abcdefg\", target = \"gfedcbagfedcbagfedcbagfedcbagfedcbagfedcba\"",
        "output": "37"
      },
      {
        "input": "source = \"source\", target = \"targesourcetarge\"",
        "output": "-1"
      },
      {
        "input": "source = \"zzzzzz\", target = \"zzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "4"
      },
      {
        "input": "source = \"abc\", target = \"cbbacbacbacbacbacbacbacb\"",
        "output": "17"
      },
      {
        "input": "source = \"xyz\", target = \"zyxzyxzyxzyxzyxzyx\"",
        "output": "13"
      },
      {
        "input": "source = \"abcd\", target = \"ddddaaaabbbcc\"",
        "output": "11"
      },
      {
        "input": "source = \"abcd\", target = \"dddddddd\"",
        "output": "8"
      },
      {
        "input": "source = \"mnopqr\", target = \"mnopqrnopqr\"",
        "output": "2"
      },
      {
        "input": "source = \"abcde\", target = \"aaaabbbcccdddeeee\"",
        "output": "13"
      },
      {
        "input": "source = \"aaaaa\", target = \"aaaaaaaaaaa\"",
        "output": "3"
      },
      {
        "input": "source = \"a\", target = \"aaaaaaaaaa\"",
        "output": "10"
      },
      {
        "input": "source = \"abcdef\", target = \"fedcbafedcba\"",
        "output": "11"
      },
      {
        "input": "source = \"abcdefgh\", target = \"aehgfbcd\"",
        "output": "4"
      },
      {
        "input": "source = \"abracadabra\", target = \"cadabraabra\"",
        "output": "2"
      },
      {
        "input": "source = \"abcd\", target = \"dcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcb\"",
        "output": "66"
      },
      {
        "input": "source = \"abcdefg\", target = \"gfedcbaabcdefgabcdefg\"",
        "output": "9"
      },
      {
        "input": "source = \"abcabcabc\", target = \"abc\"",
        "output": "1"
      },
      {
        "input": "source = \"abcdefg\", target = \"gfedcbaedcbafe\"",
        "output": "12"
      },
      {
        "input": "source = \"xyz\", target = \"xyzxyzxyzxyzxyzxyzxyz\"",
        "output": "7"
      },
      {
        "input": "source = \"abc\", target = \"acbacbacb\"",
        "output": "6"
      },
      {
        "input": "source = \"xyzz\", target = \"xyzzxyzzxyzz\"",
        "output": "3"
      },
      {
        "input": "source = \"abcdefg\", target = \"ggfeeedcba\"",
        "output": "10"
      },
      {
        "input": "source = \"qwerty\", target = \"rteyqwrteyqw\"",
        "output": "5"
      },
      {
        "input": "source = \"abcdef\", target = \"fedcbafedcbafedcbafedcba\"",
        "output": "21"
      },
      {
        "input": "source = \"sourcestring\", target = \"targetstring\"",
        "output": "-1"
      },
      {
        "input": "source = \"hello\", target = \"ohellhello\"",
        "output": "3"
      },
      {
        "input": "source = \"abcdefg\", target = \"abcdefgabcdefgabcdefg\"",
        "output": "3"
      },
      {
        "input": "source = \"z\", target = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "44"
      },
      {
        "input": "source = \"abcdefg\", target = \"fgfedcba\"",
        "output": "7"
      },
      {
        "input": "source = \"abcde\", target = \"edcbaedcba\"",
        "output": "9"
      },
      {
        "input": "source = \"xyzxyz\", target = \"zyxzyxzyxzyx\"",
        "output": "5"
      },
      {
        "input": "source = \"abcdefghij\", target = \"aabbccddeeffgghhiijj\"",
        "output": "11"
      },
      {
        "input": "source = \"aaaa\", target = \"aaaaab\"",
        "output": "-1"
      },
      {
        "input": "source = \"aabbcc\", target = \"abcabcabc\"",
        "output": "3"
      },
      {
        "input": "source = \"aaaa\", target = \"aaaaaaaaaaaaaa\"",
        "output": "4"
      },
      {
        "input": "source = \"abcde\", target = \"ababcbcababc\"",
        "output": "5"
      },
      {
        "input": "source = \"abcd\", target = \"dcbadcba\"",
        "output": "7"
      },
      {
        "input": "source = \"abcdef\", target = \"fdecbaedcba\"",
        "output": "9"
      },
      {
        "input": "source = \"pqrs\", target = \"psqprqspqs\"",
        "output": "5"
      },
      {
        "input": "source = \"qwertyuiop\", target = \"yuiopqwertyuiop\"",
        "output": "2"
      },
      {
        "input": "source = \"abcdefgh\", target = \"hgfedcba\"",
        "output": "8"
      },
      {
        "input": "source = \"abc\", target = \"cababc\"",
        "output": "3"
      },
      {
        "input": "source = \"aabbccdd\", target = \"aabbccddaabbccddaabbccdd\"",
        "output": "3"
      },
      {
        "input": "source = \"abc\", target = \"cabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "12"
      },
      {
        "input": "source = \"abcde\", target = \"deabcdeabcdeabcde\"",
        "output": "4"
      },
      {
        "input": "source = \"xyxyxyxyxy\", target = \"yyyyxxxxxx\"",
        "output": "2"
      },
      {
        "input": "source = \"a\", target = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "110"
      },
      {
        "input": "source = \"qwertyuiop\", target = \"poiuytrewqpoiuytrewqpoiuytrewq\"",
        "output": "28"
      },
      {
        "input": "source = \"source\", target = \"sourcesourcesource\"",
        "output": "3"
      },
      {
        "input": "source = \"abc\", target = \"caabbcccbaa\"",
        "output": "9"
      },
      {
        "input": "source = \"aabbcc\", target = \"abcabcabcaabbcc\"",
        "output": "4"
      },
      {
        "input": "source = \"abc\", target = \"aaaaaaaaabbbbbbbbbbcccccccccc\"",
        "output": "27"
      },
      {
        "input": "source = \"abc\", target = \"aaaaabbbbbcccc\"",
        "output": "12"
      },
      {
        "input": "source = \"sourcestring\", target = \"stringsources\"",
        "output": "2"
      },
      {
        "input": "source = \"abcdefghij\", target = \"jihgfedcbaedcbafedcbaedcbafedcbaedcbaedcba\"",
        "output": "36"
      },
      {
        "input": "source = \"abacabadabacaba\", target = \"abadabadabadaba\"",
        "output": "3"
      },
      {
        "input": "source = \"abcdef\", target = \"ababababab\"",
        "output": "5"
      },
      {
        "input": "source = \"zzz\", target = \"zzzzzzzzzzzzzzzzzzzz\"",
        "output": "7"
      },
      {
        "input": "source = \"xyzxyzxyz\", target = \"zyxzyxzyxzyxzyxzyxzyxzyxzyxzyx\"",
        "output": "7"
      },
      {
        "input": "source = \"xyzz\", target = \"xyzzyxyzzxyzzy\"",
        "output": "5"
      },
      {
        "input": "source = \"mnopqr\", target = \"qponmlqponml\"",
        "output": "-1"
      },
      {
        "input": "source = \"mnopqr\", target = \"nopqmnopqmonpqmonpqmonpq\"",
        "output": "8"
      },
      {
        "input": "source = \"mnopqr\", target = \"ponmqrponmqrponmqrponmr\"",
        "output": "16"
      },
      {
        "input": "source = \"mnop\", target = \"mnonpmnmonponmpnonpmnon\"",
        "output": "12"
      },
      {
        "input": "source = \"abc\", target = \"abccbaabccba\"",
        "output": "8"
      },
      {
        "input": "source = \"ab\", target = \"bababababababab\"",
        "output": "8"
      },
      {
        "input": "source = \"abcdefg\", target = \"gfedcbaedcbaedcbaedcbaedcba\"",
        "output": "23"
      },
      {
        "input": "source = \"abcdabcd\", target = \"abcdabcdabcdabcd\"",
        "output": "2"
      },
      {
        "input": "source = \"aabbcc\", target = \"abacabacbacb\"",
        "output": "7"
      },
      {
        "input": "source = \"zyxwvutsrqponmlkjihgfedcba\", target = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "26"
      },
      {
        "input": "source = \"abcd\", target = \"abcdabcdabcd\"",
        "output": "3"
      },
      {
        "input": "source = \"abcd\", target = \"abcde\"",
        "output": "-1"
      },
      {
        "input": "source = \"abcdef\", target = \"fedcbaabcdeffedcba\"",
        "output": "13"
      },
      {
        "input": "source = \"aabbcc\", target = \"abcabcabcabc\"",
        "output": "4"
      },
      {
        "input": "source = \"abcdef\", target = \"fdecbaabcdef\"",
        "output": "6"
      },
      {
        "input": "source = \"mnopqr\", target = \"mnopmnopqr\"",
        "output": "2"
      },
      {
        "input": "source = \"abcd\", target = \"abdbacd\"",
        "output": "3"
      },
      {
        "input": "source = \"ab\", target = \"abababababababababababababab\"",
        "output": "14"
      },
      {
        "input": "source = \"a\", target = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "40"
      },
      {
        "input": "source = \"abcde\", target = \"edcbaedcbaedcba\"",
        "output": "13"
      },
      {
        "input": "source = \"abc\", target = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "-1"
      },
      {
        "input": "source = \"abcdefghijklmnopqrstuvwxyz\", target = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "26"
      },
      {
        "input": "source = \"mnopqr\", target = \"pnmlqrpnmlqr\"",
        "output": "-1"
      },
      {
        "input": "source = \"ab\", target = \"bababababab\"",
        "output": "6"
      },
      {
        "input": "source = \"abcabcabcabc\", target = \"ccccbbbbaaaacccbbbbaaaacccbbbbaaaacccbbbbaaa\"",
        "output": "11"
      },
      {
        "input": "source = \"aaabbbccc\", target = \"abcabcabcabcabcabc\"",
        "output": "6"
      },
      {
        "input": "source = \"aabbcc\", target = \"acbacbacbacbacbacbacbacb\"",
        "output": "16"
      },
      {
        "input": "source = \"abcd\", target = \"ddbaccbbadab\"",
        "output": "9"
      },
      {
        "input": "source = \"abcdefghij\", target = \"jihgfedcbaabcdefghijabcdefghij\"",
        "output": "12"
      },
      {
        "input": "source = \"xyz\", target = \"zyxzyxzyx\"",
        "output": "7"
      },
      {
        "input": "source = \"abcdefg\", target = \"afgeabfg\"",
        "output": "3"
      },
      {
        "input": "source = \"abcabcabc\", target = \"abcabcabcabc\"",
        "output": "2"
      },
      {
        "input": "source = \"abcabcabc\", target = \"abcabcabcabcabc\"",
        "output": "2"
      },
      {
        "input": "source = \"abcd\", target = \"abcdabcdabcdabcdabcd\"",
        "output": "5"
      }
    ]
  },
  {
    "id": 2352,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Matrix",
      "Simulation"
    ],
    "problemDescription": "Given a 0-indexed n x n integer matrix grid, return the number of pairs (ri, cj) such that row ri and column cj are equal.\nA row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).\n\u00a0\nExample 1:\n\n\nInput: grid = [[3,2,1],[1,7,6],[2,7,7]]\nOutput: 1\nExplanation: There is 1 equal row and column pair:\n- (Row 2, Column 1): [2,7,7]\n\nExample 2:\n\n\nInput: grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]\nOutput: 3\nExplanation: There are 3 equal row and column pairs:\n- (Row 0, Column 0): [3,1,2,2]\n- (Row 2, Column 2): [2,4,2,2]\n- (Row 3, Column 2): [2,4,2,2]\n\n\u00a0\nConstraints:\n\nn == grid.length == grid[i].length\n1 <= n <= 200\n1 <= grid[i][j] <= 105\n\n",
    "starterCode": "class Solution:\n    def equalPairs(self, grid: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "grid = [[1,1,1],[1,1,1],[1,1,1]]",
        "output": "9"
      },
      {
        "input": "grid = [[5,5,5],[5,5,5],[5,5,5]]",
        "output": "9"
      },
      {
        "input": "grid = [[5]]",
        "output": "1"
      },
      {
        "input": "grid = [[1,2],[3,1],[2,3]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[3,2,1],[1,7,6],[2,7,7]]",
        "output": "1"
      },
      {
        "input": "grid = [[5,5,5,5],[5,5,5,5],[5,5,5,5],[5,5,5,5]]",
        "output": "16"
      },
      {
        "input": "grid = [[1,2,3],[3,2,1],[2,1,3]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]",
        "output": "16"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "0"
      },
      {
        "input": "grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]",
        "output": "3"
      },
      {
        "input": "grid = [[10,20,30],[30,20,10],[20,10,30]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,3,4,5,6],[6,5,4,3,2,1],[1,1,1,1,1,1],[2,3,4,5,6,7],[7,6,5,4,3,2],[2,2,2,2,2,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9],[3,6,9],[1,5,9]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[5,5,5,5,5,5],[5,5,5,5,5,5],[5,5,5,5,5,5],[5,5,5,5,5,5],[5,5,5,5,5,5],[5,5,5,5,5,5]]",
        "output": "36"
      },
      {
        "input": "grid = [[9,8,7,6,5],[4,3,2,1,0],[5,0,5,0,5],[0,5,0,5,0],[7,3,9,5,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2],[2,1],[1,2],[2,1]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[5,5,5,5,5,5,5],[5,5,5,5,5,5,5],[5,5,5,5,5,5,5],[5,5,5,5,5,5,5],[5,5,5,5,5,5,5],[5,5,5,5,5,5,5],[5,5,5,5,5,5,5]]",
        "output": "49"
      },
      {
        "input": "grid = [[10,20,30,40],[40,30,20,10],[10,30,50,70],[70,50,30,10]]",
        "output": "0"
      },
      {
        "input": "grid = [[9,8,7,6,5],[8,7,6,5,4],[7,6,5,4,3],[6,5,4,3,2],[5,4,3,2,1]]",
        "output": "5"
      },
      {
        "input": "grid = [[100000,1,2,3],[1,100000,2,3],[2,1,100000,3],[3,2,1,100000]]",
        "output": "1"
      },
      {
        "input": "grid = [[7,8,9,10],[10,9,8,7],[7,7,7,7],[1,2,3,4]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,9]]",
        "output": "5"
      },
      {
        "input": "grid = [[42,42,42],[42,42,42],[42,42,42],[42,42,42],[42,42,42]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,2,3,4],[2,3,4,5],[3,4,5,6],[4,5,6,7]]",
        "output": "4"
      },
      {
        "input": "grid = [[5,1,9,1,5],[1,5,1,5,1],[9,1,5,1,9],[1,5,1,5,1],[5,1,9,1,5]]",
        "output": "9"
      },
      {
        "input": "grid = [[1,2,3,4],[2,1,4,3],[3,4,1,2],[4,3,2,1]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,2,3,4],[2,3,4,1],[3,4,1,2],[4,1,2,3]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,1,2,2,3,3,4,4],[4,4,3,3,2,2,1,1],[2,2,1,1,4,4,3,3],[3,3,4,4,1,1,2,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[5,6,7,8,9],[9,8,7,6,5],[5,5,5,5,5],[1,2,3,4,5],[9,7,5,3,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,3,4],[2,3,4,5],[3,4,5,6],[4,5,6,7],[5,6,7,8]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]",
        "output": "25"
      },
      {
        "input": "grid = [[7,8,9,10],[8,9,10,7],[9,10,7,8],[10,7,8,9]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,2,3],[2,3,1],[3,1,2],[1,2,3],[2,3,1]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[100,101,102,103,104,105],[105,104,103,102,101,100],[100,102,104,106,108,110],[110,108,106,104,102,100],[101,103,105,107,109,111],[111,109,107,105,103,101]]",
        "output": "0"
      },
      {
        "input": "grid = [[7,8,9],[8,7,6],[9,6,7],[7,9,8]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1],[2,3,4,5,6,7,8,9,1],[1,9,2,8,3,7,4,6,5]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,1],[2,1,2],[1,2,1]]",
        "output": "5"
      },
      {
        "input": "grid = [[1,2,3,4,5],[5,4,3,2,1],[1,1,1,1,1],[2,3,4,5,6],[6,5,4,3,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1],[1,3,5,7,9,11,13,15,17],[17,15,13,11,9,7,5,3,1],[1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3],[4,4,4,4,4,4,4,4,4],[5,5,5,5,5,5,5,5,5]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,11,13,15,17,19],[19,17,15,13,11,9,7,5,3,1],[1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3,3],[4,4,4,4,4,4,4,4,4,4],[5,5,5,5,5,5,5,5,5,5],[6,6,6,6,6,6,6,6,6,6]]",
        "output": "0"
      },
      {
        "input": "grid = [[7,7,7,7,7,7],[7,7,7,7,7,7],[7,7,7,7,7,7],[7,7,7,7,7,7],[7,7,7,7,7,7],[7,7,7,7,7,7]]",
        "output": "36"
      },
      {
        "input": "grid = [[1,2,3,4,5],[2,3,4,5,1],[3,4,5,1,2],[4,5,1,2,3],[5,1,2,3,4]]",
        "output": "5"
      },
      {
        "input": "grid = [[7,8,9],[9,7,8],[8,9,7]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,1,1,1,1,1,1,1,1,1],[2,3,4,5,6,7,8,9,10,11],[11,10,9,8,7,6,5,4,3,2],[3,4,5,6,7,8,9,10,11,12],[12,11,10,9,8,7,6,5,4,3],[4,5,6,7,8,9,10,11,12,13],[13,12,11,10,9,8,7,6,5,4],[5,6,7,8,9,10,11,12,13,14]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,5,9,13],[2,6,10,14],[3,7,11,15],[4,8,12,16]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2],[2,1],[1,2],[2,1],[1,2]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,1],[0,1,0],[1,0,1],[0,1,0]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,1,2,2],[2,2,1,1],[1,2,1,2],[2,1,2,1]]",
        "output": "2"
      },
      {
        "input": "grid = [[1,2,1,2],[2,1,2,1],[1,2,1,2],[2,1,2,1]]",
        "output": "8"
      },
      {
        "input": "grid = [[12345,67890,54321],[67890,54321,12345],[54321,12345,67890]]",
        "output": "3"
      },
      {
        "input": "grid = [[11,12,13,14],[15,16,17,18],[19,20,21,22],[14,18,22,26]]",
        "output": "1"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9],[1,2,3],[4,5,6]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[10,20,30,40,50],[20,30,40,50,10],[30,40,50,10,20],[40,50,10,20,30],[50,10,20,30,40]]",
        "output": "5"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[2,4,6,8,10,9,7,5,3,1],[1,3,5,7,9,10,8,6,4,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,3,4,5],[5,4,3,2,1],[1,3,5,7,9],[9,7,5,3,1],[2,4,6,8,10]]",
        "output": "0"
      },
      {
        "input": "grid = [[7,8,9],[9,7,8],[8,9,7],[7,8,9]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,2,1,2,1],[1,3,1,3,1],[1,4,1,4,1],[1,5,1,5,1]]",
        "output": "3"
      },
      {
        "input": "grid = [[100,200,300,400],[200,300,400,500],[300,400,500,600],[400,500,600,700]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "100"
      },
      {
        "input": "grid = [[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]]",
        "output": "36"
      },
      {
        "input": "grid = [[9,8,7,6],[8,7,6,5],[7,6,5,4],[6,5,4,3]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]",
        "output": "0"
      },
      {
        "input": "grid = [[11,22,33,44,55,66],[66,55,44,33,22,11],[11,11,11,11,11,11],[22,33,44,55,66,77],[77,66,55,44,33,22],[22,22,22,22,22,22]]",
        "output": "0"
      },
      {
        "input": "grid = [[5,6,7,8,9],[6,7,8,9,5],[7,8,9,5,6],[8,9,5,6,7],[9,5,6,7,8]]",
        "output": "5"
      },
      {
        "input": "grid = [[11,22,33,44,55],[55,44,33,22,11],[11,33,55,77,99],[99,77,55,33,11],[22,44,66,88,100]]",
        "output": "0"
      },
      {
        "input": "grid = [[4,3,2,1],[1,4,3,2],[2,1,4,3],[3,2,1,4]]",
        "output": "0"
      },
      {
        "input": "grid = [[100,200,300,400,500],[500,400,300,200,100],[100,300,500,700,900],[900,700,500,300,100],[100,100,100,100,100]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]",
        "output": "8"
      },
      {
        "input": "grid = [[7,8,9],[8,9,7],[9,7,8],[7,8,9],[8,9,7]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,1,2,1],[1,2,1,1],[2,1,1,1],[1,1,1,2]]",
        "output": "4"
      },
      {
        "input": "grid = [[100000,100000,100000],[100000,100000,100000],[100000,100000,100000]]",
        "output": "9"
      },
      {
        "input": "grid = [[1,0,0,1,0],[0,1,1,0,1],[0,1,1,0,1],[1,0,0,1,0],[0,1,1,0,1]]",
        "output": "13"
      },
      {
        "input": "grid = [[1,0,0,1],[0,1,1,0],[0,1,1,0],[1,0,0,1]]",
        "output": "8"
      },
      {
        "input": "grid = [[1,2,3,4,5],[5,4,3,2,1],[1,3,5,7,9],[9,7,5,3,1],[1,1,1,1,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,3,4],[4,3,2,1],[2,3,4,1],[3,4,1,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9],[1,2,3]]",
        "output": "Error: list index out of range"
      }
    ]
  },
  {
    "id": 869,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Math",
      "Counting",
      "Enumeration",
      "Sorting"
    ],
    "problemDescription": "You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.\nReturn true if and only if we can do this so that the resulting number is a power of two.\n\u00a0\nExample 1:\n\nInput: n = 1\nOutput: true\n\nExample 2:\n\nInput: n = 10\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= n <= 109\n\n",
    "starterCode": "class Solution:\n    def reorderedPowerOf2(self, n: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "n = 46875",
        "output": "False"
      },
      {
        "input": "n = 3245",
        "output": "False"
      },
      {
        "input": "n = 86",
        "output": "False"
      },
      {
        "input": "n = 10",
        "output": "False"
      },
      {
        "input": "n = 4326",
        "output": "False"
      },
      {
        "input": "n = 16",
        "output": "True"
      },
      {
        "input": "n = 82084",
        "output": "False"
      },
      {
        "input": "n = 1024",
        "output": "True"
      },
      {
        "input": "n = 128",
        "output": "True"
      },
      {
        "input": "n = 821",
        "output": "True"
      },
      {
        "input": "n = 8192",
        "output": "True"
      },
      {
        "input": "n = 65536",
        "output": "True"
      },
      {
        "input": "n = 46",
        "output": "True"
      },
      {
        "input": "n = 256",
        "output": "True"
      },
      {
        "input": "n = 1000000000",
        "output": "False"
      },
      {
        "input": "n = 24",
        "output": "False"
      },
      {
        "input": "n = 987654321",
        "output": "False"
      },
      {
        "input": "n = 512",
        "output": "True"
      },
      {
        "input": "n = 4102",
        "output": "True"
      },
      {
        "input": "n = 1",
        "output": "True"
      },
      {
        "input": "n = 462",
        "output": "False"
      },
      {
        "input": "n = 862467834",
        "output": "False"
      },
      {
        "input": "n = 8258",
        "output": "False"
      },
      {
        "input": "n = 2097152",
        "output": "True"
      },
      {
        "input": "n = 786432",
        "output": "False"
      },
      {
        "input": "n = 3145728",
        "output": "False"
      },
      {
        "input": "n = 885842624",
        "output": "False"
      },
      {
        "input": "n = 999999999",
        "output": "False"
      },
      {
        "input": "n = 2359296",
        "output": "False"
      },
      {
        "input": "n = 67108864",
        "output": "True"
      },
      {
        "input": "n = 4096",
        "output": "True"
      },
      {
        "input": "n = 891891891",
        "output": "False"
      },
      {
        "input": "n = 2147483647",
        "output": "False"
      },
      {
        "input": "n = 8256",
        "output": "False"
      },
      {
        "input": "n = 683184",
        "output": "False"
      },
      {
        "input": "n = 536870912",
        "output": "True"
      },
      {
        "input": "n = 111222333",
        "output": "False"
      },
      {
        "input": "n = 524288",
        "output": "True"
      },
      {
        "input": "n = 82944",
        "output": "False"
      },
      {
        "input": "n = 94371840",
        "output": "False"
      },
      {
        "input": "n = 16384",
        "output": "True"
      },
      {
        "input": "n = 393216",
        "output": "False"
      },
      {
        "input": "n = 16777216",
        "output": "True"
      },
      {
        "input": "n = 258048",
        "output": "False"
      },
      {
        "input": "n = 125874",
        "output": "False"
      },
      {
        "input": "n = 78125",
        "output": "False"
      },
      {
        "input": "n = 1024576",
        "output": "False"
      },
      {
        "input": "n = 2415919",
        "output": "False"
      },
      {
        "input": "n = 134217728",
        "output": "True"
      },
      {
        "input": "n = 46340",
        "output": "False"
      },
      {
        "input": "n = 9437184",
        "output": "False"
      },
      {
        "input": "n = 33554432",
        "output": "True"
      },
      {
        "input": "n = 900000000",
        "output": "False"
      },
      {
        "input": "n = 1073741824",
        "output": "False"
      },
      {
        "input": "n = 2176782336",
        "output": "False"
      },
      {
        "input": "n = 24681357",
        "output": "False"
      },
      {
        "input": "n = 333333333",
        "output": "False"
      },
      {
        "input": "n = 2621440",
        "output": "False"
      },
      {
        "input": "n = 1048576",
        "output": "True"
      },
      {
        "input": "n = 9876543210",
        "output": "False"
      },
      {
        "input": "n = 2048",
        "output": "True"
      },
      {
        "input": "n = 22448811",
        "output": "False"
      },
      {
        "input": "n = 112233445566778899",
        "output": "False"
      },
      {
        "input": "n = 327684",
        "output": "False"
      },
      {
        "input": "n = 18",
        "output": "False"
      },
      {
        "input": "n = 768",
        "output": "False"
      },
      {
        "input": "n = 196608",
        "output": "False"
      },
      {
        "input": "n = 27962028",
        "output": "False"
      },
      {
        "input": "n = 894784864",
        "output": "False"
      },
      {
        "input": "n = 43112",
        "output": "False"
      },
      {
        "input": "n = 262144",
        "output": "True"
      },
      {
        "input": "n = 131072",
        "output": "True"
      },
      {
        "input": "n = 82128",
        "output": "False"
      },
      {
        "input": "n = 111111111",
        "output": "False"
      },
      {
        "input": "n = 31415926",
        "output": "False"
      },
      {
        "input": "n = 499999999",
        "output": "False"
      },
      {
        "input": "n = 318666",
        "output": "False"
      },
      {
        "input": "n = 180",
        "output": "False"
      },
      {
        "input": "n = 8589934592",
        "output": "False"
      },
      {
        "input": "n = 32768",
        "output": "True"
      },
      {
        "input": "n = 3221225472",
        "output": "False"
      },
      {
        "input": "n = 4104",
        "output": "False"
      },
      {
        "input": "n = 35184372088832",
        "output": "False"
      },
      {
        "input": "n = 123456789",
        "output": "False"
      },
      {
        "input": "n = 555555",
        "output": "False"
      },
      {
        "input": "n = 4608",
        "output": "False"
      },
      {
        "input": "n = 8388608",
        "output": "True"
      }
    ]
  },
  {
    "id": 3169,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Sorting"
    ],
    "problemDescription": "You are given a positive integer days representing the total number of days an employee is available for work (starting from day 1). You are also given a 2D array meetings of size n where, meetings[i] = [start_i, end_i] represents the starting and ending days of meeting i (inclusive).\nReturn the count of days when the employee is available for work but no meetings are scheduled.\nNote: The meetings may overlap.\n\u00a0\nExample 1:\n\nInput: days = 10, meetings = [[5,7],[1,3],[9,10]]\nOutput: 2\nExplanation:\nThere is no meeting scheduled on the 4th and 8th days.\n\nExample 2:\n\nInput: days = 5, meetings = [[2,4],[1,3]]\nOutput: 1\nExplanation:\nThere is no meeting scheduled on the 5th day.\n\nExample 3:\n\nInput: days = 6, meetings = [[1,6]]\nOutput: 0\nExplanation:\nMeetings are scheduled for all working days.\n\n\u00a0\nConstraints:\n\n1 <= days <= 109\n1 <= meetings.length <= 105\nmeetings[i].length == 2\n1 <= meetings[i][0] <= meetings[i][1] <= days\n\n",
    "starterCode": "class Solution:\n    def countDays(self, days: int, meetings: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "days = 15, meetings = [[5,6],[6,7],[7,8]]",
        "output": "11"
      },
      {
        "input": "days = 10, meetings = [[5,7],[1,3],[9,10]]",
        "output": "2"
      },
      {
        "input": "days = 15, meetings = [[1,2],[3,5],[6,8],[10,12],[14,15]]",
        "output": "2"
      },
      {
        "input": "days = 20, meetings = [[5,10],[15,20]]",
        "output": "8"
      },
      {
        "input": "days = 5, meetings = [[2,4],[1,3]]",
        "output": "1"
      },
      {
        "input": "days = 7, meetings = [[1,2],[3,4],[5,6],[7,7]]",
        "output": "0"
      },
      {
        "input": "days = 30, meetings = [[1,5],[6,10],[11,15],[16,20],[21,25],[26,30]]",
        "output": "0"
      },
      {
        "input": "days = 10, meetings = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "5"
      },
      {
        "input": "days = 20, meetings = [[1,10],[15,20]]",
        "output": "4"
      },
      {
        "input": "days = 20, meetings = [[1,5],[10,15],[5,10]]",
        "output": "5"
      },
      {
        "input": "days = 6, meetings = [[1,6]]",
        "output": "0"
      },
      {
        "input": "days = 15, meetings = [[1,2],[3,5],[6,7],[8,10],[11,13],[14,15]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[1,10],[20,30],[40,50],[60,70],[80,90]]",
        "output": "46"
      },
      {
        "input": "days = 7, meetings = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[10,20],[30,40],[50,60]]",
        "output": "67"
      },
      {
        "input": "days = 25, meetings = [[5,15],[10,20]]",
        "output": "9"
      },
      {
        "input": "days = 15, meetings = [[2,5],[6,9],[12,13]]",
        "output": "5"
      },
      {
        "input": "days = 7, meetings = [[1,2],[3,4],[5,6]]",
        "output": "1"
      },
      {
        "input": "days = 1, meetings = [[1,1]]",
        "output": "0"
      },
      {
        "input": "days = 30, meetings = [[5,10],[15,20],[25,30]]",
        "output": "12"
      },
      {
        "input": "days = 20, meetings = [[1,2],[3,5],[8,10],[15,20]]",
        "output": "6"
      },
      {
        "input": "days = 100, meetings = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50]]",
        "output": "50"
      },
      {
        "input": "days = 50, meetings = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50]]",
        "output": "0"
      },
      {
        "input": "days = 1000, meetings = [[1,500],[501,1000],[250,750]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[35,40],[40,45],[45,50],[50,55],[55,60],[60,65],[65,70],[70,75],[75,80],[80,85],[85,90],[90,95],[95,100]]",
        "output": "4"
      },
      {
        "input": "days = 1000, meetings = [[100,200],[300,400],[500,600],[700,800],[900,1000]]",
        "output": "495"
      },
      {
        "input": "days = 1000000, meetings = [[1, 1000000]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[1,10],[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90],[90,100]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[1,3],[2,5],[3,7],[4,9],[5,11],[6,13],[7,15],[8,17],[9,19],[10,21],[11,23],[12,25],[13,27],[14,29],[15,31],[16,33],[17,35],[18,37],[19,39],[20,41],[21,43],[22,45],[23,47],[24,49],[25,51],[26,53],[27,55],[28,57],[29,59],[30,61],[31,63],[32,65],[33,67],[34,69],[35,71],[36,73],[37,75],[38,77],[39,79],[40,81],[41,83],[42,85],[43,87],[44,89],[45,91],[46,93],[47,95],[48,97],[49,99]]",
        "output": "1"
      },
      {
        "input": "days = 200, meetings = [[1,50],[51,100],[101,150],[151,200],[50,100],[100,150],[150,200],[1,100],[100,200],[1,200],[10,90],[20,80],[30,70],[40,60],[50,50],[60,60],[70,70],[80,80],[90,90]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[1,99],[2,98],[3,97],[4,96]]",
        "output": "1"
      },
      {
        "input": "days = 1000, meetings = [[1,200],[201,400],[401,600],[601,800],[801,1000]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[1,100]]",
        "output": "0"
      },
      {
        "input": "days = 1000000, meetings = [[1,1000000],[100000,200000],[200000,300000],[300000,400000],[400000,500000],[500000,600000],[600000,700000],[700000,800000],[800000,900000],[900000,1000000]]",
        "output": "0"
      },
      {
        "input": "days = 50, meetings = [[5,10],[8,12],[15,20],[18,22],[25,30],[28,32],[35,40],[38,42],[45,50]]",
        "output": "12"
      },
      {
        "input": "days = 1000, meetings = [[5, 10], [15, 20], [25, 30], [35, 40], [45, 50], [55, 60], [65, 70], [75, 80], [85, 90], [95, 100], [105, 110], [115, 120], [125, 130], [135, 140], [145, 150], [155, 160], [165, 170], [175, 180], [185, 190], [195, 200], [205, 210], [215, 220], [225, 230], [235, 240], [245, 250], [255, 260], [265, 270], [275, 280], [285, 290], [295, 300], [305, 310], [315, 320], [325, 330], [335, 340], [345, 350], [355, 360], [365, 370], [375, 380], [385, 390], [395, 400], [405, 410], [415, 420], [425, 430], [435, 440], [445, 450], [455, 460], [465, 470], [475, 480], [485, 490], [495, 500], [505, 510], [515, 520], [525, 530], [535, 540], [545, 550], [555, 560], [565, 570], [575, 580], [585, 590], [595, 600], [605, 610], [615, 620], [625, 630], [635, 640], [645, 650], [655, 660], [665, 670], [675, 680], [685, 690], [695, 700], [705, 710], [715, 720], [725, 730], [735, 740], [745, 750], [755, 760], [765, 770], [775, 780], [785, 790], [795, 800], [805, 810], [815, 820], [825, 830], [835, 840], [845, 850], [855, 860], [865, 870], [875, 880], [885, 890], [895, 900], [905, 910], [915, 920], [925, 930], [935, 940], [945, 950], [955, 960], [965, 970], [975, 980], [985, 990], [995, 1000]]",
        "output": "400"
      },
      {
        "input": "days = 200, meetings = [[1,2],[4,5],[7,8],[10,11],[13,14],[16,17],[19,20],[22,23],[25,26],[28,29],[31,32],[34,35],[37,38],[40,41],[43,44],[46,47],[49,50],[52,53],[55,56],[58,59],[61,62],[64,65],[67,68],[70,71],[73,74],[76,77],[79,80],[82,83],[85,86],[88,89],[91,92],[94,95],[97,98],[99,100],[101,102],[103,104],[105,106],[107,108],[109,110],[111,112],[113,114],[115,116],[117,118],[119,120],[121,122],[123,124],[125,126],[127,128],[129,130],[131,132],[133,134],[135,136],[137,138],[139,140],[141,142],[143,144],[145,146],[147,148],[149,150],[151,152],[153,154],[155,156],[157,158],[159,160],[161,162],[163,164],[165,166],[167,168],[169,170],[171,172],[173,174],[175,176],[177,178],[179,180],[181,182],[183,184],[185,186],[187,188],[189,190],[191,192],[193,194],[195,196],[197,198],[199,200]]",
        "output": "32"
      },
      {
        "input": "days = 1000000, meetings = [[1,500000],[500001,1000000]]",
        "output": "0"
      },
      {
        "input": "days = 1000, meetings = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]]",
        "output": "980"
      },
      {
        "input": "days = 500, meetings = [[1,10],[100,200],[300,400],[490,500]]",
        "output": "277"
      },
      {
        "input": "days = 100, meetings = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100]]",
        "output": "0"
      },
      {
        "input": "days = 500, meetings = [[1, 250], [200, 300], [400, 500]]",
        "output": "99"
      },
      {
        "input": "days = 1000000000, meetings = [[1, 500000000], [500000001, 1000000000]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100]]",
        "output": "0"
      },
      {
        "input": "days = 50, meetings = [[1,2],[3,5],[6,8],[9,11],[12,14],[15,17],[18,20],[21,23],[24,26],[27,29],[30,32],[33,35],[36,38],[39,41],[42,44],[45,47],[48,49]]",
        "output": "1"
      },
      {
        "input": "days = 1000000, meetings = [[1,3],[3,5],[5,7],[7,9],[9,11],[11,13],[13,15],[15,17],[17,19],[19,21]]",
        "output": "999979"
      },
      {
        "input": "days = 10, meetings = [[1, 10], [2, 3], [4, 5], [6, 7], [8, 9], [1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]",
        "output": "0"
      },
      {
        "input": "days = 1000, meetings = [[1,1000],[100,200],[200,300],[300,400],[400,500],[500,600],[600,700],[700,800],[800,900],[900,1000]]",
        "output": "0"
      },
      {
        "input": "days = 20, meetings = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15],[12,16],[13,17],[14,18],[15,19],[16,20]]",
        "output": "0"
      },
      {
        "input": "days = 50, meetings = [[1,10],[5,15],[10,20],[15,25],[20,30]]",
        "output": "20"
      },
      {
        "input": "days = 10, meetings = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]]",
        "output": "0"
      },
      {
        "input": "days = 500, meetings = [[1,100],[50,150],[100,200],[150,250],[200,300],[250,350],[300,400],[350,450],[400,500]]",
        "output": "0"
      },
      {
        "input": "days = 1000000, meetings = [[1,1000000]]",
        "output": "0"
      },
      {
        "input": "days = 1000, meetings = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14]]",
        "output": "986"
      },
      {
        "input": "days = 365, meetings = [[1, 10], [20, 25], [30, 35], [40, 45], [50, 55], [60, 65], [70, 75], [80, 85], [90, 95], [100, 105], [110, 115], [120, 125], [130, 135], [140, 145], [150, 155], [160, 165], [170, 175], [180, 185], [190, 195], [200, 205], [210, 215], [220, 225], [230, 235], [240, 245], [250, 255], [260, 265], [270, 275], [280, 285], [290, 295], [300, 305], [310, 315], [320, 325], [330, 335], [340, 345], [350, 355], [360, 365]]",
        "output": "145"
      },
      {
        "input": "days = 10, meetings = [[1,3],[3,5],[5,7],[7,9],[9,10]]",
        "output": "0"
      },
      {
        "input": "days = 1000000000, meetings = [[1,1000000000]]",
        "output": "0"
      },
      {
        "input": "days = 50, meetings = [[1,10],[11,20],[21,30],[31,40],[41,50],[5,15],[10,25],[20,35],[30,45],[40,50]]",
        "output": "0"
      },
      {
        "input": "days = 1000, meetings = [[1,3],[3,5],[5,7],[7,9],[9,11],[11,13],[13,15],[15,17],[17,19],[19,21]]",
        "output": "979"
      },
      {
        "input": "days = 365, meetings = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[185,185],[186,186],[187,187],[188,188],[189,189],[190,190],[191,191],[192,192],[193,193],[194,194],[195,195],[196,196],[197,197],[198,198],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[213,213],[214,214],[215,215],[216,216],[217,217],[218,218],[219,219],[220,220],[221,221],[222,222],[223,223],[224,224],[225,225],[226,226],[227,227],[228,228],[229,229],[230,230],[231,231],[232,232],[233,233],[234,234],[235,235],[236,236],[237,237],[238,238],[239,239],[240,240],[241,241],[242,242],[243,243],[244,244],[245,245],[246,246],[247,247],[248,248],[249,249],[250,250],[251,251],[252,252],[253,253],[254,254],[255,255],[256,256],[257,257],[258,258],[259,259],[260,260],[261,261],[262,262],[263,263],[264,264],[265,265],[266,266],[267,267],[268,268],[269,269],[270,270],[271,271],[272,272],[273,273],[274,274],[275,275],[276,276],[277,277],[278,278],[279,279],[280,280],[281,281],[282,282],[283,283],[284,284],[285,285],[286,286],[287,287],[288,288],[289,289],[290,290],[291,291],[292,292],[293,293],[294,294],[295,295],[296,296],[297,297],[298,298],[299,299],[300,300],[301,301],[302,302],[303,303],[304,304],[305,305],[306,306],[307,307],[308,308],[309,309],[310,310],[311,311],[312,312],[313,313],[314,314],[315,315],[316,316],[317,317],[318,318],[319,319],[320,320],[321,321],[322,322],[323,323],[324,324],[325,325],[326,326],[327,327],[328,328],[329,329],[330,330],[331,331],[332,332],[333,333],[334,334],[335,335],[336,336],[337,337],[338,338],[339,339],[340,340],[341,341],[342,342],[343,343],[344,344],[345,345],[346,346],[347,347],[348,348],[349,349],[350,350],[351,351],[352,352],[353,353],[354,354],[355,355],[356,356],[357,357],[358,358],[359,359],[360,360],[361,361],[362,362],[363,363],[364,364],[365,365]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[1,10],[5,15],[10,20],[15,25],[20,30],[25,35],[30,40],[35,45],[40,50],[45,55],[50,60],[55,65],[60,70],[65,75],[70,80],[75,85],[80,90],[85,95],[90,100]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15],[12,16],[13,17],[14,18],[15,19],[16,20],[17,21],[18,22],[19,23],[20,24],[21,25],[22,26],[23,27],[24,28],[25,29],[26,30],[27,31],[28,32],[29,33],[30,34],[31,35],[32,36],[33,37],[34,38],[35,39],[36,40],[37,41],[38,42],[39,43],[40,44],[41,45],[42,46],[43,47],[44,48],[45,49],[46,50],[47,51],[48,52],[49,53],[50,54],[51,55],[52,56],[53,57],[54,58],[55,59],[56,60],[57,61],[58,62],[59,63],[60,64],[61,65],[62,66],[63,67],[64,68],[65,69],[66,70],[67,71],[68,72],[69,73],[70,74],[71,75],[72,76],[73,77],[74,78],[75,79],[76,80],[77,81],[78,82],[79,83],[80,84],[81,85],[82,86],[83,87],[84,88],[85,89],[86,90],[87,91],[88,92],[89,93],[90,94],[91,95],[92,96],[93,97],[94,98],[95,99],[96,100]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[20,30],[25,35],[30,40],[35,45],[40,50]]",
        "output": "69"
      },
      {
        "input": "days = 100, meetings = [[1,50],[51,100]]",
        "output": "0"
      },
      {
        "input": "days = 500, meetings = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "490"
      },
      {
        "input": "days = 500, meetings = [[1,500]]",
        "output": "0"
      },
      {
        "input": "days = 2, meetings = [[1,1]]",
        "output": "1"
      },
      {
        "input": "days = 100, meetings = [[1,50],[51,100],[25,75],[76,100],[1,25]]",
        "output": "0"
      },
      {
        "input": "days = 1000000, meetings = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15], [16, 16], [17, 17], [18, 18], [19, 19], [20, 20], [21, 21], [22, 22], [23, 23], [24, 24], [25, 25], [26, 26], [27, 27], [28, 28], [29, 29], [30, 30], [31, 31], [32, 32], [33, 33], [34, 34], [35, 35], [36, 36], [37, 37], [38, 38], [39, 39], [40, 40], [41, 41], [42, 42], [43, 43], [44, 44], [45, 45], [46, 46], [47, 47], [48, 48], [49, 49], [50, 50]]",
        "output": "999950"
      },
      {
        "input": "days = 10, meetings = [[1,1],[1,2],[2,2],[2,3],[3,3],[3,4],[4,4],[4,5],[5,5],[5,6],[6,6],[6,7],[7,7],[7,8],[8,8],[8,9],[9,9],[9,10],[10,10]]",
        "output": "0"
      },
      {
        "input": "days = 10, meetings = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[1, 50], [51, 100], [25, 75], [76, 100], [1, 25], [76, 100]]",
        "output": "0"
      },
      {
        "input": "days = 200, meetings = [[1,50],[25,75],[50,100],[75,125],[100,150],[125,175],[150,200]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[1,50],[2,49],[3,48],[4,47],[5,46],[6,45],[7,44],[8,43],[9,42],[10,41],[11,40],[12,39],[13,38],[14,37],[15,36],[16,35],[17,34],[18,33],[19,32],[20,31],[21,30],[22,29],[23,28],[24,27],[25,26],[26,25],[27,24],[28,23],[29,22],[30,21],[31,20],[32,19],[33,18],[34,17],[35,16],[36,15],[37,14],[38,13],[39,12],[40,11],[41,10],[42,9],[43,8],[44,7],[45,6],[46,5],[47,4],[48,3],[49,2],[50,1]]",
        "output": "50"
      },
      {
        "input": "days = 100, meetings = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "90"
      },
      {
        "input": "days = 999999999, meetings = [[1,999999999]]",
        "output": "0"
      },
      {
        "input": "days = 200, meetings = [[1,50],[51,100],[101,150],[151,200]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "90"
      },
      {
        "input": "days = 500, meetings = [[1,10],[11,20],[21,30],[31,40],[41,50],[51,60],[61,70],[71,80],[81,90],[91,100],[101,110],[111,120],[121,130],[131,140],[141,150],[151,160],[161,170],[171,180],[181,190],[191,200],[201,210],[211,220],[221,230],[231,240],[241,250],[251,260],[261,270],[271,280],[281,290],[291,300],[301,310],[311,320],[321,330],[331,340],[341,350],[351,360],[361,370],[371,380],[381,390],[391,400],[401,410],[411,420],[421,430],[431,440],[441,450],[451,460],[461,470],[471,480],[481,490],[491,500]]",
        "output": "0"
      },
      {
        "input": "days = 50, meetings = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15],[12,16],[13,17],[14,18],[15,19],[16,20]]",
        "output": "30"
      },
      {
        "input": "days = 1000000, meetings = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]]",
        "output": "999980"
      },
      {
        "input": "days = 100, meetings = [[1, 100], [2, 99], [3, 98], [4, 97], [5, 96], [6, 95], [7, 94], [8, 93], [9, 92], [10, 91], [11, 90], [12, 89], [13, 88], [14, 87], [15, 86], [16, 85], [17, 84], [18, 83], [19, 82], [20, 81], [21, 80], [22, 79], [23, 78], [24, 77], [25, 76], [26, 75], [27, 74], [28, 73], [29, 72], [30, 71], [31, 70], [32, 69], [33, 68], [34, 67], [35, 66], [36, 65], [37, 64], [38, 63], [39, 62], [40, 61], [41, 60], [42, 59], [43, 58], [44, 57], [45, 56], [46, 55], [47, 54], [48, 53], [49, 52], [50, 51]]",
        "output": "0"
      },
      {
        "input": "days = 365, meetings = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50]]",
        "output": "315"
      },
      {
        "input": "days = 1000000, meetings = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30],[31,32],[33,34],[35,36],[37,38],[39,40],[41,42],[43,44],[45,46],[47,48],[49,50],[51,52],[53,54],[55,56],[57,58],[59,60],[61,62],[63,64],[65,66],[67,68],[69,70],[71,72],[73,74],[75,76],[77,78],[79,80],[81,82],[83,84],[85,86],[87,88],[89,90],[91,92],[93,94],[95,96],[97,98],[99,100]]",
        "output": "999900"
      },
      {
        "input": "days = 10, meetings = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10]]",
        "output": "0"
      },
      {
        "input": "days = 1000, meetings = [[1,100],[200,300],[400,500],[600,700],[800,900]]",
        "output": "496"
      },
      {
        "input": "days = 2, meetings = [[1,2]]",
        "output": "0"
      },
      {
        "input": "days = 50, meetings = [[5,10],[10,15],[15,20],[20,25],[25,30]]",
        "output": "24"
      },
      {
        "input": "days = 100, meetings = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30],[31,32],[33,34],[35,36],[37,38],[39,40],[41,42],[43,44],[45,46],[47,48],[49,50],[51,52],[53,54],[55,56],[57,58],[59,60],[61,62],[63,64],[65,66],[67,68],[69,70],[71,72],[73,74],[75,76],[77,78],[79,80],[81,82],[83,84],[85,86],[87,88],[89,90],[91,92],[93,94],[95,96],[97,98],[99,100]]",
        "output": "0"
      },
      {
        "input": "days = 100, meetings = [[5,5],[10,10],[15,15],[20,20],[25,25],[30,30],[35,35],[40,40],[45,45],[50,50]]",
        "output": "90"
      }
    ]
  },
  {
    "id": 2332,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "You are given a 0-indexed integer array buses of length n, where buses[i] represents the departure time of the ith bus. You are also given a 0-indexed integer array passengers of length m, where passengers[j] represents the arrival time of the jth passenger. All bus departure times are unique. All passenger arrival times are unique.\nYou are given an integer capacity, which represents the maximum number of passengers that can get on each bus.\nWhen a passenger arrives, they will wait in line for the next available bus. You can get on a bus that departs at x minutes if you arrive at y minutes where y <= x, and the bus is not full. Passengers with the earliest arrival times get on the bus first.\nMore formally when a bus arrives, either:\n\nIf capacity or fewer passengers are waiting for a bus, they will all get on the bus, or\nThe capacity passengers with the earliest arrival times will get on the bus.\n\nReturn the latest time you may arrive at the bus station to catch a bus. You cannot arrive at the same time as another passenger.\nNote: The arrays buses and passengers are not necessarily sorted.\n\u00a0\nExample 1:\n\nInput: buses = [10,20], passengers = [2,17,18,19], capacity = 2\nOutput: 16\nExplanation: Suppose you arrive at time 16.\nAt time 10, the first bus departs with the 0th passenger. \nAt time 20, the second bus departs with you and the 1st passenger.\nNote that you may not arrive at the same time as another passenger, which is why you must arrive before the 1st passenger to catch the bus.\nExample 2:\n\nInput: buses = [20,30,10], passengers = [19,13,26,4,25,11,21], capacity = 2\nOutput: 20\nExplanation: Suppose you arrive at time 20.\nAt time 10, the first bus departs with the 3rd passenger. \nAt time 20, the second bus departs with the 5th and 1st passengers.\nAt time 30, the third bus departs with the 0th passenger and you.\nNotice if you had arrived any later, then the 6th passenger would have taken your seat on the third bus.\n\u00a0\nConstraints:\n\nn == buses.length\nm == passengers.length\n1 <= n, m, capacity <= 105\n2 <= buses[i], passengers[i] <= 109\nEach element in buses is unique.\nEach element in passengers is unique.\n\n",
    "starterCode": "class Solution:\n    def latestTimeCatchTheBus(self, buses: List[int], passengers: List[int], capacity: int) -> int:\n        ",
    "testCases": [
      {
        "input": "buses = [50,60,70], passengers = [5,10,20,30,40], capacity = 5",
        "output": "70"
      },
      {
        "input": "buses = [3,5,7], passengers = [2,4,6,8], capacity = 1",
        "output": "5"
      },
      {
        "input": "buses = [2,4,6,8,10], passengers = [1,3,5,7,9], capacity = 1",
        "output": "8"
      },
      {
        "input": "buses = [3,8,15,25], passengers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], capacity = 5",
        "output": "0"
      },
      {
        "input": "buses = [10,20], passengers = [2,17,18,19], capacity = 2",
        "output": "16"
      },
      {
        "input": "buses = [10,20,30], passengers = [1,2,3,4,5,6,7,8,9], capacity = 3",
        "output": "0"
      },
      {
        "input": "buses = [10,20,30,40], passengers = [5,10,15,20,25,30,35,40], capacity = 1",
        "output": "19"
      },
      {
        "input": "buses = [100,200], passengers = [99,101,102,103], capacity = 2",
        "output": "100"
      },
      {
        "input": "buses = [100], passengers = [99], capacity = 1",
        "output": "98"
      },
      {
        "input": "buses = [5,10,20], passengers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], capacity = 3",
        "output": "0"
      },
      {
        "input": "buses = [30], passengers = [19,13,26,4,25,11,21], capacity = 3",
        "output": "12"
      },
      {
        "input": "buses = [100], passengers = [10], capacity = 1",
        "output": "9"
      },
      {
        "input": "buses = [20,30,10], passengers = [19,13,26,4,25,11,21], capacity = 2",
        "output": "20"
      },
      {
        "input": "buses = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], passengers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49], capacity = 2",
        "output": "38"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50], passengers = [10, 20, 30, 40, 50], capacity = 1",
        "output": "49"
      },
      {
        "input": "buses = [100,200,300,400,500], passengers = [50,150,250,350,450,50,150,250,350,450,50,150,250,350,450,50,150,250,350,450,50,150,250,350,450,50,150,250,350,450,50,150,250,350,450], capacity = 5",
        "output": "349"
      },
      {
        "input": "buses = [5, 15, 25, 35, 45], passengers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44], capacity = 4",
        "output": "35"
      },
      {
        "input": "buses = [10,20,30,40,50], passengers = [5,15,25,35,45,55,65,75,85,95,105], capacity = 2",
        "output": "50"
      },
      {
        "input": "buses = [15,25,35,45,55], passengers = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], capacity = 5",
        "output": "55"
      },
      {
        "input": "buses = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], passengers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], capacity = 1",
        "output": "18"
      },
      {
        "input": "buses = [5, 12, 19, 26, 33], passengers = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], capacity = 2",
        "output": "26"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50], passengers = [9, 19, 29, 39, 49], capacity = 1",
        "output": "48"
      },
      {
        "input": "buses = [100, 200, 300, 400, 500], passengers = [50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500], capacity = 3",
        "output": "399"
      },
      {
        "input": "buses = [15,30,45,60,75], passengers = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], capacity = 3",
        "output": "75"
      },
      {
        "input": "buses = [5,10,20,30,40], passengers = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60], capacity = 2",
        "output": "26"
      },
      {
        "input": "buses = [15,25,35,45,55,65,75,85,95,105], passengers = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100], capacity = 1",
        "output": "19"
      },
      {
        "input": "buses = [5, 15, 25, 35, 45], passengers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44], capacity = 5",
        "output": "43"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50], passengers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49], capacity = 5",
        "output": "48"
      },
      {
        "input": "buses = [100,200,300], passengers = [50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], capacity = 5",
        "output": "189"
      },
      {
        "input": "buses = [100, 200, 300], passengers = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500], capacity = 2",
        "output": "299"
      },
      {
        "input": "buses = [12,24,36,48,60], passengers = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60], capacity = 5",
        "output": "49"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], capacity = 5",
        "output": "0"
      },
      {
        "input": "buses = [30,60,90,120,150], passengers = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150], capacity = 4",
        "output": "99"
      },
      {
        "input": "buses = [100, 200, 300, 400, 500], passengers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300], capacity = 10",
        "output": "500"
      },
      {
        "input": "buses = [20, 30, 40, 50, 60], passengers = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55], capacity = 2",
        "output": "49"
      },
      {
        "input": "buses = [15,30,45,60,75], passengers = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125], capacity = 5",
        "output": "74"
      },
      {
        "input": "buses = [2,4,6,8,10,12,14,16,18,20], passengers = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], capacity = 1",
        "output": "18"
      },
      {
        "input": "buses = [10,20,30,40,50], passengers = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95], capacity = 2",
        "output": "44"
      },
      {
        "input": "buses = [50, 60, 70, 80, 90], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], capacity = 10",
        "output": "0"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], passengers = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125], capacity = 1",
        "output": "49"
      },
      {
        "input": "buses = [5, 15, 25, 35, 45, 55], passengers = [4, 9, 14, 19, 24, 29, 34, 39, 44, 49, 54], capacity = 1",
        "output": "28"
      },
      {
        "input": "buses = [100,200,300], passengers = [50,99,101,149,151,299,301], capacity = 2",
        "output": "298"
      },
      {
        "input": "buses = [20, 50, 70, 100], passengers = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], capacity = 5",
        "output": "94"
      },
      {
        "input": "buses = [5,15,25,35,45,55,65,75,85,95,105], passengers = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104], capacity = 3",
        "output": "63"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50], passengers = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], capacity = 2",
        "output": "49"
      },
      {
        "input": "buses = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], capacity = 10",
        "output": "500"
      },
      {
        "input": "buses = [10, 15, 20, 25, 30], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], capacity = 5",
        "output": "0"
      },
      {
        "input": "buses = [100, 200, 300, 400, 500], passengers = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500], capacity = 10",
        "output": "489"
      },
      {
        "input": "buses = [10,20,30,40,50,60,70,80,90,100], passengers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], capacity = 1",
        "output": "0"
      },
      {
        "input": "buses = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], capacity = 4",
        "output": "0"
      },
      {
        "input": "buses = [15, 25, 35, 45, 55], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], capacity = 5",
        "output": "0"
      },
      {
        "input": "buses = [15, 25, 35, 45, 55], passengers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55], capacity = 3",
        "output": "28"
      },
      {
        "input": "buses = [20,40,60,80,100], passengers = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99], capacity = 2",
        "output": "18"
      },
      {
        "input": "buses = [10,20,30,40,50], passengers = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49], capacity = 2",
        "output": "18"
      },
      {
        "input": "buses = [5, 15, 25, 35, 45], passengers = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44], capacity = 4",
        "output": "35"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], capacity = 3",
        "output": "0"
      },
      {
        "input": "buses = [20,40,60,80,100], passengers = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], capacity = 2",
        "output": "18"
      },
      {
        "input": "buses = [10,25,50,75,100], passengers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], capacity = 1",
        "output": "0"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], passengers = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99], capacity = 1",
        "output": "98"
      },
      {
        "input": "buses = [5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], passengers = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 138, 141, 144, 147, 150], capacity = 3",
        "output": "134"
      },
      {
        "input": "buses = [100, 200, 300, 400, 500], passengers = [50, 150, 250, 350, 450], capacity = 1",
        "output": "449"
      },
      {
        "input": "buses = [10,20,30,40,50], passengers = [1,10,20,30,40,50,60,70,80,90,100], capacity = 1",
        "output": "39"
      },
      {
        "input": "buses = [100, 200, 300, 400, 500], passengers = [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], capacity = 10",
        "output": "500"
      },
      {
        "input": "buses = [100,120,140,160,180], passengers = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300], capacity = 10",
        "output": "179"
      },
      {
        "input": "buses = [100, 200, 300, 400, 500], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], capacity = 15",
        "output": "0"
      },
      {
        "input": "buses = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], passengers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100], capacity = 3",
        "output": "99"
      },
      {
        "input": "buses = [10,20,30,40,50], passengers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], capacity = 4",
        "output": "0"
      },
      {
        "input": "buses = [5,10,20,25], passengers = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], capacity = 3",
        "output": "1"
      },
      {
        "input": "buses = [100, 200, 300], passengers = [50, 150, 250, 350], capacity = 3",
        "output": "300"
      },
      {
        "input": "buses = [5,15,25,35,45], passengers = [4,8,12,16,20,24,28,32,36,40,44,48,52,56,60], capacity = 2",
        "output": "35"
      },
      {
        "input": "buses = [10, 25, 40, 55], passengers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 27, 29, 31, 33, 35, 37, 39, 41, 43, 47, 49, 51, 53, 57, 59], capacity = 6",
        "output": "48"
      },
      {
        "input": "buses = [20, 30, 40, 50, 60], passengers = [5, 15, 25, 35, 45, 55, 65], capacity = 2",
        "output": "60"
      },
      {
        "input": "buses = [5, 15, 25, 35, 45, 55], passengers = [1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 27, 29, 31, 33, 37, 39, 41, 43, 47, 49], capacity = 3",
        "output": "40"
      },
      {
        "input": "buses = [5,15,25,35,45,55], passengers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55], capacity = 3",
        "output": "0"
      },
      {
        "input": "buses = [15, 30, 45, 60], passengers = [3, 4, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 47, 49, 51, 53, 57, 59], capacity = 5",
        "output": "38"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], passengers = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], capacity = 2",
        "output": "99"
      },
      {
        "input": "buses = [5,15,25,35,45], passengers = [2,5,7,10,15,18,20,22,25,30,32,35,40,42,45], capacity = 3",
        "output": "41"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], capacity = 4",
        "output": "50"
      },
      {
        "input": "buses = [10,20,30,40,50], passengers = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50], capacity = 3",
        "output": "29"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], capacity = 5",
        "output": "0"
      },
      {
        "input": "buses = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], capacity = 5",
        "output": "0"
      },
      {
        "input": "buses = [100, 200, 300, 400], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], capacity = 3",
        "output": "0"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50], passengers = [5, 15, 25, 35, 45, 55], capacity = 1",
        "output": "44"
      },
      {
        "input": "buses = [10, 20, 30], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9], capacity = 4",
        "output": "30"
      },
      {
        "input": "buses = [100,200,300,400,500], passengers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200], capacity = 50",
        "output": "500"
      },
      {
        "input": "buses = [10,12,14,16,18,20,22,24,26,28,30], passengers = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], capacity = 1",
        "output": "21"
      },
      {
        "input": "buses = [10,20,30,40,50], passengers = [9,18,27,36,45,54,63,72,81,90,99], capacity = 1",
        "output": "44"
      },
      {
        "input": "buses = [3,8,15,25,30,40,50], passengers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], capacity = 5",
        "output": "0"
      },
      {
        "input": "buses = [1000, 2000, 3000], passengers = [500, 1500, 2500, 3500, 4500], capacity = 2",
        "output": "3000"
      },
      {
        "input": "buses = [10, 15, 20, 25, 30], passengers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], capacity = 3",
        "output": "30"
      },
      {
        "input": "buses = [10,20,30,40,50], passengers = [5,10,15,20,25,30,35,40,45,50], capacity = 2",
        "output": "49"
      },
      {
        "input": "buses = [10,20,30,40,50,60,70,80,90,100], passengers = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109], capacity = 2",
        "output": "38"
      },
      {
        "input": "buses = [10, 20, 30, 40, 50], passengers = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], capacity = 1",
        "output": "24"
      }
    ]
  },
  {
    "id": 109,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Binary Search Tree",
      "Linked List",
      "Divide and Conquer",
      "Binary Tree"
    ],
    "problemDescription": "Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n\u00a0\nExample 1:\n\n\nInput: head = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n\nExample 2:\n\nInput: head = []\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in head is in the range [0, 2 * 104].\n-105 <= Node.val <= 105\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        ",
    "testCases": [
      {
        "input": "head = [1,2,3,4,5,6,7]",
        "output": "[4, 2, 6, 1, 3, 5, 7]"
      },
      {
        "input": "head = [-1,0,1,2]",
        "output": "[0, -1, 1, None, None, None, 2]"
      },
      {
        "input": "head = [-10,-5,0,5,10]",
        "output": "[0, -10, 5, None, -5, None, 10]"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,10]",
        "output": "[5, 2, 8, 0, 3, 6, 9, None, 1, None, 4, None, 7, None, 10]"
      },
      {
        "input": "head = [-10,-3,0,5,9]",
        "output": "[0, -10, 5, None, -3, None, 9]"
      },
      {
        "input": "head = []",
        "output": "None"
      },
      {
        "input": "head = [1]",
        "output": "[1]"
      },
      {
        "input": "head = [1,3]",
        "output": "[1, None, 3]"
      },
      {
        "input": "head = [-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]",
        "output": "[5, -3, -8, 1, -4, 6, 9, -1, -2, 3, 4, -6, -7, 8, -10, None, None, None, 2, None, None, None, -5, None, None, None, 7, None, -9, None, 10]"
      },
      {
        "input": "head = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "[800, 400, 1200, 200, 600, 1000, 1400, 100, 300, 500, 700, 900, 1100, 1300, 1500]"
      },
      {
        "input": "head = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[7, 0, 14, -3, 3, 10, 17, -5, -2, 1, 5, 8, 12, 15, 19, None, -4, None, -1, None, 2, 4, 6, None, 9, 11, 13, None, 16, 18, 20]"
      },
      {
        "input": "head = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[3, -1, 6, -3, 1, 4, 8, None, -2, 0, 2, None, 5, 7, 9]"
      },
      {
        "input": "head = [-200, -199, -198, -197, -196, -195, -194, -193, -192, -191, -190, -189, -188, -187, -186, -185, -184, -183, -182, -181, -180, -179, -178, -177, -176, -175, -174, -173, -172, -171, -170]",
        "output": "[-185, -193, -177, -197, -189, -181, -173, -199, -195, -191, -187, -183, -179, -175, -171, -200, -198, -196, -194, -192, -190, -188, -186, -184, -182, -180, -178, -176, -174, -172, -170]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[15, 7, 23, 3, 11, 19, 27, 1, 5, 9, 13, 17, 21, 25, 29, None, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]"
      },
      {
        "input": "head = [-100, -50, -25, 0, 25, 50, 100, 150, 200, 250, 300]",
        "output": "[50, -25, 200, -100, 0, 100, 250, None, -50, None, 25, None, 150, None, 300]"
      },
      {
        "input": "head = [100000]",
        "output": "[100000]"
      },
      {
        "input": "head = [-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13]",
        "output": "[5, 0, 9, -2, 2, 7, 11, -3, -1, 1, 3, 6, 8, 10, 12, None, None, None, None, None, None, None, 4, None, None, None, None, None, None, None, 13]"
      },
      {
        "input": "head = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000]",
        "output": "[10000, 5000, 15000, 2000, 7000, 12000, 18000, 1000, 3000, 6000, 8000, 11000, 13000, 16000, 19000, None, None, None, 4000, None, None, None, 9000, None, None, None, 14000, None, 17000, None, 20000]"
      },
      {
        "input": "head = [-2000,-1500,-1000,-500,0,500,1000,1500,2000]",
        "output": "[0, -1500, 1000, -2000, -1000, 500, 1500, None, None, None, -500, None, None, None, 2000]"
      },
      {
        "input": "head = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "[19, 9, 29, 3, 13, 23, 35, 1, 5, 11, 15, 21, 25, 31, 37, None, None, None, 7, None, None, None, 17, None, None, None, 27, None, 33, None, 39]"
      },
      {
        "input": "head = [-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30]",
        "output": "[0, -20, 15, -30, -10, 5, 25, None, -25, -15, -5, None, 10, 20, 30]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "[25, 12, 38, 6, 18, 31, 44, 3, 9, 15, 21, 28, 34, 41, 47, 1, 4, 7, 10, 13, 16, 19, 23, 26, 29, 32, 36, 39, 42, 45, 49, None, 2, None, 5, None, 8, None, 11, None, 14, None, 17, None, 20, 22, 24, None, 27, None, 30, None, 33, 35, 37, None, 40, None, 43, None, 46, 48, 50]"
      },
      {
        "input": "head = [-5000, -4000, -3000, -2000, -1000, 0, 1000, 2000, 3000, 4000, 5000]",
        "output": "[0, -3000, 3000, -5000, -2000, 1000, 4000, None, -4000, None, -1000, None, 2000, None, 5000]"
      },
      {
        "input": "head = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120]",
        "output": "[60, 30, 90, 15, 45, 75, 105, 5, 20, 35, 50, 65, 80, 95, 115, None, 10, None, 25, None, 40, None, 55, None, 70, None, 85, None, 100, 110, 120]"
      },
      {
        "input": "head = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]",
        "output": "[50000, 20000, 80000, 10000, 30000, 60000, 90000, None, None, None, 40000, None, 70000, None, 100000]"
      },
      {
        "input": "head = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "[15, 7, 23, 3, 11, 19, 27, 1, 5, 9, 13, 17, 21, 25, 29, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 31]"
      },
      {
        "input": "head = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 245]",
        "output": "[125, 55, 185, 25, 85, 155, 215, 5, 35, 65, 105, 135, 165, 195, 235, None, 15, None, 45, None, 75, 95, 115, None, 145, None, 175, None, 205, 225, 245]"
      },
      {
        "input": "head = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "[50, 25, 75, 10, 35, 60, 90, 5, 15, 30, 40, 55, 65, 80, 95, None, None, None, 20, None, None, None, 45, None, None, None, 70, None, 85, None, 100]"
      },
      {
        "input": "head = [-50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[20, -20, 60, -40, 0, 40, 80, -50, -30, -10, 10, 30, 50, 70, 90, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 100]"
      },
      {
        "input": "head = [-999, -888, -777, -666, -555, -444, -333, -222, -111, 0, 111, 222, 333, 444, 555, 666, 777, 888, 999]",
        "output": "[0, -555, 555, -888, -333, 222, 777, -999, -777, -444, -222, 111, 333, 666, 888, None, None, None, -666, None, None, None, -111, None, None, None, 444, None, None, None, 999]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[10, 5, 15, 2, 7, 12, 18, 1, 3, 6, 8, 11, 13, 16, 19, None, None, None, 4, None, None, None, 9, None, None, None, 14, None, 17, None, 20]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]",
        "output": "[18, 9, 27, 4, 13, 22, 31, 2, 6, 11, 15, 20, 24, 29, 33, 1, 3, 5, 7, 10, 12, 14, 16, 19, 21, 23, 25, 28, 30, 32, 34, None, None, None, None, None, None, None, 8, None, None, None, None, None, None, None, 17, None, None, None, None, None, None, None, 26, None, None, None, None, None, None, None, 35]"
      },
      {
        "input": "head = [-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90]",
        "output": "[30, -5, 60, -20, 10, 45, 75, -30, -15, 0, 20, 35, 50, 65, 85, None, -25, None, -10, None, 5, 15, 25, None, 40, None, 55, None, 70, 80, 90]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400]",
        "output": "[200, 100, 300, 50, 150, 250, 350, 20, 70, 120, 170, 220, 270, 320, 380, 10, 30, 60, 80, 110, 130, 160, 180, 210, 230, 260, 280, 310, 330, 360, 390, None, None, None, 40, None, None, None, 90, None, None, None, 140, None, None, None, 190, None, None, None, 240, None, None, None, 290, None, None, None, 340, None, 370, None, 400]"
      },
      {
        "input": "head = [-1000, -500, -250, -100, -50, 0, 50, 100, 250, 500, 1000]",
        "output": "[0, -250, 250, -1000, -100, 50, 500, None, -500, None, -50, None, 100, None, 1000]"
      },
      {
        "input": "head = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]",
        "output": "[-10, -5, -15, -2, -7, -12, -18, -1, -3, -6, -8, -11, -13, -16, -19, None, None, None, -4, None, None, None, -9, None, None, None, -14, None, -17, None, -20]"
      },
      {
        "input": "head = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]",
        "output": "[25, 11, 37, 5, 17, 31, 43, 1, 7, 13, 21, 27, 33, 39, 47, None, 3, None, 9, None, 15, 19, 23, None, 29, None, 35, None, 41, 45, 49]"
      },
      {
        "input": "head = [-500, -400, -300, -200, -100, -90, -80, -70, -60, -50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 200, 300, 400, 500]",
        "output": "[20, -70, 110, -200, -30, 60, 150, -400, -90, -50, -10, 40, 80, 130, 300, -500, -300, -100, -80, -60, -40, -20, 0, 30, 50, 70, 90, 120, 140, 200, 400, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 10, None, None, None, None, None, None, None, 100, None, None, None, None, None, None, None, 500]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "[13, 6, 19, 3, 9, 16, 22, 1, 4, 7, 11, 14, 17, 20, 24, None, 2, None, 5, None, 8, 10, 12, None, 15, None, 18, None, 21, 23, 25]"
      },
      {
        "input": "head = [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "[0, -600, 500, -900, -300, 200, 800, -1000, -800, -500, -200, 100, 300, 600, 900, None, None, None, -700, None, -400, None, -100, None, None, None, 400, None, 700, None, 1000]"
      },
      {
        "input": "head = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100]",
        "output": "[49, 22, 76, 10, 34, 61, 88, 4, 16, 28, 40, 55, 67, 82, 94, 1, 7, 13, 19, 25, 31, 37, 43, 52, 58, 64, 70, 79, 85, 91, 97, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 46, None, None, None, None, None, None, None, 73, None, None, None, None, None, None, None, 100]"
      },
      {
        "input": "head = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "[9, 3, 14, 0, 6, 11, 17, -1, 1, 4, 7, 10, 12, 15, 18, None, None, None, 2, None, 5, None, 8, None, None, None, 13, None, 16, None, 19]"
      },
      {
        "input": "head = [-100, -90, -80, -70, -60, -50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[0, -60, 50, -90, -30, 20, 80, -100, -80, -50, -20, 10, 30, 60, 90, None, None, None, -70, None, -40, None, -10, None, None, None, 40, None, 70, None, 100]"
      },
      {
        "input": "head = [0]",
        "output": "[0]"
      },
      {
        "input": "head = [-20,-15,-10,-5,0,5,10,15,20]",
        "output": "[0, -15, 10, -20, -10, 5, 15, None, None, None, -5, None, None, None, 20]"
      },
      {
        "input": "head = [-100000]",
        "output": "[-100000]"
      },
      {
        "input": "head = [-20, -15, -10, -5, 0, 5, 10, 15, 20]",
        "output": "[0, -15, 10, -20, -10, 5, 15, None, None, None, -5, None, None, None, 20]"
      },
      {
        "input": "head = [-500,-400,-300,-200,-100,0,100,200,300,400,500]",
        "output": "[0, -300, 300, -500, -200, 100, 400, None, -400, None, -100, None, 200, None, 500]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149]",
        "output": "[75, 37, 113, 17, 55, 93, 131, 7, 27, 45, 65, 83, 103, 121, 141, 3, 11, 21, 31, 41, 49, 59, 69, 79, 87, 97, 107, 117, 125, 135, 145, 1, 5, 9, 13, 19, 23, 29, 33, 39, 43, 47, 51, 57, 61, 67, 71, 77, 81, 85, 89, 95, 99, 105, 109, 115, 119, 123, 127, 133, 137, 143, 147, None, None, None, None, None, None, None, 15, None, None, None, 25, None, None, None, 35, None, None, None, None, None, None, None, 53, None, None, None, 63, None, None, None, 73, None, None, None, None, None, None, None, 91, None, None, None, 101, None, None, None, 111, None, None, None, None, None, None, None, 129, None, None, None, 139, None, None, None, 149]"
      },
      {
        "input": "head = [-300, -200, -100, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]",
        "output": "[800, 200, 1400, -100, 500, 1100, 1700, -300, 0, 300, 600, 900, 1200, 1500, 1900, None, -200, None, 100, None, 400, None, 700, None, 1000, None, 1300, None, 1600, 1800, 2000]"
      },
      {
        "input": "head = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]",
        "output": "[-5, 2, 8, -1, -3, 6, -9, None, None, None, 4, None, -7, None, 10]"
      },
      {
        "input": "head = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]",
        "output": "[130, 60, 190, 30, 90, 160, 220, 10, 40, 70, 110, 140, 170, 200, 240, None, 20, None, 50, None, 80, 100, 120, None, 150, None, 180, None, 210, 230, 250]"
      },
      {
        "input": "head = [-100, -50, -25, -10, 0, 10, 25, 50, 100]",
        "output": "[0, -50, 25, -100, -25, 10, 50, None, None, None, -10, None, None, None, 100]"
      },
      {
        "input": "head = [-200, -190, -180, -170, -160, -150, -140, -130, -120, -110, -100, -90, -80, -70, -60, -50, -40, -30, -20, -10]",
        "output": "[-110, -160, -60, -190, -140, -90, -30, -200, -180, -150, -130, -100, -80, -50, -20, None, None, None, -170, None, None, None, -120, None, None, None, -70, None, -40, None, -10]"
      },
      {
        "input": "head = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "[15, 7, 23, 3, 11, 19, 27, 1, 5, 9, 13, 17, 21, 25, 29]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150]",
        "output": "[75, 35, 115, 15, 55, 95, 135, 5, 25, 45, 65, 85, 105, 125, 145, None, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]"
      },
      {
        "input": "head = [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[15, 7, 23, 3, 11, 19, 27, -1, 5, 9, 13, 17, 21, 25, 29, None, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]"
      },
      {
        "input": "head = [-99999, -88888, -77777, -66666, -55555, -44444, -33333, -22222, -11111, 0, 11111, 22222, 33333, 44444, 55555, 66666, 77777, 88888, 99999]",
        "output": "[0, -55555, 55555, -88888, -33333, 22222, 77777, -99999, -77777, -44444, -22222, 11111, 33333, 66666, 88888, None, None, None, -66666, None, None, None, -11111, None, None, None, 44444, None, None, None, 99999]"
      },
      {
        "input": "head = [-50000, -40000, -30000, -20000, -10000, 0, 10000, 20000, 30000, 40000, 50000]",
        "output": "[0, -30000, 30000, -50000, -20000, 10000, 40000, None, -40000, None, -10000, None, 20000, None, 50000]"
      },
      {
        "input": "head = [-300, -250, -200, -150, -100, -50, 0, 50, 100, 150, 200, 250, 300]",
        "output": "[0, -200, 150, -300, -100, 50, 250, None, -250, -150, -50, None, 100, 200, 300]"
      },
      {
        "input": "head = [-500, -450, -400, -350, -300, -250, -200, -150, -100, -50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500]",
        "output": "[0, -300, 250, -450, -150, 100, 400, -500, -400, -250, -100, 50, 150, 300, 450, None, None, None, -350, None, -200, None, -50, None, None, None, 200, None, 350, None, 500]"
      },
      {
        "input": "head = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]",
        "output": "[5000, 2000, 8000, 1000, 3000, 6000, 9000, None, None, None, 4000, None, 7000, None, 10000]"
      },
      {
        "input": "head = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000]",
        "output": "[8000, 4000, 12000, 2000, 6000, 10000, 14000, 1000, 3000, 5000, 7000, 9000, 11000, 13000, 15000]"
      },
      {
        "input": "head = [-100,-90,-80,-70,-60,-50,-40,-30,-20,-10,0,10,20,30,40,50,60,70,80,90,100]",
        "output": "[0, -60, 50, -90, -30, 20, 80, -100, -80, -50, -20, 10, 30, 60, 90, None, None, None, -70, None, -40, None, -10, None, None, None, 40, None, 70, None, 100]"
      },
      {
        "input": "head = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30]",
        "output": "[5, -10, 20, -20, -5, 10, 25, None, -15, None, 0, None, 15, None, 30]"
      },
      {
        "input": "head = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]",
        "output": "[49, 23, 75, 11, 35, 61, 87, 5, 17, 29, 41, 55, 67, 81, 93, 1, 7, 13, 19, 25, 31, 37, 45, 51, 57, 63, 71, 77, 83, 89, 97, None, 3, None, 9, None, 15, None, 21, None, 27, None, 33, None, 39, 43, 47, None, 53, None, 59, None, 65, 69, 73, None, 79, None, 85, None, 91, 95, 99]"
      },
      {
        "input": "head = [-50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "[0, -26, 25, -39, -13, 12, 38, -45, -33, -20, -7, 6, 18, 31, 44, -48, -42, -36, -30, -23, -17, -10, -4, 3, 9, 15, 21, 28, 34, 41, 47, -50, -47, -44, -41, -38, -35, -32, -28, -25, -22, -19, -15, -12, -9, -6, -2, 1, 4, 7, 10, 13, 16, 19, 23, 26, 29, 32, 36, 39, 42, 45, 49, None, -49, None, -46, None, -43, None, -40, None, -37, None, -34, None, -31, -29, -27, None, -24, None, -21, None, -18, -16, -14, None, -11, None, -8, None, -5, -3, -1, None, 2, None, 5, None, 8, None, 11, None, 14, None, 17, None, 20, 22, 24, None, 27, None, 30, None, 33, 35, 37, None, 40, None, 43, None, 46, 48, 50]"
      },
      {
        "input": "head = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]",
        "output": "[10, -10, 25, -20, 0, 15, 35, None, -15, -5, 5, None, 20, 30, 40]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000]",
        "output": "[1000, 500, 1500, 200, 700, 1200, 1800, 100, 300, 600, 800, 1100, 1300, 1600, 1900, None, None, None, 400, None, None, None, 900, None, None, None, 1400, None, 1700, None, 2000]"
      },
      {
        "input": "head = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]",
        "output": "[1000, 500, 1500, 200, 700, 1200, 1800, 100, 300, 600, 800, 1100, 1300, 1600, 1900, None, None, None, 400, None, None, None, 900, None, None, None, 1400, None, 1700, None, 2000]"
      },
      {
        "input": "head = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140]",
        "output": "[70, 35, 105, 15, 50, 85, 125, 5, 25, 40, 60, 75, 95, 115, 135, None, 10, 20, 30, None, 45, 55, 65, None, 80, 90, 100, 110, 120, 130, 140]"
      },
      {
        "input": "head = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[9, 3, 15, 0, 6, 12, 18, -1, 1, 4, 7, 10, 13, 16, 19, None, None, None, 2, None, 5, None, 8, None, 11, None, 14, None, 17, None, 20]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "[8, 4, 12, 2, 6, 10, 14, 1, 3, 5, 7, 9, 11, 13, 15]"
      }
    ]
  },
  {
    "id": 1129,
    "difficulty": "Medium",
    "tags": [
      "Breadth-First Search",
      "Graph"
    ],
    "problemDescription": "You are given an integer n, the number of nodes in a directed graph where the nodes are labeled from 0 to n - 1. Each edge is red or blue in this graph, and there could be self-edges and parallel edges.\nYou are given two arrays redEdges and blueEdges where:\n\nredEdges[i] = [ai, bi] indicates that there is a directed red edge from node ai to node bi in the graph, and\nblueEdges[j] = [uj, vj] indicates that there is a directed blue edge from node uj to node vj in the graph.\n\nReturn an array answer of length n, where each answer[x] is the length of the shortest path from node 0 to node x such that the edge colors alternate along the path, or -1 if such a path does not exist.\n\u00a0\nExample 1:\n\nInput: n = 3, redEdges = [[0,1],[1,2]], blueEdges = []\nOutput: [0,1,-1]\n\nExample 2:\n\nInput: n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]\nOutput: [0,1,-1]\n\n\u00a0\nConstraints:\n\n1 <= n <= 100\n0 <= redEdges.length,\u00a0blueEdges.length <= 400\nredEdges[i].length == blueEdges[j].length == 2\n0 <= ai, bi, uj, vj < n\n\n",
    "starterCode": "class Solution:\n    def shortestAlternatingPaths(self, n: int, redEdges: List[List[int]], blueEdges: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "n = 4, redEdges = [[0,1],[1,2]], blueEdges = [[1,3]]",
        "output": "[0, 1, -1, 2]"
      },
      {
        "input": "n = 4, redEdges = [[0,1],[0,2],[0,3]], blueEdges = [[1,2],[1,3],[2,3]]",
        "output": "[0, 1, 1, 1]"
      },
      {
        "input": "n = 2, redEdges = [[0,0],[0,0]], blueEdges = [[0,0],[0,0]]",
        "output": "[0, -1]"
      },
      {
        "input": "n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]",
        "output": "[0, 1, -1]"
      },
      {
        "input": "n = 4, redEdges = [[0,1],[0,2],[1,3]], blueEdges = [[2,3]]",
        "output": "[0, 1, 1, 2]"
      },
      {
        "input": "n = 2, redEdges = [[0,1]], blueEdges = [[1,0]]",
        "output": "[0, 1]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,4]], blueEdges = []",
        "output": "[0, 1, -1, -1, -1]"
      },
      {
        "input": "n = 3, redEdges = [], blueEdges = [[0,1],[1,2]]",
        "output": "[0, 1, -1]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[0,2],[1,2],[1,3],[3,4],[2,4]], blueEdges = [[1,2],[2,3]]",
        "output": "[0, 1, 1, 2, 3]"
      },
      {
        "input": "n = 3, redEdges = [[0,1],[1,0]], blueEdges = [[2,1]]",
        "output": "[0, 1, -1]"
      },
      {
        "input": "n = 3, redEdges = [[0,1],[1,2]], blueEdges = [[1,2]]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "n = 4, redEdges = [[0,1],[0,2],[1,2]], blueEdges = [[0,3],[2,3]]",
        "output": "[0, 1, 1, 1]"
      },
      {
        "input": "n = 4, redEdges = [[0,1],[1,2],[2,3]], blueEdges = [[0,2]]",
        "output": "[0, 1, 1, 2]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,4]], blueEdges = [[1,2],[2,3],[3,4]]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "n = 3, redEdges = [[0,1],[1,2],[2,0]], blueEdges = [[0,2]]",
        "output": "[0, 1, 1]"
      },
      {
        "input": "n = 2, redEdges = [[0,0]], blueEdges = [[0,0]]",
        "output": "[0, -1]"
      },
      {
        "input": "n = 2, redEdges = [[0,0]], blueEdges = [[1,1]]",
        "output": "[0, -1]"
      },
      {
        "input": "n = 5, redEdges = [], blueEdges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "[0, 1, -1, -1, -1]"
      },
      {
        "input": "n = 3, redEdges = [[0,1],[1,2]], blueEdges = []",
        "output": "[0, 1, -1]"
      },
      {
        "input": "n = 4, redEdges = [[0,1],[2,3]], blueEdges = [[1,2],[3,0]]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,4]], blueEdges = [[0,2],[1,3],[2,4]]",
        "output": "[0, 1, 1, 2, 3]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,0],[1,2],[2,1],[2,3],[3,2],[3,4],[4,3],[4,5],[5,4]], blueEdges = [[0,2],[1,3],[2,4],[3,5]]",
        "output": "[0, 1, 1, 2, 3, 3]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,0]], blueEdges = [[1,3],[3,1],[2,4]]",
        "output": "[0, 1, -1, 2, 3]"
      },
      {
        "input": "n = 10, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], blueEdges = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,0]]",
        "output": "[0, 1, 1, 2, 3, 3, 4, 5, 5, 6]"
      },
      {
        "input": "n = 9, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], blueEdges = [[0,3],[1,4],[2,5],[3,6],[4,7],[5,8]]",
        "output": "[0, 1, -1, 1, 2, 3, -1, 3, 4]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5]], blueEdges = [[0,3],[1,4],[2,5]]",
        "output": "[0, 1, -1, 1, 2, 3]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[0,2],[1,3],[2,4],[3,5]], blueEdges = [[1,2],[2,3],[3,4],[4,5]]",
        "output": "[0, 1, 1, 2, 3, 3]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5]], blueEdges = [[0,5],[5,4],[4,3],[3,2],[2,1],[1,0]]",
        "output": "[0, 1, -1, -1, -1, 1]"
      },
      {
        "input": "n = 10, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], blueEdges = [[1,3],[2,4],[5,7],[6,8]]",
        "output": "[0, 1, -1, 2, 3, -1, -1, -1, -1, -1]"
      },
      {
        "input": "n = 8, redEdges = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7]], blueEdges = [[0,3],[1,4],[2,5],[3,6],[4,7]]",
        "output": "[0, 1, 1, 1, 2, 2, 3, 3]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[0,2],[1,3],[2,4]], blueEdges = [[0,3],[1,2],[1,4],[2,3]]",
        "output": "[0, 1, 1, 1, 2]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,4]], blueEdges = [[0,2],[1,3],[2,4],[3,0]]",
        "output": "[0, 1, 1, 2, 3]"
      },
      {
        "input": "n = 10, redEdges = [[0,1],[2,3],[4,5],[6,7],[8,9]], blueEdges = [[0,9],[1,8],[2,7],[3,6],[4,5]]",
        "output": "[0, 1, -1, -1, -1, -1, -1, -1, 2, 1]"
      },
      {
        "input": "n = 10, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], blueEdges = [[9,8],[8,7],[7,6],[6,5],[5,4],[4,3],[3,2],[2,1],[1,0]]",
        "output": "[0, 1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], blueEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "[0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "n = 8, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,4],[2,6]], blueEdges = [[0,2],[1,3],[3,5],[5,7],[7,1],[4,6]]",
        "output": "[0, 1, 1, 2, 1, 3, 2, 3]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], blueEdges = [[6,5],[5,4],[4,3],[3,2],[2,1],[1,0]]",
        "output": "[0, 1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,0],[1,2],[2,3],[3,4],[4,5]], blueEdges = [[0,2],[1,3],[2,4],[3,5],[4,1]]",
        "output": "[0, 1, 1, 2, 3, 3]"
      },
      {
        "input": "n = 8, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], blueEdges = [[7,6],[6,5],[5,4],[4,3],[3,2],[2,1],[1,0]]",
        "output": "[0, 1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "n = 8, redEdges = [[0,1],[1,2],[2,3],[3,0]], blueEdges = [[1,3],[3,5],[5,7],[7,1],[0,2],[2,4],[4,6],[6,0]]",
        "output": "[0, 1, 1, 2, -1, 3, -1, -1]"
      },
      {
        "input": "n = 10, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], blueEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[0,4],[1,2],[2,3],[3,4]], blueEdges = [[0,2],[1,3],[2,0],[3,1],[4,2]]",
        "output": "[0, 1, 1, 2, 1]"
      },
      {
        "input": "n = 15, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], blueEdges = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14]]",
        "output": "[0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], blueEdges = [[1,3],[3,5],[5,1],[2,4],[4,6],[6,2]]",
        "output": "[0, 1, -1, 2, 3, -1, 4]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[0,2],[1,3],[2,4],[3,5]], blueEdges = [[1,2],[2,3],[3,4],[4,5],[5,0]]",
        "output": "[0, 1, 1, 2, 3, 3]"
      },
      {
        "input": "n = 15, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,0]], blueEdges = [[0,7],[1,8],[2,9],[3,10],[4,11],[5,12],[6,13],[7,14],[8,0],[9,1],[10,2],[11,3],[12,4],[13,5],[14,6]]",
        "output": "[0, 1, 5, 9, 13, 17, 21, 1, 2, 3, 7, 11, 15, 19, 23]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[0,2],[1,2],[1,3],[2,3],[3,4]], blueEdges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "[0, 1, 1, 2, 3]"
      },
      {
        "input": "n = 12, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,0]], blueEdges = [[0,6],[1,7],[2,8],[3,9],[4,10],[5,11],[6,0],[7,1],[8,2],[9,3],[10,4],[11,5]]",
        "output": "[0, 1, 4, 5, 8, 9, 1, 2, 3, 6, 7, 10]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5]], blueEdges = [[5,0],[0,5],[1,4],[4,1],[2,5],[5,2]]",
        "output": "[0, 1, 4, 5, 2, 1]"
      },
      {
        "input": "n = 10, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], blueEdges = [[0,4],[1,5],[2,6],[3,7],[4,8],[5,9]]",
        "output": "[0, 1, -1, -1, 1, 2, 3, -1, -1, 3]"
      },
      {
        "input": "n = 10, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], blueEdges = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9]]",
        "output": "[0, 1, 1, 2, 3, 3, 4, 5, 5, 6]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,4]], blueEdges = [[4,0],[3,1],[2,2],[1,3],[0,4]]",
        "output": "[0, 1, -1, 2, 1]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0]], blueEdges = [[0,3],[1,4],[2,5],[3,6],[4,1],[5,2],[6,4]]",
        "output": "[0, 1, 4, 1, 2, 3, 6]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], blueEdges = [[0,3],[1,4],[2,5],[3,6]]",
        "output": "[0, 1, -1, 1, 2, 3, -1]"
      },
      {
        "input": "n = 9, redEdges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,5],[4,6]], blueEdges = [[5,7],[5,8],[6,7],[6,8],[7,0],[7,1],[8,0],[8,2],[0,3],[0,4]]",
        "output": "[0, 1, 1, 1, 1, 2, 2, 2, 2]"
      },
      {
        "input": "n = 10, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], blueEdges = [[9,0],[0,9],[1,8],[8,1],[2,7],[7,2],[3,6],[6,3],[4,5],[5,4]]",
        "output": "[0, 1, -1, -1, -1, -1, -1, -1, 2, 1]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,2],[2,3],[3,0]], blueEdges = [[1,3],[3,4],[4,5],[5,1]]",
        "output": "[0, 1, -1, 2, -1, -1]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,2],[2,0],[3,4],[4,5]], blueEdges = [[0,2],[2,3],[3,0],[4,1],[5,0]]",
        "output": "[0, 1, 1, -1, -1, -1]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[2,3],[4,5],[5,6]], blueEdges = [[0,2],[1,3],[2,4],[3,5],[4,6]]",
        "output": "[0, 1, 1, 2, -1, 3, 4]"
      },
      {
        "input": "n = 8, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], blueEdges = [[0,7],[1,6],[2,5],[3,4],[5,3],[6,2],[7,1]]",
        "output": "[0, 1, 5, 9, 10, 6, 2, 1]"
      },
      {
        "input": "n = 8, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], blueEdges = [[7,0],[0,7],[1,6],[6,1],[2,5],[5,2],[3,4],[4,3]]",
        "output": "[0, 1, -1, -1, -1, -1, 2, 1]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], blueEdges = [[0,3],[2,5]]",
        "output": "[0, 1, -1, 1, 2, -1, -1]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5]], blueEdges = [[5,4],[4,3],[3,2],[2,1],[1,0]]",
        "output": "[0, 1, -1, -1, -1, -1]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,3]], blueEdges = [[0,2],[2,4],[4,1],[1,5]]",
        "output": "[0, 1, 1, 1, -1, 2]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,4]], blueEdges = [[0,2],[2,4]]",
        "output": "[0, 1, 1, 2, -1]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5]], blueEdges = [[1,3],[3,5]]",
        "output": "[0, 1, -1, 2, 3, -1]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5]], blueEdges = [[0,2],[1,3],[2,4],[3,5]]",
        "output": "[0, 1, 1, 2, 3, 3]"
      },
      {
        "input": "n = 10, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]], blueEdges = [[0,5],[1,6],[2,7],[3,8],[4,9]]",
        "output": "[0, 1, -1, -1, -1, 1, 2, 3, -1, -1]"
      },
      {
        "input": "n = 8, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], blueEdges = [[1,3],[2,4],[5,7]]",
        "output": "[0, 1, -1, 2, 3, -1, -1, -1]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,0]], blueEdges = [[1,3],[3,2],[2,0],[0,1]]",
        "output": "[0, 1, 2, 2, -1]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,0],[6,1]], blueEdges = [[0,3],[1,4],[2,5],[3,6],[4,0],[5,1],[6,2]]",
        "output": "[0, 1, 1, 1, 2, 2, 3]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,4]], blueEdges = [[1,3],[2,4]]",
        "output": "[0, 1, -1, 2, 3]"
      },
      {
        "input": "n = 10, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0],[0,5],[2,7],[3,8],[4,9]], blueEdges = [[0,3],[1,4],[2,5],[3,6],[4,7],[5,8],[6,9],[7,0],[8,1],[9,2]]",
        "output": "[0, 1, 4, 1, 2, 1, 6, 3, 2, 3]"
      },
      {
        "input": "n = 10, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], blueEdges = [[0,5],[1,6],[2,7],[3,8],[4,9]]",
        "output": "[0, 1, -1, -1, -1, 1, 2, 3, -1, -1]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,0]], blueEdges = [[0,2],[2,4],[4,1],[1,3],[3,0]]",
        "output": "[0, 1, 1, 2, 3]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], blueEdges = [[6,0],[0,6],[1,5],[5,1],[2,4],[4,2],[3,6],[6,3]]",
        "output": "[0, 1, 6, 4, 5, 2, 1]"
      },
      {
        "input": "n = 8, redEdges = [[0,1],[0,2],[1,3],[2,3],[3,4],[4,5],[5,6],[6,7]], blueEdges = [[1,2],[2,4],[3,5],[4,6],[5,7],[6,0],[7,1],[0,3]]",
        "output": "[0, 1, 1, 1, 2, 3, 3, 4]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,0],[0,4]], blueEdges = [[0,2],[1,3],[2,4],[3,1],[4,3]]",
        "output": "[0, 1, 1, 2, 1]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,0],[3,4]], blueEdges = [[0,2],[2,3],[3,0],[4,1]]",
        "output": "[0, 1, 1, -1, -1]"
      },
      {
        "input": "n = 9, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], blueEdges = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8]]",
        "output": "[0, 1, 1, 2, 3, 3, 4, 5, 5]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5]], blueEdges = [[1,2],[2,3],[3,4],[4,5],[5,1]]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "n = 9, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[1,5],[2,6],[3,7]], blueEdges = [[0,3],[1,4],[2,5],[3,6],[4,7],[5,8],[6,1],[7,2],[8,4]]",
        "output": "[0, 1, 3, 1, 2, 3, 4, 2, 4]"
      },
      {
        "input": "n = 9, redEdges = [[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,8]], blueEdges = [[8,4],[4,0],[0,2],[2,4],[5,1],[1,3],[3,5],[7,6]]",
        "output": "[0, 1, 1, 2, -1, 3, 4, -1, -1]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,0]], blueEdges = [[1,3],[3,1],[2,4],[4,2]]",
        "output": "[0, 1, 4, 2, 3]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,0],[1,2],[2,3],[3,4]], blueEdges = [[0,2],[1,3],[2,0],[3,1],[4,0]]",
        "output": "[0, 1, 1, 2, 3]"
      },
      {
        "input": "n = 9, redEdges = [[0,1],[0,3],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], blueEdges = [[0,4],[1,5],[2,6],[3,7],[4,8]]",
        "output": "[0, 1, -1, 1, 1, 2, 3, 2, 3]"
      },
      {
        "input": "n = 8, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], blueEdges = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,0]]",
        "output": "[0, 1, 1, 2, 3, 3, 4, 5]"
      },
      {
        "input": "n = 10, redEdges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], blueEdges = [[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[4,9]]",
        "output": "[0, 1, 1, 1, 2, 2, 2, 2, 2, 3]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[0,3],[1,2],[2,3],[3,4],[4,5],[5,6]], blueEdges = [[0,2],[1,3],[2,4],[3,5],[4,6]]",
        "output": "[0, 1, 1, 1, 3, 2, 3]"
      },
      {
        "input": "n = 10, redEdges = [[0,2],[2,4],[4,6],[6,8]], blueEdges = [[1,3],[3,5],[5,7],[7,9]]",
        "output": "[0, -1, 1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,4]], blueEdges = [[0,3],[1,4],[2,5],[3,6],[4,0],[5,1],[6,2]]",
        "output": "[0, 1, 5, 1, 2, 3, 7]"
      },
      {
        "input": "n = 8, redEdges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,7]], blueEdges = [[0,3],[0,4],[1,5],[1,6],[2,7]]",
        "output": "[0, 1, 1, 1, 1, 2, 2, 2]"
      },
      {
        "input": "n = 6, redEdges = [[0,1],[1,2],[2,0],[2,3],[3,4],[4,5]], blueEdges = [[1,3],[2,4],[3,5],[4,0],[5,1],[5,2]]",
        "output": "[0, 1, -1, 2, 3, -1]"
      },
      {
        "input": "n = 8, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], blueEdges = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7]]",
        "output": "[0, 1, 1, 2, 3, 3, 4, 5]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], blueEdges = [[0,3],[1,4],[2,5]]",
        "output": "[0, 1, -1, 1, 2, 3, -1]"
      },
      {
        "input": "n = 7, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], blueEdges = [[1,3],[2,4],[3,5],[4,6]]",
        "output": "[0, 1, -1, 2, 3, -1, 4]"
      },
      {
        "input": "n = 5, redEdges = [[0,1],[1,2],[2,3],[3,4],[4,0]], blueEdges = [[1,2],[2,3],[3,4],[4,0],[0,1]]",
        "output": "[0, 1, 2, 3, 4]"
      }
    ]
  },
  {
    "id": 93,
    "difficulty": "Medium",
    "tags": [
      "String",
      "Backtracking"
    ],
    "problemDescription": "A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n\nFor example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\n\nGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n\u00a0\nExample 1:\n\nInput: s = \"25525511135\"\nOutput: [\"255.255.11.135\",\"255.255.111.35\"]\n\nExample 2:\n\nInput: s = \"0000\"\nOutput: [\"0.0.0.0\"]\n\nExample 3:\n\nInput: s = \"101023\"\nOutput: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 20\ns consists of digits only.\n\n",
    "starterCode": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "s = \"101023\"",
        "output": "['1.0.10.23', '1.0.102.3', '10.1.0.23', '10.10.2.3', '101.0.2.3']"
      },
      {
        "input": "s = \"1111\"",
        "output": "['1.1.1.1']"
      },
      {
        "input": "s = \"9876543210\"",
        "output": "[]"
      },
      {
        "input": "s = \"00000000000000000000\"",
        "output": "[]"
      },
      {
        "input": "s = \"222333444\"",
        "output": "['22.233.34.44', '222.33.34.44']"
      },
      {
        "input": "s = \"0000\"",
        "output": "['0.0.0.0']"
      },
      {
        "input": "s = \"25525511135\"",
        "output": "['255.255.11.135', '255.255.111.35']"
      },
      {
        "input": "s = \"256256256256\"",
        "output": "[]"
      },
      {
        "input": "s = \"010010\"",
        "output": "['0.10.0.10', '0.100.1.0']"
      },
      {
        "input": "s = \"99999999999999999999\"",
        "output": "[]"
      },
      {
        "input": "s = \"11111111111111111111\"",
        "output": "[]"
      },
      {
        "input": "s = \"19216811\"",
        "output": "['1.92.168.11', '19.2.168.11', '19.21.68.11', '19.216.8.11', '19.216.81.1', '192.1.68.11', '192.16.8.11', '192.16.81.1', '192.168.1.1']"
      },
      {
        "input": "s = \"255025502550\"",
        "output": "[]"
      },
      {
        "input": "s = \"22222222\"",
        "output": "['2.2.222.222', '2.22.22.222', '2.22.222.22', '2.222.2.222', '2.222.22.22', '2.222.222.2', '22.2.22.222', '22.2.222.22', '22.22.2.222', '22.22.22.22', '22.22.222.2', '22.222.2.22', '22.222.22.2', '222.2.2.222', '222.2.22.22', '222.2.222.2', '222.22.2.22', '222.22.22.2', '222.222.2.2']"
      },
      {
        "input": "s = \"1\"",
        "output": "[]"
      },
      {
        "input": "s = \"123123123123\"",
        "output": "['123.123.123.123']"
      },
      {
        "input": "s = \"19216801\"",
        "output": "['19.216.80.1', '192.16.80.1', '192.168.0.1']"
      },
      {
        "input": "s = \"22222222222222222222\"",
        "output": "[]"
      },
      {
        "input": "s = \"123456789\"",
        "output": "['123.45.67.89']"
      },
      {
        "input": "s = \"100100100\"",
        "output": "['10.0.100.100', '100.10.0.100', '100.100.10.0']"
      },
      {
        "input": "s = \"001001001001001\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255255255255255255255255255255255255255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"0100100\"",
        "output": "['0.10.0.100', '0.100.10.0']"
      },
      {
        "input": "s = \"0001000100010001\"",
        "output": "[]"
      },
      {
        "input": "s = \"1100110011001100\"",
        "output": "[]"
      },
      {
        "input": "s = \"19216811001\"",
        "output": "[]"
      },
      {
        "input": "s = \"2552552551113525525511135\"",
        "output": "[]"
      },
      {
        "input": "s = \"999999999\"",
        "output": "[]"
      },
      {
        "input": "s = \"1111111\"",
        "output": "['1.1.11.111', '1.1.111.11', '1.11.1.111', '1.11.11.11', '1.11.111.1', '1.111.1.11', '1.111.11.1', '11.1.1.111', '11.1.11.11', '11.1.111.1', '11.11.1.11', '11.11.11.1', '11.111.1.1', '111.1.1.11', '111.1.11.1', '111.11.1.1']"
      },
      {
        "input": "s = \"2552552550\"",
        "output": "['255.255.25.50', '255.255.255.0']"
      },
      {
        "input": "s = \"255000255000255\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255000\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255255255255255255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"0000000000\"",
        "output": "[]"
      },
      {
        "input": "s = \"0000000000000000\"",
        "output": "[]"
      },
      {
        "input": "s = \"222222222222222222\"",
        "output": "[]"
      },
      {
        "input": "s = \"10000000000000000000\"",
        "output": "[]"
      },
      {
        "input": "s = \"1230456789\"",
        "output": "[]"
      },
      {
        "input": "s = \"01001001001001\"",
        "output": "[]"
      },
      {
        "input": "s = \"111111111111111111110\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255255255255255255255255255255255255255255255255255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"000000000000000000000\"",
        "output": "[]"
      },
      {
        "input": "s = \"1111222233334444\"",
        "output": "[]"
      },
      {
        "input": "s = \"000256\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255100\"",
        "output": "['255.255.255.100']"
      },
      {
        "input": "s = \"123456789012\"",
        "output": "[]"
      },
      {
        "input": "s = \"01020304\"",
        "output": "[]"
      },
      {
        "input": "s = \"3333333333\"",
        "output": "[]"
      },
      {
        "input": "s = \"100100\"",
        "output": "['1.0.0.100', '10.0.10.0', '100.1.0.0']"
      },
      {
        "input": "s = \"012345678910\"",
        "output": "[]"
      },
      {
        "input": "s = \"12345678901234567\"",
        "output": "[]"
      },
      {
        "input": "s = \"02552552550\"",
        "output": "[]"
      },
      {
        "input": "s = \"111111111111\"",
        "output": "['111.111.111.111']"
      },
      {
        "input": "s = \"192168111111001\"",
        "output": "[]"
      },
      {
        "input": "s = \"00000001\"",
        "output": "[]"
      },
      {
        "input": "s = \"1230123012301230\"",
        "output": "[]"
      },
      {
        "input": "s = \"100100100100100\"",
        "output": "[]"
      },
      {
        "input": "s = \"999999999999999999\"",
        "output": "[]"
      },
      {
        "input": "s = \"000255255000\"",
        "output": "[]"
      },
      {
        "input": "s = \"0000100100100\"",
        "output": "[]"
      },
      {
        "input": "s = \"2550255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"1001001001\"",
        "output": "['100.100.100.1']"
      },
      {
        "input": "s = \"1111111111111111\"",
        "output": "[]"
      },
      {
        "input": "s = \"1234567890123\"",
        "output": "[]"
      },
      {
        "input": "s = \"192168011001001\"",
        "output": "[]"
      },
      {
        "input": "s = \"12345678901234567890\"",
        "output": "[]"
      },
      {
        "input": "s = \"1921681111001\"",
        "output": "[]"
      },
      {
        "input": "s = \"222222222222\"",
        "output": "['222.222.222.222']"
      },
      {
        "input": "s = \"255255255255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255255255255255255255255255255255255255255255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"000000000000\"",
        "output": "[]"
      },
      {
        "input": "s = \"1921680101\"",
        "output": "['19.216.80.101', '192.16.80.101', '192.168.0.101']"
      },
      {
        "input": "s = \"99999999\"",
        "output": "['99.99.99.99']"
      },
      {
        "input": "s = \"00000\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255255255255255255255255255255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"102030405\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255255255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"1001001001001001\"",
        "output": "[]"
      },
      {
        "input": "s = \"0102030405\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255255255255255255255255255255255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"111222333\"",
        "output": "['1.112.223.33', '11.12.223.33', '11.122.23.33', '11.122.233.3', '111.2.223.33', '111.22.23.33', '111.22.233.3', '111.222.3.33', '111.222.33.3']"
      },
      {
        "input": "s = \"0000111122223333\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255255\"",
        "output": "['255.255.255.255']"
      },
      {
        "input": "s = \"1921681001\"",
        "output": "['192.168.100.1']"
      },
      {
        "input": "s = \"192168111001\"",
        "output": "[]"
      },
      {
        "input": "s = \"1000000000000000\"",
        "output": "[]"
      },
      {
        "input": "s = \"255025502550255\"",
        "output": "[]"
      },
      {
        "input": "s = \"19216811111001\"",
        "output": "[]"
      },
      {
        "input": "s = \"19216811111\"",
        "output": "['192.168.11.111', '192.168.111.11']"
      },
      {
        "input": "s = \"1234567890123456\"",
        "output": "[]"
      },
      {
        "input": "s = \"255000255000\"",
        "output": "[]"
      },
      {
        "input": "s = \"991871283712983712987123789\"",
        "output": "[]"
      },
      {
        "input": "s = \"0123456789\"",
        "output": "[]"
      },
      {
        "input": "s = \"1234567890123456789\"",
        "output": "[]"
      },
      {
        "input": "s = \"00000000\"",
        "output": "[]"
      },
      {
        "input": "s = \"11111\"",
        "output": "['1.1.1.11', '1.1.11.1', '1.11.1.1', '11.1.1.1']"
      },
      {
        "input": "s = \"255000000\"",
        "output": "[]"
      },
      {
        "input": "s = \"192168001001\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255111350\"",
        "output": "[]"
      },
      {
        "input": "s = \"2552551113525525511135\"",
        "output": "[]"
      },
      {
        "input": "s = \"00010001000100010001\"",
        "output": "[]"
      },
      {
        "input": "s = \"123456789012345678\"",
        "output": "[]"
      },
      {
        "input": "s = \"0000255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"9999999999\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"01001001001001001001\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255255255255255255255255255255255255255255255255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"255000255000255000\"",
        "output": "[]"
      },
      {
        "input": "s = \"2222222222\"",
        "output": "['2.222.222.222', '22.22.222.222', '22.222.22.222', '22.222.222.22', '222.2.222.222', '222.22.22.222', '222.22.222.22', '222.222.2.222', '222.222.22.22', '222.222.222.2']"
      },
      {
        "input": "s = \"2552551000\"",
        "output": "['255.255.100.0']"
      },
      {
        "input": "s = \"2552550000\"",
        "output": "[]"
      },
      {
        "input": "s = \"25502550255025502550255\"",
        "output": "[]"
      },
      {
        "input": "s = \"2550255025502550\"",
        "output": "[]"
      },
      {
        "input": "s = \"123123123123123123\"",
        "output": "[]"
      },
      {
        "input": "s = \"192168001\"",
        "output": "[]"
      },
      {
        "input": "s = \"12345678901234\"",
        "output": "[]"
      },
      {
        "input": "s = \"010010010010\"",
        "output": "[]"
      },
      {
        "input": "s = \"123456789012345\"",
        "output": "[]"
      },
      {
        "input": "s = \"1234567890\"",
        "output": "[]"
      },
      {
        "input": "s = \"0255025502550255\"",
        "output": "[]"
      },
      {
        "input": "s = \"9216811135\"",
        "output": "['92.168.11.135', '92.168.111.35']"
      },
      {
        "input": "s = \"001001001\"",
        "output": "[]"
      },
      {
        "input": "s = \"00112233445566778899\"",
        "output": "[]"
      },
      {
        "input": "s = \"11101110111011101110\"",
        "output": "[]"
      },
      {
        "input": "s = \"2222222222222222\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255255255255255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"100100100100\"",
        "output": "['100.100.100.100']"
      },
      {
        "input": "s = \"19216801100101\"",
        "output": "[]"
      },
      {
        "input": "s = \"123456\"",
        "output": "['1.2.34.56', '1.23.4.56', '1.23.45.6', '1.234.5.6', '12.3.4.56', '12.3.45.6', '12.34.5.6', '123.4.5.6']"
      },
      {
        "input": "s = \"11111111\"",
        "output": "['1.1.111.111', '1.11.11.111', '1.11.111.11', '1.111.1.111', '1.111.11.11', '1.111.111.1', '11.1.11.111', '11.1.111.11', '11.11.1.111', '11.11.11.11', '11.11.111.1', '11.111.1.11', '11.111.11.1', '111.1.1.111', '111.1.11.11', '111.1.111.1', '111.11.1.11', '111.11.11.1', '111.111.1.1']"
      },
      {
        "input": "s = \"19216801001\"",
        "output": "[]"
      },
      {
        "input": "s = \"999999999999\"",
        "output": "[]"
      },
      {
        "input": "s = \"22222222222222222220\"",
        "output": "[]"
      },
      {
        "input": "s = \"10000000000000000001\"",
        "output": "[]"
      },
      {
        "input": "s = \"192168100\"",
        "output": "['1.92.168.100', '19.2.168.100', '19.21.68.100', '19.216.8.100', '192.1.68.100', '192.16.8.100', '192.168.10.0']"
      },
      {
        "input": "s = \"200200200200\"",
        "output": "['200.200.200.200']"
      },
      {
        "input": "s = \"25525511135111\"",
        "output": "[]"
      },
      {
        "input": "s = \"110110110110110\"",
        "output": "[]"
      },
      {
        "input": "s = \"255255255255255255255255255255255255255\"",
        "output": "[]"
      },
      {
        "input": "s = \"333333333333\"",
        "output": "[]"
      },
      {
        "input": "s = \"01001001001001001001001001001\"",
        "output": "[]"
      },
      {
        "input": "s = \"025525511135\"",
        "output": "[]"
      },
      {
        "input": "s = \"001001001001001001\"",
        "output": "[]"
      }
    ]
  },
  {
    "id": 1605,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Matrix"
    ],
    "problemDescription": "You are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of the elements in the ith row and colSum[j] is the sum of the elements of the jth column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.\nFind any matrix of non-negative integers of size rowSum.length x colSum.length that satisfies the rowSum and colSum requirements.\nReturn a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that fulfills the requirements exists.\n\u00a0\nExample 1:\n\nInput: rowSum = [3,8], colSum = [4,7]\nOutput: [[3,0],\n         [1,7]]\nExplanation: \n0th row: 3 + 0 = 3 == rowSum[0]\n1st row: 1 + 7 = 8 == rowSum[1]\n0th column: 3 + 1 = 4 == colSum[0]\n1st column: 0 + 7 = 7 == colSum[1]\nThe row and column sums match, and all matrix elements are non-negative.\nAnother possible matrix is: [[1,2],\n                             [3,5]]\n\nExample 2:\n\nInput: rowSum = [5,7,10], colSum = [8,6,8]\nOutput: [[0,5,0],\n         [6,1,0],\n         [2,0,8]]\n\n\u00a0\nConstraints:\n\n1 <= rowSum.length, colSum.length <= 500\n0 <= rowSum[i], colSum[i] <= 108\nsum(rowSum) == sum(colSum)\n\n",
    "starterCode": "class Solution:\n    def restoreMatrix(self, rowSum: List[int], colSum: List[int]) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "rowSum = [10,15], colSum = [12,13]",
        "output": "[[10, 0], [2, 13]]"
      },
      {
        "input": "rowSum = [5,5,5], colSum = [5,5,5]",
        "output": "[[5, 0, 0], [0, 5, 0], [0, 0, 5]]"
      },
      {
        "input": "rowSum = [10,20], colSum = [15,15]",
        "output": "[[10, 0], [5, 15]]"
      },
      {
        "input": "rowSum = [10,15,20], colSum = [15,15,15]",
        "output": "[[10, 0, 0], [5, 10, 0], [0, 5, 15]]"
      },
      {
        "input": "rowSum = [1,2,3,4], colSum = [1,2,3,4]",
        "output": "[[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]"
      },
      {
        "input": "rowSum = [1,1,1], colSum = [1,1,1]",
        "output": "[[1, 0, 0], [0, 1, 0], [0, 0, 1]]"
      },
      {
        "input": "rowSum = [5,7,10], colSum = [8,6,8]",
        "output": "[[5, 0, 0], [3, 4, 0], [0, 2, 8]]"
      },
      {
        "input": "rowSum = [10,15,20], colSum = [5,10,20]",
        "output": "[[5, 5, 0], [0, 5, 10], [0, 0, 10]]"
      },
      {
        "input": "rowSum = [0,0], colSum = [0,0]",
        "output": "[[0, 0], [0, 0]]"
      },
      {
        "input": "rowSum = [1,2], colSum = [3,0]",
        "output": "[[1, 0], [2, 0]]"
      },
      {
        "input": "rowSum = [1,2,3], colSum = [3,2,1]",
        "output": "[[1, 0, 0], [2, 0, 0], [0, 2, 1]]"
      },
      {
        "input": "rowSum = [0,0,0], colSum = [0,0,0]",
        "output": "[[0, 0, 0], [0, 0, 0], [0, 0, 0]]"
      },
      {
        "input": "rowSum = [3,8], colSum = [4,7]",
        "output": "[[3, 0], [1, 7]]"
      },
      {
        "input": "rowSum = [25,25,25,25,25], colSum = [25,25,25,25,25]",
        "output": "[[25, 0, 0, 0, 0], [0, 25, 0, 0, 0], [0, 0, 25, 0, 0], [0, 0, 0, 25, 0], [0, 0, 0, 0, 25]]"
      },
      {
        "input": "rowSum = [9, 18, 27, 36, 45], colSum = [5, 10, 15, 20, 25]",
        "output": "[[5, 4, 0, 0, 0], [0, 6, 12, 0, 0], [0, 0, 3, 20, 4], [0, 0, 0, 0, 21], [0, 0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [10, 20, 30], colSum = [6, 9, 12, 15]",
        "output": "[[6, 4, 0, 0], [0, 5, 12, 3], [0, 0, 0, 12]]"
      },
      {
        "input": "rowSum = [5, 5, 5, 5], colSum = [4, 4, 4, 4]",
        "output": "[[4, 1, 0, 0], [0, 3, 2, 0], [0, 0, 2, 3], [0, 0, 0, 1]]"
      },
      {
        "input": "rowSum = [10, 20, 30], colSum = [6, 15, 29]",
        "output": "[[6, 4, 0], [0, 11, 9], [0, 0, 20]]"
      },
      {
        "input": "rowSum = [300, 400, 500, 600], colSum = [200, 300, 400, 700]",
        "output": "[[200, 100, 0, 0], [0, 200, 200, 0], [0, 0, 200, 300], [0, 0, 0, 400]]"
      },
      {
        "input": "rowSum = [12, 25, 30], colSum = [20, 15, 20]",
        "output": "[[12, 0, 0], [8, 15, 2], [0, 0, 18]]"
      },
      {
        "input": "rowSum = [12, 15, 20], colSum = [10, 10, 17]",
        "output": "[[10, 2, 0], [0, 8, 7], [0, 0, 10]]"
      },
      {
        "input": "rowSum = [1000,2000,3000], colSum = [1500,2000,2500]",
        "output": "[[1000, 0, 0], [500, 1500, 0], [0, 500, 2500]]"
      },
      {
        "input": "rowSum = [9, 18, 27], colSum = [12, 15, 18]",
        "output": "[[9, 0, 0], [3, 15, 0], [0, 0, 18]]"
      },
      {
        "input": "rowSum = [100, 100, 100, 100], colSum = [25, 25, 25, 25]",
        "output": "[[25, 25, 25, 25], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [45, 55, 65, 75, 85], colSum = [50, 60, 70, 80, 90]",
        "output": "[[45, 0, 0, 0, 0], [5, 50, 0, 0, 0], [0, 10, 55, 0, 0], [0, 0, 15, 60, 0], [0, 0, 0, 20, 65]]"
      },
      {
        "input": "rowSum = [99, 100, 101, 102], colSum = [101, 102, 99, 100]",
        "output": "[[99, 0, 0, 0], [2, 98, 0, 0], [0, 4, 97, 0], [0, 0, 2, 100]]"
      },
      {
        "input": "rowSum = [50, 100, 150], colSum = [25, 75, 100, 150]",
        "output": "[[25, 25, 0, 0], [0, 50, 50, 0], [0, 0, 50, 100]]"
      },
      {
        "input": "rowSum = [25, 50, 75, 100], colSum = [10, 20, 30, 40, 95]",
        "output": "[[10, 15, 0, 0, 0], [0, 5, 30, 15, 0], [0, 0, 0, 25, 50], [0, 0, 0, 0, 45]]"
      },
      {
        "input": "rowSum = [100, 150, 200, 250], colSum = [100, 100, 150, 200]",
        "output": "[[100, 0, 0, 0], [0, 100, 50, 0], [0, 0, 100, 100], [0, 0, 0, 100]]"
      },
      {
        "input": "rowSum = [45, 55, 65, 75, 85], colSum = [30, 40, 50, 60, 70]",
        "output": "[[30, 15, 0, 0, 0], [0, 25, 30, 0, 0], [0, 0, 20, 45, 0], [0, 0, 0, 15, 60], [0, 0, 0, 0, 10]]"
      },
      {
        "input": "rowSum = [100, 200, 300, 400], colSum = [150, 250, 350, 450]",
        "output": "[[100, 0, 0, 0], [50, 150, 0, 0], [0, 100, 200, 0], [0, 0, 150, 250]]"
      },
      {
        "input": "rowSum = [300, 200, 100, 50], colSum = [150, 150, 150, 100, 50]",
        "output": "[[150, 150, 0, 0, 0], [0, 0, 150, 50, 0], [0, 0, 0, 50, 50], [0, 0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [20, 30, 40, 50], colSum = [10, 20, 30, 40]",
        "output": "[[10, 10, 0, 0], [0, 10, 20, 0], [0, 0, 10, 30], [0, 0, 0, 10]]"
      },
      {
        "input": "rowSum = [1,1,1,1,1,1,1,1,1,1], colSum = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]"
      },
      {
        "input": "rowSum = [100,200,300], colSum = [150,100,250]",
        "output": "[[100, 0, 0], [50, 100, 50], [0, 0, 200]]"
      },
      {
        "input": "rowSum = [50, 50, 50], colSum = [40, 40, 40, 40]",
        "output": "[[40, 10, 0, 0], [0, 30, 20, 0], [0, 0, 20, 30]]"
      },
      {
        "input": "rowSum = [10, 20, 30, 40, 50], colSum = [15, 15, 15, 15, 15]",
        "output": "[[10, 0, 0, 0, 0], [5, 15, 0, 0, 0], [0, 0, 15, 15, 0], [0, 0, 0, 0, 15], [0, 0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [500, 500, 500, 500, 500], colSum = [250, 250, 250, 250, 250]",
        "output": "[[250, 250, 0, 0, 0], [0, 0, 250, 250, 0], [0, 0, 0, 0, 250], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [5, 6, 7, 8], colSum = [10, 8, 6, 4]",
        "output": "[[5, 0, 0, 0], [5, 1, 0, 0], [0, 7, 0, 0], [0, 0, 6, 2]]"
      },
      {
        "input": "rowSum = [100, 200, 300], colSum = [150, 250, 100]",
        "output": "[[100, 0, 0], [50, 150, 0], [0, 100, 100]]"
      },
      {
        "input": "rowSum = [25, 50, 75, 100], colSum = [40, 50, 60, 50]",
        "output": "[[25, 0, 0, 0], [15, 35, 0, 0], [0, 15, 60, 0], [0, 0, 0, 50]]"
      },
      {
        "input": "rowSum = [10, 20, 30, 40, 50], colSum = [50, 40, 30, 20, 10]",
        "output": "[[10, 0, 0, 0, 0], [20, 0, 0, 0, 0], [20, 10, 0, 0, 0], [0, 30, 10, 0, 0], [0, 0, 20, 20, 10]]"
      },
      {
        "input": "rowSum = [500, 300, 200], colSum = [400, 350, 250]",
        "output": "[[400, 100, 0], [0, 250, 50], [0, 0, 200]]"
      },
      {
        "input": "rowSum = [50, 75, 100], colSum = [120, 100, 30]",
        "output": "[[50, 0, 0], [70, 5, 0], [0, 95, 5]]"
      },
      {
        "input": "rowSum = [8, 16, 24, 32], colSum = [16, 24, 16, 24]",
        "output": "[[8, 0, 0, 0], [8, 8, 0, 0], [0, 16, 8, 0], [0, 0, 8, 24]]"
      },
      {
        "input": "rowSum = [8,6,4,2,0], colSum = [1,2,3,4,5]",
        "output": "[[1, 2, 3, 2, 0], [0, 0, 0, 2, 4], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [88, 77, 66, 55, 44], colSum = [99, 88, 77, 66, 55]",
        "output": "[[88, 0, 0, 0, 0], [11, 66, 0, 0, 0], [0, 22, 44, 0, 0], [0, 0, 33, 22, 0], [0, 0, 0, 44, 0]]"
      },
      {
        "input": "rowSum = [150, 200, 250], colSum = [200, 150, 300]",
        "output": "[[150, 0, 0], [50, 150, 0], [0, 0, 250]]"
      },
      {
        "input": "rowSum = [88, 88, 88, 88, 88, 88], colSum = [77, 77, 77, 77, 77, 77]",
        "output": "[[77, 11, 0, 0, 0, 0], [0, 66, 22, 0, 0, 0], [0, 0, 55, 33, 0, 0], [0, 0, 0, 44, 44, 0], [0, 0, 0, 0, 33, 55], [0, 0, 0, 0, 0, 22]]"
      },
      {
        "input": "rowSum = [120, 110, 100, 90], colSum = [105, 95, 85, 75]",
        "output": "[[105, 15, 0, 0], [0, 80, 30, 0], [0, 0, 55, 45], [0, 0, 0, 30]]"
      },
      {
        "input": "rowSum = [50, 60, 70, 80, 90], colSum = [90, 80, 70, 60, 50]",
        "output": "[[50, 0, 0, 0, 0], [40, 20, 0, 0, 0], [0, 60, 10, 0, 0], [0, 0, 60, 20, 0], [0, 0, 0, 40, 50]]"
      },
      {
        "input": "rowSum = [123, 456, 789], colSum = [456, 789, 123]",
        "output": "[[123, 0, 0], [333, 123, 0], [0, 666, 123]]"
      },
      {
        "input": "rowSum = [10, 20, 30, 40, 50], colSum = [5, 10, 15, 20, 60]",
        "output": "[[5, 5, 0, 0, 0], [0, 5, 15, 0, 0], [0, 0, 0, 20, 10], [0, 0, 0, 0, 40], [0, 0, 0, 0, 10]]"
      },
      {
        "input": "rowSum = [8, 16, 24, 32], colSum = [16, 24, 32, 8]",
        "output": "[[8, 0, 0, 0], [8, 8, 0, 0], [0, 16, 8, 0], [0, 0, 24, 8]]"
      },
      {
        "input": "rowSum = [100, 200, 300, 400], colSum = [200, 300, 200, 400]",
        "output": "[[100, 0, 0, 0], [100, 100, 0, 0], [0, 200, 100, 0], [0, 0, 100, 300]]"
      },
      {
        "input": "rowSum = [120, 80, 40], colSum = [90, 70, 30, 10]",
        "output": "[[90, 30, 0, 0], [0, 40, 30, 10], [0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [10, 20, 30, 40], colSum = [15, 25, 25, 25]",
        "output": "[[10, 0, 0, 0], [5, 15, 0, 0], [0, 10, 20, 0], [0, 0, 5, 25]]"
      },
      {
        "input": "rowSum = [99, 98, 97, 96, 95], colSum = [95, 96, 97, 98, 99]",
        "output": "[[95, 4, 0, 0, 0], [0, 92, 6, 0, 0], [0, 0, 91, 6, 0], [0, 0, 0, 92, 4], [0, 0, 0, 0, 95]]"
      },
      {
        "input": "rowSum = [15, 25, 35, 45], colSum = [10, 20, 30, 40]",
        "output": "[[10, 5, 0, 0], [0, 15, 10, 0], [0, 0, 20, 15], [0, 0, 0, 25]]"
      },
      {
        "input": "rowSum = [75, 80, 85, 90, 95, 100], colSum = [60, 65, 70, 75, 80, 85]",
        "output": "[[60, 15, 0, 0, 0, 0], [0, 50, 30, 0, 0, 0], [0, 0, 40, 45, 0, 0], [0, 0, 0, 30, 60, 0], [0, 0, 0, 0, 20, 75], [0, 0, 0, 0, 0, 10]]"
      },
      {
        "input": "rowSum = [100, 150, 200], colSum = [200, 120, 130]",
        "output": "[[100, 0, 0], [100, 50, 0], [0, 70, 130]]"
      },
      {
        "input": "rowSum = [120, 140, 160, 180, 200], colSum = [200, 180, 160, 140, 120]",
        "output": "[[120, 0, 0, 0, 0], [80, 60, 0, 0, 0], [0, 120, 40, 0, 0], [0, 0, 120, 60, 0], [0, 0, 0, 80, 120]]"
      },
      {
        "input": "rowSum = [50, 60, 70, 80], colSum = [30, 40, 50, 60]",
        "output": "[[30, 20, 0, 0], [0, 20, 40, 0], [0, 0, 10, 60], [0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [30,20,10,0], colSum = [10,10,10,30]",
        "output": "[[10, 10, 10, 0], [0, 0, 0, 20], [0, 0, 0, 10], [0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [5,10,15,20,25], colSum = [25,20,15,10,5]",
        "output": "[[5, 0, 0, 0, 0], [10, 0, 0, 0, 0], [10, 5, 0, 0, 0], [0, 15, 5, 0, 0], [0, 0, 10, 10, 5]]"
      },
      {
        "input": "rowSum = [20, 40, 60, 80], colSum = [30, 30, 30, 30]",
        "output": "[[20, 0, 0, 0], [10, 30, 0, 0], [0, 0, 30, 30], [0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [1, 1, 1, 1, 1, 1], colSum = [1, 1, 1, 1, 1, 1]",
        "output": "[[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]]"
      },
      {
        "input": "rowSum = [50, 45, 60], colSum = [40, 30, 35]",
        "output": "[[40, 10, 0], [0, 20, 25], [0, 0, 10]]"
      },
      {
        "input": "rowSum = [123,456,789], colSum = [321,654,987]",
        "output": "[[123, 0, 0], [198, 258, 0], [0, 396, 393]]"
      },
      {
        "input": "rowSum = [100, 200, 300], colSum = [150, 150, 150]",
        "output": "[[100, 0, 0], [50, 150, 0], [0, 0, 150]]"
      },
      {
        "input": "rowSum = [30, 40, 50, 60], colSum = [50, 40, 40, 30]",
        "output": "[[30, 0, 0, 0], [20, 20, 0, 0], [0, 20, 30, 0], [0, 0, 10, 30]]"
      },
      {
        "input": "rowSum = [1, 2, 3, 4, 5], colSum = [5, 4, 3, 2, 1]",
        "output": "[[1, 0, 0, 0, 0], [2, 0, 0, 0, 0], [2, 1, 0, 0, 0], [0, 3, 1, 0, 0], [0, 0, 2, 2, 1]]"
      },
      {
        "input": "rowSum = [30, 20, 10], colSum = [15, 20, 15]",
        "output": "[[15, 15, 0], [0, 5, 15], [0, 0, 0]]"
      },
      {
        "input": "rowSum = [20, 30, 40, 50], colSum = [15, 15, 15, 15, 20, 10]",
        "output": "[[15, 5, 0, 0, 0, 0], [0, 10, 15, 5, 0, 0], [0, 0, 0, 10, 20, 10], [0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [150, 200, 250, 300, 350, 400], colSum = [200, 250, 300, 350, 400, 450]",
        "output": "[[150, 0, 0, 0, 0, 0], [50, 150, 0, 0, 0, 0], [0, 100, 150, 0, 0, 0], [0, 0, 150, 150, 0, 0], [0, 0, 0, 200, 150, 0], [0, 0, 0, 0, 250, 150]]"
      },
      {
        "input": "rowSum = [7, 14, 21, 28], colSum = [7, 14, 21, 28]",
        "output": "[[7, 0, 0, 0], [0, 14, 0, 0], [0, 0, 21, 0], [0, 0, 0, 28]]"
      },
      {
        "input": "rowSum = [30, 60, 90, 120], colSum = [20, 40, 60, 80, 100]",
        "output": "[[20, 10, 0, 0, 0], [0, 30, 30, 0, 0], [0, 0, 30, 60, 0], [0, 0, 0, 20, 100]]"
      },
      {
        "input": "rowSum = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], colSum = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 3, 2, 1]]"
      },
      {
        "input": "rowSum = [10, 20, 30, 40, 50], colSum = [15, 25, 35, 25, 15]",
        "output": "[[10, 0, 0, 0, 0], [5, 15, 0, 0, 0], [0, 10, 20, 0, 0], [0, 0, 15, 25, 0], [0, 0, 0, 0, 15]]"
      },
      {
        "input": "rowSum = [33, 33, 33, 33, 33, 33], colSum = [22, 22, 22, 22, 22, 22]",
        "output": "[[22, 11, 0, 0, 0, 0], [0, 11, 22, 0, 0, 0], [0, 0, 0, 22, 11, 0], [0, 0, 0, 0, 11, 22], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [100, 200, 300, 400, 500], colSum = [500, 400, 300, 200, 100]",
        "output": "[[100, 0, 0, 0, 0], [200, 0, 0, 0, 0], [200, 100, 0, 0, 0], [0, 300, 100, 0, 0], [0, 0, 200, 200, 100]]"
      },
      {
        "input": "rowSum = [10000,20000,30000], colSum = [15000,20000,25000]",
        "output": "[[10000, 0, 0], [5000, 15000, 0], [0, 5000, 25000]]"
      },
      {
        "input": "rowSum = [5, 15, 25, 35], colSum = [10, 10, 10, 30]",
        "output": "[[5, 0, 0, 0], [5, 10, 0, 0], [0, 0, 10, 15], [0, 0, 0, 15]]"
      },
      {
        "input": "rowSum = [1, 1, 1, 1, 1], colSum = [1, 1, 1, 1, 1]",
        "output": "[[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]"
      },
      {
        "input": "rowSum = [7,14,21,28,35], colSum = [5,10,15,20,25]",
        "output": "[[5, 2, 0, 0, 0], [0, 8, 6, 0, 0], [0, 0, 9, 12, 0], [0, 0, 0, 8, 20], [0, 0, 0, 0, 5]]"
      },
      {
        "input": "rowSum = [12, 34, 56, 78, 90, 123], colSum = [23, 45, 67, 89, 101, 112]",
        "output": "[[12, 0, 0, 0, 0, 0], [11, 23, 0, 0, 0, 0], [0, 22, 34, 0, 0, 0], [0, 0, 33, 45, 0, 0], [0, 0, 0, 44, 46, 0], [0, 0, 0, 0, 55, 68]]"
      },
      {
        "input": "rowSum = [100, 200, 300, 400], colSum = [100, 150, 200, 350]",
        "output": "[[100, 0, 0, 0], [0, 150, 50, 0], [0, 0, 150, 150], [0, 0, 0, 200]]"
      },
      {
        "input": "rowSum = [100, 200, 300, 400, 500], colSum = [250, 250, 250, 250, 250]",
        "output": "[[100, 0, 0, 0, 0], [150, 50, 0, 0, 0], [0, 200, 100, 0, 0], [0, 0, 150, 250, 0], [0, 0, 0, 0, 250]]"
      },
      {
        "input": "rowSum = [25, 75], colSum = [100, 50]",
        "output": "[[25, 0], [75, 0]]"
      },
      {
        "input": "rowSum = [10, 20, 30, 40, 50], colSum = [5, 15, 25, 35, 45]",
        "output": "[[5, 5, 0, 0, 0], [0, 10, 10, 0, 0], [0, 0, 15, 15, 0], [0, 0, 0, 20, 20], [0, 0, 0, 0, 25]]"
      },
      {
        "input": "rowSum = [1000, 2000, 3000], colSum = [1500, 1500, 1500]",
        "output": "[[1000, 0, 0], [500, 1500, 0], [0, 0, 1500]]"
      },
      {
        "input": "rowSum = [5, 10, 15, 20], colSum = [20, 15, 10, 5]",
        "output": "[[5, 0, 0, 0], [10, 0, 0, 0], [5, 10, 0, 0], [0, 5, 10, 5]]"
      },
      {
        "input": "rowSum = [50, 50, 50, 50, 50], colSum = [25, 25, 25, 25, 25, 25, 25]",
        "output": "[[25, 25, 0, 0, 0, 0, 0], [0, 0, 25, 25, 0, 0, 0], [0, 0, 0, 0, 25, 25, 0], [0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [500, 1000, 1500, 2000], colSum = [600, 700, 800, 900]",
        "output": "[[500, 0, 0, 0], [100, 700, 200, 0], [0, 0, 600, 900], [0, 0, 0, 0]]"
      },
      {
        "input": "rowSum = [50,50,50,50], colSum = [60,60,60,60]",
        "output": "[[50, 0, 0, 0], [10, 40, 0, 0], [0, 20, 30, 0], [0, 0, 30, 20]]"
      },
      {
        "input": "rowSum = [40, 50, 60], colSum = [70, 60, 50]",
        "output": "[[40, 0, 0], [30, 20, 0], [0, 40, 20]]"
      },
      {
        "input": "rowSum = [12, 15, 7], colSum = [10, 10, 12]",
        "output": "[[10, 2, 0], [0, 8, 7], [0, 0, 5]]"
      },
      {
        "input": "rowSum = [100, 200, 300], colSum = [250, 250, 200]",
        "output": "[[100, 0, 0], [150, 50, 0], [0, 200, 100]]"
      },
      {
        "input": "rowSum = [9,18,27,36], colSum = [12,24,36,48]",
        "output": "[[9, 0, 0, 0], [3, 15, 0, 0], [0, 9, 18, 0], [0, 0, 18, 18]]"
      },
      {
        "input": "rowSum = [9, 9, 9, 9], colSum = [6, 6, 6, 6, 9]",
        "output": "[[6, 3, 0, 0, 0], [0, 3, 6, 0, 0], [0, 0, 0, 6, 3], [0, 0, 0, 0, 6]]"
      },
      {
        "input": "rowSum = [50, 50, 50, 50, 50, 50], colSum = [50, 50, 50, 50, 50, 50]",
        "output": "[[50, 0, 0, 0, 0, 0], [0, 50, 0, 0, 0, 0], [0, 0, 50, 0, 0, 0], [0, 0, 0, 50, 0, 0], [0, 0, 0, 0, 50, 0], [0, 0, 0, 0, 0, 50]]"
      },
      {
        "input": "rowSum = [33, 28, 44, 55], colSum = [30, 33, 25, 50]",
        "output": "[[30, 3, 0, 0], [0, 28, 0, 0], [0, 2, 25, 17], [0, 0, 0, 33]]"
      },
      {
        "input": "rowSum = [300, 200, 100], colSum = [150, 200, 150]",
        "output": "[[150, 150, 0], [0, 50, 150], [0, 0, 0]]"
      },
      {
        "input": "rowSum = [30, 40, 50], colSum = [20, 50, 20]",
        "output": "[[20, 10, 0], [0, 40, 0], [0, 0, 20]]"
      },
      {
        "input": "rowSum = [120, 90, 75, 60], colSum = [80, 100, 75, 60]",
        "output": "[[80, 40, 0, 0], [0, 60, 30, 0], [0, 0, 45, 30], [0, 0, 0, 30]]"
      },
      {
        "input": "rowSum = [5, 15, 25, 35], colSum = [10, 20, 30, 40]",
        "output": "[[5, 0, 0, 0], [5, 10, 0, 0], [0, 10, 15, 0], [0, 0, 15, 20]]"
      },
      {
        "input": "rowSum = [34, 78, 90, 123], colSum = [50, 60, 70, 80]",
        "output": "[[34, 0, 0, 0], [16, 60, 2, 0], [0, 0, 68, 22], [0, 0, 0, 58]]"
      },
      {
        "input": "rowSum = [120, 150, 180], colSum = [100, 130, 200]",
        "output": "[[100, 20, 0], [0, 110, 40], [0, 0, 160]]"
      },
      {
        "input": "rowSum = [10, 20, 30], colSum = [30, 20, 10]",
        "output": "[[10, 0, 0], [20, 0, 0], [0, 20, 10]]"
      },
      {
        "input": "rowSum = [10,10,10,10,10], colSum = [5,5,5,5,50]",
        "output": "[[5, 5, 0, 0, 0], [0, 0, 5, 5, 0], [0, 0, 0, 0, 10], [0, 0, 0, 0, 10], [0, 0, 0, 0, 10]]"
      },
      {
        "input": "rowSum = [12, 9, 6], colSum = [10, 10, 7]",
        "output": "[[10, 2, 0], [0, 8, 1], [0, 0, 6]]"
      },
      {
        "input": "rowSum = [15, 25, 35, 45], colSum = [20, 30, 25, 25]",
        "output": "[[15, 0, 0, 0], [5, 20, 0, 0], [0, 10, 25, 0], [0, 0, 0, 25]]"
      },
      {
        "input": "rowSum = [100, 150, 200, 250], colSum = [150, 200, 250, 100]",
        "output": "[[100, 0, 0, 0], [50, 100, 0, 0], [0, 100, 100, 0], [0, 0, 150, 100]]"
      }
    ]
  },
  {
    "id": 1562,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Simulation"
    ],
    "problemDescription": "Given an array arr that represents a permutation of numbers from 1 to n.\nYou have a binary string of size n that initially has all its bits set to zero. At each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1.\nYou are also given an integer m. Find the latest step at which there exists a group of ones of length m. A group of ones is a contiguous substring of 1's such that it cannot be extended in either direction.\nReturn the latest step at which there exists a group of ones of length exactly m. If no such group exists, return -1.\n\u00a0\nExample 1:\n\nInput: arr = [3,5,1,2,4], m = 1\nOutput: 4\nExplanation: \nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"00101\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"11101\", groups: [\"111\", \"1\"]\nStep 5: \"11111\", groups: [\"11111\"]\nThe latest step at which there exists a group of size 1 is step 4.\n\nExample 2:\n\nInput: arr = [3,1,5,4,2], m = 2\nOutput: -1\nExplanation: \nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"10100\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"10111\", groups: [\"1\", \"111\"]\nStep 5: \"11111\", groups: [\"11111\"]\nNo group of size 2 exists during any step.\n\n\u00a0\nConstraints:\n\nn == arr.length\n1 <= m <= n <= 105\n1 <= arr[i] <= n\nAll integers in arr are distinct.\n\n",
    "starterCode": "class Solution:\n    def findLatestStep(self, arr: List[int], m: int) -> int:\n        ",
    "testCases": [
      {
        "input": "arr = [1,2,3,4,5], m = 3",
        "output": "3"
      },
      {
        "input": "arr = [1,3,5,2,4], m = 1",
        "output": "4"
      },
      {
        "input": "arr = [2,1,3,5,4], m = 1",
        "output": "4"
      },
      {
        "input": "arr = [3,5,1,2,4], m = 1",
        "output": "4"
      },
      {
        "input": "arr = [5,4,3,2,1], m = 1",
        "output": "1"
      },
      {
        "input": "arr = [5,4,3,2,1], m = 2",
        "output": "2"
      },
      {
        "input": "arr = [3,1,5,4,2], m = 2",
        "output": "-1"
      },
      {
        "input": "arr = [1,3,2,5,4], m = 1",
        "output": "4"
      },
      {
        "input": "arr = [1,3,5,2,4], m = 2",
        "output": "-1"
      },
      {
        "input": "arr = [2,5,8,1,4,7,10,3,6,9], m = 3",
        "output": "-1"
      },
      {
        "input": "arr = [15,1,13,2,14,3,12,4,11,5,10,6,9,7,8], m = 5",
        "output": "11"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6], m = 3",
        "output": "3"
      },
      {
        "input": "arr = [8,5,10,1,9,3,6,7,4,2], m = 2",
        "output": "7"
      },
      {
        "input": "arr = [3,2,5,1,4,6,7,8], m = 3",
        "output": "4"
      },
      {
        "input": "arr = [3,6,2,8,1,9,4,7,5,10], m = 3",
        "output": "6"
      },
      {
        "input": "arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], m = 6",
        "output": "6"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10], m = 3",
        "output": "3"
      },
      {
        "input": "arr = [5,10,1,2,6,8,4,7,9,3], m = 5",
        "output": "8"
      },
      {
        "input": "arr = [1, 2, 4, 3, 6, 5, 8, 7, 10, 9], m = 3",
        "output": "-1"
      },
      {
        "input": "arr = [1,10,5,6,7,8,9,2,3,4], m = 3",
        "output": "9"
      },
      {
        "input": "arr = [5, 3, 1, 2, 4, 9, 7, 6, 8, 10], m = 1",
        "output": "8"
      },
      {
        "input": "arr = [1,2,5,6,3,4,7,8,10,9], m = 3",
        "output": "5"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], m = 2",
        "output": "-1"
      },
      {
        "input": "arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], m = 5",
        "output": "5"
      },
      {
        "input": "arr = [1, 4, 7, 10, 2, 5, 8, 11, 3, 6, 9, 12], m = 2",
        "output": "10"
      },
      {
        "input": "arr = [5, 1, 9, 2, 6, 3, 7, 4, 8, 10], m = 3",
        "output": "7"
      },
      {
        "input": "arr = [10,1,20,2,19,3,18,4,17,5,16,6,15,7,14,8,13,9,12,11], m = 7",
        "output": "16"
      },
      {
        "input": "arr = [1, 5, 9, 2, 6, 3, 7, 4, 8, 10], m = 2",
        "output": "6"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 1",
        "output": "1"
      },
      {
        "input": "arr = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], m = 6",
        "output": "6"
      },
      {
        "input": "arr = [2,1,4,3,6,5,8,7,10,9], m = 2",
        "output": "3"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10], m = 10",
        "output": "10"
      },
      {
        "input": "arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], m = 1",
        "output": "1"
      },
      {
        "input": "arr = [2, 4, 1, 6, 5, 3], m = 2",
        "output": "5"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10], m = 5",
        "output": "5"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1], m = 4",
        "output": "4"
      },
      {
        "input": "arr = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], m = 10",
        "output": "10"
      },
      {
        "input": "arr = [6,2,5,9,7,8,3,1,10,4], m = 5",
        "output": "8"
      },
      {
        "input": "arr = [1, 6, 4, 3, 2, 5], m = 1",
        "output": "5"
      },
      {
        "input": "arr = [5,1,6,3,8,2,7,10,4,9], m = 3",
        "output": "8"
      },
      {
        "input": "arr = [1,15,2,14,3,13,4,12,5,11,6,10,7,9,8], m = 7",
        "output": "14"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2",
        "output": "2"
      },
      {
        "input": "arr = [10,5,2,7,1,8,3,6,9,4], m = 3",
        "output": "9"
      },
      {
        "input": "arr = [10, 8, 6, 4, 2, 1, 3, 5, 7, 9], m = 1",
        "output": "9"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5",
        "output": "5"
      },
      {
        "input": "arr = [6, 5, 4, 3, 2, 1], m = 3",
        "output": "3"
      },
      {
        "input": "arr = [7, 3, 10, 8, 6, 9, 1, 5, 4, 2], m = 4",
        "output": "-1"
      },
      {
        "input": "arr = [1, 2, 5, 4, 3, 6, 7, 8, 9, 10], m = 2",
        "output": "4"
      },
      {
        "input": "arr = [10,1,2,3,4,5,6,7,8,9], m = 9",
        "output": "-1"
      },
      {
        "input": "arr = [3,6,1,9,7,8,2,5,10,4], m = 3",
        "output": "9"
      },
      {
        "input": "arr = [3, 1, 7, 5, 9, 2, 8, 6, 10, 4], m = 4",
        "output": "-1"
      },
      {
        "input": "arr = [6,7,8,1,2,3,4,5,12,11,9,10], m = 6",
        "output": "-1"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10], m = 1",
        "output": "1"
      },
      {
        "input": "arr = [10, 5, 1, 6, 3, 8, 9, 2, 7, 4], m = 2",
        "output": "8"
      },
      {
        "input": "arr = [3, 5, 2, 1, 4, 6, 8, 7, 10, 9], m = 1",
        "output": "9"
      },
      {
        "input": "arr = [1,10,2,9,3,8,4,7,5,6], m = 4",
        "output": "9"
      },
      {
        "input": "arr = [1,11,2,12,3,13,4,14,5,15,6,16,7,17,8,18,9,19,10,20], m = 10",
        "output": "-1"
      },
      {
        "input": "arr = [3, 1, 5, 7, 6, 2, 8, 4, 9, 10], m = 2",
        "output": "-1"
      },
      {
        "input": "arr = [1, 2, 5, 6, 3, 4, 9, 10, 7, 8], m = 2",
        "output": "9"
      },
      {
        "input": "arr = [1,10,3,8,5,12,7,2,9,4,6,11], m = 4",
        "output": "10"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1], m = 5",
        "output": "5"
      },
      {
        "input": "arr = [6, 5, 8, 4, 7, 10, 9, 1, 2, 3], m = 3",
        "output": "4"
      },
      {
        "input": "arr = [9,5,10,1,2,3,4,6,7,8], m = 4",
        "output": "-1"
      },
      {
        "input": "arr = [3,1,4,2,5,6,7,8,9,10], m = 3",
        "output": "-1"
      },
      {
        "input": "arr = [6, 2, 3, 1, 5, 4], m = 2",
        "output": "5"
      },
      {
        "input": "arr = [1,3,5,7,9,2,4,6,8,10], m = 1",
        "output": "8"
      },
      {
        "input": "arr = [6, 3, 1, 5, 4, 2], m = 1",
        "output": "5"
      },
      {
        "input": "arr = [5,1,9,3,7,2,8,6,4,10], m = 2",
        "output": "-1"
      },
      {
        "input": "arr = [5,2,1,8,3,4,7,6,10,9], m = 2",
        "output": "7"
      },
      {
        "input": "arr = [10, 2, 8, 4, 6, 3, 9, 5, 7, 1], m = 3",
        "output": "8"
      },
      {
        "input": "arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], m = 3",
        "output": "3"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m = 5",
        "output": "5"
      },
      {
        "input": "arr = [5, 1, 6, 3, 4, 2], m = 1",
        "output": "5"
      },
      {
        "input": "arr = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9], m = 4",
        "output": "5"
      },
      {
        "input": "arr = [5,1,9,10,3,7,4,6,8,2], m = 3",
        "output": "7"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1], m = 3",
        "output": "3"
      },
      {
        "input": "arr = [6, 4, 2, 8, 10, 1, 3, 5, 7, 9], m = 2",
        "output": "6"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1], m = 1",
        "output": "1"
      },
      {
        "input": "arr = [3, 1, 4, 2, 6, 5, 7, 10, 9, 8], m = 4",
        "output": "5"
      },
      {
        "input": "arr = [2, 4, 6, 8, 10, 1, 3, 5, 7, 9], m = 2",
        "output": "6"
      },
      {
        "input": "arr = [5,1,7,10,3,8,4,6,9,2], m = 4",
        "output": "-1"
      },
      {
        "input": "arr = [3,6,1,8,2,7,4,9,5,10], m = 1",
        "output": "5"
      },
      {
        "input": "arr = [1,10,2,9,3,8,4,7,5,6,11,20,12,19,13,18,14,17,15,16], m = 8",
        "output": "-1"
      },
      {
        "input": "arr = [1,2,4,5,3,7,6,8,10,9], m = 2",
        "output": "4"
      },
      {
        "input": "arr = [6,3,5,1,2,4,9,7,8,10], m = 4",
        "output": "-1"
      },
      {
        "input": "arr = [2,4,6,8,10,1,3,5,7,9], m = 5",
        "output": "-1"
      },
      {
        "input": "arr = [1, 5, 3, 9, 7, 2, 6, 10, 4, 8], m = 1",
        "output": "7"
      },
      {
        "input": "arr = [7, 5, 3, 1, 9, 10, 8, 6, 4, 2], m = 5",
        "output": "-1"
      },
      {
        "input": "arr = [5, 3, 8, 6, 2, 4, 1, 7, 9, 10], m = 3",
        "output": "-1"
      },
      {
        "input": "arr = [3, 2, 5, 4, 8, 7, 10, 9, 6, 1], m = 4",
        "output": "8"
      },
      {
        "input": "arr = [1, 6, 10, 3, 5, 9, 2, 4, 8, 7], m = 4",
        "output": "-1"
      },
      {
        "input": "arr = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6], m = 4",
        "output": "9"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1], m = 2",
        "output": "2"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 4",
        "output": "4"
      },
      {
        "input": "arr = [5, 3, 1, 2, 4, 6, 7, 8, 9, 10], m = 3",
        "output": "4"
      },
      {
        "input": "arr = [5, 1, 9, 3, 7, 2, 8, 10, 4, 6], m = 5",
        "output": "9"
      },
      {
        "input": "arr = [3, 6, 9, 2, 5, 8, 1, 4, 7, 10], m = 2",
        "output": "8"
      },
      {
        "input": "arr = [10, 2, 6, 4, 7, 9, 1, 8, 5, 3], m = 5",
        "output": "8"
      },
      {
        "input": "arr = [5,6,7,8,9,10,1,2,3,4], m = 3",
        "output": "9"
      },
      {
        "input": "arr = [5,2,8,10,3,7,4,6,9,1], m = 2",
        "output": "7"
      },
      {
        "input": "arr = [10, 8, 6, 4, 2, 1, 3, 5, 7, 9], m = 2",
        "output": "6"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10], m = 4",
        "output": "4"
      },
      {
        "input": "arr = [10,1,9,2,8,3,7,4,6,5], m = 4",
        "output": "9"
      },
      {
        "input": "arr = [1, 2, 5, 4, 7, 3, 8, 6, 9, 10], m = 2",
        "output": "7"
      },
      {
        "input": "arr = [5, 3, 1, 7, 9, 10, 8, 6, 4, 2], m = 3",
        "output": "-1"
      },
      {
        "input": "arr = [6,1,4,5,3,7,9,8,10,2], m = 2",
        "output": "-1"
      }
    ]
  },
  {
    "id": 1686,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Math",
      "Game Theory",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.\nYou are given two integer arrays of length n, aliceValues and bobValues. Each aliceValues[i] and bobValues[i] represents how Alice and Bob, respectively, value the ith stone.\nThe winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally.\u00a0Both players know the other's values.\nDetermine the result of the game, and:\n\nIf Alice wins, return 1.\nIf Bob wins, return -1.\nIf the game results in a draw, return 0.\n\n\u00a0\nExample 1:\n\nInput: aliceValues = [1,3], bobValues = [2,1]\nOutput: 1\nExplanation:\nIf Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.\nBob can only choose stone 0, and will only receive 2 points.\nAlice wins.\n\nExample 2:\n\nInput: aliceValues = [1,2], bobValues = [3,1]\nOutput: 0\nExplanation:\nIf Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.\nDraw.\n\nExample 3:\n\nInput: aliceValues = [2,4,3], bobValues = [1,6,7]\nOutput: -1\nExplanation:\nRegardless of how Alice plays, Bob will be able to have more points than Alice.\nFor example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.\nBob wins.\n\n\u00a0\nConstraints:\n\nn == aliceValues.length == bobValues.length\n1 <= n <= 105\n1 <= aliceValues[i], bobValues[i] <= 100\n\n",
    "starterCode": "class Solution:\n    def stoneGameVI(self, aliceValues: List[int], bobValues: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "aliceValues = [1,2], bobValues = [3,1]",
        "output": "0"
      },
      {
        "input": "aliceValues = [1,2,3,4,5], bobValues = [5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "aliceValues = [9,9,9,9,9], bobValues = [1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "aliceValues = [5,3,1,4], bobValues = [4,1,2,3]",
        "output": "1"
      },
      {
        "input": "aliceValues = [10,20,30], bobValues = [30,20,10]",
        "output": "1"
      },
      {
        "input": "aliceValues = [1,3], bobValues = [2,1]",
        "output": "1"
      },
      {
        "input": "aliceValues = [2,2,2,2,2], bobValues = [3,3,3,3,3]",
        "output": "0"
      },
      {
        "input": "aliceValues = [1,1,1,1], bobValues = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "aliceValues = [1,1,1,1,1], bobValues = [9,9,9,9,9]",
        "output": "-1"
      },
      {
        "input": "aliceValues = [7,8,9], bobValues = [9,8,7]",
        "output": "1"
      },
      {
        "input": "aliceValues = [2,4,3], bobValues = [1,6,7]",
        "output": "-1"
      },
      {
        "input": "aliceValues = [10,10,10,10], bobValues = [10,10,10,10]",
        "output": "0"
      },
      {
        "input": "aliceValues = [5,3,8,2], bobValues = [4,1,7,3]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100,100,100], bobValues = [100,100,100]",
        "output": "1"
      },
      {
        "input": "aliceValues = [99,98,97], bobValues = [1,2,3]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100,1,1,1], bobValues = [1,100,1,1]",
        "output": "0"
      },
      {
        "input": "aliceValues = [30,20,10], bobValues = [10,20,30]",
        "output": "1"
      },
      {
        "input": "aliceValues = [5,5,5,5], bobValues = [5,5,5,5]",
        "output": "0"
      },
      {
        "input": "aliceValues = [1,1,1,1,1], bobValues = [1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "aliceValues = [99, 1, 99, 1, 99, 1], bobValues = [1, 99, 1, 99, 1, 99]",
        "output": "0"
      },
      {
        "input": "aliceValues = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100], bobValues = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]",
        "output": "0"
      },
      {
        "input": "aliceValues = [80,70,60,50,40,30,20,10], bobValues = [10,20,30,40,50,60,70,80]",
        "output": "0"
      },
      {
        "input": "aliceValues = [99, 50, 25, 10, 5], bobValues = [1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100, 50, 25, 12, 6], bobValues = [5, 20, 40, 60, 80]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100, 1, 100, 1, 100], bobValues = [1, 100, 1, 100, 1]",
        "output": "1"
      },
      {
        "input": "aliceValues = [5,8,7,12,9], bobValues = [4,6,5,10,7]",
        "output": "1"
      },
      {
        "input": "aliceValues = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], bobValues = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "aliceValues = [10,10,10,10,10,10,10,10,10,10], bobValues = [9,9,9,9,9,9,9,9,9,9]",
        "output": "1"
      },
      {
        "input": "aliceValues = [3,2,3,4,5], bobValues = [5,4,3,2,3]",
        "output": "1"
      },
      {
        "input": "aliceValues = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], bobValues = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100,1,1,1,1,1,1,1,1,1], bobValues = [1,1,1,1,1,1,1,1,1,100]",
        "output": "0"
      },
      {
        "input": "aliceValues = [50, 30, 20], bobValues = [1, 20, 30]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100, 99, 98, 97, 96], bobValues = [95, 94, 93, 92, 91]",
        "output": "1"
      },
      {
        "input": "aliceValues = [1,2,3,4,5,6,7,8,9,10], bobValues = [10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "aliceValues = [5, 5, 5, 5], bobValues = [6, 6, 6, 6]",
        "output": "-1"
      },
      {
        "input": "aliceValues = [1, 5, 9, 13, 17], bobValues = [16, 12, 8, 4, 0]",
        "output": "1"
      },
      {
        "input": "aliceValues = [23,45,67,89,10], bobValues = [10,89,67,45,23]",
        "output": "1"
      },
      {
        "input": "aliceValues = [23, 45, 67, 89, 12], bobValues = [12, 89, 67, 45, 23]",
        "output": "1"
      },
      {
        "input": "aliceValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], bobValues = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "aliceValues = [50, 30, 20, 10, 1], bobValues = [10, 20, 30, 40, 50]",
        "output": "1"
      },
      {
        "input": "aliceValues = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], bobValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "1"
      },
      {
        "input": "aliceValues = [99, 98, 97, 96, 95], bobValues = [1, 2, 3, 4, 5]",
        "output": "1"
      },
      {
        "input": "aliceValues = [50, 50, 50, 50, 50], bobValues = [50, 50, 50, 50, 50]",
        "output": "1"
      },
      {
        "input": "aliceValues = [1,10,2,9,3,8,4,7,5,6], bobValues = [10,1,9,2,8,3,7,4,6,5]",
        "output": "0"
      },
      {
        "input": "aliceValues = [5,2,3,3,4], bobValues = [4,3,2,3,5]",
        "output": "1"
      },
      {
        "input": "aliceValues = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], bobValues = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "1"
      },
      {
        "input": "aliceValues = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75], bobValues = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100, 50, 25, 10, 5], bobValues = [5, 10, 25, 50, 100]",
        "output": "1"
      },
      {
        "input": "aliceValues = [30,20,10,50,40,60,70], bobValues = [70,60,50,40,30,20,10]",
        "output": "1"
      },
      {
        "input": "aliceValues = [50, 50, 50], bobValues = [100, 100, 100]",
        "output": "0"
      },
      {
        "input": "aliceValues = [99, 1, 98, 2, 97, 3, 96, 4, 95, 5], bobValues = [5, 95, 4, 96, 3, 97, 2, 98, 1, 99]",
        "output": "0"
      },
      {
        "input": "aliceValues = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86], bobValues = [86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "1"
      },
      {
        "input": "aliceValues = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], bobValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100, 100, 100, 100, 100], bobValues = [99, 99, 99, 99, 99]",
        "output": "1"
      },
      {
        "input": "aliceValues = [80, 20, 60, 40, 100, 50, 70], bobValues = [70, 50, 100, 60, 20, 40, 80]",
        "output": "1"
      },
      {
        "input": "aliceValues = [7, 14, 21, 28, 35, 42], bobValues = [6, 12, 18, 24, 30, 36]",
        "output": "1"
      },
      {
        "input": "aliceValues = [10, 10, 10, 10], bobValues = [20, 20, 20, 20]",
        "output": "-1"
      },
      {
        "input": "aliceValues = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], bobValues = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "0"
      },
      {
        "input": "aliceValues = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], bobValues = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "aliceValues = [100, 90, 80, 70, 60], bobValues = [60, 70, 80, 90, 100]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100,100,1,1,1], bobValues = [1,1,100,100,100]",
        "output": "1"
      },
      {
        "input": "aliceValues = [2, 4, 6, 8, 10], bobValues = [1, 3, 5, 7, 9]",
        "output": "1"
      },
      {
        "input": "aliceValues = [5, 15, 25, 35, 45, 55], bobValues = [55, 45, 35, 25, 15, 5]",
        "output": "0"
      },
      {
        "input": "aliceValues = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90], bobValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "1"
      },
      {
        "input": "aliceValues = [1,3,5,7,9,11,13,15,17,19], bobValues = [19,17,15,13,11,9,7,5,3,1]",
        "output": "0"
      },
      {
        "input": "aliceValues = [100, 100, 100, 100, 100], bobValues = [50, 50, 50, 50, 50]",
        "output": "1"
      },
      {
        "input": "aliceValues = [90, 20, 30, 10, 50], bobValues = [50, 90, 10, 30, 20]",
        "output": "1"
      },
      {
        "input": "aliceValues = [10, 10, 10, 10, 10, 10], bobValues = [9, 9, 9, 9, 9, 9]",
        "output": "1"
      },
      {
        "input": "aliceValues = [99,98,97,96,95,94,93,92,91,90], bobValues = [1,2,3,4,5,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "aliceValues = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], bobValues = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "0"
      },
      {
        "input": "aliceValues = [5,5,5,5,5,5,5,5,5,5], bobValues = [5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "aliceValues = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], bobValues = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100, 1, 2, 3, 4], bobValues = [1, 100, 2, 3, 4]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100, 1, 50, 25, 75], bobValues = [90, 99, 5, 20, 70]",
        "output": "1"
      },
      {
        "input": "aliceValues = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], bobValues = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "0"
      },
      {
        "input": "aliceValues = [90,90,90,90,90,90,90,90,90,90], bobValues = [91,91,91,91,91,91,91,91,91,91]",
        "output": "-1"
      },
      {
        "input": "aliceValues = [2, 3, 5, 7, 11], bobValues = [11, 7, 5, 3, 2]",
        "output": "1"
      },
      {
        "input": "aliceValues = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], bobValues = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "0"
      },
      {
        "input": "aliceValues = [30, 30, 30, 30, 30], bobValues = [30, 30, 30, 30, 30]",
        "output": "1"
      },
      {
        "input": "aliceValues = [30, 20, 10], bobValues = [10, 20, 30]",
        "output": "1"
      },
      {
        "input": "aliceValues = [10, 1, 10, 1, 10, 1, 10, 1], bobValues = [1, 10, 1, 10, 1, 10, 1, 10]",
        "output": "0"
      },
      {
        "input": "aliceValues = [10,20,30,40,50,60,70,80,90,100], bobValues = [100,90,80,70,60,50,40,30,20,10]",
        "output": "0"
      },
      {
        "input": "aliceValues = [1, 3, 5, 7, 9, 11, 13], bobValues = [2, 4, 6, 8, 10, 12, 14]",
        "output": "1"
      },
      {
        "input": "aliceValues = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], bobValues = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "-1"
      },
      {
        "input": "aliceValues = [10, 20, 30, 40, 50], bobValues = [50, 40, 30, 20, 10]",
        "output": "1"
      },
      {
        "input": "aliceValues = [50, 50, 50, 50, 50], bobValues = [40, 40, 40, 40, 60]",
        "output": "1"
      },
      {
        "input": "aliceValues = [50,40,30,20,10,10,20,30,40,50], bobValues = [10,20,30,40,50,50,40,30,20,10]",
        "output": "0"
      },
      {
        "input": "aliceValues = [99, 1, 2, 3, 4], bobValues = [4, 3, 2, 1, 99]",
        "output": "1"
      },
      {
        "input": "aliceValues = [50, 40, 30, 20, 10], bobValues = [10, 20, 30, 40, 50]",
        "output": "1"
      },
      {
        "input": "aliceValues = [10, 30, 20, 50, 40], bobValues = [40, 20, 30, 10, 50]",
        "output": "1"
      },
      {
        "input": "aliceValues = [50, 50, 50, 50, 50], bobValues = [50, 50, 50, 50, 51]",
        "output": "1"
      },
      {
        "input": "aliceValues = [5, 15, 25, 35, 45, 55, 65], bobValues = [65, 55, 45, 35, 25, 15, 5]",
        "output": "1"
      },
      {
        "input": "aliceValues = [10,20,30,40,50], bobValues = [50,40,30,20,10]",
        "output": "1"
      },
      {
        "input": "aliceValues = [50,25,50,75,25], bobValues = [75,50,25,25,50]",
        "output": "1"
      },
      {
        "input": "aliceValues = [1, 1, 1, 2, 2, 2, 3, 3, 3], bobValues = [3, 3, 3, 2, 2, 2, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100,1,1,1,1], bobValues = [1,1,1,1,100]",
        "output": "1"
      },
      {
        "input": "aliceValues = [90, 80, 70, 60, 50, 40, 30, 20, 10], bobValues = [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "output": "1"
      },
      {
        "input": "aliceValues = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], bobValues = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "aliceValues = [90,10,90,10,90], bobValues = [10,90,10,90,10]",
        "output": "1"
      },
      {
        "input": "aliceValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], bobValues = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "aliceValues = [42, 23, 17, 5, 99], bobValues = [99, 5, 17, 23, 42]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100,50,1,1,1,1,1,1,1,1], bobValues = [1,1,99,99,99,99,99,99,99,99]",
        "output": "-1"
      },
      {
        "input": "aliceValues = [30,40,50,60,70,80,90,100,110,120], bobValues = [10,20,30,40,50,60,70,80,90,100]",
        "output": "1"
      },
      {
        "input": "aliceValues = [70, 60, 50, 40, 30, 20, 10], bobValues = [10, 20, 30, 40, 50, 60, 70]",
        "output": "1"
      },
      {
        "input": "aliceValues = [90,10,20,30,40,50,60,70,80], bobValues = [10,90,80,70,60,50,40,30,20]",
        "output": "1"
      },
      {
        "input": "aliceValues = [100], bobValues = [1]",
        "output": "1"
      }
    ]
  },
  {
    "id": 539,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "String",
      "Sorting"
    ],
    "problemDescription": "Given a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time-points in the list.\n\u00a0\nExample 1:\nInput: timePoints = [\"23:59\",\"00:00\"]\nOutput: 1\nExample 2:\nInput: timePoints = [\"00:00\",\"23:59\",\"00:00\"]\nOutput: 0\n\n\u00a0\nConstraints:\n\n2 <= timePoints.length <= 2 * 104\ntimePoints[i] is in the format \"HH:MM\".\n\n",
    "starterCode": "class Solution:\n    def findMinDifference(self, timePoints: List[str]) -> int:\n        ",
    "testCases": [
      {
        "input": "timePoints = [\"01:01\",\"02:02\",\"03:03\",\"23:23\"]",
        "output": "61"
      },
      {
        "input": "timePoints = [\"12:34\",\"12:34\",\"12:34\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"14:59\",\"15:00\",\"15:01\",\"15:02\",\"15:03\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"23:59\",\"00:00\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"14:50\",\"14:52\",\"15:50\",\"15:51\",\"16:00\",\"16:05\",\"16:10\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"01:01\",\"02:02\",\"03:03\",\"04:04\",\"05:05\",\"06:06\",\"07:07\",\"08:08\",\"09:09\",\"10:10\",\"11:11\",\"12:12\",\"13:13\",\"14:14\",\"15:15\",\"16:16\",\"17:17\",\"18:18\",\"19:19\",\"20:20\",\"21:21\",\"22:22\",\"23:23\",\"00:00\"]",
        "output": "37"
      },
      {
        "input": "timePoints = [\"23:58\",\"23:59\",\"00:00\",\"00:01\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"11:11\",\"11:12\",\"11:13\",\"11:14\",\"11:15\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:00\",\"00:01\",\"00:02\",\"00:03\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"12:34\",\"23:45\",\"01:02\",\"12:34\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"00:00\",\"23:59\",\"00:00\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"12:00\",\"00:00\",\"12:00\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"12:34\",\"23:45\",\"00:12\",\"01:23\"]",
        "output": "27"
      },
      {
        "input": "timePoints = [\"14:50\",\"14:51\",\"00:00\",\"23:59\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:01\",\"00:02\",\"00:03\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:01\",\"00:02\",\"00:03\",\"00:04\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"01:01\",\"02:02\",\"03:03\",\"23:59\",\"00:00\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"01:01\",\"01:01\",\"01:01\",\"01:01\",\"01:02\",\"01:02\",\"01:03\",\"01:04\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"00:00\",\"00:01\",\"00:02\",\"00:03\",\"00:04\",\"00:05\",\"00:06\",\"00:07\",\"00:08\",\"00:09\",\"00:10\",\"00:11\",\"00:12\",\"00:13\",\"00:14\",\"00:15\",\"00:16\",\"00:17\",\"00:18\",\"00:19\",\"00:20\",\"00:21\",\"00:22\",\"00:23\",\"00:24\",\"00:25\",\"00:26\",\"00:27\",\"00:28\",\"00:29\",\"00:30\",\"00:31\",\"00:32\",\"00:33\",\"00:34\",\"00:35\",\"00:36\",\"00:37\",\"00:38\",\"00:39\",\"00:40\",\"00:41\",\"00:42\",\"00:43\",\"00:44\",\"00:45\",\"00:46\",\"00:47\",\"00:48\",\"00:49\",\"00:50\",\"00:51\",\"00:52\",\"00:53\",\"00:54\",\"00:55\",\"00:56\",\"00:57\",\"00:58\",\"00:59\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:01\",\"23:59\",\"12:34\",\"12:35\",\"00:00\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"11:11\",\"11:12\",\"11:13\",\"11:14\",\"11:15\",\"11:16\",\"11:17\",\"11:18\",\"11:19\",\"11:20\",\"11:21\",\"11:22\",\"11:23\",\"11:24\",\"11:25\",\"11:26\",\"11:27\",\"11:28\",\"11:29\",\"11:30\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:00\",\"06:30\",\"12:00\",\"18:00\",\"23:59\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:00\",\"01:15\",\"02:30\",\"03:45\",\"05:00\",\"06:15\",\"07:30\",\"08:45\",\"10:00\",\"11:15\",\"12:30\",\"13:45\",\"15:00\",\"16:15\",\"17:30\",\"18:45\",\"19:00\",\"20:15\",\"21:30\",\"22:45\",\"23:59\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"01:23\",\"02:45\",\"03:56\",\"05:17\",\"06:38\",\"07:59\",\"09:20\",\"10:41\",\"12:02\",\"13:23\",\"14:45\",\"16:06\",\"17:27\",\"18:48\",\"20:09\",\"21:30\",\"22:51\",\"24:12\"]",
        "output": "71"
      },
      {
        "input": "timePoints = [\"15:30\",\"15:30\",\"15:30\",\"15:30\",\"15:30\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"12:34\",\"12:35\",\"12:36\",\"12:37\",\"12:38\",\"12:39\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"14:30\",\"22:45\",\"09:15\",\"00:01\",\"08:59\",\"12:00\"]",
        "output": "16"
      },
      {
        "input": "timePoints = [\"00:01\",\"00:02\",\"00:03\",\"00:04\",\"00:05\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"23:55\",\"23:56\",\"23:57\",\"23:58\",\"23:59\",\"00:00\",\"00:01\",\"00:02\",\"00:03\",\"00:04\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"12:34\",\"12:35\",\"12:36\",\"12:37\",\"12:38\",\"12:39\",\"12:40\",\"12:41\",\"12:42\",\"12:43\",\"12:44\",\"12:45\",\"12:46\",\"12:47\",\"12:48\",\"12:49\",\"12:50\",\"12:51\",\"12:52\",\"12:53\",\"12:54\",\"12:55\",\"12:56\",\"12:57\",\"12:58\",\"12:59\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:01\",\"00:02\",\"00:03\",\"23:58\",\"23:59\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"08:00\",\"08:10\",\"08:20\",\"08:30\",\"08:40\",\"08:50\",\"09:00\"]",
        "output": "10"
      },
      {
        "input": "timePoints = [\"11:11\",\"11:12\",\"11:13\",\"11:14\",\"11:15\",\"11:16\",\"11:17\",\"11:18\",\"11:19\",\"11:20\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"01:01\",\"02:02\",\"03:03\",\"04:04\",\"05:05\",\"23:23\"]",
        "output": "61"
      },
      {
        "input": "timePoints = [\"23:58\",\"00:02\",\"12:34\",\"12:35\",\"12:36\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:00\",\"12:00\",\"23:59\",\"11:59\",\"12:01\",\"00:01\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"11:59\",\"23:58\",\"23:57\",\"00:01\",\"00:02\",\"00:03\",\"00:04\",\"00:05\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"11:59\",\"23:58\",\"23:59\",\"00:00\",\"00:01\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:00\",\"04:30\",\"09:00\",\"13:30\",\"18:00\",\"22:30\"]",
        "output": "90"
      },
      {
        "input": "timePoints = [\"13:30\",\"14:30\",\"15:30\",\"16:30\",\"17:30\",\"18:30\",\"19:30\",\"20:30\",\"21:30\",\"22:30\",\"23:30\",\"00:30\"]",
        "output": "60"
      },
      {
        "input": "timePoints = [\"01:10\",\"01:10\",\"02:20\",\"03:30\",\"04:40\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"00:00\",\"00:01\",\"00:02\",\"00:03\",\"23:59\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"12:00\",\"12:01\",\"12:02\",\"12:03\",\"12:04\",\"12:05\",\"12:06\",\"12:07\",\"12:08\",\"12:09\",\"12:10\",\"12:11\",\"12:12\",\"12:13\",\"12:14\",\"12:15\",\"12:16\",\"12:17\",\"12:18\",\"12:19\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"07:07\",\"07:07\",\"07:07\",\"07:08\",\"07:09\",\"07:10\",\"07:11\",\"07:12\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"09:45\",\"09:46\",\"09:47\",\"09:48\",\"09:49\",\"09:50\",\"09:51\",\"09:52\",\"09:53\",\"09:54\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"05:30\",\"05:31\",\"05:32\",\"05:33\",\"05:34\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"06:06\",\"06:07\",\"06:08\",\"06:09\",\"06:10\",\"06:11\",\"06:12\",\"06:13\",\"06:14\",\"06:15\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"11:11\",\"22:22\",\"11:11\",\"22:22\",\"11:11\",\"22:22\",\"11:11\",\"22:22\",\"11:11\",\"22:22\",\"11:11\",\"22:22\",\"11:11\",\"22:22\",\"11:11\",\"22:22\",\"11:11\",\"22:22\",\"11:11\",\"22:22\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"00:00\",\"00:01\",\"23:58\",\"23:59\",\"12:00\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"23:59\",\"00:01\",\"00:02\",\"00:03\",\"00:04\",\"00:05\",\"00:06\",\"00:07\",\"00:08\",\"00:09\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"01:23\",\"02:45\",\"03:30\",\"04:15\",\"05:00\",\"23:50\"]",
        "output": "45"
      },
      {
        "input": "timePoints = [\"11:59\",\"12:00\",\"12:01\",\"12:02\",\"12:03\",\"12:04\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"10:10\",\"10:10\",\"10:11\",\"10:11\",\"10:12\",\"10:12\",\"10:13\",\"10:13\",\"10:14\",\"10:14\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"00:00\",\"00:01\",\"00:02\",\"00:03\",\"00:04\",\"00:05\",\"00:06\",\"00:07\",\"00:08\",\"00:09\",\"00:10\",\"00:11\",\"00:12\",\"00:13\",\"00:14\",\"00:15\",\"00:16\",\"00:17\",\"00:18\",\"00:19\",\"00:20\",\"00:21\",\"00:22\",\"00:23\",\"00:24\",\"00:25\",\"00:26\",\"00:27\",\"00:28\",\"00:29\",\"00:30\",\"00:31\",\"00:32\",\"00:33\",\"00:34\",\"00:35\",\"00:36\",\"00:37\",\"00:38\",\"00:39\",\"00:40\",\"00:41\",\"00:42\",\"00:43\",\"00:44\",\"00:45\",\"00:46\",\"00:47\",\"00:48\",\"00:49\",\"00:50\",\"00:51\",\"00:52\",\"00:53\",\"00:54\",\"00:55\",\"00:56\",\"00:57\",\"00:58\",\"00:59\",\"23:00\",\"23:01\",\"23:02\",\"23:03\",\"23:04\",\"23:05\",\"23:06\",\"23:07\",\"23:08\",\"23:09\",\"23:10\",\"23:11\",\"23:12\",\"23:13\",\"23:14\",\"23:15\",\"23:16\",\"23:17\",\"23:18\",\"23:19\",\"23:20\",\"23:21\",\"23:22\",\"23:23\",\"23:24\",\"23:25\",\"23:26\",\"23:27\",\"23:28\",\"23:29\",\"23:30\",\"23:31\",\"23:32\",\"23:33\",\"23:34\",\"23:35\",\"23:36\",\"23:37\",\"23:38\",\"23:39\",\"23:40\",\"23:41\",\"23:42\",\"23:43\",\"23:44\",\"23:45\",\"23:46\",\"23:47\",\"23:48\",\"23:49\",\"23:50\",\"23:51\",\"23:52\",\"23:53\",\"23:54\",\"23:55\",\"23:56\",\"23:57\",\"23:58\",\"23:59\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:00\",\"00:01\",\"23:59\",\"23:58\",\"00:02\",\"23:57\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"14:30\",\"14:31\",\"14:32\",\"14:33\",\"14:34\",\"14:35\",\"14:36\",\"14:37\",\"14:38\",\"14:39\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"14:00\",\"14:01\",\"14:02\",\"14:03\",\"14:04\",\"14:05\",\"14:06\",\"14:07\",\"14:08\",\"14:09\",\"14:10\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"01:01\",\"01:02\",\"01:03\",\"01:04\",\"01:05\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:00\",\"23:59\",\"12:34\",\"12:35\",\"12:36\",\"12:37\",\"12:38\",\"12:39\",\"12:40\",\"12:41\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"23:59\",\"23:58\",\"23:57\",\"23:56\",\"23:55\",\"23:54\",\"23:53\",\"23:52\",\"23:51\",\"23:50\",\"23:49\",\"23:48\",\"23:47\",\"23:46\",\"23:45\",\"23:44\",\"23:43\",\"23:42\",\"23:41\",\"23:40\",\"23:39\",\"23:38\",\"23:37\",\"23:36\",\"23:35\",\"23:34\",\"23:33\",\"23:32\",\"23:31\",\"23:30\",\"23:29\",\"23:28\",\"23:27\",\"23:26\",\"23:25\",\"23:24\",\"23:23\",\"23:22\",\"23:21\",\"23:20\",\"23:19\",\"23:18\",\"23:17\",\"23:16\",\"23:15\",\"23:14\",\"23:13\",\"23:12\",\"23:11\",\"23:10\",\"23:09\",\"23:08\",\"23:07\",\"23:06\",\"23:05\",\"23:04\",\"23:03\",\"23:02\",\"23:01\",\"00:00\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"05:45\",\"05:46\",\"10:10\",\"10:09\",\"23:59\",\"00:00\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"23:58\",\"23:59\",\"00:00\",\"00:01\",\"00:02\",\"00:03\",\"00:04\",\"00:05\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:00\",\"00:10\",\"00:20\",\"00:30\",\"00:40\",\"00:50\"]",
        "output": "10"
      },
      {
        "input": "timePoints = [\"23:58\",\"23:59\",\"00:00\",\"00:01\",\"00:02\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:00\",\"00:10\",\"00:20\",\"00:30\",\"00:40\",\"00:50\",\"01:00\",\"01:10\",\"01:20\",\"01:30\",\"01:40\",\"01:50\",\"02:00\",\"02:10\",\"02:20\",\"02:30\",\"02:40\",\"02:50\",\"03:00\"]",
        "output": "10"
      },
      {
        "input": "timePoints = [\"09:09\",\"18:18\",\"09:09\",\"18:18\",\"09:09\",\"18:18\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"00:00\",\"04:00\",\"08:00\",\"12:00\",\"16:00\",\"20:00\",\"23:59\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:00\",\"01:00\",\"02:00\",\"03:00\",\"04:00\",\"05:00\",\"06:00\",\"07:00\",\"08:00\",\"09:00\",\"10:00\",\"11:00\",\"12:00\",\"13:00\",\"14:00\",\"15:00\",\"16:00\",\"17:00\",\"18:00\",\"19:00\",\"20:00\",\"21:00\",\"22:00\",\"23:00\"]",
        "output": "60"
      },
      {
        "input": "timePoints = [\"00:01\",\"23:59\",\"12:34\",\"01:02\",\"12:34\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"00:01\",\"00:02\",\"00:03\",\"23:59\",\"00:04\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"12:30\",\"13:30\",\"14:30\",\"15:30\",\"16:30\"]",
        "output": "60"
      },
      {
        "input": "timePoints = [\"00:15\",\"01:15\",\"02:15\",\"03:15\",\"04:15\",\"05:15\",\"06:15\",\"07:15\",\"08:15\",\"09:15\",\"10:15\",\"11:15\",\"12:15\",\"13:15\",\"14:15\",\"15:15\",\"16:15\",\"17:15\",\"18:15\",\"19:15\",\"20:15\",\"21:15\",\"22:15\",\"23:15\"]",
        "output": "60"
      },
      {
        "input": "timePoints = [\"09:09\",\"10:10\",\"11:11\",\"12:12\",\"13:13\",\"14:14\",\"15:15\",\"16:16\",\"17:17\",\"18:18\",\"19:19\",\"20:20\",\"21:21\",\"22:22\",\"23:23\",\"00:00\"]",
        "output": "37"
      },
      {
        "input": "timePoints = [\"12:00\",\"12:01\",\"12:02\",\"12:03\",\"12:04\",\"12:05\",\"12:06\",\"12:07\",\"12:08\",\"12:09\",\"12:10\",\"12:11\",\"12:12\",\"12:13\",\"12:14\",\"12:15\",\"12:16\",\"12:17\",\"12:18\",\"12:19\",\"12:20\",\"12:21\",\"12:22\",\"12:23\",\"12:24\",\"12:25\",\"12:26\",\"12:27\",\"12:28\",\"12:29\",\"12:30\",\"12:31\",\"12:32\",\"12:33\",\"12:34\",\"12:35\",\"12:36\",\"12:37\",\"12:38\",\"12:39\",\"12:40\",\"12:41\",\"12:42\",\"12:43\",\"12:44\",\"12:45\",\"12:46\",\"12:47\",\"12:48\",\"12:49\",\"12:50\",\"12:51\",\"12:52\",\"12:53\",\"12:54\",\"12:55\",\"12:56\",\"12:57\",\"12:58\",\"12:59\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:00\",\"00:05\",\"00:10\",\"00:15\",\"00:20\",\"00:25\",\"00:30\",\"00:35\",\"00:40\",\"00:45\",\"00:50\",\"00:55\",\"01:00\"]",
        "output": "5"
      },
      {
        "input": "timePoints = [\"01:00\",\"02:00\",\"03:00\",\"04:00\",\"05:00\",\"06:00\",\"07:00\",\"08:00\",\"09:00\",\"10:00\",\"11:00\",\"12:00\",\"13:00\",\"14:00\",\"15:00\",\"16:00\",\"17:00\",\"18:00\",\"19:00\",\"20:00\",\"21:00\",\"22:00\",\"23:00\"]",
        "output": "60"
      },
      {
        "input": "timePoints = [\"12:00\",\"12:10\",\"12:20\",\"12:30\",\"12:40\",\"12:50\"]",
        "output": "10"
      },
      {
        "input": "timePoints = [\"23:00\",\"00:01\",\"00:02\",\"00:03\",\"22:58\",\"22:59\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"01:30\",\"02:30\",\"03:30\",\"04:30\",\"05:30\",\"06:30\",\"07:30\",\"08:30\",\"09:30\",\"10:30\",\"11:30\",\"12:30\",\"13:30\",\"14:30\",\"15:30\",\"16:30\",\"17:30\",\"18:30\",\"19:30\",\"20:30\",\"21:30\",\"22:30\",\"23:30\"]",
        "output": "60"
      },
      {
        "input": "timePoints = [\"15:22\",\"15:22\",\"15:23\",\"15:23\",\"15:24\",\"15:24\",\"15:25\",\"15:25\",\"15:26\",\"15:26\",\"15:27\",\"15:27\",\"15:28\",\"15:28\",\"15:29\",\"15:29\",\"15:30\",\"15:30\",\"15:31\",\"15:31\"]",
        "output": "0"
      },
      {
        "input": "timePoints = [\"13:40\",\"13:41\",\"13:42\",\"13:43\",\"13:44\",\"13:45\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"11:59\",\"12:00\",\"12:01\",\"12:02\",\"12:03\",\"12:04\",\"12:05\",\"12:06\",\"12:07\",\"12:08\",\"12:09\",\"12:10\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"00:01\",\"00:02\",\"00:03\",\"00:04\",\"00:05\",\"00:06\",\"00:07\",\"00:08\",\"00:09\",\"00:10\"]",
        "output": "1"
      },
      {
        "input": "timePoints = [\"13:45\",\"02:50\",\"06:12\",\"19:34\",\"08:43\",\"21:01\",\"15:23\",\"03:30\",\"17:56\",\"10:14\",\"04:26\",\"18:38\",\"09:51\",\"20:49\",\"14:07\",\"07:19\",\"16:32\",\"11:25\",\"05:37\",\"12:48\",\"01:06\",\"00:52\",\"13:45\"]",
        "output": "0"
      }
    ]
  },
  {
    "id": 751,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "String"
    ],
    "problemDescription": "An IP address is a formatted 32-bit unsigned integer where each group of 8 bits is printed as a decimal number and the dot character '.' splits the groups.\n\nFor example, the binary number 00001111 10001000 11111111 01101011 (spaces added for clarity) formatted as an IP address would be \"15.136.255.107\".\n\nA CIDR block is a format used to denote a specific set of IP addresses. It is a string consisting of a base IP address, followed by a slash, followed by a prefix length k. The addresses it covers are all the IPs whose first k bits are the same as the base IP address.\n\nFor example, \"123.45.67.89/20\" is a CIDR block with a prefix length of 20. Any IP address whose binary representation matches 01111011 00101101 0100xxxx xxxxxxxx, where x can be either 0 or 1, is in the set covered by the CIDR block.\n\nYou are given a start IP address ip and the number of IP addresses we need to cover n. Your goal is to use as few CIDR blocks as possible to cover all the IP addresses in the inclusive range [ip, ip + n - 1] exactly. No other IP addresses outside of the range should be covered.\nReturn the shortest list of CIDR blocks that covers the range of IP addresses. If there are multiple answers, return any of them.\n\u00a0\nExample 1:\n\nInput: ip = \"255.0.0.7\", n = 10\nOutput: [\"255.0.0.7/32\",\"255.0.0.8/29\",\"255.0.0.16/32\"]\nExplanation:\nThe IP addresses that need to be covered are:\n- 255.0.0.7  -> 11111111 00000000 00000000 00000111\n- 255.0.0.8  -> 11111111 00000000 00000000 00001000\n- 255.0.0.9  -> 11111111 00000000 00000000 00001001\n- 255.0.0.10 -> 11111111 00000000 00000000 00001010\n- 255.0.0.11 -> 11111111 00000000 00000000 00001011\n- 255.0.0.12 -> 11111111 00000000 00000000 00001100\n- 255.0.0.13 -> 11111111 00000000 00000000 00001101\n- 255.0.0.14 -> 11111111 00000000 00000000 00001110\n- 255.0.0.15 -> 11111111 00000000 00000000 00001111\n- 255.0.0.16 -> 11111111 00000000 00000000 00010000\nThe CIDR block \"255.0.0.7/32\" covers the first address.\nThe CIDR block \"255.0.0.8/29\" covers the middle 8 addresses (binary format of 11111111 00000000 00000000 00001xxx).\nThe CIDR block \"255.0.0.16/32\" covers the last address.\nNote that while the CIDR block \"255.0.0.0/28\" does cover all the addresses, it also includes addresses outside of the range, so we cannot use it.\n\nExample 2:\n\nInput: ip = \"117.145.102.62\", n = 8\nOutput: [\"117.145.102.62/31\",\"117.145.102.64/30\",\"117.145.102.68/31\"]\n\n\u00a0\nConstraints:\n\n7 <= ip.length <= 15\nip is a valid IPv4 on the form \"a.b.c.d\" where a, b, c, and d are integers in the range [0, 255].\n1 <= n <= 1000\nEvery implied address ip + x (for x < n) will be a valid IPv4 address.\n\n",
    "starterCode": "class Solution:\n    def ipToCIDR(self, ip: str, n: int) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "ip = \"1.2.3.4\", n = 4",
        "output": "['1.2.3.4/30']"
      },
      {
        "input": "ip = \"255.255.255.252\", n = 4",
        "output": "['255.255.255.252/30']"
      },
      {
        "input": "ip = \"192.168.1.0\", n = 16",
        "output": "['192.168.1.0/28']"
      },
      {
        "input": "ip = \"192.168.1.100\", n = 1000",
        "output": "['192.168.1.100/30', '192.168.1.104/29', '192.168.1.112/28', '192.168.1.128/25', '192.168.2.0/23', '192.168.4.0/24', '192.168.5.0/26', '192.168.5.64/29', '192.168.5.72/30']"
      },
      {
        "input": "ip = \"172.16.0.0\", n = 2048",
        "output": "['172.16.0.0/21']"
      },
      {
        "input": "ip = \"192.168.1.1\", n = 1",
        "output": "['192.168.1.1/32']"
      },
      {
        "input": "ip = \"192.168.1.1\", n = 256",
        "output": "['192.168.1.1/32', '192.168.1.2/31', '192.168.1.4/30', '192.168.1.8/29', '192.168.1.16/28', '192.168.1.32/27', '192.168.1.64/26', '192.168.1.128/25', '192.168.2.0/32']"
      },
      {
        "input": "ip = \"0.0.0.0\", n = 1",
        "output": "['0.0.0.0/32']"
      },
      {
        "input": "ip = \"8.8.8.8\", n = 32",
        "output": "['8.8.8.8/29', '8.8.8.16/28', '8.8.8.32/29']"
      },
      {
        "input": "ip = \"1.2.3.4\", n = 512",
        "output": "['1.2.3.4/30', '1.2.3.8/29', '1.2.3.16/28', '1.2.3.32/27', '1.2.3.64/26', '1.2.3.128/25', '1.2.4.0/24', '1.2.5.0/30']"
      },
      {
        "input": "ip = \"255.255.255.255\", n = 1",
        "output": "['255.255.255.255/32']"
      },
      {
        "input": "ip = \"128.0.0.0\", n = 1024",
        "output": "['128.0.0.0/22']"
      },
      {
        "input": "ip = \"117.145.102.62\", n = 8",
        "output": "['117.145.102.62/31', '117.145.102.64/30', '117.145.102.68/31']"
      },
      {
        "input": "ip = \"10.0.0.0\", n = 17",
        "output": "['10.0.0.0/28', '10.0.0.16/32']"
      },
      {
        "input": "ip = \"10.0.0.1\", n = 256",
        "output": "['10.0.0.1/32', '10.0.0.2/31', '10.0.0.4/30', '10.0.0.8/29', '10.0.0.16/28', '10.0.0.32/27', '10.0.0.64/26', '10.0.0.128/25', '10.0.1.0/32']"
      },
      {
        "input": "ip = \"0.0.0.0\", n = 16",
        "output": "['0.0.0.0/28']"
      },
      {
        "input": "ip = \"255.0.0.7\", n = 10",
        "output": "['255.0.0.7/32', '255.0.0.8/29', '255.0.0.16/32']"
      },
      {
        "input": "ip = \"0.0.0.0\", n = 1023",
        "output": "['0.0.0.0/23', '0.0.2.0/24', '0.0.3.0/25', '0.0.3.128/26', '0.0.3.192/27', '0.0.3.224/28', '0.0.3.240/29', '0.0.3.248/30', '0.0.3.252/31', '0.0.3.254/32']"
      },
      {
        "input": "ip = \"8.8.8.8\", n = 100",
        "output": "['8.8.8.8/29', '8.8.8.16/28', '8.8.8.32/27', '8.8.8.64/27', '8.8.8.96/29', '8.8.8.104/30']"
      },
      {
        "input": "ip = \"10.240.0.0\", n = 1024",
        "output": "['10.240.0.0/22']"
      },
      {
        "input": "ip = \"8.8.8.8\", n = 255",
        "output": "['8.8.8.8/29', '8.8.8.16/28', '8.8.8.32/27', '8.8.8.64/26', '8.8.8.128/25', '8.8.9.0/30', '8.8.9.4/31', '8.8.9.6/32']"
      },
      {
        "input": "ip = \"1.2.3.4\", n = 300",
        "output": "['1.2.3.4/30', '1.2.3.8/29', '1.2.3.16/28', '1.2.3.32/27', '1.2.3.64/26', '1.2.3.128/25', '1.2.4.0/27', '1.2.4.32/28']"
      },
      {
        "input": "ip = \"192.168.128.0\", n = 500",
        "output": "['192.168.128.0/24', '192.168.129.0/25', '192.168.129.128/26', '192.168.129.192/27', '192.168.129.224/28', '192.168.129.240/30']"
      },
      {
        "input": "ip = \"192.168.1.0\", n = 500",
        "output": "['192.168.1.0/24', '192.168.2.0/25', '192.168.2.128/26', '192.168.2.192/27', '192.168.2.224/28', '192.168.2.240/30']"
      },
      {
        "input": "ip = \"172.16.58.3\", n = 32",
        "output": "['172.16.58.3/32', '172.16.58.4/30', '172.16.58.8/29', '172.16.58.16/28', '172.16.58.32/31', '172.16.58.34/32']"
      },
      {
        "input": "ip = \"169.254.0.1\", n = 255",
        "output": "['169.254.0.1/32', '169.254.0.2/31', '169.254.0.4/30', '169.254.0.8/29', '169.254.0.16/28', '169.254.0.32/27', '169.254.0.64/26', '169.254.0.128/25']"
      },
      {
        "input": "ip = \"198.51.100.128\", n = 2048",
        "output": "['198.51.100.128/25', '198.51.101.0/24', '198.51.102.0/23', '198.51.104.0/22', '198.51.108.0/25']"
      },
      {
        "input": "ip = \"1.2.3.4\", n = 999",
        "output": "['1.2.3.4/30', '1.2.3.8/29', '1.2.3.16/28', '1.2.3.32/27', '1.2.3.64/26', '1.2.3.128/25', '1.2.4.0/23', '1.2.6.0/25', '1.2.6.128/26', '1.2.6.192/27', '1.2.6.224/29', '1.2.6.232/31', '1.2.6.234/32']"
      },
      {
        "input": "ip = \"240.0.0.0\", n = 129",
        "output": "['240.0.0.0/25', '240.0.0.128/32']"
      },
      {
        "input": "ip = \"172.16.0.1\", n = 512",
        "output": "['172.16.0.1/32', '172.16.0.2/31', '172.16.0.4/30', '172.16.0.8/29', '172.16.0.16/28', '172.16.0.32/27', '172.16.0.64/26', '172.16.0.128/25', '172.16.1.0/24', '172.16.2.0/32']"
      },
      {
        "input": "ip = \"10.255.255.252\", n = 10",
        "output": "['10.255.255.252/30', '11.0.0.0/30', '11.0.0.4/31']"
      },
      {
        "input": "ip = \"8.8.8.8\", n = 2048",
        "output": "['8.8.8.8/29', '8.8.8.16/28', '8.8.8.32/27', '8.8.8.64/26', '8.8.8.128/25', '8.8.9.0/24', '8.8.10.0/23', '8.8.12.0/22', '8.8.16.0/29']"
      },
      {
        "input": "ip = \"198.18.0.0\", n = 1000",
        "output": "['198.18.0.0/23', '198.18.2.0/24', '198.18.3.0/25', '198.18.3.128/26', '198.18.3.192/27', '198.18.3.224/29']"
      },
      {
        "input": "ip = \"169.254.0.1\", n = 129",
        "output": "['169.254.0.1/32', '169.254.0.2/31', '169.254.0.4/30', '169.254.0.8/29', '169.254.0.16/28', '169.254.0.32/27', '169.254.0.64/26', '169.254.0.128/31']"
      },
      {
        "input": "ip = \"100.64.0.100\", n = 512",
        "output": "['100.64.0.100/30', '100.64.0.104/29', '100.64.0.112/28', '100.64.0.128/25', '100.64.1.0/24', '100.64.2.0/26', '100.64.2.64/27', '100.64.2.96/30']"
      },
      {
        "input": "ip = \"147.75.40.0\", n = 128",
        "output": "['147.75.40.0/25']"
      },
      {
        "input": "ip = \"192.168.255.250\", n = 30",
        "output": "['192.168.255.250/31', '192.168.255.252/30', '192.169.0.0/28', '192.169.0.16/29']"
      },
      {
        "input": "ip = \"192.168.1.100\", n = 128",
        "output": "['192.168.1.100/30', '192.168.1.104/29', '192.168.1.112/28', '192.168.1.128/26', '192.168.1.192/27', '192.168.1.224/30']"
      },
      {
        "input": "ip = \"172.31.255.248\", n = 8",
        "output": "['172.31.255.248/29']"
      },
      {
        "input": "ip = \"172.16.0.128\", n = 100",
        "output": "['172.16.0.128/26', '172.16.0.192/27', '172.16.0.224/30']"
      },
      {
        "input": "ip = \"203.0.113.0\", n = 150",
        "output": "['203.0.113.0/25', '203.0.113.128/28', '203.0.113.144/30', '203.0.113.148/31']"
      },
      {
        "input": "ip = \"224.0.0.0\", n = 129",
        "output": "['224.0.0.0/25', '224.0.0.128/32']"
      },
      {
        "input": "ip = \"172.16.17.32\", n = 4096",
        "output": "['172.16.17.32/27', '172.16.17.64/26', '172.16.17.128/25', '172.16.18.0/23', '172.16.20.0/22', '172.16.24.0/21', '172.16.32.0/24', '172.16.33.0/27']"
      },
      {
        "input": "ip = \"192.168.100.100\", n = 768",
        "output": "['192.168.100.100/30', '192.168.100.104/29', '192.168.100.112/28', '192.168.100.128/25', '192.168.101.0/24', '192.168.102.0/24', '192.168.103.0/26', '192.168.103.64/27', '192.168.103.96/30']"
      },
      {
        "input": "ip = \"192.168.0.0\", n = 65536",
        "output": "['192.168.0.0/16']"
      },
      {
        "input": "ip = \"198.51.100.100\", n = 65",
        "output": "['198.51.100.100/30', '198.51.100.104/29', '198.51.100.112/28', '198.51.100.128/27', '198.51.100.160/30', '198.51.100.164/32']"
      },
      {
        "input": "ip = \"1.1.1.1\", n = 500",
        "output": "['1.1.1.1/32', '1.1.1.2/31', '1.1.1.4/30', '1.1.1.8/29', '1.1.1.16/28', '1.1.1.32/27', '1.1.1.64/26', '1.1.1.128/25', '1.1.2.0/25', '1.1.2.128/26', '1.1.2.192/27', '1.1.2.224/28', '1.1.2.240/30', '1.1.2.244/32']"
      },
      {
        "input": "ip = \"10.10.10.10\", n = 768",
        "output": "['10.10.10.10/31', '10.10.10.12/30', '10.10.10.16/28', '10.10.10.32/27', '10.10.10.64/26', '10.10.10.128/25', '10.10.11.0/24', '10.10.12.0/24', '10.10.13.0/29', '10.10.13.8/31']"
      },
      {
        "input": "ip = \"169.254.1.1\", n = 1000",
        "output": "['169.254.1.1/32', '169.254.1.2/31', '169.254.1.4/30', '169.254.1.8/29', '169.254.1.16/28', '169.254.1.32/27', '169.254.1.64/26', '169.254.1.128/25', '169.254.2.0/23', '169.254.4.0/25', '169.254.4.128/26', '169.254.4.192/27', '169.254.4.224/29', '169.254.4.232/32']"
      },
      {
        "input": "ip = \"198.51.100.0\", n = 16384",
        "output": "['198.51.100.0/22', '198.51.104.0/21', '198.51.112.0/20', '198.51.128.0/19', '198.51.160.0/22']"
      },
      {
        "input": "ip = \"198.51.100.0\", n = 1536",
        "output": "['198.51.100.0/22', '198.51.104.0/23']"
      },
      {
        "input": "ip = \"192.168.1.1\", n = 513",
        "output": "['192.168.1.1/32', '192.168.1.2/31', '192.168.1.4/30', '192.168.1.8/29', '192.168.1.16/28', '192.168.1.32/27', '192.168.1.64/26', '192.168.1.128/25', '192.168.2.0/24', '192.168.3.0/31']"
      },
      {
        "input": "ip = \"0.0.0.0\", n = 1000",
        "output": "['0.0.0.0/23', '0.0.2.0/24', '0.0.3.0/25', '0.0.3.128/26', '0.0.3.192/27', '0.0.3.224/29']"
      },
      {
        "input": "ip = \"192.168.1.150\", n = 250",
        "output": "['192.168.1.150/31', '192.168.1.152/29', '192.168.1.160/27', '192.168.1.192/26', '192.168.2.0/25', '192.168.2.128/28']"
      },
      {
        "input": "ip = \"142.250.179.110\", n = 15",
        "output": "['142.250.179.110/31', '142.250.179.112/29', '142.250.179.120/30', '142.250.179.124/32']"
      },
      {
        "input": "ip = \"192.0.0.1\", n = 255",
        "output": "['192.0.0.1/32', '192.0.0.2/31', '192.0.0.4/30', '192.0.0.8/29', '192.0.0.16/28', '192.0.0.32/27', '192.0.0.64/26', '192.0.0.128/25']"
      },
      {
        "input": "ip = \"172.31.255.254\", n = 128",
        "output": "['172.31.255.254/31', '172.32.0.0/26', '172.32.0.64/27', '172.32.0.96/28', '172.32.0.112/29', '172.32.0.120/30', '172.32.0.124/31']"
      },
      {
        "input": "ip = \"100.64.0.0\", n = 64",
        "output": "['100.64.0.0/26']"
      },
      {
        "input": "ip = \"1.2.3.4\", n = 128",
        "output": "['1.2.3.4/30', '1.2.3.8/29', '1.2.3.16/28', '1.2.3.32/27', '1.2.3.64/26', '1.2.3.128/30']"
      },
      {
        "input": "ip = \"172.16.0.0\", n = 500",
        "output": "['172.16.0.0/24', '172.16.1.0/25', '172.16.1.128/26', '172.16.1.192/27', '172.16.1.224/28', '172.16.1.240/30']"
      },
      {
        "input": "ip = \"100.64.0.0\", n = 32",
        "output": "['100.64.0.0/27']"
      },
      {
        "input": "ip = \"198.18.0.0\", n = 1023",
        "output": "['198.18.0.0/23', '198.18.2.0/24', '198.18.3.0/25', '198.18.3.128/26', '198.18.3.192/27', '198.18.3.224/28', '198.18.3.240/29', '198.18.3.248/30', '198.18.3.252/31', '198.18.3.254/32']"
      },
      {
        "input": "ip = \"8.8.8.8\", n = 128",
        "output": "['8.8.8.8/29', '8.8.8.16/28', '8.8.8.32/27', '8.8.8.64/26', '8.8.8.128/29']"
      },
      {
        "input": "ip = \"0.0.0.0\", n = 65536",
        "output": "['0.0.0.0/16']"
      },
      {
        "input": "ip = \"172.16.0.10\", n = 257",
        "output": "['172.16.0.10/31', '172.16.0.12/30', '172.16.0.16/28', '172.16.0.32/27', '172.16.0.64/26', '172.16.0.128/25', '172.16.1.0/29', '172.16.1.8/31', '172.16.1.10/32']"
      },
      {
        "input": "ip = \"172.16.0.1\", n = 2048",
        "output": "['172.16.0.1/32', '172.16.0.2/31', '172.16.0.4/30', '172.16.0.8/29', '172.16.0.16/28', '172.16.0.32/27', '172.16.0.64/26', '172.16.0.128/25', '172.16.1.0/24', '172.16.2.0/23', '172.16.4.0/22', '172.16.8.0/32']"
      },
      {
        "input": "ip = \"0.0.0.0\", n = 1024",
        "output": "['0.0.0.0/22']"
      },
      {
        "input": "ip = \"172.16.0.1\", n = 1025",
        "output": "['172.16.0.1/32', '172.16.0.2/31', '172.16.0.4/30', '172.16.0.8/29', '172.16.0.16/28', '172.16.0.32/27', '172.16.0.64/26', '172.16.0.128/25', '172.16.1.0/24', '172.16.2.0/23', '172.16.4.0/31']"
      },
      {
        "input": "ip = \"192.168.1.255\", n = 3",
        "output": "['192.168.1.255/32', '192.168.2.0/31']"
      },
      {
        "input": "ip = \"198.51.100.0\", n = 768",
        "output": "['198.51.100.0/23', '198.51.102.0/24']"
      },
      {
        "input": "ip = \"172.16.31.255\", n = 2048",
        "output": "['172.16.31.255/32', '172.16.32.0/22', '172.16.36.0/23', '172.16.38.0/24', '172.16.39.0/25', '172.16.39.128/26', '172.16.39.192/27', '172.16.39.224/28', '172.16.39.240/29', '172.16.39.248/30', '172.16.39.252/31', '172.16.39.254/32']"
      },
      {
        "input": "ip = \"1.1.1.1\", n = 512",
        "output": "['1.1.1.1/32', '1.1.1.2/31', '1.1.1.4/30', '1.1.1.8/29', '1.1.1.16/28', '1.1.1.32/27', '1.1.1.64/26', '1.1.1.128/25', '1.1.2.0/24', '1.1.3.0/32']"
      },
      {
        "input": "ip = \"172.31.255.248\", n = 15",
        "output": "['172.31.255.248/29', '172.32.0.0/30', '172.32.0.4/31', '172.32.0.6/32']"
      },
      {
        "input": "ip = \"0.0.0.0\", n = 128",
        "output": "['0.0.0.0/25']"
      },
      {
        "input": "ip = \"172.16.0.0\", n = 16383",
        "output": "['172.16.0.0/19', '172.16.32.0/20', '172.16.48.0/21', '172.16.56.0/22', '172.16.60.0/23', '172.16.62.0/24', '172.16.63.0/25', '172.16.63.128/26', '172.16.63.192/27', '172.16.63.224/28', '172.16.63.240/29', '172.16.63.248/30', '172.16.63.252/31', '172.16.63.254/32']"
      },
      {
        "input": "ip = \"100.64.1.255\", n = 512",
        "output": "['100.64.1.255/32', '100.64.2.0/24', '100.64.3.0/25', '100.64.3.128/26', '100.64.3.192/27', '100.64.3.224/28', '100.64.3.240/29', '100.64.3.248/30', '100.64.3.252/31', '100.64.3.254/32']"
      },
      {
        "input": "ip = \"10.0.0.1\", n = 130",
        "output": "['10.0.0.1/32', '10.0.0.2/31', '10.0.0.4/30', '10.0.0.8/29', '10.0.0.16/28', '10.0.0.32/27', '10.0.0.64/26', '10.0.0.128/31', '10.0.0.130/32']"
      },
      {
        "input": "ip = \"200.100.50.10\", n = 200",
        "output": "['200.100.50.10/31', '200.100.50.12/30', '200.100.50.16/28', '200.100.50.32/27', '200.100.50.64/26', '200.100.50.128/26', '200.100.50.192/28', '200.100.50.208/31']"
      },
      {
        "input": "ip = \"192.168.1.100\", n = 255",
        "output": "['192.168.1.100/30', '192.168.1.104/29', '192.168.1.112/28', '192.168.1.128/25', '192.168.2.0/26', '192.168.2.64/27', '192.168.2.96/31', '192.168.2.98/32']"
      },
      {
        "input": "ip = \"192.0.2.128\", n = 512",
        "output": "['192.0.2.128/25', '192.0.3.0/24', '192.0.4.0/25']"
      },
      {
        "input": "ip = \"224.0.0.1\", n = 128",
        "output": "['224.0.0.1/32', '224.0.0.2/31', '224.0.0.4/30', '224.0.0.8/29', '224.0.0.16/28', '224.0.0.32/27', '224.0.0.64/26', '224.0.0.128/32']"
      },
      {
        "input": "ip = \"203.0.113.0\", n = 128",
        "output": "['203.0.113.0/25']"
      },
      {
        "input": "ip = \"1.1.1.1\", n = 32",
        "output": "['1.1.1.1/32', '1.1.1.2/31', '1.1.1.4/30', '1.1.1.8/29', '1.1.1.16/28', '1.1.1.32/32']"
      },
      {
        "input": "ip = \"10.0.0.0\", n = 1048576",
        "output": "['10.0.0.0/12']"
      },
      {
        "input": "ip = \"192.0.2.128\", n = 255",
        "output": "['192.0.2.128/25', '192.0.3.0/26', '192.0.3.64/27', '192.0.3.96/28', '192.0.3.112/29', '192.0.3.120/30', '192.0.3.124/31', '192.0.3.126/32']"
      },
      {
        "input": "ip = \"100.64.0.1\", n = 300",
        "output": "['100.64.0.1/32', '100.64.0.2/31', '100.64.0.4/30', '100.64.0.8/29', '100.64.0.16/28', '100.64.0.32/27', '100.64.0.64/26', '100.64.0.128/25', '100.64.1.0/27', '100.64.1.32/29', '100.64.1.40/30', '100.64.1.44/32']"
      },
      {
        "input": "ip = \"255.0.0.0\", n = 256",
        "output": "['255.0.0.0/24']"
      },
      {
        "input": "ip = \"203.0.113.0\", n = 129",
        "output": "['203.0.113.0/25', '203.0.113.128/32']"
      },
      {
        "input": "ip = \"224.0.0.0\", n = 1025",
        "output": "['224.0.0.0/22', '224.0.4.0/32']"
      },
      {
        "input": "ip = \"127.0.0.1\", n = 1",
        "output": "['127.0.0.1/32']"
      },
      {
        "input": "ip = \"10.10.10.10\", n = 1023",
        "output": "['10.10.10.10/31', '10.10.10.12/30', '10.10.10.16/28', '10.10.10.32/27', '10.10.10.64/26', '10.10.10.128/25', '10.10.11.0/24', '10.10.12.0/23', '10.10.14.0/29', '10.10.14.8/32']"
      },
      {
        "input": "ip = \"255.255.255.253\", n = 3",
        "output": "['255.255.255.253/32', '255.255.255.254/31']"
      },
      {
        "input": "ip = \"169.254.0.0\", n = 257",
        "output": "['169.254.0.0/24', '169.254.1.0/32']"
      },
      {
        "input": "ip = \"224.0.0.0\", n = 1024",
        "output": "['224.0.0.0/22']"
      },
      {
        "input": "ip = \"8.8.8.8\", n = 1023",
        "output": "['8.8.8.8/29', '8.8.8.16/28', '8.8.8.32/27', '8.8.8.64/26', '8.8.8.128/25', '8.8.9.0/24', '8.8.10.0/23', '8.8.12.0/30', '8.8.12.4/31', '8.8.12.6/32']"
      },
      {
        "input": "ip = \"255.255.255.254\", n = 2",
        "output": "['255.255.255.254/31']"
      },
      {
        "input": "ip = \"192.168.127.127\", n = 511",
        "output": "['192.168.127.127/32', '192.168.127.128/25', '192.168.128.0/24', '192.168.129.0/26', '192.168.129.64/27', '192.168.129.96/28', '192.168.129.112/29', '192.168.129.120/30', '192.168.129.124/31']"
      },
      {
        "input": "ip = \"10.0.0.0\", n = 1025",
        "output": "['10.0.0.0/22', '10.0.4.0/32']"
      },
      {
        "input": "ip = \"192.168.255.240\", n = 16",
        "output": "['192.168.255.240/28']"
      },
      {
        "input": "ip = \"198.51.100.0\", n = 64",
        "output": "['198.51.100.0/26']"
      },
      {
        "input": "ip = \"192.168.1.1\", n = 512",
        "output": "['192.168.1.1/32', '192.168.1.2/31', '192.168.1.4/30', '192.168.1.8/29', '192.168.1.16/28', '192.168.1.32/27', '192.168.1.64/26', '192.168.1.128/25', '192.168.2.0/24', '192.168.3.0/32']"
      },
      {
        "input": "ip = \"203.0.113.0\", n = 2048",
        "output": "['203.0.113.0/24', '203.0.114.0/23', '203.0.116.0/22', '203.0.120.0/24']"
      },
      {
        "input": "ip = \"169.254.0.1\", n = 257",
        "output": "['169.254.0.1/32', '169.254.0.2/31', '169.254.0.4/30', '169.254.0.8/29', '169.254.0.16/28', '169.254.0.32/27', '169.254.0.64/26', '169.254.0.128/25', '169.254.1.0/31']"
      },
      {
        "input": "ip = \"0.0.0.1\", n = 1000",
        "output": "['0.0.0.1/32', '0.0.0.2/31', '0.0.0.4/30', '0.0.0.8/29', '0.0.0.16/28', '0.0.0.32/27', '0.0.0.64/26', '0.0.0.128/25', '0.0.1.0/24', '0.0.2.0/24', '0.0.3.0/25', '0.0.3.128/26', '0.0.3.192/27', '0.0.3.224/29', '0.0.3.232/32']"
      },
      {
        "input": "ip = \"192.168.1.250\", n = 10",
        "output": "['192.168.1.250/31', '192.168.1.252/30', '192.168.2.0/30']"
      },
      {
        "input": "ip = \"10.10.10.240\", n = 16",
        "output": "['10.10.10.240/28']"
      },
      {
        "input": "ip = \"203.0.113.0\", n = 1000",
        "output": "['203.0.113.0/24', '203.0.114.0/23', '203.0.116.0/25', '203.0.116.128/26', '203.0.116.192/27', '203.0.116.224/29']"
      },
      {
        "input": "ip = \"192.0.2.0\", n = 256",
        "output": "['192.0.2.0/24']"
      },
      {
        "input": "ip = \"169.254.128.128\", n = 256",
        "output": "['169.254.128.128/25', '169.254.129.0/25']"
      },
      {
        "input": "ip = \"8.8.8.8\", n = 7",
        "output": "['8.8.8.8/30', '8.8.8.12/31', '8.8.8.14/32']"
      },
      {
        "input": "ip = \"10.10.10.10\", n = 511",
        "output": "['10.10.10.10/31', '10.10.10.12/30', '10.10.10.16/28', '10.10.10.32/27', '10.10.10.64/26', '10.10.10.128/25', '10.10.11.0/24', '10.10.12.0/29', '10.10.12.8/32']"
      },
      {
        "input": "ip = \"198.51.100.0\", n = 255",
        "output": "['198.51.100.0/25', '198.51.100.128/26', '198.51.100.192/27', '198.51.100.224/28', '198.51.100.240/29', '198.51.100.248/30', '198.51.100.252/31', '198.51.100.254/32']"
      },
      {
        "input": "ip = \"8.8.8.8\", n = 768",
        "output": "['8.8.8.8/29', '8.8.8.16/28', '8.8.8.32/27', '8.8.8.64/26', '8.8.8.128/25', '8.8.9.0/24', '8.8.10.0/24', '8.8.11.0/29']"
      },
      {
        "input": "ip = \"192.0.0.1\", n = 15",
        "output": "['192.0.0.1/32', '192.0.0.2/31', '192.0.0.4/30', '192.0.0.8/29']"
      },
      {
        "input": "ip = \"172.16.0.100\", n = 129",
        "output": "['172.16.0.100/30', '172.16.0.104/29', '172.16.0.112/28', '172.16.0.128/26', '172.16.0.192/27', '172.16.0.224/30', '172.16.0.228/32']"
      },
      {
        "input": "ip = \"224.0.0.1\", n = 127",
        "output": "['224.0.0.1/32', '224.0.0.2/31', '224.0.0.4/30', '224.0.0.8/29', '224.0.0.16/28', '224.0.0.32/27', '224.0.0.64/26']"
      },
      {
        "input": "ip = \"192.168.0.0\", n = 1000",
        "output": "['192.168.0.0/23', '192.168.2.0/24', '192.168.3.0/25', '192.168.3.128/26', '192.168.3.192/27', '192.168.3.224/29']"
      },
      {
        "input": "ip = \"224.0.0.1\", n = 900",
        "output": "['224.0.0.1/32', '224.0.0.2/31', '224.0.0.4/30', '224.0.0.8/29', '224.0.0.16/28', '224.0.0.32/27', '224.0.0.64/26', '224.0.0.128/25', '224.0.1.0/24', '224.0.2.0/24', '224.0.3.0/25', '224.0.3.128/30', '224.0.3.132/32']"
      },
      {
        "input": "ip = \"198.51.100.0\", n = 200",
        "output": "['198.51.100.0/25', '198.51.100.128/26', '198.51.100.192/29']"
      },
      {
        "input": "ip = \"169.254.0.0\", n = 64",
        "output": "['169.254.0.0/26']"
      },
      {
        "input": "ip = \"169.254.0.0\", n = 511",
        "output": "['169.254.0.0/24', '169.254.1.0/25', '169.254.1.128/26', '169.254.1.192/27', '169.254.1.224/28', '169.254.1.240/29', '169.254.1.248/30', '169.254.1.252/31', '169.254.1.254/32']"
      },
      {
        "input": "ip = \"10.10.10.10\", n = 2048",
        "output": "['10.10.10.10/31', '10.10.10.12/30', '10.10.10.16/28', '10.10.10.32/27', '10.10.10.64/26', '10.10.10.128/25', '10.10.11.0/24', '10.10.12.0/22', '10.10.16.0/23', '10.10.18.0/29', '10.10.18.8/31']"
      },
      {
        "input": "ip = \"127.0.0.1\", n = 128",
        "output": "['127.0.0.1/32', '127.0.0.2/31', '127.0.0.4/30', '127.0.0.8/29', '127.0.0.16/28', '127.0.0.32/27', '127.0.0.64/26', '127.0.0.128/32']"
      },
      {
        "input": "ip = \"224.0.0.224\", n = 32",
        "output": "['224.0.0.224/27']"
      },
      {
        "input": "ip = \"224.0.0.0\", n = 64",
        "output": "['224.0.0.0/26']"
      },
      {
        "input": "ip = \"203.0.113.64\", n = 1024",
        "output": "['203.0.113.64/26', '203.0.113.128/25', '203.0.114.0/23', '203.0.116.0/24', '203.0.117.0/26']"
      },
      {
        "input": "ip = \"10.255.255.254\", n = 3",
        "output": "['10.255.255.254/31', '11.0.0.0/32']"
      },
      {
        "input": "ip = \"192.0.2.0\", n = 300",
        "output": "['192.0.2.0/24', '192.0.3.0/27', '192.0.3.32/29', '192.0.3.40/30']"
      },
      {
        "input": "ip = \"172.16.0.128\", n = 200",
        "output": "['172.16.0.128/25', '172.16.1.0/26', '172.16.1.64/29']"
      },
      {
        "input": "ip = \"192.168.1.100\", n = 512",
        "output": "['192.168.1.100/30', '192.168.1.104/29', '192.168.1.112/28', '192.168.1.128/25', '192.168.2.0/24', '192.168.3.0/26', '192.168.3.64/27', '192.168.3.96/30']"
      },
      {
        "input": "ip = \"172.16.31.254\", n = 2",
        "output": "['172.16.31.254/31']"
      },
      {
        "input": "ip = \"100.64.0.0\", n = 512",
        "output": "['100.64.0.0/23']"
      }
    ]
  },
  {
    "id": 532,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\nA k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:\n\n0 <= i, j < nums.length\ni != j\n|nums[i] - nums[j]| == k\n\nNotice that |val| denotes the absolute value of val.\n\u00a0\nExample 1:\n\nInput: nums = [3,1,4,1,5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of unique pairs.\n\nExample 2:\n\nInput: nums = [1,2,3,4,5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n\nExample 3:\n\nInput: nums = [1,3,1,5,4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 104\n-107 <= nums[i] <= 107\n0 <= k <= 107\n\n",
    "starterCode": "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,2,3,4,5], k = 3",
        "output": "2"
      },
      {
        "input": "nums = [6,3,5,7,2,3,3,8,2,4], k = 2",
        "output": "5"
      },
      {
        "input": "nums = [10,20,30,40,50], k = 10",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "5"
      },
      {
        "input": "nums = [1,3,1,5,4], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [-1,-1,-1,2,2,2], k = 3",
        "output": "1"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5], k = 1",
        "output": "4"
      },
      {
        "input": "nums = [1,1,2,2,3,3], k = 1",
        "output": "2"
      },
      {
        "input": "nums = [3,1,4,1,5], k = 2",
        "output": "2"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4], k = 2",
        "output": "2"
      },
      {
        "input": "nums = [1,3,5,7,9], k = 2",
        "output": "4"
      },
      {
        "input": "nums = [0,0,0,0,0], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 1",
        "output": "4"
      },
      {
        "input": "nums = [-10000000, -9999999, -9999998, -9999997, -9999996, -9999995, -9999994, -9999993, -9999992, -9999991], k = 1",
        "output": "9"
      },
      {
        "input": "nums = [-1, -2, -3, -1, -2, -3, -4, -5, -6, -7, -8, -9], k = 1",
        "output": "8"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], k = 1",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 19",
        "output": "1"
      },
      {
        "input": "nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], k = 1",
        "output": "10"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 0",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3",
        "output": "7"
      },
      {
        "input": "nums = [10000000,9999999,9999998,9999997,9999996,9999995,9999994,9999993,9999992,9999991], k = 1",
        "output": "9"
      },
      {
        "input": "nums = [-5,-4,-3,-2,-1,0,1,2,3,4,5], k = 2",
        "output": "9"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 11",
        "output": "0"
      },
      {
        "input": "nums = [-5, -5, -5, -5, 5, 5, 5, 5, 10, 10, 10, 10, 15, 15, 15, 15], k = 10",
        "output": "2"
      },
      {
        "input": "nums = [1, 5, 3, 4, 2], k = 3",
        "output": "2"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 0",
        "output": "0"
      },
      {
        "input": "nums = [10000000,-10000000,0,5000000,-5000000], k = 20000000",
        "output": "1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], k = 4",
        "output": "18"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], k = 10",
        "output": "25"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], k = 1",
        "output": "9"
      },
      {
        "input": "nums = [10, 2, 2, 10, 10, 3, 3, 3, 4, 4, 5, 5, 5, 5], k = 3",
        "output": "1"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], k = 10",
        "output": "9"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], k = 2",
        "output": "9"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 3",
        "output": "12"
      },
      {
        "input": "nums = [1, 3, 1, 3, 5, 7, 5, 9, 7, 9, 11, 13, 11], k = 2",
        "output": "6"
      },
      {
        "input": "nums = [5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 10, 10, 10], k = 1",
        "output": "5"
      },
      {
        "input": "nums = [9,2,9,8,3,3,6,9,1,7,4,10,6,3,7,8,4,3,9,6], k = 2",
        "output": "6"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 10, 20, 30, 40, 50], k = 10",
        "output": "4"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14], k = 1",
        "output": "13"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], k = 2",
        "output": "19"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5], k = 0",
        "output": "5"
      },
      {
        "input": "nums = [-10,-20,-30,-40,-50,-60,-70,-80,-90,-100], k = 30",
        "output": "7"
      },
      {
        "input": "nums = [-10,-10,-10,-10,-10,-10,-10,-10,-10,-10], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 50, 150, 250, 350, 450, 550, 650, 750, 850, 950], k = 100",
        "output": "18"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 10",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5], k = 0",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 3",
        "output": "17"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], k = 0",
        "output": "0"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 1",
        "output": "19"
      },
      {
        "input": "nums = [-1,-2,-2,-3,-3,-3,-4,-4,-4,-4,-5,-5,-5,-5,-5], k = 1",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 1",
        "output": "14"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3], k = 1",
        "output": "2"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 1",
        "output": "0"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 2",
        "output": "8"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5], k = 2",
        "output": "8"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], k = 1",
        "output": "9"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 5",
        "output": "15"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40], k = 2",
        "output": "19"
      },
      {
        "input": "nums = [5, 3, 1, 5, 7, 9, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], k = 4",
        "output": "13"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 150",
        "output": "0"
      },
      {
        "input": "nums = [10000000, -10000000, 5000000, -5000000, 0], k = 15000000",
        "output": "2"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3], k = 1",
        "output": "2"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 1",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 9",
        "output": "11"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], k = 10",
        "output": "9"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], k = 2",
        "output": "8"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 1",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], k = 0",
        "output": "10"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5], k = 1",
        "output": "4"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 3",
        "output": "7"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20], k = 1",
        "output": "19"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 19",
        "output": "1"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], k = 1",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2",
        "output": "17"
      },
      {
        "input": "nums = [1, 2, 2, 2, 3, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10], k = 1",
        "output": "9"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500], k = 100",
        "output": "14"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 5",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 2",
        "output": "18"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14], k = 0",
        "output": "14"
      },
      {
        "input": "nums = [10000000,-10000000,5000000,-5000000,0,2500000,-2500000], k = 15000000",
        "output": "2"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [10000000, 9999999, 9999998, 9999997, 9999996, 9999995, 9999994, 9999993, 9999992, 9999991], k = 1",
        "output": "9"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 5",
        "output": "15"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], k = 5",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5",
        "output": "5"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100], k = 10",
        "output": "9"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 0",
        "output": "10"
      },
      {
        "input": "nums = [-1, -2, -3, -1, -4, -2, -5, -6, -7, -8], k = 1",
        "output": "7"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 1",
        "output": "9"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15], k = 2",
        "output": "13"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], k = 4",
        "output": "13"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], k = 2",
        "output": "9"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 3",
        "output": "7"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10",
        "output": "10"
      },
      {
        "input": "nums = [100, 200, 300, 200, 100, 400, 500, 600, 700, 800], k = 100",
        "output": "7"
      },
      {
        "input": "nums = [10000000, 9999999, 9999998, 9999997, 9999996], k = 1",
        "output": "4"
      },
      {
        "input": "nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20], k = 1",
        "output": "19"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10], k = 1",
        "output": "9"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 5",
        "output": "16"
      },
      {
        "input": "nums = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 2",
        "output": "20"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], k = 2",
        "output": "19"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 0",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 10",
        "output": "10"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], k = 3",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 10",
        "output": "19"
      },
      {
        "input": "nums = [-1000, -2000, -3000, -4000, -5000, -6000, -7000, -8000, -9000, -10000], k = 1000",
        "output": "9"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 15",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5], k = 1",
        "output": "4"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10,20,20,20,20,20,20,20,20,20,20], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [10000000, 9999999, 9999998, 10000001, 10000000, 9999999, 9999998, 10000001], k = 1",
        "output": "3"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,10,20,30,40,50,60,70,80,90,100], k = 20",
        "output": "8"
      },
      {
        "input": "nums = [1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,11000,12000,13000,14000,15000,16000,17000,18000,19000,20000], k = 1000",
        "output": "19"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], k = 4",
        "output": "18"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9], k = 1",
        "output": "9"
      }
    ]
  },
  {
    "id": 264,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer n, return the nth ugly number.\n\u00a0\nExample 1:\n\nInput: n = 10\nOutput: 12\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n\nExample 2:\n\nInput: n = 1\nOutput: 1\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n\n\u00a0\nConstraints:\n\n1 <= n <= 1690\n\n",
    "starterCode": "class Solution:\n    def nthUglyNumber(self, n: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 15",
        "output": "24"
      },
      {
        "input": "n = 200",
        "output": "16200"
      },
      {
        "input": "n = 1690",
        "output": "2123366400"
      },
      {
        "input": "n = 1",
        "output": "1"
      },
      {
        "input": "n = 50",
        "output": "243"
      },
      {
        "input": "n = 10",
        "output": "12"
      },
      {
        "input": "n = 5",
        "output": "5"
      },
      {
        "input": "n = 1400",
        "output": "516560652"
      },
      {
        "input": "n = 3",
        "output": "3"
      },
      {
        "input": "n = 1575",
        "output": "1230187500"
      },
      {
        "input": "n = 1600",
        "output": "1399680000"
      },
      {
        "input": "n = 1685",
        "output": "2066242608"
      },
      {
        "input": "n = 900",
        "output": "26244000"
      },
      {
        "input": "n = 1688",
        "output": "2099520000"
      },
      {
        "input": "n = 100",
        "output": "1536"
      },
      {
        "input": "n = 1000",
        "output": "51200000"
      },
      {
        "input": "n = 300",
        "output": "82944"
      },
      {
        "input": "n = 550",
        "output": "1555200"
      },
      {
        "input": "n = 1200",
        "output": "174960000"
      },
      {
        "input": "n = 600",
        "output": "2460375"
      },
      {
        "input": "n = 4",
        "output": "4"
      },
      {
        "input": "n = 1675",
        "output": "1990656000"
      },
      {
        "input": "n = 1650",
        "output": "1769472000"
      },
      {
        "input": "n = 1550",
        "output": "1093500000"
      },
      {
        "input": "n = 1300",
        "output": "306110016"
      },
      {
        "input": "n = 2",
        "output": "2"
      },
      {
        "input": "n = 1024",
        "output": "60466176"
      },
      {
        "input": "n = 8",
        "output": "9"
      },
      {
        "input": "n = 1689",
        "output": "2109375000"
      },
      {
        "input": "n = 800",
        "output": "12754584"
      },
      {
        "input": "n = 400",
        "output": "311040"
      },
      {
        "input": "n = 9",
        "output": "10"
      },
      {
        "input": "n = 750",
        "output": "8748000"
      },
      {
        "input": "n = 6",
        "output": "6"
      },
      {
        "input": "n = 500",
        "output": "937500"
      },
      {
        "input": "n = 7",
        "output": "8"
      },
      {
        "input": "n = 1680",
        "output": "2025000000"
      },
      {
        "input": "n = 1500",
        "output": "859963392"
      }
    ]
  },
  {
    "id": 2766,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting",
      "Simulation"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums representing the initial positions of some marbles. You are also given two 0-indexed integer arrays moveFrom and moveTo of equal length.\nThroughout moveFrom.length steps, you will change the positions of the marbles. On the ith step, you will move all marbles at position moveFrom[i] to position moveTo[i].\nAfter completing all the steps, return the sorted list of occupied positions.\nNotes:\n\nWe call a position occupied if there is at least one marble in that position.\nThere may be multiple marbles in a single position.\n\n\u00a0\nExample 1:\n\nInput: nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]\nOutput: [5,6,8,9]\nExplanation: Initially, the marbles are at positions 1,6,7,8.\nAt the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied.\nAt the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied.\nAt the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied.\nAt the end, the final positions containing at least one marbles are [5,6,8,9].\nExample 2:\n\nInput: nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]\nOutput: [2]\nExplanation: Initially, the marbles are at positions [1,1,3,3].\nAt the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3].\nAt the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2].\nSince 2 is the only occupied position, we return [2].\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= moveFrom.length <= 105\nmoveFrom.length == moveTo.length\n1 <= nums[i], moveFrom[i], moveTo[i] <= 109\nThe test cases are generated such that there is at least a marble in\u00a0moveFrom[i]\u00a0at the moment we want to apply\u00a0the ith\u00a0move.\n\n",
    "starterCode": "class Solution:\n    def relocateMarbles(self, nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [5,5,5]",
        "output": "[4, 5]"
      },
      {
        "input": "nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]",
        "output": "[5, 6, 8, 9]"
      },
      {
        "input": "nums = [5,5,5,5], moveFrom = [5], moveTo = [10]",
        "output": "[10]"
      },
      {
        "input": "nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]",
        "output": "[2]"
      },
      {
        "input": "nums = [5,5,5], moveFrom = [5,5], moveTo = [10,10]",
        "output": "Error: 5"
      },
      {
        "input": "nums = [5,5,5,5], moveFrom = [5,5], moveTo = [10,10]",
        "output": "Error: 5"
      },
      {
        "input": "nums = [5,10,15], moveFrom = [5,10], moveTo = [10,15]",
        "output": "[15]"
      },
      {
        "input": "nums = [10,20,30], moveFrom = [10,20], moveTo = [30,10]",
        "output": "[10, 30]"
      },
      {
        "input": "nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [3,4,5]",
        "output": "[4, 5]"
      },
      {
        "input": "nums = [10,20,30], moveFrom = [10,20], moveTo = [15,25]",
        "output": "[15, 25, 30]"
      },
      {
        "input": "nums = [10,20,30,40], moveFrom = [10,20], moveTo = [15,25]",
        "output": "[15, 25, 30, 40]"
      },
      {
        "input": "nums = [100,200,300], moveFrom = [100,200], moveTo = [200,300]",
        "output": "[300]"
      },
      {
        "input": "nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [6,7,8]",
        "output": "[4, 5, 6, 7, 8]"
      },
      {
        "input": "nums = [1,2,3,4,5], moveFrom = [1,2,3,4,5], moveTo = [5,4,3,2,1]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "nums = [5,10,15], moveFrom = [5,15], moveTo = [10,20]",
        "output": "[10, 20]"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5], moveFrom = [1,2,3,4,5], moveTo = [6,6,6,6,6]",
        "output": "[6]"
      },
      {
        "input": "nums = [5,5,5,5,5], moveFrom = [5], moveTo = [10]",
        "output": "[10]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], moveFrom = [1,3,5,7,9], moveTo = [3,5,7,9,11]",
        "output": "[11, 13, 15, 17, 19]"
      },
      {
        "input": "nums = [1,2,2,3,4,4,4,5,6,6,6,6], moveFrom = [2,4,6], moveTo = [3,5,7]",
        "output": "[1, 3, 5, 7]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], moveFrom = [1,4,7,10,13], moveTo = [2,5,8,11,14]",
        "output": "[2, 3, 5, 6, 8, 9, 11, 12, 14, 15]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], moveFrom = [1, 3, 5, 7, 9, 11, 13], moveTo = [2, 4, 6, 8, 10, 12, 14]",
        "output": "[2, 4, 6, 8, 10, 12, 14, 15]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10], moveFrom = [2, 4, 6, 8], moveTo = [1, 3, 5, 7]",
        "output": "[1, 3, 5, 7, 10]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,3,5,7,9], moveTo = [2,4,6,8,10]",
        "output": "[2, 4, 6, 8, 10]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 3, 5, 7, 9], moveTo = [2, 4, 6, 8, 10]",
        "output": "[2, 4, 6, 8, 10]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50], moveFrom = [5,15,25,35,45], moveTo = [10,20,30,40,50]",
        "output": "[10, 20, 30, 40, 50]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], moveFrom = [10, 20, 30, 40, 50], moveTo = [15, 25, 35, 45, 55]",
        "output": "[15, 25, 35, 45, 55, 60, 70, 80, 90, 100]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveTo = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], moveFrom = [1, 2, 3, 4, 5], moveTo = [5, 4, 3, 2, 1]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,2,3,4,5], moveTo = [5,6,7,8,9]",
        "output": "[6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], moveFrom = [1, 3, 5, 7, 9], moveTo = [2, 4, 6, 8, 10]",
        "output": "[2, 4, 6, 8, 10, 11, 13, 15, 17, 19]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], moveFrom = [10, 20, 30, 40, 50], moveTo = [50, 60, 70, 80, 90]",
        "output": "[60, 70, 80, 90, 100]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], moveFrom = [1,3,5,7,9,11,13,15], moveTo = [2,4,6,8,10,12,14,16]",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13], moveFrom = [1,5,9,13], moveTo = [2,6,10,14]",
        "output": "[2, 3, 6, 7, 10, 11, 14]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveTo = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums = [10,20,30,40,50], moveFrom = [10,20,30,40,50], moveTo = [20,30,40,50,60]",
        "output": "[60]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], moveFrom = [1,5,9,13,17], moveTo = [2,6,10,14,18]",
        "output": "[2, 3, 6, 7, 10, 11, 14, 15, 18, 19]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], moveFrom = [10, 20, 30, 40], moveTo = [50, 40, 30, 20]",
        "output": "[20, 30, 50]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], moveFrom = [2,4,6,8,10,12,14,16,18,20], moveTo = [1,3,5,7,9,11,13,15,17,19]",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], moveFrom = [100,300,500,700,900], moveTo = [200,400,600,800,1000]",
        "output": "[200, 400, 600, 800, 1000]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], moveFrom = [10, 30, 50, 70, 90], moveTo = [15, 45, 65, 85, 105]",
        "output": "[15, 20, 40, 45, 60, 65, 80, 85, 100, 105]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], moveFrom = [3,5,7,9,11], moveTo = [1,2,3,4,5]",
        "output": "[1, 2, 3, 4, 5, 13, 15, 17, 19]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], moveFrom = [1,3,5,7,9,11,13,15,17,19], moveTo = [2,4,6,8,10,12,14,16,18,20]",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], moveFrom = [10,30,50,70,90], moveTo = [20,40,60,80,100]",
        "output": "[20, 40, 60, 80, 100]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,3,5,7,9], moveTo = [9,7,5,3,1]",
        "output": "[1, 2, 3, 4, 5, 6, 8, 10]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], moveFrom = [1, 3, 5, 7, 9, 11, 13, 15], moveTo = [2, 4, 6, 8, 10, 12, 14, 16]",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75], moveFrom = [5,15,25,35,45,55,65,75], moveTo = [10,20,30,40,50,60,70,80]",
        "output": "[10, 20, 30, 40, 50, 60, 70, 80]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5], moveFrom = [1,2,3,4,5], moveTo = [6,7,8,9,10]",
        "output": "[6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [2,4,6,8,10], moveTo = [1,3,5,7,9]",
        "output": "[1, 3, 5, 7, 9]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1], moveFrom = [1, 1, 1, 1, 1], moveTo = [2, 2, 2, 2, 2]",
        "output": "Error: 1"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], moveFrom = [1,3,5,7,9], moveTo = [2,4,6,8,10]",
        "output": "[2, 4, 6, 8, 10, 11, 13, 15, 17, 19]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], moveFrom = [1,1,1,1,1], moveTo = [2,3,4,5,6]",
        "output": "Error: 1"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], moveFrom = [10, 30, 50, 70, 90], moveTo = [20, 40, 60, 80, 100]",
        "output": "[20, 40, 60, 80, 100]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], moveFrom = [10, 30, 50, 70, 90, 110, 130], moveTo = [15, 35, 55, 75, 95, 115, 135]",
        "output": "[15, 20, 35, 40, 55, 60, 75, 80, 95, 100, 115, 120, 135, 140, 150]"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], moveFrom = [5, 25, 45, 65, 85], moveTo = [10, 30, 50, 70, 90]",
        "output": "[10, 15, 30, 35, 50, 55, 70, 75, 90, 95]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,3,5,7,9], moveTo = [11,12,13,14,15]",
        "output": "[2, 4, 6, 8, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], moveFrom = [100, 200, 300, 400, 500, 600, 700, 800, 900], moveTo = [101, 201, 301, 401, 501, 601, 701, 801, 901]",
        "output": "[101, 201, 301, 401, 501, 601, 701, 801, 901, 1000]"
      },
      {
        "input": "nums = [1,1,1,2,2,3,3,3,3,4,4,4,4,4], moveFrom = [1,2,3,4], moveTo = [5,5,5,5]",
        "output": "[5]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], moveFrom = [5, 15, 25, 35, 45], moveTo = [10, 20, 30, 40, 50]",
        "output": "[10, 20, 30, 40, 50]"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000], moveFrom = [1000000000], moveTo = [999999999]",
        "output": "[999999999]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,2,3,4,5,6,7,8,9], moveTo = [10,9,8,7,6,5,4,3,2]",
        "output": "[2, 3, 4, 5, 10]"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5], moveFrom = [1, 2, 3, 4], moveTo = [6, 7, 8, 9]",
        "output": "[5, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], moveFrom = [10, 30, 50], moveTo = [20, 40, 60]",
        "output": "[20, 40, 60]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], moveFrom = [100,200,300,400,500], moveTo = [150,250,350,450,550]",
        "output": "[150, 250, 350, 450, 550, 600, 700, 800, 900, 1000]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], moveFrom = [10, 20, 30, 40, 50], moveTo = [11, 21, 31, 41, 51]",
        "output": "[11, 21, 31, 41, 51, 60, 70, 80, 90, 100]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5], moveFrom = [1,2,3,4], moveTo = [3,4,5,6]",
        "output": "[5, 6]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveTo = [10, 9, 8, 7, 6, 5, 4, 3, 2]",
        "output": "[2, 3, 4, 5, 10]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], moveFrom = [100, 200, 300, 400, 500, 600, 700, 800, 900], moveTo = [900, 800, 700, 600, 500, 400, 300, 200, 100]",
        "output": "[100, 200, 300, 400, 500, 1000]"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], moveFrom = [1, 2, 3, 4, 5], moveTo = [6, 6, 6, 6, 6]",
        "output": "[6]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 4, 5], moveTo = [1, 2, 3, 4, 5]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 3], moveFrom = [1, 2, 3], moveTo = [4, 5, 6]",
        "output": "[4, 5, 6]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3, 4, 5], moveTo = [5, 4, 3, 2, 1]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], moveFrom = [1, 2, 3, 4, 5], moveTo = [6, 7, 8, 9, 10]",
        "output": "[6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [1000000, 2000000, 3000000, 4000000, 5000000], moveFrom = [1000000, 2000000, 3000000, 4000000, 5000000], moveTo = [5000000, 4000000, 3000000, 2000000, 1000000]",
        "output": "[1000000, 2000000, 3000000]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], moveFrom = [10,20,30,40,50], moveTo = [20,30,40,50,60]",
        "output": "[60, 70, 80, 90, 100]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30], moveFrom = [5, 10, 15, 20, 25], moveTo = [10, 15, 20, 25, 30]",
        "output": "[30]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], moveFrom = [1,2,3,4,5,6,7,8,9,10], moveTo = [11,12,13,14,15,16,17,18,19,20]",
        "output": "[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5], moveFrom = [1, 2, 3, 4, 5], moveTo = [5, 4, 3, 2, 1]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,2,3,4,5,6,7,8,9,10], moveTo = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14,15], moveFrom = [5,6,7,8,9,10], moveTo = [16,17,18,19,20,21]",
        "output": "[11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9], moveFrom = [2, 5, 8], moveTo = [10, 11, 12]",
        "output": "[1, 3, 4, 6, 7, 9, 10, 11, 12]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9], moveFrom = [1, 3, 5], moveTo = [2, 4, 6]",
        "output": "[2, 4, 6, 7, 9]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15], moveFrom = [1, 5, 9, 13], moveTo = [2, 6, 10, 14]",
        "output": "[2, 3, 6, 7, 10, 11, 14, 15]"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3], moveFrom = [1, 2, 3], moveTo = [4, 5, 6]",
        "output": "[4, 5, 6]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9], moveFrom = [1, 5, 9], moveTo = [2, 6, 10]",
        "output": "[2, 3, 6, 7, 10]"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], moveFrom = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], moveTo = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "[15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8]",
        "output": "[2, 4, 6, 8, 9, 11, 13, 15]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], moveFrom = [5, 10, 15, 20, 25], moveTo = [10, 15, 20, 25, 30]",
        "output": "[30, 35, 40, 45, 50]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], moveFrom = [100, 300, 500, 700, 900], moveTo = [200, 400, 600, 800, 1000]",
        "output": "[200, 400, 600, 800, 1000]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], moveFrom = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], moveTo = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "[5, 15, 25, 35, 45, 55, 65, 75, 85, 95]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7, 9], moveTo = [9, 7, 5, 3, 1]",
        "output": "[1, 2, 3, 4, 5, 6, 8]"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], moveFrom = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveTo = [11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 4, 5], moveTo = [5, 6, 7, 8, 9]",
        "output": "[6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], moveFrom = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], moveTo = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "[15]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], moveFrom = [1, 5, 9, 13, 17], moveTo = [2, 6, 10, 14, 18]",
        "output": "[2, 3, 6, 7, 10, 11, 14, 15, 18, 19]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveTo = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "output": "[11]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 4, 5], moveTo = [5, 4, 3, 2, 1]",
        "output": "[1, 2, 3, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], moveFrom = [10,20,30,40,50,60,70,80,90], moveTo = [5,15,25,35,45,55,65,75,85]",
        "output": "[5, 15, 25, 35, 45, 55, 65, 75, 85, 100]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 4, 5], moveTo = [10, 9, 8, 7, 6]",
        "output": "[6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], moveFrom = [1, 10, 100, 1000, 10000], moveTo = [1000000000, 100000000, 10000000, 1000000, 100000]",
        "output": "[100000, 1000000, 10000000, 100000000, 1000000000]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], moveFrom = [5, 10, 15, 20, 25], moveTo = [6, 11, 16, 21, 26]",
        "output": "[6, 11, 16, 21, 26, 30, 35, 40, 45, 50]"
      },
      {
        "input": "nums = [1,10,100,1000,10000,100000], moveFrom = [1,10,100,1000,10000], moveTo = [10,100,1000,10000,100000]",
        "output": "[100000]"
      }
    ]
  },
  {
    "id": 481,
    "difficulty": "Medium",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "problemDescription": "A magical string s consists of only '1' and '2' and obeys the following rules:\n\nThe string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.\n\nThe first few elements of s is s = \"1221121221221121122\u2026\u2026\". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 ......\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 ......\". You can see that the occurrence sequence is s itself.\nGiven an integer n, return the number of 1's in the first n number in the magical string s.\n\u00a0\nExample 1:\n\nInput: n = 6\nOutput: 3\nExplanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3.\n\nExample 2:\n\nInput: n = 1\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= n <= 105\n\n",
    "starterCode": "class Solution:\n    def magicalString(self, n: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 100000",
        "output": "49972"
      },
      {
        "input": "n = 100",
        "output": "49"
      },
      {
        "input": "n = 15",
        "output": "7"
      },
      {
        "input": "n = 10000",
        "output": "4996"
      },
      {
        "input": "n = 6",
        "output": "3"
      },
      {
        "input": "n = 20",
        "output": "10"
      },
      {
        "input": "n = 1",
        "output": "1"
      },
      {
        "input": "n = 1000",
        "output": "502"
      },
      {
        "input": "n = 10",
        "output": "5"
      },
      {
        "input": "n = 32000",
        "output": "15996"
      },
      {
        "input": "n = 99999",
        "output": "49972"
      },
      {
        "input": "n = 15000",
        "output": "7501"
      },
      {
        "input": "n = 3",
        "output": "1"
      },
      {
        "input": "n = 12345",
        "output": "6172"
      },
      {
        "input": "n = 7500",
        "output": "3747"
      },
      {
        "input": "n = 90000",
        "output": "44975"
      },
      {
        "input": "n = 50000",
        "output": "24985"
      },
      {
        "input": "n = 50",
        "output": "25"
      },
      {
        "input": "n = 5",
        "output": "3"
      },
      {
        "input": "n = 300",
        "output": "150"
      },
      {
        "input": "n = 30",
        "output": "15"
      },
      {
        "input": "n = 60000",
        "output": "29976"
      },
      {
        "input": "n = 40",
        "output": "20"
      },
      {
        "input": "n = 4",
        "output": "2"
      },
      {
        "input": "n = 30000",
        "output": "14993"
      },
      {
        "input": "n = 2",
        "output": "1"
      },
      {
        "input": "n = 45000",
        "output": "22491"
      },
      {
        "input": "n = 85000",
        "output": "42478"
      },
      {
        "input": "n = 80000",
        "output": "39982"
      },
      {
        "input": "n = 8",
        "output": "4"
      },
      {
        "input": "n = 20000",
        "output": "9996"
      },
      {
        "input": "n = 5000",
        "output": "2500"
      },
      {
        "input": "n = 75000",
        "output": "37487"
      },
      {
        "input": "n = 9999",
        "output": "4995"
      },
      {
        "input": "n = 50001",
        "output": "24986"
      },
      {
        "input": "n = 200",
        "output": "100"
      },
      {
        "input": "n = 400",
        "output": "199"
      },
      {
        "input": "n = 9",
        "output": "4"
      },
      {
        "input": "n = 500",
        "output": "249"
      },
      {
        "input": "n = 7",
        "output": "4"
      },
      {
        "input": "n = 25000",
        "output": "12495"
      }
    ]
  },
  {
    "id": 61,
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "problemDescription": "Given the head of a linked\u00a0list, rotate the list to the right by k places.\n\u00a0\nExample 1:\n\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [4,5,1,2,3]\n\nExample 2:\n\n\nInput: head = [0,1,2], k = 4\nOutput: [2,0,1]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [0, 500].\n-100 <= Node.val <= 100\n0 <= k <= 2 * 109\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "head = [-100, 100, 0], k = 1",
        "output": "[0, -100, 100]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9], k = 9",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [0,1,2], k = 4",
        "output": "[2, 0, 1]"
      },
      {
        "input": "head = [1,2,3,4,5], k = 5",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [1,2], k = 0",
        "output": "[1, 2]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1,2,3], k = 3",
        "output": "[1, 2, 3]"
      },
      {
        "input": "head = [1,2,3,4,5], k = 2",
        "output": "[4, 5, 1, 2, 3]"
      },
      {
        "input": "head = [], k = 0",
        "output": "None"
      },
      {
        "input": "head = [1,2], k = 3",
        "output": "[2, 1]"
      },
      {
        "input": "head = [1], k = 0",
        "output": "[1]"
      },
      {
        "input": "head = [1,2,3], k = 6",
        "output": "[1, 2, 3]"
      },
      {
        "input": "head = [1,2], k = 1",
        "output": "[2, 1]"
      },
      {
        "input": "head = [-1,0,1], k = 1",
        "output": "[1, -1, 0]"
      },
      {
        "input": "head = [1], k = 1",
        "output": "[1]"
      },
      {
        "input": "head = [1,2,3,4,5], k = 10",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9], k = 3",
        "output": "[7, 8, 9, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 0",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [5,4,3,2,1], k = 7",
        "output": "[2, 1, 5, 4, 3]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100], k = 25",
        "output": "[60, 70, 80, 90, 100, 10, 20, 30, 40, 50]"
      },
      {
        "input": "head = [1], k = 100",
        "output": "[1]"
      },
      {
        "input": "head = [7,6,5,4,3,2,1], k = 10",
        "output": "[3, 2, 1, 7, 6, 5, 4]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 0",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9], k = 15",
        "output": "[4, 5, 6, 7, 8, 9, 1, 2, 3]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20], k = 11",
        "output": "[20, 2, 4, 6, 8, 10, 12, 14, 16, 18]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 5",
        "output": "[16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5], k = 2",
        "output": "[-4, -5, -1, -2, -3]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], k = 3",
        "output": "[3, 2, 1, 10, 9, 8, 7, 6, 5, 4]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 20",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 15",
        "output": "[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], k = 500",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5], k = 100",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [0], k = 500",
        "output": "[0]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1,0], k = 9",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1, 0, 9]"
      },
      {
        "input": "head = [3,1,2], k = 3",
        "output": "[3, 1, 2]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100], k = 15",
        "output": "[60, 70, 80, 90, 100, 10, 20, 30, 40, 50]"
      },
      {
        "input": "head = [5,4,3,2,1], k = 1",
        "output": "[1, 5, 4, 3, 2]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 0",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100], k = 501",
        "output": "[100, 10, 20, 30, 40, 50, 60, 70, 80, 90]"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], k = 5",
        "output": "[-6, -7, -8, -9, -10, -1, -2, -3, -4, -5]"
      },
      {
        "input": "head = [0], k = 0",
        "output": "[0]"
      },
      {
        "input": "head = [10,20,30,40,50], k = 1000000000",
        "output": "[10, 20, 30, 40, 50]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 5",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [7,1,3,9,2,5,8,6], k = 3",
        "output": "[5, 8, 6, 7, 1, 3, 9, 2]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1], k = 4294967295",
        "output": "[3, 2, 1, 9, 8, 7, 6, 5, 4]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 9",
        "output": "[7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "head = [10,20,30,40,50,60], k = 600000000",
        "output": "[10, 20, 30, 40, 50, 60]"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], k = 15",
        "output": "[-6, -7, -8, -9, -10, -1, -2, -3, -4, -5]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], k = 19",
        "output": "[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 1]"
      },
      {
        "input": "head = [5,1,9,2,3,8,4,7,6], k = 3",
        "output": "[4, 7, 6, 5, 1, 9, 2, 3, 8]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 25",
        "output": "[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [1], k = 1000000000",
        "output": "[1]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1], k = 9",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 10",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 19",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [7,7,7,7,7], k = 10",
        "output": "[7, 7, 7, 7, 7]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 25",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "head = [], k = 3",
        "output": "None"
      },
      {
        "input": "head = [-1,0,1,-2,2,-3,3], k = 7",
        "output": "[-1, 0, 1, -2, 2, -3, 3]"
      },
      {
        "input": "head = [1], k = 10",
        "output": "[1]"
      },
      {
        "input": "head = [5,4,3,2,1], k = 2",
        "output": "[2, 1, 5, 4, 3]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100], k = 10",
        "output": "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"
      },
      {
        "input": "head = [], k = 1",
        "output": "None"
      },
      {
        "input": "head = [100,-100,50,-50,25,-25,12,-12], k = 10",
        "output": "[12, -12, 100, -100, 50, -50, 25, -25]"
      },
      {
        "input": "head = [1,2,3], k = 2147483647",
        "output": "[3, 1, 2]"
      },
      {
        "input": "head = [1], k = 1000",
        "output": "[1]"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], k = 8",
        "output": "[-3, -4, -5, -6, -7, -8, -9, -10, -1, -2]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1], k = 7",
        "output": "[7, 6, 5, 4, 3, 2, 1, 9, 8]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 11",
        "output": "[10, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [5], k = 0",
        "output": "[5]"
      },
      {
        "input": "head = [5,4,3,2,1], k = 3",
        "output": "[3, 2, 1, 5, 4]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 18",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 100",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 19",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1]"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5], k = 7",
        "output": "[-4, -5, -1, -2, -3]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 1",
        "output": "[10, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [5,6,7,8,9,10,11], k = 500000000",
        "output": "[9, 10, 11, 5, 6, 7, 8]"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0], k = 5",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 3",
        "output": "[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "head = [2,1], k = 1",
        "output": "[1, 2]"
      },
      {
        "input": "head = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 21",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 20",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [-100,100,-50,50,-25,25], k = 2",
        "output": "[-25, 25, -100, 100, -50, 50]"
      },
      {
        "input": "head = [-100,0,100], k = 2",
        "output": "[0, 100, -100]"
      },
      {
        "input": "head = [1,2,3], k = 9",
        "output": "[1, 2, 3]"
      },
      {
        "input": "head = [9,9,9,9,9], k = 10",
        "output": "[9, 9, 9, 9, 9]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 7",
        "output": "[9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "head = [5], k = 1000000000",
        "output": "[5]"
      },
      {
        "input": "head = [], k = 5",
        "output": "None"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19], k = 20",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], k = 13",
        "output": "[6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 2, 4]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12], k = 7",
        "output": "[6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20], k = 10",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 9",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 1]"
      },
      {
        "input": "head = [-100,0,100], k = 1",
        "output": "[100, -100, 0]"
      },
      {
        "input": "head = [3,3,3,3,3], k = 10",
        "output": "[3, 3, 3, 3, 3]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], k = 15",
        "output": "[5, 4, 3, 2, 1, 10, 9, 8, 7, 6]"
      },
      {
        "input": "head = [10,-20,30,-40,50], k = 3",
        "output": "[30, -40, 50, 10, -20]"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0], k = 50",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], k = 3",
        "output": "[-8, -9, -10, -1, -2, -3, -4, -5, -6, -7]"
      }
    ]
  },
  {
    "id": 1602,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree and a node u in the tree, return the nearest node on the same level that is to the right of u, or return null if u is the rightmost node in its level.\n\u00a0\nExample 1:\n\n\nInput: root = [1,2,3,null,4,5,6], u = 4\nOutput: 5\nExplanation: The nearest node on the same level to the right of node 4 is node 5.\n\nExample 2:\n\n\nInput: root = [3,null,4,2], u = 2\nOutput: null\nExplanation: There are no nodes to the right of 2.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 105].\n1 <= Node.val <= 105\nAll values in the tree are distinct.\nu is a node in the binary tree rooted at root.\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findNearestRightNode(self, root: TreeNode, u: TreeNode) -> Optional[TreeNode]:\n        ",
    "testCases": [
      {
        "input": "u",
        "output": "Error: Solution.findNearestRightNode() missing 2 required positional arguments: 'root' and 'u'"
      },
      {
        "input": "root",
        "output": "Error: Solution.findNearestRightNode() missing 2 required positional arguments: 'root' and 'u'"
      },
      {
        "input": "root = [1], u = 1",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], u = 4",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,4,5,6], u = TreeNode(4)",
        "output": "Error: Solution.findNearestRightNode() missing 1 required positional argument: 'u'"
      },
      {
        "input": "root = [5,4,6,3,null,7,8], u = 3",
        "output": "None"
      },
      {
        "input": "root = [5,1,4,null,null,3,6], u = 3",
        "output": "None"
      },
      {
        "input": "root = [2,1,3,null,null,null,4], u = 1",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4], u = 3",
        "output": "None"
      },
      {
        "input": "root = [1,2,null,3,4,null,5,null,null,6,7], u = 6",
        "output": "None"
      },
      {
        "input": "root = [1,2], u = 2",
        "output": "None"
      },
      {
        "input": "root = [2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10], u = 1",
        "output": "None"
      },
      {
        "input": "root = [2,1,3,null,null,4,5], u = 1",
        "output": "None"
      },
      {
        "input": "root = [2,1,3,null,null,null,4], u = 3",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,null,5,null,6,null,7,null,8,null,9,null], u = 7",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,null,null,null,null,8], u = 7",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], u = 8",
        "output": "None"
      },
      {
        "input": "root = [2,1,3], u = TreeNode(3)",
        "output": "Error: Solution.findNearestRightNode() missing 1 required positional argument: 'u'"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], u = 14",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,null,4,5], u = 4",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], u = 6",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,null,7], u = 5",
        "output": "None"
      },
      {
        "input": "root = [2,1,3,4,null,null,null,5], u = 5",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5], u = 2",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5], u = 3",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,null,null,5], u = 4",
        "output": "None"
      },
      {
        "input": "root = [6,2,8,0,4,7,9,null,null,3,5], u = 5",
        "output": "None"
      },
      {
        "input": "root = [3,null,4,2], u = TreeNode(2)",
        "output": "Error: Solution.findNearestRightNode() missing 1 required positional argument: 'u'"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], u = 7",
        "output": "None"
      },
      {
        "input": "root = [5,3,6,2,4,null,null,1], u = 4",
        "output": "None"
      },
      {
        "input": "root = [1,null,2], u = 1",
        "output": "None"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], u = 2",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], u = TreeNode(6)",
        "output": "Error: Solution.findNearestRightNode() missing 1 required positional argument: 'u'"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], u = 3",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], u = 7",
        "output": "None"
      },
      {
        "input": "root = [2,1,3], u = 1",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,null,7,null,null,8], u = 8",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], u = 10",
        "output": "None"
      },
      {
        "input": "root = [3,null,4,2], u = 2",
        "output": "None"
      },
      {
        "input": "root = [5,4,6,1,null,3,null,2,null,9,null,null,null,null,10,null,8,11,null,null,12], u = 10",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5], u = TreeNode(5)",
        "output": "Error: Solution.findNearestRightNode() missing 1 required positional argument: 'u'"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], u = 5",
        "output": "None"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5], u = 5",
        "output": "None"
      },
      {
        "input": "root = [3,1,4,null,null,2], u = 2",
        "output": "None"
      },
      {
        "input": "root = [1,2,3,null,4,5,6], u = 4",
        "output": "None"
      }
    ]
  },
  {
    "id": 2492,
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "problemDescription": "You are given a positive integer n representing n cities numbered from 1 to n. You are also given a 2D array roads where roads[i] = [ai, bi, distancei] indicates that there is a bidirectional road between cities ai and bi with a distance equal to distancei. The cities graph is not necessarily connected.\nThe score of a path between two cities is defined as the minimum distance of a road in this path.\nReturn the minimum possible score of a path between cities 1 and n.\nNote:\n\nA path is a sequence of roads between two cities.\nIt is allowed for a path to contain the same road multiple times, and you can visit cities 1 and n multiple times along the path.\nThe test cases are generated such that there is at least one path between 1 and n.\n\n\u00a0\nExample 1:\n\n\nInput: n = 4, roads = [[1,2,9],[2,3,6],[2,4,5],[1,4,7]]\nOutput: 5\nExplanation: The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 4. The score of this path is min(9,5) = 5.\nIt can be shown that no other path has less score.\n\nExample 2:\n\n\nInput: n = 4, roads = [[1,2,2],[1,3,4],[3,4,7]]\nOutput: 2\nExplanation: The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 1 -> 3 -> 4. The score of this path is min(2,2,4,7) = 2.\n\n\u00a0\nConstraints:\n\n2 <= n <= 105\n1 <= roads.length <= 105\nroads[i].length == 3\n1 <= ai, bi <= n\nai != bi\n1 <= distancei <= 104\nThere are no repeated edges.\nThere is at least one path between 1 and n.\n\n",
    "starterCode": "class Solution:\n    def minScore(self, n: int, roads: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 5, roads = [[1,2,10],[2,3,15],[3,4,20],[4,5,25],[1,5,30]]",
        "output": "10"
      },
      {
        "input": "n = 6, roads = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5]]",
        "output": "1"
      },
      {
        "input": "n = 4, roads = [[1,2,2],[1,3,4],[3,4,7]]",
        "output": "2"
      },
      {
        "input": "n = 5, roads = [[1,2,10],[2,3,5],[3,4,2],[4,5,1]]",
        "output": "1"
      },
      {
        "input": "n = 3, roads = [[1,2,5],[2,3,10],[1,3,7]]",
        "output": "5"
      },
      {
        "input": "n = 6, roads = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[1,6,1]]",
        "output": "1"
      },
      {
        "input": "n = 3, roads = [[1,2,1],[2,3,2],[1,3,3]]",
        "output": "1"
      },
      {
        "input": "n = 4, roads = [[1,2,9],[2,3,6],[2,4,5],[1,4,7]]",
        "output": "5"
      },
      {
        "input": "n = 3, roads = [[1,2,3],[2,3,1]]",
        "output": "1"
      },
      {
        "input": "n = 5, roads = [[1,2,3],[2,3,4],[3,4,5],[4,5,1],[1,5,2]]",
        "output": "1"
      },
      {
        "input": "n = 6, roads = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[1,6,60]]",
        "output": "10"
      },
      {
        "input": "n = 9, roads = [[1,2,2],[2,3,4],[3,4,6],[4,5,8],[5,6,10],[6,7,12],[7,8,14],[8,9,16],[1,9,18],[2,8,20],[3,7,22],[4,6,24],[5,9,26],[1,5,28],[2,6,30],[3,9,32],[1,7,34],[2,9,36],[1,4,38],[1,3,40],[1,6,42]]",
        "output": "2"
      },
      {
        "input": "n = 7, roads = [[1,2,5],[2,3,4],[3,4,3],[4,5,2],[5,6,1],[6,7,6],[7,1,7],[2,5,8],[3,6,9]]",
        "output": "1"
      },
      {
        "input": "n = 9, roads = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[1,3,2],[3,5,3],[5,7,4],[7,9,5]]",
        "output": "1"
      },
      {
        "input": "n = 15, roads = [[1,2,100],[2,3,200],[3,4,300],[4,5,400],[5,6,500],[6,7,600],[7,8,700],[8,9,800],[9,10,900],[10,11,1000],[11,12,1100],[12,13,1200],[13,14,1300],[14,15,1400],[1,15,50]]",
        "output": "50"
      },
      {
        "input": "n = 10, roads = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90],[1,5,15],[5,9,25]]",
        "output": "10"
      },
      {
        "input": "n = 7, roads = [[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5],[6,7,5],[1,3,5],[3,5,5],[5,7,5],[1,4,5],[4,6,5],[2,4,5],[3,6,5],[1,6,5],[2,5,5],[3,7,5]]",
        "output": "5"
      },
      {
        "input": "n = 20, roads = [[1,2,20],[1,3,19],[2,3,18],[2,4,17],[3,5,16],[4,5,15],[5,6,14],[6,7,13],[7,8,12],[8,9,11],[9,10,10],[10,11,9],[11,12,8],[12,13,7],[13,14,6],[14,15,5],[15,16,4],[16,17,3],[17,18,2],[18,19,1],[19,20,20]]",
        "output": "1"
      },
      {
        "input": "n = 10, roads = [[1,2,10],[1,3,5],[2,4,1],[2,5,8],[3,6,3],[4,7,2],[5,8,4],[6,9,6],[7,10,7],[8,10,9],[1,10,12]]",
        "output": "1"
      },
      {
        "input": "n = 6, roads = [[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,1,1],[2,6,10]]",
        "output": "1"
      },
      {
        "input": "n = 12, roads = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9],[8,9,10],[9,10,11],[10,11,12],[11,12,13],[1,12,1],[2,10,2],[4,11,3]]",
        "output": "1"
      },
      {
        "input": "n = 15, roads = [[1,2,2],[2,3,4],[3,4,5],[4,5,1],[1,5,2],[5,6,3],[6,7,4],[7,8,5],[8,9,6],[9,10,7],[10,11,8],[11,12,9],[12,13,10],[13,14,11],[14,15,12]]",
        "output": "1"
      },
      {
        "input": "n = 8, roads = [[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,1,9],[1,3,10],[2,4,11],[3,5,12],[4,6,13],[5,7,14],[6,8,15],[1,4,16],[2,5,17],[3,6,18],[4,7,19],[5,8,20],[1,5,21],[2,6,22],[3,7,23],[4,8,24]]",
        "output": "2"
      },
      {
        "input": "n = 15, roads = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9],[10,11,10],[11,12,11],[12,13,12],[13,14,13],[14,15,14],[1,15,15]]",
        "output": "1"
      },
      {
        "input": "n = 8, roads = [[1,2,100],[2,3,101],[3,4,102],[4,5,103],[5,6,104],[6,7,105],[7,8,106],[8,1,1],[2,8,200],[3,7,300]]",
        "output": "1"
      },
      {
        "input": "n = 8, roads = [[1,2,5],[2,3,4],[3,4,3],[4,5,2],[5,6,1],[6,7,6],[7,8,7],[1,8,10],[2,7,8],[3,6,9],[4,5,11]]",
        "output": "1"
      },
      {
        "input": "n = 6, roads = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[1,6,5]]",
        "output": "5"
      },
      {
        "input": "n = 6, roads = [[1,3,10],[1,4,20],[3,4,15],[4,6,30],[6,5,25],[5,2,5]]",
        "output": "5"
      },
      {
        "input": "n = 7, roads = [[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[1,7,5],[1,3,5],[3,5,5],[5,7,5]]",
        "output": "5"
      },
      {
        "input": "n = 8, roads = [[1,2,100],[2,3,200],[3,4,300],[4,5,400],[5,6,500],[6,7,600],[7,8,700],[8,1,800],[1,4,150],[2,5,250],[3,6,350],[4,7,450],[5,8,550],[6,1,650],[7,2,750],[8,3,850]]",
        "output": "100"
      },
      {
        "input": "n = 10, roads = [[1,2,5],[2,3,3],[3,4,7],[4,5,2],[5,6,6],[6,7,8],[7,8,4],[8,9,9],[9,10,1],[1,10,11],[2,4,12],[3,5,13],[4,6,14],[5,7,15],[6,8,16],[7,9,17],[8,10,18],[9,1,19],[10,2,20]]",
        "output": "1"
      },
      {
        "input": "n = 5, roads = [[1,2,1000],[2,3,999],[3,4,998],[4,5,997],[1,3,996],[2,4,995],[3,5,994],[1,4,993],[2,5,992],[1,5,991]]",
        "output": "991"
      },
      {
        "input": "n = 7, roads = [[1,2,2],[2,3,5],[3,4,7],[4,5,3],[5,6,8],[6,7,1],[1,7,6],[2,6,4],[3,5,9],[1,5,10]]",
        "output": "1"
      },
      {
        "input": "n = 15, roads = [[1,2,5],[2,3,4],[3,4,3],[4,5,2],[5,6,1],[6,7,5],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[1,15,20]]",
        "output": "1"
      },
      {
        "input": "n = 8, roads = [[1,2,50],[2,3,40],[3,4,30],[4,5,20],[5,6,10],[6,7,5],[7,8,1],[8,1,30],[2,4,25],[4,6,15],[6,8,5]]",
        "output": "1"
      },
      {
        "input": "n = 10, roads = [[1,2,5],[1,3,2],[2,4,3],[3,4,1],[4,5,6],[5,6,4],[6,7,9],[7,8,8],[8,9,7],[9,10,10]]",
        "output": "1"
      },
      {
        "input": "n = 10, roads = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90],[1,5,15],[2,6,25],[3,7,35],[4,8,45]]",
        "output": "10"
      },
      {
        "input": "n = 8, roads = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,1,8],[1,3,9],[2,4,10],[3,5,11],[4,6,12],[5,7,13],[6,8,14]]",
        "output": "1"
      },
      {
        "input": "n = 9, roads = [[1,2,15],[1,4,10],[2,3,5],[2,5,3],[3,6,7],[4,5,2],[4,7,6],[5,8,4],[6,9,8],[7,8,1],[8,9,9]]",
        "output": "1"
      },
      {
        "input": "n = 6, roads = [[1,2,5],[2,3,4],[3,4,3],[4,5,2],[5,6,1],[1,6,6],[1,3,7],[2,4,8],[3,5,9]]",
        "output": "1"
      },
      {
        "input": "n = 7, roads = [[1,2,7],[1,3,15],[2,3,6],[2,4,9],[3,5,12],[4,5,10],[4,6,11],[5,6,8],[5,7,3],[6,7,2]]",
        "output": "2"
      },
      {
        "input": "n = 7, roads = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[1,7,7],[2,4,8],[3,5,9]]",
        "output": "1"
      },
      {
        "input": "n = 7, roads = [[1,2,5],[2,3,4],[3,4,6],[4,5,3],[5,6,2],[6,7,8],[1,7,7]]",
        "output": "2"
      },
      {
        "input": "{\"n\": 12, \"roads\": [[1,2,2],[2,3,1],[3,4,2],[4,5,3],[5,6,4],[6,7,5],[7,8,6],[8,9,7],[9,10,8],[10,11,9],[11,12,10],[1,12,1]]}",
        "output": "Error: Solution.minScore() missing 2 required positional arguments: 'n' and 'roads'"
      },
      {
        "input": "n = 20, roads = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90],[10,11,100],[11,12,110],[12,13,120],[13,14,130],[14,15,140],[15,16,150],[16,17,160],[17,18,170],[18,19,180],[19,20,190],[1,20,5]]",
        "output": "5"
      },
      {
        "input": "{\"n\": 8, \"roads\": [[1,2,5],[1,3,7],[2,4,2],[3,5,1],[4,6,3],[4,7,8],[5,6,6],[6,8,4],[7,8,9]]}",
        "output": "Error: Solution.minScore() missing 2 required positional arguments: 'n' and 'roads'"
      },
      {
        "input": "n = 6, roads = [[1,2,5],[2,3,2],[3,4,8],[4,5,3],[5,6,1],[1,6,4]]",
        "output": "1"
      },
      {
        "input": "n = 9, roads = [[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,1,1],[1,3,10],[2,4,11],[3,5,12],[4,6,13],[5,7,14],[6,8,15],[7,9,16],[8,1,17],[9,2,18]]",
        "output": "1"
      },
      {
        "input": "n = 10, roads = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90],[1,10,5]]",
        "output": "5"
      },
      {
        "input": "n = 6, roads = [[1,2,100],[2,3,200],[3,4,300],[4,5,400],[5,6,500],[1,6,150],[1,4,250],[3,6,350],[2,5,450]]",
        "output": "100"
      },
      {
        "input": "{\"n\": 10, \"roads\": [[1,2,5],[2,3,4],[3,4,3],[4,5,2],[5,6,1],[6,7,6],[7,8,5],[8,9,4],[9,10,3],[1,10,7]]}",
        "output": "Error: Solution.minScore() missing 2 required positional arguments: 'n' and 'roads'"
      },
      {
        "input": "n = 8, roads = [[1,2,6],[2,3,3],[3,4,9],[4,5,4],[5,6,5],[6,7,2],[7,8,7],[8,1,8]]",
        "output": "2"
      },
      {
        "input": "n = 10, roads = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90],[1,10,1]]",
        "output": "1"
      },
      {
        "input": "n = 10, roads = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90]]",
        "output": "10"
      },
      {
        "input": "n = 12, roads = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90],[10,11,100],[11,12,110],[1,12,5]]",
        "output": "5"
      },
      {
        "input": "n = 6, roads = [[1,2,5],[2,3,3],[3,4,7],[4,5,2],[5,6,4],[6,1,6],[1,3,10],[2,4,1],[3,5,8],[4,6,9],[5,1,7],[6,2,11]]",
        "output": "1"
      },
      {
        "input": "n = 15, roads = [[1,2,10],[2,3,5],[3,4,6],[4,5,7],[5,6,8],[6,7,9],[7,8,1],[8,9,2],[9,10,3],[10,11,4],[11,12,11],[12,13,12],[13,14,13],[14,15,14],[15,1,15]]",
        "output": "1"
      },
      {
        "input": "n = 7, roads = [[1,2,4],[2,3,3],[3,4,2],[4,5,1],[5,6,1],[6,7,2],[1,7,5],[2,7,6],[3,7,7]]",
        "output": "1"
      },
      {
        "input": "n = 12, roads = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9],[10,11,10],[11,12,11],[12,1,12],[1,3,3],[3,5,5],[5,7,7],[7,9,9],[9,11,11],[2,4,4],[4,6,6],[6,8,8],[8,10,10],[10,12,12]]",
        "output": "1"
      },
      {
        "input": "n = 6, roads = [[1,2,100],[1,3,200],[2,4,300],[3,5,400],[4,5,500],[5,6,600],[2,6,700],[1,4,800],[3,6,900]]",
        "output": "100"
      },
      {
        "input": "{\"n\": 6, \"roads\": [[1,2,10],[1,3,5],[2,4,1],[2,5,3],[3,4,2],[4,6,4],[5,6,7]]}",
        "output": "Error: Solution.minScore() missing 2 required positional arguments: 'n' and 'roads'"
      },
      {
        "input": "n = 15, roads = [[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45],[9,10,50],[10,11,55],[11,12,60],[12,13,65],[13,14,70],[14,15,75],[15,1,80],[1,3,85],[3,5,90],[5,7,95],[7,9,100],[9,11,105],[11,13,110],[13,15,115],[2,4,120],[4,6,125],[6,8,130],[8,10,135],[10,12,140],[12,14,145],[14,2,150],[1,4,155],[4,7,160],[7,10,165],[10,13,170],[13,1,175],[2,5,180],[5,8,185],[8,11,190],[11,14,195],[14,1,200]]",
        "output": "10"
      },
      {
        "input": "{\"n\": 7, \"roads\": [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,1,70],[2,4,15],[3,5,25],[4,6,35],[5,7,45],[6,1,55],[7,2,65]]}",
        "output": "Error: Solution.minScore() missing 2 required positional arguments: 'n' and 'roads'"
      },
      {
        "input": "n = 10, roads = [[1,2,10],[1,3,9],[2,4,8],[2,5,7],[3,5,6],[4,6,5],[5,6,4],[6,7,3],[7,8,2],[8,9,1],[9,10,1]]",
        "output": "1"
      },
      {
        "input": "n = 8, roads = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[1,8,80],[2,5,90],[3,6,100],[4,7,110]]",
        "output": "10"
      },
      {
        "input": "n = 10, roads = [[1,2,9],[2,3,6],[3,4,5],[4,5,7],[5,6,8],[6,7,4],[7,8,2],[8,9,1],[9,10,3],[10,1,10]]",
        "output": "1"
      },
      {
        "input": "n = 20, roads = [[1,2,20],[2,3,19],[3,4,18],[4,5,17],[5,6,16],[6,7,15],[7,8,14],[8,9,13],[9,10,12],[10,11,11],[11,12,10],[12,13,9],[13,14,8],[14,15,7],[15,16,6],[16,17,5],[17,18,4],[18,19,3],[19,20,2],[20,1,1]]",
        "output": "1"
      },
      {
        "input": "n = 8, roads = [[1,2,3],[2,3,4],[3,4,5],[4,5,1],[5,6,2],[6,7,6],[7,8,5],[8,1,7]]",
        "output": "1"
      },
      {
        "input": "n = 20, roads = [[1,2,100],[2,3,200],[3,4,300],[4,5,400],[5,6,500],[6,7,600],[7,8,700],[8,9,800],[9,10,900],[10,11,1000],[11,12,1100],[12,13,1200],[13,14,1300],[14,15,1400],[15,16,1500],[16,17,1600],[17,18,1700],[18,19,1800],[19,20,1900],[20,1,2000],[1,3,2100],[3,5,2200],[5,7,2300],[7,9,2400],[9,11,2500],[11,13,2600],[13,15,2700],[15,17,2800],[17,19,2900],[19,1,3000],[2,4,3100],[4,6,3200],[6,8,3300],[8,10,3400],[10,12,3500],[12,14,3600],[14,16,3700],[16,18,3800],[18,20,3900],[1,4,4000],[4,7,4100],[7,10,4200],[10,13,4300],[13,16,4400],[16,19,4500],[19,2,4600],[2,5,4700],[5,8,4800],[8,11,4900],[11,14,5000],[14,17,5100],[17,20,5200],[20,1,5300]]",
        "output": "100"
      },
      {
        "input": "n = 15, roads = [[1,2,15],[2,3,14],[3,4,13],[4,5,12],[5,6,11],[6,7,10],[7,8,9],[8,9,8],[9,10,7],[10,11,6],[11,12,5],[12,13,4],[13,14,3],[14,15,2],[1,15,1],[2,14,16],[3,13,17],[4,12,18],[5,11,19],[6,10,20],[7,9,21]]",
        "output": "1"
      }
    ]
  },
  {
    "id": 2850,
    "difficulty": "Medium",
    "tags": [
      "Breadth-First Search",
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "problemDescription": "You are given a 0-indexed 2D integer matrix grid of size 3 * 3, representing the number of stones in each cell. The grid contains exactly 9 stones, and there can be multiple stones in a single cell.\nIn one move, you can move a single stone from its current cell to any other cell if the two cells share a side.\nReturn the minimum number of moves required to place one stone in each cell.\n\u00a0\nExample 1:\n\n\nInput: grid = [[1,1,0],[1,1,1],[1,2,1]]\nOutput: 3\nExplanation: One possible sequence of moves to place one stone in each cell is: \n1- Move one stone from cell (2,1) to cell (2,2).\n2- Move one stone from cell (2,2) to cell (1,2).\n3- Move one stone from cell (1,2) to cell (0,2).\nIn total, it takes 3 moves to place one stone in each cell of the grid.\nIt can be shown that 3 is the minimum number of moves required to place one stone in each cell.\n\nExample 2:\n\n\nInput: grid = [[1,3,0],[1,0,0],[1,0,3]]\nOutput: 4\nExplanation: One possible sequence of moves to place one stone in each cell is:\n1- Move one stone from cell (0,1) to cell (0,2).\n2- Move one stone from cell (0,1) to cell (1,1).\n3- Move one stone from cell (2,2) to cell (1,2).\n4- Move one stone from cell (2,2) to cell (2,1).\nIn total, it takes 4 moves to place one stone in each cell of the grid.\nIt can be shown that 4 is the minimum number of moves required to place one stone in each cell.\n\n\u00a0\nConstraints:\n\ngrid.length == grid[i].length == 3\n0 <= grid[i][j] <= 9\nSum of grid is equal to 9.\n\n",
    "starterCode": "class Solution:\n    def minimumMoves(self, grid: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "grid = [[2,2,1],[1,1,1],[1,1,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,9],[0,0,0],[0,0,0]]",
        "output": "18"
      },
      {
        "input": "grid = [[2,2,1],[1,1,1],[1,1,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,3,0],[1,0,0],[1,0,3]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,1,1],[1,1,1],[1,1,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[2,0,0],[0,0,0],[0,0,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,2,1],[2,1,2],[1,2,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1],[1,2,2],[2,2,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,2],[2,1,1],[2,1,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,2],[0,0,1],[1,1,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,1,1],[1,0,1],[1,1,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[2,0,1],[0,1,0],[1,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0],[0,0,0],[0,0,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[3,0,0],[0,3,0],[0,0,3]]",
        "output": "8"
      },
      {
        "input": "grid = [[3,0,0],[0,0,0],[0,0,3]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,1,0],[1,1,1],[1,2,1]]",
        "output": "3"
      },
      {
        "input": "grid = [[0,0,0],[0,0,0],[3,3,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0],[0,9,0],[0,0,0]]",
        "output": "12"
      },
      {
        "input": "grid = [[2,1,0],[0,1,1],[1,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,1,1],[1,2,1],[1,1,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[3,1,1],[0,0,0],[1,1,3]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,1,1],[1,1,1],[1,1,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[2,0,0],[0,1,0],[0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,2,1],[1,0,1],[1,1,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,1],[0,1,0],[1,0,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,2,0],[1,1,0],[0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,2,0],[2,0,2],[0,2,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,2,1],[0,1,0],[2,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,1,2],[0,0,0],[2,1,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,2],[0,0,0],[2,0,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,2,0],[1,1,0],[2,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,2,0],[1,0,1],[0,2,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[2,0,0],[0,0,2],[0,2,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[2,2,0],[0,1,0],[0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,1,1],[1,1,0],[1,1,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0],[0,0,0],[0,0,9]]",
        "output": "18"
      },
      {
        "input": "grid = [[1,0,0],[0,0,0],[0,0,8]]",
        "output": "14"
      },
      {
        "input": "grid = [[2,2,0],[1,0,2],[0,1,1]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,1,0],[1,0,1],[0,1,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,1,1],[1,0,1],[1,1,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,1,0],[1,0,0],[0,0,7]]",
        "output": "12"
      },
      {
        "input": "grid = [[0,1,2],[3,0,0],[0,0,3]]",
        "output": "6"
      },
      {
        "input": "grid = [[1,2,3],[0,0,0],[0,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,1,1],[1,1,0],[0,1,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,2],[1,0,1],[2,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0],[0,1,0],[0,0,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,1,0],[1,1,0],[1,1,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0],[0,0,2],[0,0,7]]",
        "output": "16"
      },
      {
        "input": "grid = [[1,0,1],[0,0,0],[0,1,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,2],[0,1,1],[2,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,1,2],[2,0,1],[1,2,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[2,0,0],[1,2,1],[0,1,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[2,1,0],[1,1,1],[0,1,2]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,0,0],[0,0,1],[0,0,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,1,0],[0,1,0],[0,1,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,3,0],[1,0,1],[0,1,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[2,0,1],[1,0,3],[0,3,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[2,0,1],[0,2,0],[0,1,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,2],[0,2,0],[2,0,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,1],[0,2,0],[1,0,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0],[0,0,1],[1,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,3,0],[0,0,0],[0,0,3]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0],[2,0,1],[0,2,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,2],[1,1,1],[1,0,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[4,0,1],[0,0,0],[1,0,3]]",
        "output": "6"
      },
      {
        "input": "grid = [[1,1,0],[0,0,0],[0,0,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,2],[2,0,0],[0,1,3]]",
        "output": "5"
      },
      {
        "input": "grid = [[3,0,0],[0,0,0],[0,3,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,2],[1,1,1],[0,2,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,1],[2,1,2],[1,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[2,1,0],[1,2,1],[0,1,2]]",
        "output": "4"
      },
      {
        "input": "grid = [[2,0,1],[0,0,0],[1,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[2,0,1],[0,2,0],[1,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,2,0],[3,0,0],[0,1,3]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,1,1],[1,2,1],[1,1,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0],[0,1,2],[3,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[3,0,0],[0,0,3],[0,3,0]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,0,0],[2,1,0],[0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,2,1],[0,1,0],[1,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[2,0,1],[1,0,2],[0,1,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,1,1],[2,0,0],[1,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,1],[1,7,0],[0,0,1]]",
        "output": "7"
      },
      {
        "input": "grid = [[2,2,2],[1,1,1],[0,0,0]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,0,0],[0,2,1],[1,2,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0],[0,3,0],[0,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,3,0],[0,0,0],[0,3,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,1,0],[0,0,0],[0,0,7]]",
        "output": "11"
      },
      {
        "input": "grid = [[1,0,2],[0,1,1],[2,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,2,0],[0,1,2],[2,0,1]]",
        "output": "4"
      },
      {
        "input": "grid = [[3,0,0],[0,0,3],[0,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,1,0],[2,1,1],[1,0,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,1],[1,0,0],[0,1,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,3],[0,0,0],[3,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,3,1],[0,0,0],[2,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,2,0],[1,0,3],[0,4,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[0,0,3],[1,1,0],[2,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[3,1,0],[0,0,0],[0,1,3]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,2],[0,1,0],[2,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0],[1,1,1],[2,2,2]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,0,0],[0,8,1],[0,0,0]]",
        "output": "11"
      },
      {
        "input": "grid = [[0,0,0],[0,0,3],[3,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,1,0],[0,7,0],[0,1,0]]",
        "output": "10"
      },
      {
        "input": "grid = [[1,2,0],[2,0,1],[0,3,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,0,2],[3,0,0],[0,1,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,2,2],[2,1,1],[1,1,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[2,2,0],[1,1,0],[0,0,3]]",
        "output": "5"
      },
      {
        "input": "grid = [[2,1,0],[0,2,0],[0,0,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,1],[0,0,0],[1,2,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,1,0],[0,0,1],[0,1,1]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[2,2,1],[1,0,1],[1,1,2]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,3,1],[2,0,1],[0,1,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,2,0],[1,0,0],[0,0,2]]",
        "output": "Execution timed out"
      }
    ]
  },
  {
    "id": 1258,
    "difficulty": "Medium",
    "tags": [
      "Union Find",
      "Array",
      "Hash Table",
      "String",
      "Backtracking"
    ],
    "problemDescription": "You are given a list of equivalent string pairs synonyms where synonyms[i] = [si, ti] indicates that si and ti are equivalent strings. You are also given a sentence text.\nReturn all possible synonymous sentences sorted lexicographically.\n\u00a0\nExample 1:\n\nInput: synonyms = [[\"happy\",\"joy\"],[\"sad\",\"sorrow\"],[\"joy\",\"cheerful\"]], text = \"I am happy today but was sad yesterday\"\nOutput: [\"I am cheerful today but was sad yesterday\",\"I am cheerful today but was sorrow yesterday\",\"I am happy today but was sad yesterday\",\"I am happy today but was sorrow yesterday\",\"I am joy today but was sad yesterday\",\"I am joy today but was sorrow yesterday\"]\n\nExample 2:\n\nInput: synonyms = [[\"happy\",\"joy\"],[\"cheerful\",\"glad\"]], text = \"I am happy today but was sad yesterday\"\nOutput: [\"I am happy today but was sad yesterday\",\"I am joy today but was sad yesterday\"]\n\n\u00a0\nConstraints:\n\n0 <= synonyms.length <= 10\nsynonyms[i].length == 2\n1 <= si.length, ti.length <= 10\nsi != ti\ntext consists of at most 10 words.\nAll the pairs of\u00a0synonyms are unique.\nThe words of text are separated by single spaces.\n\n",
    "starterCode": "class Solution:\n    def generateSentences(self, synonyms: List[List[str]], text: str) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "synonyms = [[\"cat\",\"feline\"],[\"dog\",\"canine\"]], text = \"cat and dog are friends\"",
        "output": "['cat and canine are friends', 'cat and dog are friends', 'feline and canine are friends', 'feline and dog are friends']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"]], text = \"the big red ball is not small\"",
        "output": "['the big red ball is not small', 'the big red ball is not tiny', 'the large red ball is not small', 'the large red ball is not tiny']"
      },
      {
        "input": "{\"synonyms\": [[\"happy\",\"joy\"],[\"sad\",\"sorrow\"],[\"joy\",\"cheerful\"]], \"text\": \"I am happy today but was sad yesterday\"}",
        "output": "Error: Solution.generateSentences() missing 2 required positional arguments: 'synonyms' and 'text'"
      },
      {
        "input": "synonyms = [], text = \"hello world\"",
        "output": "['hello world']"
      },
      {
        "input": "synonyms = [[\"love\",\"adore\"],[\"hate\",\"detest\"]], text = \"I love to hate\"",
        "output": "['I adore to detest', 'I adore to hate', 'I love to detest', 'I love to hate']"
      },
      {
        "input": "synonyms = [[\"cold\",\"chilly\"],[\"hot\",\"warm\"]], text = \"The cold weather turned hot quickly\"",
        "output": "['The chilly weather turned hot quickly', 'The chilly weather turned warm quickly', 'The cold weather turned hot quickly', 'The cold weather turned warm quickly']"
      },
      {
        "input": "synonyms = [[\"fast\",\"quick\"]], text = \"the fast brown fox jumps over the lazy dog\"",
        "output": "['the fast brown fox jumps over the lazy dog', 'the quick brown fox jumps over the lazy dog']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joy\"],[\"cheerful\",\"glad\"]], text = \"I am happy today but was sad yesterday\"",
        "output": "['I am happy today but was sad yesterday', 'I am joy today but was sad yesterday']"
      },
      {
        "input": "{\"synonyms\": [[\"happy\",\"joy\"],[\"cheerful\",\"glad\"]], \"text\": \"I am happy today but was sad yesterday\"}",
        "output": "Error: Solution.generateSentences() missing 2 required positional arguments: 'synonyms' and 'text'"
      },
      {
        "input": "synonyms = [[\"funny\",\"humorous\"],[\"serious\",\"grave\"]], text = \"The funny man was very serious\"",
        "output": "['The funny man was very grave', 'The funny man was very serious', 'The humorous man was very grave', 'The humorous man was very serious']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"]], text = \"The big red ball is small\"",
        "output": "['The big red ball is small', 'The big red ball is tiny', 'The large red ball is small', 'The large red ball is tiny']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"sad\",\"unhappy\"]], text = \"Today I am happy but yesterday I was sad\"",
        "output": "['Today I am happy but yesterday I was sad', 'Today I am happy but yesterday I was unhappy', 'Today I am joyful but yesterday I was sad', 'Today I am joyful but yesterday I was unhappy']"
      },
      {
        "input": "synonyms = [], text = \"there are no synonyms here\"",
        "output": "['there are no synonyms here']"
      },
      {
        "input": "synonyms = [[\"cat\",\"kitten\"]], text = \"The cat is a cat\"",
        "output": "['The cat is a cat', 'The cat is a kitten', 'The kitten is a cat', 'The kitten is a kitten']"
      },
      {
        "input": "synonyms = [[\"fast\",\"swift\"]], text = \"the fast runner won the race\"",
        "output": "['the fast runner won the race', 'the swift runner won the race']"
      },
      {
        "input": "{\"synonyms\": [[\"big\",\"large\"],[\"small\",\"tiny\"]], \"text\": \"the big red ball is smaller than the small blue ball\"}",
        "output": "Error: Solution.generateSentences() missing 2 required positional arguments: 'synonyms' and 'text'"
      },
      {
        "input": "synonyms = [[\"happy\",\"joy\"],[\"sad\",\"sorrow\"],[\"joy\",\"cheerful\"]], text = \"I am happy today but was sad yesterday\"",
        "output": "['I am cheerful today but was sad yesterday', 'I am cheerful today but was sorrow yesterday', 'I am happy today but was sad yesterday', 'I am happy today but was sorrow yesterday', 'I am joy today but was sad yesterday', 'I am joy today but was sorrow yesterday']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"]], text = \"the small dog is big\"",
        "output": "['the small dog is big', 'the small dog is large', 'the tiny dog is big', 'the tiny dog is large']"
      },
      {
        "input": "{\"synonyms\": [[\"fast\",\"quick\"]], \"text\": \"the fast brown fox jumps over the lazy dog\"}",
        "output": "Error: Solution.generateSentences() missing 2 required positional arguments: 'synonyms' and 'text'"
      },
      {
        "input": "synonyms = [[\"quick\",\"fast\"],[\"lazy\",\"idle\"]], text = \"the quick brown fox jumps over the lazy dog\"",
        "output": "['the fast brown fox jumps over the idle dog', 'the fast brown fox jumps over the lazy dog', 'the quick brown fox jumps over the idle dog', 'the quick brown fox jumps over the lazy dog']"
      },
      {
        "input": "{\"synonyms\": [], \"text\": \"there are no synonyms for these words\"}",
        "output": "Error: Solution.generateSentences() missing 2 required positional arguments: 'synonyms' and 'text'"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"sad\",\"melancholy\"]], text = \"he is not happy but sad\"",
        "output": "['he is not happy but melancholy', 'he is not happy but sad', 'he is not joyful but melancholy', 'he is not joyful but sad']"
      },
      {
        "input": "synonyms = [], text = \"No synonyms provided here\"",
        "output": "['No synonyms provided here']"
      },
      {
        "input": "synonyms = [[\"quick\",\"fast\"],[\"slow\",\"lethargic\"]], text = \"The quick brown fox jumps over the lazy dog\"",
        "output": "['The fast brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog']"
      },
      {
        "input": "synonyms = [[\"sun\",\"solar\"]], text = \"the sun rises in the east\"",
        "output": "['the solar rises in the east', 'the sun rises in the east']"
      },
      {
        "input": "synonyms = [[\"red\",\"crimson\"],[\"blue\",\"azure\"]], text = \"the red ball is next to the blue sky\"",
        "output": "['the crimson ball is next to the azure sky', 'the crimson ball is next to the blue sky', 'the red ball is next to the azure sky', 'the red ball is next to the blue sky']"
      },
      {
        "input": "synonyms = [[\"hot\",\"warm\"],[\"cold\",\"chilly\"]], text = \"it was a cold day but the sun made it feel warm\"",
        "output": "['it was a chilly day but the sun made it feel hot', 'it was a chilly day but the sun made it feel warm', 'it was a cold day but the sun made it feel hot', 'it was a cold day but the sun made it feel warm']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"sad\",\"unhappy\"],[\"angry\",\"furious\"]], text = \"she was happy to see him but sad that he was angry\"",
        "output": "['she was happy to see him but sad that he was angry', 'she was happy to see him but sad that he was furious', 'she was happy to see him but unhappy that he was angry', 'she was happy to see him but unhappy that he was furious', 'she was joyful to see him but sad that he was angry', 'she was joyful to see him but sad that he was furious', 'she was joyful to see him but unhappy that he was angry', 'she was joyful to see him but unhappy that he was furious']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"],[\"fat\",\"obese\"],[\"thin\",\"slender\"]], text = \"The big and fat elephant was next to the small and thin mouse\"",
        "output": "['The big and fat elephant was next to the small and slender mouse', 'The big and fat elephant was next to the small and thin mouse', 'The big and fat elephant was next to the tiny and slender mouse', 'The big and fat elephant was next to the tiny and thin mouse', 'The big and obese elephant was next to the small and slender mouse', 'The big and obese elephant was next to the small and thin mouse', 'The big and obese elephant was next to the tiny and slender mouse', 'The big and obese elephant was next to the tiny and thin mouse', 'The large and fat elephant was next to the small and slender mouse', 'The large and fat elephant was next to the small and thin mouse', 'The large and fat elephant was next to the tiny and slender mouse', 'The large and fat elephant was next to the tiny and thin mouse', 'The large and obese elephant was next to the small and slender mouse', 'The large and obese elephant was next to the small and thin mouse', 'The large and obese elephant was next to the tiny and slender mouse', 'The large and obese elephant was next to the tiny and thin mouse']"
      },
      {
        "input": "synonyms = [[\"fun\",\"entertaining\"],[\"fun\",\"exciting\"],[\"boring\",\"dull\"]], text = \"the movie was fun but the lecture was boring\"",
        "output": "['the movie was entertaining but the lecture was boring', 'the movie was entertaining but the lecture was dull', 'the movie was exciting but the lecture was boring', 'the movie was exciting but the lecture was dull', 'the movie was fun but the lecture was boring', 'the movie was fun but the lecture was dull']"
      },
      {
        "input": "synonyms = [[\"red\",\"scarlet\"],[\"blue\",\"azure\"],[\"green\",\"emerald\"],[\"yellow\",\"golden\"]], text = \"the red apple was next to the blue sky\"",
        "output": "['the red apple was next to the azure sky', 'the red apple was next to the blue sky', 'the scarlet apple was next to the azure sky', 'the scarlet apple was next to the blue sky']"
      },
      {
        "input": "synonyms = [[\"fun\",\"entertaining\"],[\"boring\",\"dull\"],[\"entertaining\",\"amusing\"],[\"dull\",\"tiresome\"]], text = \"the movie was fun but the book was boring\"",
        "output": "['the movie was amusing but the book was boring', 'the movie was amusing but the book was dull', 'the movie was amusing but the book was tiresome', 'the movie was entertaining but the book was boring', 'the movie was entertaining but the book was dull', 'the movie was entertaining but the book was tiresome', 'the movie was fun but the book was boring', 'the movie was fun but the book was dull', 'the movie was fun but the book was tiresome']"
      },
      {
        "input": "synonyms = [[\"fast\",\"quick\"],[\"quick\",\"swift\"],[\"swift\",\"speedy\"],[\"speedy\",\"rapid\"],[\"rapid\",\"swiftly\"]], text = \"the fast runner was quick and swift\"",
        "output": "['the fast runner was fast and fast', 'the fast runner was fast and quick', 'the fast runner was fast and rapid', 'the fast runner was fast and speedy', 'the fast runner was fast and swift', 'the fast runner was fast and swiftly', 'the fast runner was quick and fast', 'the fast runner was quick and quick', 'the fast runner was quick and rapid', 'the fast runner was quick and speedy', 'the fast runner was quick and swift', 'the fast runner was quick and swiftly', 'the fast runner was rapid and fast', 'the fast runner was rapid and quick', 'the fast runner was rapid and rapid', 'the fast runner was rapid and speedy', 'the fast runner was rapid and swift', 'the fast runner was rapid and swiftly', 'the fast runner was speedy and fast', 'the fast runner was speedy and quick', 'the fast runner was speedy and rapid', 'the fast runner was speedy and speedy', 'the fast runner was speedy and swift', 'the fast runner was speedy and swiftly', 'the fast runner was swift and fast', 'the fast runner was swift and quick', 'the fast runner was swift and rapid', 'the fast runner was swift and speedy', 'the fast runner was swift and swift', 'the fast runner was swift and swiftly', 'the fast runner was swiftly and fast', 'the fast runner was swiftly and quick', 'the fast runner was swiftly and rapid', 'the fast runner was swiftly and speedy', 'the fast runner was swiftly and swift', 'the fast runner was swiftly and swiftly', 'the quick runner was fast and fast', 'the quick runner was fast and quick', 'the quick runner was fast and rapid', 'the quick runner was fast and speedy', 'the quick runner was fast and swift', 'the quick runner was fast and swiftly', 'the quick runner was quick and fast', 'the quick runner was quick and quick', 'the quick runner was quick and rapid', 'the quick runner was quick and speedy', 'the quick runner was quick and swift', 'the quick runner was quick and swiftly', 'the quick runner was rapid and fast', 'the quick runner was rapid and quick', 'the quick runner was rapid and rapid', 'the quick runner was rapid and speedy', 'the quick runner was rapid and swift', 'the quick runner was rapid and swiftly', 'the quick runner was speedy and fast', 'the quick runner was speedy and quick', 'the quick runner was speedy and rapid', 'the quick runner was speedy and speedy', 'the quick runner was speedy and swift', 'the quick runner was speedy and swiftly', 'the quick runner was swift and fast', 'the quick runner was swift and quick', 'the quick runner was swift and rapid', 'the quick runner was swift and speedy', 'the quick runner was swift and swift', 'the quick runner was swift and swiftly', 'the quick runner was swiftly and fast', 'the quick runner was swiftly and quick', 'the quick runner was swiftly and rapid', 'the quick runner was swiftly and speedy', 'the quick runner was swiftly and swift', 'the quick runner was swiftly and swiftly', 'the rapid runner was fast and fast', 'the rapid runner was fast and quick', 'the rapid runner was fast and rapid', 'the rapid runner was fast and speedy', 'the rapid runner was fast and swift', 'the rapid runner was fast and swiftly', 'the rapid runner was quick and fast', 'the rapid runner was quick and quick', 'the rapid runner was quick and rapid', 'the rapid runner was quick and speedy', 'the rapid runner was quick and swift', 'the rapid runner was quick and swiftly', 'the rapid runner was rapid and fast', 'the rapid runner was rapid and quick', 'the rapid runner was rapid and rapid', 'the rapid runner was rapid and speedy', 'the rapid runner was rapid and swift', 'the rapid runner was rapid and swiftly', 'the rapid runner was speedy and fast', 'the rapid runner was speedy and quick', 'the rapid runner was speedy and rapid', 'the rapid runner was speedy and speedy', 'the rapid runner was speedy and swift', 'the rapid runner was speedy and swiftly', 'the rapid runner was swift and fast', 'the rapid runner was swift and quick', 'the rapid runner was swift and rapid', 'the rapid runner was swift and speedy', 'the rapid runner was swift and swift', 'the rapid runner was swift and swiftly', 'the rapid runner was swiftly and fast', 'the rapid runner was swiftly and quick', 'the rapid runner was swiftly and rapid', 'the rapid runner was swiftly and speedy', 'the rapid runner was swiftly and swift', 'the rapid runner was swiftly and swiftly', 'the speedy runner was fast and fast', 'the speedy runner was fast and quick', 'the speedy runner was fast and rapid', 'the speedy runner was fast and speedy', 'the speedy runner was fast and swift', 'the speedy runner was fast and swiftly', 'the speedy runner was quick and fast', 'the speedy runner was quick and quick', 'the speedy runner was quick and rapid', 'the speedy runner was quick and speedy', 'the speedy runner was quick and swift', 'the speedy runner was quick and swiftly', 'the speedy runner was rapid and fast', 'the speedy runner was rapid and quick', 'the speedy runner was rapid and rapid', 'the speedy runner was rapid and speedy', 'the speedy runner was rapid and swift', 'the speedy runner was rapid and swiftly', 'the speedy runner was speedy and fast', 'the speedy runner was speedy and quick', 'the speedy runner was speedy and rapid', 'the speedy runner was speedy and speedy', 'the speedy runner was speedy and swift', 'the speedy runner was speedy and swiftly', 'the speedy runner was swift and fast', 'the speedy runner was swift and quick', 'the speedy runner was swift and rapid', 'the speedy runner was swift and speedy', 'the speedy runner was swift and swift', 'the speedy runner was swift and swiftly', 'the speedy runner was swiftly and fast', 'the speedy runner was swiftly and quick', 'the speedy runner was swiftly and rapid', 'the speedy runner was swiftly and speedy', 'the speedy runner was swiftly and swift', 'the speedy runner was swiftly and swiftly', 'the swift runner was fast and fast', 'the swift runner was fast and quick', 'the swift runner was fast and rapid', 'the swift runner was fast and speedy', 'the swift runner was fast and swift', 'the swift runner was fast and swiftly', 'the swift runner was quick and fast', 'the swift runner was quick and quick', 'the swift runner was quick and rapid', 'the swift runner was quick and speedy', 'the swift runner was quick and swift', 'the swift runner was quick and swiftly', 'the swift runner was rapid and fast', 'the swift runner was rapid and quick', 'the swift runner was rapid and rapid', 'the swift runner was rapid and speedy', 'the swift runner was rapid and swift', 'the swift runner was rapid and swiftly', 'the swift runner was speedy and fast', 'the swift runner was speedy and quick', 'the swift runner was speedy and rapid', 'the swift runner was speedy and speedy', 'the swift runner was speedy and swift', 'the swift runner was speedy and swiftly', 'the swift runner was swift and fast', 'the swift runner was swift and quick', 'the swift runner was swift and rapid', 'the swift runner was swift and speedy', 'the swift runner was swift and swift', 'the swift runner was swift and swiftly', 'the swift runner was swiftly and fast', 'the swift runner was swiftly and quick', 'the swift runner was swiftly and rapid', 'the swift runner was swiftly and speedy', 'the swift runner was swiftly and swift', 'the swift runner was swiftly and swiftly', 'the swiftly runner was fast and fast', 'the swiftly runner was fast and quick', 'the swiftly runner was fast and rapid', 'the swiftly runner was fast and speedy', 'the swiftly runner was fast and swift', 'the swiftly runner was fast and swiftly', 'the swiftly runner was quick and fast', 'the swiftly runner was quick and quick', 'the swiftly runner was quick and rapid', 'the swiftly runner was quick and speedy', 'the swiftly runner was quick and swift', 'the swiftly runner was quick and swiftly', 'the swiftly runner was rapid and fast', 'the swiftly runner was rapid and quick', 'the swiftly runner was rapid and rapid', 'the swiftly runner was rapid and speedy', 'the swiftly runner was rapid and swift', 'the swiftly runner was rapid and swiftly', 'the swiftly runner was speedy and fast', 'the swiftly runner was speedy and quick', 'the swiftly runner was speedy and rapid', 'the swiftly runner was speedy and speedy', 'the swiftly runner was speedy and swift', 'the swiftly runner was speedy and swiftly', 'the swiftly runner was swift and fast', 'the swiftly runner was swift and quick', 'the swiftly runner was swift and rapid', 'the swiftly runner was swift and speedy', 'the swiftly runner was swift and swift', 'the swiftly runner was swift and swiftly', 'the swiftly runner was swiftly and fast', 'the swiftly runner was swiftly and quick', 'the swiftly runner was swiftly and rapid', 'the swiftly runner was swiftly and speedy', 'the swiftly runner was swiftly and swift', 'the swiftly runner was swiftly and swiftly']"
      },
      {
        "input": "synonyms = [[\"good\",\"great\"],[\"bad\",\"terrible\"]], text = \"he did a good job today but made a bad mistake last week\"",
        "output": "['he did a good job today but made a bad mistake last week', 'he did a good job today but made a terrible mistake last week', 'he did a great job today but made a bad mistake last week', 'he did a great job today but made a terrible mistake last week']"
      },
      {
        "input": "synonyms = [[\"fast\",\"speedy\"],[\"fast\",\"rapid\"],[\"slow\",\"sluggish\"],[\"slow\",\"lethargic\"]], text = \"The fast runner outran the slow tortoise\"",
        "output": "['The fast runner outran the lethargic tortoise', 'The fast runner outran the slow tortoise', 'The fast runner outran the sluggish tortoise', 'The rapid runner outran the lethargic tortoise', 'The rapid runner outran the slow tortoise', 'The rapid runner outran the sluggish tortoise', 'The speedy runner outran the lethargic tortoise', 'The speedy runner outran the slow tortoise', 'The speedy runner outran the sluggish tortoise']"
      },
      {
        "input": "synonyms = [[\"smart\",\"clever\"],[\"dumb\",\"stupid\"],[\"clever\",\"intelligent\"],[\"stupid\",\"foolish\"]], text = \"he is a smart person but she is dumb\"",
        "output": "['he is a clever person but she is dumb', 'he is a clever person but she is foolish', 'he is a clever person but she is stupid', 'he is a intelligent person but she is dumb', 'he is a intelligent person but she is foolish', 'he is a intelligent person but she is stupid', 'he is a smart person but she is dumb', 'he is a smart person but she is foolish', 'he is a smart person but she is stupid']"
      },
      {
        "input": "synonyms = [[\"smart\",\"clever\"],[\"dumb\",\"stupid\"],[\"intelligent\",\"bright\"]], text = \"he is smart and intelligent but never dumb\"",
        "output": "['he is clever and bright but never dumb', 'he is clever and bright but never stupid', 'he is clever and intelligent but never dumb', 'he is clever and intelligent but never stupid', 'he is smart and bright but never dumb', 'he is smart and bright but never stupid', 'he is smart and intelligent but never dumb', 'he is smart and intelligent but never stupid']"
      },
      {
        "input": "synonyms = [[\"fast\",\"swift\"],[\"slow\",\"lethargic\"],[\"quick\",\"hasty\"]], text = \"he ran fast but the tortoise was slow\"",
        "output": "['he ran fast but the tortoise was lethargic', 'he ran fast but the tortoise was slow', 'he ran swift but the tortoise was lethargic', 'he ran swift but the tortoise was slow']"
      },
      {
        "input": "synonyms = [[\"fast\",\"quick\"],[\"quick\",\"swift\"],[\"slow\",\"lethargic\"]], text = \"the cheetah ran fast but the tortoise moved slow\"",
        "output": "['the cheetah ran fast but the tortoise moved lethargic', 'the cheetah ran fast but the tortoise moved slow', 'the cheetah ran quick but the tortoise moved lethargic', 'the cheetah ran quick but the tortoise moved slow', 'the cheetah ran swift but the tortoise moved lethargic', 'the cheetah ran swift but the tortoise moved slow']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"sad\",\"melancholy\"],[\"joyful\",\"elated\"]], text = \"she felt happy when they won but sad when they lost\"",
        "output": "['she felt elated when they won but melancholy when they lost', 'she felt elated when they won but sad when they lost', 'she felt happy when they won but melancholy when they lost', 'she felt happy when they won but sad when they lost', 'she felt joyful when they won but melancholy when they lost', 'she felt joyful when they won but sad when they lost']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"large\",\"huge\"],[\"small\",\"tiny\"]], text = \"the big red ball is small compared to the huge mountain\"",
        "output": "['the big red ball is small compared to the big mountain', 'the big red ball is small compared to the huge mountain', 'the big red ball is small compared to the large mountain', 'the big red ball is tiny compared to the big mountain', 'the big red ball is tiny compared to the huge mountain', 'the big red ball is tiny compared to the large mountain', 'the huge red ball is small compared to the big mountain', 'the huge red ball is small compared to the huge mountain', 'the huge red ball is small compared to the large mountain', 'the huge red ball is tiny compared to the big mountain', 'the huge red ball is tiny compared to the huge mountain', 'the huge red ball is tiny compared to the large mountain', 'the large red ball is small compared to the big mountain', 'the large red ball is small compared to the huge mountain', 'the large red ball is small compared to the large mountain', 'the large red ball is tiny compared to the big mountain', 'the large red ball is tiny compared to the huge mountain', 'the large red ball is tiny compared to the large mountain']"
      },
      {
        "input": "synonyms = [[\"big\",\"huge\"],[\"small\",\"little\"]], text = \"the big dog chased the small cat\"",
        "output": "['the big dog chased the little cat', 'the big dog chased the small cat', 'the huge dog chased the little cat', 'the huge dog chased the small cat']"
      },
      {
        "input": "synonyms = [[\"tall\",\"tall\"],[\"short\",\"short\"],[\"tall\",\"tall\"]], text = \"The tall tree was next to a short bush\"",
        "output": "['The tall tree was next to a short bush']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"joyful\",\"elated\"],[\"elated\",\"ecstatic\"],[\"ecstatic\",\"overjoyed\"]], text = \"I felt happy when I received the good news\"",
        "output": "['I felt ecstatic when I received the good news', 'I felt elated when I received the good news', 'I felt happy when I received the good news', 'I felt joyful when I received the good news', 'I felt overjoyed when I received the good news']"
      },
      {
        "input": "synonyms = [[\"beautiful\",\"pretty\"],[\"pretty\",\"attractive\"],[\"attractive\",\"handsome\"]], text = \"she thought the beautiful flower was very pretty\"",
        "output": "['she thought the attractive flower was very attractive', 'she thought the attractive flower was very beautiful', 'she thought the attractive flower was very handsome', 'she thought the attractive flower was very pretty', 'she thought the beautiful flower was very attractive', 'she thought the beautiful flower was very beautiful', 'she thought the beautiful flower was very handsome', 'she thought the beautiful flower was very pretty', 'she thought the handsome flower was very attractive', 'she thought the handsome flower was very beautiful', 'she thought the handsome flower was very handsome', 'she thought the handsome flower was very pretty', 'she thought the pretty flower was very attractive', 'she thought the pretty flower was very beautiful', 'she thought the pretty flower was very handsome', 'she thought the pretty flower was very pretty']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"sad\",\"sorrowful\"],[\"quick\",\"swift\"],[\"fast\",\"swift\"]], text = \"He was quick and happy to finish the fast task\"",
        "output": "['He was fast and happy to finish the fast task', 'He was fast and happy to finish the quick task', 'He was fast and happy to finish the swift task', 'He was fast and joyful to finish the fast task', 'He was fast and joyful to finish the quick task', 'He was fast and joyful to finish the swift task', 'He was quick and happy to finish the fast task', 'He was quick and happy to finish the quick task', 'He was quick and happy to finish the swift task', 'He was quick and joyful to finish the fast task', 'He was quick and joyful to finish the quick task', 'He was quick and joyful to finish the swift task', 'He was swift and happy to finish the fast task', 'He was swift and happy to finish the quick task', 'He was swift and happy to finish the swift task', 'He was swift and joyful to finish the fast task', 'He was swift and joyful to finish the quick task', 'He was swift and joyful to finish the swift task']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"],[\"tall\",\"high\"]], text = \"the big tree was tall but the small flower was short\"",
        "output": "['the big tree was high but the small flower was short', 'the big tree was high but the tiny flower was short', 'the big tree was tall but the small flower was short', 'the big tree was tall but the tiny flower was short', 'the large tree was high but the small flower was short', 'the large tree was high but the tiny flower was short', 'the large tree was tall but the small flower was short', 'the large tree was tall but the tiny flower was short']"
      },
      {
        "input": "synonyms = [[\"smart\",\"clever\"],[\"dumb\",\"stupid\"],[\"strong\",\"powerful\"],[\"weak\",\"feeble\"]], text = \"the smart fox was strong but the dumb dog was weak\"",
        "output": "['the clever fox was powerful but the dumb dog was feeble', 'the clever fox was powerful but the dumb dog was weak', 'the clever fox was powerful but the stupid dog was feeble', 'the clever fox was powerful but the stupid dog was weak', 'the clever fox was strong but the dumb dog was feeble', 'the clever fox was strong but the dumb dog was weak', 'the clever fox was strong but the stupid dog was feeble', 'the clever fox was strong but the stupid dog was weak', 'the smart fox was powerful but the dumb dog was feeble', 'the smart fox was powerful but the dumb dog was weak', 'the smart fox was powerful but the stupid dog was feeble', 'the smart fox was powerful but the stupid dog was weak', 'the smart fox was strong but the dumb dog was feeble', 'the smart fox was strong but the dumb dog was weak', 'the smart fox was strong but the stupid dog was feeble', 'the smart fox was strong but the stupid dog was weak']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"large\",\"huge\"],[\"huge\",\"enormous\"],[\"enormous\",\"gigantic\"]], text = \"The big ball became a large bubble and then a huge balloon\"",
        "output": "['The big ball became a big bubble and then a big balloon', 'The big ball became a big bubble and then a enormous balloon', 'The big ball became a big bubble and then a gigantic balloon', 'The big ball became a big bubble and then a huge balloon', 'The big ball became a big bubble and then a large balloon', 'The big ball became a enormous bubble and then a big balloon', 'The big ball became a enormous bubble and then a enormous balloon', 'The big ball became a enormous bubble and then a gigantic balloon', 'The big ball became a enormous bubble and then a huge balloon', 'The big ball became a enormous bubble and then a large balloon', 'The big ball became a gigantic bubble and then a big balloon', 'The big ball became a gigantic bubble and then a enormous balloon', 'The big ball became a gigantic bubble and then a gigantic balloon', 'The big ball became a gigantic bubble and then a huge balloon', 'The big ball became a gigantic bubble and then a large balloon', 'The big ball became a huge bubble and then a big balloon', 'The big ball became a huge bubble and then a enormous balloon', 'The big ball became a huge bubble and then a gigantic balloon', 'The big ball became a huge bubble and then a huge balloon', 'The big ball became a huge bubble and then a large balloon', 'The big ball became a large bubble and then a big balloon', 'The big ball became a large bubble and then a enormous balloon', 'The big ball became a large bubble and then a gigantic balloon', 'The big ball became a large bubble and then a huge balloon', 'The big ball became a large bubble and then a large balloon', 'The enormous ball became a big bubble and then a big balloon', 'The enormous ball became a big bubble and then a enormous balloon', 'The enormous ball became a big bubble and then a gigantic balloon', 'The enormous ball became a big bubble and then a huge balloon', 'The enormous ball became a big bubble and then a large balloon', 'The enormous ball became a enormous bubble and then a big balloon', 'The enormous ball became a enormous bubble and then a enormous balloon', 'The enormous ball became a enormous bubble and then a gigantic balloon', 'The enormous ball became a enormous bubble and then a huge balloon', 'The enormous ball became a enormous bubble and then a large balloon', 'The enormous ball became a gigantic bubble and then a big balloon', 'The enormous ball became a gigantic bubble and then a enormous balloon', 'The enormous ball became a gigantic bubble and then a gigantic balloon', 'The enormous ball became a gigantic bubble and then a huge balloon', 'The enormous ball became a gigantic bubble and then a large balloon', 'The enormous ball became a huge bubble and then a big balloon', 'The enormous ball became a huge bubble and then a enormous balloon', 'The enormous ball became a huge bubble and then a gigantic balloon', 'The enormous ball became a huge bubble and then a huge balloon', 'The enormous ball became a huge bubble and then a large balloon', 'The enormous ball became a large bubble and then a big balloon', 'The enormous ball became a large bubble and then a enormous balloon', 'The enormous ball became a large bubble and then a gigantic balloon', 'The enormous ball became a large bubble and then a huge balloon', 'The enormous ball became a large bubble and then a large balloon', 'The gigantic ball became a big bubble and then a big balloon', 'The gigantic ball became a big bubble and then a enormous balloon', 'The gigantic ball became a big bubble and then a gigantic balloon', 'The gigantic ball became a big bubble and then a huge balloon', 'The gigantic ball became a big bubble and then a large balloon', 'The gigantic ball became a enormous bubble and then a big balloon', 'The gigantic ball became a enormous bubble and then a enormous balloon', 'The gigantic ball became a enormous bubble and then a gigantic balloon', 'The gigantic ball became a enormous bubble and then a huge balloon', 'The gigantic ball became a enormous bubble and then a large balloon', 'The gigantic ball became a gigantic bubble and then a big balloon', 'The gigantic ball became a gigantic bubble and then a enormous balloon', 'The gigantic ball became a gigantic bubble and then a gigantic balloon', 'The gigantic ball became a gigantic bubble and then a huge balloon', 'The gigantic ball became a gigantic bubble and then a large balloon', 'The gigantic ball became a huge bubble and then a big balloon', 'The gigantic ball became a huge bubble and then a enormous balloon', 'The gigantic ball became a huge bubble and then a gigantic balloon', 'The gigantic ball became a huge bubble and then a huge balloon', 'The gigantic ball became a huge bubble and then a large balloon', 'The gigantic ball became a large bubble and then a big balloon', 'The gigantic ball became a large bubble and then a enormous balloon', 'The gigantic ball became a large bubble and then a gigantic balloon', 'The gigantic ball became a large bubble and then a huge balloon', 'The gigantic ball became a large bubble and then a large balloon', 'The huge ball became a big bubble and then a big balloon', 'The huge ball became a big bubble and then a enormous balloon', 'The huge ball became a big bubble and then a gigantic balloon', 'The huge ball became a big bubble and then a huge balloon', 'The huge ball became a big bubble and then a large balloon', 'The huge ball became a enormous bubble and then a big balloon', 'The huge ball became a enormous bubble and then a enormous balloon', 'The huge ball became a enormous bubble and then a gigantic balloon', 'The huge ball became a enormous bubble and then a huge balloon', 'The huge ball became a enormous bubble and then a large balloon', 'The huge ball became a gigantic bubble and then a big balloon', 'The huge ball became a gigantic bubble and then a enormous balloon', 'The huge ball became a gigantic bubble and then a gigantic balloon', 'The huge ball became a gigantic bubble and then a huge balloon', 'The huge ball became a gigantic bubble and then a large balloon', 'The huge ball became a huge bubble and then a big balloon', 'The huge ball became a huge bubble and then a enormous balloon', 'The huge ball became a huge bubble and then a gigantic balloon', 'The huge ball became a huge bubble and then a huge balloon', 'The huge ball became a huge bubble and then a large balloon', 'The huge ball became a large bubble and then a big balloon', 'The huge ball became a large bubble and then a enormous balloon', 'The huge ball became a large bubble and then a gigantic balloon', 'The huge ball became a large bubble and then a huge balloon', 'The huge ball became a large bubble and then a large balloon', 'The large ball became a big bubble and then a big balloon', 'The large ball became a big bubble and then a enormous balloon', 'The large ball became a big bubble and then a gigantic balloon', 'The large ball became a big bubble and then a huge balloon', 'The large ball became a big bubble and then a large balloon', 'The large ball became a enormous bubble and then a big balloon', 'The large ball became a enormous bubble and then a enormous balloon', 'The large ball became a enormous bubble and then a gigantic balloon', 'The large ball became a enormous bubble and then a huge balloon', 'The large ball became a enormous bubble and then a large balloon', 'The large ball became a gigantic bubble and then a big balloon', 'The large ball became a gigantic bubble and then a enormous balloon', 'The large ball became a gigantic bubble and then a gigantic balloon', 'The large ball became a gigantic bubble and then a huge balloon', 'The large ball became a gigantic bubble and then a large balloon', 'The large ball became a huge bubble and then a big balloon', 'The large ball became a huge bubble and then a enormous balloon', 'The large ball became a huge bubble and then a gigantic balloon', 'The large ball became a huge bubble and then a huge balloon', 'The large ball became a huge bubble and then a large balloon', 'The large ball became a large bubble and then a big balloon', 'The large ball became a large bubble and then a enormous balloon', 'The large ball became a large bubble and then a gigantic balloon', 'The large ball became a large bubble and then a huge balloon', 'The large ball became a large bubble and then a large balloon']"
      },
      {
        "input": "synonyms = [[\"fast\",\"swift\"],[\"slow\",\"lethargic\"],[\"tall\",\"high\"],[\"big\",\"large\"]], text = \"the big tall man ran fast and the short one was slow\"",
        "output": "['the big high man ran fast and the short one was lethargic', 'the big high man ran fast and the short one was slow', 'the big high man ran swift and the short one was lethargic', 'the big high man ran swift and the short one was slow', 'the big tall man ran fast and the short one was lethargic', 'the big tall man ran fast and the short one was slow', 'the big tall man ran swift and the short one was lethargic', 'the big tall man ran swift and the short one was slow', 'the large high man ran fast and the short one was lethargic', 'the large high man ran fast and the short one was slow', 'the large high man ran swift and the short one was lethargic', 'the large high man ran swift and the short one was slow', 'the large tall man ran fast and the short one was lethargic', 'the large tall man ran fast and the short one was slow', 'the large tall man ran swift and the short one was lethargic', 'the large tall man ran swift and the short one was slow']"
      },
      {
        "input": "synonyms = [[\"good\",\"excellent\"],[\"bad\",\"poor\"],[\"ugly\",\"hideous\"]], text = \"the good food was ugly but tasted bad\"",
        "output": "['the excellent food was hideous but tasted bad', 'the excellent food was hideous but tasted poor', 'the excellent food was ugly but tasted bad', 'the excellent food was ugly but tasted poor', 'the good food was hideous but tasted bad', 'the good food was hideous but tasted poor', 'the good food was ugly but tasted bad', 'the good food was ugly but tasted poor']"
      },
      {
        "input": "synonyms = [[\"cold\",\"chilly\"],[\"hot\",\"warm\"],[\"dry\",\"arid\"],[\"wet\",\"moist\"]], text = \"The cold and dry air turned into hot and wet steam\"",
        "output": "['The chilly and arid air turned into hot and moist steam', 'The chilly and arid air turned into hot and wet steam', 'The chilly and arid air turned into warm and moist steam', 'The chilly and arid air turned into warm and wet steam', 'The chilly and dry air turned into hot and moist steam', 'The chilly and dry air turned into hot and wet steam', 'The chilly and dry air turned into warm and moist steam', 'The chilly and dry air turned into warm and wet steam', 'The cold and arid air turned into hot and moist steam', 'The cold and arid air turned into hot and wet steam', 'The cold and arid air turned into warm and moist steam', 'The cold and arid air turned into warm and wet steam', 'The cold and dry air turned into hot and moist steam', 'The cold and dry air turned into hot and wet steam', 'The cold and dry air turned into warm and moist steam', 'The cold and dry air turned into warm and wet steam']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"sad\",\"unhappy\"],[\"angry\",\"mad\"]], text = \"she was angry and sad at the same time\"",
        "output": "['she was angry and sad at the same time', 'she was angry and unhappy at the same time', 'she was mad and sad at the same time', 'she was mad and unhappy at the same time']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"],[\"fast\",\"quick\"]], text = \"the big red car went fast\"",
        "output": "['the big red car went fast', 'the big red car went quick', 'the large red car went fast', 'the large red car went quick']"
      },
      {
        "input": "synonyms = [[\"quick\",\"fast\"],[\"fast\",\"swift\"],[\"lazy\",\"idle\"]], text = \"the quick brown fox jumps over the lazy dog\"",
        "output": "['the fast brown fox jumps over the idle dog', 'the fast brown fox jumps over the lazy dog', 'the quick brown fox jumps over the idle dog', 'the quick brown fox jumps over the lazy dog', 'the swift brown fox jumps over the idle dog', 'the swift brown fox jumps over the lazy dog']"
      },
      {
        "input": "synonyms = [[\"quick\",\"swift\"],[\"lazy\",\"idle\"],[\"brown\",\"chestnut\"]], text = \"the quick brown fox jumps over the lazy dog\"",
        "output": "['the quick brown fox jumps over the idle dog', 'the quick brown fox jumps over the lazy dog', 'the quick chestnut fox jumps over the idle dog', 'the quick chestnut fox jumps over the lazy dog', 'the swift brown fox jumps over the idle dog', 'the swift brown fox jumps over the lazy dog', 'the swift chestnut fox jumps over the idle dog', 'the swift chestnut fox jumps over the lazy dog']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"]], text = \"the small cat sat on the big roof\"",
        "output": "['the small cat sat on the big roof', 'the small cat sat on the large roof', 'the tiny cat sat on the big roof', 'the tiny cat sat on the large roof']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"],[\"large\",\"huge\"],[\"tiny\",\"petite\"]], text = \"the big house has a small garden\"",
        "output": "['the big house has a petite garden', 'the big house has a small garden', 'the big house has a tiny garden', 'the huge house has a petite garden', 'the huge house has a small garden', 'the huge house has a tiny garden', 'the large house has a petite garden', 'the large house has a small garden', 'the large house has a tiny garden']"
      },
      {
        "input": "synonyms = [[\"easy\",\"simple\"],[\"difficult\",\"hard\"]], text = \"the easy problem was too simple for the difficult quiz\"",
        "output": "['the easy problem was too easy for the difficult quiz', 'the easy problem was too easy for the hard quiz', 'the easy problem was too simple for the difficult quiz', 'the easy problem was too simple for the hard quiz', 'the simple problem was too easy for the difficult quiz', 'the simple problem was too easy for the hard quiz', 'the simple problem was too simple for the difficult quiz', 'the simple problem was too simple for the hard quiz']"
      },
      {
        "input": "synonyms = [[\"bright\",\"luminous\"],[\"bright\",\"brilliant\"],[\"dark\",\"dim\"],[\"dark\",\"shadowy\"]], text = \"The bright stars shone in the dark sky\"",
        "output": "['The bright stars shone in the dark sky', 'The bright stars shone in the dim sky', 'The bright stars shone in the shadowy sky', 'The brilliant stars shone in the dark sky', 'The brilliant stars shone in the dim sky', 'The brilliant stars shone in the shadowy sky', 'The luminous stars shone in the dark sky', 'The luminous stars shone in the dim sky', 'The luminous stars shone in the shadowy sky']"
      },
      {
        "input": "synonyms = [[\"hot\",\"warm\"],[\"cold\",\"chilly\"]], text = \"the hot summer days gave way to the cold winter nights\"",
        "output": "['the hot summer days gave way to the chilly winter nights', 'the hot summer days gave way to the cold winter nights', 'the warm summer days gave way to the chilly winter nights', 'the warm summer days gave way to the cold winter nights']"
      },
      {
        "input": "synonyms = [[\"fast\",\"speedy\"],[\"slow\",\"lethargic\"],[\"tall\",\"high\"]], text = \"the fast car drove past the slow moving tall tree\"",
        "output": "['the fast car drove past the lethargic moving high tree', 'the fast car drove past the lethargic moving tall tree', 'the fast car drove past the slow moving high tree', 'the fast car drove past the slow moving tall tree', 'the speedy car drove past the lethargic moving high tree', 'the speedy car drove past the lethargic moving tall tree', 'the speedy car drove past the slow moving high tree', 'the speedy car drove past the slow moving tall tree']"
      },
      {
        "input": "synonyms = [[\"tall\",\"high\"],[\"short\",\"low\"]], text = \"the tall building towered over the short houses\"",
        "output": "['the high building towered over the low houses', 'the high building towered over the short houses', 'the tall building towered over the low houses', 'the tall building towered over the short houses']"
      },
      {
        "input": "synonyms = [[\"wise\",\"clever\"],[\"foolish\",\"stupid\"],[\"bright\",\"intelligent\"]], text = \"he is wise and bright but never foolish\"",
        "output": "['he is clever and bright but never foolish', 'he is clever and bright but never stupid', 'he is clever and intelligent but never foolish', 'he is clever and intelligent but never stupid', 'he is wise and bright but never foolish', 'he is wise and bright but never stupid', 'he is wise and intelligent but never foolish', 'he is wise and intelligent but never stupid']"
      },
      {
        "input": "synonyms = [[\"hot\",\"warm\"],[\"cold\",\"chilly\"],[\"hot\",\"scorching\"]], text = \"it was a hot day but the air was cold\"",
        "output": "['it was a hot day but the air was chilly', 'it was a hot day but the air was cold', 'it was a scorching day but the air was chilly', 'it was a scorching day but the air was cold', 'it was a warm day but the air was chilly', 'it was a warm day but the air was cold']"
      },
      {
        "input": "synonyms = [[\"dark\",\"black\"],[\"light\",\"bright\"]], text = \"it was a dark night but the light of the moon was bright\"",
        "output": "['it was a black night but the bright of the moon was bright', 'it was a black night but the bright of the moon was light', 'it was a black night but the light of the moon was bright', 'it was a black night but the light of the moon was light', 'it was a dark night but the bright of the moon was bright', 'it was a dark night but the bright of the moon was light', 'it was a dark night but the light of the moon was bright', 'it was a dark night but the light of the moon was light']"
      },
      {
        "input": "synonyms = [[\"man\",\"male\"],[\"woman\",\"female\"],[\"boy\",\"male child\"],[\"girl\",\"female child\"]], text = \"the man and woman had a boy and a girl\"",
        "output": "['the male and female had a boy and a female child', 'the male and female had a boy and a girl', 'the male and female had a male child and a female child', 'the male and female had a male child and a girl', 'the male and woman had a boy and a female child', 'the male and woman had a boy and a girl', 'the male and woman had a male child and a female child', 'the male and woman had a male child and a girl', 'the man and female had a boy and a female child', 'the man and female had a boy and a girl', 'the man and female had a male child and a female child', 'the man and female had a male child and a girl', 'the man and woman had a boy and a female child', 'the man and woman had a boy and a girl', 'the man and woman had a male child and a female child', 'the man and woman had a male child and a girl']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"sad\",\"sorrowful\"],[\"joyful\",\"elated\"],[\"sorrowful\",\"mournful\"]], text = \"he was happy but then became sad\"",
        "output": "['he was elated but then became mournful', 'he was elated but then became sad', 'he was elated but then became sorrowful', 'he was happy but then became mournful', 'he was happy but then became sad', 'he was happy but then became sorrowful', 'he was joyful but then became mournful', 'he was joyful but then became sad', 'he was joyful but then became sorrowful']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"sad\",\"sorrowful\"],[\"angry\",\"irritated\"],[\"excited\",\"elated\"]], text = \"she was excited to meet him when he looked happy\"",
        "output": "['she was elated to meet him when he looked happy', 'she was elated to meet him when he looked joyful', 'she was excited to meet him when he looked happy', 'she was excited to meet him when he looked joyful']"
      },
      {
        "input": "synonyms = [[\"beautiful\",\"gorgeous\"],[\"beautiful\",\"stunning\"],[\"ugly\",\"hideous\"],[\"ugly\",\"repulsive\"]], text = \"The beautiful sunset was opposite the ugly storm clouds\"",
        "output": "['The beautiful sunset was opposite the hideous storm clouds', 'The beautiful sunset was opposite the repulsive storm clouds', 'The beautiful sunset was opposite the ugly storm clouds', 'The gorgeous sunset was opposite the hideous storm clouds', 'The gorgeous sunset was opposite the repulsive storm clouds', 'The gorgeous sunset was opposite the ugly storm clouds', 'The stunning sunset was opposite the hideous storm clouds', 'The stunning sunset was opposite the repulsive storm clouds', 'The stunning sunset was opposite the ugly storm clouds']"
      },
      {
        "input": "synonyms = [[\"cat\",\"kitten\"],[\"dog\",\"puppy\"],[\"animal\",\"beast\"]], text = \"the cat and the dog are animals\"",
        "output": "['the cat and the dog are animals', 'the cat and the puppy are animals', 'the kitten and the dog are animals', 'the kitten and the puppy are animals']"
      },
      {
        "input": "synonyms = [[\"smart\",\"intelligent\"],[\"smart\",\"clever\"],[\"dumb\",\"stupid\"],[\"dumb\",\"foolish\"]], text = \"The smart student solved the difficult problem easily\"",
        "output": "['The clever student solved the difficult problem easily', 'The intelligent student solved the difficult problem easily', 'The smart student solved the difficult problem easily']"
      },
      {
        "input": "synonyms = [[\"funny\",\"amusing\"],[\"serious\",\"grave\"]], text = \"the funny clown made everyone laugh at the serious ceremony\"",
        "output": "['the amusing clown made everyone laugh at the grave ceremony', 'the amusing clown made everyone laugh at the serious ceremony', 'the funny clown made everyone laugh at the grave ceremony', 'the funny clown made everyone laugh at the serious ceremony']"
      },
      {
        "input": "synonyms = [[\"happy\",\"blissful\"],[\"sad\",\"sorrowful\"],[\"angry\",\"wrathful\"]], text = \"she felt happy and blissful but became sad and sorrowful\"",
        "output": "['she felt blissful and blissful but became sad and sad', 'she felt blissful and blissful but became sad and sorrowful', 'she felt blissful and blissful but became sorrowful and sad', 'she felt blissful and blissful but became sorrowful and sorrowful', 'she felt blissful and happy but became sad and sad', 'she felt blissful and happy but became sad and sorrowful', 'she felt blissful and happy but became sorrowful and sad', 'she felt blissful and happy but became sorrowful and sorrowful', 'she felt happy and blissful but became sad and sad', 'she felt happy and blissful but became sad and sorrowful', 'she felt happy and blissful but became sorrowful and sad', 'she felt happy and blissful but became sorrowful and sorrowful', 'she felt happy and happy but became sad and sad', 'she felt happy and happy but became sad and sorrowful', 'she felt happy and happy but became sorrowful and sad', 'she felt happy and happy but became sorrowful and sorrowful']"
      },
      {
        "input": "synonyms = [[\"good\",\"great\"],[\"bad\",\"terrible\"],[\"good\",\"excellent\"]], text = \"the food was good but the service was bad\"",
        "output": "['the food was excellent but the service was bad', 'the food was excellent but the service was terrible', 'the food was good but the service was bad', 'the food was good but the service was terrible', 'the food was great but the service was bad', 'the food was great but the service was terrible']"
      },
      {
        "input": "synonyms = [[\"cold\",\"chilly\"],[\"warm\",\"hot\"]], text = \"the cold wind blew across the warm sand\"",
        "output": "['the chilly wind blew across the hot sand', 'the chilly wind blew across the warm sand', 'the cold wind blew across the hot sand', 'the cold wind blew across the warm sand']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"large\",\"massive\"],[\"small\",\"tiny\"],[\"tiny\",\"petite\"]], text = \"The big elephant was next to the small bird\"",
        "output": "['The big elephant was next to the petite bird', 'The big elephant was next to the small bird', 'The big elephant was next to the tiny bird', 'The large elephant was next to the petite bird', 'The large elephant was next to the small bird', 'The large elephant was next to the tiny bird', 'The massive elephant was next to the petite bird', 'The massive elephant was next to the small bird', 'The massive elephant was next to the tiny bird']"
      },
      {
        "input": "synonyms = [[\"fast\",\"swift\"],[\"slow\",\"lethargic\"],[\"tall\",\"high\"]], text = \"the tall man ran fast and the short one was slow\"",
        "output": "['the high man ran fast and the short one was lethargic', 'the high man ran fast and the short one was slow', 'the high man ran swift and the short one was lethargic', 'the high man ran swift and the short one was slow', 'the tall man ran fast and the short one was lethargic', 'the tall man ran fast and the short one was slow', 'the tall man ran swift and the short one was lethargic', 'the tall man ran swift and the short one was slow']"
      },
      {
        "input": "synonyms = [[\"fast\",\"quick\"],[\"quick\",\"swift\"],[\"slow\",\"sluggish\"]], text = \"he ran fast but the snail moved slow\"",
        "output": "['he ran fast but the snail moved slow', 'he ran fast but the snail moved sluggish', 'he ran quick but the snail moved slow', 'he ran quick but the snail moved sluggish', 'he ran swift but the snail moved slow', 'he ran swift but the snail moved sluggish']"
      },
      {
        "input": "synonyms = [[\"quick\",\"swift\"],[\"fast\",\"speedy\"],[\"swift\",\"speedy\"]], text = \"the quick brown fox jumps over the lazy dog\"",
        "output": "['the fast brown fox jumps over the lazy dog', 'the quick brown fox jumps over the lazy dog', 'the speedy brown fox jumps over the lazy dog', 'the swift brown fox jumps over the lazy dog']"
      },
      {
        "input": "synonyms = [[\"cat\",\"kitten\"],[\"dog\",\"puppy\"],[\"bird\",\"sparrow\"]], text = \"the cat and dog played with the bird\"",
        "output": "['the cat and dog played with the bird', 'the cat and dog played with the sparrow', 'the cat and puppy played with the bird', 'the cat and puppy played with the sparrow', 'the kitten and dog played with the bird', 'the kitten and dog played with the sparrow', 'the kitten and puppy played with the bird', 'the kitten and puppy played with the sparrow']"
      },
      {
        "input": "synonyms = [[\"cat\",\"feline\"],[\"dog\",\"canine\"],[\"bird\",\"avian\"],[\"fish\",\"aquatic\"]], text = \"The cat and the dog were playing with a bird and a fish\"",
        "output": "['The cat and the canine were playing with a avian and a aquatic', 'The cat and the canine were playing with a avian and a fish', 'The cat and the canine were playing with a bird and a aquatic', 'The cat and the canine were playing with a bird and a fish', 'The cat and the dog were playing with a avian and a aquatic', 'The cat and the dog were playing with a avian and a fish', 'The cat and the dog were playing with a bird and a aquatic', 'The cat and the dog were playing with a bird and a fish', 'The feline and the canine were playing with a avian and a aquatic', 'The feline and the canine were playing with a avian and a fish', 'The feline and the canine were playing with a bird and a aquatic', 'The feline and the canine were playing with a bird and a fish', 'The feline and the dog were playing with a avian and a aquatic', 'The feline and the dog were playing with a avian and a fish', 'The feline and the dog were playing with a bird and a aquatic', 'The feline and the dog were playing with a bird and a fish']"
      },
      {
        "input": "synonyms = [[\"beautiful\",\"pretty\"],[\"beautiful\",\"attractive\"],[\"ugly\",\"hideous\"],[\"ugly\",\"repulsive\"]], text = \"She thought the painting was beautiful, but he found it ugly\"",
        "output": "['She thought the painting was beautiful, but he found it hideous', 'She thought the painting was beautiful, but he found it repulsive', 'She thought the painting was beautiful, but he found it ugly']"
      },
      {
        "input": "synonyms = [[\"fast\",\"speedy\"],[\"slow\",\"languid\"]], text = \"the fast car was ahead of the slow truck on the highway\"",
        "output": "['the fast car was ahead of the languid truck on the highway', 'the fast car was ahead of the slow truck on the highway', 'the speedy car was ahead of the languid truck on the highway', 'the speedy car was ahead of the slow truck on the highway']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"joyful\",\"blissful\"],[\"blissful\",\"ecstatic\"]], text = \"she was happy and joyful when she heard the news\"",
        "output": "['she was blissful and blissful when she heard the news', 'she was blissful and ecstatic when she heard the news', 'she was blissful and happy when she heard the news', 'she was blissful and joyful when she heard the news', 'she was ecstatic and blissful when she heard the news', 'she was ecstatic and ecstatic when she heard the news', 'she was ecstatic and happy when she heard the news', 'she was ecstatic and joyful when she heard the news', 'she was happy and blissful when she heard the news', 'she was happy and ecstatic when she heard the news', 'she was happy and happy when she heard the news', 'she was happy and joyful when she heard the news', 'she was joyful and blissful when she heard the news', 'she was joyful and ecstatic when she heard the news', 'she was joyful and happy when she heard the news', 'she was joyful and joyful when she heard the news']"
      },
      {
        "input": "synonyms = [[\"good\",\"great\"],[\"bad\",\"terrible\"],[\"great\",\"excellent\"],[\"terrible\",\"awful\"]], text = \"he did a good job but she thought it was bad\"",
        "output": "['he did a excellent job but she thought it was awful', 'he did a excellent job but she thought it was bad', 'he did a excellent job but she thought it was terrible', 'he did a good job but she thought it was awful', 'he did a good job but she thought it was bad', 'he did a good job but she thought it was terrible', 'he did a great job but she thought it was awful', 'he did a great job but she thought it was bad', 'he did a great job but she thought it was terrible']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"joyful\",\"cheerful\"],[\"cheerful\",\"ecstatic\"],[\"ecstatic\",\"overjoyed\"],[\"overjoyed\",\"delighted\"]], text = \"She looked happy and delighted to see him\"",
        "output": "['She looked cheerful and cheerful to see him', 'She looked cheerful and delighted to see him', 'She looked cheerful and ecstatic to see him', 'She looked cheerful and happy to see him', 'She looked cheerful and joyful to see him', 'She looked cheerful and overjoyed to see him', 'She looked delighted and cheerful to see him', 'She looked delighted and delighted to see him', 'She looked delighted and ecstatic to see him', 'She looked delighted and happy to see him', 'She looked delighted and joyful to see him', 'She looked delighted and overjoyed to see him', 'She looked ecstatic and cheerful to see him', 'She looked ecstatic and delighted to see him', 'She looked ecstatic and ecstatic to see him', 'She looked ecstatic and happy to see him', 'She looked ecstatic and joyful to see him', 'She looked ecstatic and overjoyed to see him', 'She looked happy and cheerful to see him', 'She looked happy and delighted to see him', 'She looked happy and ecstatic to see him', 'She looked happy and happy to see him', 'She looked happy and joyful to see him', 'She looked happy and overjoyed to see him', 'She looked joyful and cheerful to see him', 'She looked joyful and delighted to see him', 'She looked joyful and ecstatic to see him', 'She looked joyful and happy to see him', 'She looked joyful and joyful to see him', 'She looked joyful and overjoyed to see him', 'She looked overjoyed and cheerful to see him', 'She looked overjoyed and delighted to see him', 'She looked overjoyed and ecstatic to see him', 'She looked overjoyed and happy to see him', 'She looked overjoyed and joyful to see him', 'She looked overjoyed and overjoyed to see him']"
      },
      {
        "input": "synonyms = [[\"good\",\"great\"],[\"bad\",\"terrible\"],[\"ugly\",\"hideous\"]], text = \"he thought the good dog was bad and the ugly cat was terrible\"",
        "output": "['he thought the good dog was bad and the hideous cat was bad', 'he thought the good dog was bad and the hideous cat was terrible', 'he thought the good dog was bad and the ugly cat was bad', 'he thought the good dog was bad and the ugly cat was terrible', 'he thought the good dog was terrible and the hideous cat was bad', 'he thought the good dog was terrible and the hideous cat was terrible', 'he thought the good dog was terrible and the ugly cat was bad', 'he thought the good dog was terrible and the ugly cat was terrible', 'he thought the great dog was bad and the hideous cat was bad', 'he thought the great dog was bad and the hideous cat was terrible', 'he thought the great dog was bad and the ugly cat was bad', 'he thought the great dog was bad and the ugly cat was terrible', 'he thought the great dog was terrible and the hideous cat was bad', 'he thought the great dog was terrible and the hideous cat was terrible', 'he thought the great dog was terrible and the ugly cat was bad', 'he thought the great dog was terrible and the ugly cat was terrible']"
      },
      {
        "input": "synonyms = [[\"quick\",\"swift\"],[\"fast\",\"rapid\"],[\"swift\",\"rapid\"]], text = \"the quick brown fox jumps over the lazy dog\"",
        "output": "['the fast brown fox jumps over the lazy dog', 'the quick brown fox jumps over the lazy dog', 'the rapid brown fox jumps over the lazy dog', 'the swift brown fox jumps over the lazy dog']"
      },
      {
        "input": "synonyms = [[\"fast\",\"quick\"],[\"slow\",\"lethargic\"],[\"happy\",\"joyful\"],[\"sad\",\"melancholy\"]], text = \"The quick brown fox jumps over the lazy dog\"",
        "output": "['The fast brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"large\",\"enormous\"],[\"enormous\",\"gigantic\"]], text = \"the big red balloon was much larger than the enormous blue one\"",
        "output": "['the big red balloon was much larger than the big blue one', 'the big red balloon was much larger than the enormous blue one', 'the big red balloon was much larger than the gigantic blue one', 'the big red balloon was much larger than the large blue one', 'the enormous red balloon was much larger than the big blue one', 'the enormous red balloon was much larger than the enormous blue one', 'the enormous red balloon was much larger than the gigantic blue one', 'the enormous red balloon was much larger than the large blue one', 'the gigantic red balloon was much larger than the big blue one', 'the gigantic red balloon was much larger than the enormous blue one', 'the gigantic red balloon was much larger than the gigantic blue one', 'the gigantic red balloon was much larger than the large blue one', 'the large red balloon was much larger than the big blue one', 'the large red balloon was much larger than the enormous blue one', 'the large red balloon was much larger than the gigantic blue one', 'the large red balloon was much larger than the large blue one']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"sad\",\"melancholy\"],[\"angry\",\"furious\"]], text = \"she was happy but her sister was sad and their brother was angry\"",
        "output": "['she was happy but her sister was melancholy and their brother was angry', 'she was happy but her sister was melancholy and their brother was furious', 'she was happy but her sister was sad and their brother was angry', 'she was happy but her sister was sad and their brother was furious', 'she was joyful but her sister was melancholy and their brother was angry', 'she was joyful but her sister was melancholy and their brother was furious', 'she was joyful but her sister was sad and their brother was angry', 'she was joyful but her sister was sad and their brother was furious']"
      },
      {
        "input": "synonyms = [[\"hot\",\"warm\"],[\"cold\",\"chilly\"],[\"warm\",\"hot\"],[\"chilly\",\"cold\"]], text = \"It was a hot day, but she preferred to be cold\"",
        "output": "['It was a hot day, but she preferred to be chilly', 'It was a hot day, but she preferred to be cold', 'It was a warm day, but she preferred to be chilly', 'It was a warm day, but she preferred to be cold']"
      },
      {
        "input": "synonyms = [[\"red\",\"scarlet\"],[\"blue\",\"cobalt\"],[\"green\",\"emerald\"]], text = \"the red apple is next to the blue sky and green grass\"",
        "output": "['the red apple is next to the blue sky and emerald grass', 'the red apple is next to the blue sky and green grass', 'the red apple is next to the cobalt sky and emerald grass', 'the red apple is next to the cobalt sky and green grass', 'the scarlet apple is next to the blue sky and emerald grass', 'the scarlet apple is next to the blue sky and green grass', 'the scarlet apple is next to the cobalt sky and emerald grass', 'the scarlet apple is next to the cobalt sky and green grass']"
      },
      {
        "input": "synonyms = [[\"beautiful\",\"pretty\"],[\"ugly\",\"hideous\"],[\"pretty\",\"attractive\"],[\"hideous\",\"repulsive\"]], text = \"she was a beautiful woman with ugly eyes\"",
        "output": "['she was a attractive woman with hideous eyes', 'she was a attractive woman with repulsive eyes', 'she was a attractive woman with ugly eyes', 'she was a beautiful woman with hideous eyes', 'she was a beautiful woman with repulsive eyes', 'she was a beautiful woman with ugly eyes', 'she was a pretty woman with hideous eyes', 'she was a pretty woman with repulsive eyes', 'she was a pretty woman with ugly eyes']"
      },
      {
        "input": "synonyms = [[\"fast\",\"swift\"],[\"slow\",\"lethargic\"],[\"tall\",\"high\"],[\"big\",\"large\"],[\"small\",\"tiny\"]], text = \"the small fast cat chased the big slow dog\"",
        "output": "['the small fast cat chased the big lethargic dog', 'the small fast cat chased the big slow dog', 'the small fast cat chased the large lethargic dog', 'the small fast cat chased the large slow dog', 'the small swift cat chased the big lethargic dog', 'the small swift cat chased the big slow dog', 'the small swift cat chased the large lethargic dog', 'the small swift cat chased the large slow dog', 'the tiny fast cat chased the big lethargic dog', 'the tiny fast cat chased the big slow dog', 'the tiny fast cat chased the large lethargic dog', 'the tiny fast cat chased the large slow dog', 'the tiny swift cat chased the big lethargic dog', 'the tiny swift cat chased the big slow dog', 'the tiny swift cat chased the large lethargic dog', 'the tiny swift cat chased the large slow dog']"
      },
      {
        "input": "synonyms = [[\"fast\",\"quick\"],[\"fast\",\"swift\"],[\"quick\",\"swift\"]], text = \"The fast brown fox jumps over the lazy dog\"",
        "output": "['The fast brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog', 'The swift brown fox jumps over the lazy dog']"
      },
      {
        "input": "synonyms = [[\"car\",\"automobile\"],[\"car\",\"vehicle\"],[\"bike\",\"bicycle\"],[\"bike\",\"cycle\"]], text = \"I bought a new car and a bike for my weekend rides\"",
        "output": "['I bought a new automobile and a bicycle for my weekend rides', 'I bought a new automobile and a bike for my weekend rides', 'I bought a new automobile and a cycle for my weekend rides', 'I bought a new car and a bicycle for my weekend rides', 'I bought a new car and a bike for my weekend rides', 'I bought a new car and a cycle for my weekend rides', 'I bought a new vehicle and a bicycle for my weekend rides', 'I bought a new vehicle and a bike for my weekend rides', 'I bought a new vehicle and a cycle for my weekend rides']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"joyful\",\"ecstatic\"],[\"sad\",\"sorrowful\"],[\"sorrowful\",\"melancholic\"]], text = \"I am happy to see you, but yesterday I was sad\"",
        "output": "['I am ecstatic to see you, but yesterday I was melancholic', 'I am ecstatic to see you, but yesterday I was sad', 'I am ecstatic to see you, but yesterday I was sorrowful', 'I am happy to see you, but yesterday I was melancholic', 'I am happy to see you, but yesterday I was sad', 'I am happy to see you, but yesterday I was sorrowful', 'I am joyful to see you, but yesterday I was melancholic', 'I am joyful to see you, but yesterday I was sad', 'I am joyful to see you, but yesterday I was sorrowful']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"big\",\"huge\"],[\"small\",\"tiny\"],[\"small\",\"little\"]], text = \"The big red ball was next to the small blue car\"",
        "output": "['The big red ball was next to the little blue car', 'The big red ball was next to the small blue car', 'The big red ball was next to the tiny blue car', 'The huge red ball was next to the little blue car', 'The huge red ball was next to the small blue car', 'The huge red ball was next to the tiny blue car', 'The large red ball was next to the little blue car', 'The large red ball was next to the small blue car', 'The large red ball was next to the tiny blue car']"
      },
      {
        "input": "synonyms = [[\"cat\",\"kitty\"],[\"dog\",\"puppy\"],[\"bird\",\"fowl\"]], text = \"the cat chased the bird and the dog\"",
        "output": "['the cat chased the bird and the dog', 'the cat chased the bird and the puppy', 'the cat chased the fowl and the dog', 'the cat chased the fowl and the puppy', 'the kitty chased the bird and the dog', 'the kitty chased the bird and the puppy', 'the kitty chased the fowl and the dog', 'the kitty chased the fowl and the puppy']"
      },
      {
        "input": "synonyms = [[\"fast\",\"swift\"],[\"slow\",\"lethargic\"],[\"tall\",\"high\"]], text = \"the fast runner was tall and the slow walker was short\"",
        "output": "['the fast runner was high and the lethargic walker was short', 'the fast runner was high and the slow walker was short', 'the fast runner was tall and the lethargic walker was short', 'the fast runner was tall and the slow walker was short', 'the swift runner was high and the lethargic walker was short', 'the swift runner was high and the slow walker was short', 'the swift runner was tall and the lethargic walker was short', 'the swift runner was tall and the slow walker was short']"
      },
      {
        "input": "synonyms = [[\"car\",\"automobile\"],[\"vehicle\",\"car\"],[\"truck\",\"vehicle\"]], text = \"he drove the car to the store in his truck\"",
        "output": "['he drove the automobile to the store in his automobile', 'he drove the automobile to the store in his car', 'he drove the automobile to the store in his truck', 'he drove the automobile to the store in his vehicle', 'he drove the car to the store in his automobile', 'he drove the car to the store in his car', 'he drove the car to the store in his truck', 'he drove the car to the store in his vehicle', 'he drove the truck to the store in his automobile', 'he drove the truck to the store in his car', 'he drove the truck to the store in his truck', 'he drove the truck to the store in his vehicle', 'he drove the vehicle to the store in his automobile', 'he drove the vehicle to the store in his car', 'he drove the vehicle to the store in his truck', 'he drove the vehicle to the store in his vehicle']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"joyful\",\"delighted\"],[\"sad\",\"sorrowful\"]], text = \"he was happy to see her but sad to leave\"",
        "output": "['he was delighted to see her but sad to leave', 'he was delighted to see her but sorrowful to leave', 'he was happy to see her but sad to leave', 'he was happy to see her but sorrowful to leave', 'he was joyful to see her but sad to leave', 'he was joyful to see her but sorrowful to leave']"
      },
      {
        "input": "synonyms = [[\"fast\",\"quick\"],[\"quick\",\"swift\"],[\"swift\",\"rapid\"],[\"rapid\",\"speedy\"]], text = \"The fast car was overtaken by the quick motorcycle\"",
        "output": "['The fast car was overtaken by the fast motorcycle', 'The fast car was overtaken by the quick motorcycle', 'The fast car was overtaken by the rapid motorcycle', 'The fast car was overtaken by the speedy motorcycle', 'The fast car was overtaken by the swift motorcycle', 'The quick car was overtaken by the fast motorcycle', 'The quick car was overtaken by the quick motorcycle', 'The quick car was overtaken by the rapid motorcycle', 'The quick car was overtaken by the speedy motorcycle', 'The quick car was overtaken by the swift motorcycle', 'The rapid car was overtaken by the fast motorcycle', 'The rapid car was overtaken by the quick motorcycle', 'The rapid car was overtaken by the rapid motorcycle', 'The rapid car was overtaken by the speedy motorcycle', 'The rapid car was overtaken by the swift motorcycle', 'The speedy car was overtaken by the fast motorcycle', 'The speedy car was overtaken by the quick motorcycle', 'The speedy car was overtaken by the rapid motorcycle', 'The speedy car was overtaken by the speedy motorcycle', 'The speedy car was overtaken by the swift motorcycle', 'The swift car was overtaken by the fast motorcycle', 'The swift car was overtaken by the quick motorcycle', 'The swift car was overtaken by the rapid motorcycle', 'The swift car was overtaken by the speedy motorcycle', 'The swift car was overtaken by the swift motorcycle']"
      },
      {
        "input": "synonyms = [[\"fast\",\"quick\"],[\"quick\",\"swift\"],[\"swift\",\"nimble\"],[\"nimble\",\"agile\"]], text = \"The quick fox was as swift as a nimble bird\"",
        "output": "['The agile fox was as agile as a agile bird', 'The agile fox was as agile as a fast bird', 'The agile fox was as agile as a nimble bird', 'The agile fox was as agile as a quick bird', 'The agile fox was as agile as a swift bird', 'The agile fox was as fast as a agile bird', 'The agile fox was as fast as a fast bird', 'The agile fox was as fast as a nimble bird', 'The agile fox was as fast as a quick bird', 'The agile fox was as fast as a swift bird', 'The agile fox was as nimble as a agile bird', 'The agile fox was as nimble as a fast bird', 'The agile fox was as nimble as a nimble bird', 'The agile fox was as nimble as a quick bird', 'The agile fox was as nimble as a swift bird', 'The agile fox was as quick as a agile bird', 'The agile fox was as quick as a fast bird', 'The agile fox was as quick as a nimble bird', 'The agile fox was as quick as a quick bird', 'The agile fox was as quick as a swift bird', 'The agile fox was as swift as a agile bird', 'The agile fox was as swift as a fast bird', 'The agile fox was as swift as a nimble bird', 'The agile fox was as swift as a quick bird', 'The agile fox was as swift as a swift bird', 'The fast fox was as agile as a agile bird', 'The fast fox was as agile as a fast bird', 'The fast fox was as agile as a nimble bird', 'The fast fox was as agile as a quick bird', 'The fast fox was as agile as a swift bird', 'The fast fox was as fast as a agile bird', 'The fast fox was as fast as a fast bird', 'The fast fox was as fast as a nimble bird', 'The fast fox was as fast as a quick bird', 'The fast fox was as fast as a swift bird', 'The fast fox was as nimble as a agile bird', 'The fast fox was as nimble as a fast bird', 'The fast fox was as nimble as a nimble bird', 'The fast fox was as nimble as a quick bird', 'The fast fox was as nimble as a swift bird', 'The fast fox was as quick as a agile bird', 'The fast fox was as quick as a fast bird', 'The fast fox was as quick as a nimble bird', 'The fast fox was as quick as a quick bird', 'The fast fox was as quick as a swift bird', 'The fast fox was as swift as a agile bird', 'The fast fox was as swift as a fast bird', 'The fast fox was as swift as a nimble bird', 'The fast fox was as swift as a quick bird', 'The fast fox was as swift as a swift bird', 'The nimble fox was as agile as a agile bird', 'The nimble fox was as agile as a fast bird', 'The nimble fox was as agile as a nimble bird', 'The nimble fox was as agile as a quick bird', 'The nimble fox was as agile as a swift bird', 'The nimble fox was as fast as a agile bird', 'The nimble fox was as fast as a fast bird', 'The nimble fox was as fast as a nimble bird', 'The nimble fox was as fast as a quick bird', 'The nimble fox was as fast as a swift bird', 'The nimble fox was as nimble as a agile bird', 'The nimble fox was as nimble as a fast bird', 'The nimble fox was as nimble as a nimble bird', 'The nimble fox was as nimble as a quick bird', 'The nimble fox was as nimble as a swift bird', 'The nimble fox was as quick as a agile bird', 'The nimble fox was as quick as a fast bird', 'The nimble fox was as quick as a nimble bird', 'The nimble fox was as quick as a quick bird', 'The nimble fox was as quick as a swift bird', 'The nimble fox was as swift as a agile bird', 'The nimble fox was as swift as a fast bird', 'The nimble fox was as swift as a nimble bird', 'The nimble fox was as swift as a quick bird', 'The nimble fox was as swift as a swift bird', 'The quick fox was as agile as a agile bird', 'The quick fox was as agile as a fast bird', 'The quick fox was as agile as a nimble bird', 'The quick fox was as agile as a quick bird', 'The quick fox was as agile as a swift bird', 'The quick fox was as fast as a agile bird', 'The quick fox was as fast as a fast bird', 'The quick fox was as fast as a nimble bird', 'The quick fox was as fast as a quick bird', 'The quick fox was as fast as a swift bird', 'The quick fox was as nimble as a agile bird', 'The quick fox was as nimble as a fast bird', 'The quick fox was as nimble as a nimble bird', 'The quick fox was as nimble as a quick bird', 'The quick fox was as nimble as a swift bird', 'The quick fox was as quick as a agile bird', 'The quick fox was as quick as a fast bird', 'The quick fox was as quick as a nimble bird', 'The quick fox was as quick as a quick bird', 'The quick fox was as quick as a swift bird', 'The quick fox was as swift as a agile bird', 'The quick fox was as swift as a fast bird', 'The quick fox was as swift as a nimble bird', 'The quick fox was as swift as a quick bird', 'The quick fox was as swift as a swift bird', 'The swift fox was as agile as a agile bird', 'The swift fox was as agile as a fast bird', 'The swift fox was as agile as a nimble bird', 'The swift fox was as agile as a quick bird', 'The swift fox was as agile as a swift bird', 'The swift fox was as fast as a agile bird', 'The swift fox was as fast as a fast bird', 'The swift fox was as fast as a nimble bird', 'The swift fox was as fast as a quick bird', 'The swift fox was as fast as a swift bird', 'The swift fox was as nimble as a agile bird', 'The swift fox was as nimble as a fast bird', 'The swift fox was as nimble as a nimble bird', 'The swift fox was as nimble as a quick bird', 'The swift fox was as nimble as a swift bird', 'The swift fox was as quick as a agile bird', 'The swift fox was as quick as a fast bird', 'The swift fox was as quick as a nimble bird', 'The swift fox was as quick as a quick bird', 'The swift fox was as quick as a swift bird', 'The swift fox was as swift as a agile bird', 'The swift fox was as swift as a fast bird', 'The swift fox was as swift as a nimble bird', 'The swift fox was as swift as a quick bird', 'The swift fox was as swift as a swift bird']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"sad\",\"sorrowful\"],[\"angry\",\"irritated\"]], text = \"he was angry when he saw her sad face\"",
        "output": "['he was angry when he saw her sad face', 'he was angry when he saw her sorrowful face', 'he was irritated when he saw her sad face', 'he was irritated when he saw her sorrowful face']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"sad\",\"sorrowful\"]], text = \"they were happy but then became sad after the long journey\"",
        "output": "['they were happy but then became sad after the long journey', 'they were happy but then became sorrowful after the long journey', 'they were joyful but then became sad after the long journey', 'they were joyful but then became sorrowful after the long journey']"
      },
      {
        "input": "synonyms = [[\"white\",\"snowy\"],[\"black\",\"pitch\"],[\"gray\",\"ashen\"]], text = \"the white snow fell on the black roof and made it gray\"",
        "output": "['the snowy snow fell on the black roof and made it ashen', 'the snowy snow fell on the black roof and made it gray', 'the snowy snow fell on the pitch roof and made it ashen', 'the snowy snow fell on the pitch roof and made it gray', 'the white snow fell on the black roof and made it ashen', 'the white snow fell on the black roof and made it gray', 'the white snow fell on the pitch roof and made it ashen', 'the white snow fell on the pitch roof and made it gray']"
      },
      {
        "input": "synonyms = [[\"new\",\"fresh\"],[\"old\",\"ancient\"],[\"young\",\"juvenile\"]], text = \"the young boy was new to the old town\"",
        "output": "['the juvenile boy was fresh to the ancient town', 'the juvenile boy was fresh to the old town', 'the juvenile boy was new to the ancient town', 'the juvenile boy was new to the old town', 'the young boy was fresh to the ancient town', 'the young boy was fresh to the old town', 'the young boy was new to the ancient town', 'the young boy was new to the old town']"
      },
      {
        "input": "synonyms = [[\"hot\",\"warm\"],[\"cold\",\"chilly\"],[\"warm\",\"temperate\"]], text = \"it was hot outside but inside it was cold\"",
        "output": "['it was hot outside but inside it was chilly', 'it was hot outside but inside it was cold', 'it was temperate outside but inside it was chilly', 'it was temperate outside but inside it was cold', 'it was warm outside but inside it was chilly', 'it was warm outside but inside it was cold']"
      },
      {
        "input": "synonyms = [[\"beautiful\",\"pretty\"],[\"ugly\",\"hideous\"],[\"attractive\",\"handsome\"]], text = \"she is beautiful and attractive but never ugly\"",
        "output": "['she is beautiful and attractive but never hideous', 'she is beautiful and attractive but never ugly', 'she is beautiful and handsome but never hideous', 'she is beautiful and handsome but never ugly', 'she is pretty and attractive but never hideous', 'she is pretty and attractive but never ugly', 'she is pretty and handsome but never hideous', 'she is pretty and handsome but never ugly']"
      },
      {
        "input": "synonyms = [[\"old\",\"ancient\"],[\"new\",\"modern\"],[\"ancient\",\"vintage\"],[\"modern\",\"contemporary\"]], text = \"the old castle is surrounded by new buildings\"",
        "output": "['the ancient castle is surrounded by contemporary buildings', 'the ancient castle is surrounded by modern buildings', 'the ancient castle is surrounded by new buildings', 'the old castle is surrounded by contemporary buildings', 'the old castle is surrounded by modern buildings', 'the old castle is surrounded by new buildings', 'the vintage castle is surrounded by contemporary buildings', 'the vintage castle is surrounded by modern buildings', 'the vintage castle is surrounded by new buildings']"
      },
      {
        "input": "synonyms = [[\"strong\",\"powerful\"],[\"strong\",\"mighty\"],[\"weak\",\"feeble\"],[\"weak\",\"timid\"]], text = \"The strong wind blew the weak tree\"",
        "output": "['The mighty wind blew the feeble tree', 'The mighty wind blew the timid tree', 'The mighty wind blew the weak tree', 'The powerful wind blew the feeble tree', 'The powerful wind blew the timid tree', 'The powerful wind blew the weak tree', 'The strong wind blew the feeble tree', 'The strong wind blew the timid tree', 'The strong wind blew the weak tree']"
      },
      {
        "input": "synonyms = [[\"cheap\",\"inexpensive\"],[\"expensive\",\"costly\"],[\"good\",\"excellent\"],[\"bad\",\"poor\"]], text = \"The cheap and bad food was replaced with expensive and good cuisine\"",
        "output": "['The cheap and bad food was replaced with costly and excellent cuisine', 'The cheap and bad food was replaced with costly and good cuisine', 'The cheap and bad food was replaced with expensive and excellent cuisine', 'The cheap and bad food was replaced with expensive and good cuisine', 'The cheap and poor food was replaced with costly and excellent cuisine', 'The cheap and poor food was replaced with costly and good cuisine', 'The cheap and poor food was replaced with expensive and excellent cuisine', 'The cheap and poor food was replaced with expensive and good cuisine', 'The inexpensive and bad food was replaced with costly and excellent cuisine', 'The inexpensive and bad food was replaced with costly and good cuisine', 'The inexpensive and bad food was replaced with expensive and excellent cuisine', 'The inexpensive and bad food was replaced with expensive and good cuisine', 'The inexpensive and poor food was replaced with costly and excellent cuisine', 'The inexpensive and poor food was replaced with costly and good cuisine', 'The inexpensive and poor food was replaced with expensive and excellent cuisine', 'The inexpensive and poor food was replaced with expensive and good cuisine']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"],[\"huge\",\"massive\"]], text = \"the small cat sat on the big mat near the huge tree\"",
        "output": "['the small cat sat on the big mat near the huge tree', 'the small cat sat on the big mat near the massive tree', 'the small cat sat on the large mat near the huge tree', 'the small cat sat on the large mat near the massive tree', 'the tiny cat sat on the big mat near the huge tree', 'the tiny cat sat on the big mat near the massive tree', 'the tiny cat sat on the large mat near the huge tree', 'the tiny cat sat on the large mat near the massive tree']"
      },
      {
        "input": "synonyms = [[\"white\",\"snowy\"],[\"black\",\"pitch\"]], text = \"the white cat sat on the black roof\"",
        "output": "['the snowy cat sat on the black roof', 'the snowy cat sat on the pitch roof', 'the white cat sat on the black roof', 'the white cat sat on the pitch roof']"
      },
      {
        "input": "synonyms = [[\"fast\",\"quick\"],[\"quick\",\"swift\"],[\"swift\",\"speedy\"],[\"speedy\",\"rapid\"],[\"rapid\",\"swiftly\"]], text = \"the quick brown fox was fast and swift\"",
        "output": "['the fast brown fox was fast and fast', 'the fast brown fox was fast and quick', 'the fast brown fox was fast and rapid', 'the fast brown fox was fast and speedy', 'the fast brown fox was fast and swift', 'the fast brown fox was fast and swiftly', 'the fast brown fox was quick and fast', 'the fast brown fox was quick and quick', 'the fast brown fox was quick and rapid', 'the fast brown fox was quick and speedy', 'the fast brown fox was quick and swift', 'the fast brown fox was quick and swiftly', 'the fast brown fox was rapid and fast', 'the fast brown fox was rapid and quick', 'the fast brown fox was rapid and rapid', 'the fast brown fox was rapid and speedy', 'the fast brown fox was rapid and swift', 'the fast brown fox was rapid and swiftly', 'the fast brown fox was speedy and fast', 'the fast brown fox was speedy and quick', 'the fast brown fox was speedy and rapid', 'the fast brown fox was speedy and speedy', 'the fast brown fox was speedy and swift', 'the fast brown fox was speedy and swiftly', 'the fast brown fox was swift and fast', 'the fast brown fox was swift and quick', 'the fast brown fox was swift and rapid', 'the fast brown fox was swift and speedy', 'the fast brown fox was swift and swift', 'the fast brown fox was swift and swiftly', 'the fast brown fox was swiftly and fast', 'the fast brown fox was swiftly and quick', 'the fast brown fox was swiftly and rapid', 'the fast brown fox was swiftly and speedy', 'the fast brown fox was swiftly and swift', 'the fast brown fox was swiftly and swiftly', 'the quick brown fox was fast and fast', 'the quick brown fox was fast and quick', 'the quick brown fox was fast and rapid', 'the quick brown fox was fast and speedy', 'the quick brown fox was fast and swift', 'the quick brown fox was fast and swiftly', 'the quick brown fox was quick and fast', 'the quick brown fox was quick and quick', 'the quick brown fox was quick and rapid', 'the quick brown fox was quick and speedy', 'the quick brown fox was quick and swift', 'the quick brown fox was quick and swiftly', 'the quick brown fox was rapid and fast', 'the quick brown fox was rapid and quick', 'the quick brown fox was rapid and rapid', 'the quick brown fox was rapid and speedy', 'the quick brown fox was rapid and swift', 'the quick brown fox was rapid and swiftly', 'the quick brown fox was speedy and fast', 'the quick brown fox was speedy and quick', 'the quick brown fox was speedy and rapid', 'the quick brown fox was speedy and speedy', 'the quick brown fox was speedy and swift', 'the quick brown fox was speedy and swiftly', 'the quick brown fox was swift and fast', 'the quick brown fox was swift and quick', 'the quick brown fox was swift and rapid', 'the quick brown fox was swift and speedy', 'the quick brown fox was swift and swift', 'the quick brown fox was swift and swiftly', 'the quick brown fox was swiftly and fast', 'the quick brown fox was swiftly and quick', 'the quick brown fox was swiftly and rapid', 'the quick brown fox was swiftly and speedy', 'the quick brown fox was swiftly and swift', 'the quick brown fox was swiftly and swiftly', 'the rapid brown fox was fast and fast', 'the rapid brown fox was fast and quick', 'the rapid brown fox was fast and rapid', 'the rapid brown fox was fast and speedy', 'the rapid brown fox was fast and swift', 'the rapid brown fox was fast and swiftly', 'the rapid brown fox was quick and fast', 'the rapid brown fox was quick and quick', 'the rapid brown fox was quick and rapid', 'the rapid brown fox was quick and speedy', 'the rapid brown fox was quick and swift', 'the rapid brown fox was quick and swiftly', 'the rapid brown fox was rapid and fast', 'the rapid brown fox was rapid and quick', 'the rapid brown fox was rapid and rapid', 'the rapid brown fox was rapid and speedy', 'the rapid brown fox was rapid and swift', 'the rapid brown fox was rapid and swiftly', 'the rapid brown fox was speedy and fast', 'the rapid brown fox was speedy and quick', 'the rapid brown fox was speedy and rapid', 'the rapid brown fox was speedy and speedy', 'the rapid brown fox was speedy and swift', 'the rapid brown fox was speedy and swiftly', 'the rapid brown fox was swift and fast', 'the rapid brown fox was swift and quick', 'the rapid brown fox was swift and rapid', 'the rapid brown fox was swift and speedy', 'the rapid brown fox was swift and swift', 'the rapid brown fox was swift and swiftly', 'the rapid brown fox was swiftly and fast', 'the rapid brown fox was swiftly and quick', 'the rapid brown fox was swiftly and rapid', 'the rapid brown fox was swiftly and speedy', 'the rapid brown fox was swiftly and swift', 'the rapid brown fox was swiftly and swiftly', 'the speedy brown fox was fast and fast', 'the speedy brown fox was fast and quick', 'the speedy brown fox was fast and rapid', 'the speedy brown fox was fast and speedy', 'the speedy brown fox was fast and swift', 'the speedy brown fox was fast and swiftly', 'the speedy brown fox was quick and fast', 'the speedy brown fox was quick and quick', 'the speedy brown fox was quick and rapid', 'the speedy brown fox was quick and speedy', 'the speedy brown fox was quick and swift', 'the speedy brown fox was quick and swiftly', 'the speedy brown fox was rapid and fast', 'the speedy brown fox was rapid and quick', 'the speedy brown fox was rapid and rapid', 'the speedy brown fox was rapid and speedy', 'the speedy brown fox was rapid and swift', 'the speedy brown fox was rapid and swiftly', 'the speedy brown fox was speedy and fast', 'the speedy brown fox was speedy and quick', 'the speedy brown fox was speedy and rapid', 'the speedy brown fox was speedy and speedy', 'the speedy brown fox was speedy and swift', 'the speedy brown fox was speedy and swiftly', 'the speedy brown fox was swift and fast', 'the speedy brown fox was swift and quick', 'the speedy brown fox was swift and rapid', 'the speedy brown fox was swift and speedy', 'the speedy brown fox was swift and swift', 'the speedy brown fox was swift and swiftly', 'the speedy brown fox was swiftly and fast', 'the speedy brown fox was swiftly and quick', 'the speedy brown fox was swiftly and rapid', 'the speedy brown fox was swiftly and speedy', 'the speedy brown fox was swiftly and swift', 'the speedy brown fox was swiftly and swiftly', 'the swift brown fox was fast and fast', 'the swift brown fox was fast and quick', 'the swift brown fox was fast and rapid', 'the swift brown fox was fast and speedy', 'the swift brown fox was fast and swift', 'the swift brown fox was fast and swiftly', 'the swift brown fox was quick and fast', 'the swift brown fox was quick and quick', 'the swift brown fox was quick and rapid', 'the swift brown fox was quick and speedy', 'the swift brown fox was quick and swift', 'the swift brown fox was quick and swiftly', 'the swift brown fox was rapid and fast', 'the swift brown fox was rapid and quick', 'the swift brown fox was rapid and rapid', 'the swift brown fox was rapid and speedy', 'the swift brown fox was rapid and swift', 'the swift brown fox was rapid and swiftly', 'the swift brown fox was speedy and fast', 'the swift brown fox was speedy and quick', 'the swift brown fox was speedy and rapid', 'the swift brown fox was speedy and speedy', 'the swift brown fox was speedy and swift', 'the swift brown fox was speedy and swiftly', 'the swift brown fox was swift and fast', 'the swift brown fox was swift and quick', 'the swift brown fox was swift and rapid', 'the swift brown fox was swift and speedy', 'the swift brown fox was swift and swift', 'the swift brown fox was swift and swiftly', 'the swift brown fox was swiftly and fast', 'the swift brown fox was swiftly and quick', 'the swift brown fox was swiftly and rapid', 'the swift brown fox was swiftly and speedy', 'the swift brown fox was swiftly and swift', 'the swift brown fox was swiftly and swiftly', 'the swiftly brown fox was fast and fast', 'the swiftly brown fox was fast and quick', 'the swiftly brown fox was fast and rapid', 'the swiftly brown fox was fast and speedy', 'the swiftly brown fox was fast and swift', 'the swiftly brown fox was fast and swiftly', 'the swiftly brown fox was quick and fast', 'the swiftly brown fox was quick and quick', 'the swiftly brown fox was quick and rapid', 'the swiftly brown fox was quick and speedy', 'the swiftly brown fox was quick and swift', 'the swiftly brown fox was quick and swiftly', 'the swiftly brown fox was rapid and fast', 'the swiftly brown fox was rapid and quick', 'the swiftly brown fox was rapid and rapid', 'the swiftly brown fox was rapid and speedy', 'the swiftly brown fox was rapid and swift', 'the swiftly brown fox was rapid and swiftly', 'the swiftly brown fox was speedy and fast', 'the swiftly brown fox was speedy and quick', 'the swiftly brown fox was speedy and rapid', 'the swiftly brown fox was speedy and speedy', 'the swiftly brown fox was speedy and swift', 'the swiftly brown fox was speedy and swiftly', 'the swiftly brown fox was swift and fast', 'the swiftly brown fox was swift and quick', 'the swiftly brown fox was swift and rapid', 'the swiftly brown fox was swift and speedy', 'the swiftly brown fox was swift and swift', 'the swiftly brown fox was swift and swiftly', 'the swiftly brown fox was swiftly and fast', 'the swiftly brown fox was swiftly and quick', 'the swiftly brown fox was swiftly and rapid', 'the swiftly brown fox was swiftly and speedy', 'the swiftly brown fox was swiftly and swift', 'the swiftly brown fox was swiftly and swiftly']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"],[\"red\",\"scarlet\"],[\"blue\",\"cobalt\"]], text = \"the small red ball is inside the big blue box\"",
        "output": "['the small red ball is inside the big blue box', 'the small red ball is inside the big cobalt box', 'the small red ball is inside the large blue box', 'the small red ball is inside the large cobalt box', 'the small scarlet ball is inside the big blue box', 'the small scarlet ball is inside the big cobalt box', 'the small scarlet ball is inside the large blue box', 'the small scarlet ball is inside the large cobalt box', 'the tiny red ball is inside the big blue box', 'the tiny red ball is inside the big cobalt box', 'the tiny red ball is inside the large blue box', 'the tiny red ball is inside the large cobalt box', 'the tiny scarlet ball is inside the big blue box', 'the tiny scarlet ball is inside the big cobalt box', 'the tiny scarlet ball is inside the large blue box', 'the tiny scarlet ball is inside the large cobalt box']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"big\",\"huge\"],[\"large\",\"enormous\"]], text = \"the big red ball was larger than the small green ball\"",
        "output": "['the big red ball was larger than the small green ball', 'the enormous red ball was larger than the small green ball', 'the huge red ball was larger than the small green ball', 'the large red ball was larger than the small green ball']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"sad\",\"melancholy\"],[\"angry\",\"irate\"]], text = \"she was happy but then became sad and finally angry\"",
        "output": "['she was happy but then became melancholy and finally angry', 'she was happy but then became melancholy and finally irate', 'she was happy but then became sad and finally angry', 'she was happy but then became sad and finally irate', 'she was joyful but then became melancholy and finally angry', 'she was joyful but then became melancholy and finally irate', 'she was joyful but then became sad and finally angry', 'she was joyful but then became sad and finally irate']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"],[\"large\",\"huge\"],[\"tiny\",\"petite\"]], text = \"the big red ball is next to the small blue box\"",
        "output": "['the big red ball is next to the petite blue box', 'the big red ball is next to the small blue box', 'the big red ball is next to the tiny blue box', 'the huge red ball is next to the petite blue box', 'the huge red ball is next to the small blue box', 'the huge red ball is next to the tiny blue box', 'the large red ball is next to the petite blue box', 'the large red ball is next to the small blue box', 'the large red ball is next to the tiny blue box']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"joyful\",\"blissful\"],[\"sad\",\"sorrowful\"],[\"sorrowful\",\"mourning\"]], text = \"The happy family was sad to leave\"",
        "output": "['The blissful family was mourning to leave', 'The blissful family was sad to leave', 'The blissful family was sorrowful to leave', 'The happy family was mourning to leave', 'The happy family was sad to leave', 'The happy family was sorrowful to leave', 'The joyful family was mourning to leave', 'The joyful family was sad to leave', 'The joyful family was sorrowful to leave']"
      },
      {
        "input": "synonyms = [[\"happy\",\"joyful\"],[\"joyful\",\"blissful\"],[\"blissful\",\"ecstatic\"],[\"ecstatic\",\"overjoyed\"]], text = \"he was ecstatic and overjoyed at the wedding\"",
        "output": "['he was blissful and blissful at the wedding', 'he was blissful and ecstatic at the wedding', 'he was blissful and happy at the wedding', 'he was blissful and joyful at the wedding', 'he was blissful and overjoyed at the wedding', 'he was ecstatic and blissful at the wedding', 'he was ecstatic and ecstatic at the wedding', 'he was ecstatic and happy at the wedding', 'he was ecstatic and joyful at the wedding', 'he was ecstatic and overjoyed at the wedding', 'he was happy and blissful at the wedding', 'he was happy and ecstatic at the wedding', 'he was happy and happy at the wedding', 'he was happy and joyful at the wedding', 'he was happy and overjoyed at the wedding', 'he was joyful and blissful at the wedding', 'he was joyful and ecstatic at the wedding', 'he was joyful and happy at the wedding', 'he was joyful and joyful at the wedding', 'he was joyful and overjoyed at the wedding', 'he was overjoyed and blissful at the wedding', 'he was overjoyed and ecstatic at the wedding', 'he was overjoyed and happy at the wedding', 'he was overjoyed and joyful at the wedding', 'he was overjoyed and overjoyed at the wedding']"
      },
      {
        "input": "synonyms = [[\"quick\",\"swift\"],[\"brown\",\"chestnut\"],[\"fox\",\"vulpine\"]], text = \"the quick brown fox jumps over the lazy dog\"",
        "output": "['the quick brown fox jumps over the lazy dog', 'the quick brown vulpine jumps over the lazy dog', 'the quick chestnut fox jumps over the lazy dog', 'the quick chestnut vulpine jumps over the lazy dog', 'the swift brown fox jumps over the lazy dog', 'the swift brown vulpine jumps over the lazy dog', 'the swift chestnut fox jumps over the lazy dog', 'the swift chestnut vulpine jumps over the lazy dog']"
      },
      {
        "input": "synonyms = [[\"bright\",\"shiny\"],[\"dark\",\"dim\"],[\"bright\",\"luminous\"]], text = \"the star was bright but the night was dark\"",
        "output": "['the star was bright but the night was dark', 'the star was bright but the night was dim', 'the star was luminous but the night was dark', 'the star was luminous but the night was dim', 'the star was shiny but the night was dark', 'the star was shiny but the night was dim']"
      },
      {
        "input": "synonyms = [[\"dog\",\"canine\"],[\"cat\",\"feline\"],[\"bird\",\"avian\"]], text = \"the dog chased the cat and the bird flew away\"",
        "output": "['the canine chased the cat and the avian flew away', 'the canine chased the cat and the bird flew away', 'the canine chased the feline and the avian flew away', 'the canine chased the feline and the bird flew away', 'the dog chased the cat and the avian flew away', 'the dog chased the cat and the bird flew away', 'the dog chased the feline and the avian flew away', 'the dog chased the feline and the bird flew away']"
      },
      {
        "input": "synonyms = [[\"good\",\"excellent\"],[\"bad\",\"poor\"]], text = \"the movie was good but the ending was bad\"",
        "output": "['the movie was excellent but the ending was bad', 'the movie was excellent but the ending was poor', 'the movie was good but the ending was bad', 'the movie was good but the ending was poor']"
      },
      {
        "input": "synonyms = [[\"bright\",\"shiny\"],[\"dim\",\"faint\"]], text = \"the bright stars were visible in the dim sky\"",
        "output": "['the bright stars were visible in the dim sky', 'the bright stars were visible in the faint sky', 'the shiny stars were visible in the dim sky', 'the shiny stars were visible in the faint sky']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"],[\"fast\",\"quick\"]], text = \"the big brown fox jumps over the small lazy dog fast\"",
        "output": "['the big brown fox jumps over the small lazy dog fast', 'the big brown fox jumps over the small lazy dog quick', 'the big brown fox jumps over the tiny lazy dog fast', 'the big brown fox jumps over the tiny lazy dog quick', 'the large brown fox jumps over the small lazy dog fast', 'the large brown fox jumps over the small lazy dog quick', 'the large brown fox jumps over the tiny lazy dog fast', 'the large brown fox jumps over the tiny lazy dog quick']"
      },
      {
        "input": "synonyms = [[\"big\",\"large\"],[\"small\",\"tiny\"],[\"fast\",\"quick\"]], text = \"the small cat was quick and the big dog was slow\"",
        "output": "['the small cat was fast and the big dog was slow', 'the small cat was fast and the large dog was slow', 'the small cat was quick and the big dog was slow', 'the small cat was quick and the large dog was slow', 'the tiny cat was fast and the big dog was slow', 'the tiny cat was fast and the large dog was slow', 'the tiny cat was quick and the big dog was slow', 'the tiny cat was quick and the large dog was slow']"
      }
    ]
  },
  {
    "id": 2087,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array"
    ],
    "problemDescription": "There is an m x n grid, where (0, 0) is the top-left cell and (m - 1, n - 1) is the bottom-right cell. You are given an integer array startPos where startPos = [startrow, startcol] indicates that initially, a robot is at the cell (startrow, startcol). You are also given an integer array homePos where homePos = [homerow, homecol] indicates that its home is at the cell (homerow, homecol).\nThe robot needs to go to its home. It can move one cell in four directions: left, right, up, or down, and it can not move outside the boundary. Every move incurs some cost. You are further given two 0-indexed integer arrays: rowCosts of length m and colCosts of length n.\n\nIf the robot moves up or down into a cell whose row is r, then this move costs rowCosts[r].\nIf the robot moves left or right into a cell whose column is c, then this move costs colCosts[c].\n\nReturn the minimum total cost for this robot to return home.\n\u00a0\nExample 1:\n\n\nInput: startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]\nOutput: 18\nExplanation: One optimal path is that:\nStarting from (1, 0)\n-> It goes down to (2, 0). This move costs rowCosts[2] = 3.\n-> It goes right to (2, 1). This move costs colCosts[1] = 2.\n-> It goes right to (2, 2). This move costs colCosts[2] = 6.\n-> It goes right to (2, 3). This move costs colCosts[3] = 7.\nThe total cost is 3 + 2 + 6 + 7 = 18\nExample 2:\n\nInput: startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26]\nOutput: 0\nExplanation: The robot is already at its home. Since no moves occur, the total cost is 0.\n\n\u00a0\nConstraints:\n\nm == rowCosts.length\nn == colCosts.length\n1 <= m, n <= 105\n0 <= rowCosts[r], colCosts[c] <= 104\nstartPos.length == 2\nhomePos.length == 2\n0 <= startrow, homerow < m\n0 <= startcol, homecol < n\n\n",
    "starterCode": "class Solution:\n    def minCost(self, startPos: List[int], homePos: List[int], rowCosts: List[int], colCosts: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "startPos = [2, 2], homePos = [0, 0], rowCosts = [1, 10, 1], colCosts = [1, 10, 1]",
        "output": "22"
      },
      {
        "input": "startPos = [3, 3], homePos = [0, 0], rowCosts = [10, 20, 30, 40], colCosts = [5, 15, 25, 35]",
        "output": "105"
      },
      {
        "input": "startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]",
        "output": "18"
      },
      {
        "input": "startPos = [0, 0], homePos = [2, 2], rowCosts = [1, 10, 1], colCosts = [1, 10, 1]",
        "output": "22"
      },
      {
        "input": "startPos = [0, 0], homePos = [2, 2], rowCosts = [1, 1, 1], colCosts = [1, 1, 1]",
        "output": "4"
      },
      {
        "input": "startPos = [1, 1], homePos = [1, 1], rowCosts = [1, 2, 3], colCosts = [4, 5, 6]",
        "output": "0"
      },
      {
        "input": "startPos = [2, 2], homePos = [0, 0], rowCosts = [1, 1, 1], colCosts = [1, 1, 1]",
        "output": "4"
      },
      {
        "input": "startPos = [0, 1], homePos = [2, 1], rowCosts = [3, 2, 1], colCosts = [4, 5]",
        "output": "3"
      },
      {
        "input": "startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26]",
        "output": "0"
      },
      {
        "input": "startPos = [2, 2], homePos = [2, 2], rowCosts = [1, 2], colCosts = [3, 4]",
        "output": "0"
      },
      {
        "input": "startPos = [3, 2], homePos = [0, 0], rowCosts = [1, 2, 3, 4], colCosts = [5, 6, 7]",
        "output": "17"
      },
      {
        "input": "startPos = [0, 1], homePos = [3, 3], rowCosts = [3, 2, 1, 4], colCosts = [4, 3, 2, 1]",
        "output": "10"
      },
      {
        "input": "startPos = [0, 2], homePos = [2, 2], rowCosts = [10, 20, 30], colCosts = [5, 5, 5]",
        "output": "50"
      },
      {
        "input": "startPos = [2, 3], homePos = [1, 1], rowCosts = [1, 1, 1], colCosts = [1, 1, 1, 1]",
        "output": "3"
      },
      {
        "input": "startPos = [2, 3], homePos = [1, 0], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]",
        "output": "20"
      },
      {
        "input": "startPos = [0, 1], homePos = [2, 2], rowCosts = [1, 2, 3], colCosts = [4, 5, 6]",
        "output": "11"
      },
      {
        "input": "startPos = [3, 3], homePos = [7, 7], rowCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], colCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "8"
      },
      {
        "input": "startPos = [1, 2], homePos = [3, 4], rowCosts = [5, 4, 3, 2], colCosts = [1, 2, 3, 4, 5]",
        "output": "14"
      },
      {
        "input": "startPos = [50000, 50000], homePos = [0, 0], rowCosts = [i for i in range(100000)], colCosts = [i for i in range(100000)]",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [0, 4], homePos = [4, 0], rowCosts = [1, 1, 1, 1, 1], colCosts = [1, 1, 1, 1, 1]",
        "output": "8"
      },
      {
        "input": "startPos = [9, 0], homePos = [9, 9], rowCosts = [100], colCosts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "540"
      },
      {
        "input": "startPos = [0, 0], homePos = [99999, 99999], rowCosts = [1] * 100000, colCosts = [1] * 100000",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [0, 0], homePos = [9, 9], rowCosts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], colCosts = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "99"
      },
      {
        "input": "startPos = [9, 0], homePos = [0, 9], rowCosts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], colCosts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "99"
      },
      {
        "input": "startPos = [2, 3], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]",
        "output": "0"
      },
      {
        "input": "startPos = [0, 0], homePos = [99999, 99999], rowCosts = list(reversed(range(100000))), colCosts = list(reversed(range(100000)))",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [5, 2], homePos = [0, 0], rowCosts = [1, 2, 3, 4, 5, 6], colCosts = [6, 5, 4, 3, 2, 1]",
        "output": "26"
      },
      {
        "input": "startPos = [50000, 50000], homePos = [0, 0], rowCosts = [10000] * 100000, colCosts = [10000] * 100000",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [2, 1], homePos = [2, 1], rowCosts = [1000, 2000, 3000, 4000], colCosts = [5000, 6000, 7000, 8000, 9000]",
        "output": "0"
      },
      {
        "input": "startPos = [0, 9], homePos = [0, 0], rowCosts = [1], colCosts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "450"
      },
      {
        "input": "startPos = [2, 3], homePos = [4, 1], rowCosts = [3, 2, 1, 4, 5], colCosts = [6, 7, 8, 9]",
        "output": "24"
      },
      {
        "input": "startPos = [1, 2], homePos = [3, 4], rowCosts = [1, 2, 3, 4], colCosts = [4, 3, 2, 1]",
        "output": "8"
      },
      {
        "input": "startPos = [0, 9], homePos = [9, 0], rowCosts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], colCosts = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "1080"
      },
      {
        "input": "startPos = [0, 99999], homePos = [99999, 0], rowCosts = [1] * 100000, colCosts = [1] * 100000",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [5, 2], homePos = [2, 5], rowCosts = [10, 20, 30, 40, 50, 60], colCosts = [60, 50, 40, 30, 20, 10]",
        "output": "180"
      },
      {
        "input": "startPos = [1, 1], homePos = [3, 3], rowCosts = [5, 10, 15, 20], colCosts = [10, 20, 30, 40]",
        "output": "105"
      },
      {
        "input": "startPos = [2, 2], homePos = [7, 2], rowCosts = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], colCosts = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "35"
      },
      {
        "input": "startPos = [2, 4], homePos = [2, 4], rowCosts = [100, 200, 300], colCosts = [100, 200, 300, 400, 500]",
        "output": "0"
      },
      {
        "input": "startPos = [2, 2], homePos = [2, 2], rowCosts = [100, 200, 300, 400, 500], colCosts = [100, 200, 300, 400, 500]",
        "output": "0"
      },
      {
        "input": "startPos = [0, 5], homePos = [5, 0], rowCosts = [10, 20, 30, 40, 50, 60], colCosts = [60, 50, 40, 30, 20, 10]",
        "output": "400"
      },
      {
        "input": "startPos = [1, 2], homePos = [4, 3], rowCosts = [100, 200, 300, 400, 500], colCosts = [10, 20, 30, 40]",
        "output": "1240"
      },
      {
        "input": "startPos = [0, 3], homePos = [3, 0], rowCosts = [10, 20, 30, 40], colCosts = [5, 6, 7, 8]",
        "output": "108"
      },
      {
        "input": "startPos = [10, 10], homePos = [0, 0], rowCosts = [i for i in range(1, 11)], colCosts = [i for i in range(10, 0, -1)]",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [4, 4], homePos = [0, 0], rowCosts = [10, 20, 30, 40, 50], colCosts = [1, 2, 3, 4, 5]",
        "output": "110"
      },
      {
        "input": "startPos = [1, 3], homePos = [4, 1], rowCosts = [2, 3, 5, 7, 11], colCosts = [13, 17, 19, 23]",
        "output": "59"
      },
      {
        "input": "startPos = [1000, 1000], homePos = [1000, 1000], rowCosts = [i % 100 for i in range(2000)], colCosts = [i % 100 for i in range(2000)]",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [5, 0], homePos = [0, 5], rowCosts = [1, 1, 1, 1, 1], colCosts = [1, 2, 3, 4, 5]",
        "output": "19"
      },
      {
        "input": "startPos = [50000, 50000], homePos = [49999, 49999], rowCosts = list(range(100000)), colCosts = list(range(100000))",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [5, 5], homePos = [0, 0], rowCosts = [1, 1, 1, 1, 1, 1], colCosts = [1, 1, 1, 1, 1, 1]",
        "output": "10"
      },
      {
        "input": "startPos = [3, 3], homePos = [0, 0], rowCosts = [10000, 9000, 8000, 7000], colCosts = [6000, 5000, 4000, 3000]",
        "output": "42000"
      },
      {
        "input": "startPos = [0, 99999], homePos = [99999, 0], rowCosts = [x % 10 for x in range(100000)], colCosts = [x % 10 for x in range(100000)]",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [5, 5], homePos = [0, 0], rowCosts = [10, 20, 30, 40, 50, 60], colCosts = [6, 5, 4, 3, 2, 1]",
        "output": "170"
      },
      {
        "input": "startPos = [99999, 99999], homePos = [0, 0], rowCosts = [1] * 100000, colCosts = [1] * 100000",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [0, 5], homePos = [5, 0], rowCosts = [2, 2, 2, 2, 2, 2], colCosts = [2, 2, 2, 2, 2, 2]",
        "output": "20"
      },
      {
        "input": "startPos = [5, 5], homePos = [0, 0], rowCosts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], colCosts = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "550"
      },
      {
        "input": "startPos = [1, 1], homePos = [10, 10], rowCosts = [10]*11, colCosts = [5]*11",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [3, 3], homePos = [1, 1], rowCosts = [100, 200, 300, 400], colCosts = [400, 300, 200, 100]",
        "output": "1000"
      },
      {
        "input": "startPos = [7, 7], homePos = [2, 2], rowCosts = [11, 10, 9, 8, 7, 6, 5, 4, 3, 2], colCosts = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "60"
      },
      {
        "input": "startPos = [5, 5], homePos = [0, 0], rowCosts = [9, 8, 7, 6, 5, 4], colCosts = [3, 2, 1, 4, 5, 6]",
        "output": "50"
      },
      {
        "input": "startPos = [9, 9], homePos = [0, 0], rowCosts = [100]*10, colCosts = [200]*10",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [0, 9], homePos = [9, 0], rowCosts = [i for i in range(10)], colCosts = [j for j in range(10, 0, -1)]",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [99999, 0], homePos = [0, 99999], rowCosts = [1]*100000, colCosts = [2]*100000",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [99999, 1], homePos = [1, 99999], rowCosts = [1] * 100000, colCosts = [1] * 100000",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [0, 0], homePos = [4, 5], rowCosts = [10, 20, 30, 40, 50], colCosts = [5, 15, 25, 35, 45, 55]",
        "output": "315"
      },
      {
        "input": "startPos = [4, 4], homePos = [6, 6], rowCosts = [5, 1, 2, 3, 4, 3, 2, 1, 5, 10], colCosts = [10, 1, 2, 3, 4, 3, 2, 1, 5, 10]",
        "output": "10"
      },
      {
        "input": "startPos = [3, 3], homePos = [0, 0], rowCosts = [10, 20, 30, 40], colCosts = [40, 30, 20, 10]",
        "output": "150"
      },
      {
        "input": "startPos = [0, 0], homePos = [5, 5], rowCosts = [1, 2, 3, 4, 5, 6], colCosts = [6, 5, 4, 3, 2, 1]",
        "output": "35"
      },
      {
        "input": "startPos = [10, 0], homePos = [0, 10], rowCosts = [i for i in range(11)], colCosts = [j for j in range(11)]",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [0, 9], homePos = [9, 0], rowCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], colCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "18"
      },
      {
        "input": "startPos = [3, 2], homePos = [0, 0], rowCosts = [1, 1, 1, 1], colCosts = [1, 1, 1]",
        "output": "5"
      },
      {
        "input": "startPos = [1, 0], homePos = [3, 2], rowCosts = [1, 1, 1, 1], colCosts = [1, 1, 1]",
        "output": "4"
      },
      {
        "input": "startPos = [1, 2], homePos = [3, 0], rowCosts = [1, 1, 1, 1], colCosts = [1, 1, 1]",
        "output": "4"
      },
      {
        "input": "startPos = [0, 0], homePos = [4, 4], rowCosts = [1, 2, 3, 4, 5], colCosts = [5, 4, 3, 2, 1]",
        "output": "24"
      },
      {
        "input": "startPos = [50000, 50000], homePos = [0, 0], rowCosts = list(range(100000)), colCosts = list(range(100000))",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [0, 0], homePos = [9, 9], rowCosts = [i for i in range(10)], colCosts = [j for j in range(10)]",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [10, 5], homePos = [10, 5], rowCosts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], colCosts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "0"
      },
      {
        "input": "startPos = [100, 100], homePos = [200, 200], rowCosts = [i % 10 for i in range(301)], colCosts = [i % 10 for i in range(301)]",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [0, 0], homePos = [3, 3], rowCosts = [1, 2, 3, 4], colCosts = [1, 1, 1, 1]",
        "output": "12"
      },
      {
        "input": "startPos = [5, 5], homePos = [1, 1], rowCosts = [10, 20, 30, 40, 50, 60], colCosts = [15, 25, 35, 45, 55, 65]",
        "output": "300"
      },
      {
        "input": "startPos = [99999, 0], homePos = [0, 99999], rowCosts = [x % 10 for x in range(100000)], colCosts = [x % 10 for x in range(100000)]",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [50000, 50000], homePos = [99999, 99999], rowCosts = [x for x in range(100000)], colCosts = [x for x in range(100000)]",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [2, 2], homePos = [4, 4], rowCosts = [1, 1, 1, 1, 1], colCosts = [1, 1, 1, 1, 1]",
        "output": "4"
      },
      {
        "input": "startPos = [0, 4], homePos = [4, 0], rowCosts = [1, 2, 3, 4, 5], colCosts = [5, 10, 15, 20, 25]",
        "output": "64"
      },
      {
        "input": "startPos = [2, 0], homePos = [2, 4], rowCosts = [1, 2, 3], colCosts = [10, 20, 30, 40, 50]",
        "output": "140"
      },
      {
        "input": "startPos = [3, 1], homePos = [0, 3], rowCosts = [5, 10, 15, 20], colCosts = [1, 2, 3, 4]",
        "output": "37"
      },
      {
        "input": "startPos = [5, 5], homePos = [5, 5], rowCosts = [1, 1, 1, 1, 1, 1], colCosts = [1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "startPos = [1, 1], homePos = [99998, 99998], rowCosts = [1] * 100000, colCosts = [1] * 100000",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [2, 2], homePos = [2, 2], rowCosts = [100, 200, 300], colCosts = [100, 200, 300]",
        "output": "0"
      },
      {
        "input": "startPos = [2, 2], homePos = [2, 2], rowCosts = [1000, 2000, 3000], colCosts = [100, 200, 300]",
        "output": "0"
      },
      {
        "input": "startPos = [5, 5], homePos = [0, 0], rowCosts = [10, 20, 30, 40, 50, 60], colCosts = [5, 15, 25, 35, 45, 55]",
        "output": "275"
      },
      {
        "input": "startPos = [1, 1], homePos = [99999, 99999], rowCosts = [1] * 100000, colCosts = [1] * 100000",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [0, 3], homePos = [4, 0], rowCosts = [1, 2, 3, 4, 5], colCosts = [5, 4, 3, 2, 1]",
        "output": "26"
      },
      {
        "input": "startPos = [0, 99999], homePos = [99999, 0], rowCosts = [i % 10 for i in range(100000)], colCosts = [i % 10 for i in range(100000)]",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [3, 4], homePos = [0, 0], rowCosts = [10, 20, 30, 40], colCosts = [5, 15, 25, 35, 45]",
        "output": "140"
      },
      {
        "input": "startPos = [4, 4], homePos = [4, 4], rowCosts = [1, 2, 3, 4, 5], colCosts = [5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "startPos = [2, 2], homePos = [4, 4], rowCosts = [1, 2, 3, 4, 5], colCosts = [5, 4, 3, 2, 1]",
        "output": "12"
      },
      {
        "input": "startPos = [49999, 49999], homePos = [0, 0], rowCosts = [x for x in range(100000)], colCosts = [x for x in range(100000)]",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [4, 4], homePos = [1, 1], rowCosts = [5, 10, 15, 20, 25], colCosts = [1, 2, 3, 4, 5]",
        "output": "54"
      },
      {
        "input": "startPos = [0, 2], homePos = [4, 2], rowCosts = [10, 20, 30, 40, 50], colCosts = [1, 2, 3]",
        "output": "140"
      },
      {
        "input": "startPos = [4, 0], homePos = [0, 4], rowCosts = [10, 20, 30, 40, 50], colCosts = [50, 40, 30, 20, 10]",
        "output": "200"
      },
      {
        "input": "startPos = [0, 5], homePos = [5, 0], rowCosts = [1, 1, 1, 1, 1, 1], colCosts = [99, 98, 97, 96, 95, 94]",
        "output": "490"
      },
      {
        "input": "startPos = [5, 5], homePos = [2, 8], rowCosts = [5]*6, colCosts = [5]*9",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [0, 50000], homePos = [99999, 0], rowCosts = [1] * 100000, colCosts = [1] * 100000",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [1, 1], homePos = [3, 3], rowCosts = [1, 1, 1, 1, 1], colCosts = [1, 1, 1, 1, 1]",
        "output": "4"
      },
      {
        "input": "startPos = [50, 50], homePos = [50, 50], rowCosts = [100] * 100, colCosts = [100] * 100",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [3, 0], homePos = [0, 3], rowCosts = [1, 2, 3, 4], colCosts = [1, 1, 1, 1, 1]",
        "output": "9"
      },
      {
        "input": "startPos = [10000, 9999], homePos = [9999, 10000], rowCosts = [1] * 10001, colCosts = [1] * 10001",
        "output": "Error: Solution.minCost() missing 2 required positional arguments: 'rowCosts' and 'colCosts'"
      },
      {
        "input": "startPos = [4, 0], homePos = [4, 4], rowCosts = [1, 2, 3, 4, 5], colCosts = [5, 10, 15, 20, 25]",
        "output": "70"
      },
      {
        "input": "startPos = [1, 5], homePos = [3, 2], rowCosts = [1, 2, 3, 4], colCosts = [5, 4, 3, 2, 1]",
        "output": "13"
      }
    ]
  },
  {
    "id": 1738,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Divide and Conquer",
      "Matrix",
      "Prefix Sum",
      "Quickselect",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k.\nThe value of coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed).\nFind the kth largest value (1-indexed) of all the coordinates of matrix.\n\u00a0\nExample 1:\n\nInput: matrix = [[5,2],[1,6]], k = 1\nOutput: 7\nExplanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.\n\nExample 2:\n\nInput: matrix = [[5,2],[1,6]], k = 2\nOutput: 5\nExplanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.\n\nExample 3:\n\nInput: matrix = [[5,2],[1,6]], k = 3\nOutput: 4\nExplanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.\n\u00a0\nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 1000\n0 <= matrix[i][j] <= 106\n1 <= k <= m * n\n\n",
    "starterCode": "class Solution:\n    def kthLargestValue(self, matrix: List[List[int]], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "matrix = [[5,2,3],[1,6,4]], k = 5",
        "output": "4"
      },
      {
        "input": "matrix = [[0,0,0],[0,0,0],[0,0,0]], k = 9",
        "output": "0"
      },
      {
        "input": "matrix = [[5,2,3],[1,6,4],[7,8,9]], k = 9",
        "output": "0"
      },
      {
        "input": "matrix = [[10,12,3],[1,6,4],[7,8,9]], k = 4",
        "output": "10"
      },
      {
        "input": "matrix = [[10,20],[30,40]], k = 1",
        "output": "40"
      },
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]], k = 5",
        "output": "2"
      },
      {
        "input": "matrix = [[1,1,1],[1,1,1],[1,1,1]], k = 4",
        "output": "1"
      },
      {
        "input": "matrix = [[0,0],[0,0]], k = 1",
        "output": "0"
      },
      {
        "input": "matrix = [[5,2],[1,6]], k = 1",
        "output": "7"
      },
      {
        "input": "matrix = [[5,2,3],[1,6,4]], k = 1",
        "output": "7"
      },
      {
        "input": "matrix = [[10,20,30],[40,50,60],[70,80,90]], k = 9",
        "output": "0"
      },
      {
        "input": "matrix = [[1,2],[3,4],[5,6]], k = 6",
        "output": "1"
      },
      {
        "input": "matrix = [[5,2],[1,6]], k = 3",
        "output": "4"
      },
      {
        "input": "matrix = [[5,2],[1,6]], k = 2",
        "output": "5"
      },
      {
        "input": "matrix = [[1,2],[3,4],[5,6]], k = 4",
        "output": "3"
      },
      {
        "input": "matrix = [[1000000,999999,999998],[999997,999996,999995],[999994,999993,999992]], k = 6",
        "output": "126"
      },
      {
        "input": "matrix = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[2,3,4,5,6,7,8,9,10,11],[11,10,9,8,7,6,5,4,3,2]], k = 25",
        "output": "2"
      },
      {
        "input": "matrix = [[5,8,9,12,15],[14,11,10,7,4],[3,6,7,10,13],[12,15,14,11,8],[1,4,5,8,11]], k = 18",
        "output": "5"
      },
      {
        "input": "matrix = [[1,0,1,0],[0,1,0,1],[1,0,1,0],[0,1,0,1]], k = 5",
        "output": "1"
      },
      {
        "input": "matrix = [[100,200,300],[400,500,600],[700,800,900],[1000,1100,1200]], k = 10",
        "output": "172"
      },
      {
        "input": "matrix = [[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1]], k = 25",
        "output": "0"
      },
      {
        "input": "matrix = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]], k = 10",
        "output": "0"
      },
      {
        "input": "matrix = [[9,10,11],[12,13,14],[15,16,17],[18,19,20]], k = 8",
        "output": "8"
      },
      {
        "input": "matrix = [[8,6,2,5,8,4,9],[4,5,5,6,9,8,9],[7,3,8,7,5,6,2],[4,3,1,2,3,4,5],[5,6,7,8,9,0,1]], k = 15",
        "output": "11"
      },
      {
        "input": "matrix = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]], k = 50",
        "output": "0"
      },
      {
        "input": "matrix = [[1,3,5,7,9,11,13],[15,17,19,21,23,25,27],[29,31,33,35,37,39,41]], k = 12",
        "output": "14"
      },
      {
        "input": "matrix = [[25,10,15,20],[5,30,35,40],[45,50,55,60],[65,70,75,80]], k = 15",
        "output": "8"
      },
      {
        "input": "matrix = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]], k = 13",
        "output": "0"
      },
      {
        "input": "matrix = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]], k = 25",
        "output": "1"
      },
      {
        "input": "matrix = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],[49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64]], k = 30",
        "output": "7"
      },
      {
        "input": "matrix = [[3,1,4,1,5,9,2,6,5,3,5,9,2,6,5],[3,5,8,9,7,9,3,2,3,8,4,6,2,6,4],[3,3,8,3,2,7,9,5,0,2,8,8,4,1,9],[7,1,5,9,2,6,5,3,5,9,2,6,5,3,5]], k = 18",
        "output": "9"
      },
      {
        "input": "matrix = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], k = 1",
        "output": "0"
      },
      {
        "input": "matrix = [[9,18,27,36,45],[44,35,26,17,8],[7,16,25,34,43],[42,33,24,15,6],[5,14,23,32,41]], k = 20",
        "output": "8"
      },
      {
        "input": "matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 10",
        "output": "3"
      },
      {
        "input": "matrix = [[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992]], k = 9",
        "output": "123"
      },
      {
        "input": "matrix = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]], k = 30",
        "output": "0"
      },
      {
        "input": "matrix = [[5,2,15,6,3],[10,1,4,7,8],[3,1,9,2,12],[6,14,11,13,5],[1,15,8,6,7]], k = 20",
        "output": "6"
      },
      {
        "input": "matrix = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], k = 16",
        "output": "0"
      },
      {
        "input": "matrix = [[10,20],[30,40],[50,60],[70,80],[90,100]], k = 8",
        "output": "20"
      },
      {
        "input": "matrix = [[7,1,4,2],[9,6,3,8],[5,0,10,12],[15,11,14,13]], k = 7",
        "output": "8"
      },
      {
        "input": "matrix = [[2,4,6,8,10],[12,14,16,18,20],[22,24,26,28,30],[32,34,36,38,40],[42,44,46,48,50]], k = 14",
        "output": "8"
      },
      {
        "input": "matrix = [[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3],[4,4,4,4,4],[5,5,5,5,5]], k = 12",
        "output": "1"
      },
      {
        "input": "matrix = [[5, 2, 15, 10], [1, 6, 8, 3], [12, 4, 7, 9], [14, 11, 13, 5]], k = 10",
        "output": "6"
      },
      {
        "input": "matrix = [[8,12,7,3,15],[9,6,11,14,4],[13,8,2,5,9],[1,10,7,12,8],[6,4,14,3,13]], k = 13",
        "output": "7"
      },
      {
        "input": "matrix = [[0,0,0],[0,0,0],[0,0,0]], k = 1",
        "output": "0"
      },
      {
        "input": "matrix = [[999999, 999999, 999999], [999999, 999999, 999999], [999999, 999999, 999999]], k = 9",
        "output": "0"
      },
      {
        "input": "matrix = [[13,14,15,16,17,18,19,20,21,22,23,24],[12,11,10,9,8,7,6,5,4,3,2,1]], k = 14",
        "output": "12"
      },
      {
        "input": "matrix = [[15,9,12,3],[11,6,4,14],[7,8,9,13],[2,5,10,1]], k = 7",
        "output": "8"
      },
      {
        "input": "matrix = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], k = 10",
        "output": "1"
      },
      {
        "input": "matrix = [[1,3,5,7,9,11,13,15,17,19],[2,4,6,8,10,12,14,16,18,20]], k = 10",
        "output": "8"
      },
      {
        "input": "matrix = [[3,4,5,6],[7,8,9,10],[11,12,13,14],[15,16,17,18]], k = 15",
        "output": "0"
      },
      {
        "input": "matrix = [[1,0,0,1,0],[0,1,0,1,0],[0,0,1,0,1],[1,0,1,0,1],[0,1,0,1,0]], k = 12",
        "output": "1"
      },
      {
        "input": "matrix = [[31, 41, 59, 26, 53], [58, 97, 93, 23, 84], [62, 64, 33, 83, 27], [95, 25, 43, 30, 48], [67, 47, 54, 90, 88]], k = 17",
        "output": "31"
      },
      {
        "input": "matrix = [[256,512,1024],[128,256,512],[64,128,256]], k = 5",
        "output": "640"
      },
      {
        "input": "matrix = [[3,1,2],[4,1,1],[5,10,6]], k = 6",
        "output": "3"
      },
      {
        "input": "matrix = [[3,6,9,12],[4,7,10,13],[5,8,11,14]], k = 7",
        "output": "5"
      },
      {
        "input": "matrix = [[3,8,1],[9,11,13],[4,7,12]], k = 6",
        "output": "10"
      },
      {
        "input": "matrix = [[1000000,0,0,0,0,0,0],[0,1000000,0,0,0,0,0],[0,0,1000000,0,0,0,0],[0,0,0,1000000,0,0,0],[0,0,0,0,1000000,0,0],[0,0,0,0,0,1000000,0],[0,0,0,0,0,0,1000000]], k = 25",
        "output": "1000000"
      },
      {
        "input": "matrix = [[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14],[15,16,17,18,19],[20,21,22,23,24]], k = 25",
        "output": "0"
      },
      {
        "input": "matrix = [[9,8,7,6,5,4],[3,2,1,0,9,8],[7,6,5,4,3,2],[1,0,9,8,7,6],[5,4,3,2,1,0]], k = 30",
        "output": "0"
      },
      {
        "input": "matrix = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]], k = 25",
        "output": "0"
      },
      {
        "input": "matrix = [[9,11,13,15,17,19,21],[23,25,27,29,31,33,35],[37,39,41,43,45,47,49]], k = 25",
        "output": "0"
      },
      {
        "input": "matrix = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5]], k = 14",
        "output": "0"
      },
      {
        "input": "matrix = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]], k = 20",
        "output": "1"
      },
      {
        "input": "matrix = [[1000000,999999,999998,999997],[999996,999995,999994,999993],[999992,999991,999990,999989]], k = 6",
        "output": "124"
      },
      {
        "input": "matrix = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]], k = 1",
        "output": "1"
      },
      {
        "input": "matrix = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]], k = 20",
        "output": "7"
      },
      {
        "input": "matrix = [[2,3,4,5,6,7,8,9,10,11,12],[1,6,7,8,9,10,11,12,13,14,15]], k = 15",
        "output": "5"
      },
      {
        "input": "matrix = [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [3, 5, 7, 9, 11], [4, 6, 8, 10, 12], [5, 7, 9, 11, 13]], k = 13",
        "output": "4"
      },
      {
        "input": "matrix = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]], k = 25",
        "output": "0"
      },
      {
        "input": "matrix = [[1000000,999999,999998,999997,999996],[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]], k = 15",
        "output": "1000000"
      },
      {
        "input": "matrix = [[7,7,7],[7,7,7],[7,7,7]], k = 4",
        "output": "7"
      },
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]], k = 1",
        "output": "15"
      },
      {
        "input": "matrix = [[1000000,999999,999998,999997],[999996,999995,999994,999993],[999992,999991,999990,999989],[999988,999987,999986,999985]], k = 10",
        "output": "120"
      },
      {
        "input": "matrix = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]], k = 3",
        "output": "7"
      },
      {
        "input": "matrix = [[1,2,3,4,5],[5,4,3,2,1],[6,7,8,9,10],[10,9,8,7,6],[11,12,13,14,15]], k = 10",
        "output": "4"
      },
      {
        "input": "matrix = [[1000000, 200000, 30000],[4000, 5000, 6000],[70, 80, 900]], k = 8",
        "output": "799482"
      },
      {
        "input": "matrix = [[10,20,30,40,50],[5,15,25,35,45],[60,70,80,90,100],[55,65,75,85,95]], k = 15",
        "output": "10"
      },
      {
        "input": "matrix = [[42, 42, 42, 42, 42], [42, 42, 42, 42, 42], [42, 42, 42, 42, 42], [42, 42, 42, 42, 42], [42, 42, 42, 42, 42]], k = 15",
        "output": "0"
      },
      {
        "input": "matrix = [[2,4,6,8,10,12],[14,16,18,20,22,24],[26,28,30,32,34,36]], k = 17",
        "output": "2"
      },
      {
        "input": "matrix = [[15,14,13,12],[11,10,9,8],[7,6,5,4],[3,2,1,0]], k = 10",
        "output": "0"
      },
      {
        "input": "matrix = [[23,56,12,78],[34,89,56,45],[12,34,56,78],[89,56,23,12]], k = 10",
        "output": "47"
      },
      {
        "input": "matrix = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]], k = 25",
        "output": "0"
      },
      {
        "input": "matrix = [[100,200,300],[400,500,600],[700,800,900]], k = 5",
        "output": "384"
      },
      {
        "input": "matrix = [[1,3,5,7,9],[2,4,6,8,10],[11,13,15,17,19],[20,22,24,26,28]], k = 12",
        "output": "7"
      },
      {
        "input": "matrix = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], k = 16",
        "output": "0"
      },
      {
        "input": "matrix = [[3,5,11,13],[8,2,12,7],[4,6,9,15],[1,10,3,8]], k = 6",
        "output": "11"
      }
    ]
  },
  {
    "id": 316,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Greedy",
      "String",
      "Monotonic Stack"
    ],
    "problemDescription": "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n\u00a0\nExample 1:\n\nInput: s = \"bcabc\"\nOutput: \"abc\"\n\nExample 2:\n\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 104\ns consists of lowercase English letters.\n\n\u00a0\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\n",
    "starterCode": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"rumeblidofervobenly\"",
        "output": "rumbidfevonly"
      },
      {
        "input": "s = \"thesqtitxyetpxooxlqskyae\"",
        "output": "heitpoxlqskya"
      },
      {
        "input": "s = \"thesqquishs\"",
        "output": "tequihs"
      },
      {
        "input": "s = \"a\"",
        "output": "a"
      },
      {
        "input": "s = \"russell\"",
        "output": "rusel"
      },
      {
        "input": "s = \"cbacdcbc\"",
        "output": "acdb"
      },
      {
        "input": "s = \"zyxzyzzyxzy\"",
        "output": "xyz"
      },
      {
        "input": "s = \"xyz\"",
        "output": "xyz"
      },
      {
        "input": "s = \"leetcode\"",
        "output": "letcod"
      },
      {
        "input": "s = \"abacbabcabacbacbacbabcaba\"",
        "output": "abc"
      },
      {
        "input": "s = \"zyxzyxzyxzyxzyx\"",
        "output": "xyz"
      },
      {
        "input": "s = \"banana\"",
        "output": "ban"
      },
      {
        "input": "s = \"zyxzyxzyx\"",
        "output": "xyz"
      },
      {
        "input": "s = \"abcd\"",
        "output": "abcd"
      },
      {
        "input": "s = \"bcabc\"",
        "output": "abc"
      },
      {
        "input": "s = \"bbaaccaabb\"",
        "output": "acb"
      },
      {
        "input": "s = \"ecbacba\"",
        "output": "eacb"
      },
      {
        "input": "s = \"aabbcc\"",
        "output": "abc"
      },
      {
        "input": "s = \"abacb\"",
        "output": "abc"
      },
      {
        "input": "s = \"sphnsdczdcphqvh\"",
        "output": "hnsczdpqv"
      },
      {
        "input": "s = \"xyzzyx\"",
        "output": "xyz"
      },
      {
        "input": "s = \"eliminate\"",
        "output": "elimnat"
      },
      {
        "input": "s = \"bcaacbcbabcbabcbbbcabcabcb\"",
        "output": "abc"
      },
      {
        "input": "s = \"cccbba\"",
        "output": "cba"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "s = \"ababcabcabc\"",
        "output": "abc"
      },
      {
        "input": "s = \"vvvvvvvvvvvvvvvvvvvvvvvvvv\"",
        "output": "v"
      },
      {
        "input": "s = \"xyzzyxwvutsrqponmlkjihgfedcbazyxzyxwvutsrqponmlkjihgfedcba\"",
        "output": "axzywvutsrqponmlkjihgfedcb"
      },
      {
        "input": "s = \"eleven\"",
        "output": "elvn"
      },
      {
        "input": "s = \"abcabcabcabc\"",
        "output": "abc"
      },
      {
        "input": "s = \"mississsipissippi\"",
        "output": "mips"
      },
      {
        "input": "s = \"kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk\"",
        "output": "k"
      },
      {
        "input": "s = \"thisisaverycomplicatedstringwithmultiplesamecharacters\"",
        "output": "averycodingwhmulpst"
      },
      {
        "input": "s = \"abcdabcdabcd\"",
        "output": "abcd"
      },
      {
        "input": "s = \"vkgdffubqyfvcl\"",
        "output": "kgdfubqyvcl"
      },
      {
        "input": "s = \"zyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxy\"",
        "output": "xyz"
      },
      {
        "input": "s = \"thisisareallylongstringwithsomerepeatedcharacters\"",
        "output": "aelyginwhompdcrts"
      },
      {
        "input": "s = \"aaaaabbbbccccdddd\"",
        "output": "abcd"
      },
      {
        "input": "s = \"abcdabc\"",
        "output": "abcd"
      },
      {
        "input": "s = \"abcdefghxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "abcdefghxyzwvutsrqponmlkji"
      },
      {
        "input": "s = \"abcdcbadef\"",
        "output": "abcdef"
      },
      {
        "input": "s = \"elqodmxonqkdio\"",
        "output": "eldmxnqkio"
      },
      {
        "input": "s = \"rclcar\"",
        "output": "clar"
      },
      {
        "input": "s = \"aaabbbccc\"",
        "output": "abc"
      },
      {
        "input": "s = \"abcdefghifghijklmnopqrstuvwxyz\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"zabaxyzc\"",
        "output": "abxyzc"
      },
      {
        "input": "s = \"zyxzyxzyxzyxcba\"",
        "output": "xyzcba"
      },
      {
        "input": "s = \"abababababababab\"",
        "output": "ab"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"dedededededededed\"",
        "output": "de"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmzxcvbnmlkjhgfdsapoiuytrewq\"",
        "output": "abmzxcvnlkjhgfdspoiuytrewq"
      },
      {
        "input": "s = \"abcdabcdabcdabcd\"",
        "output": "abcd"
      },
      {
        "input": "s = \"limits\"",
        "output": "limts"
      },
      {
        "input": "s = \"abcdzyxwvutsrqponmlkjihgfedcba\"",
        "output": "abcdzyxwvutsrqponmlkjihgfe"
      },
      {
        "input": "s = \"zyzzyzxzyzy\"",
        "output": "xyz"
      },
      {
        "input": "s = \"aabbbccddeeefffggghhhiiijjjkkkllmmmnnnooopppqqrrssttuuvvwwxxyyzz\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"zzyyxxwwvvttsrqqponnmlkkjjiihggffeeddccbbaa\"",
        "output": "zyxwvtsrqponmlkjihgfedcba"
      },
      {
        "input": "s = \"rsvwzxcvbnmasdfghjklpoiuytrewq\"",
        "output": "rsvwzxcbnmadfghjklpoiuyteq"
      },
      {
        "input": "s = \"abacabadabacaba\"",
        "output": "abcd"
      },
      {
        "input": "s = \"rquyaedetziwq\"",
        "output": "rquyadetziw"
      },
      {
        "input": "s = \"dabdc\"",
        "output": "abdc"
      },
      {
        "input": "s = \"pppippiiqipqqipiqipiiiiii\"",
        "output": "ipq"
      },
      {
        "input": "s = \"abacbabc\"",
        "output": "abc"
      },
      {
        "input": "s = \"abcdexyzabcdexyz\"",
        "output": "abcdexyz"
      },
      {
        "input": "s = \"abcdexyzvwxycba\"",
        "output": "abcdexyzvw"
      },
      {
        "input": "s = \"eccbbbbdec\"",
        "output": "bdec"
      },
      {
        "input": "s = \"axbxa\"",
        "output": "abx"
      },
      {
        "input": "s = \"rhythm\"",
        "output": "rhytm"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"cbacdcbcxd\"",
        "output": "abcxd"
      },
      {
        "input": "s = \"pppqqqrrrssstttuuuvvvwwwxxxxyyyyzzzz\"",
        "output": "pqrstuvwxyz"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "z"
      },
      {
        "input": "s = \"elgoog\"",
        "output": "elgo"
      },
      {
        "input": "s = \"abcdacdabcde\"",
        "output": "abcde"
      },
      {
        "input": "s = \"cdadabcc\"",
        "output": "adbc"
      },
      {
        "input": "s = \"abcdxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "abcdxyzwvutsrqponmlkjihgfe"
      },
      {
        "input": "s = \"nincompoop\"",
        "output": "incmop"
      },
      {
        "input": "s = \"zzzzyyyxxxwwvvuuttssrrqqppoonnmmllkkiijjhhhgggffffeeeedddccccbbbaaa\"",
        "output": "zyxwvutsrqponmlkijhgfedcba"
      },
      {
        "input": "s = \"leetcodeloveleetcode\"",
        "output": "cdelovt"
      },
      {
        "input": "s = \"abcdefghijabcdejk\"",
        "output": "abcdefghijk"
      },
      {
        "input": "s = \"abcdedcba\"",
        "output": "abcde"
      },
      {
        "input": "s = \"aabbbccc\"",
        "output": "abc"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmzyxcvbnmlkjhgfdsapoiuytrewq\"",
        "output": "abmzxcvnlkjhgfdspoiuytrewq"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm\"",
        "output": "abmqwertyuiopsdfghjklzxcvn"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"poiuytrewqlkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnm\"",
        "output": "abmqwertyuioplkjhgfdszxcvn"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmnbvcxzlkjhgfdsapoiuytrewq\"",
        "output": "abmnvcxzlkjhgfdspoiuytrewq"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"abacabadabcabc\"",
        "output": "abcd"
      },
      {
        "input": "s = \"abacbdcba\"",
        "output": "abcd"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "a"
      },
      {
        "input": "s = \"mississippi\"",
        "output": "misp"
      },
      {
        "input": "s = \"abcdexyzzyxwvtsrqponmlkjihgfe\"",
        "output": "abcdexyzwvtsrqponmlkjihgf"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "azyxwvutsrqponmlkjihgfedcb"
      },
      {
        "input": "s = \"aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeefffffffff\"",
        "output": "abcdef"
      },
      {
        "input": "s = \"ababababababababababababababababababab\"",
        "output": "ab"
      },
      {
        "input": "s = \"zyxzyxzyxzyx\"",
        "output": "xyz"
      },
      {
        "input": "s = \"razonator\"",
        "output": "azntor"
      }
    ]
  },
  {
    "id": 2955,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Counting",
      "Prefix Sum"
    ],
    "problemDescription": "You are given a 0-indexed string s, and a 2D array of integers queries, where queries[i] = [li, ri] indicates a substring of s starting from the index li and ending at the index ri (both inclusive), i.e. s[li..ri].\nReturn an array ans where ans[i] is the number of same-end substrings of queries[i].\nA 0-indexed string t of length n is called same-end if it has the same character at both of its ends, i.e., t[0] == t[n - 1].\nA substring is a contiguous non-empty sequence of characters within a string.\n\u00a0\nExample 1:\n\nInput: s = \"abcaab\", queries = [[0,0],[1,4],[2,5],[0,5]]\nOutput: [1,5,5,10]\nExplanation: Here is the same-end substrings of each query:\n1st query: s[0..0] is \"a\" which has 1 same-end substring: \"a\".\n2nd query: s[1..4] is \"bcaa\" which has 5 same-end substrings: \"bcaa\", \"bcaa\", \"bcaa\", \"bcaa\", \"bcaa\".\n3rd query: s[2..5] is \"caab\" which has 5 same-end substrings: \"caab\", \"caab\", \"caab\", \"caab\", \"caab\".\n4th query: s[0..5] is \"abcaab\" which has 10 same-end substrings: \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\".\n\nExample 2:\n\nInput: s = \"abcd\", queries = [[0,3]]\nOutput: [4]\nExplanation: The only query is s[0..3] which is \"abcd\". It has 4 same-end substrings: \"abcd\", \"abcd\", \"abcd\", \"abcd\".\n\n\u00a0\nConstraints:\n\n2 <= s.length <= 3 * 104\ns consists only of lowercase English letters.\n1 <= queries.length <= 3 * 104\nqueries[i] = [li, ri]\n0 <= li <= ri < s.length\n\n",
    "starterCode": "class Solution:\n    def sameEndSubstringCount(self, s: str, queries: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "s = \"abcaab\", queries = [[0,0],[1,4],[2,5],[0,5]]",
        "output": "[1, 5, 5, 10]"
      },
      {
        "input": "s = \"abcabcabc\", queries = [[0,2],[3,5],[6,8],[0,8]]",
        "output": "[3, 3, 3, 18]"
      },
      {
        "input": "s = \"xyzxyz\", queries = [[0,2],[3,5],[0,5]]",
        "output": "[3, 3, 9]"
      },
      {
        "input": "s = \"aabbcc\", queries = [[0,2],[3,5],[0,5]]",
        "output": "[4, 4, 9]"
      },
      {
        "input": "s = \"xyz\", queries = [[0,0],[0,1],[0,2]]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "s = \"xyzxyzxyz\", queries = [[0,0],[1,1],[2,2],[0,2],[3,5],[6,8],[0,8]]",
        "output": "[1, 1, 1, 3, 3, 3, 18]"
      },
      {
        "input": "s = \"abcabc\", queries = [[0,5],[1,4],[2,3]]",
        "output": "[9, 5, 2]"
      },
      {
        "input": "s = \"aaaa\", queries = [[0,0],[0,1],[0,2],[0,3]]",
        "output": "[1, 3, 6, 10]"
      },
      {
        "input": "s = \"abcd\", queries = [[0,3]]",
        "output": "[4]"
      },
      {
        "input": "s = \"abcdefg\", queries = [[0,6],[1,5],[2,4]]",
        "output": "[7, 5, 3]"
      },
      {
        "input": "s = \"aaaa\", queries = [[0,3],[1,2],[2,2]]",
        "output": "[10, 3, 1]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\", queries = [[0,5],[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[35,40],[40,45],[45,50],[0,50]]",
        "output": "[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 459]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\", queries = [[0,25],[26,51],[0,51],[10,20],[15,35],[20,40],[40,51]]",
        "output": "[26, 26, 78, 11, 21, 21, 12]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,25],[26,51],[52,77],[78,103],[104,129],[130,155]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", queries = [[0,50],[1,49],[2,48],[3,47],[4,46]]",
        "output": "[1326, 1225, 1128, 1035, 946]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\", queries = [[0,35],[1,10],[11,20],[21,30],[31,35],[0,9],[10,19]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"mississippi\", queries = [[0,4],[1,3],[4,5],[2,10],[0,10]]",
        "output": "[7, 4, 2, 19, 24]"
      },
      {
        "input": "s = \"zxyxzyzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxz\", queries = [[0,100],[10,90],[20,80],[30,70],[40,60],[50,50],[0,50],[50,100]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aaaaaaa\", queries = [[0,6],[1,5],[2,4],[0,3],[3,6],[0,4],[4,6]]",
        "output": "[28, 15, 6, 10, 10, 15, 6]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", queries = [[0,0],[1,1],[2,2],[25,25],[0,25],[1,24],[2,23],[3,22],[4,21],[5,20],[6,19],[7,18],[8,17],[9,16],[10,15],[11,14],[12,13]]",
        "output": "[1, 1, 1, 1, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzz\", queries = [[0,5],[6,11],[0,11],[5,10],[0,13],[1,12]]",
        "output": "[21, 21, 78, 21, 105, 78]"
      },
      {
        "input": "s = \"ababababababab\", queries = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[0,11],[1,10],[2,9]]",
        "output": "[2, 2, 2, 2, 2, 2, 42, 30, 20]"
      },
      {
        "input": "s = \"abcdabcdabcdabcd\", queries = [[0,3],[4,7],[8,11],[12,15],[0,15],[1,14],[2,13],[3,12]]",
        "output": "[4, 4, 4, 4, 40, 32, 24, 18]"
      },
      {
        "input": "s = \"abababababababababa\", queries = [[0,19],[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,19]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abacabadabacaba\", queries = [[0,5],[1,10],[5,13],[0,14],[3,7],[8,11]]",
        "output": "[10, 23, 18, 50, 6, 5]"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefg\", queries = [[0,47],[1,46],[2,45],[3,44],[4,43],[5,42],[6,41],[7,40],[8,39]]",
        "output": "[189, 175, 161, 147, 135, 123, 111, 100, 90]"
      },
      {
        "input": "s = \"abracadabra\", queries = [[0,10],[1,8],[2,7],[3,6],[4,5],[0,5],[5,10]]",
        "output": "[23, 12, 9, 5, 2, 9, 9]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyza\", queries = [[0,25],[1,24],[2,23],[3,22],[4,21],[5,20],[6,19],[7,18],[8,17]]",
        "output": "[26, 24, 22, 20, 18, 16, 14, 12, 10]"
      },
      {
        "input": "s = \"abacabadabacaba\", queries = [[0,10],[3,12],[5,8],[7,14],[0,14],[1,13],[2,11]]",
        "output": "[29, 22, 5, 15, 50, 35, 22]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", queries = [[0,25],[5,20],[10,15],[0,10],[15,25],[5,10]]",
        "output": "[26, 16, 6, 11, 11, 6]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,10],[11,20],[21,30],[31,40],[41,50],[51,60]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabb\", queries = [[0,5],[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[35,40],[40,45],[45,50],[0,50]]",
        "output": "[13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 676]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", queries = [[0,30],[5,25],[10,20],[15,30],[0,15],[20,30]]",
        "output": "[496, 231, 66, 136, 136, 66]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\", queries = [[0,59],[60,119],[120,179],[180,239],[240,299],[300,359],[0,359]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aaaaaaaaaa\", queries = [[0,0],[1,1],[2,2],[0,2],[1,3],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9]]",
        "output": "[1, 1, 1, 6, 6, 10, 15, 21, 28, 36, 45, 55]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", queries = [[0,5],[5,10],[10,15],[15,20],[20,25],[0,25]]",
        "output": "[21, 21, 21, 21, 21, 351]"
      },
      {
        "input": "s = \"abacabadabacaba\", queries = [[0,14],[2,10],[5,7],[8,12],[0,6]]",
        "output": "[50, 20, 3, 8, 14]"
      },
      {
        "input": "s = \"abcabcabcabcabc\", queries = [[0,14],[1,13],[2,12],[0,7],[7,14],[3,11],[4,10],[0,10],[5,15],[10,20],[0,20]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", queries = [[0,25],[0,12],[13,25],[0,5],[20,25],[10,15],[5,10],[15,20]]",
        "output": "[26, 13, 13, 6, 6, 6, 6, 6]"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbcccccccccc\", queries = [[0,9],[10,19],[20,29],[0,29],[5,24],[15,25]]",
        "output": "[55, 55, 55, 165, 85, 36]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzz\", queries = [[0,0],[1,1],[2,2],[0,5],[5,10],[0,14]]",
        "output": "[1, 1, 1, 21, 21, 120]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,49],[1,24],[25,49],[0,24],[25,49],[0,49]]",
        "output": "[75, 35, 37, 37, 37, 75]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzz\", queries = [[0,29],[1,28],[2,27],[0,14],[15,29],[5,20],[10,20],[0,20]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,1],[2,3],[4,5],[24,25],[0,25],[1,24],[2,23],[3,22],[4,21],[5,20],[6,19],[7,18],[8,17],[9,16],[10,15],[11,14],[12,13],[0,19],[1,18],[2,17],[3,16],[4,15],[5,14],[6,13],[7,12],[8,11],[9,10]]",
        "output": "[3, 3, 3, 3, 39, 35, 33, 29, 27, 23, 21, 17, 15, 11, 9, 5, 3, 30, 26, 24, 20, 18, 14, 12, 8, 6, 2]"
      },
      {
        "input": "s = \"aaaabbbbcccc\", queries = [[0,3],[4,7],[8,11],[0,11],[1,10],[2,9]]",
        "output": "[10, 10, 10, 30, 22, 16]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", queries = [[0,0],[1,1],[25,25],[0,25],[5,15],[10,20],[15,25]]",
        "output": "[1, 1, 1, 26, 11, 11, 11]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,25],[26,51],[52,77],[78,103],[0,103]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"ababababab\", queries = [[0,0],[1,1],[2,2],[0,9],[1,8],[2,7],[3,6],[4,5]]",
        "output": "[1, 1, 1, 30, 20, 12, 6, 2]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", queries = [[0,25],[1,24],[2,23],[3,22],[4,21]]",
        "output": "[26, 24, 22, 20, 18]"
      },
      {
        "input": "s = \"mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\", queries = [[0,100],[10,90],[20,80],[30,70],[40,60],[50,50],[0,50],[50,100]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", queries = [[0,25],[0,12],[12,25],[5,15],[10,20],[0,20],[20,25]]",
        "output": "[26, 13, 14, 11, 11, 21, 6]"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaa\", queries = [[0,29],[5,15],[10,20],[15,25],[20,29]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abacabadabacaba\", queries = [[0,4],[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15],[0,14]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"xyzyzyzyzyzyzyz\", queries = [[0,2],[3,5],[6,8],[9,11],[12,14],[15,17],[0,17],[1,16],[2,15]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiii\", queries = [[0,3],[4,7],[8,11],[12,15],[16,19],[20,23],[24,27],[28,31],[0,31]]",
        "output": "[10, 10, 10, 10, 10, 10, 10, 10, 80]"
      },
      {
        "input": "s = \"aaaaabbbbbaaaa\", queries = [[0,11],[0,4],[5,9],[10,11],[0,5],[5,10],[0,9],[1,8],[2,7],[3,6]]",
        "output": "[43, 15, 15, 3, 16, 16, 30, 20, 12, 6]"
      },
      {
        "input": "s = \"abcabcabcabc\", queries = [[0,11],[1,10],[2,9],[3,8],[4,7],[5,6]]",
        "output": "[30, 22, 15, 9, 5, 2]"
      },
      {
        "input": "s = \"abacabadabacaba\", queries = [[0,14],[1,13],[2,12],[0,7],[7,14],[3,11],[4,10],[0,10]]",
        "output": "[50, 35, 28, 15, 15, 17, 14, 29]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzz\", queries = [[0,0],[1,1],[2,2],[0,2],[1,3],[2,4],[0,29]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", queries = [[0,25],[26,50],[51,75],[76,100],[101,125],[126,150],[151,175],[176,200],[201,225],[226,250],[0,250]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\", queries = [[0,25],[26,51],[0,51],[13,25],[28,40],[10,30]]",
        "output": "[26, 26, 78, 13, 13, 21]"
      },
      {
        "input": "s = \"abacabadabacaba\", queries = [[0,14],[1,3],[2,12],[5,10],[0,7],[8,14],[0,1],[1,2],[2,3]]",
        "output": "[50, 3, 28, 10, 15, 14, 2, 2, 2]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", queries = [[0,25],[0,0],[25,25],[0,10],[10,20],[20,25]]",
        "output": "[26, 1, 1, 11, 11, 6]"
      },
      {
        "input": "s = \"aaaaaaa\", queries = [[0,6],[1,5],[2,4],[0,3],[3,6],[0,1],[5,6]]",
        "output": "[28, 15, 6, 10, 10, 3, 3]"
      },
      {
        "input": "s = \"abccbaabccbaabccbaabccba\", queries = [[0,5],[6,11],[12,17],[18,23],[24,29],[0,29],[5,14],[10,19],[15,24]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"bbaabbaabb\", queries = [[0,9],[1,8],[2,7],[3,6],[4,5],[0,5],[5,9]]",
        "output": "[31, 20, 13, 6, 3, 13, 9]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzz\", queries = [[0,29],[1,28],[2,27],[3,26],[4,25],[0,25],[5,24],[6,23],[7,22],[8,21],[9,20],[10,19],[11,18],[12,17],[13,16],[14,15]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmqwertyuiop\", queries = [[0,9],[10,19],[20,29],[0,19],[10,29],[0,29],[5,15]]",
        "output": "[10, 10, 10, 20, 20, 34, 11]"
      },
      {
        "input": "s = \"aaaaabbbbbcccccdddddeeeeeffffffggggg\", queries = [[0,4],[5,9],[10,14],[15,19],[20,24],[25,29],[30,34],[35,39],[40,44],[45,49]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aabbaabbaabb\", queries = [[0,11],[1,5],[6,10],[0,4],[7,11],[3,7]]",
        "output": "[42, 9, 9, 9, 9, 9]"
      },
      {
        "input": "s = \"abcabcabcabc\", queries = [[0,2],[3,5],[6,8],[9,11],[0,11],[1,10]]",
        "output": "[3, 3, 3, 3, 30, 22]"
      },
      {
        "input": "s = \"abacabacabacabacabacaba\", queries = [[0,0],[1,1],[2,2],[0,2],[3,5],[6,8],[0,8],[9,11],[12,14],[15,17],[18,20],[0,20]]",
        "output": "[1, 1, 1, 4, 3, 4, 21, 3, 4, 3, 4, 96]"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\", queries = [[0,9],[10,19],[20,29],[30,39],[40,49],[50,59],[60,69],[70,79],[80,89],[90,99],[0,99]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abracadabra\", queries = [[0,10],[1,5],[5,9],[0,4],[6,10],[2,8],[0,8]]",
        "output": "[23, 6, 6, 6, 6, 10, 16]"
      },
      {
        "input": "s = \"abacabadabacabaabacabadabacaba\", queries = [[0,7],[8,14],[15,21],[22,28],[0,28],[7,21]]",
        "output": "[15, 14, 14, 11, 169, 50]"
      },
      {
        "input": "s = \"aaaaaaaabbbbbbbbcccccccc\", queries = [[0,7],[8,15],[16,23],[0,15],[8,23],[0,23]]",
        "output": "[36, 36, 36, 72, 72, 108]"
      },
      {
        "input": "s = \"aaaaabbbbbcccccddddd\", queries = [[0,4],[5,9],[10,14],[15,19],[0,9],[5,14],[10,19],[0,14],[5,19],[0,19]]",
        "output": "[15, 15, 15, 15, 30, 30, 30, 45, 45, 60]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabc\", queries = [[0,26],[1,25],[2,24],[3,23],[4,22],[5,21],[6,20],[7,19],[8,18],[9,17],[10,16],[11,15],[12,14],[13,13]]",
        "output": "[135, 117, 100, 84, 70, 57, 45, 35, 26, 18, 12, 7, 3, 1]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabc\", queries = [[0,5],[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[0,35]]",
        "output": "[9, 9, 9, 9, 9, 9, 9, 234]"
      },
      {
        "input": "s = \"ababababab\", queries = [[0,9],[1,8],[2,7],[3,6],[4,5]]",
        "output": "[30, 20, 12, 6, 2]"
      },
      {
        "input": "s = \"aaaaabbbbbcccccdddddeeeee\", queries = [[0,4],[5,9],[10,14],[15,19],[20,24],[0,24]]",
        "output": "[15, 15, 15, 15, 15, 75]"
      }
    ]
  },
  {
    "id": 1239,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Array",
      "String",
      "Backtracking"
    ],
    "problemDescription": "You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.\nReturn the maximum possible length of s.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nExample 1:\n\nInput: arr = [\"un\",\"iq\",\"ue\"]\nOutput: 4\nExplanation: All the valid concatenations are:\n- \"\"\n- \"un\"\n- \"iq\"\n- \"ue\"\n- \"uniq\" (\"un\" + \"iq\")\n- \"ique\" (\"iq\" + \"ue\")\nMaximum length is 4.\n\nExample 2:\n\nInput: arr = [\"cha\",\"r\",\"act\",\"ers\"]\nOutput: 6\nExplanation: Possible longest valid concatenations are \"chaers\" (\"cha\" + \"ers\") and \"acters\" (\"act\" + \"ers\").\n\nExample 3:\n\nInput: arr = [\"abcdefghijklmnopqrstuvwxyz\"]\nOutput: 26\nExplanation: The only string in arr has all 26 characters.\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 16\n1 <= arr[i].length <= 26\narr[i] contains only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def maxLength(self, arr: List[str]) -> int:\n        ",
    "testCases": [
      {
        "input": "arr = [\"abcd\",\"abef\",\"cdgh\",\"cdef\"]",
        "output": "8"
      },
      {
        "input": "arr = [\"un\",\"iq\",\"ue\"]",
        "output": "4"
      },
      {
        "input": "arr = [\"abcdefghijklmnopqrstuvwxyz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"unique\",\"strings\",\"with\",\"no\",\"common\",\"characters\"]",
        "output": "6"
      },
      {
        "input": "arr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\"]",
        "output": "16"
      },
      {
        "input": "arr = [\"abcd\",\"efgh\",\"ijkl\",\"mnop\",\"qrst\",\"uvwx\",\"yz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"ab\",\"cd\",\"ef\",\"gh\",\"ij\",\"kl\",\"mn\",\"op\",\"qr\",\"st\",\"uv\",\"wx\",\"yz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"zzzz\",\"zzyy\",\"xxzz\",\"xxyy\",\"abcd\"]",
        "output": "4"
      },
      {
        "input": "arr = [\"aaaa\",\"bbbb\",\"cccc\",\"dddd\",\"eeee\",\"ffff\",\"gggg\",\"hhhh\",\"iiii\",\"jjjj\"]",
        "output": "0"
      },
      {
        "input": "arr = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"xyy\",\"zmk\"]",
        "output": "3"
      },
      {
        "input": "arr = [\"a\",\"ab\",\"abc\",\"abcd\",\"abcde\"]",
        "output": "5"
      },
      {
        "input": "arr = [\"abc\",\"de\",\"fgh\",\"ij\",\"klm\",\"nop\",\"qrs\",\"tuv\",\"wxy\",\"z\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"a\",\"b\",\"c\"]",
        "output": "3"
      },
      {
        "input": "arr = [\"abcd\",\"aabbccdd\",\"abcde\",\"mnopqr\",\"stuvwx\",\"yz\"]",
        "output": "19"
      },
      {
        "input": "arr = [\"aabbcc\",\"ddeeff\",\"gghhiijj\"]",
        "output": "0"
      },
      {
        "input": "arr = [\"cha\",\"r\",\"act\",\"ers\"]",
        "output": "6"
      },
      {
        "input": "arr = [\"aabbcc\",\"ddeeff\",\"gghhii\",\"jklmno\",\"pqqrst\",\"uvwxyz\"]",
        "output": "12"
      },
      {
        "input": "arr = [\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"]",
        "output": "0"
      },
      {
        "input": "arr = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\", \"uvwx\", \"yzab\", \"cdef\", \"ghij\", \"klmn\", \"opqr\", \"stuv\", \"wxyz\", \"abcd\", \"efgh\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"abcdefghijk\", \"lmnopqrst\", \"uvwxyzabc\", \"defghijkl\", \"mnopqrstu\", \"vwxyzabcd\", \"efghijklm\", \"nopqrstuv\", \"wxyzabcde\", \"fghijklmn\", \"opqrstuvw\", \"xyzabcdefg\", \"ghijklmno\", \"pqrstuvwx\", \"yzabcdefgh\", \"hijklmnop\", \"qrstuvwxy\", \"zabcdefghij\"]",
        "output": "20"
      },
      {
        "input": "arr = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"xyzz\",\"abxy\",\"mnop\",\"qrst\",\"uvwz\",\"mnop\",\"qrst\",\"uvwz\",\"mnop\",\"qrst\",\"uvwz\",\"mnop\",\"qrst\",\"uvwz\",\"mnop\",\"qrst\"]",
        "output": "16"
      },
      {
        "input": "arr = [\"aaa\",\"bbb\",\"ccc\",\"ddd\",\"eee\",\"fff\",\"ggg\",\"hhh\",\"iii\",\"jjj\",\"kkk\",\"lll\",\"mmm\",\"nnn\",\"ooo\",\"ppp\"]",
        "output": "0"
      },
      {
        "input": "arr = [\"ab\", \"bc\", \"cd\", \"de\", \"ef\", \"fg\", \"gh\", \"hi\", \"ij\", \"jk\", \"kl\", \"lm\", \"mn\", \"no\", \"op\", \"pq\", \"qr\", \"rs\", \"st\", \"tu\", \"uv\", \"vw\", \"wx\", \"xy\", \"yz\", \"za\", \"bz\", \"cy\", \"dx\", \"ew\", \"fv\", \"gu\", \"ht\", \"is\", \"jr\", \"kq\", \"lp\", \"mo\", \"np\", \"oq\", \"pr\", \"qs\", \"rt\", \"su\", \"tv\", \"uw\", \"vx\", \"wy\", \"xz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"unique\",\"strings\",\"with\",\"distinct\",\"chars\",\"in\",\"each\",\"subsequence\"]",
        "output": "7"
      },
      {
        "input": "arr = [\"abcd\",\"efgh\",\"ijkl\",\"mnop\",\"qrst\",\"uvwx\",\"yzab\",\"cdef\",\"ghij\",\"klmn\",\"opqr\",\"stuv\",\"wxyz\",\"mnop\",\"qrst\",\"uvwxy\"]",
        "output": "25"
      },
      {
        "input": "arr = [\"xyz\", \"uvw\", \"tuv\", \"stu\", \"rst\", \"qrs\", \"pqr\", \"opq\", \"nop\", \"mno\", \"lmn\", \"klm\", \"jkl\", \"ikl\", \"ihg\", \"fgh\"]",
        "output": "18"
      },
      {
        "input": "arr = [\"xyz\", \"uvw\", \"tuv\", \"stu\", \"rst\", \"qrs\", \"pqr\", \"opq\", \"nop\", \"mno\", \"lmo\", \"kln\", \"jkl\", \"ihg\", \"fgh\", \"efg\", \"def\", \"cde\", \"bcd\", \"abc\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"aabb\",\"ccdd\",\"eeff\",\"gghh\",\"iijj\",\"kklm\",\"nopq\",\"rstu\",\"vwxy\",\"zz\"]",
        "output": "12"
      },
      {
        "input": "arr = [\"abcdef\",\"ghijkl\",\"mnopqr\",\"stuvwx\",\"yzabcd\",\"efghij\",\"klmnop\",\"qrstuv\",\"wxyza\",\"bcdefg\",\"hijklm\",\"nopqrs\",\"tuvwxy\",\"zabcde\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abcdexyz\",\"mnop\",\"qrstuvw\",\"zabcd\",\"ef\",\"ghijkl\",\"mnopqr\",\"stuv\",\"wxyz\",\"abcdefghij\",\"klmnopqr\",\"stuvwxyz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abcdefgh\", \"ijklmnop\", \"qrstuvwxyz\", \"abcdefgh\", \"ijklmnop\", \"qrstuvwxyz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abcd\", \"defg\", \"hijk\", \"lmno\", \"pqrs\", \"tuvw\", \"xyza\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"xyz\",\"xy\",\"xz\",\"yz\",\"x\",\"y\",\"z\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"ab\",\"ac\",\"ad\",\"ae\",\"af\",\"ag\",\"ah\",\"ai\",\"aj\",\"ak\",\"al\",\"am\",\"an\",\"ao\",\"ap\",\"aq\",\"ar\",\"as\",\"at\",\"au\",\"av\",\"aw\",\"ax\",\"ay\",\"az\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"a\",\"b\",\"c\",\"d\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abcd\",\"efgh\",\"ijkl\",\"mnop\",\"qrst\",\"uvwx\",\"yzab\",\"cded\",\"efgi\",\"hjkl\",\"mnop\",\"qrst\",\"uvwz\",\"abcd\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"abcdef\",\"ghijkl\",\"mnopqr\",\"stuvwx\",\"yz\",\"abcdefghijklmnopqrstuvwxyz\",\"abcdef\",\"ghijkl\",\"mnopqr\",\"stuvwx\",\"yz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]",
        "output": "9"
      },
      {
        "input": "arr = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"zabcd\", \"efghi\", \"jklmn\", \"opqrs\", \"tuvwx\", \"yzabc\", \"defgh\"]",
        "output": "25"
      },
      {
        "input": "arr = [\"abcd\",\"efgh\",\"ijkl\",\"mnop\",\"qrst\",\"uvwx\",\"yzab\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"abcdefghijklmnopqrstuvwxyz\",\"zyxwvutsrqponmlkjihgfedcba\",\"abcdefghij\",\"klmnopqr\",\"stuvwxyz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abcd\",\"efgh\",\"ijkl\",\"mnop\",\"qrst\",\"uvw\",\"xyz\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]",
        "output": "Execution timed out"
      },
      {
        "input": "arr = [\"aaaaa\",\"bbbbb\",\"ccccc\",\"ddddd\",\"eeeee\",\"fffff\"]",
        "output": "0"
      },
      {
        "input": "arr = [\"xyz\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"ab\",\"cd\",\"ef\",\"gh\",\"ij\",\"kl\",\"mn\",\"op\",\"qr\",\"st\",\"uv\",\"wx\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"zyxwvutsrqpomnlkjihgfedcba\",\"abcdefghijklmnopqrstuvwxyz\",\"mnopqrstuvwxyza\",\"bcdefghijklmnopqr\",\"stuvwxyzabcde\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"aaaaa\",\"bbbbb\",\"ccccc\",\"ddddd\",\"eeeee\",\"ffffff\",\"ggggg\"]",
        "output": "0"
      },
      {
        "input": "arr = [\"abcd\", \"def\", \"ghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"abcd\",\"efgh\",\"abcd\",\"efgh\",\"ijkl\",\"mnop\",\"ijkl\",\"mnop\",\"qrst\",\"uvwx\",\"qrst\",\"uvwx\",\"yz\",\"yz\",\"abcd\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"aaaa\",\"bbbb\",\"cccc\",\"dddd\",\"eeee\",\"ffff\",\"gggg\",\"hhhh\"]",
        "output": "0"
      },
      {
        "input": "arr = [\"abcd\",\"abef\",\"acgh\",\"adei\",\"afjk\",\"aglm\",\"ahno\",\"aipq\",\"arst\",\"auvw\",\"axyz\"]",
        "output": "4"
      },
      {
        "input": "arr = [\"abcdefgh\", \"ijklmnop\", \"qrstuvwxyz\", \"abcdefgh\", \"ijklmnop\", \"qrstuvwxyz\", \"abcdefgh\", \"ijklmnop\", \"qrstuvwxyz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abcdef\",\"ghijkl\",\"mnopqr\",\"stuvwx\",\"yz\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abc\",\"defgh\",\"ijkl\",\"mnopqr\",\"stuvwx\",\"yz\",\"abcdefgh\",\"ijklmnop\",\"qrstuvwx\",\"yzab\",\"cdefghij\",\"klmnopqr\",\"stuvwx\",\"yz\",\"abcdef\",\"ghijklmnop\",\"qrstuvwx\",\"yzab\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abcdefgh\", \"yzabcd\", \"efghij\", \"mnopqr\", \"stuvwx\", \"qrstuv\", \"wxyzab\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"long\", \"strings\", \"with\", \"repeated\", \"characters\", \"are\", \"not\", \"allowed\", \"in\", \"this\", \"problem\"]",
        "output": "11"
      },
      {
        "input": "arr = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\", \"yz\", \"wxy\", \"vwx\", \"uwv\", \"tuv\", \"stu\", \"rst\", \"qrs\", \"pqr\", \"opq\", \"nop\", \"mno\", \"lmn\", \"kln\", \"jkl\", \"ihg\", \"fgh\", \"efg\", \"def\", \"cde\", \"bcd\", \"abc\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"zyxwvutsrqponmlkjihgfedcba\",\"abcdefghijklmnopqrstuvwxy\",\"abcdefghijklmnopqrstuvwxyz\",\"zyxwvutsrqponmlkjihgfedcba\",\"abcdefghijklmnopqrstuvwxy\",\"abcdefghijklmnopqrstuvwxyz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"ab\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\", \"op\", \"qr\", \"st\", \"uv\", \"wx\", \"yz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abcd\",\"ab\",\"cd\",\"ef\",\"gh\",\"ij\",\"kl\",\"mn\",\"op\",\"qr\",\"st\",\"uv\",\"wx\",\"yz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"ab\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\", \"op\", \"qr\", \"st\", \"uv\", \"wx\", \"yz\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]",
        "output": "Execution timed out"
      },
      {
        "input": "arr = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\", \"uvwx\", \"yzab\", \"mnop\", \"qrst\", \"uvwx\", \"yzab\", \"mnop\", \"qrst\", \"uvwx\", \"yzab\", \"mnop\", \"qrst\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"abcdefgh\",\"ijklmnop\",\"qrstuvwxyz\",\"abcdefgh\",\"ijklmnop\",\"qrstuvwxyz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abcdef\",\"ghijkl\",\"mnopqr\",\"stuvwx\",\"yz\",\"abcdefghijklmnop\",\"qrstuvwxyz\",\"abcdefghij\",\"klmnopqr\",\"stuvwxyz\",\"abcdefg\",\"hijklmnop\",\"qrstuvwxy\",\"zabcdefghijk\",\"lmnopqrstuvw\",\"xyzabcdefghi\",\"jklmnopqrstu\",\"vwxyzabcdef\",\"ghijklmnopqrstu\",\"vwxyzabcdefghij\",\"klmnopqrstuvwxyzabc\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"unique\",\"letters\",\"only\",\"here\",\"now\",\"this\",\"that\",\"these\",\"those\",\"other\",\"another\",\"either\",\"neither\",\"both\",\"few\",\"more\",\"most\",\"other\",\"some\",\"any\",\"all\",\"several\",\"both\"]",
        "output": "11"
      },
      {
        "input": "arr = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"zabcd\", \"efghi\", \"jklmn\", \"opqrs\", \"tuvwx\", \"yzabc\"]",
        "output": "25"
      },
      {
        "input": "arr = [\"abcdef\", \"ghijkl\", \"mnopqr\", \"stuvwx\", \"yzabcd\", \"efghij\", \"klmnop\", \"qrstuv\", \"wxyzab\", \"cdefgh\", \"ijklmn\", \"opqrst\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"abcde\",\"fghij\",\"klmno\",\"pqrst\",\"uvwxy\",\"zabcd\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"xyz\",\"abcdef\",\"ghijklm\",\"nopqr\",\"stuv\",\"wxyz\",\"mnop\",\"qrstuv\",\"xyzuvw\",\"abcdefg\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"aaaa\", \"bbbb\", \"cccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\", \"pppp\"]",
        "output": "0"
      },
      {
        "input": "arr = [\"aabbcc\", \"ddeeff\", \"gghhii\", \"jkkllm\", \"nnoopq\", \"rrsstt\", \"uuvvww\", \"xxyyzz\"]",
        "output": "0"
      },
      {
        "input": "arr = [\"abcdefghijklmnop\", \"qrstuvwxyz\", \"abcdefghijkl\", \"mnopqrstuv\", \"wxyzabcdef\", \"ghijklmnop\", \"qrstuvwxy\", \"zabcdefghij\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"abcdefgh\",\"ijklmnop\",\"qrstuvwx\",\"yzabcd\",\"efghij\",\"klmnopqr\",\"stuvwxyz\",\"abcdefg\",\"hijklmnop\",\"qrstuvwxy\",\"zabcdef\",\"ghijklmnopqr\",\"vwxyzabcd\",\"efghijklmno\",\"pqrs\",\"tuvwx\",\"yz\",\"abcd\",\"ef\",\"ghij\",\"klm\",\"nop\",\"qrs\",\"tuv\",\"wxy\",\"z\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"aaaa\", \"bbbb\", \"cccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"]",
        "output": "0"
      },
      {
        "input": "arr = [\"abcdefgh\",\"ijklmnop\",\"qrstuvwx\",\"yzabcd\",\"efghij\",\"klmnop\",\"qrstuv\",\"wxyz\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwxy\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\"]",
        "output": "Execution timed out"
      },
      {
        "input": "arr = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\", \"uvwx\", \"yzab\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"abcd\",\"efgh\",\"ijkl\",\"mnop\",\"qrst\",\"uvwx\",\"yz\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]",
        "output": "Execution timed out"
      },
      {
        "input": "arr = [\"abcdexyz\",\"mnopqr\",\"stuvwx\",\"yzabcd\",\"efghij\",\"klmno\",\"pqrst\",\"uvwxy\",\"zabcde\",\"fghijk\",\"lmnopq\",\"rstuvw\",\"xyzabc\",\"defghi\",\"jklmno\",\"pqrstu\",\"vwxyz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"ab\",\"cd\",\"ef\",\"gh\",\"ij\",\"kl\",\"mn\",\"op\",\"qr\",\"st\",\"uv\",\"wx\",\"yz\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]",
        "output": "Execution timed out"
      },
      {
        "input": "arr = [\"zyxwvutsrqponmlkjihgfedcba\", \"abcdefghijklmnopqrstuvwxyz\", \"zyxwvutsrqponmlkjihgfedcba\", \"abcdefghijklmnopqrstuvwxyz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"unique\", \"chars\", \"only\", \"here\", \"subseq\", \"concat\", \"maximum\", \"length\", \"string\", \"concatenation\"]",
        "output": "9"
      },
      {
        "input": "arr = [\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\",\"zzyyxxwwvvuuttssrrqqppoonnmmllkkjjiihhggffeeddccbbaa\",\"mnopqrstuvwxyzmnopqrstuvwxyzmnopqrstuvwxyz\",\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd\"]",
        "output": "0"
      },
      {
        "input": "arr = [\"abcdef\", \"ghijkl\", \"mnopqr\", \"stuvwx\", \"yzabcd\", \"efghij\", \"klmno\", \"pqrstu\", \"vwxyz\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"abcde\",\"fghij\",\"klmno\",\"pqrst\",\"uvwxy\",\"zabcd\",\"efghi\",\"jklmn\",\"opqrs\",\"tuvwx\",\"yzabc\",\"defgh\",\"ijklm\",\"nopqr\",\"stuvw\",\"xyzab\",\"cdefg\",\"hijkl\",\"mnopq\",\"rstuv\",\"wxyza\",\"bcdef\",\"ghijk\",\"lmnop\",\"qrstu\",\"vwxyz\"]",
        "output": "25"
      },
      {
        "input": "arr = [\"abcdefgh\",\"ijklmnop\",\"qrstuvwx\",\"yzabcdef\",\"ghijklmn\",\"opqrstuv\",\"wxyzab\",\"cdefghij\",\"klmnopqr\",\"stuvwxy\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"abcdef\", \"ghijkl\", \"mnopqr\", \"stuvwx\", \"yzabcd\", \"efghij\", \"klmnop\", \"qrstuv\"]",
        "output": "24"
      },
      {
        "input": "arr = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\", \"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\", \"uvwx\", \"yzab\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"zyxwvutsrqponmlkjihgfedcba\",\"qazwsxedcrfvtgbyhnujmiklop\",\"plmoknijbuhvgtfrdyecwsxzqa\",\"onmlkjihgfedcbazyxwvutsrqpxz\"]",
        "output": "26"
      },
      {
        "input": "arr = [\"unique\", \"chars\", \"only\", \"here\", \"are\", \"some\", \"strings\", \"with\", \"various\", \"lengths\"]",
        "output": "11"
      },
      {
        "input": "arr = [\"abcdefghij\",\"klmnopqr\",\"stuvwxyz\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwxyz\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]",
        "output": "Execution timed out"
      }
    ]
  },
  {
    "id": 1138,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String"
    ],
    "problemDescription": "On an alphabet board, we start at position (0, 0), corresponding to character\u00a0board[0][0].\\r\n\\r\nHere, board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"], as shown in the diagram below.\\r\n\\r\n\\r\n\\r\nWe may make the following moves:\\r\n\\r\n\\r\n\t'U' moves our position up one row, if the position exists on the board;\\r\n\t'D' moves our position down one row, if the position exists on the board;\\r\n\t'L' moves our position left one column, if the position exists on the board;\\r\n\t'R' moves our position right one column, if the position exists on the board;\\r\n\t'!'\u00a0adds the character board[r][c] at our current position (r, c)\u00a0to the\u00a0answer.\\r\n\\r\n\\r\n(Here, the only positions that exist on the board are positions with letters on them.)\\r\n\\r\nReturn a sequence of moves that makes our answer equal to target\u00a0in the minimum number of moves.\u00a0 You may return any path that does so.\\r\n\\r\n\u00a0\\r\nExample 1:\\r\nInput: target = \"leet\"\\r\nOutput: \"DDR!UURRR!!DDD!\"\\r\nExample 2:\\r\nInput: target = \"code\"\\r\nOutput: \"RR!DDRR!UUL!R!\"\\r\n\\r\n\u00a0\\r\nConstraints:\\r\n\\r\n\\r\n\t1 <= target.length <= 100\\r\n\ttarget consists only of English lowercase letters.\\r\n",
    "starterCode": "class Solution:\n    def alphabetBoardPath(self, target: str) -> str:\n        ",
    "testCases": [
      {
        "input": "target = \"azaz\"",
        "output": "!DDDDD!UUUUU!DDDDD!"
      },
      {
        "input": "target = \"zm\"",
        "output": "DDDDD!UUURR!"
      },
      {
        "input": "target = \"abcde\"",
        "output": "!R!R!R!R!"
      },
      {
        "input": "target = \"leet\"",
        "output": "RDD!UURRR!!DDD!"
      },
      {
        "input": "target = \"zuz\"",
        "output": "DDDDD!U!D!"
      },
      {
        "input": "target = \"abc\"",
        "output": "!R!R!"
      },
      {
        "input": "target = \"zb\"",
        "output": "DDDDD!UUUUUR!"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyzzzzz\"",
        "output": "!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!!!!!"
      },
      {
        "input": "target = \"zz\"",
        "output": "DDDDD!!"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxy\"",
        "output": "!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!"
      },
      {
        "input": "target = \"xyz\"",
        "output": "RRRDDDD!R!LLLLD!"
      },
      {
        "input": "target = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "DDDDD!URRRR!L!L!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!"
      },
      {
        "input": "target = \"zbcd\"",
        "output": "DDDDD!UUUUUR!R!R!"
      },
      {
        "input": "target = \"zdz\"",
        "output": "DDDDD!UUUUURRR!LLLDDDDD!"
      },
      {
        "input": "target = \"a\"",
        "output": "!"
      },
      {
        "input": "target = \"mnopqrstuvwxyzz\"",
        "output": "RRDD!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!!"
      },
      {
        "input": "target = \"zzz\"",
        "output": "DDDDD!!!"
      },
      {
        "input": "target = \"code\"",
        "output": "RR!RRDD!LUU!R!"
      },
      {
        "input": "target = \"zzzzz\"",
        "output": "DDDDD!!!!!"
      },
      {
        "input": "target = \"az\"",
        "output": "!DDDDD!"
      },
      {
        "input": "target = \"algorithms\"",
        "output": "!RDD!U!RRRD!LLD!UUR!RDD!LLUU!D!RD!"
      },
      {
        "input": "target = \"inputs\"",
        "output": "RRRD!D!LLLD!D!URRRR!L!"
      },
      {
        "input": "target = \"hello\"",
        "output": "RRD!URR!LLLDD!!RRR!"
      },
      {
        "input": "target = \"elephant\"",
        "output": "RRRR!LLLDD!UURRR!LLLLDDD!UURR!LLU!RRRDD!RD!"
      },
      {
        "input": "target = \"alphabet\"",
        "output": "!RDD!LD!UURR!LLU!R!RRR!DDD!"
      },
      {
        "input": "target = \"aaaaaaaaaaaabbbbbbbbbbbbccccccccccccddddddddddddeeeeeeeeeeeefffffffffffgggggggggggghhhhhhhhhhhhiiiiiiiiiiiijjjjjjjjjjjjkkkkkkkkkkklllllllllllmmmmmmmmmmmnnnnnnnnnnnoooooooooppppppppppqqqqqqqqqqrrrrrrrrrrssssssssssttttttttttuuuuuuuuuuvvvvvvvvvvwwwwwwwwwxxxyyyyyyyyzzzzzzzz\"",
        "output": "!!!!!!!!!!!!R!!!!!!!!!!!!R!!!!!!!!!!!!R!!!!!!!!!!!!R!!!!!!!!!!!!LLLLD!!!!!!!!!!!R!!!!!!!!!!!!R!!!!!!!!!!!!R!!!!!!!!!!!!R!!!!!!!!!!!!LLLLD!!!!!!!!!!!R!!!!!!!!!!!R!!!!!!!!!!!R!!!!!!!!!!!R!!!!!!!!!LLLLD!!!!!!!!!!R!!!!!!!!!!R!!!!!!!!!!R!!!!!!!!!!R!!!!!!!!!!LLLLD!!!!!!!!!!R!!!!!!!!!!R!!!!!!!!!R!!!R!!!!!!!!LLLLD!!!!!!!!"
      },
      {
        "input": "target = \"qrstuvwxyza\"",
        "output": "RDDD!R!R!R!LLLLD!R!R!R!R!LLLLD!UUUUU!"
      },
      {
        "input": "target = \"minimum\"",
        "output": "RRDD!UR!D!U!LD!LLDD!UURR!"
      },
      {
        "input": "target = \"zxywvutsrqponmlkjihgfedcba\"",
        "output": "DDDDD!URRR!R!LL!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!"
      },
      {
        "input": "target = \"fish\"",
        "output": "D!RRR!DD!LUU!"
      },
      {
        "input": "target = \"snake\"",
        "output": "RRRDDD!U!LLLUU!DD!UURRRR!"
      },
      {
        "input": "target = \"uvwxyz\"",
        "output": "DDDD!R!R!R!R!LLLLD!"
      },
      {
        "input": "target = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "DDDDD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
      },
      {
        "input": "target = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\"",
        "output": "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!R!"
      },
      {
        "input": "target = \"whale\"",
        "output": "RRDDDD!UUU!LLU!RDD!UURRR!"
      },
      {
        "input": "target = \"mnopqrstuvwxyzabcde\"",
        "output": "RRDD!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!UUUUU!R!R!R!R!"
      },
      {
        "input": "target = \"rhythm\"",
        "output": "RRDDD!UU!RRDDD!U!LLUU!D!"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!"
      },
      {
        "input": "target = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "DDDDD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
      },
      {
        "input": "target = \"testcase\"",
        "output": "RRRRDDD!UUU!LDDD!R!LLUUU!LL!RRRDDD!UUUR!"
      },
      {
        "input": "target = \"hellofromtheotherside\"",
        "output": "RRD!URR!LLLDD!!RRR!LLLLU!RRDD!URR!LL!RRD!LLUU!URR!DD!D!LLUU!URR!LLDDD!R!UU!U!R!"
      },
      {
        "input": "target = \"pythonprogramming\"",
        "output": "DDD!RRRRD!U!LLUU!RRD!L!LLLD!RR!URR!LLLU!RDD!LLUUU!RRDD!!UR!D!LLU!"
      },
      {
        "input": "target = \"qpwoeiuytrmnbvcxzlkjhgfdsaz\"",
        "output": "RDDD!L!RRD!UURR!UU!LD!LLLDDD!RRRR!U!LL!U!R!LLUU!DDDD!UUUUR!RDDDD!LLLD!UUUR!L!URRRR!LL!L!L!URRR!DDD!LLLUUU!DDDDD!"
      },
      {
        "input": "target = \"quicksand\"",
        "output": "RDDD!LD!UUURRR!LU!LLDD!RRRD!LLLUUU!RRRDD!UU!"
      },
      {
        "input": "target = \"abacaxabacax\"",
        "output": "!R!L!RR!LL!RRRDDDD!LLLUUUU!R!L!RR!LL!RRRDDDD!"
      },
      {
        "input": "target = \"movesteps\"",
        "output": "RRDD!RR!LLLDD!UUUURRR!LDDD!R!UUU!LLLLDDD!RRR!"
      },
      {
        "input": "target = \"zzazzazzazz\"",
        "output": "DDDDD!!UUUUU!DDDDD!!UUUUU!DDDDD!!UUUUU!DDDDD!!"
      },
      {
        "input": "target = \"ddddddddeeeeeeeeedddddddd\"",
        "output": "RRR!!!!!!!!R!!!!!!!!!L!!!!!!!!"
      },
      {
        "input": "target = \"crocodile\"",
        "output": "RR!DDD!URR!LLUU!RRDD!LUU!D!LLD!UURRR!"
      },
      {
        "input": "target = \"aaabbbcccddd\"",
        "output": "!!!R!!!R!!!R!!!"
      },
      {
        "input": "target = \"microsoft\"",
        "output": "RRDD!UR!LU!DDD!URR!LD!UR!LLLLU!RRRRDD!"
      },
      {
        "input": "target = \"mnopqrstuvwxyza\"",
        "output": "RRDD!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!UUUUU!"
      },
      {
        "input": "target = \"uvwxyzz\"",
        "output": "DDDD!R!R!R!R!LLLLD!!"
      },
      {
        "input": "target = \"board\"",
        "output": "R!RRRDD!LLLLUU!RRDDD!UUUR!"
      },
      {
        "input": "target = \"solution\"",
        "output": "RRRDDD!UR!LLL!LDD!URRRR!LUU!RD!L!"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyzaa\"",
        "output": "!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!UUUUU!!"
      },
      {
        "input": "target = \"qpwoeirutyalskdjfhgzxcvbnm\"",
        "output": "RDDD!L!RRD!UURR!UU!LD!LDD!LLD!URRRR!D!LLLLUUUU!RDD!RRD!LLLU!UURRR!RD!LLLL!RR!L!LDDDD!URRR!LUUUU!LDDDD!UUUU!RRDD!L!"
      },
      {
        "input": "target = \"xyzzzyxyzzz\"",
        "output": "RRRDDDD!R!LLLLD!!!URRRR!L!R!LLLLD!!!"
      },
      {
        "input": "target = \"mnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\"",
        "output": "RRDD!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!URRRR!L!L!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!"
      },
      {
        "input": "target = \"challenge\"",
        "output": "RR!D!LLU!RDD!!UURRR!LDD!LLU!URRR!"
      },
      {
        "input": "target = \"mnopqrstu\"",
        "output": "RRDD!R!R!LLLLD!R!R!R!R!LLLLD!"
      },
      {
        "input": "target = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "DDDDD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
      },
      {
        "input": "target = \"giraffe\"",
        "output": "RD!RR!LDD!LLUUU!D!!URRRR!"
      },
      {
        "input": "target = \"zyxwvutsrqponmlkjihgfedcbaaabbbcccddd\"",
        "output": "DDDDD!URRRR!L!L!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!!!R!!!R!!!R!!!"
      },
      {
        "input": "target = \"dolphin\"",
        "output": "RRR!RDD!LLL!LD!UURR!R!D!"
      },
      {
        "input": "target = \"efficient\"",
        "output": "RRRR!LLLLD!!RRR!LU!RD!UR!LDD!RD!"
      },
      {
        "input": "target = \"hellothere\"",
        "output": "RRD!URR!LLLDD!!RRR!D!LLUU!URR!LLDDD!UUURR!"
      },
      {
        "input": "target = \"thequickbrownfoxjumpsoverthelazydog\"",
        "output": "RRRRDDD!LLUU!URR!LLLDDD!LD!UUURRR!LU!LLDD!UUR!RDDD!URR!LLDD!UUR!LLLU!RRRRD!LDD!UUUR!LLLLDDD!UURR!LLD!RRR!UR!LLLDD!UUUURRR!LLDDD!RR!LLUU!URR!LLLDD!LUU!DDDDD!URRRR!LUUUU!RDD!LLLU!"
      },
      {
        "input": "target = \"mississippi\"",
        "output": "RRDD!UR!DD!!UU!DD!!UU!LLLDD!!UURRR!"
      },
      {
        "input": "target = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "!!R!!R!!R!!R!!LLLLD!!R!!R!!R!!R!!LLLLD!!R!!R!!R!!R!!LLLLD!!R!!R!!R!!R!!LLLLD!!R!!R!!R!!R!!LLLLD!!"
      },
      {
        "input": "target = \"dynamic\"",
        "output": "RRR!RDDDD!LUU!LLLUU!RRDD!UR!LU!"
      },
      {
        "input": "target = \"programming\"",
        "output": "DDD!RR!URR!LLLU!RDD!LLUUU!RRDD!!UR!D!LLU!"
      },
      {
        "input": "target = \"world\"",
        "output": "RRDDDD!UURR!LLD!LU!UURR!"
      },
      {
        "input": "target = \"alphabetboardpath\"",
        "output": "!RDD!LD!UURR!LLU!R!RRR!DDD!LLLUUU!RRRDD!LLLLUU!RRDDD!UUUR!LLLDDD!UUU!RRRRDDD!LLUU!"
      },
      {
        "input": "target = \"zzzz\"",
        "output": "DDDDD!!!!"
      },
      {
        "input": "target = \"jump\"",
        "output": "RRRRD!LLLLDDD!UURR!LLD!"
      },
      {
        "input": "target = \"interview\"",
        "output": "RRRD!D!RD!UUU!LLDDD!LD!UUURR!UR!LLDDDD!"
      },
      {
        "input": "target = \"python\"",
        "output": "DDD!RRRRD!U!LLUU!RRD!L!"
      },
      {
        "input": "target = \"qrstuvwxyzaa\"",
        "output": "RDDD!R!R!R!LLLLD!R!R!R!R!LLLLD!UUUUU!!"
      },
      {
        "input": "target = \"xylophone\"",
        "output": "RRRDDDD!R!LLLUU!RRR!LLLLD!UURR!RRD!L!UUR!"
      },
      {
        "input": "target = \"supercalifragilisticexpialidocious\"",
        "output": "RRRDDD!LLLD!U!UUURRRR!LLDDD!UUU!LL!RDD!URR!LLL!RRDD!LLUUU!RD!RR!LLD!URR!DD!R!LUU!LU!RR!LDDDD!LLLU!UURRR!LLLU!RDD!URR!U!RDD!LLUU!RD!RD!LLLLDD!URRR!"
      },
      {
        "input": "target = \"quickbrownfox\"",
        "output": "RDDD!LD!UUURRR!LU!LLDD!UUR!RDDD!URR!LLDD!UUR!LLLU!RRRRD!LDD!"
      },
      {
        "input": "target = \"complex\"",
        "output": "RR!RRDD!LL!LLD!UR!UURRR!LDDDD!"
      },
      {
        "input": "target = \"hellozworld\"",
        "output": "RRD!URR!LLLDD!!RRR!LLLLDDD!URR!UURR!LLD!LU!UURR!"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyzz\"",
        "output": "!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!!"
      },
      {
        "input": "target = \"tiger\"",
        "output": "RRRRDDD!LUU!LL!URRR!LLDDD!"
      },
      {
        "input": "target = \"lxyzzzz\"",
        "output": "RDD!RRDD!R!LLLLD!!!!"
      },
      {
        "input": "target = \"abcdefghiz\"",
        "output": "!R!R!R!R!LLLLD!R!R!R!LLLDDDD!"
      },
      {
        "input": "target = \"leetcode\"",
        "output": "RDD!UURRR!!DDD!LLUUU!RRDD!LUU!R!"
      },
      {
        "input": "target = \"xyzzyx\"",
        "output": "RRRDDDD!R!LLLLD!!URRRR!L!"
      },
      {
        "input": "target = \"bza\"",
        "output": "R!LDDDDD!UUUUU!"
      },
      {
        "input": "target = \"mnonmlkjihgfedcba\"",
        "output": "RRDD!R!R!L!L!L!L!URRRR!L!L!L!L!URRRR!L!L!L!L!"
      },
      {
        "input": "target = \"algorithm\"",
        "output": "!RDD!U!RRRD!LLD!UUR!RDD!LLUU!D!"
      },
      {
        "input": "target = \"sequence\"",
        "output": "RRRDDD!UUUR!LLLDDD!LD!UUUURRRR!LDD!LUU!RR!"
      },
      {
        "input": "target = \"leetcodeisfun\"",
        "output": "RDD!UURRR!!DDD!LLUUU!RRDD!LUU!R!LD!DD!LLLUU!DDD!UURRR!"
      },
      {
        "input": "target = \"abcdefgHIJKLmnopqrstuvwxyz\"",
        "output": "!R!R!R!R!LLLLD!R!LUUUUUU!R!R!R!R!LLDDDDDDD!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!"
      },
      {
        "input": "target = \"programmingisfun\"",
        "output": "DDD!RR!URR!LLLU!RDD!LLUUU!RRDD!!UR!D!LLU!RR!DD!LLLUU!DDD!UURRR!"
      },
      {
        "input": "target = \"datastructures\"",
        "output": "RRR!LLL!RRRRDDD!LLLLUUU!RRRDDD!R!LL!LLD!UUUURR!RRDDD!LLLLD!URR!UUURR!LDDD!"
      },
      {
        "input": "target = \"zzzzzzzzzz\"",
        "output": "DDDDD!!!!!!!!!!"
      },
      {
        "input": "target = \"example\"",
        "output": "RRRR!LDDDD!LLLUUUU!RRDD!LLD!UR!UURRR!"
      },
      {
        "input": "target = \"mnonmonmnonmo\"",
        "output": "RRDD!R!R!L!L!RR!L!L!R!R!L!L!RR!"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyza\"",
        "output": "!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!R!R!R!R!LLLLD!UUUUU!"
      },
      {
        "input": "target = \"question\"",
        "output": "RDDD!LD!UUUURRRR!LDDD!R!LUU!RD!L!"
      }
    ]
  },
  {
    "id": 939,
    "difficulty": "Medium",
    "tags": [
      "Geometry",
      "Array",
      "Hash Table",
      "Math",
      "Sorting"
    ],
    "problemDescription": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\nReturn the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.\n\u00a0\nExample 1:\n\n\nInput: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]\nOutput: 4\n\nExample 2:\n\n\nInput: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\nOutput: 2\n\n\u00a0\nConstraints:\n\n1 <= points.length <= 500\npoints[i].length == 2\n0 <= xi, yi <= 4 * 104\nAll the given points are unique.\n\n",
    "starterCode": "class Solution:\n    def minAreaRect(self, points: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "points = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]",
        "output": "2"
      },
      {
        "input": "points = [[1,1],[1,3],[3,1],[3,3],[2,2]]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[0,2],[2,2],[2,0],[1,1],[1,0],[0,1],[2,1]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3]]",
        "output": "0"
      },
      {
        "input": "points = [[0,0],[0,40000],[40000,0],[40000,40000],[20000,20000],[10000,10000],[30000,30000],[5000,5000],[35000,35000],[15000,15000],[25000,25000],[500,500],[39500,39500]]",
        "output": "1600000000"
      },
      {
        "input": "points = [[0,0],[10,0],[0,10],[10,10],[5,5],[2,2],[8,8],[3,3],[7,7]]",
        "output": "100"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "0"
      },
      {
        "input": "points = [[0,0],[0,4],[4,0],[4,4],[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[1,4],[4,1],[4,4],[2,2],[3,3],[5,5],[6,6],[7,7],[8,8]]",
        "output": "9"
      },
      {
        "input": "points = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[1,14],[14,1],[7,2]]",
        "output": "0"
      },
      {
        "input": "points = [[1,1],[3,1],[1,3],[3,3],[2,2],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20]]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[0,20],[20,0],[20,20],[5,5],[5,15],[15,5],[15,15],[10,10],[10,15],[15,10],[5,10],[10,5]]",
        "output": "25"
      },
      {
        "input": "points = [[1,1],[1,4],[4,1],[4,4],[2,2],[2,3],[3,2],[3,3],[5,5],[5,6],[6,5],[6,6]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[2,3],[3,1],[4,5],[5,4],[6,6],[7,2],[8,7],[9,3],[10,10]]",
        "output": "0"
      },
      {
        "input": "points = [[0,0],[0,2],[0,4],[2,0],[2,2],[2,4],[4,0],[4,2],[4,4]]",
        "output": "4"
      },
      {
        "input": "points = [[1,1],[1,4],[4,1],[4,4],[2,2],[2,3],[3,2],[3,3],[5,5],[5,7],[7,5],[7,7]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[0,3],[3,0],[3,3],[1,1],[1,2],[2,1],[2,2],[1,3],[3,1]]",
        "output": "1"
      },
      {
        "input": "points = [[1,2],[1,5],[2,1],[2,6],[3,3],[3,8],[4,4],[4,9],[5,5],[5,10],[6,6],[6,11]]",
        "output": "0"
      },
      {
        "input": "points = [[1,1],[1,5],[5,1],[5,5],[2,2],[2,3],[3,2],[3,3],[4,4],[4,6],[6,4],[6,6]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[1,40],[40,1],[40,40],[20,20],[20,30],[30,20],[30,30],[15,15],[15,25],[25,15],[25,25]]",
        "output": "100"
      },
      {
        "input": "points = [[0,0],[0,2],[2,0],[2,2],[1,1],[1,2],[2,1]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40]]",
        "output": "0"
      },
      {
        "input": "points = [[5,5],[5,10],[10,5],[10,10],[15,15],[15,20],[20,15],[20,20],[25,25],[25,30],[30,25],[30,30]]",
        "output": "25"
      },
      {
        "input": "points = [[1,1],[1,10],[10,1],[10,10],[5,5],[2,2],[2,8],[8,2],[8,8],[3,3],[3,6],[6,3],[6,6]]",
        "output": "9"
      },
      {
        "input": "points = [[1,2],[2,1],[3,4],[4,3],[1,4],[4,1],[2,3],[3,2],[5,5],[5,0],[0,5]]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[0,2],[1,1],[1,3],[2,2],[2,4],[3,0],[3,2],[3,4],[4,1],[4,3]]",
        "output": "2"
      },
      {
        "input": "points = [[1,1],[1,5],[5,1],[5,5],[3,3],[3,4],[4,3],[4,4],[2,2],[2,6],[6,2],[6,6],[7,7],[8,8],[9,9],[1,9],[9,1],[1,7],[7,1],[1,8],[8,1]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[1,4],[2,1],[2,2],[2,3],[2,4],[3,1],[3,2],[3,3],[3,4],[4,1],[4,2],[4,3],[4,4]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[0,3],[3,0],[3,3],[1,1],[1,2],[2,1],[2,2],[4,4],[4,5],[5,4],[5,5]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[0,5],[5,0],[5,5],[1,2],[1,3],[4,2],[4,3],[2,1],[2,4],[3,1],[3,4]]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[1,10],[10,1],[10,10],[2,2],[2,9],[9,2],[9,9],[3,3],[3,8],[8,3],[8,8],[4,4],[4,7],[7,4],[7,7],[5,5],[5,6],[6,5],[6,6],[1,6],[6,1],[2,5],[5,2],[3,4],[4,3],[5,4],[4,5]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[0,10000],[10000,0],[10000,10000],[5000,5000],[5000,6000],[6000,5000],[6000,6000]]",
        "output": "1000000"
      },
      {
        "input": "points = [[0,0],[0,2],[2,0],[2,2],[1,1],[3,3],[4,4],[1,4],[4,1]]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[40000,40000],[20000,20000],[10000,10000],[30000,30000],[5000,5000],[25000,25000],[15000,15000],[35000,35000]]",
        "output": "0"
      },
      {
        "input": "points = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[0,2],[1,2],[2,2],[3,2],[4,2],[5,2],[0,3],[1,3],[2,3],[3,3],[4,3],[5,3],[0,4],[1,4],[2,4],[3,4],[4,4],[5,4],[0,5],[1,5],[2,5],[3,5],[4,5],[5,5]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[1,4],[1,7],[4,1],[4,4],[4,7],[7,1],[7,4],[7,7],[10,10],[11,11]]",
        "output": "9"
      },
      {
        "input": "points = [[10,10],[10,15],[15,10],[15,15],[20,20],[20,25],[25,20],[25,25],[5,5],[5,10],[10,5],[10,10]]",
        "output": "0"
      },
      {
        "input": "points = [[1,1],[1,5],[5,1],[5,5],[2,2],[2,3],[3,2],[3,3],[4,4]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]]",
        "output": "0"
      },
      {
        "input": "points = [[1,2],[2,1],[1,3],[3,1],[2,2],[3,2],[2,3],[3,3]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[1,2],[2,1],[2,2],[3,3],[3,4],[4,3],[4,4],[5,5],[5,6],[6,5],[6,6]]",
        "output": "1"
      },
      {
        "input": "points = [[10000,10000],[10000,20000],[20000,10000],[20000,20000],[15000,15000],[5000,5000],[25000,25000]]",
        "output": "100000000"
      },
      {
        "input": "points = [[1,1],[1,5],[5,1],[5,5],[3,3],[3,7],[7,3],[7,7],[2,2],[2,8],[8,2],[8,8]]",
        "output": "16"
      },
      {
        "input": "points = [[0,0],[0,5],[5,0],[5,5],[1,2],[2,1],[3,4],[4,3]]",
        "output": "25"
      },
      {
        "input": "points = [[0,0],[5,0],[0,5],[5,5],[2,2],[3,3],[4,4],[7,7],[8,8],[9,9],[10,10]]",
        "output": "25"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[1,2],[2,2],[3,2],[1,3],[2,3],[3,3],[4,4],[5,4],[6,4],[4,5],[5,5],[6,5],[4,6],[5,6],[6,6]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[1,4],[2,1],[2,4],[3,1],[3,4],[4,1],[4,4],[5,1],[5,4]]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[1,0],[0,1],[2,1],[1,2],[3,2],[2,3],[4,3],[3,4],[5,4],[4,5]]",
        "output": "1"
      },
      {
        "input": "points = [[1000,2000],[2000,3000],[1000,3000],[2000,2000],[1500,2500],[1500,2000],[1000,2500],[2000,2500],[1500,3000]]",
        "output": "250000"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
        "output": "0"
      },
      {
        "input": "points = [[1,1],[1,7],[1,13],[7,1],[7,7],[7,13],[13,1],[13,7],[13,13],[3,3],[3,6],[6,3],[6,6],[9,9],[9,12],[12,9],[12,12]]",
        "output": "9"
      },
      {
        "input": "points = [[1,1],[1,5],[5,1],[5,5],[2,2],[2,4],[4,2],[4,4],[3,3],[3,6],[6,3],[6,6]]",
        "output": "4"
      },
      {
        "input": "points = [[1,1],[1,5],[1,9],[5,1],[5,5],[5,9],[9,1],[9,5],[9,9],[2,2],[2,8],[8,2],[8,8],[4,4],[4,8],[8,4]]",
        "output": "16"
      },
      {
        "input": "points = [[0,0],[0,2],[2,0],[2,2],[4,0],[4,2],[6,0],[6,2],[8,0],[8,2]]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[0,50],[50,0],[50,50],[25,25],[25,35],[35,25],[35,35],[10,10],[10,40],[40,10],[40,40]]",
        "output": "100"
      },
      {
        "input": "points = [[1,1],[2,1],[1,2],[2,2],[3,1],[4,1],[3,2],[4,2],[1,3],[2,3],[3,3],[4,3],[1,4],[2,4],[3,4],[4,4],[5,5]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[0,2],[2,0],[2,2],[1,1],[1,3],[3,1],[3,3],[4,4],[5,5]]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[0,5],[5,0],[5,5],[2,2],[2,3],[3,2],[3,3]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[0,15],[15,0],[15,15],[5,5],[5,10],[10,5],[10,10],[3,3],[3,12],[12,3],[12,12]]",
        "output": "25"
      },
      {
        "input": "points = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3],[4,4],[4,5],[5,4],[5,5]]",
        "output": "1"
      },
      {
        "input": "points = [[5,5],[5,8],[8,5],[8,8],[10,10],[10,15],[15,10],[15,15],[3,3],[3,6],[6,3],[6,6]]",
        "output": "9"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[1,2],[2,2],[3,2],[4,2],[1,3],[2,3],[3,3],[4,3],[1,4],[2,4],[3,4],[4,4],[1,5],[2,5],[3,5],[4,5],[1,6],[2,6],[3,6],[4,6],[1,7],[2,7],[3,7],[4,7],[1,8],[2,8],[3,8],[4,8],[1,9],[2,9],[3,9],[4,9]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[0,10],[10,0],[10,10],[2,2],[2,4],[4,2],[4,4],[3,3],[3,7],[7,3],[7,7]]",
        "output": "4"
      },
      {
        "input": "points = [[10,10],[10,20],[20,10],[20,20],[15,15],[15,25],[25,15],[25,25],[5,5],[5,25],[25,5],[15,10],[10,15]]",
        "output": "25"
      },
      {
        "input": "points = [[1,1],[1,25],[25,1],[25,25],[10,10],[10,15],[15,10],[15,15],[8,8],[8,17],[17,8],[17,17]]",
        "output": "25"
      },
      {
        "input": "points = [[0,0],[0,4],[4,0],[4,4],[1,1],[1,3],[3,1],[3,3]]",
        "output": "4"
      },
      {
        "input": "points = [[1,1],[1,5],[5,1],[5,5],[2,2],[2,4],[4,2],[4,4],[3,3]]",
        "output": "4"
      },
      {
        "input": "points = [[1,1],[1,20],[20,1],[20,20],[5,5],[5,15],[15,5],[15,15],[7,7],[7,13],[13,7],[13,13]]",
        "output": "36"
      },
      {
        "input": "points = [[0,0],[0,5],[5,0],[5,5],[1,1],[1,4],[4,1],[4,4],[2,2],[2,3],[3,2],[3,3]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[4,4],[1,2],[2,1],[3,3],[2,3],[3,2]]",
        "output": "0"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3],[4,4],[5,5]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "0"
      },
      {
        "input": "points = [[0,0],[0,2],[2,0],[2,2],[4,4],[4,6],[6,4],[6,6]]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[0,10],[10,0],[10,10],[2,2],[2,8],[8,2],[8,8],[4,4],[4,6],[6,4],[6,6],[1,5],[5,1],[9,5],[5,9]]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[10,0],[10,10],[0,10],[2,2],[8,2],[2,8],[8,8],[5,5],[3,7],[7,3],[4,6],[6,4]]",
        "output": "36"
      },
      {
        "input": "points = [[0,0],[0,30],[30,0],[30,30],[10,10],[10,20],[20,10],[20,20],[6,6],[6,24],[24,6],[24,24]]",
        "output": "100"
      },
      {
        "input": "points = [[1,1],[1,6],[6,1],[6,6],[2,2],[2,5],[5,2],[5,5],[3,3],[3,4],[4,3],[4,4],[7,7],[7,8],[8,7],[8,8]]",
        "output": "1"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "0"
      },
      {
        "input": "points = [[0,0],[0,10000],[10000,0],[10000,10000],[5000,5000],[2500,2500],[7500,7500],[1000,1000],[9000,9000],[500,500],[9500,9500]]",
        "output": "100000000"
      }
    ]
  },
  {
    "id": 2895,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Sorting"
    ],
    "problemDescription": "You have a certain number of processors, each having 4 cores. The number of tasks to be executed is four times the number of processors. Each task must be assigned to a unique core, and each core can only be used once.\nYou are given an array processorTime representing the time each processor becomes available and an array tasks representing how long each task takes to complete. Return the\u00a0minimum time needed to complete all tasks.\n\u00a0\nExample 1:\n\nInput: processorTime = [8,10], tasks = [2,2,3,1,8,7,4,5]\nOutput: 16\nExplanation:\nAssign the tasks at indices 4, 5, 6, 7 to the first processor which becomes available at time = 8, and the tasks at indices 0, 1, 2, 3 to the second processor which becomes available at time = 10.\u00a0\nThe time taken by the first processor to finish the execution of all tasks is\u00a0max(8 + 8, 8 + 7, 8 + 4, 8 + 5) = 16.\nThe time taken by the second processor to finish the execution of all tasks is\u00a0max(10 + 2, 10 + 2, 10 + 3, 10 + 1) = 13.\n\nExample 2:\n\nInput: processorTime = [10,20], tasks = [2,3,1,2,5,8,4,3]\nOutput: 23\nExplanation:\nAssign the tasks at indices 1, 4, 5, 6 to the first processor and the others to the second processor.\nThe time taken by the first processor to finish the execution of all tasks is max(10 + 3, 10 + 5, 10 + 8, 10 + 4) = 18.\nThe time taken by the second processor to finish the execution of all tasks is max(20 + 2, 20 + 1, 20 + 2, 20 + 3) = 23.\n\n\u00a0\nConstraints:\n\n1 <= n == processorTime.length <= 25000\n1 <= tasks.length <= 105\n0 <= processorTime[i] <= 109\n1 <= tasks[i] <= 109\ntasks.length == 4 * n\n\n",
    "starterCode": "class Solution:\n    def minProcessingTime(self, processorTime: List[int], tasks: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "processorTime = [5,5,5,5], tasks = [1,1,1,1,1,1,1,1]",
        "output": "6"
      },
      {
        "input": "processorTime = [1,2,3,4], tasks = [10,9,8,7,6,5,4,3,2,1]",
        "output": "12"
      },
      {
        "input": "processorTime = [1,3,5], tasks = [9,8,7,6,5,4,3,2,1,0]",
        "output": "10"
      },
      {
        "input": "processorTime = [1000000000,1000000000], tasks = [1000000000,1000000000,1000000000,1000000000]",
        "output": "2000000000"
      },
      {
        "input": "processorTime = [0,0,0,0], tasks = [1,2,3,4,5,6,7,8]",
        "output": "8"
      },
      {
        "input": "processorTime = [1,2,3,4], tasks = [10,9,8,7,6,5,4,3]",
        "output": "13"
      },
      {
        "input": "processorTime = [5,5,5,5], tasks = [1,1,1,1,2,2,2,2]",
        "output": "7"
      },
      {
        "input": "processorTime = [0,0,0,0], tasks = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "processorTime = [1,2,3,4], tasks = [10,20,30,40,5,6,7,8]",
        "output": "43"
      },
      {
        "input": "processorTime = [1000000000], tasks = [1,1,1,1]",
        "output": "1000000001"
      },
      {
        "input": "processorTime = [0,0,0,0], tasks = [1000000000,1000000000,1000000000,1000000000,999999999,999999999,999999999,999999999]",
        "output": "1000000000"
      },
      {
        "input": "processorTime = [1,5,9], tasks = [6,2,3,4,5,1,7,8]",
        "output": "17"
      },
      {
        "input": "processorTime = [10,20], tasks = [2,3,1,2,5,8,4,3]",
        "output": "23"
      },
      {
        "input": "processorTime = [0,0,0,0], tasks = [100,200,300,400,50,60,70,80]",
        "output": "400"
      },
      {
        "input": "processorTime = [8,10], tasks = [2,2,3,1,8,7,4,5]",
        "output": "16"
      },
      {
        "input": "processorTime = [0,0,0,0], tasks = [1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "processorTime = [100, 200, 300, 400, 500], tasks = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "540"
      },
      {
        "input": "processorTime = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "62"
      },
      {
        "input": "processorTime = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "1000000026"
      },
      {
        "input": "processorTime = [1, 3, 5, 7, 9, 11, 13, 15], tasks = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "24"
      },
      {
        "input": "processorTime = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], tasks = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "11"
      },
      {
        "input": "processorTime = [10, 20, 30, 40, 50], tasks = [90, 80, 70, 60, 50, 40, 30, 20, 10, 5]",
        "output": "110"
      },
      {
        "input": "processorTime = [1000000000, 999999999, 999999998, 999999997], tasks = [1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "1000000007"
      },
      {
        "input": "processorTime = [1, 10, 100, 1000], tasks = [1000000, 900000, 800000, 700000, 600000, 500000, 400000, 300000]",
        "output": "1000100"
      },
      {
        "input": "processorTime = [0, 1, 2, 3, 4, 5, 6, 7], tasks = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "8"
      },
      {
        "input": "processorTime = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]",
        "output": "1032"
      },
      {
        "input": "processorTime = [1000, 2000, 3000, 4000, 5000], tasks = [9, 8, 7, 6, 5, 4, 3, 2, 1, 100, 200, 300, 400, 500, 600, 700]",
        "output": "5700"
      },
      {
        "input": "processorTime = [1000000, 2000000, 3000000, 4000000], tasks = [1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "4000004"
      },
      {
        "input": "processorTime = [50, 20, 30, 10], tasks = [120, 50, 30, 20, 10, 80, 60, 40]",
        "output": "150"
      },
      {
        "input": "processorTime = [100, 200, 300, 400, 500], tasks = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800]",
        "output": "1300"
      },
      {
        "input": "processorTime = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], tasks = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "9"
      },
      {
        "input": "processorTime = [1000000, 2000000, 3000000, 4000000], tasks = [999999, 888888, 777777, 666666, 555555, 444444, 333333, 222222, 111111, 100000, 90000, 80000, 70000, 60000, 50000, 40000]",
        "output": "4070000"
      },
      {
        "input": "processorTime = [100, 200, 300, 400, 500, 600, 700, 800], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]",
        "output": "804"
      },
      {
        "input": "processorTime = [10, 20, 30, 40], tasks = [1000000000, 1000000000, 1000000000, 1000000000, 1, 1, 1, 1]",
        "output": "1000000030"
      },
      {
        "input": "processorTime = [1, 100, 200, 300, 400], tasks = [1, 1, 1, 1, 1000000000, 1000000000, 1000000000, 1000000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1000000001"
      },
      {
        "input": "processorTime = [1, 5, 10, 15, 20, 25, 30, 35, 40, 45], tasks = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10]",
        "output": "46"
      },
      {
        "input": "processorTime = [5, 15, 25, 35], tasks = [100, 90, 80, 70, 60, 50, 40, 30]",
        "output": "125"
      },
      {
        "input": "processorTime = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "8004"
      },
      {
        "input": "processorTime = [0, 0, 0, 0, 0], tasks = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990, 999999989, 999999988, 999999987, 999999986, 999999985, 999999984]",
        "output": "999999999"
      },
      {
        "input": "processorTime = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000], tasks = [500000000, 600000000, 700000000, 800000000, 900000000, 1000000000, 1100000000, 1200000000, 1300000000, 1400000000, 1500000000, 1600000000, 1700000000, 1800000000, 1900000000, 2000000000]",
        "output": "7000000000"
      },
      {
        "input": "processorTime = [1, 1, 1, 1, 1, 1, 1, 1], tasks = [1000000, 900000, 800000, 700000, 600000, 500000, 400000, 300000, 200000, 100000, 10000, 1000, 100, 10, 1, 1]",
        "output": "1000001"
      },
      {
        "input": "processorTime = [100, 200, 300, 400, 500, 600], tasks = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240]",
        "output": "640"
      },
      {
        "input": "processorTime = [0, 10, 20, 30, 40, 50], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]",
        "output": "54"
      },
      {
        "input": "processorTime = [10, 20, 30, 40, 50, 60, 70, 80], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]",
        "output": "84"
      },
      {
        "input": "processorTime = [1000, 2000, 3000, 4000], tasks = [1, 1, 1, 1, 100, 100, 100, 100, 10000, 10000, 10000, 10000, 100000, 100000, 100000, 100000]",
        "output": "101000"
      },
      {
        "input": "processorTime = [0, 0, 0, 0, 0, 0, 0, 0], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "16"
      },
      {
        "input": "processorTime = [100, 200, 300, 400, 500, 600, 700, 800], tasks = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "801"
      },
      {
        "input": "processorTime = [5, 15, 25, 35, 45, 55], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "65"
      },
      {
        "input": "processorTime = [0, 1000000000, 500000000, 750000000, 250000000], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]",
        "output": "1000000016"
      },
      {
        "input": "processorTime = [1, 10, 100, 1000, 10000], tasks = [9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990, 9989, 9988, 9987, 9986, 9985, 9984]",
        "output": "19999"
      },
      {
        "input": "processorTime = [1000000000, 2000000000, 3000000000], tasks = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000]",
        "output": "3000008000"
      },
      {
        "input": "processorTime = [1, 1, 1, 1, 1, 1, 1, 1], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]",
        "output": "33"
      },
      {
        "input": "processorTime = [1000000, 1000001, 1000002, 1000003, 1000004, 1000005, 1000006, 1000007, 1000008, 1000009, 1000010, 1000011, 1000012, 1000013, 1000014, 1000015, 1000016, 1000017, 1000018, 1000019], tasks = [999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991, 999990, 999989, 999988, 999987, 999986, 999985, 999984, 999983, 999982, 999981, 999980, 999979, 999978, 999977, 999976, 999975, 999974, 999973, 999972, 999971, 999970]",
        "output": "Error: list index out of range"
      },
      {
        "input": "processorTime = [8, 16, 24, 32, 40, 48, 56, 64, 72, 80], tasks = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "81"
      },
      {
        "input": "processorTime = [10, 20, 30, 40, 50, 60, 70, 80], tasks = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000]",
        "output": "Error: list index out of range"
      },
      {
        "input": "processorTime = [5, 15, 25, 35, 45], tasks = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "1505"
      },
      {
        "input": "processorTime = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124]",
        "output": "187"
      },
      {
        "input": "processorTime = [5,15,25,35,45,55,65,75], tasks = [100,90,80,70,60,50,40,30,20,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "155"
      },
      {
        "input": "processorTime = [0, 0, 0, 0, 0, 0, 0, 0], tasks = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10]",
        "output": "10"
      },
      {
        "input": "processorTime = [5, 5, 5, 5, 5], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]",
        "output": "37"
      },
      {
        "input": "processorTime = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80]",
        "output": "104"
      },
      {
        "input": "processorTime = [1000, 2000, 1500, 2500, 3000, 3500, 4000, 4500, 5000, 5500], tasks = [500, 450, 400, 350, 300, 250, 200, 150, 100, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600]",
        "output": "6070"
      },
      {
        "input": "processorTime = [5, 15, 25, 35, 45], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "49"
      },
      {
        "input": "processorTime = [8, 16, 24, 32, 40, 48, 56, 64, 72, 80], tasks = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200]",
        "output": "208"
      },
      {
        "input": "processorTime = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "104"
      },
      {
        "input": "processorTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "126"
      },
      {
        "input": "processorTime = [100, 200, 150, 250, 300, 350, 400, 450], tasks = [90, 80, 70, 60, 50, 40, 30, 20, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "540"
      },
      {
        "input": "processorTime = [0, 0, 0, 0, 0, 0, 0, 0], tasks = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990, 999999989, 999999988, 999999987, 999999986, 999999985]",
        "output": "1000000000"
      },
      {
        "input": "processorTime = [10, 10, 10, 10], tasks = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993]",
        "output": "1000010"
      },
      {
        "input": "processorTime = [100, 200, 300, 400], tasks = [15, 25, 35, 45, 55, 65, 75, 85]",
        "output": "445"
      },
      {
        "input": "processorTime = [1, 3, 5, 7, 9, 11, 13, 15], tasks = [999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991, 999990, 999989, 999988, 999987, 999986, 999985, 999984]",
        "output": "1000008"
      },
      {
        "input": "processorTime = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], tasks = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70]",
        "output": "195"
      },
      {
        "input": "processorTime = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "140"
      },
      {
        "input": "processorTime = [10, 10, 10, 10], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "26"
      },
      {
        "input": "processorTime = [1, 2, 3, 4, 5, 6, 7, 8], tasks = [8, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9]",
        "output": "21"
      },
      {
        "input": "processorTime = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]",
        "output": "154"
      },
      {
        "input": "processorTime = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000], tasks = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200]",
        "output": "8400"
      },
      {
        "input": "processorTime = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000], tasks = [90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 5000, 4000, 3000, 2000, 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 50, 40, 30, 20, 10, 5]",
        "output": "91000"
      },
      {
        "input": "processorTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "51"
      },
      {
        "input": "processorTime = [50, 25, 0, 75], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "79"
      },
      {
        "input": "processorTime = [0, 1000000000, 500000000, 750000000, 250000000, 100000000], tasks = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990, 999999989, 999999988, 999999987, 999999986, 999999985, 999999984, 999999983, 999999982, 999999981, 999999980, 999999979, 999999978, 999999977, 999999976, 999999975, 999999974, 999999973, 999999972, 999999971, 999999970]",
        "output": "1999999979"
      },
      {
        "input": "processorTime = [1, 2, 3, 4, 5, 6, 7, 8], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "21"
      },
      {
        "input": "processorTime = [1000000000, 2000000000, 3000000000, 4000000000], tasks = [1000000000, 1000000000, 1000000000, 1000000000, 900000000, 900000000, 900000000, 900000000, 800000000, 800000000, 800000000, 800000000, 700000000, 700000000, 700000000, 700000000]",
        "output": "4700000000"
      },
      {
        "input": "processorTime = [50, 40, 30, 20, 10, 0], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]",
        "output": "54"
      },
      {
        "input": "processorTime = [100, 200, 300, 400, 500], tasks = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]",
        "output": "660"
      },
      {
        "input": "processorTime = [100, 200, 300, 400, 500, 600, 700, 800], tasks = [8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000, 900, 800, 700, 600, 500, 400, 300, 200]",
        "output": "8500"
      },
      {
        "input": "processorTime = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "40"
      }
    ]
  },
  {
    "id": 795,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "problemDescription": "Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].\nThe test cases are generated so that the answer will fit in a 32-bit integer.\n\u00a0\nExample 1:\n\nInput: nums = [2,1,4,3], left = 2, right = 3\nOutput: 3\nExplanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].\n\nExample 2:\n\nInput: nums = [2,9,2,5,6], left = 2, right = 8\nOutput: 7\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 109\n0 <= left <= right <= 109\n\n",
    "starterCode": "class Solution:\n    def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [5,2,1], left = 1, right = 5",
        "output": "6"
      },
      {
        "input": "nums = [73,55,36,5,55,14,9,7,72,52], left = 32, right = 69",
        "output": "22"
      },
      {
        "input": "nums = [2,1,4,3], left = 2, right = 3",
        "output": "3"
      },
      {
        "input": "nums = [8,2,4,4,4,6,7,7,7,8], left = 4, right = 6",
        "output": "14"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], left = 15, right = 45",
        "output": "9"
      },
      {
        "input": "nums = [5,2,4,5,5,5,6,5,5,5], left = 4, right = 5",
        "output": "26"
      },
      {
        "input": "nums = [2,9,2,5,6], left = 2, right = 8",
        "output": "7"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5], left = 5, right = 5",
        "output": "15"
      },
      {
        "input": "nums = [10,20,30], left = 25, right = 25",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3], left = 1, right = 3",
        "output": "6"
      },
      {
        "input": "nums = [10,20,30,40,50], left = 20, right = 40",
        "output": "9"
      },
      {
        "input": "nums = [1,2,3,4,5], left = 2, right = 4",
        "output": "9"
      },
      {
        "input": "nums = [5,5,5,5,5], left = 5, right = 5",
        "output": "15"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50], left = 30, right = 80",
        "output": "43"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3, 2, 3, 8, 4, 6, 2, 6, 4, 3, 3, 8, 3, 2, 7, 9, 5, 0, 2, 8, 8, 4, 1, 9, 7, 1, 6, 9, 3, 9, 9, 3, 7, 9, 3, 3, 8, 4, 6, 2, 6, 4, 3, 3, 8, 3, 2, 7, 9, 5], left = 5, right = 10",
        "output": "2028"
      },
      {
        "input": "nums = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], left = 10, right = 20",
        "output": "0"
      },
      {
        "input": "nums = [10, 5, 3, 15, 7, 9, 20, 1], left = 5, right = 10",
        "output": "8"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], left = 1, right = 10",
        "output": "55"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], left = 0, right = 2",
        "output": "210"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], left = 5, right = 15",
        "output": "33"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15], left = 4, right = 12",
        "output": "18"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13], left = 4, right = 10",
        "output": "12"
      },
      {
        "input": "nums = [8, 1, 6, 3, 5, 7, 2, 9, 4, 10], left = 3, right = 7",
        "output": "20"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9], left = 3, right = 6",
        "output": "49"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], left = 3, right = 7",
        "output": "25"
      },
      {
        "input": "nums = [2, 3, 2, 1, 2, 3, 4, 3, 2, 1], left = 2, right = 3",
        "output": "25"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], left = 50, right = 950",
        "output": "45"
      },
      {
        "input": "nums = [3, 2, 1, 4, 3, 5, 4, 3, 2, 1], left = 2, right = 4",
        "output": "23"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], left = 4, right = 8",
        "output": "35"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], left = 1, right = 2",
        "output": "55"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], left = 150, right = 350",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 1], left = 2, right = 2",
        "output": "53"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6], left = 3, right = 8",
        "output": "21"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], left = 1, right = 5",
        "output": "120"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], left = 7, right = 7",
        "output": "55"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], left = 10, right = 100",
        "output": "55"
      },
      {
        "input": "nums = [7, 4, 7, 2, 5, 3, 6], left = 4, right = 6",
        "output": "9"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15], left = 6, right = 12",
        "output": "15"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], left = 5, right = 5",
        "output": "0"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], left = 6, right = 14",
        "output": "25"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0, 1, 2, 3, 4], left = 1, right = 3",
        "output": "27"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], left = 25, right = 75",
        "output": "25"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], left = 1, right = 1",
        "output": "55"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1], left = 2, right = 4",
        "output": "9"
      },
      {
        "input": "nums = [3, 7, 2, 5, 4, 6, 1, 8, 9], left = 4, right = 7",
        "output": "25"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], left = 0, right = 0",
        "output": "55"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], left = 4, right = 8",
        "output": "30"
      },
      {
        "input": "nums = [4, 2, 7, 3, 6, 5, 8, 1, 9, 0], left = 3, right = 7",
        "output": "20"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], left = 400, right = 800",
        "output": "30"
      },
      {
        "input": "nums = [5, 10, 5, 10, 5, 10, 5, 10], left = 5, right = 10",
        "output": "36"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15], left = 5, right = 10",
        "output": "12"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5], left = 5, right = 15",
        "output": "66"
      },
      {
        "input": "nums = [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], left = 10, right = 15",
        "output": "27"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], left = 1, right = 3",
        "output": "55"
      },
      {
        "input": "nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10], left = 3, right = 8",
        "output": "33"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], left = 10, right = 20",
        "output": "165"
      },
      {
        "input": "nums = [8, 7, 6, 5, 4, 3, 2, 1], left = 3, right = 6",
        "output": "18"
      },
      {
        "input": "nums = [3, 2, 1, 2, 3, 2, 1, 2, 3], left = 2, right = 3",
        "output": "43"
      },
      {
        "input": "nums = [7, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], left = 5, right = 9",
        "output": "45"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0], left = 4, right = 8",
        "output": "35"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], left = 5, right = 15",
        "output": "110"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], left = 5, right = 10",
        "output": "45"
      },
      {
        "input": "nums = [1, 4, 2, 3, 5, 6, 7, 8, 9, 10], left = 3, right = 8",
        "output": "34"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5], left = 1, right = 4",
        "output": "44"
      },
      {
        "input": "nums = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], left = 5, right = 10",
        "output": "210"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6], left = 3, right = 5",
        "output": "39"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0], left = 2, right = 8",
        "output": "42"
      },
      {
        "input": "nums = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], left = 8, right = 8",
        "output": "55"
      },
      {
        "input": "nums = [1, 3, 5, 2, 4, 6, 8, 7], left = 2, right = 6",
        "output": "20"
      },
      {
        "input": "nums = [3, 4, 2, 2, 2, 2, 2, 4, 3, 1], left = 2, right = 3",
        "output": "18"
      },
      {
        "input": "nums = [1000000000, 999999999, 1000000000, 999999999, 1000000000], left = 500000000, right = 1500000000",
        "output": "15"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], left = 200, right = 800",
        "output": "35"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], left = 1, right = 1",
        "output": "120"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], left = 15, right = 95",
        "output": "44"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], left = 5, right = 9",
        "output": "55"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], left = 150, right = 450",
        "output": "9"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1], left = 1, right = 3",
        "output": "6"
      },
      {
        "input": "nums = [5, 1, 4, 3, 2, 5, 6, 7, 8, 5], left = 3, right = 6",
        "output": "27"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], left = 250, right = 750",
        "output": "25"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], left = 3, right = 7",
        "output": "25"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], left = 2, right = 4",
        "output": "55"
      },
      {
        "input": "nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], left = 10, right = 15",
        "output": "39"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], left = 2, right = 4",
        "output": "33"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], left = 4, right = 7",
        "output": "22"
      },
      {
        "input": "nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5], left = 5, right = 5",
        "output": "50"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], left = 3, right = 7",
        "output": "25"
      },
      {
        "input": "nums = [3, 7, 2, 5, 9, 1, 6], left = 3, right = 7",
        "output": "11"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], left = 100, right = 1000",
        "output": "55"
      },
      {
        "input": "nums = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], left = 5, right = 10",
        "output": "55"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], left = 5, right = 5",
        "output": "210"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15], left = 4, right = 10",
        "output": "12"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13], left = 2, right = 10",
        "output": "14"
      },
      {
        "input": "nums = [10, 12, 8, 7, 5, 4, 3, 11, 6, 10], left = 5, right = 10",
        "output": "16"
      },
      {
        "input": "nums = [7, 1, 8, 2, 3, 8, 4, 5, 6, 8, 7, 1, 2], left = 3, right = 7",
        "output": "13"
      },
      {
        "input": "nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100], left = 50, right = 150",
        "output": "50"
      },
      {
        "input": "nums = [5, 8, 1, 4, 9, 7, 6, 3, 2, 10], left = 4, right = 7",
        "output": "10"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], left = 5, right = 10",
        "output": "45"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], left = 25, right = 45",
        "output": "7"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], left = 6, right = 8",
        "output": "55"
      },
      {
        "input": "nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3], left = 2, right = 2",
        "output": "8"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], left = 0, right = 1",
        "output": "120"
      }
    ]
  },
  {
    "id": 1171,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Linked List"
    ],
    "problemDescription": "Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.\\r\n\\r\nAfter doing so, return the head of the final linked list.\u00a0 You may return any such answer.\\r\n\n\u00a0\n(Note that in the examples below, all sequences are serializations of ListNode objects.)\nExample 1:\n\nInput: head = [1,2,-3,3,1]\nOutput: [3,1]\nNote: The answer [1,2,1] would also be accepted.\n\nExample 2:\n\nInput: head = [1,2,3,-3,4]\nOutput: [1,2,4]\n\nExample 3:\n\nInput: head = [1,2,3,-3,-2]\nOutput: [1]\n\n\u00a0\nConstraints:\n\nThe given linked list will contain between 1 and 1000 nodes.\nEach node in the linked list has -1000 <= node.val <= 1000.\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeZeroSumSublists(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "head = [0,0,0,0]",
        "output": "None"
      },
      {
        "input": "head = [1,0,1,-1,2]",
        "output": "[1, 2]"
      },
      {
        "input": "head = [1,2,3,4,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [10,20,-30,40,-50,60,-10,-50]",
        "output": "[40, -50]"
      },
      {
        "input": "head = [1,-1,1,-1]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,-3,4]",
        "output": "[1, 2, 4]"
      },
      {
        "input": "head = [1,-1,2,-2,3]",
        "output": "[3]"
      },
      {
        "input": "head = [-1,1,-1,1,-1,1]",
        "output": "None"
      },
      {
        "input": "head = [1]",
        "output": "[1]"
      },
      {
        "input": "head = [-1,1,0]",
        "output": "None"
      },
      {
        "input": "head = [1,-1,2,-2,3,-3,4,-4]",
        "output": "None"
      },
      {
        "input": "head = [1,0,-1,2]",
        "output": "[2]"
      },
      {
        "input": "head = [-1,1]",
        "output": "None"
      },
      {
        "input": "head = [10,5,-5,3,2,-2]",
        "output": "[10, 3]"
      },
      {
        "input": "head = [-1,1,-1,1,-1,1,-1,1]",
        "output": "None"
      },
      {
        "input": "head = [0]",
        "output": "None"
      },
      {
        "input": "head = [0,0,0]",
        "output": "None"
      },
      {
        "input": "head = [-1]",
        "output": "[-1]"
      },
      {
        "input": "head = [1,2,-3,3,1]",
        "output": "[3, 1]"
      },
      {
        "input": "head = [1,2,3,-3,-2]",
        "output": "[1]"
      },
      {
        "input": "head = [10,5,3,-3,-5,-10]",
        "output": "None"
      },
      {
        "input": "head = [1,-1,2,-2,3,-3]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,0,4,0,-4]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "head = [5,6,7,-7,-6,-5]",
        "output": "None"
      },
      {
        "input": "head = [10,20,-10,-10]",
        "output": "[10]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, -5, 4, -4, 3, -3, 2, -2, 1, -1]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,-28,8,9]",
        "output": "[8, 9]"
      },
      {
        "input": "head = [1,2,3,4,-10,1,2,3,4]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "head = [-1, 1, -2, 2, -3, 3, -4, 4, 5, -5]",
        "output": "None"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, -15, 5, 6, 7, 8, -30, 10, 11]",
        "output": "[5, 6, 7, 8, -30, 10, 11]"
      },
      {
        "input": "head = [1,2,3,4,5,-5,-4,-3,-2,-1]",
        "output": "None"
      },
      {
        "input": "head = [10,-5,-5,3,2,-2,1,-1]",
        "output": "[3]"
      },
      {
        "input": "head = [1,2,3,-6,2,3,4,-9,1,2]",
        "output": "[1, 2]"
      },
      {
        "input": "head = [1,2,3,4,5,-10,1,2,3]",
        "output": "[1, 2, 3, 2, 3]"
      },
      {
        "input": "head = [1,2,3,-2,-1,1,4]",
        "output": "[1, 2, 1, 4]"
      },
      {
        "input": "head = [1, 2, 3, -6, 4, -4, 5, 0, -5, 6]",
        "output": "[6]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, -21, 7, 8, 9, 10, -35, 11, 12]",
        "output": "[7, 8, 9, 10, -35, 11, 12]"
      },
      {
        "input": "head = [1,2,3,-6,2,3,4,-9,5]",
        "output": "[5]"
      },
      {
        "input": "head = [100,-50,-50,200,300,-500,400,500,-1000,600]",
        "output": "[400, 500, -1000, 600]"
      },
      {
        "input": "head = [1,2,3,0,0,0,4,5,-9]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "head = [1, -1, 2, -2, 3, -3, 4, -4, 5]",
        "output": "[5]"
      },
      {
        "input": "head = [100,-50,-50,25,-25,50,-50,25,-25,100,-100]",
        "output": "None"
      },
      {
        "input": "head = [10, -10, 20, -20, 30, -30, 40]",
        "output": "[40]"
      },
      {
        "input": "head = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, -5, 5, -3, -2]",
        "output": "[1]"
      },
      {
        "input": "head = [0,0,0,1,2,-3,3,-2,2]",
        "output": "[3]"
      },
      {
        "input": "head = [1, 2, 3, -3, -2, -1, 4, -4, 5]",
        "output": "[5]"
      },
      {
        "input": "head = [1,-1,2,-2,3,-3,4,-4,5]",
        "output": "[5]"
      },
      {
        "input": "head = [1,-2,3,-3,2,-1,4,-4,5,-5]",
        "output": "None"
      },
      {
        "input": "head = [0, 1, 2, 3, 0, -3, -2, -1, 0]",
        "output": "None"
      },
      {
        "input": "head = [1, 2, -3, 3, -2, 2, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8]",
        "output": "[3]"
      },
      {
        "input": "head = [10,-10,20,-20,30,-30,40]",
        "output": "[40]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,-120,16]",
        "output": "[16]"
      },
      {
        "input": "head = [1,2,3,4,-5,5,-6,6,-7,7,8]",
        "output": "[1, 2, 7, 8]"
      },
      {
        "input": "head = [1,2,3,4,-10,5,5,-5]",
        "output": "[5]"
      },
      {
        "input": "head = [1,-1,1,-1,1,-1,1,-1]",
        "output": "None"
      },
      {
        "input": "head = [1,0,-1,0,1,0,-1,0,1]",
        "output": "[1]"
      },
      {
        "input": "head = [5,1,4,-10,20,-5,-15,2,3,4,-9,1]",
        "output": "[1]"
      },
      {
        "input": "head = [1,2,3,4,-10,5,6,7,8,-30,9,10]",
        "output": "[5, 10]"
      },
      {
        "input": "head = [10,-2,3,-1,5,-3,2,-2,1,-1]",
        "output": "[10, 5, -3]"
      },
      {
        "input": "head = [1,2,3,4,5,6,-3,-5,-10,20]",
        "output": "[1, 2, 20]"
      },
      {
        "input": "head = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9]",
        "output": "None"
      },
      {
        "input": "head = [5, 3, -5, 2, -2, 1]",
        "output": "[5, -2, 1]"
      },
      {
        "input": "head = [5,6,-6,7,8,-15,9]",
        "output": "[5, 9]"
      },
      {
        "input": "head = [1,2,3,4,5,6,-21,7,8,9,10,-35,1,2,3]",
        "output": "[2, 3]"
      },
      {
        "input": "head = [1,2,3,4,-10,5,5]",
        "output": "[5, 5]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, -5, -4, -3, -2, -1, 6, 7, 8, -8, -7, -6]",
        "output": "None"
      },
      {
        "input": "head = [5,6,7,-18,19,20,-39,21,22,23,-65,24]",
        "output": "[21, 22, 23, -65, 24]"
      },
      {
        "input": "head = [100,-50,-50,200,-100,-100,300,-200,-200,400]",
        "output": "[300]"
      },
      {
        "input": "head = [1,-1,2,-2,3,-3,4,-4,5,-5,6,-6,7,-7,8,-8,9,-9]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,5,6,-21,7,8,9]",
        "output": "[7, 8, 9]"
      },
      {
        "input": "head = [5, -5, 5, -5, 5, -5]",
        "output": "None"
      },
      {
        "input": "head = [0,0,0,1,2,3,-6,7,8,-15,9]",
        "output": "[9]"
      },
      {
        "input": "head = [1, 2, 3, 4, -10, 3, 4, 5, -12, 6, 7]",
        "output": "[6, 7]"
      },
      {
        "input": "head = [1,2,3,0,0,0,4,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [1,2,3,4,5,-15,6,7,8,9,10,-33,11,12]",
        "output": "[6, 7, 8, 9]"
      },
      {
        "input": "head = [1,2,3,4,-10,2,3,4,5,-14]",
        "output": "None"
      },
      {
        "input": "head = [5,0,5,-5,10,-10,15,-15,20]",
        "output": "[5, 20]"
      },
      {
        "input": "head = [1,2,3,-3,4,-4,5]",
        "output": "[1, 2, 5]"
      },
      {
        "input": "head = [0,0,0,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,-10,10,1,2,3,4,-10,10]",
        "output": "[10, 10]"
      },
      {
        "input": "head = [0,1,2,3,4,5,-5,-4,-3,-2,-1,0]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,-10,5,6,7,8,9,10,-5,1,2,3,4,5,6,7,8,9,10,-50]",
        "output": "[5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1000, -500, -250, 250, -250, 500, -1000, 2000, -2000, 3000, -3000]",
        "output": "[1000, -500, -250, 500, -1000]"
      },
      {
        "input": "head = [5, -5, 10, -10, 15, -15, 20, -20, 25]",
        "output": "[25]"
      },
      {
        "input": "head = [1,2,-3,3,-2,2,1,-1]",
        "output": "[3]"
      },
      {
        "input": "head = [1,2,3,-6,3,2,1,0,-1,-2,-3,0]",
        "output": "None"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -55, 11, 12, 13, 14, 15, 16]",
        "output": "[11, 12, 13, 14, 15, 16]"
      },
      {
        "input": "head = [5,6,-11,1,2,3,-5,-6,7]",
        "output": "[1, -6, 7]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,-45]",
        "output": "None"
      },
      {
        "input": "head = [1,0,0,0,0,0,1]",
        "output": "[1, 1]"
      },
      {
        "input": "head = [5,6,-11,10,5,-10]",
        "output": "[10, 5, -10]"
      },
      {
        "input": "head = [1,2,3,4,5,-15,6]",
        "output": "[6]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,-55]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,-55,1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [100,-50,25,-25,-25,25,-100,50]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,-3,4,0,5,-5,6]",
        "output": "[1, 2, 4, 6]"
      },
      {
        "input": "head = [10,-3,4,-3,6,-6,2]",
        "output": "[10]"
      },
      {
        "input": "head = [100,-50,50,-50,50,-50,50,-50,50,-50]",
        "output": "[100, -50]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,-55,11,12,13,14,15,16,17,18,19,20]",
        "output": "[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,0,-5,0,0,0,6,7,8,-20]",
        "output": "[1, 2, 3, 4, 6, 7, 8, -20]"
      },
      {
        "input": "head = [1,2,3,4,5,0,0,0,0,0,0,6,7,8,-24]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, -24]"
      },
      {
        "input": "head = [7, 8, 9, -9, -8, -7, 10, -10, 11, 12, -12, -11]",
        "output": "None"
      },
      {
        "input": "head = [10,20,-10,-10,30,40,-70,80]",
        "output": "[10, 80]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,-45,5,5,-10]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,-45,10,11,12,13,14,15,16,17,18,19,20,-190]",
        "output": "[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -190]"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]",
        "output": "[1]"
      },
      {
        "input": "head = [0,0,0,0,1,2,3,4,5,-14,0,0]",
        "output": "[1]"
      },
      {
        "input": "head = [1,2,3,0,0,0,4,5,-9,6,7,-13]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "head = [10,-5,5,-10,20,-10,5]",
        "output": "[20, -10, 5]"
      },
      {
        "input": "head = [5,6,7,8,-20,3,4,5,6,-18,1,2]",
        "output": "[5, 6, 7, 6, -18, 1, 2]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -45, 11, 12, 13, 14, 15, 16, -80]",
        "output": "[1, 2, 3, 4, 11, 12, 13, 14, 15, 16, -80]"
      },
      {
        "input": "head = [-1,1,1,-1,1,-1,1,1,-1,-1]",
        "output": "None"
      },
      {
        "input": "head = [1,-1,2,-2,3,-3,4,-4,5,-5]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,-10,5,6,7,8,9,10,-40,1,2,3,4,5,6,7,8,9,10]",
        "output": "[5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [0,1,2,3,4,5,-15,10]",
        "output": "[10]"
      },
      {
        "input": "head = [10,-5,-3,2,3,-2,1,2,-1,0,0,0]",
        "output": "[10, -5, 1, 2, -1]"
      },
      {
        "input": "head = [10,20,-10,-10,30,40,-50,20]",
        "output": "[10, 30, 40, -50, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,-1,0,1,-1,0]",
        "output": "[1, 2, 3, 4, 5, -1]"
      },
      {
        "input": "head = [-1,1,-2,2,-3,3,-4,4,5,-5]",
        "output": "None"
      }
    ]
  },
  {
    "id": 2385,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Hash Table",
      "Binary Tree"
    ],
    "problemDescription": "You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.\nEach minute, a node becomes infected if:\n\nThe node is currently uninfected.\nThe node is adjacent to an infected node.\n\nReturn the number of minutes needed for the entire tree to be infected.\n\u00a0\nExample 1:\n\n\nInput: root = [1,5,3,null,4,10,6,9,2], start = 3\nOutput: 4\nExplanation: The following nodes are infected during:\n- Minute 0: Node 3\n- Minute 1: Nodes 1, 10 and 6\n- Minute 2: Node 5\n- Minute 3: Node 4\n- Minute 4: Nodes 9 and 2\nIt takes 4 minutes for the whole tree to be infected so we return 4.\n\nExample 2:\n\n\nInput: root = [1], start = 1\nOutput: 0\nExplanation: At minute 0, the only node in the tree is infected so we return 0.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 105].\n1 <= Node.val <= 105\nEach node has a unique value.\nA node with a value of start exists in the tree.\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def amountOfTime(self, root: Optional[TreeNode], start: int) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,null,null,4,5], start = 4",
        "output": "3"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5], start = 3",
        "output": "2"
      },
      {
        "input": "root = [2,1,3], start = 1",
        "output": "2"
      },
      {
        "input": "root = [1], start = 1",
        "output": "0"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5], start = 3",
        "output": "2"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], start = 3",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], start = 2",
        "output": "3"
      },
      {
        "input": "root = [1,5,3,null,4,10,6,9,2], start = 3",
        "output": "4"
      },
      {
        "input": "root = [3,1,4,null,2], start = 2",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,null,null,null,31,null,null,null,null,null,null,null,null,null,null,null,null,null,32,null,null,null,33,null,null,null,34,null,null,null,35], start = 17",
        "output": "9"
      },
      {
        "input": "root = [7,1,4,2,5,null,null,null,null,3,6,8,9,10], start = 4",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,null,null,6,7,null,null,null,null,8,9], start = 3",
        "output": "2"
      },
      {
        "input": "root = [1,5,3,null,4,10,6,9,2,7,null,11,null,null,8,null,null,null,null,null,12], start = 3",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], start = 8",
        "output": "6"
      },
      {
        "input": "root = [10,5,15,3,8,null,20,1,4,6,9,null,null,11,13,null,null,12,14,null,null,null,null], start = 13",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], start = 12",
        "output": "7"
      },
      {
        "input": "root = [3,1,4,null,2,null,null,null,null,null,5], start = 5",
        "output": "0"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31], start = 16",
        "output": "8"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35], start = 20",
        "output": "19"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10], start = 7",
        "output": "6"
      },
      {
        "input": "root = [50,25,75,12,37,62,87,6,18,31,43,56,68,81,93,3,9,15,21,29,34,39,47,51,59,65,71,76,83,89,92,null,11,null,null,null,null,null,null,null,null,null,14,null,17,20,null,28,null,null,33,36,38,42,null,46,null,50,null,58,null,64,67,70,null,75,null,82,null,null,88,null,91,null,null,94], start = 50",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,null,6,7,8,9,null,null,10,11], start = 4",
        "output": "7"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,null,6,null,null,14,null,null,null,8,null,null,null,9,11,null,12,null,null,13,null,16,null,17,19,null,20,21], start = 10",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31], start = 15",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,null,null,7,null,null,null,8,9,null,null,10,11], start = 1",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,8,9,10,11,12,null,null,13,14,15,16,17,18,19,20], start = 10",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], start = 13",
        "output": "7"
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], start = 5",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], start = 7",
        "output": "5"
      },
      {
        "input": "root = [1,5,3,null,4,10,6,9,2,null,null,null,null,null,7,8], start = 3",
        "output": "5"
      },
      {
        "input": "root = [3,1,4,null,2,null,null,5,6], start = 5",
        "output": "4"
      },
      {
        "input": "root = [20,15,25,10,18,23,27,5,12,null,19,22,24,26,28], start = 23",
        "output": "5"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,4,6,9,null,null,19], start = 10",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,7,null,null,null,null,8,9,10,11,12,null,null,13,14,15,null,null,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], start = 15",
        "output": "12"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9], start = 3",
        "output": "6"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20], start = 20",
        "output": "19"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], start = 25",
        "output": "9"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,null,null,8,9,null,null,10,11], start = 6",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,6,7,null,null,8,9,null,null,10,11,null,null,12,13,null,null,14,15], start = 10",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], start = 15",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,8,9,10,null,null,11,12,null,13,null,null,14], start = 6",
        "output": "6"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9], start = 5",
        "output": "4"
      },
      {
        "input": "root = [8,5,12,4,6,11,13,null,null,7,9,null,null,10,14], start = 8",
        "output": "3"
      },
      {
        "input": "root = [5,4,6,null,3,null,7,null,2,null,null,null,null,8,null], start = 4",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,7,null,8,9,null,null,10,null], start = 5",
        "output": "6"
      },
      {
        "input": "root = [1,5,3,null,4,10,6,9,2,7,null,8,null,11,12], start = 3",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15], start = 4",
        "output": "9"
      },
      {
        "input": "root = [2,1,4,3,null,null,5,null,6,null,7,null,null,null,null,null,8], start = 1",
        "output": "4"
      },
      {
        "input": "root = [7,5,8,null,6,null,9,null,null,null,10,11,12,null,null,null,null,null,null,null,null,13,14,15], start = 6",
        "output": "6"
      },
      {
        "input": "root = [3,1,2,null,null,null,null,4,null,null,5,null,null,6,null,null,7,null,null,8], start = 2",
        "output": "2"
      },
      {
        "input": "root = [5,4,1,null,1,null,4,2,null,2,null,3], start = 4",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19], start = 10",
        "output": "9"
      },
      {
        "input": "root = [10,5,15,3,7,null,18], start = 3",
        "output": "4"
      },
      {
        "input": "root = [3,1,4,null,2,null,null,null,null,5,6,7,8], start = 2",
        "output": "3"
      },
      {
        "input": "root = [3,null,4,null,null,2,null,null,5,null,1,null,6], start = 4",
        "output": "1"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10], start = 3",
        "output": "7"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12], start = 6",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,7,null,null,null,null,8,9,10], start = 1",
        "output": "4"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10], start = 5",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,null,7,null,null,null,null,8,9], start = 3",
        "output": "5"
      },
      {
        "input": "root = [7,3,15,null,null,9,20,null,null,8,null,16,null,null,null], start = 7",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10], start = 5",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15], start = 1",
        "output": "7"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15], start = 1",
        "output": "14"
      },
      {
        "input": "root = [10,7,15,4,8,null,16,null,null,6,9,12,18,null,null,null,null,null,11,13], start = 10",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,null,4,5,null,null,6,null,7,null,null,null,null,8,null,9], start = 2",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31], start = 31",
        "output": "30"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31], start = 17",
        "output": "16"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15], start = 1",
        "output": "6"
      },
      {
        "input": "root = [5,4,6,1,null,3,null,2,null,9,null,null,null,null,10,null,8,11,null,null,12], start = 5",
        "output": "7"
      },
      {
        "input": "root = [5,1,7,null,null,3,8,null,4,6,null,null,null,null,2,null,null,null,null,9], start = 7",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31], start = 15",
        "output": "12"
      }
    ]
  },
  {
    "id": 787,
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Dynamic Programming",
      "Shortest Path",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.\nYou are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.\n\u00a0\nExample 1:\n\n\nInput: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1\nOutput: 700\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.\n\nExample 2:\n\n\nInput: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1\nOutput: 200\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.\n\nExample 3:\n\n\nInput: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0\nOutput: 500\nExplanation:\nThe graph is shown above.\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500.\n\n\u00a0\nConstraints:\n\n1 <= n <= 100\n0 <= flights.length <= (n * (n - 1) / 2)\nflights[i].length == 3\n0 <= fromi, toi < n\nfromi != toi\n1 <= pricei <= 104\nThere will not be any multiple flights between two cities.\n0 <= src, dst, k < n\nsrc != dst\n\n",
    "starterCode": "class Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 6, flights = [[0,1,10],[0,2,15],[1,2,5],[1,3,20],[2,3,10],[3,4,10],[4,5,10]], src = 0, dst = 5, k = 2",
        "output": "-1"
      },
      {
        "input": "n = 3, flights = [[0,1,100],[1,2,100]], src = 0, dst = 2, k = 2",
        "output": "200"
      },
      {
        "input": "n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1",
        "output": "200"
      },
      {
        "input": "n = 6, flights = [[0,1,10],[1,2,20],[0,3,40],[3,4,20],[4,2,10],[2,5,25]], src = 0, dst = 5, k = 2",
        "output": "55"
      },
      {
        "input": "n = 3, flights = [[0,1,100],[1,2,100]], src = 0, dst = 2, k = 0",
        "output": "-1"
      },
      {
        "input": "n = 4, flights = [[0,1,1],[0,2,5],[1,2,1],[2,3,1]], src = 0, dst = 3, k = 1",
        "output": "6"
      },
      {
        "input": "n = 4, flights = [[0,1,1],[0,2,5],[1,2,1],[2,3,1],[1,3,4]], src = 0, dst = 3, k = 1",
        "output": "5"
      },
      {
        "input": "n = 6, flights = [[0,1,10],[0,2,15],[1,3,20],[2,4,50],[3,4,10],[4,5,10]], src = 0, dst = 5, k = 1",
        "output": "-1"
      },
      {
        "input": "n = 6, flights = [[0,1,10],[0,2,30],[1,3,50],[2,3,20],[3,4,10],[4,5,60]], src = 0, dst = 5, k = 2",
        "output": "-1"
      },
      {
        "input": "n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1",
        "output": "700"
      },
      {
        "input": "n = 6, flights = [[0,1,10],[0,2,30],[1,2,10],[1,3,40],[2,3,10],[2,4,10],[3,4,10],[4,5,10]], src = 0, dst = 5, k = 1",
        "output": "-1"
      },
      {
        "input": "n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0",
        "output": "500"
      },
      {
        "input": "n = 2, flights = [[0,1,100]], src = 0, dst = 1, k = 0",
        "output": "100"
      },
      {
        "input": "n = 5, flights = [[0,1,5],[1,2,5],[0,3,2],[3,1,2],[1,4,1],[4,2,1]], src = 0, dst = 2, k = 2",
        "output": "7"
      },
      {
        "input": "n = 9, flights = [[0,1,10],[0,2,20],[0,3,30],[1,4,40],[1,5,50],[2,5,60],[2,6,70],[3,4,80],[3,6,90],[4,7,100],[5,7,110],[5,8,120],[6,8,130],[7,8,140]], src = 0, dst = 8, k = 7",
        "output": "180"
      },
      {
        "input": "n = 8, flights = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[0,7,250],[7,0,250],[1,3,50],[3,1,50],[2,4,70],[4,2,70],[5,7,90],[7,5,90]], src = 0, dst = 7, k = 2",
        "output": "250"
      },
      {
        "input": "n = 5, flights = [[0,1,500],[0,2,100],[2,3,300],[1,4,200],[3,4,50],[4,2,100],[2,0,200]], src = 0, dst = 4, k = 2",
        "output": "450"
      },
      {
        "input": "n = 8, flights = [[0,1,100],[0,2,150],[1,3,100],[1,4,200],[2,3,150],[2,5,200],[3,4,100],[3,6,150],[4,7,200],[5,6,100],[5,7,150],[6,7,100]], src = 0, dst = 7, k = 3",
        "output": "450"
      },
      {
        "input": "n = 7, flights = [[0,1,100],[0,2,150],[1,3,100],[1,4,200],[2,3,200],[2,5,300],[3,4,50],[3,6,200],[4,6,150],[5,6,100]], src = 0, dst = 6, k = 4",
        "output": "400"
      },
      {
        "input": "n = 12, flights = [[0,1,5],[1,2,10],[2,3,5],[3,4,10],[4,5,5],[5,6,10],[6,7,5],[7,8,10],[8,9,5],[9,10,10],[10,11,5],[0,11,100]], src = 0, dst = 11, k = 6",
        "output": "100"
      },
      {
        "input": "n = 7, flights = [[0,1,200],[0,2,300],[1,2,100],[1,3,150],[2,3,200],[2,4,100],[3,4,50],[3,5,100],[4,5,150],[4,6,100],[5,6,200]], src = 0, dst = 6, k = 5",
        "output": "500"
      },
      {
        "input": "n = 9, flights = [[0,1,10],[0,2,20],[1,2,5],[1,3,20],[2,3,10],[2,4,15],[3,4,5],[3,5,25],[4,5,10],[4,6,20],[5,6,15],[5,7,25],[6,7,10],[6,8,15],[7,8,5]], src = 0, dst = 8, k = 5",
        "output": "65"
      },
      {
        "input": "n = 12, flights = [[0,1,10],[0,2,15],[1,2,5],[1,3,10],[2,3,20],[3,4,50],[4,5,20],[5,6,10],[6,7,15],[7,8,30],[8,9,50],[9,10,70],[10,11,90],[11,3,110]], src = 0, dst = 11, k = 6",
        "output": "-1"
      },
      {
        "input": "n = 9, flights = [[0,1,50],[0,2,30],[1,3,100],[1,4,10],[2,5,50],[2,6,100],[3,7,10],[4,8,100],[5,8,50],[6,8,5],[7,8,50]], src = 0, dst = 8, k = 2",
        "output": "130"
      },
      {
        "input": "n = 10, flights = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,0,100]], src = 0, dst = 9, k = 9",
        "output": "450"
      },
      {
        "input": "n = 5, flights = [[0,1,10],[0,2,5],[1,2,2],[1,3,20],[2,3,10],[2,4,15],[3,4,10]], src = 0, dst = 4, k = 2",
        "output": "20"
      },
      {
        "input": "n = 12, flights = [[0,1,200],[0,2,300],[1,3,100],[1,4,200],[2,3,400],[2,4,500],[3,4,100],[3,5,200],[4,5,150],[4,6,300],[5,6,250],[6,7,400],[6,8,500],[7,8,100],[7,9,300],[8,9,200],[8,10,100],[9,10,250],[9,11,400],[10,11,300]], src = 0, dst = 11, k = 2",
        "output": "-1"
      },
      {
        "input": "n = 10, flights = [[0,1,10],[0,2,100],[1,2,50],[1,3,150],[1,4,120],[2,4,50],[3,4,10],[3,5,60],[4,5,30],[4,6,100],[5,6,50],[6,7,80],[6,8,100],[7,8,20],[7,9,60],[8,9,30]], src = 0, dst = 9, k = 3",
        "output": "-1"
      },
      {
        "input": "n = 10, flights = [[0,1,10],[0,2,30],[1,2,5],[1,3,40],[2,3,10],[2,4,10],[3,4,20],[4,5,10],[5,6,15],[6,7,25],[7,8,30],[8,9,10]], src = 0, dst = 9, k = 4",
        "output": "-1"
      },
      {
        "input": "n = 10, flights = [[0,1,100],[0,2,300],[1,2,150],[1,3,400],[2,4,100],[3,4,200],[3,5,500],[4,5,250],[4,6,350],[5,6,100],[6,7,200],[7,8,100],[8,9,150]], src = 0, dst = 9, k = 3",
        "output": "-1"
      },
      {
        "input": "n = 7, flights = [[0,1,5],[1,2,3],[2,3,8],[0,3,10],[3,4,4],[4,5,6],[5,6,2],[6,3,7],[0,4,20],[1,5,12],[2,6,9]], src = 0, dst = 6, k = 3",
        "output": "17"
      },
      {
        "input": "n = 15, flights = [[0,1,10],[0,2,20],[1,2,30],[1,3,50],[2,3,10],[2,4,50],[3,4,10],[3,5,60],[4,5,30],[4,6,100],[5,6,50],[6,7,80],[6,8,100],[7,8,20],[7,9,60],[8,9,30],[8,10,50],[9,10,10],[9,11,60],[10,11,30],[11,12,50],[12,13,80],[13,14,100]], src = 0, dst = 14, k = 5",
        "output": "-1"
      },
      {
        "input": "n = 15, flights = [[0,1,10],[0,2,20],[1,3,5],[1,4,15],[2,5,6],[2,6,12],[3,7,8],[3,8,15],[4,9,15],[4,10,25],[5,10,7],[5,11,12],[6,11,6],[7,8,5],[8,9,5],[9,10,5],[10,11,5],[10,12,15],[11,12,10],[11,13,25],[12,13,15],[12,14,10],[13,14,5]], src = 0, dst = 14, k = 5",
        "output": "58"
      },
      {
        "input": "n = 8, flights = [[0,1,10],[0,2,20],[1,2,5],[1,3,30],[2,3,25],[3,4,50],[4,5,20],[5,6,10],[6,7,15]], src = 0, dst = 7, k = 3",
        "output": "-1"
      },
      {
        "input": "n = 12, flights = [[0,1,5],[0,2,10],[1,3,15],[1,4,20],[2,5,25],[2,6,30],[3,7,35],[3,8,40],[4,8,45],[4,9,50],[5,9,55],[5,10,60],[6,10,65],[7,11,70],[8,11,75],[9,11,80]], src = 0, dst = 11, k = 4",
        "output": "125"
      },
      {
        "input": "n = 10, flights = [[0,1,50],[1,2,30],[2,3,20],[3,4,10],[4,5,15],[5,6,25],[6,7,10],[7,8,5],[8,9,10]], src = 0, dst = 9, k = 3",
        "output": "-1"
      },
      {
        "input": "n = 7, flights = [[0,1,5],[0,2,10],[1,2,3],[1,3,8],[1,4,15],[2,3,4],[2,4,9],[3,5,20],[4,5,10],[4,6,25],[5,6,5]], src = 0, dst = 6, k = 4",
        "output": "32"
      },
      {
        "input": "n = 7, flights = [[0,1,100],[0,2,150],[1,2,50],[1,3,200],[2,4,100],[3,4,200],[3,5,150],[4,5,100],[5,6,200]], src = 0, dst = 6, k = 3",
        "output": "550"
      },
      {
        "input": "n = 11, flights = [[0,1,100],[0,2,200],[1,2,100],[1,3,150],[2,3,50],[2,4,50],[3,4,100],[3,5,150],[4,5,200],[4,6,100],[5,6,50],[6,7,100],[6,8,100],[7,8,50],[7,9,150],[8,9,200],[8,10,100],[9,10,150]], src = 0, dst = 10, k = 4",
        "output": "550"
      },
      {
        "input": "n = 10, flights = [[0,1,5],[0,2,10],[0,3,15],[0,4,20],[0,5,25],[0,6,30],[0,7,35],[0,8,40],[0,9,45],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5],[6,7,5],[7,8,5],[8,9,5],[1,9,95],[9,1,95],[2,8,80],[8,2,80],[3,7,70],[7,3,70],[4,6,60],[6,4,60]], src = 0, dst = 9, k = 5",
        "output": "45"
      },
      {
        "input": "n = 9, flights = [[0,1,100],[0,2,200],[1,3,100],[1,4,200],[2,3,150],[2,4,250],[3,4,50],[3,5,300],[4,5,200],[4,6,100],[5,6,150],[5,7,350],[6,7,100],[6,8,250],[7,8,200]], src = 0, dst = 8, k = 2",
        "output": "-1"
      },
      {
        "input": "n = 8, flights = [[0,1,1],[0,2,2],[1,3,3],[1,4,4],[2,3,5],[2,4,6],[3,5,7],[3,6,8],[4,5,9],[4,6,10],[5,7,11],[6,7,12]], src = 0, dst = 7, k = 6",
        "output": "22"
      },
      {
        "input": "n = 8, flights = [[0,1,10],[0,2,100],[1,3,150],[1,4,200],[2,4,50],[2,5,100],[3,6,10],[4,6,300],[5,6,50],[6,7,100]], src = 0, dst = 7, k = 3",
        "output": "270"
      },
      {
        "input": "n = 7, flights = [[0,1,50],[0,2,100],[1,2,10],[1,3,20],[2,3,5],[3,4,100],[4,5,10],[5,6,50],[4,6,200]], src = 0, dst = 6, k = 2",
        "output": "-1"
      },
      {
        "input": "n = 10, flights = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[3,8,10],[4,8,10],[4,9,10],[5,9,10],[6,7,10],[7,8,10],[8,9,10]], src = 0, dst = 9, k = 5",
        "output": "30"
      },
      {
        "input": "n = 6, flights = [[0,1,100],[1,2,100],[2,3,100],[3,4,100],[4,5,100],[0,2,150],[1,3,150],[2,4,150],[3,5,150],[0,3,200],[1,4,200],[2,5,200]], src = 0, dst = 5, k = 2",
        "output": "350"
      },
      {
        "input": "n = 8, flights = [[0,1,50],[0,2,25],[1,2,10],[1,3,75],[2,3,60],[2,4,80],[3,4,40],[3,5,65],[4,5,30],[4,6,90],[5,6,50],[5,7,70],[6,7,20]], src = 0, dst = 7, k = 4",
        "output": "205"
      },
      {
        "input": "n = 9, flights = [[0,1,10],[0,2,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[0,8,80]], src = 0, dst = 8, k = 2",
        "output": "80"
      },
      {
        "input": "n = 6, flights = [[0,1,10],[0,2,50],[1,2,10],[1,3,40],[2,3,10],[3,4,10],[4,5,10],[2,5,50]], src = 0, dst = 5, k = 2",
        "output": "70"
      },
      {
        "input": "n = 6, flights = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,0,60]], src = 0, dst = 5, k = 5",
        "output": "150"
      },
      {
        "input": "n = 8, flights = [[0,1,100],[0,4,10],[0,2,100],[1,2,10],[1,3,50],[2,3,20],[3,4,20],[4,5,10],[5,6,50],[6,7,10]], src = 0, dst = 7, k = 3",
        "output": "80"
      },
      {
        "input": "n = 10, flights = [[0,1,10],[0,2,5],[1,2,1],[1,3,4],[2,4,10],[2,5,15],[3,5,25],[4,6,5],[5,7,10],[6,8,20],[7,9,15]], src = 0, dst = 9, k = 5",
        "output": "45"
      },
      {
        "input": "n = 8, flights = [[0,1,10],[0,2,20],[1,3,30],[1,4,40],[2,5,50],[2,6,60],[3,7,70],[4,7,80],[5,7,90],[6,7,100]], src = 0, dst = 7, k = 4",
        "output": "110"
      },
      {
        "input": "n = 7, flights = [[0,1,10],[0,2,10],[1,2,5],[1,3,50],[2,3,10],[3,4,20],[4,5,10],[5,6,10],[6,0,50]], src = 0, dst = 6, k = 3",
        "output": "-1"
      },
      {
        "input": "n = 6, flights = [[0,1,100],[0,2,200],[0,3,300],[1,4,400],[2,4,300],[3,5,200],[4,5,100]], src = 0, dst = 5, k = 2",
        "output": "500"
      },
      {
        "input": "n = 7, flights = [[0,1,100],[0,2,200],[0,3,300],[1,4,100],[2,4,200],[3,4,300],[4,5,100],[4,6,200],[5,6,100]], src = 0, dst = 6, k = 3",
        "output": "400"
      },
      {
        "input": "n = 6, flights = [[0,1,100],[0,2,100],[1,3,100],[1,4,100],[2,4,100],[2,5,100],[3,4,50],[4,5,50]], src = 0, dst = 5, k = 2",
        "output": "200"
      },
      {
        "input": "n = 10, flights = [[0,1,10],[0,2,5],[0,3,15],[1,2,20],[1,4,50],[1,5,10],[2,3,10],[3,4,20],[4,5,10],[5,6,10],[6,7,5],[7,8,10],[8,9,10]], src = 0, dst = 9, k = 4",
        "output": "-1"
      },
      {
        "input": "n = 7, flights = [[0,1,10],[0,2,20],[0,3,30],[1,4,40],[1,5,50],[2,5,60],[2,6,70],[3,4,80],[4,6,90],[5,6,100]], src = 0, dst = 6, k = 5",
        "output": "90"
      },
      {
        "input": "n = 8, flights = [[0,1,10],[1,2,20],[2,3,10],[3,4,20],[4,5,10],[5,6,20],[6,7,10],[0,7,100],[7,3,10],[3,6,50]], src = 0, dst = 7, k = 2",
        "output": "100"
      },
      {
        "input": "n = 9, flights = [[0,1,50],[0,2,70],[1,3,100],[1,4,200],[2,4,120],[2,5,140],[3,6,90],[4,6,130],[4,7,150],[5,7,110],[6,8,80],[7,8,70]], src = 0, dst = 8, k = 4",
        "output": "320"
      },
      {
        "input": "n = 6, flights = [[0,1,10],[0,2,20],[1,3,10],[1,4,20],[2,4,15],[2,5,30],[3,5,10],[4,5,5],[0,5,100]], src = 0, dst = 5, k = 1",
        "output": "50"
      },
      {
        "input": "n = 7, flights = [[0,1,100],[0,2,300],[1,2,50],[1,3,200],[2,3,150],[2,4,250],[3,4,100],[3,5,200],[4,5,50],[4,6,100],[5,6,200]], src = 0, dst = 6, k = 2",
        "output": "650"
      },
      {
        "input": "n = 6, flights = [[0,1,100],[0,2,150],[1,2,50],[1,3,200],[2,3,100],[2,4,150],[3,4,50],[3,5,250],[4,5,100]], src = 0, dst = 5, k = 2",
        "output": "400"
      },
      {
        "input": "n = 12, flights = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,10,10],[10,11,10],[11,0,10]], src = 0, dst = 11, k = 5",
        "output": "-1"
      },
      {
        "input": "n = 5, flights = [[0,1,100],[0,2,200],[1,3,300],[1,4,400],[2,3,150],[2,4,250],[3,4,100]], src = 0, dst = 4, k = 1",
        "output": "450"
      },
      {
        "input": "n = 10, flights = [[0,1,10],[0,2,20],[1,3,100],[1,4,300],[2,5,50],[2,6,100],[3,7,10],[4,7,300],[5,8,50],[6,8,100],[7,9,10],[8,9,50]], src = 0, dst = 9, k = 4",
        "output": "130"
      },
      {
        "input": "n = 8, flights = [[0,1,10],[1,7,50],[0,7,100],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,10],[7,3,20]], src = 0, dst = 7, k = 2",
        "output": "60"
      },
      {
        "input": "n = 7, flights = [[0,1,50],[1,2,100],[2,3,50],[3,4,100],[4,5,50],[5,6,100],[0,3,200],[3,5,200],[0,4,300],[4,6,100],[1,5,200],[5,1,200],[2,6,250],[6,2,250],[0,6,350],[6,0,350]], src = 0, dst = 6, k = 4",
        "output": "350"
      },
      {
        "input": "n = 10, flights = [[0,1,1],[0,2,1],[0,3,1],[0,4,1],[0,5,1],[0,6,1],[0,7,1],[0,8,1],[0,9,1],[1,9,1],[2,9,1],[3,9,1],[4,9,1],[5,9,1],[6,9,1],[7,9,1],[8,9,1]], src = 0, dst = 9, k = 0",
        "output": "1"
      },
      {
        "input": "n = 10, flights = [[0,1,5],[0,2,10],[1,3,15],[1,4,20],[2,5,25],[2,6,30],[3,7,35],[3,8,40],[4,9,45],[5,9,50],[6,9,55],[7,9,60],[8,9,65]], src = 0, dst = 9, k = 5",
        "output": "70"
      },
      {
        "input": "n = 8, flights = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[0,7,400]], src = 0, dst = 7, k = 3",
        "output": "400"
      },
      {
        "input": "n = 6, flights = [[0,1,100],[0,2,200],[1,2,100],[1,3,150],[2,3,150],[2,4,200],[3,4,50],[3,5,100],[4,5,50]], src = 0, dst = 5, k = 2",
        "output": "350"
      },
      {
        "input": "n = 7, flights = [[0,1,100],[0,2,200],[1,2,50],[1,3,150],[2,3,100],[2,4,100],[3,4,50],[3,5,100],[4,5,150],[4,6,100],[5,6,50]], src = 0, dst = 6, k = 3",
        "output": "350"
      },
      {
        "input": "n = 10, flights = [[0,1,10],[0,2,20],[1,2,5],[1,3,20],[2,3,10],[2,4,15],[3,4,5],[3,5,25],[4,5,10],[4,6,20],[5,6,15],[5,7,25],[6,7,10],[6,8,15],[7,8,5],[7,9,25],[8,9,10]], src = 0, dst = 9, k = 4",
        "output": "80"
      },
      {
        "input": "n = 12, flights = [[0,1,5],[0,2,10],[1,3,20],[1,4,30],[2,5,20],[2,6,30],[3,7,40],[3,8,50],[4,9,40],[4,10,50],[5,10,20],[5,11,30],[6,11,20],[7,8,5],[8,9,5],[9,10,5],[10,11,5]], src = 0, dst = 11, k = 4",
        "output": "55"
      },
      {
        "input": "n = 10, flights = [[0,1,100],[0,2,300],[1,3,200],[1,4,250],[2,3,50],[2,5,150],[3,6,50],[3,7,200],[4,6,150],[4,7,250],[5,8,50],[5,9,200],[6,9,150],[7,8,50],[8,9,50]], src = 0, dst = 9, k = 3",
        "output": "500"
      },
      {
        "input": "n = 5, flights = [[0,1,10],[0,2,5],[0,3,15],[1,2,20],[1,4,50],[1,3,10],[2,4,10],[3,4,5]], src = 0, dst = 4, k = 2",
        "output": "15"
      },
      {
        "input": "n = 5, flights = [[0,1,5],[0,2,30],[1,2,5],[1,3,15],[2,3,10],[2,4,50],[3,4,10],[0,4,100],[1,4,20],[2,0,10],[3,0,20]], src = 0, dst = 4, k = 2",
        "output": "25"
      },
      {
        "input": "n = 10, flights = [[0,1,100],[1,2,200],[2,3,150],[3,4,200],[4,5,100],[5,6,250],[6,7,100],[7,8,300],[8,9,50]], src = 0, dst = 9, k = 0",
        "output": "-1"
      },
      {
        "input": "n = 5, flights = [[0,1,20],[0,2,10],[1,3,10],[1,4,20],[2,3,20],[2,4,10],[3,4,5],[3,0,15],[4,0,10],[4,1,5],[4,2,10]], src = 0, dst = 4, k = 2",
        "output": "20"
      },
      {
        "input": "n = 12, flights = [[0,1,10],[0,2,20],[0,3,30],[1,4,40],[1,5,50],[2,6,60],[3,7,70],[4,8,80],[5,9,90],[6,10,100],[7,11,110],[8,11,120],[9,11,130]], src = 0, dst = 11, k = 5",
        "output": "210"
      },
      {
        "input": "n = 9, flights = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,0,10],[0,8,10],[1,8,10],[2,8,10],[3,8,10],[4,8,10],[5,8,10],[6,8,10],[7,8,10]], src = 0, dst = 4, k = 4",
        "output": "40"
      },
      {
        "input": "n = 6, flights = [[0,1,100],[0,2,500],[1,2,100],[2,3,200],[3,4,100],[4,5,300],[5,2,200],[2,5,200],[1,3,300],[3,5,100]], src = 0, dst = 5, k = 3",
        "output": "400"
      },
      {
        "input": "n = 10, flights = [[0,1,10],[0,2,15],[1,2,5],[1,3,10],[2,3,20],[3,4,50],[4,5,20],[5,6,10],[6,7,15],[7,8,30],[8,9,50]], src = 0, dst = 9, k = 5",
        "output": "-1"
      },
      {
        "input": "n = 7, flights = [[0,1,100],[0,2,50],[0,3,100],[1,4,100],[1,5,50],[2,4,50],[2,5,100],[3,4,50],[4,5,25],[4,6,50],[5,6,100]], src = 0, dst = 6, k = 3",
        "output": "150"
      },
      {
        "input": "n = 5, flights = [[0,1,1],[1,2,1],[2,3,1],[3,4,1],[4,0,1],[1,4,1],[4,2,1],[2,0,1],[0,3,1],[3,1,1]], src = 0, dst = 4, k = 10",
        "output": "2"
      },
      {
        "input": "n = 6, flights = [[0,1,10],[0,2,20],[1,2,5],[1,3,30],[2,3,25],[3,4,50],[4,5,20],[5,0,10]], src = 0, dst = 5, k = 2",
        "output": "-1"
      },
      {
        "input": "n = 7, flights = [[0,1,100],[0,2,200],[1,3,100],[1,4,150],[2,3,200],[2,5,300],[3,4,50],[3,6,200],[4,6,150],[5,6,100]], src = 0, dst = 6, k = 3",
        "output": "400"
      },
      {
        "input": "n = 10, flights = [[0,1,100],[1,2,100],[2,3,100],[3,4,100],[4,5,100],[5,6,100],[6,7,100],[7,8,100],[8,9,100],[9,0,100],[0,9,10],[1,8,10],[2,7,10],[3,6,10],[4,5,10],[5,4,10],[6,3,10],[7,2,10],[8,1,10],[9,0,10]], src = 0, dst = 9, k = 4",
        "output": "10"
      },
      {
        "input": "n = 15, flights = [[0,1,10],[0,2,20],[1,3,10],[2,4,20],[3,5,10],[4,6,20],[5,7,10],[6,8,20],[7,9,10],[8,10,20],[9,11,10],[10,12,20],[11,13,10],[12,14,20],[13,14,10]], src = 0, dst = 14, k = 7",
        "output": "80"
      },
      {
        "input": "n = 9, flights = [[0,1,100],[1,2,100],[2,3,100],[3,4,100],[4,5,100],[5,6,100],[6,7,100],[7,8,100],[8,0,100],[0,2,150],[2,4,150],[4,6,150],[6,8,150],[1,3,150],[3,5,150],[5,7,150],[7,0,150]], src = 0, dst = 8, k = 4",
        "output": "600"
      },
      {
        "input": "n = 8, flights = [[0,1,10],[0,2,10],[1,3,10],[2,4,10],[3,5,10],[4,6,10],[5,7,10],[6,7,10],[1,4,5],[2,5,5],[3,6,5],[4,7,5]], src = 0, dst = 7, k = 3",
        "output": "20"
      },
      {
        "input": "n = 9, flights = [[0,1,100],[0,2,150],[1,3,50],[1,4,200],[2,5,100],[3,6,50],[4,7,200],[5,8,100],[6,8,100],[7,8,50]], src = 0, dst = 8, k = 4",
        "output": "300"
      }
    ]
  },
  {
    "id": 377,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to\u00a0target.\nThe test cases are generated so that the answer can fit in a 32-bit integer.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,3], target = 4\nOutput: 7\nExplanation:\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations.\n\nExample 2:\n\nInput: nums = [9], target = 3\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 200\n1 <= nums[i] <= 1000\nAll the elements of nums are unique.\n1 <= target <= 1000\n\n\u00a0\nFollow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?\n",
    "starterCode": "class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,5,10], target = 100",
        "output": "8437020668201"
      },
      {
        "input": "nums = [10,20,30], target = 100",
        "output": "274"
      },
      {
        "input": "nums = [1,2,3], target = 4",
        "output": "7"
      },
      {
        "input": "nums = [5,50,75], target = 95",
        "output": "16"
      },
      {
        "input": "nums = [5,1,3], target = 8",
        "output": "19"
      },
      {
        "input": "nums = [5,10,20], target = 100",
        "output": "46754"
      },
      {
        "input": "nums = [2,1,5], target = 10",
        "output": "128"
      },
      {
        "input": "nums = [4,2,1], target = 32",
        "output": "39882198"
      },
      {
        "input": "nums = [9], target = 3",
        "output": "0"
      },
      {
        "input": "nums = [1], target = 100",
        "output": "1"
      },
      {
        "input": "nums = [2,5,10,20], target = 25",
        "output": "119"
      },
      {
        "input": "nums = [1,2,3,4,5], target = 50",
        "output": "256641310658978"
      },
      {
        "input": "nums = [3,33,333], target = 33333",
        "output": "536100562017203100794406478687994186977009406170595938319227925094657614236234534558497196506399133621225707174188255190262018651187114351423083457111666117940448620061113293355456633188716465870563000681683793687796224312428969140578915943823395340466419187662119723474059441129216706040810975420885186072698747890615839765847357654198486205747679514159771503546254190608498526147691685468717339503106831214240554923976550226131423821899358941678177012767249757000151516175351605183646515289758127657594483351312820284135270121698193471863249963552248305706529133764410797262033127315996385879310273241411999616601791470886920119787124471456014799082324567146236951447774466096290384104870153132091954155668459053293520897201265795242933843325164440604889046037137996023050079472589183707593322481815544873436357989"
      },
      {
        "input": "nums = [2,1,5], target = 8",
        "output": "44"
      },
      {
        "input": "nums = [15,25,5,50,100], target = 100",
        "output": "4600"
      },
      {
        "input": "nums = [7,14], target = 300",
        "output": "0"
      },
      {
        "input": "nums = [1,2,5], target = 50",
        "output": "237139442616"
      },
      {
        "input": "nums = [1,2,3,4,5], target = 10",
        "output": "464"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], target = 20",
        "output": "10000000000"
      },
      {
        "input": "nums = [4, 11, 3, 4, 1], target = 21",
        "output": "46333"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 20",
        "output": "104857600000000000000000000"
      },
      {
        "input": "nums = [10, 20, 30], target = 50",
        "output": "13"
      },
      {
        "input": "nums = [1, 2, 5], target = 25",
        "output": "382396"
      },
      {
        "input": "nums = [18, 23, 50, 51], target = 200",
        "output": "493"
      },
      {
        "input": "nums = [33, 29, 40, 12, 54, 23, 67, 34, 74], target = 1000",
        "output": "1004803376074700418269474690624"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 50",
        "output": "551742150354112"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], target = 50",
        "output": "256641310658978"
      },
      {
        "input": "nums = [7, 14, 21, 28], target = 100",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64], target = 256",
        "output": "1054787931172699885204409659786242855354657339703519197691828406"
      },
      {
        "input": "nums = [10, 15, 20, 25, 30, 35, 40, 45, 50], target = 500",
        "output": "154640480926757717819"
      },
      {
        "input": "nums = [999, 1000], target = 1999",
        "output": "2"
      },
      {
        "input": "nums = [3, 6, 9, 12], target = 100",
        "output": "0"
      },
      {
        "input": "nums = [2, 5, 10, 20], target = 30",
        "output": "417"
      },
      {
        "input": "nums = [5, 10, 25, 50], target = 100",
        "output": "27517"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16], target = 32",
        "output": "47350055"
      },
      {
        "input": "nums = [10, 20, 30, 40], target = 100",
        "output": "401"
      },
      {
        "input": "nums = [1, 10, 25, 50], target = 100",
        "output": "37971048"
      },
      {
        "input": "nums = [4, 8, 15, 16, 23, 42], target = 100",
        "output": "878907"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], target = 200",
        "output": "27870089767928389254900226744638057842249669417272614584184"
      },
      {
        "input": "nums = [2, 3, 5], target = 30",
        "output": "15778"
      },
      {
        "input": "nums = [2, 6, 10, 14, 18, 22, 26, 30], target = 300",
        "output": "9697818790261047025454697667566"
      },
      {
        "input": "nums = [1, 2], target = 100",
        "output": "573147844013817084101"
      },
      {
        "input": "nums = [1, 3, 6, 9, 12, 15, 18], target = 100",
        "output": "9103419367826082596"
      },
      {
        "input": "nums = [1, 2, 4, 5], target = 15",
        "output": "4185"
      },
      {
        "input": "nums = [1, 2, 5, 10, 20, 50], target = 1000",
        "output": "55418612077363252135298307641829396865446477611253299547057401338234391162164785712545427782637930869475332856306540999148459057137429772224203347607997227631647056712144679002353744573917660746726513112253869324256573236618890333589"
      },
      {
        "input": "nums = [3, 7, 15], target = 120",
        "output": "92796380"
      },
      {
        "input": "nums = [2, 3, 6, 7], target = 100",
        "output": "2724220005886008"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], target = 120",
        "output": "541461698816"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35], target = 100",
        "output": "0"
      },
      {
        "input": "nums = [4, 10, 40, 100], target = 150",
        "output": "3504031"
      },
      {
        "input": "nums = [3, 7, 8], target = 11",
        "output": "2"
      },
      {
        "input": "nums = [2, 3, 6, 7, 9], target = 20",
        "output": "576"
      },
      {
        "input": "nums = [2, 3, 7, 8, 10], target = 200",
        "output": "3100714643409982098043972616729"
      },
      {
        "input": "nums = [50, 25, 75, 20, 10], target = 200",
        "output": "197308"
      },
      {
        "input": "nums = [1, 5, 10, 25], target = 100",
        "output": "8577828731901"
      },
      {
        "input": "nums = [3, 33, 333], target = 1000",
        "output": "0"
      },
      {
        "input": "nums = [1, 10, 100, 1000], target = 1111",
        "output": "367666448776500415514786890083984627942520976458183669725570752318436882775368470747436"
      },
      {
        "input": "nums = [2, 3, 6, 7], target = 12",
        "output": "26"
      },
      {
        "input": "nums = [3, 6, 9, 12], target = 30",
        "output": "401"
      },
      {
        "input": "nums = [1, 5, 10], target = 25",
        "output": "915"
      },
      {
        "input": "nums = [2, 3, 6, 7, 10], target = 300",
        "output": "1885220157798436983841368320280668830805551392497"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], target = 1000",
        "output": "464"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 500",
        "output": "1286219641702273366742255356065111897930066144490719649670364060629213518690220561526989033769595304532418065557510304805412593714309986391307281509696"
      },
      {
        "input": "nums = [3, 7, 11, 15, 19, 23, 27, 31], target = 300",
        "output": "14374578728716948696671279"
      },
      {
        "input": "nums = [5, 8, 12, 16, 20, 24, 28, 32, 36, 40], target = 500",
        "output": "42034412043805359239945977920635459"
      },
      {
        "input": "nums = [2, 5, 10, 20], target = 100",
        "output": "11826629775"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], target = 150",
        "output": "13624"
      },
      {
        "input": "nums = [1, 2, 5, 10], target = 100",
        "output": "119179977936469835383520"
      },
      {
        "input": "nums = [3, 8, 10], target = 120",
        "output": "317567468"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], target = 15",
        "output": "13624"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9], target = 25",
        "output": "70464"
      },
      {
        "input": "nums = [33, 39, 45, 51, 60], target = 150",
        "output": "29"
      },
      {
        "input": "nums = [3, 5, 7, 8, 9], target = 50",
        "output": "252672"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], target = 100",
        "output": "0"
      },
      {
        "input": "nums = [5, 50, 500], target = 1000",
        "output": "1816691941426948"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], target = 10",
        "output": "464"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], target = 250",
        "output": "551742150354112"
      },
      {
        "input": "nums = [15, 25, 35, 45], target = 200",
        "output": "6259"
      },
      {
        "input": "nums = [1, 5, 10], target = 50",
        "output": "1919938"
      },
      {
        "input": "nums = [10, 20, 30], target = 100",
        "output": "274"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], target = 300",
        "output": "222217726411850455445265344483183426006475036048672509776477817"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 100",
        "output": "606147434557459526483161067501"
      },
      {
        "input": "nums = [50, 150, 250, 350, 450], target = 1000",
        "output": "6475"
      },
      {
        "input": "nums = [50, 25, 75, 125], target = 250",
        "output": "331"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30], target = 100",
        "output": "463968"
      },
      {
        "input": "nums = [1, 5, 10, 25, 50, 100], target = 1000",
        "output": "3861392372529553044883315945420265874789274045115117175074863427403559146375333246873046775291634059748511012129487397547119298455362"
      },
      {
        "input": "nums = [15, 25, 35], target = 100",
        "output": "25"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16], target = 100",
        "output": "3001542533296576909276367"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10], target = 20",
        "output": "464"
      },
      {
        "input": "nums = [1, 3, 4, 5, 6], target = 20",
        "output": "22750"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], target = 500",
        "output": "353368918335207375428"
      },
      {
        "input": "nums = [1, 3, 4], target = 10",
        "output": "64"
      },
      {
        "input": "nums = [1, 10, 100, 1000], target = 1000",
        "output": "753729672939848505929078336767198285353713318174400841581842662144837938547270"
      },
      {
        "input": "nums = [1, 5, 10, 25], target = 50",
        "output": "1931845"
      },
      {
        "input": "nums = [2, 3, 6, 7], target = 15",
        "output": "78"
      },
      {
        "input": "nums = [1, 3, 4, 5], target = 13",
        "output": "424"
      },
      {
        "input": "nums = [13, 17, 19, 23, 29], target = 100",
        "output": "256"
      },
      {
        "input": "nums = [3, 5, 7, 10], target = 20",
        "output": "35"
      },
      {
        "input": "nums = [2, 3, 6, 7], target = 30",
        "output": "19096"
      },
      {
        "input": "nums = [7, 14, 28], target = 1000",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 6, 7, 9], target = 120",
        "output": "14544576409221128865"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35], target = 105",
        "output": "13624"
      },
      {
        "input": "nums = [7, 14, 28, 35, 56], target = 100",
        "output": "0"
      },
      {
        "input": "nums = [4, 7, 9], target = 20",
        "output": "7"
      },
      {
        "input": "nums = [3, 5, 10, 15], target = 50",
        "output": "12043"
      },
      {
        "input": "nums = [15, 25, 35], target = 1000",
        "output": "48781528629177572921"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = 50",
        "output": "12574441114"
      },
      {
        "input": "nums = [3, 5, 7], target = 15",
        "output": "8"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128], target = 256",
        "output": "1054787931172699885204409659788147413348784265452313995416385159"
      },
      {
        "input": "nums = [3, 5, 10, 20], target = 1000",
        "output": "214391693407662746979155838789092372951985494367397337570037572730823254282910703400057102167"
      },
      {
        "input": "nums = [1, 5, 10, 25, 50, 100], target = 200",
        "output": "169121161302579810731290745"
      },
      {
        "input": "nums = [3, 5, 7, 9], target = 150",
        "output": "12883204547325702"
      },
      {
        "input": "nums = [4, 10, 40, 25], target = 100",
        "output": "18984"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16], target = 31",
        "output": "26805983"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], target = 200",
        "output": "400096"
      },
      {
        "input": "nums = [1, 100, 101, 102], target = 300",
        "output": "45158"
      }
    ]
  },
  {
    "id": 2048,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Math",
      "Backtracking",
      "Counting",
      "Enumeration"
    ],
    "problemDescription": "An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.\nGiven an integer n, return the smallest numerically balanced number strictly greater than n.\n\u00a0\nExample 1:\n\nInput: n = 1\nOutput: 22\nExplanation: \n22 is numerically balanced since:\n- The digit 2 occurs 2 times. \nIt is also the smallest numerically balanced number strictly greater than 1.\n\nExample 2:\n\nInput: n = 1000\nOutput: 1333\nExplanation: \n1333 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times. \nIt is also the smallest numerically balanced number strictly greater than 1000.\nNote that 1022 cannot be the answer because 0 appeared more than 0 times.\n\nExample 3:\n\nInput: n = 3000\nOutput: 3133\nExplanation: \n3133 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times.\nIt is also the smallest numerically balanced number strictly greater than 3000.\n\n\u00a0\nConstraints:\n\n0 <= n <= 106\n\n",
    "starterCode": "class Solution:\n    def nextBeautifulNumber(self, n: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 0",
        "output": "1"
      },
      {
        "input": "n = 987654321",
        "output": "Execution timed out"
      },
      {
        "input": "n = 122333",
        "output": "123233"
      },
      {
        "input": "n = 3000",
        "output": "3133"
      },
      {
        "input": "n = 1222",
        "output": "1333"
      },
      {
        "input": "n = 55555",
        "output": "122333"
      },
      {
        "input": "n = 1234",
        "output": "1333"
      },
      {
        "input": "n = 112233",
        "output": "122333"
      },
      {
        "input": "n = 122133",
        "output": "122333"
      },
      {
        "input": "n = 1234567",
        "output": "1242444"
      },
      {
        "input": "n = 111222333",
        "output": "Execution timed out"
      },
      {
        "input": "n = 999999",
        "output": "1224444"
      },
      {
        "input": "n = 123456",
        "output": "132233"
      },
      {
        "input": "n = 1",
        "output": "22"
      },
      {
        "input": "n = 1000",
        "output": "1333"
      },
      {
        "input": "n = 1224444",
        "output": "1242444"
      },
      {
        "input": "n = 987654",
        "output": "1224444"
      },
      {
        "input": "n = 122",
        "output": "212"
      },
      {
        "input": "n = 122333444",
        "output": "122666666"
      },
      {
        "input": "n = 1122233344455555",
        "output": "Execution timed out"
      },
      {
        "input": "n = 2233445566",
        "output": "2233535555"
      },
      {
        "input": "n = 11223334444",
        "output": "Execution timed out"
      },
      {
        "input": "n = 122444",
        "output": "123233"
      },
      {
        "input": "n = 12233445566778899",
        "output": "Execution timed out"
      },
      {
        "input": "n = 3333333",
        "output": "3334444"
      },
      {
        "input": "n = 1112223334444555555",
        "output": "Execution timed out"
      },
      {
        "input": "n = 666666",
        "output": "1224444"
      },
      {
        "input": "n = 11222233",
        "output": "12255555"
      },
      {
        "input": "n = 444444",
        "output": "515555"
      },
      {
        "input": "n = 1223334444",
        "output": "1223343444"
      },
      {
        "input": "n = 221133444555555",
        "output": "Execution timed out"
      },
      {
        "input": "n = 999888777666555444333222111",
        "output": "Execution timed out"
      },
      {
        "input": "n = 888777666555444333222111",
        "output": "Execution timed out"
      },
      {
        "input": "n = 111122223333444455556666777788889999",
        "output": "Execution timed out"
      },
      {
        "input": "n = 100111222",
        "output": "Execution timed out"
      },
      {
        "input": "n = 2222222",
        "output": "2241444"
      },
      {
        "input": "n = 122333444555666777888999",
        "output": "Execution timed out"
      },
      {
        "input": "n = 11223344555",
        "output": "Execution timed out"
      },
      {
        "input": "n = 999999111222333",
        "output": "Execution timed out"
      },
      {
        "input": "n = 44445555",
        "output": "51225555"
      },
      {
        "input": "n = 6665554443332211",
        "output": "6665554444155666"
      },
      {
        "input": "n = 1233333",
        "output": "1242444"
      },
      {
        "input": "n = 122111333",
        "output": "122666666"
      },
      {
        "input": "n = 1111222233334444",
        "output": "Execution timed out"
      },
      {
        "input": "n = 22333444",
        "output": "22515555"
      },
      {
        "input": "n = 12223334444",
        "output": "Execution timed out"
      },
      {
        "input": "n = 123321",
        "output": "123323"
      },
      {
        "input": "n = 5555554443332211",
        "output": "Execution timed out"
      },
      {
        "input": "n = 98765",
        "output": "122333"
      },
      {
        "input": "n = 665544332211",
        "output": "665551556666"
      },
      {
        "input": "n = 400000",
        "output": "422444"
      },
      {
        "input": "n = 88888888",
        "output": "Execution timed out"
      },
      {
        "input": "n = 123456789",
        "output": "126266666"
      },
      {
        "input": "n = 122333444555666777888",
        "output": "Execution timed out"
      },
      {
        "input": "n = 10111222333",
        "output": "Execution timed out"
      },
      {
        "input": "n = 1122333444455555",
        "output": "Execution timed out"
      },
      {
        "input": "n = 1223334",
        "output": "1224444"
      },
      {
        "input": "n = 5555555",
        "output": "6166666"
      },
      {
        "input": "n = 999999999",
        "output": "Execution timed out"
      },
      {
        "input": "n = 111222333444555666777",
        "output": "Execution timed out"
      },
      {
        "input": "n = 223334444555",
        "output": "223336166666"
      },
      {
        "input": "n = 111",
        "output": "122"
      },
      {
        "input": "n = 999999999999",
        "output": "Execution timed out"
      },
      {
        "input": "n = 7777777",
        "output": "12255555"
      },
      {
        "input": "n = 1112233",
        "output": "1224444"
      },
      {
        "input": "n = 44444441112223333",
        "output": "Execution timed out"
      },
      {
        "input": "n = 122333444555555",
        "output": "122333445445555"
      },
      {
        "input": "n = 2233444",
        "output": "2241444"
      },
      {
        "input": "n = 1222333",
        "output": "1224444"
      },
      {
        "input": "n = 11122233344455566677888",
        "output": "Execution timed out"
      },
      {
        "input": "n = 2121212121",
        "output": "2123334444"
      },
      {
        "input": "n = 112233444555666777888999",
        "output": "Execution timed out"
      },
      {
        "input": "n = 1112223334445555",
        "output": "Execution timed out"
      },
      {
        "input": "n = 122444455555",
        "output": "122444545555"
      },
      {
        "input": "n = 12233344",
        "output": "12255555"
      },
      {
        "input": "n = 122222333333",
        "output": "Execution timed out"
      },
      {
        "input": "n = 112233445566",
        "output": "Execution timed out"
      },
      {
        "input": "n = 1122334455",
        "output": "Execution timed out"
      },
      {
        "input": "n = 666666555444333222111",
        "output": "666666555444333224155"
      },
      {
        "input": "n = 1000000",
        "output": "1224444"
      },
      {
        "input": "n = 111222333444555666777888999",
        "output": "Execution timed out"
      },
      {
        "input": "n = 22222222",
        "output": "22515555"
      },
      {
        "input": "n = 777777666555444333222111",
        "output": "Execution timed out"
      },
      {
        "input": "n = 77777665544332211",
        "output": "Execution timed out"
      },
      {
        "input": "n = 122333444555666",
        "output": "122333445445555"
      },
      {
        "input": "n = 1221221",
        "output": "1224444"
      },
      {
        "input": "n = 5555544332211",
        "output": "5555544333144"
      },
      {
        "input": "n = 1233322",
        "output": "1242444"
      },
      {
        "input": "n = 4444",
        "output": "14444"
      },
      {
        "input": "n = 122334444",
        "output": "122666666"
      },
      {
        "input": "n = 12344321111111111111111111",
        "output": "Execution timed out"
      },
      {
        "input": "n = 222333444555",
        "output": "Execution timed out"
      },
      {
        "input": "n = 1222233333",
        "output": "1223334444"
      },
      {
        "input": "n = 1333331",
        "output": "1422444"
      },
      {
        "input": "n = 666666777777",
        "output": "Execution timed out"
      }
    ]
  },
  {
    "id": 2208,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an array nums of positive integers. In one operation, you can choose any number from nums and reduce it to exactly half the number. (Note that you may choose this reduced number in future operations.)\nReturn the minimum number of operations to reduce the sum of nums by at least half.\n\u00a0\nExample 1:\n\nInput: nums = [5,19,8,1]\nOutput: 3\nExplanation: The initial sum of nums is equal to 5 + 19 + 8 + 1 = 33.\nThe following is one of the ways to reduce the sum by at least half:\nPick the number 19 and reduce it to 9.5.\nPick the number 9.5 and reduce it to 4.75.\nPick the number 8 and reduce it to 4.\nThe final array is [5, 4.75, 4, 1] with a total sum of 5 + 4.75 + 4 + 1 = 14.75. \nThe sum of nums has been reduced by 33 - 14.75 = 18.25, which is at least half of the initial sum, 18.25 >= 33/2 = 16.5.\nOverall, 3 operations were used so we return 3.\nIt can be shown that we cannot reduce the sum by at least half in less than 3 operations.\n\nExample 2:\n\nInput: nums = [3,8,20]\nOutput: 3\nExplanation: The initial sum of nums is equal to 3 + 8 + 20 = 31.\nThe following is one of the ways to reduce the sum by at least half:\nPick the number 20 and reduce it to 10.\nPick the number 10 and reduce it to 5.\nPick the number 3 and reduce it to 1.5.\nThe final array is [1.5, 8, 5] with a total sum of 1.5 + 8 + 5 = 14.5. \nThe sum of nums has been reduced by 31 - 14.5 = 16.5, which is at least half of the initial sum, 16.5 >= 31/2 = 15.5.\nOverall, 3 operations were used so we return 3.\nIt can be shown that we cannot reduce the sum by at least half in less than 3 operations.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 107\n\n",
    "starterCode": "class Solution:\n    def halveArray(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [10,10,10,10]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "nums = [100,100,100,100]",
        "output": "4"
      },
      {
        "input": "nums = [3,8,20]",
        "output": "3"
      },
      {
        "input": "nums = [10000000]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [5,19,8,1]",
        "output": "3"
      },
      {
        "input": "nums = [10,20,30,40,50]",
        "output": "5"
      },
      {
        "input": "nums = [10,10,10,10,10]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7]",
        "output": "10"
      },
      {
        "input": "nums = [10,20,30,40]",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]",
        "output": "3"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]",
        "output": "13"
      },
      {
        "input": "nums = [9999999, 9999998, 9999997, 9999996, 9999995]",
        "output": "5"
      },
      {
        "input": "nums = [5000000, 5000000, 5000000, 5000000, 5000000]",
        "output": "5"
      },
      {
        "input": "nums = [1000000, 500000, 250000, 125000, 62500, 31250, 15625, 7812, 3906, 1953]",
        "output": "3"
      },
      {
        "input": "nums = [1000, 500, 250, 125, 62.5, 31.25]",
        "output": "3"
      },
      {
        "input": "nums = [10000000, 5000000, 2500000, 1250000, 625000, 312500, 156250]",
        "output": "3"
      },
      {
        "input": "nums = [7, 14, 28, 56, 112, 224, 448, 896, 1792, 3584]",
        "output": "3"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "12"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "24"
      },
      {
        "input": "nums = [1, 1000000, 100000, 10000, 1000]",
        "output": "2"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "9"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "3"
      },
      {
        "input": "nums = [10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000]",
        "output": "9"
      },
      {
        "input": "nums = [100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000]",
        "output": "9"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "16"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]",
        "output": "3"
      },
      {
        "input": "nums = [50000000, 50000000, 50000000, 50000000, 50000000]",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]",
        "output": "3"
      },
      {
        "input": "nums = [5000000, 3000000, 2000000, 1000000, 500000, 300000, 200000, 100000]",
        "output": "4"
      },
      {
        "input": "nums = [1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]",
        "output": "3"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "30"
      },
      {
        "input": "nums = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]",
        "output": "15"
      },
      {
        "input": "nums = [1000000, 500000, 250000, 125000, 62500, 31250]",
        "output": "3"
      },
      {
        "input": "nums = [1234567, 2345678, 3456789, 4567890, 5678901, 6789012, 7890123, 8901234, 9012345]",
        "output": "8"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]",
        "output": "2"
      },
      {
        "input": "nums = [25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500]",
        "output": "16"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]",
        "output": "2"
      },
      {
        "input": "nums = [10000000, 5000000, 2500000, 1250000, 625000, 312500, 156250, 78125, 39062, 19531]",
        "output": "3"
      },
      {
        "input": "nums = [9999999, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "2"
      },
      {
        "input": "nums = [1000000, 2000000, 3000000, 4000000]",
        "output": "4"
      },
      {
        "input": "nums = [1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1]",
        "output": "10"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]",
        "output": "18"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]",
        "output": "3"
      },
      {
        "input": "nums = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]",
        "output": "9"
      },
      {
        "input": "nums = [10000, 20000, 30000, 40000, 50000]",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "9"
      },
      {
        "input": "nums = [1, 10000000, 5000000, 2500000, 1250000, 625000, 312500, 156250, 78125, 39062, 19531, 9765, 4882, 2441, 1220, 610, 305, 152, 76, 38]",
        "output": "3"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000000]",
        "output": "2"
      },
      {
        "input": "nums = [1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000]",
        "output": "20"
      },
      {
        "input": "nums = [1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000]",
        "output": "10"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "12"
      },
      {
        "input": "nums = [1000000, 999999, 999998, 999997, 999996]",
        "output": "5"
      },
      {
        "input": "nums = [1234567, 2345678, 3456789, 4567890, 5678901, 6789012, 7890123, 8901234, 9012345, 10123456]",
        "output": "9"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "25"
      },
      {
        "input": "nums = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100000]",
        "output": "2"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "20"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]",
        "output": "14"
      },
      {
        "input": "nums = [10000000, 5000000, 2500000, 1250000, 625000, 312500, 156250, 78125, 39062.5, 19531.25]",
        "output": "3"
      },
      {
        "input": "nums = [10000000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "2"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000]",
        "output": "2"
      },
      {
        "input": "nums = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "20"
      },
      {
        "input": "nums = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]",
        "output": "20"
      },
      {
        "input": "nums = [9999999, 9999998, 9999997, 9999996, 9999995, 9999994, 9999993, 9999992, 9999991, 9999990]",
        "output": "10"
      },
      {
        "input": "nums = [5000000, 5000000, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "3"
      },
      {
        "input": "nums = [9999999, 8888888, 7777777, 6666666, 5555555, 4444444, 3333333, 2222222, 1111111]",
        "output": "8"
      },
      {
        "input": "nums = [9999999, 1, 1, 1]",
        "output": "2"
      },
      {
        "input": "nums = [10000000, 9000000, 8000000, 7000000, 6000000, 5000000, 4000000, 3000000, 2000000, 1000000]",
        "output": "9"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "16"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "12"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105]",
        "output": "12"
      },
      {
        "input": "nums = [9999999, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "2"
      },
      {
        "input": "nums = [1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000]",
        "output": "9"
      },
      {
        "input": "nums = [5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000]",
        "output": "10"
      },
      {
        "input": "nums = [5000000, 2500000, 1250000, 625000, 312500, 156250, 78125, 39062.5, 19531.25, 9765.625]",
        "output": "3"
      },
      {
        "input": "nums = [5000000, 3000000, 2000000, 4000000, 1000000]",
        "output": "5"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]",
        "output": "20"
      },
      {
        "input": "nums = [5000000, 4000000, 3000000, 2000000, 1000000, 500000, 250000, 125000, 62500, 31250]",
        "output": "5"
      }
    ]
  },
  {
    "id": 1856,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Array",
      "Prefix Sum",
      "Monotonic Stack"
    ],
    "problemDescription": "The min-product of an array is equal to the minimum value in the array multiplied by the array's sum.\n\nFor example, the array [3,2,5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20.\n\nGiven an array of integers nums, return the maximum min-product of any non-empty subarray of nums. Since the answer may be large, return it modulo 109 + 7.\nNote that the min-product should be maximized before performing the modulo operation. Testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer.\nA subarray is a contiguous part of an array.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,3,2]\nOutput: 14\nExplanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).\n2 * (2+3+2) = 2 * 7 = 14.\n\nExample 2:\n\nInput: nums = [2,3,3,1,2]\nOutput: 18\nExplanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).\n3 * (3+3) = 3 * 6 = 18.\n\nExample 3:\n\nInput: nums = [3,1,5,6,4,2]\nOutput: 60\nExplanation: The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).\n4 * (5+6+4) = 4 * 15 = 60.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 107\n\n",
    "starterCode": "class Solution:\n    def maxSumMinProduct(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [5,9,6,8,7]",
        "output": "180"
      },
      {
        "input": "nums = [2,1]",
        "output": "4"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "240"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1]",
        "output": "180"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "240"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [10000000]",
        "output": "999300007"
      },
      {
        "input": "nums = [5,9,6,8,7,4,3,2,10,1]",
        "output": "180"
      },
      {
        "input": "nums = [2,3,3,1,2]",
        "output": "18"
      },
      {
        "input": "nums = [10000000,9999999,9999998,9999997,9999996]",
        "output": "696500047"
      },
      {
        "input": "nums = [5,5,5,5,5]",
        "output": "125"
      },
      {
        "input": "nums = [7,1,5,6,4,2]",
        "output": "60"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "36"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2]",
        "output": "15"
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "5"
      },
      {
        "input": "nums = [3,1,5,6,4,2]",
        "output": "60"
      },
      {
        "input": "nums = [10000000,9999999,9999998,9999997]",
        "output": "817200025"
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "36"
      },
      {
        "input": "nums = [1,2]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,2]",
        "output": "14"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1]",
        "output": "72"
      },
      {
        "input": "nums = [5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1]",
        "output": "135"
      },
      {
        "input": "nums = [10000000,9999999,9999998,9999997,9999996,9999995,9999994,9999993,9999992,9999991]",
        "output": "643000419"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "2400000"
      },
      {
        "input": "nums = [5, 8, 6, 7, 8, 9, 9, 10, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "642"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6,11,12,13,14,15,16,17,18,19,20]",
        "output": "1728"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "1728"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5]",
        "output": "360"
      },
      {
        "input": "nums = [10, 20, 10, 30, 20, 10, 40, 30, 20, 10]",
        "output": "2100"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "1728"
      },
      {
        "input": "nums = [9999999, 1, 9999999, 1, 9999999, 1, 9999999, 1, 9999999, 1]",
        "output": "979300008"
      },
      {
        "input": "nums = [1, 3, 2, 5, 6, 2, 8, 4, 9, 1, 3]",
        "output": "84"
      },
      {
        "input": "nums = [10000000, 9999999, 9999998, 9999997, 9999996, 9999995, 9999994, 9999993, 9999992, 9999991, 9999990]",
        "output": "342300564"
      },
      {
        "input": "nums = [1,10000000,1,10000000,1,10000000,1,10000000,1,10000000,1,10000000,1,10000000,1,10000000]",
        "output": "999300007"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "756"
      },
      {
        "input": "nums = [1, 1, 1, 1, 10000000, 1, 1, 1, 1, 10000000, 1, 1, 1, 1]",
        "output": "999300007"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "20"
      },
      {
        "input": "nums = [10000000, 10000000, 10000000, 10000000, 10000000]",
        "output": "996500007"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 1, 2, 3, 4, 5]",
        "output": "3600"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "420"
      },
      {
        "input": "nums = [7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7]",
        "output": "90"
      },
      {
        "input": "nums = [7, 8, 9, 10, 1, 2, 3, 4, 5, 6]",
        "output": "238"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "420"
      },
      {
        "input": "nums = [1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100]",
        "output": "10000"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10]",
        "output": "420"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]",
        "output": "240"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "15"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "480"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "420"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "480"
      },
      {
        "input": "nums = [1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000]",
        "output": "999930007"
      },
      {
        "input": "nums = [2,3,2,4,3,2,5,4,3,2,6,5,4,3,2,7,6,5,4,3,2,8,7,6,5,4,3,2,9,8,7,6,5,4,3,2,10]",
        "output": "332"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1728"
      },
      {
        "input": "nums = [10000000,9000000,8000000,7000000,6000000,5000000,4000000,3000000,2000000,1000000]",
        "output": "998320007"
      },
      {
        "input": "nums = [3, 2, 1, 4, 3, 2, 5, 4, 3, 6, 5, 4, 7, 6, 5, 8, 7, 6, 9, 8, 7]",
        "output": "315"
      },
      {
        "input": "nums = [10,20,30,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "1000"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5]",
        "output": "240"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "240"
      },
      {
        "input": "nums = [10000000, 9999999, 9999998, 9999997, 9999996, 9999995, 9999994]",
        "output": "365100133"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "1728"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "240"
      },
      {
        "input": "nums = [8,2,6,5,4,1,3,7,9]",
        "output": "112"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "24000"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1]",
        "output": "41"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "82"
      },
      {
        "input": "nums = [10000000, 1, 10000000, 1, 10000000, 1, 10000000, 1]",
        "output": "999300007"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "240"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "980"
      },
      {
        "input": "nums = [2, 1, 3, 4, 1, 5, 1, 6, 1, 7]",
        "output": "49"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "420"
      },
      {
        "input": "nums = [10000000, 9999999, 9999998, 9999997, 9999996, 9999995, 9999994, 9999993, 9999992, 9999991]",
        "output": "643000419"
      },
      {
        "input": "nums = [10000000, 1, 10000000, 1, 10000000, 1, 10000000, 1, 10000000]",
        "output": "999300007"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "3300"
      },
      {
        "input": "nums = [3,2,5,4,7,6,8,9,1,10,2,3,4,5,6,7,8,9,1,10,2,3,4,5,6,7,8,9,1,10,2,3,4,5,6,7,8,9,1]",
        "output": "210"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "756"
      },
      {
        "input": "nums = [1, 5, 4, 3, 6, 2, 8, 7, 9]",
        "output": "168"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]",
        "output": "81"
      },
      {
        "input": "nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1]",
        "output": "100"
      },
      {
        "input": "nums = [5, 6, 1, 2, 8, 9, 3, 4, 7, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "240"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "1728"
      },
      {
        "input": "nums = [7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "180"
      },
      {
        "input": "nums = [10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000]",
        "output": "993000007"
      },
      {
        "input": "nums = [9,7,5,3,1,2,4,6,8,10]",
        "output": "144"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]",
        "output": "148"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "10"
      },
      {
        "input": "nums = [10000000,1,10000000,1,10000000,1,10000000]",
        "output": "999300007"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "240"
      },
      {
        "input": "nums = [1, 10000000, 2, 9999999, 3, 9999998, 4, 9999997, 5, 9999996]",
        "output": "999300007"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]",
        "output": "36"
      },
      {
        "input": "nums = [9999996, 9999997, 9999998, 9999999, 10000000, 9999999, 9999998, 9999997, 9999996]",
        "output": "433700087"
      },
      {
        "input": "nums = [5, 1, 5, 1, 5, 1, 5, 1, 5, 1]",
        "output": "30"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "240"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]",
        "output": "33"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "24000"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "20"
      },
      {
        "input": "nums = [1,10,100,1000,10000,100000,1000000,10000000,1000000,100000,10000,1000,100,10,1]",
        "output": "999300007"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "375"
      },
      {
        "input": "nums = [1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1]",
        "output": "25"
      },
      {
        "input": "nums = [1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000]",
        "output": "999937007"
      },
      {
        "input": "nums = [1, 10000000, 1, 10000000, 1, 10000000, 1, 10000000]",
        "output": "999300007"
      }
    ]
  },
  {
    "id": 1182,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given an array colors, in which there are three colors: 1, 2 and\u00a03.\nYou are also given some queries. Each query consists of two integers i\u00a0and c, return\u00a0the shortest distance between the given index\u00a0i and the target color c. If there is no solution return -1.\n\u00a0\nExample 1:\n\nInput: colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]\nOutput: [3,0,3]\nExplanation: \nThe nearest 3 from index 1 is at index 4 (3 steps away).\nThe nearest 2 from index 2 is at index 2 itself (0 steps away).\nThe nearest 1 from index 6 is at index 3 (3 steps away).\n\nExample 2:\n\nInput: colors = [1,2], queries = [[0,3]]\nOutput: [-1]\nExplanation: There is no 3 in the array.\n\n\u00a0\nConstraints:\n\n1 <= colors.length <= 5*10^4\n1 <= colors[i] <= 3\n1\u00a0<= queries.length <= 5*10^4\nqueries[i].length == 2\n0 <= queries[i][0] <\u00a0colors.length\n1 <= queries[i][1] <= 3\n\n",
    "starterCode": "class Solution:\n    def shortestDistanceColor(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "colors = [1,2], queries = [[0,3]]",
        "output": "[-1]"
      },
      {
        "input": "colors = [2,2,2,2,2], queries = [[0,1],[1,3],[2,1],[3,3],[4,1]]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "colors = [1,2,3,1,2,3,1,2,3], queries = [[0,1],[1,2],[2,3],[3,1],[4,2],[5,3]]",
        "output": "[0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "colors = [1,2,3,1,2,3,1,2,3], queries = [[0,1],[4,2],[8,3]]",
        "output": "[0, 0, 0]"
      },
      {
        "input": "colors = [3,1,3,1,3], queries = [[0,2],[1,1],[2,3],[3,1],[4,3]]",
        "output": "[-1, 0, 0, 0, 0]"
      },
      {
        "input": "colors = [3,3,3,3,3], queries = [[0,1],[1,2],[2,3]]",
        "output": "[-1, -1, 0]"
      },
      {
        "input": "colors = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3], queries = [[0,3],[5,1],[10,2]]",
        "output": "[10, 1, 1]"
      },
      {
        "input": "colors = [1,1,1,1,1], queries = [[0,2],[1,3],[2,2],[3,3],[4,3]]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "colors = [1,2,3,1,2,3,1,2,3], queries = [[0,1],[1,2],[2,3],[3,1],[4,2],[5,3],[6,1],[7,2],[8,3]]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "colors = [3,3,3,3,3], queries = [[0,3],[1,3],[2,3],[3,3],[4,3]]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "colors = [3,1,2,1,1,3,2,2,1,3,1], queries = [[0,1],[1,2],[2,3],[3,1],[4,3],[5,2],[6,1],[7,2],[8,3],[9,1],[10,3]]",
        "output": "[1, 1, 2, 0, 1, 1, 2, 0, 1, 1, 1]"
      },
      {
        "input": "colors = [2,2,2,2,2], queries = [[0,1],[1,3],[2,2],[3,1],[4,3]]",
        "output": "[-1, -1, 0, -1, -1]"
      },
      {
        "input": "colors = [1,1,1,1,1], queries = [[2,2],[3,3],[4,1]]",
        "output": "[-1, -1, 0]"
      },
      {
        "input": "colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]",
        "output": "[3, 0, 3]"
      },
      {
        "input": "colors = [1,1,1,1,1], queries = [[0,1],[1,2],[2,3]]",
        "output": "[0, -1, -1]"
      },
      {
        "input": "colors = [1,2,3,3,3,2,1,1,1,2,3,3,2,1,2,1,3,3,3,2,1,1,2,3,3,2,1,2,1,3], queries = [[0,3],[1,1],[2,2],[10,3],[15,1],[20,2],[29,3]]",
        "output": "[2, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "colors = [1,1,1,1,2,2,2,2,3,3,3,3,1,1,1,1,2,2,2,2,3,3,3,3], queries = [[4,3],[11,1],[18,2]]",
        "output": "[4, 1, 0]"
      },
      {
        "input": "colors = [1,1,1,2,2,2,3,3,3,1,1,1], queries = [[1,2],[3,3],[5,1],[7,2]]",
        "output": "[2, 3, 3, 2]"
      },
      {
        "input": "colors = [1,2,2,1,3,3,1,2,2,1,3,3,1,2,2,1,3,3], queries = [[0,3],[1,3],[2,1],[3,2],[4,3],[5,1],[6,2],[7,3],[8,1],[9,2],[10,3],[11,1],[12,2],[13,3],[14,1],[15,2],[16,3]]",
        "output": "[4, 3, 1, 1, 0, 1, 1, 2, 1, 1, 0, 1, 1, 2, 1, 1, 0]"
      },
      {
        "input": "colors = [3,3,1,1,2,2,3,3,1,1,2,2,3,3,1,1,2,2,3,3,1,1,2,2,3,3], queries = [[1,3],[6,2],[10,1],[22,3]]",
        "output": "[0, 1, 1, 2]"
      },
      {
        "input": "colors = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], queries = [[0,1],[1,3],[2,1],[13,3],[14,1]]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "colors = [3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], queries = [[0,1],[1,2],[2,3],[30,1],[31,2],[32,3]]",
        "output": "[1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "colors = [1,2,3,3,3,2,1,1,1,2,3,3,2,1,1,2,3,2,1,3], queries = [[0,2],[10,1],[15,3],[18,2]]",
        "output": "[1, 2, 1, 1]"
      },
      {
        "input": "colors = [3, 1, 2, 2, 3, 1, 3, 3, 1, 2, 1, 3], queries = [[5, 3], [8, 2], [3, 1], [10, 3]]",
        "output": "[1, 1, 2, 1]"
      },
      {
        "input": "colors = [2,3,1,3,1,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2], queries = [[0,1],[1,2],[2,3],[3,1],[4,3],[5,2],[6,1],[7,3],[19,2]]",
        "output": "[2, 1, 1, 1, 1, 0, 0, 0, 1]"
      },
      {
        "input": "colors = [2,2,2,2,1,1,3,3,3,3], queries = [[4,1],[3,2],[5,3],[8,3],[0,2]]",
        "output": "[0, 0, 1, 0, 0]"
      },
      {
        "input": "colors = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], queries = [[0,3],[1,2],[2,1],[3,3],[4,2],[5,1],[6,3],[19,2]]",
        "output": "[2, 0, 1, 1, 0, 1, 1, 0]"
      },
      {
        "input": "colors = [2,3,1,2,1,3,1,3,2,3,1,2,3], queries = [[5,3],[10,1],[0,2]]",
        "output": "[0, 0, 0]"
      },
      {
        "input": "colors = [1,3,2,3,1,2,1,3,2,1,3,2,1,3,2,1,3,2,1], queries = [[5,3],[10,1],[15,2],[2,1],[17,3]]",
        "output": "[2, 1, 1, 2, 1]"
      },
      {
        "input": "colors = [1,2,3,1,2,3,1,2,3,1,2,3], queries = [[0,1],[5,3],[7,2],[11,1],[2,3]]",
        "output": "[0, 0, 0, 2, 0]"
      },
      {
        "input": "colors = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1], queries = [[0,3],[2,1],[6,2],[18,1]]",
        "output": "[-1, 0, 1, 0]"
      },
      {
        "input": "colors = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1], queries = [[0,1],[10,3],[20,2],[29,1]]",
        "output": "[29, -1, 0, 0]"
      },
      {
        "input": "colors = [3,1,3,1,3,1,3,1,3,1,3,1,3,1,3], queries = [[0,2],[1,1],[2,3],[13,1],[14,2]]",
        "output": "[-1, 0, 0, 0, -1]"
      },
      {
        "input": "colors = [1,1,1,2,2,3,3,3,1,1,2,2,3,3], queries = [[0,1],[3,2],[6,3],[7,1],[11,3]]",
        "output": "[0, 0, 0, 1, 1]"
      },
      {
        "input": "colors = [1,2,3,3,2,1,1,2,3,3,2,1,1,2,3], queries = [[0,1],[1,2],[2,3],[3,3],[4,2],[5,1],[6,1],[7,2],[8,3],[9,3],[10,2],[11,1],[12,1],[13,2],[14,3]]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "colors = [3,1,2,3,1,2,3,1,2,3,1,2,3], queries = [[0,1],[1,2],[2,3],[11,2],[12,3]]",
        "output": "[1, 1, 1, 0, 0]"
      },
      {
        "input": "colors = [1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3], queries = [[2,1],[5,2],[8,3],[11,1],[14,2],[17,3],[20,1],[23,2],[26,3]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], queries = [[0,2],[5,3],[15,2],[19,3]]",
        "output": "[-1, -1, -1, -1]"
      },
      {
        "input": "colors = [3,3,2,1,3,3,1,3,1,1,2,3,2,1,3,3,2,1], queries = [[0,1],[2,2],[4,3],[11,1],[15,3],[17,2]]",
        "output": "[3, 0, 0, 2, 0, 1]"
      },
      {
        "input": "colors = [3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1], queries = [[2,3],[9,1],[16,2],[19,3]]",
        "output": "[1, 1, 1, 1]"
      },
      {
        "input": "colors = [1,1,1,2,2,2,3,3,3,1,1,1,2,2,2,3,3,3], queries = [[0,1],[4,2],[7,3],[10,1],[14,2],[17,3],[1,1]]",
        "output": "[0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "colors = [1,2,3,3,2,1,1,2,3,2,1,3,1,2,3,2,1,3,1,2,3,2,1,3,1], queries = [[0,3],[9,2],[17,1]]",
        "output": "[2, 0, 1]"
      },
      {
        "input": "colors = [3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], queries = [[0,1],[1,2],[2,3],[3,1],[4,2],[5,3],[6,1],[7,2],[8,3],[9,1],[10,2],[11,3],[12,1],[13,2],[14,3],[15,1],[16,2],[17,3],[18,1],[19,2],[20,3],[21,1],[22,2],[23,3]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "colors = [1,1,1,1,2,2,2,2,3,3,3,3,1,1,1,1,2,2,2,2,3,3,3,3], queries = [[0,1],[4,2],[8,3],[12,1],[16,2],[20,3]]",
        "output": "[0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "colors = [1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3], queries = [[1,2],[3,1],[15,3],[19,2]]",
        "output": "[-1, 1, 0, -1]"
      },
      {
        "input": "colors = [1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1], queries = [[1,2],[19,1],[22,3]]",
        "output": "[1, 1, 0]"
      },
      {
        "input": "colors = [2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1], queries = [[1,3],[4,1],[7,2],[10,3],[13,1],[16,2],[19,3],[22,1],[25,2],[28,3],[31,1],[34,2],[37,3]]",
        "output": "[0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0]"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], queries = [[0,2],[1,3],[2,2],[13,3],[14,2]]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "colors = [3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1], queries = [[1,1],[4,2],[7,3],[10,1],[13,2],[16,3],[19,1],[22,2],[25,3]]",
        "output": "[1, 0, 1, 1, 0, 1, 1, 0, 1]"
      },
      {
        "input": "colors = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3], queries = [[0, 1], [1, 2], [2, 3], [3, 1], [4, 2], [5, 3]]",
        "output": "[0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "colors = [1,1,1,2,2,3,3,3,2,2,1,1,1], queries = [[1,2],[4,3],[7,1]]",
        "output": "[2, 1, 3]"
      },
      {
        "input": "colors = [1,2,3], queries = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,1]]",
        "output": "[0, 0, 0, 1, 1, 2]"
      },
      {
        "input": "colors = [1,1,1,2,2,2,3,3,3,1,1,1,2,2,2,3,3,3,1,1,1,2,2,2,3,3,3], queries = [[2,1],[5,2],[8,3],[11,1],[14,2],[17,3],[20,1],[23,2],[26,3]]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "colors = [3,1,3,2,1,3,2,1,3,2,1,3,2,1], queries = [[0,3],[13,1],[6,2]]",
        "output": "[0, 0, 0]"
      },
      {
        "input": "colors = [2,2,2,1,1,1,3,3,3,3,3,3,1,1,1,2,2,2], queries = [[0,3],[5,1],[11,3],[15,2],[17,2],[8,3]]",
        "output": "[6, 0, 0, 0, 0, 0]"
      },
      {
        "input": "colors = [3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2], queries = [[0,1],[5,2],[10,3],[15,1],[19,2]]",
        "output": "[2, 1, 1, 1, 0]"
      },
      {
        "input": "colors = [1,1,2,3,1,2,3,2,3,3,1,1,1,2,2,3,3,1,1,2,2,3,3], queries = [[5,1],[7,2],[12,3],[20,1]]",
        "output": "[1, 0, 3, 2]"
      },
      {
        "input": "colors = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], queries = [[0, 2], [2, 3], [7, 1], [12, 2]]",
        "output": "[5, 8, 3, 3]"
      },
      {
        "input": "colors = [3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1], queries = [[1, 1], [3, 2], [5, 3], [7, 1], [9, 2], [11, 3]]",
        "output": "[1, 1, 1, 1, 1, 2]"
      },
      {
        "input": "colors = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], queries = [[0,1],[10,2],[15,3]]",
        "output": "[0, 0, 1]"
      },
      {
        "input": "colors = [3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3], queries = [[2,1],[13,3],[20,2]]",
        "output": "[1, 1, -1]"
      },
      {
        "input": "colors = [3,3,1,2,3,3,1,2,3,3,1,2,3,3,1,2,3,3], queries = [[3,1],[11,2],[7,3]]",
        "output": "[1, 0, 1]"
      },
      {
        "input": "colors = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], queries = [[0,3],[5,1],[10,2],[15,3],[20,1]]",
        "output": "[2, 1, 0, 1, 2]"
      },
      {
        "input": "colors = [1,2,3,2,1,3,1,2,3,1,2,3,2,1,3], queries = [[0,2],[4,3],[8,1],[10,2],[12,3],[14,1]]",
        "output": "[1, 1, 1, 0, 1, 1]"
      },
      {
        "input": "colors = [2,2,2,2,2,1,1,1,1,1,3,3,3,3,3,2,2,2,2,2], queries = [[0,2],[5,1],[10,3],[15,2],[20,2]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "colors = [1,2,3,2,1,3,1,2,3,1,2,3], queries = [[0,3],[5,1],[9,2],[11,1]]",
        "output": "[2, 1, 1, 2]"
      },
      {
        "input": "colors = [1,1,1,2,2,2,3,3,3,1,2,3], queries = [[0,2],[3,1],[5,3],[11,1]]",
        "output": "[3, 1, 1, 2]"
      },
      {
        "input": "colors = [1,3,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], queries = [[2,3],[5,1],[10,2],[15,3],[20,1],[25,2],[30,3],[35,1],[40,2]]",
        "output": "[1, 1, 1, 0, 1, 1, 0, 1, 1]"
      },
      {
        "input": "colors = [2,1,3,2,1,3,2,1,3,2,1,3], queries = [[0,2],[1,1],[5,3],[8,2],[11,1]]",
        "output": "[0, 0, 0, 1, 1]"
      },
      {
        "input": "colors = [3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1], queries = [[0,1],[5,2],[10,3],[15,1],[20,2]]",
        "output": "[2, 1, 1, 1, 1]"
      },
      {
        "input": "colors = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], queries = [[0,1],[1,3],[10,2],[18,3]]",
        "output": "[-1, -1, 0, -1]"
      },
      {
        "input": "colors = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], queries = [[0,1],[1,2],[2,3],[3,1],[4,2],[5,3],[6,1],[7,2],[8,3],[9,1],[10,2],[11,3]]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "colors = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], queries = [[0,1],[5,2],[10,3],[15,1],[20,3]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "colors = [1,2,1,3,1,2,3,1,2,3,1,2,1,3,1,2,1,3,2,1], queries = [[1,3],[4,1],[7,2],[10,3],[13,1],[16,2],[19,1]]",
        "output": "[2, 0, 1, 1, 1, 1, 0]"
      },
      {
        "input": "colors = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], queries = [[0,3],[14,1],[6,2],[9,3],[13,1]]",
        "output": "[2, 2, 1, 1, 1]"
      },
      {
        "input": "colors = [1,1,1,2,2,2,3,3,3,1,1,1,2,2,2,3,3,3], queries = [[0,3],[14,1],[8,2],[17,3]]",
        "output": "[6, 3, 3, 0]"
      },
      {
        "input": "colors = [3,1,2,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1], queries = [[0,2],[1,3],[10,1],[19,3],[29,2]]",
        "output": "[2, 1, 1, 1, 1]"
      },
      {
        "input": "colors = [2,3,1,3,1,2,3,1,2,3,2,3,1,2,1,3,2,1,3,1,2,3,1,2,3,1,2,3,1,2,3], queries = [[5,1],[10,2],[15,3],[20,1],[25,2]]",
        "output": "[1, 0, 0, 1, 1]"
      },
      {
        "input": "colors = [1, 2, 2, 3, 1, 1, 2, 3, 3, 1], queries = [[0, 3], [1, 1], [4, 2], [9, 2]]",
        "output": "[3, 1, 2, 3]"
      },
      {
        "input": "colors = [3,2,1,3,2,1,3,2,1], queries = [[0,3],[2,1],[4,2],[6,3],[8,1]]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "colors = [1,1,2,1,2,1,3,3,3,2,2,3,1,1,1,1,2,2,3,3], queries = [[1,2],[3,1],[15,3],[19,2],[10,1]]",
        "output": "[1, 0, 3, 2, 2]"
      },
      {
        "input": "colors = [1,3,1,3,1,3,1,3,1,3,1,3,1,3,1], queries = [[0,2],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2],[10,2],[11,2],[12,2],[13,2],[14,2]]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], queries = [[0,2],[5,3],[10,1],[15,2],[20,3],[25,1],[30,2],[35,3]]",
        "output": "[-1, -1, 0, -1, -1, 0, -1, -1]"
      },
      {
        "input": "colors = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], queries = [[0,1],[1,2],[9,3],[10,1],[11,2],[18,3]]",
        "output": "[-1, -1, 0, -1, -1, 0]"
      },
      {
        "input": "colors = [1,2,3,3,2,1,1,2,3,2,1,3,3,2,1], queries = [[2,3],[8,1],[12,2]]",
        "output": "[0, 2, 1]"
      },
      {
        "input": "colors = [2,2,1,1,3,3,2,2,1,1,3,3,2,2,1,1,3,3], queries = [[1,1],[3,2],[5,3],[7,1],[9,2],[11,3],[13,1],[15,2],[17,3]]",
        "output": "[1, 2, 0, 1, 2, 0, 1, 2, 0]"
      },
      {
        "input": "colors = [1,2,1,3,2,1,3,2,1,3], queries = [[0,3],[1,2],[4,1],[5,3],[8,2],[9,1]]",
        "output": "[3, 0, 1, 1, 1, 1]"
      },
      {
        "input": "colors = [1,1,1,2,2,2,3,3,3,1,1,1,2,2,2,3,3,3], queries = [[0,2],[7,1],[15,3],[1,3],[14,2]]",
        "output": "[3, 2, 0, 5, 0]"
      },
      {
        "input": "colors = [1,1,1,1,2,2,2,2,3,3,3,3,1,1,1,1,2,2,2,2,3,3,3,3], queries = [[0,3],[4,2],[8,1],[12,3],[16,2],[20,1],[24,3]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "colors = [3,2,1,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], queries = [[2,2],[4,3],[8,1],[15,2]]",
        "output": "[1, 1, 1, 1]"
      },
      {
        "input": "colors = [1,3,2,1,2,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1], queries = [[0,1],[1,2],[2,3],[3,1],[4,2],[5,3],[6,1],[19,3]]",
        "output": "[0, 1, 1, 0, 0, 0, 1, 2]"
      },
      {
        "input": "colors = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], queries = [[0,1],[1,2],[2,1],[13,2],[14,1]]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "colors = [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3], queries = [[0, 1], [4, 2], [5, 3], [6, 1], [10, 2], [12, 3]]",
        "output": "[5, 0, 5, 0, 6, 0]"
      }
    ]
  },
  {
    "id": 874,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Simulation"
    ],
    "problemDescription": "A robot on an infinite XY-plane starts at point (0, 0) facing north. The robot receives an array of integers commands, which represents a sequence of moves that it needs to execute. There are only three possible types of instructions the robot can receive:\n\n-2: Turn left 90 degrees.\n-1: Turn right 90 degrees.\n1 <= k <= 9: Move forward k units, one unit at a time.\n\nSome of the grid squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi, yi). If the robot runs into an obstacle, it will stay in its current location (on the block adjacent to the obstacle) and move onto the next command.\nReturn the maximum squared Euclidean distance that the robot reaches at any point in its path (i.e. if the distance is 5, return 25).\nNote:\n\nThere can be an obstacle at (0, 0). If this happens, the robot will ignore the obstacle until it has moved off the origin. However, it will be unable to return to (0, 0) due to the obstacle.\nNorth means +Y direction.\nEast means +X direction.\nSouth means -Y direction.\nWest means -X direction.\n\n\u00a0\nExample 1:\n\nInput: commands = [4,-1,3], obstacles = []\nOutput: 25\nExplanation: \nThe robot starts at (0, 0):\n\nMove north 4 units to (0, 4).\nTurn right.\nMove east 3 units to (3, 4).\n\nThe furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away.\n\nExample 2:\n\nInput: commands = [4,-1,4,-2,4], obstacles = [[2,4]]\nOutput: 65\nExplanation:\nThe robot starts at (0, 0):\n\nMove north 4 units to (0, 4).\nTurn right.\nMove east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\nTurn left.\nMove north 4 units to (1, 8).\n\nThe furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away.\n\nExample 3:\n\nInput: commands = [6,-1,-1,6], obstacles = [[0,0]]\nOutput: 36\nExplanation:\nThe robot starts at (0, 0):\n\nMove north 6 units to (0, 6).\nTurn right.\nTurn right.\nMove south 5 units and get blocked by the obstacle at (0,0), robot is at (0, 1).\n\nThe furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away.\n\n\u00a0\nConstraints:\n\n1 <= commands.length <= 104\ncommands[i] is either -2, -1, or an integer in the range [1, 9].\n0 <= obstacles.length <= 104\n-3 * 104 <= xi, yi <= 3 * 104\nThe answer is guaranteed to be less than 231.\n\n",
    "starterCode": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "commands = [5,-2,5,-2,5,-2,5], obstacles = [[-1,-1],[1,1]]",
        "output": "50"
      },
      {
        "input": "commands = [1,-2,1,-2,1,-2,1,-2], obstacles = [[0,1],[1,0],[-1,0],[0,-1]]",
        "output": "0"
      },
      {
        "input": "commands = [5,-2,5,-2,5], obstacles = [[0,2],[0,-2],[2,0],[-2,0]]",
        "output": "41"
      },
      {
        "input": "commands = [4,-1,3], obstacles = []",
        "output": "25"
      },
      {
        "input": "commands = [5,-2,5,-2,5], obstacles = [[-1,0],[1,0],[0,-1],[0,1]]",
        "output": "0"
      },
      {
        "input": "commands = [-2,-1,10], obstacles = [[1,0]]",
        "output": "100"
      },
      {
        "input": "commands = [1,1,1,1], obstacles = [[1,1]]",
        "output": "16"
      },
      {
        "input": "commands = [1,-2,3,-1,4], obstacles = [[-1,-1],[0,-1],[1,-1],[1,0]]",
        "output": "34"
      },
      {
        "input": "commands = [1,1,1,1,1,1,1,1,1], obstacles = [[2,2]]",
        "output": "81"
      },
      {
        "input": "commands = [4,-1,4,-2,4], obstacles = [[2,4]]",
        "output": "65"
      },
      {
        "input": "commands = [3,-2,3,-1,3,-2,3], obstacles = [[-2,3],[-1,3],[0,3],[1,3],[2,3],[-2,-3],[-1,-3],[0,-3],[1,-3],[2,-3]]",
        "output": "61"
      },
      {
        "input": "commands = [9,9,9,9,9,9,9,9,9,9], obstacles = [[5,5]]",
        "output": "8100"
      },
      {
        "input": "commands = [-2,-2,-2,-2], obstacles = [[0,1],[0,-1],[1,0],[-1,0]]",
        "output": "0"
      },
      {
        "input": "commands = [-2,-2,-2,-2], obstacles = []",
        "output": "0"
      },
      {
        "input": "commands = [6,-1,-1,6], obstacles = [[0,0]]",
        "output": "36"
      },
      {
        "input": "commands = [1,2,3,4,-2,-2,-1,-1], obstacles = [[1,1],[2,2]]",
        "output": "100"
      },
      {
        "input": "commands = [9,9,-2,9,-2,9,-2,9], obstacles = [[2,2]]",
        "output": "405"
      },
      {
        "input": "commands = [1,1,1,1,1,1,1,1,1,1], obstacles = [[0,1]]",
        "output": "0"
      },
      {
        "input": "commands = [9,9,9,9,-2,-2,-2,-2,9,9,9,9], obstacles = [[2,2],[2,-2],[-2,-2],[-2,2]]",
        "output": "5184"
      },
      {
        "input": "commands = [1,2,3,4], obstacles = [[1,1],[2,2],[3,3]]",
        "output": "100"
      },
      {
        "input": "commands = [1,-2,1,-2,1,-2,1,-2], obstacles = [[0,2],[2,0],[0,-2],[-2,0]]",
        "output": "2"
      },
      {
        "input": "commands = [1,2,3,4,5], obstacles = [[1,1],[2,2],[3,3]]",
        "output": "225"
      },
      {
        "input": "commands = [1, -2, 2, -2, 3, -2, 4, -2, 5, -2, 6, -2, 7, -2, 8, -2, 9, -2], obstacles = [[1,2], [2,3], [3,4], [4,5], [5,6], [6,7]]",
        "output": "125"
      },
      {
        "input": "commands = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], obstacles = [[1,1], [2,2], [3,3], [4,4], [5,5], [6,6], [7,7], [8,8], [9,9]]",
        "output": "400"
      },
      {
        "input": "commands = [7, -1, 6, -2, 5, -1, 4, -2, 3, -1, 2, -2, 1], obstacles = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]",
        "output": "0"
      },
      {
        "input": "commands = [1,1,1,-1,1,1,-1,1,1,-1,1,1], obstacles = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "13"
      },
      {
        "input": "commands = [8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8], obstacles = [[-5,-5],[-4,-4],[-3,-3],[-2,-2],[-1,-1],[0,0],[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "145"
      },
      {
        "input": "commands = [7, -2, 8, -1, 9, -2, 1, -1, 2, -2, 3, -1, 4, -2, 5, -1, 6, -2, 7, -1], obstacles = [[0,5], [1,4], [2,3], [3,2], [4,1], [5,0]]",
        "output": "1201"
      },
      {
        "input": "commands = [5, -2, 6, -1, 7, -2, 8, -1, 9], obstacles = [[2,3], [3,4], [4,5], [5,6], [6,7]]",
        "output": "637"
      },
      {
        "input": "commands = [9,-2,8,-1,7,-2,6,-1,5,-2,4,-1,3,-2,2,-1,1,-2], obstacles = [[-3,0],[-2,0],[-1,0],[0,0],[1,0],[2,0],[3,0]]",
        "output": "1025"
      },
      {
        "input": "commands = [5,-2,4,-1,3,-2,2,-1,1,-2], obstacles = [[-1,1],[0,0],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7]]",
        "output": "117"
      },
      {
        "input": "commands = [1, -2, 2, -1, 3, -2, 4, -1, 5, -2, 6, -1, 7, -2, 8, -1, 9, -2, 1, -1], obstacles = [[-3,3],[-2,2],[-1,1],[0,0],[1,-1],[2,-2],[3,-3]]",
        "output": "986"
      },
      {
        "input": "commands = [3,-2,2,-1,5,-2,5,-1,3,-2,3,-1,3,-2,3,-1], obstacles = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]",
        "output": "365"
      },
      {
        "input": "commands = [6,-1,6,-2,6,-1,6,-2,6,-1,6,-2], obstacles = [[0,6],[6,0],[3,3],[2,2],[4,4],[5,5]]",
        "output": "545"
      },
      {
        "input": "commands = [5, -2, 5, -2, 5, -2, 5, -2, 5, -2], obstacles = [[-2,-2], [-3,-3], [-4,-4], [-5,-5], [-6,-6], [-7,-7]]",
        "output": "50"
      },
      {
        "input": "commands = [8,-2,6,-1,5,-2,7,-1,4], obstacles = [[-2,3],[0,2],[1,1],[2,0],[3,-1],[2,-2]]",
        "output": "269"
      },
      {
        "input": "commands = [1,2,3,4,5,6,7,8,9,-2,-1,8,7,6,5,4,3,2,1], obstacles = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "6561"
      },
      {
        "input": "commands = [8, -2, 7, -1, 6, -2, 5, -1, 4, -2, 3, -1, 2, -2, 1], obstacles = [[-1,-2], [-2,-3], [-3,-4], [-4,-5], [-5,-6], [-6,-7], [-7,-8]]",
        "output": "656"
      },
      {
        "input": "commands = [7,-2,7,-2,7,-2,7,-2,7,-2,7,-2], obstacles = [[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "98"
      },
      {
        "input": "commands = [4, 4, -2, 4, 4, -2, 4, 4, -2, 4, 4], obstacles = [[1,1], [1,2], [1,3], [1,4], [1,5], [1,6], [1,7], [1,8], [1,9]]",
        "output": "128"
      },
      {
        "input": "commands = [7,1,2,-2,3,-1,4,-2,5,-1], obstacles = [[2,2],[2,3],[2,4],[3,3],[4,3]]",
        "output": "260"
      },
      {
        "input": "commands = [2, -2, 3, -1, 4, -2, 5, -1, 6, -2, 7, -1, 8, -2, 9], obstacles = [[-1,-1], [-2,-2], [-3,-3], [-4,-4], [-5,-5], [-6,-6], [-7,-7], [-8,-8], [-9,-9]]",
        "output": "976"
      },
      {
        "input": "commands = [4, -2, 4, -1, 4, -2, 4, -1, 4, -2, 4, -1], obstacles = [[0,2], [1,1], [2,0], [-1,-1], [-2,-2], [-3,-3], [0,-2], [2,2]]",
        "output": "225"
      },
      {
        "input": "commands = [5, -1, 5, -1, 5, -2, 5, -2, 5, -1, 5, -1, 5, -2, 5, -2, 5, -1, 5], obstacles = [[1, 2], [2, 1], [3, 0], [4, -1], [5, -2]]",
        "output": "650"
      },
      {
        "input": "commands = [8, -1, 7, -2, 5, -1, 4, -2, 3, -1, 2, -2, 1], obstacles = [[2,2], [3,3], [4,4], [5,5], [6,6], [7,7]]",
        "output": "458"
      },
      {
        "input": "commands = [3, -1, 3, -2, 3, -1, 3, -2, 3, -1, 3, -2, 3, -1, 3, -2, 3, -1, 3, -2], obstacles = [[-3,-3], [-4,-2], [-5,-1], [-6,0], [-7,1]]",
        "output": "450"
      },
      {
        "input": "commands = [5, -1, 4, -1, 3, -1, 2, -1, 1, -2, 1, -2, 2, -2, 3, -2, 4, -2, 5, -2], obstacles = [[-2,5],[-1,4],[0,3],[1,2],[2,1],[3,0],[4,-1]]",
        "output": "29"
      },
      {
        "input": "commands = [4,-2,4,-1,4,-2,4,-1,4,-2,4,-1,4,-2,4,-1,4,-2,4,-1], obstacles = [[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "800"
      },
      {
        "input": "commands = [9, -2, 8, -1, 7, -2, 6, -1, 5, -2, 4, -1, 3, -2, 2, -1, 1, -2], obstacles = [[-4,-4],[-4,-3],[-3,-4],[-3,-3],[-2,-2],[-2,-1],[-1,-2],[-1,-1]]",
        "output": "1025"
      },
      {
        "input": "commands = [5,5,-1,5,-1,5,-1,5], obstacles = [[2,2],[3,3],[4,4],[5,5],[6,6]]",
        "output": "125"
      },
      {
        "input": "commands = [5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1], obstacles = [[-1,1],[-1,2],[-1,3],[-1,4],[-1,5],[-1,6],[-1,7],[-1,8]]",
        "output": "50"
      },
      {
        "input": "commands = [5,-2,5,-1,5,-2,5,-1,5,-2,5,-1,5,-2,5,-1,5,-2,5,-1], obstacles = [[-2,-2],[-2,-3],[-2,-4],[-2,-5],[-2,-6],[-2,-7],[-2,-8],[-2,-9],[-2,-10]]",
        "output": "1250"
      },
      {
        "input": "commands = [8, -2, 8, -1, 8, -2, 8, -1], obstacles = [[-2,0],[0,-2],[2,0],[0,2],[1,1]]",
        "output": "337"
      },
      {
        "input": "commands = [1,-1,2,-2,3,-1,4,-2,5,-1,6,-2,7,-1,8,-2,9,-1,10,-2], obstacles = [[-3,-3],[-2,-2],[-1,-1],[0,0],[1,1],[2,2],[3,3],[4,4]]",
        "output": "1354"
      },
      {
        "input": "commands = [9, -2, 8, -1, 7, -2, 6, -1, 5, -2, 4, -1, 3, -2, 2, -1, 1], obstacles = [[0,-5], [1,-4], [2,-3], [3,-2], [4,-1], [5,0]]",
        "output": "1025"
      },
      {
        "input": "commands = [6, -2, 4, -1, 3, -2, 2, -1, 1], obstacles = [[-2,3], [-3,2], [-1,4], [-1,-4], [4,-1], [3,-2]]",
        "output": "136"
      },
      {
        "input": "commands = [1,2,3,4,5,6,7,8,9,-2,9,8,7,6,5,4,3,2,1,-1], obstacles = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "4050"
      },
      {
        "input": "commands = [9, -1, 8, -1, 7, -1, 6, -1, 5, -1, 4, -1, 3, -1, 2, -1, 1, -1], obstacles = [[-1,-2], [-2,-3], [-3,-4], [-4,-5], [-5,-6], [-6,-7]]",
        "output": "145"
      },
      {
        "input": "commands = [1,-2,2,-2,3,-2,4,-2,5,-2,6,-2,7,-2,8,-2,9,-2,10,-2], obstacles = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "136"
      },
      {
        "input": "commands = [5,-1,5,-1,5,-1,5,-1,5,-1,5], obstacles = [[3,0],[3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[3,8],[3,9]]",
        "output": "34"
      },
      {
        "input": "commands = [9,-2,8,-1,7,-2,6,-1,5,-2,4,-1,3,-2,2,-1,1], obstacles = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "1025"
      },
      {
        "input": "commands = [9,9,9,9,9,-2,9,9,9,9,9,-2,9,9,9,9,9], obstacles = [[4,4],[5,5],[6,6],[7,7],[8,8]]",
        "output": "4050"
      },
      {
        "input": "commands = [3,3,3,-1,3,3,3,-1,3,3,3,-1,3,3,3,-1,3], obstacles = [[2,2],[3,3],[4,4],[2,4],[4,2],[3,1],[3,5]]",
        "output": "162"
      },
      {
        "input": "commands = [9,9,9,-2,9,9,9,-2,9,9,9,-2,9,9,9,-2,9], obstacles = [[5,5],[5,4],[5,3],[5,2],[5,1],[4,5],[3,5],[2,5],[1,5]]",
        "output": "1458"
      },
      {
        "input": "commands = [8,-2,5,-1,3,-2,4,-1,2], obstacles = [[2,3],[3,2],[2,1],[1,2],[0,0]]",
        "output": "250"
      },
      {
        "input": "commands = [10, -1, 9, -2, 8, -1, 7, -2, 6, -1, 5], obstacles = [[0,5], [1,4], [2,3], [3,2], [4,1], [5,0]]",
        "output": "16"
      },
      {
        "input": "commands = [8, -2, 7, -2, 8, -1, 7, -1, 6, -2, 5, -1, 4, -2, 3, -1, 2], obstacles = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]",
        "output": "628"
      },
      {
        "input": "commands = [9,-2,8,-1,7,-2,6,-1,5,-2,4,-1,3,-2,2,-1,1,-2], obstacles = [[-9,-9],[-8,-8],[-7,-7],[-6,-6],[-5,-5],[-4,-4],[-3,-3],[-2,-2],[-1,-1],[0,0]]",
        "output": "1025"
      },
      {
        "input": "commands = [9,9,9,9,-2,9,9,9,9,-2,9,9,9,9,-2,9,9,9,9,-2,9,9,9,9], obstacles = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "2592"
      },
      {
        "input": "commands = [9,-1,8,-1,7,-1,6,-1,5,-1,4,-1,3,-1,2,-1,1,-1], obstacles = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "232"
      },
      {
        "input": "commands = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], obstacles = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]]",
        "output": "3600"
      },
      {
        "input": "commands = [1,-2,1,-1,2,-2,2,-1,3,-2,3,-1,4,-2,4,-1,5,-2,5,-1], obstacles = [[-1,-2],[-1,-3],[-1,-4],[-1,-5],[-1,-6],[-1,-7],[-1,-8],[-1,-9]]",
        "output": "450"
      },
      {
        "input": "commands = [9,-2,8,-1,7,-2,6,-1,5,-2,4,-1,3,-2,2,-1,1,-2], obstacles = [[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9]]",
        "output": "724"
      },
      {
        "input": "commands = [9,9,9,9,-1,9,9,9,9,-1,9,9,9,9,-1,9,9,9,9,-1], obstacles = [[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11]]",
        "output": "2592"
      },
      {
        "input": "commands = [4, -2, 4, -2, 4, -1, 4, -1, 4, -2, 4, -1, 4, -2, 4, -1, 4], obstacles = [[0, 0], [1, 1], [-1, -1], [2, 2], [-2, -2]]",
        "output": "400"
      },
      {
        "input": "commands = [1,-2,2,-1,3,-2,4,-1,5,-2,6,-1,7,-2,8,-1,9,-2,10,-1], obstacles = [[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "1525"
      },
      {
        "input": "commands = [1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2], obstacles = [[2, 1], [4, 2], [6, 3], [8, 4], [10, 5]]",
        "output": "2025"
      },
      {
        "input": "commands = [1,-1,2,-2,3,-3,4,-4,5,-5,6,-6,7,-7,8,-8,9,-9], obstacles = [[1,2],[3,4],[5,6],[7,8],[9,10]]",
        "output": "1853"
      },
      {
        "input": "commands = [4,-2,3,-2,2,-2,1,-2], obstacles = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "25"
      },
      {
        "input": "commands = [1,-2,1,-2,1,-2,1,-2,1,-2,1,-2,1,-2,1,-2,1,-2,1,-2,1,-2,1,-2,1,-2,1,-2,1,-2,1,-2], obstacles = [[0,1],[1,0],[-1,0],[0,-1],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "0"
      },
      {
        "input": "commands = [3, -2, 4, -1, 2, -2, 1, -1, 0, -2, 3, -1, 4], obstacles = [[-2,-1], [-3,0], [-4,1], [-5,2], [-6,3]]",
        "output": "145"
      },
      {
        "input": "commands = [1,-1,2,-2,3,-3,4,-4,5,-5,6,-6,7,-7,8,-8,9,-9], obstacles = [[0,1],[1,0],[-1,0],[0,-1],[1,2],[2,1],[-2,1],[1,-2],[2,-1],[-2,-1],[0,2],[2,0],[-2,0],[0,-2],[-2,-2],[2,-2],[2,2],[0,3],[3,0],[-3,0],[0,-3],[-3,-3],[3,-3],[3,3]]",
        "output": "0"
      },
      {
        "input": "commands = [9, -1, 8, -2, 7, -1, 6, -2, 5, -1, 4, -2, 3, -1, 2, -2, 1, -1, 0], obstacles = [[2,0], [3,0], [4,0], [5,0], [6,0], [7,0], [8,0], [9,0], [10,0]]",
        "output": "1025"
      },
      {
        "input": "commands = [5, -2, 6, -2, 5, -1, 4, -1, 3], obstacles = [[2, 3], [-2, -3], [0, 0]]",
        "output": "109"
      },
      {
        "input": "commands = [1,-2,3,-1,5,-2,7,-1,9,-2,11,-1,13,-2,15,-1,17,-2,19,-1], obstacles = [[-5,5],[-4,4],[-3,3],[-2,2],[-1,1],[0,0],[1,-1],[2,-2],[3,-3],[4,-4]]",
        "output": "4729"
      },
      {
        "input": "commands = [6,-2,4,-1,2,-2,5,-1,1,-2,3,-1], obstacles = [[1,0],[2,0],[3,0],[4,0],[5,0],[0,1],[0,2],[0,3],[0,4],[0,5]]",
        "output": "153"
      },
      {
        "input": "commands = [8,-2,6,-1,4,-2,2,-1,5], obstacles = [[0,3],[1,2],[2,1],[3,0]]",
        "output": "185"
      },
      {
        "input": "commands = [10,-2,9,-1,8,-2,7,-1,6,-2,5,-1,4,-2,3,-1,2,-2,1,-1], obstacles = [[2,5],[3,6],[4,7],[5,8]]",
        "output": "1525"
      },
      {
        "input": "commands = [1,-2,3,-1,5,-2,7,-1,9,-2,11,-1,13,-2,15,-1], obstacles = [[2,1],[4,3],[6,5],[8,7],[10,9],[12,11],[14,13]]",
        "output": "2080"
      },
      {
        "input": "commands = [9, -2, 9, -2, 9, -1, 9, -1, 9, -2, 9, -1, 9, -2, 9], obstacles = [[-3, 3], [-2, 2], [-1, 1], [1, 1], [2, 2], [3, 3]]",
        "output": "1620"
      },
      {
        "input": "commands = [3, -1, 4, -2, 5, -1, 2, -2, 1], obstacles = [[1,2],[2,1],[2,3],[3,2],[0,1]]",
        "output": "72"
      },
      {
        "input": "commands = [5,5,5,5,5,5,5,5,5,5,-1,5,5,5,5,5,5,5,5,5,5,-1,5,5,5,5,5,5,5,5,5,5,-1,5,5,5,5,5,5,5,5,5,5,-1,5,5,5,5,5,5,5,5,5,5], obstacles = [[-5,-5],[-4,-4],[-3,-3],[-2,-2],[-1,-1],[0,-1],[1,-1],[2,-1],[3,-1],[4,-1],[5,-5],[-5,5],[-4,4],[-3,3],[-2,2],[-1,1],[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "5000"
      },
      {
        "input": "commands = [10,-1,10,-1,10,-1,10,-1,10,-1,10,-1,10,-1,10,-1,10,-1], obstacles = [[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[9,11],[8,12],[7,13],[6,14],[5,15]]",
        "output": "565"
      },
      {
        "input": "commands = [10,-2,9,-1,8,-2,7,-1,6,-2,5,-1,4,-2,3,-1,2,-2,1,-1], obstacles = [[-4,-4],[-3,-3],[-2,-2],[-1,-1],[0,0],[1,1],[2,2],[3,3],[4,4]]",
        "output": "1525"
      },
      {
        "input": "commands = [10,-2,10,-1,10,-2,10,-1,10], obstacles = [[0,5],[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[8,5],[9,5]]",
        "output": "976"
      },
      {
        "input": "commands = [9,-1,8,-1,7,-1,6,-1,5,-1,4,-1,3,-1,2,-1,1,-1], obstacles = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "221"
      },
      {
        "input": "commands = [1,2,3,4,5,6,7,8,9,-1,-2,-1,-2,-1,-2], obstacles = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "2025"
      },
      {
        "input": "commands = [5, -2, 5, -2, 5, -2, 5], obstacles = [[0,2],[1,3],[-2,1],[3,-2],[0,0]]",
        "output": "32"
      },
      {
        "input": "commands = [1, -2, 3, -1, 5, -2, 7, -1, 9, -2, 11, -1, 13, -2, 15, -1, 17, -2, 19], obstacles = [[-1, -2], [-3, -4], [-5, -6], [-7, -8], [-9, -10]]",
        "output": "5050"
      },
      {
        "input": "commands = [1,-1,2,-1,3,-1,4,-1,5,-1,6,-1,7,-1,8,-1,9,-1,10,-1], obstacles = [[-10,-10],[-9,-9],[-8,-8],[-7,-7],[-6,-6],[-5,-5],[-4,-4],[-3,-3],[-2,-2],[-1,-1]]",
        "output": "106"
      },
      {
        "input": "commands = [8,8,8,-2,8,8,8,-2,8,8,8,-2,8,8,8,-2,8,-1,8,-1,8,-1,8,-1], obstacles = [[4,4],[4,5],[4,6],[4,7],[4,8],[5,4],[6,4],[7,4],[8,4]]",
        "output": "1152"
      },
      {
        "input": "commands = [1, -1, 2, -2, 3, -1, 4, -2, 5, -1, 6, -2, 7, -1, 8], obstacles = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5]]",
        "output": "656"
      },
      {
        "input": "commands = [9,-1,8,-1,7,-1,6,-1,5,-1,4,-1,3,-1,2,-1,1,-2,9,-2,8,-2,7,-2,6,-2,5,-2,4,-2,3,-2,2,-2,1], obstacles = [[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[0,2],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2]]",
        "output": "169"
      },
      {
        "input": "commands = [9,-1,8,-2,7,-1,6,-2,5,-1,4,-2,3,-1,2,-2,1,-1], obstacles = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "1025"
      },
      {
        "input": "commands = [5,5,5,5,-2,5,5,5,5,-1], obstacles = [[1,1],[1,2],[1,3],[1,4],[2,2],[3,2],[4,2]]",
        "output": "800"
      },
      {
        "input": "commands = [9, -1, 8, -1, 7, -1, 6, -1, 5, -1, 4, -1, 3, -1, 2, -1, 1, -1, 0], obstacles = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0]]",
        "output": "145"
      },
      {
        "input": "commands = [1,-2,3,-1,4,-2,5,-1,6,-2,7,-1,8,-2,9,-1], obstacles = [[-1,-1],[0,-1],[1,-1],[1,0],[2,0],[3,0],[4,0],[5,0],[5,1],[5,2],[5,3]]",
        "output": "937"
      },
      {
        "input": "commands = [8,-2,7,-1,6,-2,5,-1,4,-2,3,-1,2,-2,1,-1], obstacles = [[3,8],[4,7],[5,6],[6,5],[7,4],[8,3]]",
        "output": "656"
      },
      {
        "input": "commands = [1,-1,2,-2,3,-1,4,-2,5,-1,6,-2,7,-1,8,-2], obstacles = [[-1,-1],[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1]]",
        "output": "0"
      },
      {
        "input": "commands = [1,2,3,4,5,4,3,2,1,-1,-2,-1,-2,-1,-2,2,4,6,8,10], obstacles = [[1,0],[2,0],[3,0],[4,0],[5,0],[1,1],[2,1],[3,1],[4,1],[5,1]]",
        "output": "3025"
      },
      {
        "input": "commands = [2, -1, 2, -1, 2, -2, 2, -2, 2, -1, 2, -1, 2, -2, 2, -2, 2, -1, 2], obstacles = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5]]",
        "output": "100"
      },
      {
        "input": "commands = [5,-2,5,-1,5,-2,5,-1,5,-2,5,-1,5,-2,5,-1,5,-2,5,-1,5], obstacles = [[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1]]",
        "output": "1250"
      },
      {
        "input": "commands = [9, -1, 9, -2, 9, -1, 9, -2, 9, -1, 9, -2], obstacles = [[3,4], [4,3], [5,2], [2,5], [1,6], [6,1]]",
        "output": "1458"
      },
      {
        "input": "commands = [5,-2,5,-1,5,-2,5,-1,5,-2,5,-1,5,-2,5,-1,5,-2,5,-1], obstacles = [[0,5],[1,4],[2,3],[3,2],[4,1],[5,0],[4,-1],[3,-2],[2,-3],[1,-4],[0,-5]]",
        "output": "1201"
      }
    ]
  },
  {
    "id": 2300,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "You are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion.\nYou are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success.\nReturn an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.\n\u00a0\nExample 1:\n\nInput: spells = [5,1,3], potions = [1,2,3,4,5], success = 7\nOutput: [4,0,3]\nExplanation:\n- 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.\n- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.\n- 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.\nThus, [4,0,3] is returned.\n\nExample 2:\n\nInput: spells = [3,1,2], potions = [8,5,8], success = 16\nOutput: [2,0,2]\nExplanation:\n- 0th spell: 3 * [8,5,8] = [24,15,24]. 2 pairs are successful.\n- 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. \n- 2nd spell: 2 * [8,5,8] = [16,10,16]. 2 pairs are successful. \nThus, [2,0,2] is returned.\n\n\u00a0\nConstraints:\n\nn == spells.length\nm == potions.length\n1 <= n, m <= 105\n1 <= spells[i], potions[i] <= 105\n1 <= success <= 1010\n\n",
    "starterCode": "class Solution:\n    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "spells = [3,1,2], potions = [8,5,8], success = 16",
        "output": "[2, 0, 2]"
      },
      {
        "input": "spells = [1,1,1], potions = [1,1,1], success = 2",
        "output": "[0, 0, 0]"
      },
      {
        "input": "spells = [5,1,3], potions = [1,2,3,4,5], success = 7",
        "output": "[4, 0, 3]"
      },
      {
        "input": "spells = [1,2,3,4,5], potions = [5,4,3,2,1], success = 10",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "spells = [10,20,30], potions = [1,2,3,4,5,6,7,8,9,10], success = 50",
        "output": "[6, 8, 9]"
      },
      {
        "input": "spells = [100000,100000,100000], potions = [100000,100000,100000], success = 10000000000",
        "output": "[3, 3, 3]"
      },
      {
        "input": "spells = [10,20,30], potions = [1,2,3,4,5,6,7,8,9,10], success = 100",
        "output": "[1, 6, 7]"
      },
      {
        "input": "spells = [1,1,1], potions = [1,1,1,1], success = 1",
        "output": "[4, 4, 4]"
      },
      {
        "input": "spells = [10,10,10], potions = [1,1,1,1,1], success = 100",
        "output": "[0, 0, 0]"
      },
      {
        "input": "spells = [1,1,1,1], potions = [1,1,1,1], success = 1",
        "output": "[4, 4, 4, 4]"
      },
      {
        "input": "spells = [1,2,3,4,5], potions = [5,4,3,2,1], success = 6",
        "output": "[0, 3, 4, 4, 4]"
      },
      {
        "input": "spells = [10,20,30], potions = [5,10,15,20], success = 100",
        "output": "[3, 4, 4]"
      },
      {
        "input": "spells = [100000], potions = [100000], success = 10000000000",
        "output": "[1]"
      },
      {
        "input": "spells = [100, 200, 300, 400, 500], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], success = 500",
        "output": "[11, 13, 14, 14, 15]"
      },
      {
        "input": "spells = [99999, 99998, 99997, 99996, 99995], potions = [50000, 49999, 49998, 49997, 49996, 49995, 49994, 49993, 49992, 49991], success = 4999750005",
        "output": "[2, 2, 1, 1, 0]"
      },
      {
        "input": "spells = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], potions = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000], success = 100000",
        "output": "[1, 6, 7, 8, 9, 9, 9, 9, 9, 10]"
      },
      {
        "input": "spells = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], success = 10000000000",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "spells = [99999, 99998, 99997, 99996, 99995], potions = [100000, 99999, 99998, 99997, 99996, 99995], success = 9999900000",
        "output": "[1, 0, 0, 0, 0]"
      },
      {
        "input": "spells = [1, 1, 1, 1, 1], potions = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], success = 2",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "spells = [1, 1, 1, 1, 1], potions = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], success = 1",
        "output": "[10, 10, 10, 10, 10]"
      },
      {
        "input": "spells = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], potions = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], success = 50",
        "output": "[6, 8, 9, 9, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "spells = [1, 10, 100, 1000, 10000], potions = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000], success = 10000",
        "output": "[0, 1, 4, 7, 10]"
      },
      {
        "input": "spells = [1, 3, 5, 7, 9], potions = [11, 13, 15, 17, 19, 21, 23, 25, 27, 29], success = 50",
        "output": "[0, 7, 10, 10, 10]"
      },
      {
        "input": "spells = [50000, 60000, 70000, 80000, 90000, 100000], potions = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], success = 5000000000",
        "output": "[5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "spells = [2, 4, 6, 8, 10], potions = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], success = 100",
        "output": "[1, 6, 7, 8, 9]"
      },
      {
        "input": "spells = [100, 200, 300, 400, 500], potions = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], success = 5000",
        "output": "[10, 16, 19, 20, 21]"
      },
      {
        "input": "spells = [5, 10, 15, 20, 25], potions = [20, 25, 30, 35, 40, 45, 50, 55, 60], success = 500",
        "output": "[0, 3, 6, 8, 9]"
      },
      {
        "input": "spells = [1000, 2000, 3000, 4000, 5000], potions = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], success = 10000",
        "output": "[9, 10, 10, 10, 10]"
      },
      {
        "input": "spells = [99999, 99998, 99997, 99996, 99995], potions = [99999, 99998, 99997, 99996, 99995], success = 99990000025",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "spells = [5, 10, 15, 20, 25], potions = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], success = 50",
        "output": "[5, 8, 8, 9, 9]"
      },
      {
        "input": "spells = [1, 2, 3, 4, 5], potions = [99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 99990], success = 100000",
        "output": "[0, 10, 10, 10, 10]"
      },
      {
        "input": "spells = [9, 8, 7, 6, 5], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9], success = 20",
        "output": "[7, 7, 7, 6, 6]"
      },
      {
        "input": "spells = [33333, 66666, 99999], potions = [33333, 66666, 99999, 133332, 166665, 199998], success = 10000000000",
        "output": "[0, 2, 3]"
      },
      {
        "input": "spells = [100, 200, 300, 400, 500], potions = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], success = 100",
        "output": "[10, 10, 10, 10, 10]"
      },
      {
        "input": "spells = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], potions = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], success = 250",
        "output": "[1, 6, 7, 8, 9, 9, 9, 9, 9, 10]"
      },
      {
        "input": "spells = [50000, 50000, 50000, 50000], potions = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], success = 100000",
        "output": "[10, 10, 10, 10]"
      },
      {
        "input": "spells = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], potions = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], success = 2500",
        "output": "[0, 0, 2, 4, 6, 6, 7, 7, 8, 8]"
      },
      {
        "input": "spells = [50000, 25000, 12500], potions = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000], success = 625000000",
        "output": "[9, 8, 6]"
      },
      {
        "input": "spells = [100000, 50000, 25000, 12500, 6250], potions = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576], success = 10000000000",
        "output": "[4, 3, 2, 1, 0]"
      },
      {
        "input": "spells = [1, 2, 3, 4, 5], potions = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], success = 25",
        "output": "[6, 8, 9, 9, 10]"
      },
      {
        "input": "spells = [1, 2, 3, 4, 5], potions = [100000, 200000, 300000, 400000, 500000], success = 1000000",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "spells = [100000, 90000, 80000], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], success = 500000",
        "output": "[6, 5, 4]"
      },
      {
        "input": "spells = [1, 1, 1, 1, 1], potions = [100000, 100000, 100000, 100000, 100000], success = 100000",
        "output": "[5, 5, 5, 5, 5]"
      },
      {
        "input": "spells = [10000, 20000, 30000, 40000, 50000], potions = [5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000], success = 200000000",
        "output": "[7, 9, 9, 10, 10]"
      },
      {
        "input": "spells = [50000, 50000, 50000, 50000, 50000], potions = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576], success = 5000000000",
        "output": "[4, 4, 4, 4, 4]"
      },
      {
        "input": "spells = [10000, 5000, 2500], potions = [5000, 10000, 15000, 20000, 25000], success = 100000000",
        "output": "[4, 2, 0]"
      },
      {
        "input": "spells = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], potions = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000], success = 1000000",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "spells = [5, 15, 25, 35, 45], potions = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], success = 100",
        "output": "[1, 7, 9, 9, 9]"
      },
      {
        "input": "spells = [100000, 100000, 100000, 100000], potions = [100000, 100000, 100000, 100000, 100000], success = 10000000000",
        "output": "[5, 5, 5, 5]"
      },
      {
        "input": "spells = [5, 5, 5, 5, 5], potions = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], success = 6",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "spells = [1, 3, 5, 7, 9], potions = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], success = 18",
        "output": "[2, 8, 9, 9, 10]"
      },
      {
        "input": "spells = [1, 1, 1, 1, 1], potions = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], success = 1",
        "output": "[21, 21, 21, 21, 21]"
      },
      {
        "input": "spells = [3, 3, 3, 3, 3], potions = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], success = 10",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "spells = [1, 3, 5, 7, 9], potions = [9, 7, 5, 3, 1], success = 15",
        "output": "[0, 3, 4, 4, 4]"
      },
      {
        "input": "spells = [9, 7, 5, 3, 1], potions = [20, 18, 16, 14, 12, 10, 8, 6, 4, 2], success = 50",
        "output": "[8, 7, 6, 2, 0]"
      },
      {
        "input": "spells = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], potions = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], success = 20",
        "output": "[1, 7, 9, 9, 9, 10, 10, 10, 10, 10]"
      },
      {
        "input": "spells = [10000, 20000, 30000, 40000], potions = [25000, 50000, 75000, 100000, 125000, 150000, 175000, 200000], success = 2000000000",
        "output": "[1, 5, 6, 7]"
      },
      {
        "input": "spells = [100000, 50000, 25000, 12500, 6250], potions = [200000, 100000, 50000, 25000, 12500, 6250], success = 10000000000",
        "output": "[2, 1, 0, 0, 0]"
      },
      {
        "input": "spells = [99999, 99998, 99997, 99996, 99995], potions = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], success = 9999500000",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "spells = [50, 25, 10, 2], potions = [1000, 500, 250, 125, 62, 31, 15, 7, 3, 1], success = 5000",
        "output": "[4, 3, 2, 0]"
      },
      {
        "input": "spells = [100000, 50000, 25000, 12500, 6250], potions = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576], success = 5000000000",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "spells = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], potions = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], success = 10",
        "output": "[1, 6, 7, 8, 9, 9, 9, 9, 9, 10]"
      },
      {
        "input": "spells = [1000, 2000, 3000, 4000, 5000], potions = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000], success = 5000000",
        "output": "[0, 0, 0, 0, 10]"
      },
      {
        "input": "spells = [99999, 99998, 99997, 99996, 99995], potions = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], success = 9999500000",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "spells = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], potions = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000], success = 100000",
        "output": "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "spells = [5, 5, 5, 5, 5], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], success = 25",
        "output": "[6, 6, 6, 6, 6]"
      },
      {
        "input": "spells = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], potions = [100, 200, 300, 400, 500], success = 5000",
        "output": "[0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "spells = [100, 200, 300, 400, 500], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], success = 1000",
        "output": "[11, 16, 17, 18, 19]"
      },
      {
        "input": "spells = [100000, 90000, 80000], potions = [100000, 90000, 80000, 70000, 60000], success = 8100000000",
        "output": "[2, 2, 0]"
      },
      {
        "input": "spells = [1, 1, 1, 1, 1], potions = [100000, 100000, 100000, 100000, 100000], success = 50000",
        "output": "[5, 5, 5, 5, 5]"
      },
      {
        "input": "spells = [1, 3, 5, 7, 9], potions = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], success = 15",
        "output": "[3, 8, 9, 9, 10]"
      },
      {
        "input": "spells = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], potions = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], success = 1000000",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "spells = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], success = 1000",
        "output": "[1, 11, 14, 16, 17, 17, 18, 18, 18, 19]"
      },
      {
        "input": "spells = [100000, 1, 50000, 10000], potions = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000], success = 10000000000",
        "output": "[1, 0, 0, 0]"
      },
      {
        "input": "spells = [1, 1, 1, 1, 1], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], success = 10",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "spells = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576], potions = [100000, 50000, 25000, 12500, 6250], success = 10000000000",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4]"
      },
      {
        "input": "spells = [99999, 99998, 99997, 99996, 99995], potions = [1, 10, 100, 1000, 10000, 100000], success = 9999500000",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "spells = [9, 8, 7, 6, 5, 4, 3, 2, 1], potions = [9, 8, 7, 6, 5, 4, 3, 2, 1], success = 36",
        "output": "[6, 5, 4, 4, 2, 1, 0, 0, 0]"
      },
      {
        "input": "spells = [99999, 99998, 99997, 99996, 99995], potions = [99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 99990], success = 9999800001",
        "output": "[1, 0, 0, 0, 0]"
      },
      {
        "input": "spells = [50, 25, 100, 1], potions = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], success = 1000",
        "output": "[6, 5, 7, 1]"
      },
      {
        "input": "spells = [10, 20, 30, 40, 50], potions = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], success = 150",
        "output": "[3, 7, 8, 9, 9]"
      },
      {
        "input": "spells = [100000, 90000, 80000, 70000, 60000], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], success = 54000000",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "spells = [100000, 1, 99999], potions = [1, 100000, 99999, 50000, 25000], success = 9999999999",
        "output": "[1, 0, 0]"
      },
      {
        "input": "spells = [100000, 100000, 100000], potions = [100000, 100000, 100000, 100000, 100000], success = 10000000000",
        "output": "[5, 5, 5]"
      },
      {
        "input": "spells = [5, 10, 15, 20, 25], potions = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65], success = 800",
        "output": "[0, 0, 3, 6, 7]"
      },
      {
        "input": "spells = [50, 40, 30, 20, 10], potions = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], success = 200",
        "output": "[10, 10, 9, 9, 7]"
      },
      {
        "input": "spells = [1, 2, 3, 4, 5], potions = [100000, 200000, 300000, 400000, 500000], success = 500000",
        "output": "[1, 3, 4, 4, 5]"
      },
      {
        "input": "spells = [100000, 50000, 25000], potions = [1, 10, 100, 1000, 10000, 100000], success = 10000000000",
        "output": "[1, 0, 0]"
      },
      {
        "input": "spells = [100, 200, 300, 400, 500], potions = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], success = 1500",
        "output": "[3, 7, 8, 9, 9]"
      },
      {
        "input": "spells = [50, 50, 50, 50, 50], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], success = 250",
        "output": "[16, 16, 16, 16, 16]"
      },
      {
        "input": "spells = [99999, 99998, 99997], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], success = 9999800000",
        "output": "[0, 0, 0]"
      },
      {
        "input": "spells = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], potions = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], success = 1024",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "spells = [100000, 50000, 25000, 12500], potions = [1, 10, 100, 1000, 10000, 100000], success = 10000000000",
        "output": "[1, 0, 0, 0]"
      },
      {
        "input": "spells = [100000, 50000, 25000], potions = [50000, 75000, 100000, 125000], success = 5000000000",
        "output": "[4, 2, 0]"
      },
      {
        "input": "spells = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], success = 50",
        "output": "[0, 0, 0, 0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "spells = [10, 20, 30, 40, 50], potions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], success = 50",
        "output": "[6, 8, 9, 9, 10]"
      }
    ]
  },
  {
    "id": 1577,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Two Pointers"
    ],
    "problemDescription": "Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:\n\nType 1: Triplet (i, j, k) if nums1[i]2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length.\nType 2: Triplet (i, j, k) if nums2[i]2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.\n\n\u00a0\nExample 1:\n\nInput: nums1 = [7,4], nums2 = [5,2,8,9]\nOutput: 1\nExplanation: Type 1: (1, 1, 2), nums1[1]2 = nums2[1] * nums2[2]. (42 = 2 * 8). \n\nExample 2:\n\nInput: nums1 = [1,1], nums2 = [1,1,1]\nOutput: 9\nExplanation: All Triplets are valid, because 12 = 1 * 1.\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]2 = nums2[j] * nums2[k].\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]2 = nums1[j] * nums1[k].\n\nExample 3:\n\nInput: nums1 = [7,7,8,3], nums2 = [1,2,9,7]\nOutput: 2\nExplanation: There are 2 valid triplets.\nType 1: (3,0,2).  nums1[3]2 = nums2[0] * nums2[2].\nType 2: (3,0,1).  nums2[3]2 = nums1[0] * nums1[1].\n\n\u00a0\nConstraints:\n\n1 <= nums1.length, nums2.length <= 1000\n1 <= nums1[i], nums2[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def numTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums1 = [3,5,7], nums2 = [9,25,49]",
        "output": "0"
      },
      {
        "input": "nums1 = [5,5,5,5], nums2 = [25,25,25,25]",
        "output": "0"
      },
      {
        "input": "nums1 = [10,5,2], nums2 = [100,25,4]",
        "output": "1"
      },
      {
        "input": "nums1 = [2,3,5], nums2 = [2,5,10]",
        "output": "0"
      },
      {
        "input": "nums1 = [2,2,2,2], nums2 = [4,4,4]",
        "output": "0"
      },
      {
        "input": "nums1 = [7,4], nums2 = [5,2,8,9]",
        "output": "1"
      },
      {
        "input": "nums1 = [3,3,3], nums2 = [3,3,3,3]",
        "output": "30"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [1,4,9,16,25]",
        "output": "4"
      },
      {
        "input": "nums1 = [6,10,15], nums2 = [36,100,225]",
        "output": "0"
      },
      {
        "input": "nums1 = [10,10,10], nums2 = [10,10,10,10]",
        "output": "30"
      },
      {
        "input": "nums1 = [5], nums2 = [5,5,5]",
        "output": "3"
      },
      {
        "input": "nums1 = [7,7,8,3], nums2 = [1,2,9,7]",
        "output": "2"
      },
      {
        "input": "nums1 = [3,3,3,3], nums2 = [9,9,9,9]",
        "output": "0"
      },
      {
        "input": "nums1 = [1000], nums2 = [1,10,100,1000]",
        "output": "0"
      },
      {
        "input": "nums1 = [2,3,5], nums2 = [4,9,25]",
        "output": "0"
      },
      {
        "input": "nums1 = [3,15,9], nums2 = [9,25,36]",
        "output": "1"
      },
      {
        "input": "nums1 = [2,3,4], nums2 = [1,5,6,10]",
        "output": "0"
      },
      {
        "input": "nums1 = [10,10,10], nums2 = [10,10,10]",
        "output": "18"
      },
      {
        "input": "nums1 = [1], nums2 = [1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "nums1 = [10,5,3], nums2 = [2,4,8,16]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1], nums2 = [1,1,1]",
        "output": "9"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19], nums2 = [1,9,25,49,81,121,169,225,289,361]",
        "output": "10"
      },
      {
        "input": "nums1 = [3, 9, 27, 81], nums2 = [9, 81, 243, 729, 2187, 6561]",
        "output": "3"
      },
      {
        "input": "nums1 = [11,22,33,44], nums2 = [121,484,726,1936,2904]",
        "output": "0"
      },
      {
        "input": "nums1 = [5,5,5,5,5], nums2 = [25,25,25,25,25,25,25]",
        "output": "0"
      },
      {
        "input": "nums1 = [6, 10, 12, 15], nums2 = [36, 100, 144, 225, 150]",
        "output": "0"
      },
      {
        "input": "nums1 = [6,7,8,9,10,11,12,13,14,15], nums2 = [36,49,64,81,100,121,144,169,196,225]",
        "output": "0"
      },
      {
        "input": "nums1 = [100,200,300,400], nums2 = [10000,40000,90000,160000]",
        "output": "0"
      },
      {
        "input": "nums1 = [3,3,3,3,3,3], nums2 = [9,9,9,9,9,9,9]",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 2, 3, 3, 3], nums2 = [1, 4, 4, 9, 9, 9, 9]",
        "output": "16"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "900"
      },
      {
        "input": "nums1 = [3,9,27,81,243,729], nums2 = [9,27,81,243,729,2187]",
        "output": "12"
      },
      {
        "input": "nums1 = [100,200,300,400,500], nums2 = [10000,40000,90000,160000,250000]",
        "output": "0"
      },
      {
        "input": "nums1 = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105], nums2 = [49, 196, 441, 784, 1225, 1764, 2401, 3136, 3969, 4900, 5929, 7056, 8281, 9604, 11025]",
        "output": "1"
      },
      {
        "input": "nums1 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13], nums2 = [169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169]",
        "output": "0"
      },
      {
        "input": "nums1 = [4, 8, 12, 16, 20], nums2 = [16, 64, 144, 256, 400, 625, 1024]",
        "output": "0"
      },
      {
        "input": "nums1 = [2,4,6,8,10], nums2 = [4,16,36,64,100,144,196]",
        "output": "2"
      },
      {
        "input": "nums1 = [5,5,5,5,5], nums2 = [25,25,25,25,25,25]",
        "output": "0"
      },
      {
        "input": "nums1 = [6, 10, 15], nums2 = [36, 100, 150, 225]",
        "output": "0"
      },
      {
        "input": "nums1 = [13, 169, 2197, 28561, 371293, 4826809, 62748517, 815730721, 10604499373], nums2 = [169, 2197, 28561, 371293, 4826809, 62748517, 815730721, 10604499373, 13841287201]",
        "output": "28"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400]",
        "output": "13"
      },
      {
        "input": "nums1 = [6, 12, 18, 24], nums2 = [36, 144, 324, 576, 864, 1152, 1440]",
        "output": "0"
      },
      {
        "input": "nums1 = [3, 6, 9, 12, 15, 18], nums2 = [9, 36, 81, 144, 225, 324, 441]",
        "output": "1"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "220"
      },
      {
        "input": "nums1 = [8, 9, 12, 15, 18], nums2 = [64, 81, 144, 225, 324]",
        "output": "0"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25], nums2 = [25, 100, 225, 400, 625]",
        "output": "0"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25, 30], nums2 = [25, 100, 225, 400, 625, 900]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [1,9,25,49,81]",
        "output": "4"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4], nums2 = [1,1,4,4,9,9,16,16]",
        "output": "32"
      },
      {
        "input": "nums1 = [2,4,6,8,10,12], nums2 = [4,16,36,64,100,144,256]",
        "output": "3"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [1,4,9,16,25,36,49,64,81,100,121,144]",
        "output": "13"
      },
      {
        "input": "nums1 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], nums2 = [4, 16, 36, 64, 100, 144, 196, 256, 324, 400]",
        "output": "5"
      },
      {
        "input": "nums1 = [10,100,1000,10000,100000], nums2 = [100,10000,1000000,100000000,10000000000]",
        "output": "6"
      },
      {
        "input": "nums1 = [12,15,20,25,30], nums2 = [144,225,400,625,900]",
        "output": "0"
      },
      {
        "input": "nums1 = [5,5,5,5], nums2 = [25,25,25,25,25]",
        "output": "0"
      },
      {
        "input": "nums1 = [3,3,3,3,3,3,3,3,3,3], nums2 = [9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "0"
      },
      {
        "input": "nums1 = [11, 11, 121, 1331, 14641], nums2 = [121, 1331, 14641, 161051, 1771561]",
        "output": "6"
      },
      {
        "input": "nums1 = [3,3,3,3,3,3], nums2 = [9,9,9,9,9,9,9,9,9]",
        "output": "0"
      },
      {
        "input": "nums1 = [7, 49, 343, 2401, 16807, 117649, 823543, 5764801, 40353607, 282475249], nums2 = [49, 343, 2401, 16807, 117649, 823543, 5764801, 40353607, 282475249, 2004761894]",
        "output": "36"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], nums2 = [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]",
        "output": "10"
      },
      {
        "input": "nums1 = [3,6,9,12,15,18], nums2 = [9,36,81,144,225,324]",
        "output": "1"
      },
      {
        "input": "nums1 = [6,6,6,6,6,6,6,6,6,6], nums2 = [36,36,36,36,36,36,36,36,36,36,36,36]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1,2,2,2,3,3,3,4,4,4], nums2 = [1,1,1,4,4,4,9,9,9,16,16,16,1]",
        "output": "156"
      },
      {
        "input": "nums1 = [1000,2000,3000,4000,5000], nums2 = [1000000,4000000,9000000,16000000,25000000]",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [100, 400, 900, 1600, 2500, 3600, 4900, 6400, 8100, 10000, 12100, 14400, 16900, 19600, 22500]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,2,4,8,16,32], nums2 = [1,1,4,4,16,16,64]",
        "output": "33"
      },
      {
        "input": "nums1 = [2,4,6,8,10,12,14,16,18,20], nums2 = [4,16,36,64,100,144,196,256,324,400]",
        "output": "5"
      },
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [100,400,900,1600,2500,50,250,1250,6250]",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 200, 300, 400], nums2 = [10000, 40000, 90000, 160000]",
        "output": "0"
      },
      {
        "input": "nums1 = [2,3,5,7,11,13,17,19,23,29], nums2 = [4,9,25,49,121,169,289,361,529,841]",
        "output": "0"
      },
      {
        "input": "nums1 = [7,49,343,2401], nums2 = [49,343,2401,16807]",
        "output": "4"
      },
      {
        "input": "nums1 = [1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1]",
        "output": "325"
      },
      {
        "input": "nums1 = [5,10,15,20,25], nums2 = [25,50,75,100,125,150]",
        "output": "0"
      },
      {
        "input": "nums1 = [8, 15, 17, 20], nums2 = [64, 225, 289, 400, 676, 841]",
        "output": "0"
      },
      {
        "input": "nums1 = [2,4,8,16,32,64,128,256,512], nums2 = [4,16,64,256,1024,4096,16384,65536,262144,1048576]",
        "output": "24"
      },
      {
        "input": "nums1 = [6, 6, 6, 6, 6], nums2 = [36, 36, 36, 36, 36]",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "11550"
      },
      {
        "input": "nums1 = [7,11,13,17,19,23,29,31,37], nums2 = [49,121,169,289,361,529,841,961,1369,1681]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [1,4,9,16,25,36,49,64,81,100,121,144,169,196,225]",
        "output": "22"
      },
      {
        "input": "nums1 = [2, 4, 8, 16, 32, 64], nums2 = [4, 16, 64, 256, 1024, 4096, 16384]",
        "output": "9"
      },
      {
        "input": "nums1 = [10,15,20,25,30,35,40,45,50], nums2 = [100,225,400,625,900,1225,1600,2025,2500]",
        "output": "0"
      },
      {
        "input": "nums1 = [7, 24, 25, 30], nums2 = [49, 576, 625, 900, 1440, 1800]",
        "output": "0"
      },
      {
        "input": "nums1 = [2,3,5,7,11,13,17], nums2 = [4,9,25,49,121,169,289]",
        "output": "0"
      },
      {
        "input": "nums1 = [7, 11, 13, 17, 19], nums2 = [49, 121, 169, 289, 361, 529]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1]",
        "output": "900"
      },
      {
        "input": "nums1 = [1,3,3,3,1], nums2 = [1,9,9,1,1,9]",
        "output": "36"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [10000, 40000, 90000, 160000, 250000, 360000, 490000, 640000, 810000, 1000000]",
        "output": "0"
      },
      {
        "input": "nums1 = [5,5,5,5,5,5,5,5,5], nums2 = [25,25,25,25,25,25,25,25,25,25]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,2,3,3,3], nums2 = [1,1,2,2,3,3]",
        "output": "14"
      },
      {
        "input": "nums1 = [1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5], nums2 = [1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "563"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3], nums2 = [1, 1, 1, 4, 4, 9]",
        "output": "27"
      },
      {
        "input": "nums1 = [3, 9, 27, 81, 243], nums2 = [27, 81, 243, 729, 2187]",
        "output": "6"
      },
      {
        "input": "nums1 = [31, 37, 41, 43, 47, 53, 59], nums2 = [961, 1369, 1681, 1849, 2209, 2809, 3481]",
        "output": "0"
      },
      {
        "input": "nums1 = [2, 4, 8, 16, 32, 64, 128, 256], nums2 = [4, 16, 64, 256, 1024, 4096]",
        "output": "17"
      },
      {
        "input": "nums1 = [2,2,2,2], nums2 = [4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums1 = [2,4,8,16,32,64], nums2 = [4,16,64,256,1024,4096]",
        "output": "9"
      },
      {
        "input": "nums1 = [6,6,6,6,6,6], nums2 = [36,36,36,36,36,36,36,36,36,36,36]",
        "output": "0"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], nums2 = [25, 100, 225, 400, 625, 900, 1225, 1600, 2025, 2500]",
        "output": "1"
      },
      {
        "input": "nums1 = [3,5,8,12,15,17,20], nums2 = [9,25,64,144,225,289,400]",
        "output": "1"
      },
      {
        "input": "nums1 = [15,20,25,30], nums2 = [225,400,625,900,1200,1800]",
        "output": "0"
      },
      {
        "input": "nums1 = [10,10,10], nums2 = [100,100,100,100]",
        "output": "0"
      },
      {
        "input": "nums1 = [7,11,13,17,19], nums2 = [49,121,169,289,361]",
        "output": "0"
      },
      {
        "input": "nums1 = [6,7,8], nums2 = [36,49,64,84,112]",
        "output": "0"
      },
      {
        "input": "nums1 = [2, 3, 5, 7, 11], nums2 = [4, 6, 9, 10, 14, 15, 21, 22, 30, 33, 35, 55, 77, 105]",
        "output": "0"
      },
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [100,400,900,1600,2500]",
        "output": "0"
      },
      {
        "input": "nums1 = [11, 22, 33, 44, 55, 66, 77, 88, 99, 110], nums2 = [121, 484, 1089, 1936, 3025, 4356, 5929, 7744, 9801, 12100, 14641, 17424, 20736, 24336, 28081]",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40], nums2 = [100, 400, 900, 1600, 2500]",
        "output": "0"
      },
      {
        "input": "nums1 = [6, 8, 10, 12, 14], nums2 = [36, 64, 100, 144, 196, 256]",
        "output": "0"
      },
      {
        "input": "nums1 = [15, 25, 35, 45, 55], nums2 = [225, 625, 1225, 2025, 3025, 450, 750, 1050, 1350, 1650]",
        "output": "0"
      },
      {
        "input": "nums1 = [100000,99999,99998,99997,99996], nums2 = [10000000000,9999800001,9999600004,9999400009,9999200016]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1]",
        "output": "351"
      },
      {
        "input": "nums1 = [6, 8, 10, 12, 14], nums2 = [36, 64, 100, 144, 196, 48, 72, 96, 112, 120]",
        "output": "0"
      },
      {
        "input": "nums1 = [8,16,24,32,40,48,56,64,72,80], nums2 = [64,256,576,1024,1600,2304,3136,4096,5184,6400]",
        "output": "0"
      },
      {
        "input": "nums1 = [6,10,14,18,22,26,30], nums2 = [36,100,196,324,484,676,900]",
        "output": "0"
      },
      {
        "input": "nums1 = [3, 5, 7, 11, 13], nums2 = [9, 25, 49, 121, 169, 289]",
        "output": "0"
      },
      {
        "input": "nums1 = [7,11,13,17,19,23,29], nums2 = [49,121,169,289,361,529,841]",
        "output": "0"
      },
      {
        "input": "nums1 = [5, 12, 13, 15], nums2 = [25, 144, 169, 225, 441]",
        "output": "0"
      },
      {
        "input": "nums1 = [11, 13, 17, 19], nums2 = [121, 169, 289, 361, 441, 529]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,2,3,3,3,4], nums2 = [1,4,4,9,9,16]",
        "output": "12"
      },
      {
        "input": "nums1 = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], nums2 = [4, 16, 64, 256, 1024, 4096, 16384, 65536, 262144, 1048576]",
        "output": "30"
      },
      {
        "input": "nums1 = [7, 11, 13, 17, 19], nums2 = [49, 121, 169, 289, 361, 441]",
        "output": "0"
      }
    ]
  },
  {
    "id": 998,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Binary Tree"
    ],
    "problemDescription": "A maximum tree is a tree where every node has a value greater than any other value in its subtree.\nYou are given the root of a maximum binary tree and an integer val.\nJust as in the previous problem, the given tree was constructed from a list a (root = Construct(a)) recursively with the following Construct(a) routine:\n\nIf a is empty, return null.\nOtherwise, let a[i] be the largest element of a. Create a root node with the value a[i].\nThe left child of root will be Construct([a[0], a[1], ..., a[i - 1]]).\nThe right child of root will be Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]]).\nReturn root.\n\nNote that we were not given a directly, only a root node root = Construct(a).\nSuppose b is a copy of a with the value val appended to it. It is guaranteed that b has unique values.\nReturn Construct(b).\n\u00a0\nExample 1:\n\n\nInput: root = [4,1,3,null,null,2], val = 5\nOutput: [5,4,null,1,3,null,null,2]\nExplanation: a = [1,4,2,3], b = [1,4,2,3,5]\n\nExample 2:\n\n\nInput: root = [5,2,4,null,1], val = 3\nOutput: [5,2,4,null,1,null,3]\nExplanation: a = [2,1,5,4], b = [2,1,5,4,3]\n\nExample 3:\n\n\nInput: root = [5,2,3,null,1], val = 4\nOutput: [5,2,4,null,1,3]\nExplanation: a = [2,1,5,3], b = [2,1,5,3,4]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 100].\n1 <= Node.val <= 100\nAll the values of the tree are unique.\n1 <= val <= 100\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def insertIntoMaxTree(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n        ",
    "testCases": [
      {
        "input": "root = [4,1,3,null,null,2], val = 5",
        "output": "[5, 4, None, 1, 3, None, None, 2]"
      },
      {
        "input": "root = [5,2,4,null,1], val = 3",
        "output": "[5, 2, 4, None, 1, None, 3]"
      },
      {
        "input": "root = [5,2,3,null,1], val = 4",
        "output": "[5, 2, 4, None, 1, 3]"
      },
      {
        "input": "root = [50,20,40,null,10,30,null,null,null,5,15,25,35], val = 28",
        "output": "[50, 20, 40, None, 10, 30, 28, None, None, 5, 15, None, None, 25, 35]"
      },
      {
        "input": "root = [8,3,11,1,6,null,12,0,5,null,9,null,13], val = 15",
        "output": "[15, 8, None, 3, 11, 1, 6, None, 12, 0, 5, None, 9, None, 13]"
      },
      {
        "input": "root = [30,20,40,10,null,null,50,5,null,null,null,45], val = 35",
        "output": "[35, 30, None, 20, 40, 10, None, None, 50, 5, None, None, None, 45]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18], val = 6",
        "output": "[10, 5, 15, 3, 7, None, 18, None, None, None, None, None, 6]"
      },
      {
        "input": "root = [20,10,15,5,null,null,null,3,7], val = 25",
        "output": "[25, 20, None, 10, 15, 5, None, None, None, 3, 7]"
      },
      {
        "input": "root = [2,1], val = 3",
        "output": "[3, 2, None, 1]"
      },
      {
        "input": "root = [3,2,4,null,null,null,5], val = 1",
        "output": "[3, 2, 4, None, None, None, 5, None, 1]"
      },
      {
        "input": "root = [30,10,20,null,null,15,25], val = 22",
        "output": "[30, 10, 22, None, None, 20, None, 15, 25]"
      },
      {
        "input": "root = [50,20,40,null,10,30,null,null,null,5,15,25,35], val = 22",
        "output": "[50, 20, 40, None, 10, 30, 22, None, None, 5, 15, None, None, 25, 35]"
      },
      {
        "input": "root = [9,7,10,5,8,null,null,3,6], val = 11",
        "output": "[11, 9, None, 7, 10, 5, 8, None, None, 3, 6]"
      },
      {
        "input": "root = [2,1,null,4,3], val = 5",
        "output": "[5, 2, None, 1, None, 4, 3]"
      },
      {
        "input": "root = [75,50,80,30,60,78,90,10,null,55,null,null,77,null,null,null,95], val = 65",
        "output": "[75, 50, 80, 30, 60, 78, 90, 10, None, 55, None, None, 77, None, 65, None, 95]"
      },
      {
        "input": "root = [20,10,25,5,15,22,30,2,7,13,17,18,27,29,31,1,3,6,8,12,14,16,19,21,23,26,24,28,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null], val = 32",
        "output": "[32, 20, None, 10, 25, 5, 15, 22, 30, 2, 7, 13, 17, 18, 27, 29, 31, 1, 3, 6, 8, 12, 14, 16, 19, 21, 23, 26, 24, 28]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], val = 20",
        "output": "[20, 1, None, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "root = [10,5,15,null,6,12,20,null,null,null,7,13,17,null,null,null,null,null,25], val = 14",
        "output": "[14, 10, None, 5, 15, None, 6, 12, 20, None, None, None, 7, 13, 17, None, None, None, None, None, 25]"
      },
      {
        "input": "root = [7,3,8,1,4,6,9,null,null,null,5], val = 12",
        "output": "[12, 7, None, 3, 8, 1, 4, 6, 9, None, None, None, 5]"
      },
      {
        "input": "root = [3,2,1], val = 4",
        "output": "[4, 3, None, 2, 1]"
      },
      {
        "input": "root = [60,30,80,20,40,70,90,10,25,35,45,65,75,85,95], val = 88",
        "output": "[88, 60, None, 30, 80, 20, 40, 70, 90, 10, 25, 35, 45, 65, 75, 85, 95]"
      },
      {
        "input": "root = [7,3,8,1,4,6,9,null,2,null,5], val = 1",
        "output": "[7, 3, 8, 1, 4, 6, 9, None, 2, None, 5, None, None, None, 1]"
      },
      {
        "input": "root = [60,30,80,10,50,70,90,null,null,20,40,null,null,75,null], val = 100",
        "output": "[100, 60, None, 30, 80, 10, 50, 70, 90, None, None, 20, 40, None, None, 75]"
      },
      {
        "input": "root = [6,3,8,1,5,7,9,0,2,4,6,8,10], val = 7",
        "output": "[7, 6, None, 3, 8, 1, 5, 7, 9, 0, 2, 4, 6, 8, 10]"
      },
      {
        "input": "root = [1,2,null,null,3,null,null,4,null,null,5,null,null,6,null,null,7], val = 8",
        "output": "[8, 1, None, 2, None, None, 3]"
      },
      {
        "input": "root = [50,25,75,10,40,60,80,5,15,30,45,55,65,75,85], val = 90",
        "output": "[90, 50, None, 25, 75, 10, 40, 60, 80, 5, 15, 30, 45, 55, 65, 75, 85]"
      },
      {
        "input": "root = [9,3,10,1,5,null,null,0,4,null,6], val = 11",
        "output": "[11, 9, None, 3, 10, 1, 5, None, None, 0, 4, None, 6]"
      },
      {
        "input": "root = [5,2,4,null,1,null,3,null,null,null,null], val = 35",
        "output": "[35, 5, None, 2, 4, None, 1, None, 3]"
      },
      {
        "input": "root = [6,3,9,2,5,8,10,null,null,1,4,7,null,null,null,null,null,null,null], val = 11",
        "output": "[11, 6, None, 3, 9, 2, 5, 8, 10, None, None, 1, 4, 7]"
      },
      {
        "input": "root = [3,1,4,null,2,null,6,5,null,null,7], val = 8",
        "output": "[8, 3, None, 1, 4, None, 2, None, 6, 5, None, None, 7]"
      },
      {
        "input": "root = [10,5,20,null,null,15,30,12,null,null,25,28,null,null,35], val = 33",
        "output": "[33, 10, None, 5, 20, None, None, 15, 30, 12, None, None, 25, 28, None, None, 35]"
      },
      {
        "input": "root = [15,10,20,5,12,18,25,1,6,null,14,16,null,19,23,null,null,null,3,null,null,null,11,null,null,null,null,null,null,2,null,null,null,null], val = 17",
        "output": "[17, 15, None, 10, 20, 5, 12, 18, 25, 1, 6, None, 14, 16, None, 19, 23, None, None, None, 3, None, None, None, 11, None, None, None, None, None, None, 2]"
      },
      {
        "input": "root = [15,5,16,2,7,null,null,1,3,null,6,4,null,null,null,null,null], val = 10",
        "output": "[15, 5, 16, 2, 7, None, 10, 1, 3, None, 6, None, None, 4]"
      },
      {
        "input": "root = [8,3,10,1,5,9,11,null,2,4,7,null,null,6,null,null,null,null,null], val = 12",
        "output": "[12, 8, None, 3, 10, 1, 5, 9, 11, None, 2, 4, 7, None, None, 6]"
      },
      {
        "input": "root = [5,3,7,2,4,6,8], val = 1",
        "output": "[5, 3, 7, 2, 4, 6, 8, None, None, None, None, None, None, None, 1]"
      },
      {
        "input": "root = [9,5,11,3,7,10,13,1,4,6,8,9,12,14,15], val = 16",
        "output": "[16, 9, None, 5, 11, 3, 7, 10, 13, 1, 4, 6, 8, 9, 12, 14, 15]"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,null,null,null,null,null,null,37], val = 22",
        "output": "[25, 15, 35, 10, 20, 30, 40, None, None, None, None, None, None, 37, 22]"
      },
      {
        "input": "root = [7,3,8,null,4,9,null,null,5,null,10,6,null,null,11], val = 12",
        "output": "[12, 7, None, 3, 8, None, 4, 9, None, None, 5, None, 10, 6, None, None, 11]"
      },
      {
        "input": "root = [20,10,25,null,15,22,30,null,null,13,null,null,28], val = 18",
        "output": "[20, 10, 25, None, 15, 22, 30, None, None, 13, None, None, 28, None, None, None, 18]"
      },
      {
        "input": "root = [7,5,10,4,6,9,12,null,null,2,null,8,null,11,null,null,null,13], val = 14",
        "output": "[14, 7, None, 5, 10, 4, 6, 9, 12, None, None, 2, None, 8, None, 11, None, None, None, 13]"
      },
      {
        "input": "root = [7,3,8,1,4,6,9,null,2,null,5], val = 11",
        "output": "[11, 7, None, 3, 8, 1, 4, 6, 9, None, 2, None, 5]"
      },
      {
        "input": "root = [6,2,8,0,4,7,9,null,null,3,5], val = 10",
        "output": "[10, 6, None, 2, 8, 0, 4, 7, 9, None, None, 3, 5]"
      },
      {
        "input": "root = [3,1,4,null,2], val = 0",
        "output": "[3, 1, 4, None, 2, None, 0]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,7,null,13,22,28,null,null,null,null,null,6,null,null,null,null,null,27,null,null], val = 18",
        "output": "[20, 10, 30, 5, 15, 25, 35, 1, 7, None, 13, 22, 28, None, 18, None, None, None, 6, None, None, None, None, None, 27]"
      },
      {
        "input": "root = [8,5,9,3,7,6,10,1,4,null,null,null,null,null,11], val = 12",
        "output": "[12, 8, None, 5, 9, 3, 7, 6, 10, 1, 4, None, None, None, None, None, 11]"
      },
      {
        "input": "root = [15,10,20,5,12,18,25,3,7,11,14,16,19,23,27,1,4,6,8,9,13,15,17,21,22,24,26,28], val = 29",
        "output": "[29, 15, None, 10, 20, 5, 12, 18, 25, 3, 7, 11, 14, 16, 19, 23, 27, 1, 4, 6, 8, 9, 13, 15, 17, 21, 22, 24, 26, 28]"
      },
      {
        "input": "root = [50,20,30,10,25,28,35,null,15,null,null,null,null,null,40], val = 45",
        "output": "[50, 20, 45, 10, 25, 30, None, None, 15, None, None, 28, 35, None, None, None, None, None, 40]"
      },
      {
        "input": "root = [10,5,12,2,7,null,13,1,null,6,8], val = 14",
        "output": "[14, 10, None, 5, 12, 2, 7, None, 13, 1, None, 6, 8]"
      },
      {
        "input": "root = [9,6,12,3,8,11,15,null,5,7,null,null,13,null,null,16,17], val = 14",
        "output": "[14, 9, None, 6, 12, 3, 8, 11, 15, None, 5, 7, None, None, 13, None, None, 16, 17]"
      },
      {
        "input": "root = [50,20,40,null,10,30,null,null,null,5,15,25,35], val = 45",
        "output": "[50, 20, 45, None, 10, 40, None, None, None, 30, None, 5, 15, 25, 35]"
      },
      {
        "input": "root = [7,3,8,1,4,6,9,null,2,null,5], val = 10",
        "output": "[10, 7, None, 3, 8, 1, 4, 6, 9, None, 2, None, 5]"
      },
      {
        "input": "root = [100,50,150,25,75,null,200,10,30,60,90,180,220], val = 120",
        "output": "[120, 100, None, 50, 150, 25, 75, None, 200, 10, 30, 60, 90, 180, 220]"
      },
      {
        "input": "root = [8,3,10,1,4,null,12,null,2,5,7,null,null,6,9,11], val = 1",
        "output": "[8, 3, 10, 1, 4, None, 12, None, 2, 5, 7, None, 1, 6, 9, 11]"
      },
      {
        "input": "root = [50,20,40,null,10,30,null,null,null,5,15,25,35], val = 9",
        "output": "[50, 20, 40, None, 10, 30, 9, None, None, 5, 15, None, None, 25, 35]"
      },
      {
        "input": "root = [50,30,70,20,40,60,80,10,25,35,45,55,65,75,85], val = 42",
        "output": "[50, 30, 70, 20, 40, 60, 80, 10, 25, 35, 45, 55, 65, 75, 85, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 42]"
      },
      {
        "input": "root = [9,3,12,1,6,11,13,null,2,5,7,null,null,10,null,null,null,null,null], val = 8",
        "output": "[9, 3, 12, 1, 6, 11, 13, None, 2, 5, 7, None, None, 10, 8]"
      },
      {
        "input": "root = [7,3,8,1,4,6,9,null,2,null,5], val = 6",
        "output": "[7, 3, 8, 1, 4, 6, 9, None, 2, None, 5, None, None, None, 6]"
      },
      {
        "input": "root = [6,2,8,1,4,7,9,null,null,3,5], val = 10",
        "output": "[10, 6, None, 2, 8, 1, 4, 7, 9, None, None, 3, 5]"
      },
      {
        "input": "root = [10,5,15,null,null,12,20,null,null,11,13], val = 8",
        "output": "[10, 5, 15, None, None, 12, 20, None, None, 11, 13, None, None, None, 8]"
      },
      {
        "input": "root = [1], val = 2",
        "output": "[2, 1]"
      },
      {
        "input": "root = [5,3,8,2,4,null,9,1,null,7,null,6], val = 13",
        "output": "[13, 5, None, 3, 8, 2, 4, None, 9, 1, None, 7, None, 6]"
      },
      {
        "input": "root = [7,2,11,1,6,10,13,0,5,null,9,8,12,null,14], val = 16",
        "output": "[16, 7, None, 2, 11, 1, 6, 10, 13, 0, 5, None, 9, 8, 12, None, 14]"
      },
      {
        "input": "root = [1,3,null,2], val = 4",
        "output": "[4, 1, None, 3, None, 2]"
      },
      {
        "input": "root = [15,5,25,3,10,null,30,2,4,7,13,27,35,26,null,null,null,null,null,36,37], val = 38",
        "output": "[38, 15, None, 5, 25, 3, 10, None, 30, 2, 4, 7, 13, 27, 35, 26, None, None, None, None, None, 36, 37]"
      },
      {
        "input": "root = [90,60,100,40,70,95,110,20,50,65,75,92,98,null,null,10,30,45,55,null,62,68,73,85,91,96,105,null,null,null,null,null,null,null,null,null,null,null,null,35], val = 88",
        "output": "[90, 60, 100, 40, 70, 95, 110, 20, 50, 65, 75, 92, 98, None, 88, 10, 30, 45, 55, None, 62, 68, 73, 85, 91, 96, 105, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 35]"
      },
      {
        "input": "root = [10,4,12,2,7,11,14,1,3,5,8,9,13,15], val = 16",
        "output": "[16, 10, None, 4, 12, 2, 7, 11, 14, 1, 3, 5, 8, 9, 13, 15]"
      },
      {
        "input": "root = [10,5,15,2,6,12,18,null,null,null,null,11,13,null,null,null,null,16,20], val = 9",
        "output": "[10, 5, 15, 2, 6, 12, 18, None, None, None, None, 11, 13, None, 9, None, None, 16, 20]"
      },
      {
        "input": "root = [15,10,20,5,12,17,25,3,7,11,13,null,18,null,2,6,8,9,14,16,19,21,23,null,null,null,null,null,null,null,null,22,24,26], val = 27",
        "output": "[27, 15, None, 10, 20, 5, 12, 17, 25, 3, 7, 11, 13, None, 18, None, 2, 6, 8, 9, 14, 16, 19, 21, 23, None, None, None, None, None, None, None, None, 22, 24, 26]"
      },
      {
        "input": "root = [8,5,10,2,6,null,15,null,null,null,null,12], val = 7",
        "output": "[8, 5, 10, 2, 6, None, 15, None, None, None, None, 12, 7]"
      },
      {
        "input": "root = [75,50,80,25,60,78,85,10,30,55,65,null,79,null,20,40,53,null,null,58], val = 100",
        "output": "[100, 75, None, 50, 80, 25, 60, 78, 85, 10, 30, 55, 65, None, 79, None, 20, 40, 53, None, None, 58]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], val = 16",
        "output": "[16, 1, None, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "root = [3,2,4,null,null,null,5], val = 6",
        "output": "[6, 3, None, 2, 4, None, None, None, 5]"
      },
      {
        "input": "root = [50,20,40,null,10,30,null,null,null,5,15,25,35], val = 60",
        "output": "[60, 50, None, 20, 40, None, 10, 30, None, None, None, 5, 15, 25, 35]"
      },
      {
        "input": "root = [7,3,8,null,null,5,9,null,4], val = 6",
        "output": "[7, 3, 8, None, None, 5, 9, None, 4, None, 6]"
      },
      {
        "input": "root = [15,7,16,3,9,11,17,1,5,8,10,12,13,null,4,6,null,2,14], val = 18",
        "output": "[18, 15, None, 7, 16, 3, 9, 11, 17, 1, 5, 8, 10, 12, 13, None, 4, 6, None, 2, 14]"
      },
      {
        "input": "root = [7,4,9,2,5,null,10,1,3,6,8,null,null,null,null,null,11], val = 7",
        "output": "[7, 4, 9, 2, 5, None, 10, 1, 3, 6, 8, None, 7, None, None, None, 11]"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,90,110,140,160,180], val = 130",
        "output": "[130, 100, None, 50, 150, 25, 75, 125, 175, 10, 30, 60, 90, 110, 140, 160, 180]"
      },
      {
        "input": "root = [10,5,15,2,7,null,18,1,3,6,9,null,null,null,null,null,16,17], val = 20",
        "output": "[20, 10, None, 5, 15, 2, 7, None, 18, 1, 3, 6, 9, None, None, None, None, None, 16, 17]"
      },
      {
        "input": "root = [9,3,7,null,6,4,8], val = 10",
        "output": "[10, 9, None, 3, 7, None, 6, 4, 8]"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,80,110,140,160,180], val = 90",
        "output": "[100, 50, 150, 25, 75, 125, 175, 10, 30, 60, 80, 110, 140, 160, 180, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 90]"
      },
      {
        "input": "root = [75,50,80,25,60,78,85,10,30,55,65,null,79,null,20,40,53,null,null,58], val = 27",
        "output": "[75, 50, 80, 25, 60, 78, 85, 10, 30, 55, 65, None, 79, None, 27, 40, 53, None, None, 58, None, None, None, None, None, 20]"
      },
      {
        "input": "root = [75,50,80,25,60,78,85,10,30,55,65,null,79,null,20,40,53,null,null,58], val = 10",
        "output": "[75, 50, 80, 25, 60, 78, 85, 10, 30, 55, 65, None, 79, None, 20, 40, 53, None, None, 58, None, None, None, None, None, None, 10]"
      },
      {
        "input": "root = [75,50,80,25,60,78,85,10,30,55,65,null,79,null,20,40,53,null,null,58], val = 62",
        "output": "[75, 50, 80, 25, 60, 78, 85, 10, 30, 55, 65, None, 79, None, 62, 40, 53, None, None, 58, None, None, None, None, None, 20]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,18,23,28,33,38,1,4,6,8,9,11,13,14,16,17,19,21,22,24,26,27,29,31,32,34,36,37,39,40], val = 41",
        "output": "[41, 20, None, 10, 30, 5, 15, 25, 35, 2, 7, 12, 18, 23, 28, 33, 38, 1, 4, 6, 8, 9, 11, 13, 14, 16, 17, 19, 21, 22, 24, 26, 27, 29, 31, 32, 34, 36, 37, 39, 40]"
      }
    ]
  },
  {
    "id": 1245,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "problemDescription": "The diameter of a tree is the number of edges in the longest path in that tree.\nThere is an undirected tree of n nodes labeled from 0 to n - 1. You are given a 2D array edges where edges.length == n - 1 and edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the tree.\nReturn the diameter of the tree.\n\u00a0\nExample 1:\n\n\nInput: edges = [[0,1],[0,2]]\nOutput: 2\nExplanation: The longest path of the tree is the path 1 - 0 - 2.\n\nExample 2:\n\n\nInput: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]\nOutput: 4\nExplanation: The longest path of the tree is the path 3 - 2 - 1 - 4 - 5.\n\n\u00a0\nConstraints:\n\nn == edges.length + 1\n1 <= n <= 104\n0 <= ai, bi < n\nai != bi\n\n",
    "starterCode": "class Solution:\n    def treeDiameter(self, edges: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "edges = [[0,1],[1,2],[1,3],[3,4]]",
        "output": "3"
      },
      {
        "input": "edges = [[0,1],[0,2]]",
        "output": "2"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7]]",
        "output": "4"
      },
      {
        "input": "edges = [[0,1],[0,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3]]",
        "output": "3"
      },
      {
        "input": "edges = [[0,1],[0,3],[1,2],[3,4],[3,5],[5,6]]",
        "output": "5"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]",
        "output": "4"
      },
      {
        "input": "edges = [[0,1],[0,3],[3,2],[3,4],[4,5],[4,6],[6,7],[6,8],[8,9]]",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3]]",
        "output": "2"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "9"
      },
      {
        "input": "edges = [[0,1],[0,3],[0,2],[3,4],[3,5]]",
        "output": "3"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[3,4],[4,5],[4,6],[6,7]]",
        "output": "5"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]",
        "output": "4"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
        "output": "8"
      },
      {
        "input": "edges = [[0,1]]",
        "output": "1"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[11,24],[11,25],[12,26],[12,27],[13,28],[13,29]]",
        "output": "7"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[11,24],[11,25],[12,26],[12,27]]",
        "output": "7"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12]]",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30]]",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
        "output": "14"
      },
      {
        "input": "edges = [[0,1],[0,2],[2,3],[2,4],[4,5],[4,6],[5,7],[5,8],[8,9],[8,10],[10,11],[10,12],[12,13],[12,14],[14,15],[15,16],[15,17],[17,18]]",
        "output": "11"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[5,8],[8,9],[9,10],[10,11],[10,12],[12,13],[13,14],[14,15]]",
        "output": "11"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[5,6],[5,7],[5,8],[8,9],[8,10],[10,11],[10,12],[10,13],[13,14],[13,15],[15,16],[16,17],[17,18]]",
        "output": "10"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[4,15],[5,16],[5,17],[5,18],[6,19],[6,20],[6,21],[7,22],[7,23],[7,24],[8,25],[8,26],[8,27],[9,28],[9,29],[9,30],[10,31],[10,32],[10,33],[11,34],[11,35],[11,36],[12,37],[12,38],[12,39]]",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[11,24],[11,25],[12,26],[12,27],[13,28],[13,29],[14,30],[14,31],[15,32],[15,33],[16,34],[16,35],[17,36],[17,37],[18,38],[18,39],[19,40],[19,41],[20,42],[20,43],[21,44],[21,45],[22,46],[22,47],[23,48],[23,49]]",
        "output": "9"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[4,6],[4,7],[5,8],[5,9],[6,10],[6,11],[7,12],[7,13],[8,14],[8,15],[9,16],[9,17],[10,18],[10,19],[11,20],[11,21],[12,22],[12,23],[13,24],[13,25]]",
        "output": "7"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39],[19,40],[20,41],[20,42],[21,43],[21,44],[22,45],[22,46],[23,47],[23,48],[24,49],[24,50],[25,51],[25,52],[26,53],[26,54]]",
        "output": "10"
      },
      {
        "input": "edges = [[0,1],[0,2],[2,3],[2,4],[3,5],[3,6],[5,7],[5,8],[8,9],[8,10],[10,11],[10,12],[4,13],[4,14],[14,15],[15,16],[15,17],[17,18],[17,19],[18,20],[18,21],[20,22],[20,23]]",
        "output": "12"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29]]",
        "output": "29"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]]",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[2,4],[2,5],[3,6],[3,7],[5,8],[5,9],[7,10],[7,11],[8,12],[8,13],[9,14],[9,15],[11,16],[11,17],[13,18],[13,19]]",
        "output": "10"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[13,25],[13,26],[14,27],[14,28]]",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[5,8],[8,9],[8,10],[6,11],[6,12],[11,13],[12,14]]",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[0,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29]]",
        "output": "20"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39],[19,40],[20,41],[20,42],[21,43],[21,44],[22,45],[22,46]]",
        "output": "9"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39]]",
        "output": "9"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[5,6],[5,7],[7,8],[7,9],[9,10],[10,11],[10,12],[12,13],[12,14],[14,15],[14,16],[16,17],[16,18],[18,19],[18,20]]",
        "output": "11"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17],[10,18],[11,19],[12,20],[13,21],[14,22]]",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[5,8],[8,9],[9,10],[10,11]]",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[5,8],[8,9],[8,10]]",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
        "output": "15"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17],[10,18],[11,19],[12,20],[13,21],[14,22],[15,23],[16,24],[17,25],[18,26],[19,27],[20,28],[21,29],[22,30]]",
        "output": "10"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24],[11,25],[11,26],[12,27],[12,28]]",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[5,8],[5,9],[7,10],[7,11],[9,12],[9,13],[10,14],[10,15],[11,16],[11,17],[12,18],[12,19]]",
        "output": "9"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]]",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22]]",
        "output": "7"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39],[19,40],[20,41],[20,42],[21,43],[21,44],[22,45],[22,46],[23,47],[23,48],[24,49],[24,50]]",
        "output": "10"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]]",
        "output": "19"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "10"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24],[11,25],[11,26],[12,27],[12,28],[13,29],[13,30],[14,31],[14,32],[15,33],[15,34],[16,35],[16,36]]",
        "output": "7"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]]",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]]",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[2,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
        "output": "13"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17],[10,18],[11,19],[12,20]]",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24]]",
        "output": "24"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[5,10],[5,11]]",
        "output": "5"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[4,15],[5,16],[5,17],[5,18],[6,19],[6,20],[6,21],[7,22],[7,23],[7,24],[8,25],[8,26],[8,27],[9,28],[9,29],[9,30],[10,31],[10,32],[10,33],[11,34],[11,35],[11,36],[12,37],[12,38],[12,39],[13,40],[13,41],[13,42],[14,43],[14,44],[14,45],[15,46],[15,47],[15,48]]",
        "output": "7"
      }
    ]
  },
  {
    "id": 2466,
    "difficulty": "Medium",
    "tags": [
      "Dynamic Programming"
    ],
    "problemDescription": "Given the integers zero, one, low, and high, we can construct a string by starting with an empty string, and then at each step perform either of the following:\n\nAppend the character '0' zero times.\nAppend the character '1' one times.\n\nThis can be performed any number of times.\nA good string is a string constructed by the above process having a length between low and high (inclusive).\nReturn the number of different good strings that can be constructed satisfying these properties. Since the answer can be large, return it modulo 109 + 7.\n\u00a0\nExample 1:\n\nInput: low = 3, high = 3, zero = 1, one = 1\nOutput: 8\nExplanation: \nOne possible valid good string is \"011\". \nIt can be constructed as follows: \"\" -> \"0\" -> \"01\" -> \"011\". \nAll binary strings from \"000\" to \"111\" are good strings in this example.\n\nExample 2:\n\nInput: low = 2, high = 3, zero = 1, one = 2\nOutput: 5\nExplanation: The good strings are \"00\", \"11\", \"000\", \"110\", and \"011\".\n\n\u00a0\nConstraints:\n\n1 <= low\u00a0<= high\u00a0<= 105\n1 <= zero, one <= low\n\n",
    "starterCode": "class Solution:\n    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:\n        ",
    "testCases": [
      {
        "input": "low = 5, high = 7, zero = 1, one = 1",
        "output": "224"
      },
      {
        "input": "low = 100, high = 200, zero = 10, one = 20",
        "output": "28513"
      },
      {
        "input": "low = 1, high = 5, zero = 2, one = 3",
        "output": "5"
      },
      {
        "input": "low = 5, high = 10, zero = 2, one = 4",
        "output": "16"
      },
      {
        "input": "low = 10, high = 15, zero = 3, one = 2",
        "output": "93"
      },
      {
        "input": "low = 5, high = 5, zero = 2, one = 3",
        "output": "2"
      },
      {
        "input": "low = 5, high = 10, zero = 3, one = 4",
        "output": "8"
      },
      {
        "input": "low = 1, high = 5, zero = 1, one = 1",
        "output": "62"
      },
      {
        "input": "low = 5, high = 5, zero = 2, one = 2",
        "output": "0"
      },
      {
        "input": "low = 4, high = 6, zero = 2, one = 2",
        "output": "12"
      },
      {
        "input": "low = 4, high = 4, zero = 2, one = 2",
        "output": "4"
      },
      {
        "input": "low = 2, high = 3, zero = 1, one = 2",
        "output": "5"
      },
      {
        "input": "low = 3, high = 7, zero = 3, one = 3",
        "output": "6"
      },
      {
        "input": "low = 50000, high = 50000, zero = 5000, one = 5000",
        "output": "1024"
      },
      {
        "input": "low = 7, high = 9, zero = 3, one = 2",
        "output": "12"
      },
      {
        "input": "low = 50, high = 100, zero = 5, one = 7",
        "output": "177635"
      },
      {
        "input": "low = 4, high = 6, zero = 2, one = 3",
        "output": "5"
      },
      {
        "input": "low = 6, high = 10, zero = 2, one = 3",
        "output": "21"
      },
      {
        "input": "low = 20, high = 25, zero = 5, one = 6",
        "output": "17"
      },
      {
        "input": "low = 10, high = 15, zero = 2, one = 2",
        "output": "224"
      },
      {
        "input": "low = 10, high = 100, zero = 5, one = 7",
        "output": "178096"
      },
      {
        "input": "low = 4, high = 8, zero = 2, one = 2",
        "output": "28"
      },
      {
        "input": "low = 6, high = 10, zero = 3, one = 4",
        "output": "8"
      },
      {
        "input": "low = 5, high = 10, zero = 2, one = 3",
        "output": "23"
      },
      {
        "input": "low = 20, high = 30, zero = 3, one = 5",
        "output": "283"
      },
      {
        "input": "low = 1, high = 5, zero = 1, one = 5",
        "output": "6"
      },
      {
        "input": "low = 3, high = 9, zero = 2, one = 2",
        "output": "28"
      },
      {
        "input": "low = 1, high = 10, zero = 1, one = 1",
        "output": "2046"
      },
      {
        "input": "low = 1, high = 5, zero = 2, one = 2",
        "output": "6"
      },
      {
        "input": "low = 10, high = 15, zero = 3, one = 4",
        "output": "23"
      },
      {
        "input": "low = 10, high = 15, zero = 5, one = 6",
        "output": "5"
      },
      {
        "input": "low = 10, high = 15, zero = 4, one = 5",
        "output": "9"
      },
      {
        "input": "low = 5, high = 7, zero = 2, one = 3",
        "output": "7"
      },
      {
        "input": "low = 10, high = 15, zero = 2, one = 3",
        "output": "93"
      },
      {
        "input": "low = 10, high = 10, zero = 3, one = 4",
        "output": "3"
      },
      {
        "input": "low = 10, high = 15, zero = 1, one = 1",
        "output": "64512"
      },
      {
        "input": "low = 2, high = 5, zero = 1, one = 3",
        "output": "10"
      },
      {
        "input": "low = 10, high = 10, zero = 5, one = 5",
        "output": "4"
      },
      {
        "input": "low = 50, high = 100, zero = 10, one = 15",
        "output": "444"
      },
      {
        "input": "low = 3, high = 3, zero = 1, one = 1",
        "output": "8"
      },
      {
        "input": "low = 10, high = 15, zero = 5, one = 5",
        "output": "12"
      },
      {
        "input": "low = 6, high = 8, zero = 4, one = 5",
        "output": "1"
      },
      {
        "input": "low = 1, high = 4, zero = 1, one = 1",
        "output": "30"
      },
      {
        "input": "low = 1, high = 100, zero = 1, one = 1",
        "output": "952742561"
      },
      {
        "input": "low = 1, high = 100, zero = 25, one = 25",
        "output": "30"
      }
    ]
  },
  {
    "id": 89,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Math",
      "Backtracking"
    ],
    "problemDescription": "An n-bit gray code sequence is a sequence of 2n integers where:\n\nEvery integer is in the inclusive range [0, 2n - 1],\nThe first integer is 0,\nAn integer appears no more than once in the sequence,\nThe binary representation of every pair of adjacent integers differs by exactly one bit, and\nThe binary representation of the first and last integers differs by exactly one bit.\n\nGiven an integer n, return any valid n-bit gray code sequence.\n\u00a0\nExample 1:\n\nInput: n = 2\nOutput: [0,1,3,2]\nExplanation:\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit\n\nExample 2:\n\nInput: n = 1\nOutput: [0,1]\n\n\u00a0\nConstraints:\n\n1 <= n <= 16\n\n",
    "starterCode": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "n = 3",
        "output": "[0, 1, 3, 2, 6, 7, 5, 4]"
      },
      {
        "input": "n = 15",
        "output": "Execution timed out"
      },
      {
        "input": "n = 4",
        "output": "[0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8]"
      },
      {
        "input": "n = 16",
        "output": "Execution timed out"
      },
      {
        "input": "n = 2",
        "output": "[0, 1, 3, 2]"
      },
      {
        "input": "n = 1",
        "output": "[0, 1]"
      },
      {
        "input": "n = 10",
        "output": "[0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16, 48, 49, 51, 50, 54, 55, 53, 52, 60, 61, 63, 62, 58, 59, 57, 56, 40, 41, 43, 42, 46, 47, 45, 44, 36, 37, 39, 38, 34, 35, 33, 32, 96, 97, 99, 98, 102, 103, 101, 100, 108, 109, 111, 110, 106, 107, 105, 104, 120, 121, 123, 122, 126, 127, 125, 124, 116, 117, 119, 118, 114, 115, 113, 112, 80, 81, 83, 82, 86, 87, 85, 84, 92, 93, 95, 94, 90, 91, 89, 88, 72, 73, 75, 74, 78, 79, 77, 76, 68, 69, 71, 70, 66, 67, 65, 64, 192, 193, 195, 194, 198, 199, 197, 196, 204, 205, 207, 206, 202, 203, 201, 200, 216, 217, 219, 218, 222, 223, 221, 220, 212, 213, 215, 214, 210, 211, 209, 208, 240, 241, 243, 242, 246, 247, 245, 244, 252, 253, 255, 254, 250, 251, 249, 248, 232, 233, 235, 234, 238, 239, 237, 236, 228, 229, 231, 230, 226, 227, 225, 224, 160, 161, 163, 162, 166, 167, 165, 164, 172, 173, 175, 174, 170, 171, 169, 168, 184, 185, 187, 186, 190, 191, 189, 188, 180, 181, 183, 182, 178, 179, 177, 176, 144, 145, 147, 146, 150, 151, 149, 148, 156, 157, 159, 158, 154, 155, 153, 152, 136, 137, 139, 138, 142, 143, 141, 140, 132, 133, 135, 134, 130, 131, 129, 128, 384, 385, 387, 386, 390, 391, 389, 388, 396, 397, 399, 398, 394, 395, 393, 392, 408, 409, 411, 410, 414, 415, 413, 412, 404, 405, 407, 406, 402, 403, 401, 400, 432, 433, 435, 434, 438, 439, 437, 436, 444, 445, 447, 446, 442, 443, 441, 440, 424, 425, 427, 426, 430, 431, 429, 428, 420, 421, 423, 422, 418, 419, 417, 416, 480, 481, 483, 482, 486, 487, 485, 484, 492, 493, 495, 494, 490, 491, 489, 488, 504, 505, 507, 506, 510, 511, 509, 508, 500, 501, 503, 502, 498, 499, 497, 496, 464, 465, 467, 466, 470, 471, 469, 468, 476, 477, 479, 478, 474, 475, 473, 472, 456, 457, 459, 458, 462, 463, 461, 460, 452, 453, 455, 454, 450, 451, 449, 448, 320, 321, 323, 322, 326, 327, 325, 324, 332, 333, 335, 334, 330, 331, 329, 328, 344, 345, 347, 346, 350, 351, 349, 348, 340, 341, 343, 342, 338, 339, 337, 336, 368, 369, 371, 370, 374, 375, 373, 372, 380, 381, 383, 382, 378, 379, 377, 376, 360, 361, 363, 362, 366, 367, 365, 364, 356, 357, 359, 358, 354, 355, 353, 352, 288, 289, 291, 290, 294, 295, 293, 292, 300, 301, 303, 302, 298, 299, 297, 296, 312, 313, 315, 314, 318, 319, 317, 316, 308, 309, 311, 310, 306, 307, 305, 304, 272, 273, 275, 274, 278, 279, 277, 276, 284, 285, 287, 286, 282, 283, 281, 280, 264, 265, 267, 266, 270, 271, 269, 268, 260, 261, 263, 262, 258, 259, 257, 256, 768, 769, 771, 770, 774, 775, 773, 772, 780, 781, 783, 782, 778, 779, 777, 776, 792, 793, 795, 794, 798, 799, 797, 796, 788, 789, 791, 790, 786, 787, 785, 784, 816, 817, 819, 818, 822, 823, 821, 820, 828, 829, 831, 830, 826, 827, 825, 824, 808, 809, 811, 810, 814, 815, 813, 812, 804, 805, 807, 806, 802, 803, 801, 800, 864, 865, 867, 866, 870, 871, 869, 868, 876, 877, 879, 878, 874, 875, 873, 872, 888, 889, 891, 890, 894, 895, 893, 892, 884, 885, 887, 886, 882, 883, 881, 880, 848, 849, 851, 850, 854, 855, 853, 852, 860, 861, 863, 862, 858, 859, 857, 856, 840, 841, 843, 842, 846, 847, 845, 844, 836, 837, 839, 838, 834, 835, 833, 832, 960, 961, 963, 962, 966, 967, 965, 964, 972, 973, 975, 974, 970, 971, 969, 968, 984, 985, 987, 986, 990, 991, 989, 988, 980, 981, 983, 982, 978, 979, 977, 976, 1008, 1009, 1011, 1010, 1014, 1015, 1013, 1012, 1020, 1021, 1023, 1022, 1018, 1019, 1017, 1016, 1000, 1001, 1003, 1002, 1006, 1007, 1005, 1004, 996, 997, 999, 998, 994, 995, 993, 992, 928, 929, 931, 930, 934, 935, 933, 932, 940, 941, 943, 942, 938, 939, 937, 936, 952, 953, 955, 954, 958, 959, 957, 956, 948, 949, 951, 950, 946, 947, 945, 944, 912, 913, 915, 914, 918, 919, 917, 916, 924, 925, 927, 926, 922, 923, 921, 920, 904, 905, 907, 906, 910, 911, 909, 908, 900, 901, 903, 902, 898, 899, 897, 896, 640, 641, 643, 642, 646, 647, 645, 644, 652, 653, 655, 654, 650, 651, 649, 648, 664, 665, 667, 666, 670, 671, 669, 668, 660, 661, 663, 662, 658, 659, 657, 656, 688, 689, 691, 690, 694, 695, 693, 692, 700, 701, 703, 702, 698, 699, 697, 696, 680, 681, 683, 682, 686, 687, 685, 684, 676, 677, 679, 678, 674, 675, 673, 672, 736, 737, 739, 738, 742, 743, 741, 740, 748, 749, 751, 750, 746, 747, 745, 744, 760, 761, 763, 762, 766, 767, 765, 764, 756, 757, 759, 758, 754, 755, 753, 752, 720, 721, 723, 722, 726, 727, 725, 724, 732, 733, 735, 734, 730, 731, 729, 728, 712, 713, 715, 714, 718, 719, 717, 716, 708, 709, 711, 710, 706, 707, 705, 704, 576, 577, 579, 578, 582, 583, 581, 580, 588, 589, 591, 590, 586, 587, 585, 584, 600, 601, 603, 602, 606, 607, 605, 604, 596, 597, 599, 598, 594, 595, 593, 592, 624, 625, 627, 626, 630, 631, 629, 628, 636, 637, 639, 638, 634, 635, 633, 632, 616, 617, 619, 618, 622, 623, 621, 620, 612, 613, 615, 614, 610, 611, 609, 608, 544, 545, 547, 546, 550, 551, 549, 548, 556, 557, 559, 558, 554, 555, 553, 552, 568, 569, 571, 570, 574, 575, 573, 572, 564, 565, 567, 566, 562, 563, 561, 560, 528, 529, 531, 530, 534, 535, 533, 532, 540, 541, 543, 542, 538, 539, 537, 536, 520, 521, 523, 522, 526, 527, 525, 524, 516, 517, 519, 518, 514, 515, 513, 512]"
      },
      {
        "input": "n = 5",
        "output": "[0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16]"
      },
      {
        "input": "n = 8",
        "output": "[0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16, 48, 49, 51, 50, 54, 55, 53, 52, 60, 61, 63, 62, 58, 59, 57, 56, 40, 41, 43, 42, 46, 47, 45, 44, 36, 37, 39, 38, 34, 35, 33, 32, 96, 97, 99, 98, 102, 103, 101, 100, 108, 109, 111, 110, 106, 107, 105, 104, 120, 121, 123, 122, 126, 127, 125, 124, 116, 117, 119, 118, 114, 115, 113, 112, 80, 81, 83, 82, 86, 87, 85, 84, 92, 93, 95, 94, 90, 91, 89, 88, 72, 73, 75, 74, 78, 79, 77, 76, 68, 69, 71, 70, 66, 67, 65, 64, 192, 193, 195, 194, 198, 199, 197, 196, 204, 205, 207, 206, 202, 203, 201, 200, 216, 217, 219, 218, 222, 223, 221, 220, 212, 213, 215, 214, 210, 211, 209, 208, 240, 241, 243, 242, 246, 247, 245, 244, 252, 253, 255, 254, 250, 251, 249, 248, 232, 233, 235, 234, 238, 239, 237, 236, 228, 229, 231, 230, 226, 227, 225, 224, 160, 161, 163, 162, 166, 167, 165, 164, 172, 173, 175, 174, 170, 171, 169, 168, 184, 185, 187, 186, 190, 191, 189, 188, 180, 181, 183, 182, 178, 179, 177, 176, 144, 145, 147, 146, 150, 151, 149, 148, 156, 157, 159, 158, 154, 155, 153, 152, 136, 137, 139, 138, 142, 143, 141, 140, 132, 133, 135, 134, 130, 131, 129, 128]"
      },
      {
        "input": "n = 11",
        "output": "[0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16, 48, 49, 51, 50, 54, 55, 53, 52, 60, 61, 63, 62, 58, 59, 57, 56, 40, 41, 43, 42, 46, 47, 45, 44, 36, 37, 39, 38, 34, 35, 33, 32, 96, 97, 99, 98, 102, 103, 101, 100, 108, 109, 111, 110, 106, 107, 105, 104, 120, 121, 123, 122, 126, 127, 125, 124, 116, 117, 119, 118, 114, 115, 113, 112, 80, 81, 83, 82, 86, 87, 85, 84, 92, 93, 95, 94, 90, 91, 89, 88, 72, 73, 75, 74, 78, 79, 77, 76, 68, 69, 71, 70, 66, 67, 65, 64, 192, 193, 195, 194, 198, 199, 197, 196, 204, 205, 207, 206, 202, 203, 201, 200, 216, 217, 219, 218, 222, 223, 221, 220, 212, 213, 215, 214, 210, 211, 209, 208, 240, 241, 243, 242, 246, 247, 245, 244, 252, 253, 255, 254, 250, 251, 249, 248, 232, 233, 235, 234, 238, 239, 237, 236, 228, 229, 231, 230, 226, 227, 225, 224, 160, 161, 163, 162, 166, 167, 165, 164, 172, 173, 175, 174, 170, 171, 169, 168, 184, 185, 187, 186, 190, 191, 189, 188, 180, 181, 183, 182, 178, 179, 177, 176, 144, 145, 147, 146, 150, 151, 149, 148, 156, 157, 159, 158, 154, 155, 153, 152, 136, 137, 139, 138, 142, 143, 141, 140, 132, 133, 135, 134, 130, 131, 129, 128, 384, 385, 387, 386, 390, 391, 389, 388, 396, 397, 399, 398, 394, 395, 393, 392, 408, 409, 411, 410, 414, 415, 413, 412, 404, 405, 407, 406, 402, 403, 401, 400, 432, 433, 435, 434, 438, 439, 437, 436, 444, 445, 447, 446, 442, 443, 441, 440, 424, 425, 427, 426, 430, 431, 429, 428, 420, 421, 423, 422, 418, 419, 417, 416, 480, 481, 483, 482, 486, 487, 485, 484, 492, 493, 495, 494, 490, 491, 489, 488, 504, 505, 507, 506, 510, 511, 509, 508, 500, 501, 503, 502, 498, 499, 497, 496, 464, 465, 467, 466, 470, 471, 469, 468, 476, 477, 479, 478, 474, 475, 473, 472, 456, 457, 459, 458, 462, 463, 461, 460, 452, 453, 455, 454, 450, 451, 449, 448, 320, 321, 323, 322, 326, 327, 325, 324, 332, 333, 335, 334, 330, 331, 329, 328, 344, 345, 347, 346, 350, 351, 349, 348, 340, 341, 343, 342, 338, 339, 337, 336, 368, 369, 371, 370, 374, 375, 373, 372, 380, 381, 383, 382, 378, 379, 377, 376, 360, 361, 363, 362, 366, 367, 365, 364, 356, 357, 359, 358, 354, 355, 353, 352, 288, 289, 291, 290, 294, 295, 293, 292, 300, 301, 303, 302, 298, 299, 297, 296, 312, 313, 315, 314, 318, 319, 317, 316, 308, 309, 311, 310, 306, 307, 305, 304, 272, 273, 275, 274, 278, 279, 277, 276, 284, 285, 287, 286, 282, 283, 281, 280, 264, 265, 267, 266, 270, 271, 269, 268, 260, 261, 263, 262, 258, 259, 257, 256, 768, 769, 771, 770, 774, 775, 773, 772, 780, 781, 783, 782, 778, 779, 777, 776, 792, 793, 795, 794, 798, 799, 797, 796, 788, 789, 791, 790, 786, 787, 785, 784, 816, 817, 819, 818, 822, 823, 821, 820, 828, 829, 831, 830, 826, 827, 825, 824, 808, 809, 811, 810, 814, 815, 813, 812, 804, 805, 807, 806, 802, 803, 801, 800, 864, 865, 867, 866, 870, 871, 869, 868, 876, 877, 879, 878, 874, 875, 873, 872, 888, 889, 891, 890, 894, 895, 893, 892, 884, 885, 887, 886, 882, 883, 881, 880, 848, 849, 851, 850, 854, 855, 853, 852, 860, 861, 863, 862, 858, 859, 857, 856, 840, 841, 843, 842, 846, 847, 845, 844, 836, 837, 839, 838, 834, 835, 833, 832, 960, 961, 963, 962, 966, 967, 965, 964, 972, 973, 975, 974, 970, 971, 969, 968, 984, 985, 987, 986, 990, 991, 989, 988, 980, 981, 983, 982, 978, 979, 977, 976, 1008, 1009, 1011, 1010, 1014, 1015, 1013, 1012, 1020, 1021, 1023, 1022, 1018, 1019, 1017, 1016, 1000, 1001, 1003, 1002, 1006, 1007, 1005, 1004, 996, 997, 999, 998, 994, 995, 993, 992, 928, 929, 931, 930, 934, 935, 933, 932, 940, 941, 943, 942, 938, 939, 937, 936, 952, 953, 955, 954, 958, 959, 957, 956, 948, 949, 951, 950, 946, 947, 945, 944, 912, 913, 915, 914, 918, 919, 917, 916, 924, 925, 927, 926, 922, 923, 921, 920, 904, 905, 907, 906, 910, 911, 909, 908, 900, 901, 903, 902, 898, 899, 897, 896, 640, 641, 643, 642, 646, 647, 645, 644, 652, 653, 655, 654, 650, 651, 649, 648, 664, 665, 667, 666, 670, 671, 669, 668, 660, 661, 663, 662, 658, 659, 657, 656, 688, 689, 691, 690, 694, 695, 693, 692, 700, 701, 703, 702, 698, 699, 697, 696, 680, 681, 683, 682, 686, 687, 685, 684, 676, 677, 679, 678, 674, 675, 673, 672, 736, 737, 739, 738, 742, 743, 741, 740, 748, 749, 751, 750, 746, 747, 745, 744, 760, 761, 763, 762, 766, 767, 765, 764, 756, 757, 759, 758, 754, 755, 753, 752, 720, 721, 723, 722, 726, 727, 725, 724, 732, 733, 735, 734, 730, 731, 729, 728, 712, 713, 715, 714, 718, 719, 717, 716, 708, 709, 711, 710, 706, 707, 705, 704, 576, 577, 579, 578, 582, 583, 581, 580, 588, 589, 591, 590, 586, 587, 585, 584, 600, 601, 603, 602, 606, 607, 605, 604, 596, 597, 599, 598, 594, 595, 593, 592, 624, 625, 627, 626, 630, 631, 629, 628, 636, 637, 639, 638, 634, 635, 633, 632, 616, 617, 619, 618, 622, 623, 621, 620, 612, 613, 615, 614, 610, 611, 609, 608, 544, 545, 547, 546, 550, 551, 549, 548, 556, 557, 559, 558, 554, 555, 553, 552, 568, 569, 571, 570, 574, 575, 573, 572, 564, 565, 567, 566, 562, 563, 561, 560, 528, 529, 531, 530, 534, 535, 533, 532, 540, 541, 543, 542, 538, 539, 537, 536, 520, 521, 523, 522, 526, 527, 525, 524, 516, 517, 519, 518, 514, 515, 513, 512, 1536, 1537, 1539, 1538, 1542, 1543, 1541, 1540, 1548, 1549, 1551, 1550, 1546, 1547, 1545, 1544, 1560, 1561, 1563, 1562, 1566, 1567, 1565, 1564, 1556, 1557, 1559, 1558, 1554, 1555, 1553, 1552, 1584, 1585, 1587, 1586, 1590, 1591, 1589, 1588, 1596, 1597, 1599, 1598, 1594, 1595, 1593, 1592, 1576, 1577, 1579, 1578, 1582, 1583, 1581, 1580, 1572, 1573, 1575, 1574, 1570, 1571, 1569, 1568, 1632, 1633, 1635, 1634, 1638, 1639, 1637, 1636, 1644, 1645, 1647, 1646, 1642, 1643, 1641, 1640, 1656, 1657, 1659, 1658, 1662, 1663, 1661, 1660, 1652, 1653, 1655, 1654, 1650, 1651, 1649, 1648, 1616, 1617, 1619, 1618, 1622, 1623, 1621, 1620, 1628, 1629, 1631, 1630, 1626, 1627, 1625, 1624, 1608, 1609, 1611, 1610, 1614, 1615, 1613, 1612, 1604, 1605, 1607, 1606, 1602, 1603, 1601, 1600, 1728, 1729, 1731, 1730, 1734, 1735, 1733, 1732, 1740, 1741, 1743, 1742, 1738, 1739, 1737, 1736, 1752, 1753, 1755, 1754, 1758, 1759, 1757, 1756, 1748, 1749, 1751, 1750, 1746, 1747, 1745, 1744, 1776, 1777, 1779, 1778, 1782, 1783, 1781, 1780, 1788, 1789, 1791, 1790, 1786, 1787, 1785, 1784, 1768, 1769, 1771, 1770, 1774, 1775, 1773, 1772, 1764, 1765, 1767, 1766, 1762, 1763, 1761, 1760, 1696, 1697, 1699, 1698, 1702, 1703, 1701, 1700, 1708, 1709, 1711, 1710, 1706, 1707, 1705, 1704, 1720, 1721, 1723, 1722, 1726, 1727, 1725, 1724, 1716, 1717, 1719, 1718, 1714, 1715, 1713, 1712, 1680, 1681, 1683, 1682, 1686, 1687, 1685, 1684, 1692, 1693, 1695, 1694, 1690, 1691, 1689, 1688, 1672, 1673, 1675, 1674, 1678, 1679, 1677, 1676, 1668, 1669, 1671, 1670, 1666, 1667, 1665, 1664, 1920, 1921, 1923, 1922, 1926, 1927, 1925, 1924, 1932, 1933, 1935, 1934, 1930, 1931, 1929, 1928, 1944, 1945, 1947, 1946, 1950, 1951, 1949, 1948, 1940, 1941, 1943, 1942, 1938, 1939, 1937, 1936, 1968, 1969, 1971, 1970, 1974, 1975, 1973, 1972, 1980, 1981, 1983, 1982, 1978, 1979, 1977, 1976, 1960, 1961, 1963, 1962, 1966, 1967, 1965, 1964, 1956, 1957, 1959, 1958, 1954, 1955, 1953, 1952, 2016, 2017, 2019, 2018, 2022, 2023, 2021, 2020, 2028, 2029, 2031, 2030, 2026, 2027, 2025, 2024, 2040, 2041, 2043, 2042, 2046, 2047, 2045, 2044, 2036, 2037, 2039, 2038, 2034, 2035, 2033, 2032, 2000, 2001, 2003, 2002, 2006, 2007, 2005, 2004, 2012, 2013, 2015, 2014, 2010, 2011, 2009, 2008, 1992, 1993, 1995, 1994, 1998, 1999, 1997, 1996, 1988, 1989, 1991, 1990, 1986, 1987, 1985, 1984, 1856, 1857, 1859, 1858, 1862, 1863, 1861, 1860, 1868, 1869, 1871, 1870, 1866, 1867, 1865, 1864, 1880, 1881, 1883, 1882, 1886, 1887, 1885, 1884, 1876, 1877, 1879, 1878, 1874, 1875, 1873, 1872, 1904, 1905, 1907, 1906, 1910, 1911, 1909, 1908, 1916, 1917, 1919, 1918, 1914, 1915, 1913, 1912, 1896, 1897, 1899, 1898, 1902, 1903, 1901, 1900, 1892, 1893, 1895, 1894, 1890, 1891, 1889, 1888, 1824, 1825, 1827, 1826, 1830, 1831, 1829, 1828, 1836, 1837, 1839, 1838, 1834, 1835, 1833, 1832, 1848, 1849, 1851, 1850, 1854, 1855, 1853, 1852, 1844, 1845, 1847, 1846, 1842, 1843, 1841, 1840, 1808, 1809, 1811, 1810, 1814, 1815, 1813, 1812, 1820, 1821, 1823, 1822, 1818, 1819, 1817, 1816, 1800, 1801, 1803, 1802, 1806, 1807, 1805, 1804, 1796, 1797, 1799, 1798, 1794, 1795, 1793, 1792, 1280, 1281, 1283, 1282, 1286, 1287, 1285, 1284, 1292, 1293, 1295, 1294, 1290, 1291, 1289, 1288, 1304, 1305, 1307, 1306, 1310, 1311, 1309, 1308, 1300, 1301, 1303, 1302, 1298, 1299, 1297, 1296, 1328, 1329, 1331, 1330, 1334, 1335, 1333, 1332, 1340, 1341, 1343, 1342, 1338, 1339, 1337, 1336, 1320, 1321, 1323, 1322, 1326, 1327, 1325, 1324, 1316, 1317, 1319, 1318, 1314, 1315, 1313, 1312, 1376, 1377, 1379, 1378, 1382, 1383, 1381, 1380, 1388, 1389, 1391, 1390, 1386, 1387, 1385, 1384, 1400, 1401, 1403, 1402, 1406, 1407, 1405, 1404, 1396, 1397, 1399, 1398, 1394, 1395, 1393, 1392, 1360, 1361, 1363, 1362, 1366, 1367, 1365, 1364, 1372, 1373, 1375, 1374, 1370, 1371, 1369, 1368, 1352, 1353, 1355, 1354, 1358, 1359, 1357, 1356, 1348, 1349, 1351, 1350, 1346, 1347, 1345, 1344, 1472, 1473, 1475, 1474, 1478, 1479, 1477, 1476, 1484, 1485, 1487, 1486, 1482, 1483, 1481, 1480, 1496, 1497, 1499, 1498, 1502, 1503, 1501, 1500, 1492, 1493, 1495, 1494, 1490, 1491, 1489, 1488, 1520, 1521, 1523, 1522, 1526, 1527, 1525, 1524, 1532, 1533, 1535, 1534, 1530, 1531, 1529, 1528, 1512, 1513, 1515, 1514, 1518, 1519, 1517, 1516, 1508, 1509, 1511, 1510, 1506, 1507, 1505, 1504, 1440, 1441, 1443, 1442, 1446, 1447, 1445, 1444, 1452, 1453, 1455, 1454, 1450, 1451, 1449, 1448, 1464, 1465, 1467, 1466, 1470, 1471, 1469, 1468, 1460, 1461, 1463, 1462, 1458, 1459, 1457, 1456, 1424, 1425, 1427, 1426, 1430, 1431, 1429, 1428, 1436, 1437, 1439, 1438, 1434, 1435, 1433, 1432, 1416, 1417, 1419, 1418, 1422, 1423, 1421, 1420, 1412, 1413, 1415, 1414, 1410, 1411, 1409, 1408, 1152, 1153, 1155, 1154, 1158, 1159, 1157, 1156, 1164, 1165, 1167, 1166, 1162, 1163, 1161, 1160, 1176, 1177, 1179, 1178, 1182, 1183, 1181, 1180, 1172, 1173, 1175, 1174, 1170, 1171, 1169, 1168, 1200, 1201, 1203, 1202, 1206, 1207, 1205, 1204, 1212, 1213, 1215, 1214, 1210, 1211, 1209, 1208, 1192, 1193, 1195, 1194, 1198, 1199, 1197, 1196, 1188, 1189, 1191, 1190, 1186, 1187, 1185, 1184, 1248, 1249, 1251, 1250, 1254, 1255, 1253, 1252, 1260, 1261, 1263, 1262, 1258, 1259, 1257, 1256, 1272, 1273, 1275, 1274, 1278, 1279, 1277, 1276, 1268, 1269, 1271, 1270, 1266, 1267, 1265, 1264, 1232, 1233, 1235, 1234, 1238, 1239, 1237, 1236, 1244, 1245, 1247, 1246, 1242, 1243, 1241, 1240, 1224, 1225, 1227, 1226, 1230, 1231, 1229, 1228, 1220, 1221, 1223, 1222, 1218, 1219, 1217, 1216, 1088, 1089, 1091, 1090, 1094, 1095, 1093, 1092, 1100, 1101, 1103, 1102, 1098, 1099, 1097, 1096, 1112, 1113, 1115, 1114, 1118, 1119, 1117, 1116, 1108, 1109, 1111, 1110, 1106, 1107, 1105, 1104, 1136, 1137, 1139, 1138, 1142, 1143, 1141, 1140, 1148, 1149, 1151, 1150, 1146, 1147, 1145, 1144, 1128, 1129, 1131, 1130, 1134, 1135, 1133, 1132, 1124, 1125, 1127, 1126, 1122, 1123, 1121, 1120, 1056, 1057, 1059, 1058, 1062, 1063, 1061, 1060, 1068, 1069, 1071, 1070, 1066, 1067, 1065, 1064, 1080, 1081, 1083, 1082, 1086, 1087, 1085, 1084, 1076, 1077, 1079, 1078, 1074, 1075, 1073, 1072, 1040, 1041, 1043, 1042, 1046, 1047, 1045, 1044, 1052, 1053, 1055, 1054, 1050, 1051, 1049, 1048, 1032, 1033, 1035, 1034, 1038, 1039, 1037, 1036, 1028, 1029, 1031, 1030, 1026, 1027, 1025, 1024]"
      },
      {
        "input": "n = 12",
        "output
      },
      {
        "input": "n = 14",
        "output": "Execution timed out"
      },
      {
        "input": "n = 9",
        "output": "[0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16, 48, 49, 51, 50, 54, 55, 53, 52, 60, 61, 63, 62, 58, 59, 57, 56, 40, 41, 43, 42, 46, 47, 45, 44, 36, 37, 39, 38, 34, 35, 33, 32, 96, 97, 99, 98, 102, 103, 101, 100, 108, 109, 111, 110, 106, 107, 105, 104, 120, 121, 123, 122, 126, 127, 125, 124, 116, 117, 119, 118, 114, 115, 113, 112, 80, 81, 83, 82, 86, 87, 85, 84, 92, 93, 95, 94, 90, 91, 89, 88, 72, 73, 75, 74, 78, 79, 77, 76, 68, 69, 71, 70, 66, 67, 65, 64, 192, 193, 195, 194, 198, 199, 197, 196, 204, 205, 207, 206, 202, 203, 201, 200, 216, 217, 219, 218, 222, 223, 221, 220, 212, 213, 215, 214, 210, 211, 209, 208, 240, 241, 243, 242, 246, 247, 245, 244, 252, 253, 255, 254, 250, 251, 249, 248, 232, 233, 235, 234, 238, 239, 237, 236, 228, 229, 231, 230, 226, 227, 225, 224, 160, 161, 163, 162, 166, 167, 165, 164, 172, 173, 175, 174, 170, 171, 169, 168, 184, 185, 187, 186, 190, 191, 189, 188, 180, 181, 183, 182, 178, 179, 177, 176, 144, 145, 147, 146, 150, 151, 149, 148, 156, 157, 159, 158, 154, 155, 153, 152, 136, 137, 139, 138, 142, 143, 141, 140, 132, 133, 135, 134, 130, 131, 129, 128, 384, 385, 387, 386, 390, 391, 389, 388, 396, 397, 399, 398, 394, 395, 393, 392, 408, 409, 411, 410, 414, 415, 413, 412, 404, 405, 407, 406, 402, 403, 401, 400, 432, 433, 435, 434, 438, 439, 437, 436, 444, 445, 447, 446, 442, 443, 441, 440, 424, 425, 427, 426, 430, 431, 429, 428, 420, 421, 423, 422, 418, 419, 417, 416, 480, 481, 483, 482, 486, 487, 485, 484, 492, 493, 495, 494, 490, 491, 489, 488, 504, 505, 507, 506, 510, 511, 509, 508, 500, 501, 503, 502, 498, 499, 497, 496, 464, 465, 467, 466, 470, 471, 469, 468, 476, 477, 479, 478, 474, 475, 473, 472, 456, 457, 459, 458, 462, 463, 461, 460, 452, 453, 455, 454, 450, 451, 449, 448, 320, 321, 323, 322, 326, 327, 325, 324, 332, 333, 335, 334, 330, 331, 329, 328, 344, 345, 347, 346, 350, 351, 349, 348, 340, 341, 343, 342, 338, 339, 337, 336, 368, 369, 371, 370, 374, 375, 373, 372, 380, 381, 383, 382, 378, 379, 377, 376, 360, 361, 363, 362, 366, 367, 365, 364, 356, 357, 359, 358, 354, 355, 353, 352, 288, 289, 291, 290, 294, 295, 293, 292, 300, 301, 303, 302, 298, 299, 297, 296, 312, 313, 315, 314, 318, 319, 317, 316, 308, 309, 311, 310, 306, 307, 305, 304, 272, 273, 275, 274, 278, 279, 277, 276, 284, 285, 287, 286, 282, 283, 281, 280, 264, 265, 267, 266, 270, 271, 269, 268, 260, 261, 263, 262, 258, 259, 257, 256]"
      },
      {
        "input": "n = 13",
        "output": "Execution timed out"
      },
      {
        "input": "n = 6",
        "output": "[0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16, 48, 49, 51, 50, 54, 55, 53, 52, 60, 61, 63, 62, 58, 59, 57, 56, 40, 41, 43, 42, 46, 47, 45, 44, 36, 37, 39, 38, 34, 35, 33, 32]"
      },
      {
        "input": "n = 7",
        "output": "[0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16, 48, 49, 51, 50, 54, 55, 53, 52, 60, 61, 63, 62, 58, 59, 57, 56, 40, 41, 43, 42, 46, 47, 45, 44, 36, 37, 39, 38, 34, 35, 33, 32, 96, 97, 99, 98, 102, 103, 101, 100, 108, 109, 111, 110, 106, 107, 105, 104, 120, 121, 123, 122, 126, 127, 125, 124, 116, 117, 119, 118, 114, 115, 113, 112, 80, 81, 83, 82, 86, 87, 85, 84, 92, 93, 95, 94, 90, 91, 89, 88, 72, 73, 75, 74, 78, 79, 77, 76, 68, 69, 71, 70, 66, 67, 65, 64]"
      }
    ]
  },
  {
    "id": 81,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "problemDescription": "There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\nYou must decrease the overall operation steps as much as possible.\n\u00a0\nExample 1:\nInput: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true\nExample 2:\nInput: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 5000\n-104 <= nums[i] <= 104\nnums is guaranteed to be rotated at some pivot.\n-104 <= target <= 104\n\n\u00a0\nFollow up: This problem is similar to\u00a0Search in Rotated Sorted Array, but\u00a0nums may contain duplicates. Would this affect the runtime complexity? How and why?\n",
    "starterCode": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 6",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1], target = 2",
        "output": "True"
      },
      {
        "input": "nums = [4,5,6,6,7,0,1,2,4,4], target = 4",
        "output": "True"
      },
      {
        "input": "nums = [3,1], target = 2",
        "output": "False"
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 3",
        "output": "False"
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1], target = 3",
        "output": "False"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,1], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [3,1], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [1], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [5,1,3], target = 3",
        "output": "True"
      },
      {
        "input": "nums = [2,5,6,0,0,1,2], target = 3",
        "output": "False"
      },
      {
        "input": "nums = [4,5,6,6,7,0,1,2,4,4], target = 7",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = 5",
        "output": "True"
      },
      {
        "input": "nums = [2,5,6,0,0,1,2], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [5,1,3], target = 5",
        "output": "True"
      },
      {
        "input": "nums = [1,3,5], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,0,1,1,1], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [1], target = 0",
        "output": "False"
      },
      {
        "input": "nums = [1], target = 2",
        "output": "False"
      },
      {
        "input": "nums = [1,3,5], target = 5",
        "output": "True"
      },
      {
        "input": "nums = [3,1], target = 3",
        "output": "True"
      },
      {
        "input": "nums = [2,2,2,2,2,3,4,2], target = 3",
        "output": "True"
      },
      {
        "input": "nums = [11,13,15,17,19,2,4,6,8,10], target = 7",
        "output": "False"
      },
      {
        "input": "nums = [7,8,9,1,2,3,4,5,6], target = 9",
        "output": "True"
      },
      {
        "input": "nums = [6,7,1,2,3,4,5], target = 3",
        "output": "True"
      },
      {
        "input": "nums = [5,5,5,1,2,3,4,5], target = 6",
        "output": "False"
      },
      {
        "input": "nums = [4,5,6,7,0,1,2,3], target = 6",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0], target = 18",
        "output": "True"
      },
      {
        "input": "nums = [4,5,6,7,0,1,2,3], target = 10",
        "output": "False"
      },
      {
        "input": "nums = [6,7,8,9,10,11,12,1,2,3,4,5], target = 10",
        "output": "True"
      },
      {
        "input": "nums = [11,13,15,17,19,21,3,5,7,9], target = 3",
        "output": "True"
      },
      {
        "input": "nums = [5,6,7,8,9,0,1,2,3,4], target = 9",
        "output": "True"
      },
      {
        "input": "nums = [1,2,2,3,4,5,6,7,8,9,0], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [15,16,17,18,19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14], target = 3",
        "output": "True"
      },
      {
        "input": "nums = [10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9], target = 15",
        "output": "True"
      },
      {
        "input": "nums = [5,5,5,1,2,3,4,5], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,0], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0], target = 19",
        "output": "True"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2], target = 2",
        "output": "True"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [2,2,2,0,2,2], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,1,2,3,4], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [2,2,2,0,1,2], target = 3",
        "output": "False"
      },
      {
        "input": "nums = [2,2,2,0,1,2], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], target = 15",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], target = 2",
        "output": "False"
      },
      {
        "input": "nums = [5,1,3,4,5,5,5,5,5], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [5,6,7,8,9,0,1,2,3,4], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0], target = 20",
        "output": "False"
      },
      {
        "input": "nums = [3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [4,5,6,7,0,1,2,3], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,0,1], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [11,13,15,17,19,2,4,6,8,10], target = 5",
        "output": "False"
      },
      {
        "input": "nums = [9,9,9,9,9,1,1,1,1,1], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 3",
        "output": "True"
      },
      {
        "input": "nums = [4,5,6,7,8,1,2,3], target = 8",
        "output": "True"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,3,1,2,2,2,2,2,2,2], target = 3",
        "output": "True"
      },
      {
        "input": "nums = [8,8,8,8,8,8,8,8,8,8,0,8,8,8,8,8,8,8,8,8], target = 1",
        "output": "False"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1], target = 9",
        "output": "True"
      },
      {
        "input": "nums = [4,4,4,5,6,7,8,9,10,0,1,2,3,4,4,4,4,4], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [5,5,5,5,1,5,5,5,5,5,5,5], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], target = 1",
        "output": "False"
      },
      {
        "input": "nums = [4,5,6,7,0,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [20,21,22,23,24,25,26,27,28,29,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], target = 25",
        "output": "True"
      },
      {
        "input": "nums = [5,6,7,8,9,10,1,2,3,4], target = 10",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7], target = 5",
        "output": "True"
      },
      {
        "input": "nums = [8,8,8,8,8,8,8,8,8,8,0,8,8,8,8,8,8,8,8,8], target = 0",
        "output": "True"
      },
      {
        "input": "nums = [3,4,5,6,1,2], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], target = 7",
        "output": "True"
      },
      {
        "input": "nums = [10,10,10,10,10,1,2,3,4,5], target = 1",
        "output": "True"
      },
      {
        "input": "nums = [10,15,20,25,30,5,10], target = 25",
        "output": "True"
      },
      {
        "input": "nums = [11,13,15,17,19,2,4,6,8,10], target = 17",
        "output": "True"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], target = 29",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1], target = 2",
        "output": "True"
      }
    ]
  },
  {
    "id": 1111,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "String"
    ],
    "problemDescription": "A string is a valid parentheses string\u00a0(denoted VPS) if and only if it consists of \"(\" and \")\" characters only, and:\\r\n\\r\n\\r\n\tIt is the empty string, or\\r\n\tIt can be written as\u00a0AB\u00a0(A\u00a0concatenated with\u00a0B), where\u00a0A\u00a0and\u00a0B\u00a0are VPS's, or\\r\n\tIt can be written as\u00a0(A), where\u00a0A\u00a0is a VPS.\\r\n\\r\n\\r\nWe can\u00a0similarly define the nesting depth depth(S) of any VPS S as follows:\\r\n\\r\n\\r\n\tdepth(\"\") = 0\\r\n\tdepth(A + B) = max(depth(A), depth(B)), where A and B are VPS's\\r\n\tdepth(\"(\" + A + \")\") = 1 + depth(A), where A is a VPS.\\r\n\\r\n\\r\nFor example,\u00a0 \"\",\u00a0\"()()\", and\u00a0\"()(()())\"\u00a0are VPS's (with nesting depths 0, 1, and 2), and \")(\" and \"(()\" are not VPS's.\\r\n\\r\n\u00a0\\r\n\\r\nGiven a VPS seq, split it into two disjoint subsequences A and B, such that\u00a0A and B are VPS's (and\u00a0A.length + B.length = seq.length).\\r\n\\r\nNow choose any such A and B such that\u00a0max(depth(A), depth(B)) is the minimum possible value.\\r\n\\r\nReturn an answer array (of length seq.length) that encodes such a\u00a0choice of A and B:\u00a0 answer[i] = 0 if seq[i] is part of A, else answer[i] = 1.\u00a0 Note that even though multiple answers may exist, you may return any of them.\\r\n\n\u00a0\nExample 1:\n\nInput: seq = \"(()())\"\nOutput: [0,1,1,1,1,0]\n\nExample 2:\n\nInput: seq = \"()(())()\"\nOutput: [0,0,0,1,1,0,1,1]\n\n\u00a0\nConstraints:\n\n1 <= seq.size <= 10000\n\n",
    "starterCode": "class Solution:\n    def maxDepthAfterSplit(self, seq: str) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "seq = \"()\"",
        "output": "[0, 0]"
      },
      {
        "input": "seq = \"(()())\"",
        "output": "[0, 1, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"(()(()(())))\"",
        "output": "[0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((())())()\"",
        "output": "[0, 1, 0, 0, 1, 1, 1, 0, 0, 0]"
      },
      {
        "input": "seq = \"\"",
        "output": "[]"
      },
      {
        "input": "seq = \"((()))\"",
        "output": "[0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(())(())\"",
        "output": "[0, 1, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"(()(()))\"",
        "output": "[0, 1, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()())(())\"",
        "output": "[0, 1, 1, 1, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"(())()()\"",
        "output": "[0, 1, 1, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"(()(()(()())))\"",
        "output": "[0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"()()()()\"",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"()(())()\"",
        "output": "[0, 0, 0, 1, 1, 0, 0, 0]"
      },
      {
        "input": "seq = \"((())())\"",
        "output": "[0, 1, 0, 0, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"(((())))\"",
        "output": "[0, 1, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"()()()\"",
        "output": "[0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"((((()))))\"",
        "output": "[0, 1, 0, 1, 0, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()))((()))((()))\"",
        "output": "[0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(()))()((()))(())\"",
        "output": "[0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"(())(())(())\"",
        "output": "[0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"(()(()())(()(()())))\"",
        "output": "[0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(()((()))()))\"",
        "output": "[0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(()(()(()))))\"",
        "output": "[0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()(())))\"",
        "output": "[0, 1, 0, 0, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()()(()())))\"",
        "output": "[0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()()()())(()))\"",
        "output": "[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((((()())))((())))\"",
        "output": "[0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"()(()(()(())))()\"",
        "output": "[0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0]"
      },
      {
        "input": "seq = \"(((()())(()())))((()))\"",
        "output": "[0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()()(()(())))\"",
        "output": "[0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"(((()()())))\"",
        "output": "[0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"()((()))(()())\"",
        "output": "[0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"((()()()()()))\"",
        "output": "[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"()((()))(())\"",
        "output": "[0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"(()(((()(())))))\"",
        "output": "[0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"(((()()())))((()))\"",
        "output": "[0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()())(()))\"",
        "output": "[0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(((())))()(()())\"",
        "output": "[0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"()(((())))(())()\"",
        "output": "[0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0]"
      },
      {
        "input": "seq = \"()((()(()(()))))()\"",
        "output": "[0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0]"
      },
      {
        "input": "seq = \"()(())()(())()(())\"",
        "output": "[0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"((((()))))((((()))))((((()))))\"",
        "output": "[0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"()()()(((())))()()()(((())))\"",
        "output": "[0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()()))((()()))\"",
        "output": "[0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((((()))))(((())))\"",
        "output": "[0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(()))()((()))()\"",
        "output": "[0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0]"
      },
      {
        "input": "seq = \"(((())))(((())))\"",
        "output": "[0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(()(()))(()))\"",
        "output": "[0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()())(())(())(())\"",
        "output": "[0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"()(())()((()))()(())\"",
        "output": "[0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"()()()()()()()()()()()()()()()\"",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"((())(()(())))\"",
        "output": "[0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((((())))(()))\"",
        "output": "[0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()()()))\"",
        "output": "[0, 1, 0, 0, 0, 0, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(((()(()))))\"",
        "output": "[0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(())((())))\"",
        "output": "[0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(()(()())(())))()()\"",
        "output": "[0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"(((((())))))\"",
        "output": "[0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()))(())(()(()))\"",
        "output": "[0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()()())((()))\"",
        "output": "[0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"()((()))(())((()))\"",
        "output": "[0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"()()(())(())()\"",
        "output": "[0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0]"
      },
      {
        "input": "seq = \"()((()())(()))\"",
        "output": "[0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()()()()))((()()()()))\"",
        "output": "[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(()))((()))\"",
        "output": "[0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"()()()()()()\"",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"()()()()()(())\"",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"(())(())(())(())\"",
        "output": "[0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"(()(()())((())))\"",
        "output": "[0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"()((()))()(())(((())))\"",
        "output": "[0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((())(()))((()()))\"",
        "output": "[0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(()))(()(()))(()(()))\"",
        "output": "[0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((((((()))))))\"",
        "output": "[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"()()()()()()()()()()\"",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"()(((())))()\"",
        "output": "[0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0]"
      },
      {
        "input": "seq = \"(()())(())((()))\"",
        "output": "[0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(((()))(()(())))\"",
        "output": "[0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((((()))))(())(()(()))\"",
        "output": "[0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(()(()))(()(())))\"",
        "output": "[0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"(((()())(())))\"",
        "output": "[0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()(())))((()(())))\"",
        "output": "[0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"()(()(()))(()(()))\"",
        "output": "[0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"()((((()))))()\"",
        "output": "[0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0]"
      },
      {
        "input": "seq = \"((())())((()))\"",
        "output": "[0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((((()(())))))\"",
        "output": "[0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((((())))())(()())\"",
        "output": "[0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"(()())(()())\"",
        "output": "[0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"(()(()))()()\"",
        "output": "[0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"((())(()(()(()))))\"",
        "output": "[0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"(((())))(()(()))\"",
        "output": "[0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"()()()()()()()()\"",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"(()())()((()))\"",
        "output": "[0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(((())(())((()))))\"",
        "output": "[0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((((()))))(())((()))((()))\"",
        "output": "[0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(((())))((()))\"",
        "output": "[0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"()((()))()((()))()((()))\"",
        "output": "[0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()())())\"",
        "output": "[0, 1, 0, 0, 0, 0, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"(()((()))(())())\"",
        "output": "[0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"()()()()()()()()()\"",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"()()(())()()(())()()\"",
        "output": "[0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"((())())(())\"",
        "output": "[0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"((()())(()()))(())\"",
        "output": "[0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"()(()(()))()(()(()))\"",
        "output": "[0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(()(()(()(()(())))))())\"",
        "output": "[0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"()()(()())()()\"",
        "output": "[0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"(())((()))(())((()))\"",
        "output": "[0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"()(()())(()())\"",
        "output": "[0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"((((()))((())))\"",
        "output": "[0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1]"
      },
      {
        "input": "seq = \"(((())))()(())()(())\"",
        "output": "[0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"()((()())())\"",
        "output": "[0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"((((()))))((()))\"",
        "output": "[0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"()()()((()))()(())\"",
        "output": "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"(()())((()))(()(()))\"",
        "output": "[0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()(()(()))))\"",
        "output": "[0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()((()))())(())\"",
        "output": "[0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"()(((())))()(((())))\"",
        "output": "[0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"()()()()()()()\"",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"()()((()))\"",
        "output": "[0, 0, 0, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((())())((())())\"",
        "output": "[0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"((((()))))(())\"",
        "output": "[0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"((((((((()))))))))))\"",
        "output": "[0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()))((()))((()))((()))\"",
        "output": "[0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(((()))))(()(((()))))\"",
        "output": "[0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"(((()(())))(()(())))\"",
        "output": "[0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()(()(()))))((()(()(()))))\"",
        "output": "[0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"()()(())(())(())\"",
        "output": "[0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"((()(()())))\"",
        "output": "[0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()))(()(()))((()))\"",
        "output": "[0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()))(())()(()(()))\"",
        "output": "[0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()))((())())\"",
        "output": "[0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"()(()(()(()(()))))()\"",
        "output": "[0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0]"
      },
      {
        "input": "seq = \"((((()()()))))((()))\"",
        "output": "[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()(()))(()(()))\"",
        "output": "[0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()((())))\"",
        "output": "[0, 1, 1, 1, 0, 1, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"(((()))())()((()))\"",
        "output": "[0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()))()(())\"",
        "output": "[0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"(((())))((((()))))\"",
        "output": "[0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((())()(()))\"",
        "output": "[0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()())(()())(()())(()())\"",
        "output": "[0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"(((((())))))(((((())))))\"",
        "output": "[0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0]"
      },
      {
        "input": "seq = \"((()))((()))\"",
        "output": "[0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"()()((()))()()((()))\"",
        "output": "[0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]"
      },
      {
        "input": "seq = \"(()())(()())(()())\"",
        "output": "[0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0]"
      },
      {
        "input": "seq = \"()()()()()\"",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "seq = \"(())(())(())(())(())\"",
        "output": "[0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0]"
      },
      {
        "input": "seq = \"()((()))()((()))\"",
        "output": "[0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0]"
      }
    ]
  },
  {
    "id": 974,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "problemDescription": "Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.\nA subarray is a contiguous part of an array.\n\u00a0\nExample 1:\n\nInput: nums = [4,5,0,-2,-3,1], k = 5\nOutput: 7\nExplanation: There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n\nExample 2:\n\nInput: nums = [5], k = 9\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 3 * 104\n-104 <= nums[i] <= 104\n2 <= k <= 104\n\n",
    "starterCode": "class Solution:\n    def subarraysDivByK(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [2,2,2,2,2], k = 6",
        "output": "3"
      },
      {
        "input": "nums = [0,0,0,0], k = 2",
        "output": "10"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 2",
        "output": "25"
      },
      {
        "input": "nums = [-1,2,-3,4,-5], k = 2",
        "output": "6"
      },
      {
        "input": "nums = [4,5,0,-2,-3,1], k = 5",
        "output": "7"
      },
      {
        "input": "nums = [2,2,2,2,2], k = 2",
        "output": "15"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], k = 3",
        "output": "27"
      },
      {
        "input": "nums = [0,0,0,0,0], k = 1",
        "output": "15"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 3",
        "output": "7"
      },
      {
        "input": "nums = [0,0,0,0,0], k = 2",
        "output": "15"
      },
      {
        "input": "nums = [-1,-2,-3,4,5,6], k = 2",
        "output": "9"
      },
      {
        "input": "nums = [7,7,7,7,7,7], k = 7",
        "output": "21"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "17"
      },
      {
        "input": "nums = [-1,2,-3,4,-5,6], k = 4",
        "output": "3"
      },
      {
        "input": "nums = [-1,-2,-3,3,1,2,3,-4], k = 3",
        "output": "16"
      },
      {
        "input": "nums = [1,-1,2,-2,3,-3], k = 2",
        "output": "11"
      },
      {
        "input": "nums = [0,0,0,0], k = 1",
        "output": "10"
      },
      {
        "input": "nums = [1,1,1,1,1], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [5], k = 9",
        "output": "0"
      },
      {
        "input": "nums = [10,5,0,3,-2], k = 7",
        "output": "1"
      },
      {
        "input": "nums = [10,20,30,40,50], k = 10",
        "output": "15"
      },
      {
        "input": "nums = [-1,-2,-3,4,5,6], k = 4",
        "output": "3"
      },
      {
        "input": "nums = [-10,-5,0,5,10], k = 5",
        "output": "15"
      },
      {
        "input": "nums = [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1], k = 4",
        "output": "100"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "6"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 19",
        "output": "13"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3",
        "output": "27"
      },
      {
        "input": "nums = [104, -104, 208, -208, 312, -312, 416, -416, 520, -520], k = 104",
        "output": "55"
      },
      {
        "input": "nums = [-5,-4,-3,-2,-1,0,1,2,3,4,5], k = 3",
        "output": "34"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], k = 6",
        "output": "14"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 7",
        "output": "55"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 250",
        "output": "17"
      },
      {
        "input": "nums = [-10,10,-10,10,-10,10,-10,10], k = 5",
        "output": "36"
      },
      {
        "input": "nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15], k = 11",
        "output": "5"
      },
      {
        "input": "nums = [100, -100, 200, -200, 300, -300, 400, -400, 500, -500], k = 100",
        "output": "55"
      },
      {
        "input": "nums = [7, 3, 5, 1, 2, 4, 6], k = 7",
        "output": "4"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2",
        "output": "25"
      },
      {
        "input": "nums = [9999,-9999,9999,-9999,9999,-9999], k = 10000",
        "output": "9"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], k = 10",
        "output": "55"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 10",
        "output": "55"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], k = 10",
        "output": "15"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], k = 100",
        "output": "55"
      },
      {
        "input": "nums = [1,0,2,1,-1,-1,-1,0,1,2], k = 4",
        "output": "11"
      },
      {
        "input": "nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], k = 3",
        "output": "64"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 3",
        "output": "35"
      },
      {
        "input": "nums = [3,1,2,5,3,2,3,1,2,3], k = 5",
        "output": "9"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21], k = 3",
        "output": "28"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], k = 11",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5",
        "output": "34"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 5",
        "output": "210"
      },
      {
        "input": "nums = [9, -1, -2, 3, 5, -7, 10, -12, 15, -18, 21, -24, 27, -30, 33, -36, 39, -42, 45, -48], k = 15",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 7",
        "output": "10"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], k = 4",
        "output": "14"
      },
      {
        "input": "nums = [-5, 0, 5, 0, -5, 0, 5, 0, -5, 0, 5, 0, -5, 0, 5, 0, -5, 0, 5, 0, -5, 0, 5, 0, -5, 0, 5, 0, -5, 0], k = 10",
        "output": "225"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500], k = 100",
        "output": "120"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5], k = 5",
        "output": "21"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], k = 2",
        "output": "120"
      },
      {
        "input": "nums = [-10000,-9999,-9998,-9997,-9996,-9995,-9994,-9993,-9992,-9991], k = 1000",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 13",
        "output": "12"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], k = 15",
        "output": "7"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], k = 1000",
        "output": "55"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], k = 4",
        "output": "45"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 13",
        "output": "22"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50], k = 15",
        "output": "7"
      },
      {
        "input": "nums = [-10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000], k = 10000",
        "output": "55"
      },
      {
        "input": "nums = [15, -15, 30, -30, 45, -45, 60, -60, 75, -75, 90, -90], k = 15",
        "output": "78"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 7",
        "output": "27"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 3",
        "output": "63"
      },
      {
        "input": "nums = [9999, -9999, 9999, -9999, 9999, -9999, 9999, -9999], k = 9999",
        "output": "36"
      },
      {
        "input": "nums = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], k = 2",
        "output": "106"
      },
      {
        "input": "nums = [10, -10, 10, -10, 10, -10, 10, -10, 10], k = 5",
        "output": "45"
      },
      {
        "input": "nums = [1000,1000,1000,1000,1000,1000,1000,1000,1000,1000], k = 5000",
        "output": "7"
      },
      {
        "input": "nums = [2,3,-5,6,1,-7,8,9,10,-11,12], k = 7",
        "output": "12"
      },
      {
        "input": "nums = [-3, -1, -2, 2, 1, 3], k = 5",
        "output": "3"
      },
      {
        "input": "nums = [-1, 1, -2, 2, -3, 3, -4, 4], k = 4",
        "output": "15"
      },
      {
        "input": "nums = [1000, -1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000, -1000], k = 2000",
        "output": "25"
      },
      {
        "input": "nums = [10, -10, 20, -20, 30, -30, 40], k = 10",
        "output": "28"
      },
      {
        "input": "nums = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000], k = 10000",
        "output": "55"
      },
      {
        "input": "nums = [-1, 0, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10], k = 6",
        "output": "72"
      },
      {
        "input": "nums = [-10, 10, -10, 10, -10, 10, -10, 10], k = 10",
        "output": "36"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4",
        "output": "10"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0], k = 4",
        "output": "28"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], k = 5",
        "output": "120"
      },
      {
        "input": "nums = [1000, 2000, 3000, -1000, -2000, -3000], k = 1000",
        "output": "21"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], k = 7",
        "output": "27"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 7",
        "output": "48"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 11",
        "output": "5"
      },
      {
        "input": "nums = [1000, -1000, 2000, -2000, 3000, -3000, 4000, -4000], k = 1000",
        "output": "36"
      },
      {
        "input": "nums = [104, -104, 104, -104, 104, -104, 104, -104, 104, -104], k = 104",
        "output": "55"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 7",
        "output": "10"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 3",
        "output": "55"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 2",
        "output": "25"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2",
        "output": "225"
      },
      {
        "input": "nums = [-10, -20, -30, 0, 5, 10, 15, 20], k = 5",
        "output": "36"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 7",
        "output": "210"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0], k = 5",
        "output": "55"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], k = 3",
        "output": "55"
      },
      {
        "input": "nums = [2,-2,2,-2,2,-2,2,-2], k = 4",
        "output": "16"
      },
      {
        "input": "nums = [1,-1,1,-1,1,-1,1,-1,1,-1], k = 2",
        "output": "25"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 5",
        "output": "55"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 3",
        "output": "27"
      },
      {
        "input": "nums = [2,3,5,8,13,21,34,55,89,144], k = 7",
        "output": "7"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], k = 11",
        "output": "28"
      },
      {
        "input": "nums = [10000, -10000, 10000, -10000, 10000], k = 10000",
        "output": "15"
      },
      {
        "input": "nums = [1,2,3,-6,1,2,3,4,5], k = 7",
        "output": "8"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 15",
        "output": "27"
      },
      {
        "input": "nums = [-5, 5, -5, 5, -5, 5, -5, 5, -5, 5], k = 5",
        "output": "55"
      },
      {
        "input": "nums = [2, -2, 2, -4, 6, 5, -1, 3, -3, 4], k = 5",
        "output": "8"
      }
    ]
  },
  {
    "id": 712,
    "difficulty": "Medium",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "problemDescription": "Given two strings s1 and\u00a0s2, return the lowest ASCII sum of deleted characters to make two strings equal.\n\u00a0\nExample 1:\n\nInput: s1 = \"sea\", s2 = \"eat\"\nOutput: 231\nExplanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\nDeleting \"t\" from \"eat\" adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\n\nExample 2:\n\nInput: s1 = \"delete\", s2 = \"leet\"\nOutput: 403\nExplanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting \"e\" from \"leet\" adds 101[e] to the sum.\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\n\n\u00a0\nConstraints:\n\n1 <= s1.length, s2.length <= 1000\ns1 and s2 consist of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s1 = \"delete\", s2 = \"leet\"",
        "output": "403"
      },
      {
        "input": "s1 = \"aaa\", s2 = \"aa\"",
        "output": "97"
      },
      {
        "input": "s1 = \"abc\", s2 = \"abcde\"",
        "output": "201"
      },
      {
        "input": "s1 = \"\", s2 = \"abc\"",
        "output": "294"
      },
      {
        "input": "s1 = \"abc\", s2 = \"\"",
        "output": "294"
      },
      {
        "input": "s1 = \"abc\", s2 = \"def\"",
        "output": "597"
      },
      {
        "input": "s1 = \"pqr\", s2 = \"pqr\"",
        "output": "0"
      },
      {
        "input": "s1 = \"abcdefghijklmnopqrstuvwxyz\", s2 = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "5450"
      },
      {
        "input": "s1 = \"aaa\", s2 = \"aaa\"",
        "output": "0"
      },
      {
        "input": "s1 = \"sea\", s2 = \"eat\"",
        "output": "231"
      },
      {
        "input": "s1 = \"a\", s2 = \"b\"",
        "output": "195"
      },
      {
        "input": "s1 = \"abcabcabc\", s2 = \"abc\"",
        "output": "588"
      },
      {
        "input": "s1 = \"abcdef\", s2 = \"fedcba\"",
        "output": "990"
      },
      {
        "input": "s1 = \"xyz\", s2 = \"zyxwv\"",
        "output": "719"
      },
      {
        "input": "s1 = \"a\", s2 = \"a\"",
        "output": "0"
      },
      {
        "input": "s1 = \"\", s2 = \"\"",
        "output": "0"
      },
      {
        "input": "s1 = \"algorithm\", s2 = \"rhythm\"",
        "output": "749"
      },
      {
        "input": "s1 = \"abcdefgh\", s2 = \"ijklmnop\"",
        "output": "1672"
      },
      {
        "input": "s1 = \"algorithm\", s2 = \"logarithm\"",
        "output": "400"
      },
      {
        "input": "s1 = \"abcdxyz\", s2 = \"xyzabcd\"",
        "output": "726"
      },
      {
        "input": "s1 = \"interview\", s2 = \"interference\"",
        "output": "969"
      },
      {
        "input": "s1 = \"sequencealignment\", s2 = \"simple\"",
        "output": "1606"
      },
      {
        "input": "s1 = \"abcdeabcdeabcde\", s2 = \"decadecadecade\"",
        "output": "1077"
      },
      {
        "input": "s1 = \"aaaaabbbb\", s2 = \"bbbbbbaaa\"",
        "output": "972"
      },
      {
        "input": "s1 = \"aaaabbbbccccdddd\", s2 = \"bbbbaaaaccccdddd\"",
        "output": "776"
      },
      {
        "input": "s1 = \"short\", s2 = \"longerstring\"",
        "output": "1188"
      },
      {
        "input": "s1 = \"abracadabra\", s2 = \"avocado\"",
        "output": "1055"
      },
      {
        "input": "s1 = \"aabbccddeeff\", s2 = \"ffeeddccba\"",
        "output": "1785"
      },
      {
        "input": "s1 = \"abcdabcdabcdabcdabcdabcdabcdabcd\", s2 = \"abcd\"",
        "output": "2758"
      },
      {
        "input": "s1 = \"supercalifragilisticexpialidocious\", s2 = \"supercalifragilistic\"",
        "output": "1506"
      },
      {
        "input": "s1 = \"abcdefg\", s2 = \"xyzabc\"",
        "output": "769"
      },
      {
        "input": "s1 = \"abcdefg\", s2 = \"gfedcba\"",
        "output": "1194"
      },
      {
        "input": "s1 = \"ababababab\", s2 = \"babababa\"",
        "output": "195"
      },
      {
        "input": "s1 = \"racecar\", s2 = \"carrace\"",
        "output": "620"
      },
      {
        "input": "s1 = \"programming\", s2 = \"algorithm\"",
        "output": "1486"
      },
      {
        "input": "s1 = \"longstringfortesting\", s2 = \"anotherlongstringfortesting\"",
        "output": "753"
      },
      {
        "input": "s1 = \"programming\", s2 = \"programmer\"",
        "output": "533"
      },
      {
        "input": "s1 = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", s2 = \"zzyyxxwwvvuuttssrrqqppoonnmmllkkiijjhhhgggffeeeeddccbbaa\"",
        "output": "10953"
      },
      {
        "input": "s1 = \"abcdabcdabcd\", s2 = \"dcba\"",
        "output": "982"
      },
      {
        "input": "s1 = \"ababcabcabc\", s2 = \"abcabcabc\"",
        "output": "195"
      },
      {
        "input": "s1 = \"elephant\", s2 = \"hippopotamus\"",
        "output": "1714"
      },
      {
        "input": "s1 = \"recursion\", s2 = \"iteration\"",
        "output": "879"
      },
      {
        "input": "s1 = \"aabbcc\", s2 = \"ababab\"",
        "output": "393"
      },
      {
        "input": "s1 = \"abacaxbab\", s2 = \"abcabc\"",
        "output": "511"
      },
      {
        "input": "s1 = \"abcde\", s2 = \"fghij\"",
        "output": "1015"
      },
      {
        "input": "s1 = \"dynamicprogramming\", s2 = \"dynamictimeprogramming\"",
        "output": "431"
      },
      {
        "input": "s1 = \"programming\", s2 = \"prognosis\"",
        "output": "1083"
      },
      {
        "input": "s1 = \"sunshine\", s2 = \"shinesun\"",
        "output": "684"
      },
      {
        "input": "s1 = \"interviewquestion\", s2 = \"interviewquery\"",
        "output": "792"
      },
      {
        "input": "s1 = \"aabbccddeeffgg\", s2 = \"abcdfg\"",
        "output": "801"
      },
      {
        "input": "s1 = \"mississippi\", s2 = \"missisipi\"",
        "output": "227"
      },
      {
        "input": "s1 = \"hello\", s2 = \"yellow\"",
        "output": "344"
      },
      {
        "input": "s1 = \"xylophone\", s2 = \"xylophone\"",
        "output": "0"
      },
      {
        "input": "s1 = \"aaaaabbbbbbbbaaa\", s2 = \"aaaaaaaaaabbbbbba\"",
        "output": "875"
      },
      {
        "input": "s1 = \"abcdexyz\", s2 = \"xyzabcd\"",
        "output": "827"
      },
      {
        "input": "s1 = \"abcd\", s2 = \"dcba\"",
        "output": "588"
      },
      {
        "input": "s1 = \"mississippi\", s2 = \"mississippi\"",
        "output": "0"
      },
      {
        "input": "s1 = \"xyzzxyzzxyzz\", s2 = \"zzxyzzxyzzxy\"",
        "output": "482"
      },
      {
        "input": "s1 = \"sequence\", s2 = \"subsequence\"",
        "output": "330"
      },
      {
        "input": "s1 = \"abcdabcdabcd\", s2 = \"abcabcabcabc\"",
        "output": "594"
      },
      {
        "input": "s1 = \"abcdefghikjlmnopqrstuvwxyz\", s2 = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "5268"
      },
      {
        "input": "s1 = \"kitten\", s2 = \"sitting\"",
        "output": "531"
      },
      {
        "input": "s1 = \"abcdef\", s2 = \"ghijkl\"",
        "output": "1230"
      },
      {
        "input": "s1 = \"abcdexyz\", s2 = \"defghijk\"",
        "output": "1284"
      },
      {
        "input": "s1 = \"aaaaaaaaaaaaaaa\", s2 = \"bbbbbbbbbbbbbbb\"",
        "output": "2925"
      },
      {
        "input": "s1 = \"kshdfjkhewriukhweriukhweriukhwer\", s2 = \"wriukhweriukhwer\"",
        "output": "1713"
      },
      {
        "input": "s1 = \"aaaaabbbbb\", s2 = \"bbbbbcccc\"",
        "output": "881"
      },
      {
        "input": "s1 = \"abcdefg\", s2 = \"xyz\"",
        "output": "1063"
      },
      {
        "input": "s1 = \"aaaaaa\", s2 = \"bbbbbb\"",
        "output": "1170"
      },
      {
        "input": "s1 = \"programming\", s2 = \"remmargorp\"",
        "output": "1401"
      },
      {
        "input": "s1 = \"abcdefghij\", s2 = \"jihgfedcba\"",
        "output": "1818"
      },
      {
        "input": "s1 = \"programming\", s2 = \"program\"",
        "output": "427"
      },
      {
        "input": "s1 = \"leetcode\", s2 = \"codeleet\"",
        "output": "822"
      },
      {
        "input": "s1 = \"zzzzz\", s2 = \"zzzzzzzz\"",
        "output": "366"
      },
      {
        "input": "s1 = \"mississippi\", s2 = \"pississippi\"",
        "output": "221"
      },
      {
        "input": "s1 = \"samestring\", s2 = \"samestring\"",
        "output": "0"
      },
      {
        "input": "s1 = \"aabbccddeeffgghhii\", s2 = \"iihhggffeeddccbbaa\"",
        "output": "3216"
      },
      {
        "input": "s1 = \"mississippi\", s2 = \"missisippi\"",
        "output": "115"
      },
      {
        "input": "s1 = \"dynamicprogramming\", s2 = \"longestcommonsubsequence\"",
        "output": "3232"
      },
      {
        "input": "s1 = \"abcxyz\", s2 = \"xyzabc\"",
        "output": "588"
      },
      {
        "input": "s1 = \"abcdabcdabcd\", s2 = \"xyzxyzxyz\"",
        "output": "2271"
      },
      {
        "input": "s1 = \"qwertyuiopasdfghjklzxcvbnm\", s2 = \"mnbvcxzlkjhgfdsapoiuytrewq\"",
        "output": "5450"
      },
      {
        "input": "s1 = \"dynamicprogramming\", s2 = \"recursion\"",
        "output": "2028"
      },
      {
        "input": "s1 = \"ababababab\", s2 = \"bababababa\"",
        "output": "194"
      },
      {
        "input": "s1 = \"xyzzyxzyxzyxz\", s2 = \"zyxzyxzyxzyx\"",
        "output": "604"
      },
      {
        "input": "s1 = \"abcd\", s2 = \"efgh\"",
        "output": "804"
      },
      {
        "input": "s1 = \"xylophone\", s2 = \"polyphonexy\"",
        "output": "911"
      },
      {
        "input": "s1 = \"longstringwithvariouscharacters\", s2 = \"anotherstringwithdifferentcharacters\"",
        "output": "2463"
      },
      {
        "input": "s1 = \"repeatedcharacters\", s2 = \"repeatedcharactersrepeatedcharacters\"",
        "output": "1898"
      },
      {
        "input": "s1 = \"minimum\", s2 = \"maximum\"",
        "output": "432"
      },
      {
        "input": "s1 = \"abcde\", s2 = \"edcba\"",
        "output": "788"
      },
      {
        "input": "s1 = \"abcdefghij\", s2 = \"abcdefghijk\"",
        "output": "107"
      },
      {
        "input": "s1 = \"mississippi\", s2 = \"basketball\"",
        "output": "2028"
      },
      {
        "input": "s1 = \"mississippi\", s2 = \"pisissip\"",
        "output": "553"
      },
      {
        "input": "s1 = \"abcdabcdabcd\", s2 = \"abcd\"",
        "output": "788"
      },
      {
        "input": "s1 = \"aaaaabbbbb\", s2 = \"bbbbbbaaaa\"",
        "output": "971"
      },
      {
        "input": "s1 = \"abcdabcdabcd\", s2 = \"abc\"",
        "output": "888"
      },
      {
        "input": "s1 = \"ascii\", s2 = \"unicode\"",
        "output": "1054"
      },
      {
        "input": "s1 = \"supercalifragilisticexpialidocious\", s2 = \"supercalifragilisticexpialidocious\"",
        "output": "0"
      },
      {
        "input": "s1 = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", s2 = \"zzyyxxwwvvuuttsrrqqppoonnmlkkjjiihhggffeeeeddccbbaa\"",
        "output": "10770"
      },
      {
        "input": "s1 = \"interspecies\", s2 = \"interstellar\"",
        "output": "1075"
      },
      {
        "input": "s1 = \"waterbottle\", s2 = \"erbottlewat\"",
        "output": "664"
      },
      {
        "input": "s1 = \"lalalalala\", s2 = \"alalalalal\"",
        "output": "194"
      },
      {
        "input": "s1 = \"abracadabra\", s2 = \"avadakedavra\"",
        "output": "953"
      },
      {
        "input": "s1 = \"xyz\", s2 = \"zyxzyxzyx\"",
        "output": "726"
      },
      {
        "input": "s1 = \"longerstring\", s2 = \"short\"",
        "output": "1188"
      },
      {
        "input": "s1 = \"mississippi\", s2 = \"mississippimiss\"",
        "output": "444"
      },
      {
        "input": "s1 = \"elephant\", s2 = \"elephant\"",
        "output": "0"
      },
      {
        "input": "s1 = \"programming\", s2 = \"ogramming\"",
        "output": "226"
      },
      {
        "input": "s1 = \"abcdabcdabcd\", s2 = \"abcabcabc\"",
        "output": "300"
      },
      {
        "input": "s1 = \"longest\", s2 = \"commonsubsequence\"",
        "output": "1928"
      },
      {
        "input": "s1 = \"abcdefghijk\", s2 = \"fedcbaolmijkpqrstuvwxyz\"",
        "output": "2812"
      },
      {
        "input": "s1 = \"programming\", s2 = \"development\"",
        "output": "1712"
      },
      {
        "input": "s1 = \"transformation\", s2 = \"transformation\"",
        "output": "0"
      },
      {
        "input": "s1 = \"longestcommonsubsequence\", s2 = \"shortestcommonsubsequence\"",
        "output": "770"
      }
    ]
  },
  {
    "id": 2275,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Hash Table",
      "Counting"
    ],
    "problemDescription": "The bitwise AND of an array nums is the bitwise AND of all integers in nums.\n\nFor example, for nums = [1, 5, 3], the bitwise AND is equal to 1 & 5 & 3 = 1.\nAlso, for nums = [7], the bitwise AND is 7.\n\nYou are given an array of positive integers candidates. Compute the bitwise AND for all possible combinations of elements in the candidates array.\nReturn the size of the largest combination of candidates with a bitwise AND greater than 0.\n\u00a0\nExample 1:\n\nInput: candidates = [16,17,71,62,12,24,14]\nOutput: 4\nExplanation: The combination [16,17,62,24] has a bitwise AND of 16 & 17 & 62 & 24 = 16 > 0.\nThe size of the combination is 4.\nIt can be shown that no combination with a size greater than 4 has a bitwise AND greater than 0.\nNote that more than one combination may have the largest size.\nFor example, the combination [62,12,24,14] has a bitwise AND of 62 & 12 & 24 & 14 = 8 > 0.\n\nExample 2:\n\nInput: candidates = [8,8]\nOutput: 2\nExplanation: The largest combination [8,8] has a bitwise AND of 8 & 8 = 8 > 0.\nThe size of the combination is 2, so we return 2.\n\n\u00a0\nConstraints:\n\n1 <= candidates.length <= 105\n1 <= candidates[i] <= 107\n\n",
    "starterCode": "class Solution:\n    def largestCombination(self, candidates: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "candidates = [16,17,71,62,12,24,14]",
        "output": "4"
      },
      {
        "input": "candidates = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]",
        "output": "16"
      },
      {
        "input": "candidates = [1,2,3,4,5,6,7,8,9,10]",
        "output": "5"
      },
      {
        "input": "candidates = [1,10000000,2,9999999,3,9999998,4,9999997,5,9999996,6,9999995,7,9999994,8,9999993,9,9999992,10,9999991]",
        "output": "11"
      },
      {
        "input": "candidates = [31,31,31,31,31,31,31,31,31,31]",
        "output": "10"
      },
      {
        "input": "candidates = [1024,512,256,128,64,32,16,8,4,2,1]",
        "output": "1"
      },
      {
        "input": "candidates = [10000000,9999999,9999998,9999997,9999996,9999995,9999994,9999993,9999992,9999991]",
        "output": "10"
      },
      {
        "input": "candidates = [1,2,4,8,16,32,64,128,256,512]",
        "output": "1"
      },
      {
        "input": "candidates = [1048576,524288,262144,131072,65536,32768,16384,8192,4096,2048,1024,512,256,128,64,32,16,8,4,2,1]",
        "output": "1"
      },
      {
        "input": "candidates = [8,8]",
        "output": "2"
      },
      {
        "input": "candidates = [3,3,3,3,3,3,3,3,3,3]",
        "output": "10"
      },
      {
        "input": "candidates = [1048575,1048574,1048573,1048572,1048571]",
        "output": "5"
      },
      {
        "input": "candidates = [10000000,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144]",
        "output": "2"
      },
      {
        "input": "candidates = [31,31,31,31,31]",
        "output": "5"
      },
      {
        "input": "candidates = [10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000]",
        "output": "10"
      },
      {
        "input": "candidates = [536870911,536870910,536870909,536870908,536870907,536870906,536870905,536870904,536870903,536870902,536870901,536870900,536870899,536870898,536870897]",
        "output": "15"
      },
      {
        "input": "candidates = [1073741823, 1073741822, 1073741821, 1073741820, 1073741819, 1073741818, 1073741817, 1073741816, 1073741815, 1073741814]",
        "output": "10"
      },
      {
        "input": "candidates = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824]",
        "output": "1"
      },
      {
        "input": "candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "25"
      },
      {
        "input": "candidates = [1048575,524288,262144,131072,65536,32768,16384,8192,4096,2048,1024,512,256,128,64,32,16,8,4,2,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11]",
        "output": "14"
      },
      {
        "input": "candidates = [9999999,9999998,9999997,9999996,9999995,9999994,9999993,9999992,9999991,9999990,9999989,9999988,9999987,9999986,9999985,9999984,9999983,9999982,9999981,9999980]",
        "output": "20"
      },
      {
        "input": "candidates = [2147483647, 2147483646, 2147483645, 2147483644, 2147483643, 2147483642, 2147483641, 2147483640, 2147483639, 2147483638]",
        "output": "10"
      },
      {
        "input": "candidates = [1000000, 1000001, 1000002, 1000003, 1000004, 1000005, 1000006, 1000007, 1000008, 1000009, 1000010, 1000011, 1000012, 1000013, 1000014, 1000015, 1000016, 1000017, 1000018, 1000019]",
        "output": "20"
      },
      {
        "input": "candidates = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]",
        "output": "1"
      },
      {
        "input": "candidates = [2147483647, 2147483646, 2147483645, 2147483644, 2147483643]",
        "output": "5"
      },
      {
        "input": "candidates = [131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864]",
        "output": "1"
      },
      {
        "input": "candidates = [1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912]",
        "output": "1"
      },
      {
        "input": "candidates = [16777215,16777214,16777213,16777212,16777211,16777210,16777209,16777208,16777207,16777206,16777205,16777204,16777203,16777202,16777201]",
        "output": "15"
      },
      {
        "input": "candidates = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117]",
        "output": "30"
      },
      {
        "input": "candidates = [2147483647, 1073741823, 536870911, 268435455, 134217727, 67108863, 33554431, 16777215, 8388607, 4194303, 2097151, 1048575, 524287, 262143, 131071, 65535, 32767, 16383, 8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1]",
        "output": "31"
      },
      {
        "input": "candidates = [1234567, 7654321, 13579246, 24681357, 35792468, 46813579, 57924681, 68135792, 79246813, 81357924, 92468135]",
        "output": "7"
      },
      {
        "input": "candidates = [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171, 180]",
        "output": "11"
      },
      {
        "input": "candidates = [524288, 524290, 524292, 524294, 524296, 524298, 524300, 524302, 524304, 524306, 524308, 524310, 524312, 524314, 524316, 524318, 524320, 524322, 524324, 524326]",
        "output": "20"
      },
      {
        "input": "candidates = [5000000, 5000001, 5000002, 5000003, 5000004, 5000005, 5000006, 5000007, 5000008, 5000009, 5000010, 5000011, 5000012, 5000013, 5000014, 5000015, 5000016, 5000017, 5000018, 5000019, 5000020, 5000021, 5000022, 5000023, 5000024, 5000025, 5000026, 5000027, 5000028, 5000029, 5000030]",
        "output": "31"
      },
      {
        "input": "candidates = [5000000, 4000000, 3000000, 2000000, 1000000, 500000, 400000, 300000, 200000, 100000, 50000, 40000, 30000, 20000, 10000, 5000, 4000, 3000, 2000, 1000, 500, 400, 300, 200, 100, 50, 40, 30, 20, 10, 5]",
        "output": "16"
      },
      {
        "input": "candidates = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912]",
        "output": "1"
      },
      {
        "input": "candidates = [1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109]",
        "output": "29"
      },
      {
        "input": "candidates = [16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824]",
        "output": "1"
      },
      {
        "input": "candidates = [8388608, 4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]",
        "output": "1"
      },
      {
        "input": "candidates = [1048575,2097150,3145725,4194300,5242875,6291450,7340025,8388500,9437075,10485650,11534225,12582800,13631375,14679950,15728525,16777100,17825675,18874250,19922825,20971400]",
        "output": "20"
      },
      {
        "input": "candidates = [65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647]",
        "output": "16"
      },
      {
        "input": "candidates = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647]",
        "output": "31"
      },
      {
        "input": "candidates = [1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004]",
        "output": "20"
      },
      {
        "input": "candidates = [983040, 983041, 983042, 983043, 983044, 983045, 983046, 983047, 983048, 983049]",
        "output": "10"
      },
      {
        "input": "candidates = [1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000, 11000000, 12000000, 13000000, 14000000, 15000000]",
        "output": "10"
      },
      {
        "input": "candidates = [9999999, 9999998, 9999997, 9999996, 9999995, 9999994, 9999993, 9999992, 9999991, 9999990, 9999989, 9999988, 9999987, 9999986, 9999985, 9999984, 9999983, 9999982, 9999981, 9999980]",
        "output": "20"
      },
      {
        "input": "candidates = [5000000, 5000001, 5000002, 5000003, 5000004, 5000005, 5000006, 5000007, 5000008, 5000009]",
        "output": "10"
      },
      {
        "input": "candidates = [8388607, 8388606, 8388605, 8388604, 8388603, 8388602, 8388601, 8388600, 8388599, 8388598, 8388597, 8388596, 8388595, 8388594, 8388593, 8388592, 8388591, 8388590, 8388589, 8388588]",
        "output": "20"
      },
      {
        "input": "candidates = [1073741823, 1073741822, 1073741821, 1073741820, 1073741819, 1073741818, 1073741817, 1073741816, 1073741815, 1073741814, 1073741813, 1073741812, 1073741811, 1073741810, 1073741809]",
        "output": "15"
      },
      {
        "input": "candidates = [16777215, 16777214, 16777213, 16777212, 16777211, 16777210, 16777209, 16777208, 16777207, 16777206]",
        "output": "10"
      },
      {
        "input": "candidates = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150]",
        "output": "16"
      },
      {
        "input": "candidates = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "9"
      },
      {
        "input": "candidates = [512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]",
        "output": "2"
      },
      {
        "input": "candidates = [15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607]",
        "output": "20"
      },
      {
        "input": "candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "10"
      },
      {
        "input": "candidates = [1048575,524288,262144,131072,65536,32768,16384,8192,4096,2048,1024,512,256,128,64,32,16,8,4,2,1]",
        "output": "2"
      },
      {
        "input": "candidates = [128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864]",
        "output": "1"
      },
      {
        "input": "candidates = [3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151]",
        "output": "20"
      },
      {
        "input": "candidates = [1023, 2047, 4095, 8191, 16383, 32767, 65535]",
        "output": "7"
      },
      {
        "input": "candidates = [262143, 262142, 262141, 262140, 262139, 262138, 262137, 262136, 262135, 262134, 262133, 262132, 262131, 262130, 262129, 262128, 262127, 262126, 262125, 262124, 262123, 262122, 262121, 262120, 262119, 262118, 262117, 262116, 262115, 262114, 262113]",
        "output": "31"
      },
      {
        "input": "candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]",
        "output": "32"
      },
      {
        "input": "candidates = [2147483647,1073741824,536870912,268435456,134217728,67108864,33554432,16777216,8388608,4194304,2097152,1048576,524288,262144,131072,65536,32768,16384,8192,4096,2048,1024,512,256,128,64,32,16,8,4,2,1]",
        "output": "2"
      },
      {
        "input": "candidates = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 999999999, 99999999, 9999999, 999999, 99999]",
        "output": "9"
      },
      {
        "input": "candidates = [1023,511,255,127,63,31,15,7,3,1,1024,512,256,128,64,32,16,8,4,2]",
        "output": "10"
      },
      {
        "input": "candidates = [5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000, 5000000]",
        "output": "15"
      },
      {
        "input": "candidates = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "20"
      },
      {
        "input": "candidates = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575]",
        "output": "20"
      },
      {
        "input": "candidates = [1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647]",
        "output": "22"
      },
      {
        "input": "candidates = [1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535,131071,262143,524287,1048575,2097151,4194303,8388607,16777215,33554431,67108863,134217727,268435455,536870911]",
        "output": "29"
      },
      {
        "input": "candidates = [1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912]",
        "output": "1"
      },
      {
        "input": "candidates = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109]",
        "output": "29"
      },
      {
        "input": "candidates = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "20"
      },
      {
        "input": "candidates = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127]",
        "output": "30"
      },
      {
        "input": "candidates = [33554431, 67108863, 134217727, 268435455, 536870911, 1073741823]",
        "output": "6"
      },
      {
        "input": "candidates = [10000000,5000000,2500000,1250000,625000,312500,156250,78125,39062,19531,9765,4882,2441,1220,610,305,152,76,38,19]",
        "output": "8"
      },
      {
        "input": "candidates = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "62"
      },
      {
        "input": "candidates = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15]",
        "output": "16"
      },
      {
        "input": "candidates = [1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287]",
        "output": "10"
      },
      {
        "input": "candidates = [65535, 65534, 65533, 65532, 65531, 65530, 65529, 65528, 65527, 65526, 65525, 65524, 65523, 65522, 65521, 65520, 65519, 65518, 65517, 65516, 65515, 65514, 65513, 65512, 65511, 65510, 65509, 65508, 65507, 65506, 65505]",
        "output": "31"
      },
      {
        "input": "candidates = [1048576, 1048576, 1048576, 1048576, 1048576, 1048576, 1048576, 1048576, 1048576, 1048576]",
        "output": "10"
      },
      {
        "input": "candidates = [1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000, 11000000, 12000000, 13000000, 14000000, 15000000, 16000000, 17000000, 18000000, 19000000, 20000000]",
        "output": "11"
      },
      {
        "input": "candidates = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288]",
        "output": "1"
      },
      {
        "input": "candidates = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99]",
        "output": "50"
      },
      {
        "input": "candidates = [1000001, 2000002, 3000003, 4000004, 5000005, 6000006, 7000007, 8000008, 9000009, 10000010]",
        "output": "10"
      },
      {
        "input": "candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]",
        "output": "16"
      },
      {
        "input": "candidates = [33554431, 33554430, 33554429, 33554428, 33554427, 33554426, 33554425, 33554424, 33554423, 33554422, 33554421, 33554420, 33554419, 33554418, 33554417, 33554416, 33554415, 33554414, 33554413, 33554412, 33554411, 33554410, 33554409, 33554408, 33554407, 33554406, 33554405, 33554404, 33554403, 33554402, 33554401]",
        "output": "31"
      },
      {
        "input": "candidates = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "25"
      },
      {
        "input": "candidates = [1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000]",
        "output": "10"
      },
      {
        "input": "candidates = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]",
        "output": "1"
      },
      {
        "input": "candidates = [15,27,51,85,129,173,217,261,305,349,393,437,481,525,569,613,657,701,745,789,833,877,921,965,1009,1053,1097,1141,1185,1229]",
        "output": "30"
      },
      {
        "input": "candidates = [10000000,9999999,9999998,9999997,9999996,9999995,9999994,9999993,9999992,9999991,9999990,9999989,9999988,9999987,9999986,9999985,9999984,9999983,9999982,9999981]",
        "output": "20"
      },
      {
        "input": "candidates = [10000000, 10000001, 10000002, 10000003, 10000004, 10000005, 10000006, 10000007, 10000008, 10000009]",
        "output": "10"
      }
    ]
  },
  {
    "id": 1759,
    "difficulty": "Medium",
    "tags": [
      "Math",
      "String"
    ],
    "problemDescription": "Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 109 + 7.\nA string is homogenous if all the characters of the string are the same.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nExample 1:\n\nInput: s = \"abbcccaa\"\nOutput: 13\nExplanation: The homogenous substrings are listed as below:\n\"a\"   appears 3 times.\n\"aa\"  appears 1 time.\n\"b\"   appears 2 times.\n\"bb\"  appears 1 time.\n\"c\"   appears 3 times.\n\"cc\"  appears 2 times.\n\"ccc\" appears 1 time.\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.\nExample 2:\n\nInput: s = \"xy\"\nOutput: 2\nExplanation: The homogenous substrings are \"x\" and \"y\".\nExample 3:\n\nInput: s = \"zzzzz\"\nOutput: 15\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 105\ns consists of lowercase letters.\n\n",
    "starterCode": "class Solution:\n    def countHomogenous(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"aaabbbccc\"",
        "output": "18"
      },
      {
        "input": "s = \"aabbccddeeefffggghhhiiii\"",
        "output": "46"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "26"
      },
      {
        "input": "s = \"xy\"",
        "output": "2"
      },
      {
        "input": "s = \"aabbaa\"",
        "output": "9"
      },
      {
        "input": "s = \"aaaaa\"",
        "output": "15"
      },
      {
        "input": "s = \"pppppppppp\"",
        "output": "55"
      },
      {
        "input": "s = \"abcdeffffff\"",
        "output": "26"
      },
      {
        "input": "s = \"a\"",
        "output": "1"
      },
      {
        "input": "s = \"qqqqqwwweeeerrrrtttttyyyyyuuuuuiooooo\"",
        "output": "102"
      },
      {
        "input": "s = \"abcabcabc\"",
        "output": "9"
      },
      {
        "input": "s = \"ababababab\"",
        "output": "10"
      },
      {
        "input": "s = \"abcde\"",
        "output": "5"
      },
      {
        "input": "s = \"ababababa\"",
        "output": "9"
      },
      {
        "input": "s = \"zzzzyyyyxxxwwwwvvvvuuuuttttsrrrqqqppoonnmlkjihgfedcba\"",
        "output": "101"
      },
      {
        "input": "s = \"ccccccccc\"",
        "output": "45"
      },
      {
        "input": "s = \"abbcccaa\"",
        "output": "13"
      },
      {
        "input": "s = \"abcd\"",
        "output": "4"
      },
      {
        "input": "s = \"zzzzz\"",
        "output": "15"
      },
      {
        "input": "s = \"ababab\"",
        "output": "6"
      },
      {
        "input": "s = \"aaaaaabb\"",
        "output": "24"
      },
      {
        "input": "s = \"aabbccddeeeeffff\"",
        "output": "32"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabc\"",
        "output": "21"
      },
      {
        "input": "s = \"aabbbccccdddd\"",
        "output": "29"
      },
      {
        "input": "s = \"mmmmmlllllkkkkkkjjjjjjjjiiiiiiiiiiiihhhhhhhhhhhh\"",
        "output": "243"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "1326"
      },
      {
        "input": "s = \"aaabaaaabaaaaabaaaaaaabaaaaaaaabaaaaaaaaabaaaaaaaaaabaaaaaaaaaa\"",
        "output": "257"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbccccccccddddddddeeeeeeeee\"",
        "output": "208"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "903"
      },
      {
        "input": "s = \"aabbcccddddeeeee\"",
        "output": "37"
      },
      {
        "input": "s = \"pppppqqqqqqrrrrrrsssssstttttuuuuuuvvvvvvvvvwwwwwwwww\"",
        "output": "204"
      },
      {
        "input": "s = \"aabbbcccc\"",
        "output": "19"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "676"
      },
      {
        "input": "s = \"aaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaabaaaa\"",
        "output": "252"
      },
      {
        "input": "s = \"mmmmmmmmmmmmmmmnnnnnnnnnnnnnnnoooooooooooopppppppppppp\"",
        "output": "396"
      },
      {
        "input": "s = \"aabbccddeeefffggg\"",
        "output": "30"
      },
      {
        "input": "s = \"abcabcabcabc\"",
        "output": "12"
      },
      {
        "input": "s = \"aaabbaaaabbaaa\"",
        "output": "28"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbcccccccccc\"",
        "output": "165"
      },
      {
        "input": "s = \"aabbccddeeefffggghhhh\"",
        "output": "40"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "277140"
      },
      {
        "input": "s = \"zzzzyyyyzzzz\"",
        "output": "30"
      },
      {
        "input": "s = \"aaaaabbbbccccc\"",
        "output": "40"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "29403"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyzxyzxyz\"",
        "output": "24"
      },
      {
        "input": "s = \"aabbccddeeeeffffggggghhhhiiiii\"",
        "output": "72"
      },
      {
        "input": "s = \"pppppppppppppppppppppppppppppppppp\"",
        "output": "595"
      },
      {
        "input": "s = \"ababababababababababababababab\"",
        "output": "30"
      },
      {
        "input": "s = \"aaaaabbbbccccdddddeeeee\"",
        "output": "65"
      },
      {
        "input": "s = \"aabbccddeeefffggghhhhiiiiijjjjjkkkkklllllmmmmmnnnnnooooo\"",
        "output": "145"
      },
      {
        "input": "s = \"pppppppppppppppppppppppppppppppppppppppppppqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\"",
        "output": "1892"
      },
      {
        "input": "s = \"ppppppppppppppppppppppp\"",
        "output": "276"
      },
      {
        "input": "s = \"xyzzyzxzyzxyz\"",
        "output": "14"
      },
      {
        "input": "s = \"ababababababab\"",
        "output": "14"
      },
      {
        "input": "s = \"aabbccddeeeefffghhhiiiijjjjkkkkllllmmmmmnnnnnooooo\"",
        "output": "120"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyza\"",
        "output": "27"
      },
      {
        "input": "s = \"aabbccddeeefffggghhhiiiijjjjkkkkllllmmmmmnnnnnooooooo\"",
        "output": "134"
      },
      {
        "input": "s = \"aaaaaaaaabbbbbbbbbbcccccccccc\"",
        "output": "155"
      },
      {
        "input": "s = \"zzzzzyyyxxxwwwwvvvvuuuuu\"",
        "output": "62"
      },
      {
        "input": "s = \"aabbccddeeeeffffggggghhhiiijjjkkklllmmnnooopppqqqrrsssttuuuvvvwwwwwxxxxxyyyyyzzzz\"",
        "output": "180"
      },
      {
        "input": "s = \"abcdefffffffffffffffffffffffffghijklmnopqrstuvwxyz\"",
        "output": "350"
      },
      {
        "input": "s = \"abcdabcdbcdabcd\"",
        "output": "15"
      },
      {
        "input": "s = \"aabbbbccccc\"",
        "output": "28"
      },
      {
        "input": "s = \"aaaaaaaaaaaabbaaaaaaa\"",
        "output": "109"
      },
      {
        "input": "s = \"aabbbccccc\"",
        "output": "24"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyx\"",
        "output": "15"
      },
      {
        "input": "s = \"aabbaaabbbaaa\"",
        "output": "24"
      },
      {
        "input": "s = \"aabbaaabbcccddeee\"",
        "output": "30"
      },
      {
        "input": "s = \"aabbccddeeffgg\"",
        "output": "21"
      },
      {
        "input": "s = \"aaaaabbbbbbbbbbcccccccccc\"",
        "output": "125"
      },
      {
        "input": "s = \"pppppppppppppppppppppppppppppppppppppppp\"",
        "output": "820"
      },
      {
        "input": "s = \"aabbaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "84"
      },
      {
        "input": "s = \"abacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabad\"",
        "output": "160"
      },
      {
        "input": "s = \"qwerqwerqwerqwerqwerqwerqwer\"",
        "output": "28"
      },
      {
        "input": "s = \"aaabbaaa\"",
        "output": "15"
      },
      {
        "input": "s = \"aaabbaaabbaaa\"",
        "output": "24"
      },
      {
        "input": "s = \"abcabcabcabcabc\"",
        "output": "15"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "21736"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "1275"
      },
      {
        "input": "s = \"abcdefg\"",
        "output": "7"
      }
    ]
  },
  {
    "id": 1968,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Sorting"
    ],
    "problemDescription": "You are given a 0-indexed array nums of distinct integers. You want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors.\nMore formally, the rearranged array should have the property such that for every i in the range 1 <= i < nums.length - 1, (nums[i-1] + nums[i+1]) / 2 is not equal to nums[i].\nReturn any rearrangement of nums that meets the requirements.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,3,4,5]\nOutput: [1,2,4,5,3]\nExplanation:\nWhen i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.\nWhen i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.\nWhen i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5.\n\nExample 2:\n\nInput: nums = [6,2,0,9,7]\nOutput: [9,7,6,2,0]\nExplanation:\nWhen i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.\nWhen i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.\nWhen i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3.\nNote that the original array [6,2,0,9,7] also satisfies the conditions.\n\u00a0\nConstraints:\n\n3 <= nums.length <= 105\n0 <= nums[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def rearrangeArray(self, nums: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [0,100000,50000,25000,75000]",
        "output": "[0, 75000, 25000, 100000, 50000]"
      },
      {
        "input": "nums = [10,20,30,40,50,60]",
        "output": "[10, 40, 20, 50, 30, 60]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13]",
        "output": "[1, 9, 3, 11, 5, 13, 7]"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7]",
        "output": "[1, 5, 2, 6, 3, 7, 4]"
      },
      {
        "input": "nums = [3,1,2,5,4]",
        "output": "[1, 4, 2, 5, 3]"
      },
      {
        "input": "nums = [10,5,1,6,2]",
        "output": "[1, 6, 2, 10, 5]"
      },
      {
        "input": "nums = [5,1,3,2,4]",
        "output": "[1, 4, 2, 5, 3]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30]",
        "output": "[5, 20, 10, 25, 15, 30]"
      },
      {
        "input": "nums = [6,2,0,9,7]",
        "output": "[0, 7, 2, 9, 6]"
      },
      {
        "input": "nums = [0,100,50,25,75]",
        "output": "[0, 75, 25, 100, 50]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50]",
        "output": "[10, 40, 20, 50, 30]"
      },
      {
        "input": "nums = [5,3,1,2,4]",
        "output": "[1, 4, 2, 5, 3]"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "[1, 4, 2, 5, 3]"
      },
      {
        "input": "nums = [1,3,5,7,9,11]",
        "output": "[1, 7, 3, 9, 5, 11]"
      },
      {
        "input": "nums = [10,0,5,3,8]",
        "output": "[0, 8, 3, 10, 5]"
      },
      {
        "input": "nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]",
        "output": "[100, 106, 101, 107, 102, 108, 103, 109, 104, 110, 105]"
      },
      {
        "input": "nums = [31, 41, 59, 26, 53, 58, 97, 93, 23, 84, 62, 64, 33, 83, 27, 95, 0, 88, 49, 51]",
        "output": "[0, 58, 23, 59, 26, 62, 27, 64, 31, 83, 33, 84, 41, 88, 49, 93, 51, 95, 53, 97]"
      },
      {
        "input": "nums = [7,14,21,28,35,42,49,56,63,70,77,84,91,98,105,112,119,126,133,140]",
        "output": "[7, 77, 14, 84, 21, 91, 28, 98, 35, 105, 42, 112, 49, 119, 56, 126, 63, 133, 70, 140]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "[100, 600, 200, 700, 300, 800, 400, 900, 500, 1000]"
      },
      {
        "input": "nums = [85, 90, 80, 95, 75, 100, 70, 105, 65, 110]",
        "output": "[65, 90, 70, 95, 75, 100, 80, 105, 85, 110]"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "[1, 32, 2, 64, 4, 128, 8, 256, 16, 512]"
      },
      {
        "input": "nums = [100000,50000,25000,12500,62500,31250,93750,46875,15625,78125]",
        "output": "[12500, 50000, 15625, 62500, 25000, 78125, 31250, 93750, 46875, 100000]"
      },
      {
        "input": "nums = [123, 456, 789, 234, 567, 890, 345, 678, 901, 12, 34, 56]",
        "output": "[12, 456, 34, 567, 56, 678, 123, 789, 234, 890, 345, 901]"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19, 10, 20]"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19, 10, 20]"
      },
      {
        "input": "nums = [10000,9999,9998,9997,9996,9995,9994,9993,9992,9991,9990,9989,9988,9987,9986]",
        "output": "[9986, 9994, 9987, 9995, 9988, 9996, 9989, 9997, 9990, 9998, 9991, 9999, 9992, 10000, 9993]"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 6, 2, 7, 3, 8, 4, 9, 5]"
      },
      {
        "input": "nums = [5, 3, 8, 6, 11, 9, 14, 12, 17, 15, 20, 18, 23, 21, 26, 24, 29, 27, 32, 30]",
        "output": "[3, 18, 5, 20, 6, 21, 8, 23, 9, 24, 11, 26, 12, 27, 14, 29, 15, 30, 17, 32]"
      },
      {
        "input": "nums = [100000, 0, 50000, 25000, 75000, 12500, 87500, 31250, 68750]",
        "output": "[0, 68750, 12500, 75000, 25000, 87500, 31250, 100000, 50000]"
      },
      {
        "input": "nums = [1000,500,250,125,62,31,15,7,3,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9]",
        "output": "[-9, 1, -8, 3, -7, 7, -6, 15, -5, 31, -4, 62, -3, 125, -2, 250, -1, 500, 0, 1000]"
      },
      {
        "input": "nums = [50, 25, 75, 37, 62, 88, 43, 91, 56, 12]",
        "output": "[12, 56, 25, 62, 37, 75, 43, 88, 50, 91]"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3, 2, 3, 8, 4, 6]",
        "output": "[1, 5, 1, 5, 2, 5, 2, 6, 3, 6, 3, 7, 3, 8, 3, 9, 4, 9, 4, 9]"
      },
      {
        "input": "nums = [5, 15, 10, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[5, 30, 10, 35, 15, 40, 20, 45, 25, 50]"
      },
      {
        "input": "nums = [5, 15, 10, 20, 25, 12, 30, 18, 28]",
        "output": "[5, 20, 10, 25, 12, 28, 15, 30, 18]"
      },
      {
        "input": "nums = [8,6,4,2,0,1,3,5,7,9]",
        "output": "[0, 5, 1, 6, 2, 7, 3, 8, 4, 9]"
      },
      {
        "input": "nums = [100000, 1, 99999, 2, 99998, 3, 99997, 4, 99996, 5, 99995, 6, 99994, 7, 99993]",
        "output": "[1, 99994, 2, 99995, 3, 99996, 4, 99997, 5, 99998, 6, 99999, 7, 100000, 99993]"
      },
      {
        "input": "nums = [8,1,6,3,9,4,5,2,7]",
        "output": "[1, 6, 2, 7, 3, 8, 4, 9, 5]"
      },
      {
        "input": "nums = [42, 84, 21, 168, 105, 252, 175, 336, 245, 420, 315, 462, 368]",
        "output": "[21, 252, 42, 315, 84, 336, 105, 368, 168, 420, 175, 462, 245]"
      },
      {
        "input": "nums = [8192, 16384, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]",
        "output": "[1, 256, 2, 512, 4, 1024, 8, 2048, 16, 4096, 32, 8192, 64, 16384, 128]"
      },
      {
        "input": "nums = [1, 4, 2, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19, 10, 20]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15, 8]"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]",
        "output": "[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]"
      },
      {
        "input": "nums = [99999, 88888, 77777, 66666, 55555, 44444, 33333, 22222, 11111, 0]",
        "output": "[0, 55555, 11111, 66666, 22222, 77777, 33333, 88888, 44444, 99999]"
      },
      {
        "input": "nums = [34,7,23,32,5,62,32,2,78,1,45,67,89,12,34,56,78,90]",
        "output": "[1, 34, 2, 45, 5, 56, 7, 62, 12, 67, 23, 78, 32, 78, 32, 89, 34, 90]"
      },
      {
        "input": "nums = [101,203,305,407,509,611,713,815,917,1019]",
        "output": "[101, 611, 203, 713, 305, 815, 407, 917, 509, 1019]"
      },
      {
        "input": "nums = [15, 30, 45, 60, 75, 90, 105, 120, 135, 150]",
        "output": "[15, 90, 30, 105, 45, 120, 60, 135, 75, 150]"
      },
      {
        "input": "nums = [10, 5, 8, 2, 6, 4, 9, 1, 7, 3]",
        "output": "[1, 6, 2, 7, 3, 8, 4, 9, 5, 10]"
      },
      {
        "input": "nums = [1,5,3,9,7,11,13,15,17,19,21,23,25,27,29]",
        "output": "[1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15]"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5,9]",
        "output": "[1, 5, 1, 5, 2, 5, 3, 6, 3, 9, 4, 9]"
      },
      {
        "input": "nums = [314159,271828,161803,377987,141421,271828,161803,377987,141421,271828]",
        "output": "[141421, 271828, 141421, 271828, 161803, 314159, 161803, 377987, 271828, 377987]"
      },
      {
        "input": "nums = [15,25,35,45,55,65,75,85,95,105,115,125]",
        "output": "[15, 75, 25, 85, 35, 95, 45, 105, 55, 115, 65, 125]"
      },
      {
        "input": "nums = [99999, 0, 50000, 25000, 75000, 1, 99998]",
        "output": "[0, 75000, 1, 99998, 25000, 99999, 50000]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[5, 30, 10, 35, 15, 40, 20, 45, 25, 50]"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 11, 12, 13]",
        "output": "[1, 8, 2, 9, 3, 10, 4, 11, 5, 12, 6, 13, 7]"
      },
      {
        "input": "nums = [123,456,789,101112,131415,161718,192021,222324,252627,282930]",
        "output": "[123, 161718, 456, 192021, 789, 222324, 101112, 252627, 131415, 282930]"
      },
      {
        "input": "nums = [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "[85, 93, 86, 94, 87, 95, 88, 96, 89, 97, 90, 98, 91, 99, 92, 100]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40]",
        "output": "[5, 25, 10, 30, 15, 35, 20, 40]"
      },
      {
        "input": "nums = [99999,99998,99997,99996,99995,99994,99993,99992,99991,99990]",
        "output": "[99990, 99995, 99991, 99996, 99992, 99997, 99993, 99998, 99994, 99999]"
      },
      {
        "input": "nums = [42, 84, 21, 105, 52, 7, 14, 35, 28, 70]",
        "output": "[7, 42, 14, 52, 21, 70, 28, 84, 35, 105]"
      },
      {
        "input": "nums = [1,2,3,5,8,13,21,34,55,89]",
        "output": "[1, 13, 2, 21, 3, 34, 5, 55, 8, 89]"
      },
      {
        "input": "nums = [1000, 2000, 500, 3000, 1500, 4000, 2500, 5000, 3500]",
        "output": "[500, 3000, 1000, 3500, 1500, 4000, 2000, 5000, 2500]"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "[5, 55, 15, 65, 25, 75, 35, 85, 45, 95]"
      },
      {
        "input": "nums = [100000, 0, 50000, 25000, 75000, 125000, 37500, 62500, 187500, 93750]",
        "output": "[0, 75000, 25000, 93750, 37500, 100000, 50000, 125000, 62500, 187500]"
      },
      {
        "input": "nums = [100, 200, 150, 300, 250, 400, 350, 500, 450, 600]",
        "output": "[100, 350, 150, 400, 200, 450, 250, 500, 300, 600]"
      },
      {
        "input": "nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "[7, 17, 8, 18, 9, 19, 10, 20, 11, 21, 12, 22, 13, 23, 14, 24, 15, 25, 16]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19, 10, 20]"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]",
        "output": "[1, 256, 2, 512, 4, 1024, 8, 2048, 16, 4096, 32, 8192, 64, 16384, 128]"
      },
      {
        "input": "nums = [5,3,8,6,2,7,4,9,1,10]",
        "output": "[1, 6, 2, 7, 3, 8, 4, 9, 5, 10]"
      },
      {
        "input": "nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]",
        "output": "[90, 95, 91, 96, 92, 97, 93, 98, 94, 99]"
      },
      {
        "input": "nums = [10000, 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009]",
        "output": "[10000, 10005, 10001, 10006, 10002, 10007, 10003, 10008, 10004, 10009]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]",
        "output": "[2, 14, 4, 16, 6, 18, 8, 20, 10, 22, 12]"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "[2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30, 16]"
      },
      {
        "input": "nums = [50000, 25000, 75000, 12500, 87500, 31250, 68750, 15625, 93750]",
        "output": "[12500, 68750, 15625, 75000, 25000, 87500, 31250, 93750, 50000]"
      },
      {
        "input": "nums = [200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180]",
        "output": "[180, 191, 181, 192, 182, 193, 183, 194, 184, 195, 185, 196, 186, 197, 187, 198, 188, 199, 189, 200, 190]"
      },
      {
        "input": "nums = [8, 6, 4, 2, 0, 1, 3, 5, 7, 9, 11, 13]",
        "output": "[0, 6, 1, 7, 2, 8, 3, 9, 4, 11, 5, 13]"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10, 60, 70, 80, 90, 100, 110, 120]",
        "output": "[10, 70, 20, 80, 30, 90, 40, 100, 50, 110, 60, 120]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "[1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15, 8]"
      },
      {
        "input": "nums = [9, 1, 8, 2, 7, 3, 6, 4, 5]",
        "output": "[1, 6, 2, 7, 3, 8, 4, 9, 5]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 6, 2, 7, 3, 8, 4, 9, 5, 10]"
      },
      {
        "input": "nums = [30,20,10,40,50,60,70,80,90,100]",
        "output": "[10, 60, 20, 70, 30, 80, 40, 90, 50, 100]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0]",
        "output": "[0, 5, 1, 6, 2, 7, 3, 8, 4, 9]"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10,0,-10,-20,-30,-40]",
        "output": "[-40, 40, -30, 50, -20, 60, -10, 70, 0, 80, 10, 90, 20, 100, 30]"
      },
      {
        "input": "nums = [23, 45, 12, 67, 89, 34, 56, 78, 90, 11, 32, 54]",
        "output": "[11, 54, 12, 56, 23, 67, 32, 78, 34, 89, 45, 90]"
      },
      {
        "input": "nums = [2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]",
        "output": "[1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19, 10, 20]"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]",
        "output": "[1, 5, 1, 5, 2, 5, 3, 6, 3, 9, 4]"
      },
      {
        "input": "nums = [100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120]",
        "output": "[100, 111, 101, 112, 102, 113, 103, 114, 104, 115, 105, 116, 106, 117, 107, 118, 108, 119, 109, 120, 110]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "[10, 70, 20, 80, 30, 90, 40, 100, 50, 110, 60, 120]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "[10, 90, 20, 100, 30, 110, 40, 120, 50, 130, 60, 140, 70, 150, 80]"
      },
      {
        "input": "nums = [123456, 654321, 13579, 24680, 98765, 43210]",
        "output": "[13579, 98765, 24680, 123456, 43210, 654321]"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]",
        "output": "[-4, 6, -3, 7, -2, 8, -1, 9, 0, 10, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19, 10, 20]"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105]",
        "output": "[7, 63, 14, 70, 21, 77, 28, 84, 35, 91, 42, 98, 49, 105, 56]"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85]",
        "output": "[85, 93, 86, 94, 87, 95, 88, 96, 89, 97, 90, 98, 91, 99, 92, 100]"
      },
      {
        "input": "nums = [1, 2, 3, 6, 5, 4, 7, 8, 9]",
        "output": "[1, 6, 2, 7, 3, 8, 4, 9, 5]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300]",
        "output": "[100, 800, 200, 900, 300, 1000, 400, 1100, 500, 1200, 600, 1300, 700]"
      },
      {
        "input": "nums = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85]",
        "output": "[85, 93, 86, 94, 87, 95, 88, 96, 89, 97, 90, 98, 91, 99, 92]"
      },
      {
        "input": "nums = [8, 1, 6, 3, 5, 7, 2, 4, 9]",
        "output": "[1, 6, 2, 7, 3, 8, 4, 9, 5]"
      },
      {
        "input": "nums = [100, 1, 200, 2, 300, 3, 400, 4, 500, 5]",
        "output": "[1, 100, 2, 200, 3, 300, 4, 400, 5, 500]"
      },
      {
        "input": "nums = [99999, 1, 99998, 2, 99997, 3, 99996, 4, 99995]",
        "output": "[1, 99996, 2, 99997, 3, 99998, 4, 99999, 99995]"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 11, 12, 13, 14, 15]",
        "output": "[1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15, 8]"
      },
      {
        "input": "nums = [7,14,21,28,35,42,49,56,63,70,77,84,91,98,105,112,119]",
        "output": "[7, 70, 14, 77, 21, 84, 28, 91, 35, 98, 42, 105, 49, 112, 56, 119, 63]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[10, 60, 20, 70, 30, 80, 40, 90, 50, 100]"
      },
      {
        "input": "nums = [8, 1, 4, 9, 3, 7, 6, 2, 5, 10]",
        "output": "[1, 6, 2, 7, 3, 8, 4, 9, 5, 10]"
      },
      {
        "input": "nums = [5, 1, 9, 3, 7, 2, 8, 4, 6]",
        "output": "[1, 6, 2, 7, 3, 8, 4, 9, 5]"
      },
      {
        "input": "nums = [123, 456, 789, 101, 202, 303, 404, 505, 606, 707]",
        "output": "[101, 456, 123, 505, 202, 606, 303, 707, 404, 789]"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "[0, 5, 1, 6, 2, 7, 3, 8, 4, 9]"
      },
      {
        "input": "nums = [15, 10, 5, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75]",
        "output": "[5, 45, 10, 50, 15, 55, 20, 60, 25, 65, 30, 70, 35, 75, 40]"
      },
      {
        "input": "nums = [0, 100000, 50000, 25000, 75000, 125000, 37500, 62500, 87500, 162500]",
        "output": "[0, 75000, 25000, 87500, 37500, 100000, 50000, 125000, 62500, 162500]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]",
        "output": "[5, 35, 10, 40, 15, 45, 20, 50, 25, 55, 30]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "[100, 600, 200, 700, 300, 800, 400, 900, 500, 1000]"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]",
        "output": "[1000, 6000, 2000, 7000, 3000, 8000, 4000, 9000, 5000, 10000]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "[10, 90, 20, 100, 30, 110, 40, 120, 50, 130, 60, 140, 70, 150, 80]"
      },
      {
        "input": "nums = [100, 200, 150, 300, 250, 400, 350]",
        "output": "[100, 300, 150, 350, 200, 400, 250]"
      },
      {
        "input": "nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]",
        "output": "[7, 17, 8, 18, 9, 19, 10, 20, 11, 21, 12, 22, 13, 23, 14, 24, 15, 25, 16]"
      },
      {
        "input": "nums = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120]",
        "output": "[12, 72, 24, 84, 36, 96, 48, 108, 60, 120]"
      }
    ]
  },
  {
    "id": 1754,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Two Pointers",
      "String"
    ],
    "problemDescription": "You are given two strings word1 and word2. You want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:\n\nIf word1 is non-empty, append the first character in word1 to merge and delete it from word1.\n\n\t\nFor example, if word1 = \"abc\" and merge = \"dv\", then after choosing this operation, word1 = \"bc\" and merge = \"dva\".\n\n\nIf word2 is non-empty, append the first character in word2 to merge and delete it from word2.\n\t\nFor example, if word2 = \"abc\" and merge = \"\", then after choosing this operation, word2 = \"bc\" and merge = \"a\".\n\n\n\nReturn the lexicographically largest merge you can construct.\nA string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. For example, \"abcd\" is lexicographically larger than \"abcc\" because the first position they differ is at the fourth character, and d is greater than c.\n\u00a0\nExample 1:\n\nInput: word1 = \"cabaa\", word2 = \"bcaaa\"\nOutput: \"cbcabaaaaa\"\nExplanation: One way to get the lexicographically largest merge is:\n- Take from word1: merge = \"c\", word1 = \"abaa\", word2 = \"bcaaa\"\n- Take from word2: merge = \"cb\", word1 = \"abaa\", word2 = \"caaa\"\n- Take from word2: merge = \"cbc\", word1 = \"abaa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbca\", word1 = \"baa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbcab\", word1 = \"aa\", word2 = \"aaa\"\n- Append the remaining 5 a's from word1 and word2 at the end of merge.\n\nExample 2:\n\nInput: word1 = \"abcabc\", word2 = \"abdcaba\"\nOutput: \"abdcabcabcaba\"\n\n\u00a0\nConstraints:\n\n1 <= word1.length, word2.length <= 3000\nword1 and word2 consist only of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def largestMerge(self, word1: str, word2: str) -> str:\n        ",
    "testCases": [
      {
        "input": "word1 = \"lexicographically\", word2 = \"largestmerge\"",
        "output": "llexicogrargestmergeaphically"
      },
      {
        "input": "word1 = \"zyxw\", word2 = \"abcd\"",
        "output": "zyxwabcd"
      },
      {
        "input": "word1 = \"abcdabcd\", word2 = \"zyxwzyxw\"",
        "output": "zyxwzyxwabcdabcd"
      },
      {
        "input": "word1 = \"leetcode\", word2 = \"challenge\"",
        "output": "leetcodechallenge"
      },
      {
        "input": "word1 = \"aaaab\", word2 = \"aaabb\"",
        "output": "aaabbaaaab"
      },
      {
        "input": "word1 = \"lexicographic\", word2 = \"merge\"",
        "output": "mlexiergecographic"
      },
      {
        "input": "word1 = \"aaaa\", word2 = \"bbbb\"",
        "output": "bbbbaaaa"
      },
      {
        "input": "word1 = \"abcabc\", word2 = \"abdcaba\"",
        "output": "abdcabcabcaba"
      },
      {
        "input": "word1 = \"abc\", word2 = \"defghijklmnopqrstuvwxyz\"",
        "output": "defghijklmnopqrstuvwxyzabc"
      },
      {
        "input": "word1 = \"z\", word2 = \"z\"",
        "output": "zz"
      },
      {
        "input": "word1 = \"hello\", word2 = \"world\"",
        "output": "worlhellod"
      },
      {
        "input": "word1 = \"abcd\", word2 = \"zyxw\"",
        "output": "zyxwabcd"
      },
      {
        "input": "word1 = \"leetcode\", word2 = \"etco\"",
        "output": "leteetcodeco"
      },
      {
        "input": "word1 = \"xy\", word2 = \"xy\"",
        "output": "xyxy"
      },
      {
        "input": "word1 = \"cabaa\", word2 = \"bcaaa\"",
        "output": "cbcabaaaaa"
      },
      {
        "input": "word1 = \"aabbcc\", word2 = \"bbccdd\"",
        "output": "bbccddaabbcc"
      },
      {
        "input": "word1 = \"zzz\", word2 = \"zzz\"",
        "output": "zzzzzz"
      },
      {
        "input": "word1 = \"a\", word2 = \"b\"",
        "output": "ba"
      },
      {
        "input": "word1 = \"aaaaa\", word2 = \"bbbbb\"",
        "output": "bbbbbaaaaa"
      },
      {
        "input": "word1 = \"aabbcc\", word2 = \"abcabc\"",
        "output": "abcabcaabbcc"
      },
      {
        "input": "word1 = \"xyz\", word2 = \"xyz\"",
        "output": "xyzxyz"
      },
      {
        "input": "word1 = \"abcd\", word2 = \"efgh\"",
        "output": "efghabcd"
      },
      {
        "input": "word1 = \"abcd\", word2 = \"dcba\"",
        "output": "dcbabcda"
      },
      {
        "input": "word1 = \"same\", word2 = \"same\"",
        "output": "ssameame"
      },
      {
        "input": "word1 = \"abcdabcd\", word2 = \"abcde\"",
        "output": "abcdeabcdabcd"
      },
      {
        "input": "word1 = \"bca\", word2 = \"cab\"",
        "output": "cbcaba"
      },
      {
        "input": "word1 = \"abcdefghijklmnopqrstuvwxyz\", word2 = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "zyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyza"
      },
      {
        "input": "word1 = \"mississippi\", word2 = \"missouri\"",
        "output": "mmissourississippii"
      },
      {
        "input": "word1 = \"zzzzzzzz\", word2 = \"zzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzz"
      },
      {
        "input": "word1 = \"complexity\", word2 = \"similarity\"",
        "output": "similcomplexityarity"
      },
      {
        "input": "word1 = \"xyzzzzzzzzzzzzzzzz\", word2 = \"xyzzzzzzzzzzzzzz\"",
        "output": "xyzzzzzzzzzzzzzzzzxyzzzzzzzzzzzzzz"
      },
      {
        "input": "word1 = \"aaaabbbbccccdddd\", word2 = \"aaaabbbbccccdddd\"",
        "output": "aaaabbbbccccddddaaaabbbbccccdddd"
      },
      {
        "input": "word1 = \"zzzzzzz\", word2 = \"zzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzz"
      },
      {
        "input": "word1 = \"aaaaaaa\", word2 = \"bbbbbbb\"",
        "output": "bbbbbbbaaaaaaa"
      },
      {
        "input": "word1 = \"zzzzz\", word2 = \"zzzz\"",
        "output": "zzzzzzzzz"
      },
      {
        "input": "word1 = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", word2 = \"zzzyyxxwwvvuuttssrrqqponmlkjihgfedcbbaa\"",
        "output": "zzzyyxxwwvvuuttssrrqqponmlkjihgfedcbbaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzaa"
      },
      {
        "input": "word1 = \"zyxwvut\", word2 = \"utsrqponmlkjihgfedcba\"",
        "output": "zyxwvuuttsrqponmlkjihgfedcba"
      },
      {
        "input": "word1 = \"pqrstuvwxyz\", word2 = \"nopqrstuvwxyz\"",
        "output": "pqrstuvwxyznopqrstuvwxyz"
      },
      {
        "input": "word1 = \"zzzzzz\", word2 = \"zzzzzz\"",
        "output": "zzzzzzzzzzzz"
      },
      {
        "input": "word1 = \"aabbccddeeff\", word2 = \"feebdccbaa\"",
        "output": "feebdccbaabbccddeeffaa"
      },
      {
        "input": "word1 = \"cccccccc\", word2 = \"dddddddd\"",
        "output": "ddddddddcccccccc"
      },
      {
        "input": "word1 = \"a\", word2 = \"z\"",
        "output": "za"
      },
      {
        "input": "word1 = \"aabbcc\", word2 = \"aaabbb\"",
        "output": "aabbccaaabbb"
      },
      {
        "input": "word1 = \"abcdxyz\", word2 = \"xyzabcd\"",
        "output": "xyzabcdxyzabcd"
      },
      {
        "input": "word1 = \"python\", word2 = \"java\"",
        "output": "pytjhonava"
      },
      {
        "input": "word1 = \"abcdabcdabcd\", word2 = \"abcabcabc\"",
        "output": "abcdabcdabcdabcabcabc"
      },
      {
        "input": "word1 = \"sameprefix\", word2 = \"sameprefixsuffix\"",
        "output": "ssameprefixsuffixameprefix"
      },
      {
        "input": "word1 = \"abcdefghij\", word2 = \"jihgfedcba\"",
        "output": "jihgfedcbabcdefghija"
      },
      {
        "input": "word1 = \"onetwothreefour\", word2 = \"fivesixseveneightnine\"",
        "output": "onfivetwothresixseveneightnineefoure"
      },
      {
        "input": "word1 = \"racecar\", word2 = \"racecar\"",
        "output": "rracecaracecar"
      },
      {
        "input": "word1 = \"abcdabcdabcdabcdabcdabcd\", word2 = \"zyxwzyxwzyxwzyxwzyxwzyxw\"",
        "output": "zyxwzyxwzyxwzyxwzyxwzyxwabcdabcdabcdabcdabcdabcd"
      },
      {
        "input": "word1 = \"xyxzyzyzyx\", word2 = \"zyzyzyzyxz\"",
        "output": "zyzyzyzyxzxyxzyzyzyx"
      },
      {
        "input": "word1 = \"abacabadabacaba\", word2 = \"xyzxyzxyzxyzxyz\"",
        "output": "xyzxyzxyzxyzxyzabacabadabacaba"
      },
      {
        "input": "word1 = \"xyzz\", word2 = \"yxzz\"",
        "output": "yxzzxyzz"
      },
      {
        "input": "word1 = \"abcdabcdabcd\", word2 = \"zyxwzyxwzyxw\"",
        "output": "zyxwzyxwzyxwabcdabcdabcd"
      },
      {
        "input": "word1 = \"aabbccddeeff\", word2 = \"zzzzyyyxxx\"",
        "output": "zzzzyyyxxxaabbccddeeff"
      },
      {
        "input": "word1 = \"aabbccddeeff\", word2 = \"zzyyxxwwvvuu\"",
        "output": "zzyyxxwwvvuuaabbccddeeff"
      },
      {
        "input": "word1 = \"abcdefg\", word2 = \"hijklmnop\"",
        "output": "hijklmnopabcdefg"
      },
      {
        "input": "word1 = \"banana\", word2 = \"bandana\"",
        "output": "bbandanananaa"
      },
      {
        "input": "word1 = \"abcdabcdabcd\", word2 = \"dcbaabcdabcd\"",
        "output": "dcbabcdabcdabcdaabcdabcd"
      },
      {
        "input": "word1 = \"abracadabra\", word2 = \"alakazam\"",
        "output": "alakazamabracadabra"
      },
      {
        "input": "word1 = \"aaaabbbbcccc\", word2 = \"bbbbaaaacccc\"",
        "output": "bbbbaaaaccccaaaabbbbcccc"
      },
      {
        "input": "word1 = \"leetcode\", word2 = \"edocteel\"",
        "output": "leetedocteelcode"
      },
      {
        "input": "word1 = \"aaaaaaaabbbbbbbbcccccccc\", word2 = \"ccccccccbbbbbbbbbaaaaaaa\"",
        "output": "ccccccccbbbbbbbbbaaaaaaaabbbbbbbbccccccccaaaaaaa"
      },
      {
        "input": "word1 = \"abcdxyz\", word2 = \"zyxcba\"",
        "output": "zyxcbabcdxyza"
      },
      {
        "input": "word1 = \"ababababab\", word2 = \"bababababa\"",
        "output": "babababababababababa"
      },
      {
        "input": "word1 = \"equalequal\", word2 = \"equal\"",
        "output": "equequalequalal"
      },
      {
        "input": "word1 = \"abcabcabc\", word2 = \"abcabcabc\"",
        "output": "abcabcabcabcabcabc"
      },
      {
        "input": "word1 = \"zzzzzzyyyy\", word2 = \"yyyyzzzzzz\"",
        "output": "zzzzzzyyyyzzzzzzyyyy"
      },
      {
        "input": "word1 = \"racecar\", word2 = \"race\"",
        "output": "rracecarace"
      },
      {
        "input": "word1 = \"programming\", word2 = \"challenges\"",
        "output": "progrchammingallenges"
      },
      {
        "input": "word1 = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", word2 = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "zyxwvutsrqponmlkjihgfedcbaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzza"
      },
      {
        "input": "word1 = \"abcdxyz\", word2 = \"zyxwvut\"",
        "output": "zyxwvutabcdxyz"
      },
      {
        "input": "word1 = \"abacaxi\", word2 = \"abacax\"",
        "output": "abacaxiabacax"
      },
      {
        "input": "word1 = \"aaaaaabbbbb\", word2 = \"cccccdddddeeeee\"",
        "output": "cccccdddddeeeeeaaaaaabbbbb"
      },
      {
        "input": "word1 = \"abcdefg\", word2 = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "zyxwvutsrqponmlkjihgfedcbabcdefga"
      },
      {
        "input": "word1 = \"samecharacters\", word2 = \"samecharacters\"",
        "output": "ssamecharamecharactersacters"
      },
      {
        "input": "word1 = \"abababababab\", word2 = \"babababababa\"",
        "output": "babababababababababababa"
      },
      {
        "input": "word1 = \"aaaaab\", word2 = \"bbbaaa\"",
        "output": "bbbaaaaabaaa"
      },
      {
        "input": "word1 = \"aabbbccc\", word2 = \"aabbcc\"",
        "output": "aabbccaabbbccc"
      },
      {
        "input": "word1 = \"zzzzz\", word2 = \"zzzzzz\"",
        "output": "zzzzzzzzzzz"
      },
      {
        "input": "word1 = \"\", word2 = \"abc\"",
        "output": "abc"
      },
      {
        "input": "word1 = \"abcdefghijk\", word2 = \"abcdefghijl\"",
        "output": "abcdefghijlabcdefghijk"
      },
      {
        "input": "word1 = \"nestednested\", word2 = \"nested\"",
        "output": "nnestesteednestedd"
      },
      {
        "input": "word1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", word2 = \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"",
        "output": "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      },
      {
        "input": "word1 = \"abcde\", word2 = \"edcba\"",
        "output": "edcbabcdea"
      },
      {
        "input": "word1 = \"supercalifragilisticexpialidocious\", word2 = \"antidisestablishmentarianism\"",
        "output": "supercantidisestalifragilisticexpialidociousablishmentarianism"
      },
      {
        "input": "word1 = \"xyzz\", word2 = \"zzxy\"",
        "output": "zzxyzzxy"
      },
      {
        "input": "word1 = \"xyzz\", word2 = \"zzx\"",
        "output": "zzxyzzx"
      },
      {
        "input": "word1 = \"aabbccddeeff\", word2 = \"zzzzyyyxxxwwvvuuttssrrqqppoonnmmllkkjjiihghffeeddccbbaa\"",
        "output": "zzzzyyyxxxwwvvuuttssrrqqppoonnmmllkkjjiihghffeeddccbbaabbccddeeffaa"
      },
      {
        "input": "word1 = \"abababab\", word2 = \"babababa\"",
        "output": "babababababababa"
      },
      {
        "input": "word1 = \"xylophone\", word2 = \"xylophon\"",
        "output": "xyxyloplophonhone"
      },
      {
        "input": "word1 = \"abc\", word2 = \"\"",
        "output": "abc"
      },
      {
        "input": "word1 = \"abcdabcdabcdabcd\", word2 = \"zyxwzyxwzyxwzyxw\"",
        "output": "zyxwzyxwzyxwzyxwabcdabcdabcdabcd"
      },
      {
        "input": "word1 = \"zzzz\", word2 = \"zzzz\"",
        "output": "zzzzzzzz"
      },
      {
        "input": "word1 = \"longwordone\", word2 = \"longwordtwo\"",
        "output": "lonlongworgwordtwodone"
      },
      {
        "input": "word1 = \"aaaaaaaaaaaa\", word2 = \"bbbbbbbbbbba\"",
        "output": "bbbbbbbbbbbaaaaaaaaaaaaa"
      },
      {
        "input": "word1 = \"abcdabcdabcd\", word2 = \"dcba\"",
        "output": "dcbabcdabcdabcda"
      },
      {
        "input": "word1 = \"aaaabbbbcccc\", word2 = \"ddddccccbbbaaaa\"",
        "output": "ddddccccbbbaaaabbbbccccaaaa"
      },
      {
        "input": "word1 = \"leetcode\", word2 = \"contest\"",
        "output": "leetcontestcode"
      },
      {
        "input": "word1 = \"pneumonoultramicroscopicsilicovolcanoconiosis\", word2 = \"zoology\"",
        "output": "zpoonlogyeumonoultramicroscopicsilicovolcanoconiosis"
      },
      {
        "input": "word1 = \"abcdabcdb\", word2 = \"abcdabcdb\"",
        "output": "abcdabcdbabcdabcdb"
      },
      {
        "input": "word1 = \"amazing\", word2 = \"algorithm\"",
        "output": "amazingalgorithm"
      },
      {
        "input": "word1 = \"b\", word2 = \"a\"",
        "output": "ba"
      },
      {
        "input": "word1 = \"qwerqwerqwer\", word2 = \"qwertyuiop\"",
        "output": "qwqwertyuioperqwerqwer"
      },
      {
        "input": "word1 = \"onesmallstring\", word2 = \"averylongstringwithmanycharactersandvariouslengthsandcombinations\"",
        "output": "onesmaverylongstringwithmanycharallstringactersandvariouslengthsandcombinations"
      },
      {
        "input": "word1 = \"banana\", word2 = \"apple\"",
        "output": "bappleanana"
      },
      {
        "input": "word1 = \"abcde\", word2 = \"fghij\"",
        "output": "fghijabcde"
      },
      {
        "input": "word1 = \"zyxwvutsrqponmlkjihgfedcba\", word2 = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "zyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyza"
      },
      {
        "input": "word1 = \"zzyzxzyzxzy\", word2 = \"xyxyxyxyxyx\"",
        "output": "zzyzxzyzxzyxyxyxyxyxyx"
      },
      {
        "input": "word1 = \"aabbcc\", word2 = \"bbccaa\"",
        "output": "bbccaabbccaa"
      },
      {
        "input": "word1 = \"appleapple\", word2 = \"banana\"",
        "output": "bappleappleanana"
      },
      {
        "input": "word1 = \"abcdef\", word2 = \"fghijk\"",
        "output": "fghijkabcdef"
      },
      {
        "input": "word1 = \"zzzzyyyyxxx\", word2 = \"zzzyyyyxx\"",
        "output": "zzzzzzzyyyyyyyyxxxxx"
      },
      {
        "input": "word1 = \"aaaaaabbbb\", word2 = \"bbbbbaaaa\"",
        "output": "bbbbbaaaaaabbbbaaaa"
      },
      {
        "input": "word1 = \"aaaaaa\", word2 = \"bbbbbbbb\"",
        "output": "bbbbbbbbaaaaaa"
      },
      {
        "input": "word1 = \"lexicographically\", word2 = \"mergeable\"",
        "output": "mlexiergecographicallyable"
      },
      {
        "input": "word1 = \"abcabcabc\", word2 = \"cbacbacba\"",
        "output": "cbacbacbabcabcabca"
      },
      {
        "input": "word1 = \"samestart\", word2 = \"samestart\"",
        "output": "ssamestartamestart"
      },
      {
        "input": "word1 = \"zzzzzzzzzz\", word2 = \"zzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "word1 = \"abcdexyz\", word2 = \"zyxwvuts\"",
        "output": "zyxwvutsabcdexyz"
      },
      {
        "input": "word1 = \"abcdefg\", word2 = \"ghijklm\"",
        "output": "ghijklmabcdefg"
      },
      {
        "input": "word1 = \"longwordone\", word2 = \"evenlongerwordtwo\"",
        "output": "longworevenlongerwordtwodone"
      },
      {
        "input": "word1 = \"aaaab\", word2 = \"aaabaaa\"",
        "output": "aaabaaaabaaa"
      },
      {
        "input": "word1 = \"abcdabcd\", word2 = \"dcbaabcd\"",
        "output": "dcbabcdabcdaabcd"
      },
      {
        "input": "word1 = \"pneumonoultramicroscopicsilicovolcanoconiosis\", word2 = \"supercalifragilisticexpialidocious\"",
        "output": "suppneumonoultrercamicroscopicsilicovolcanoconiosisalifragilisticexpialidocious"
      },
      {
        "input": "word1 = \"aabbccddeeff\", word2 = \"aabbccddeegf\"",
        "output": "aabbccddeegfaabbccddeeff"
      },
      {
        "input": "word1 = \"zyxzyxzyx\", word2 = \"zyxzyxzyx\"",
        "output": "zzyyxzyxzyxzyxzyxx"
      },
      {
        "input": "word1 = \"overlapover\", word2 = \"overlap\"",
        "output": "ovoverlerlapoverap"
      },
      {
        "input": "word1 = \"aebcdefghijklmnopqrstuvwxyz\", word2 = \"zxcvbnmlkjihgfedcbaeb\"",
        "output": "zxcvbnmlkjihgfedcbaebcdefghijklmnopqrstuvwxyzaeb"
      },
      {
        "input": "word1 = \"abcdef\", word2 = \"fedcba\"",
        "output": "fedcbabcdefa"
      },
      {
        "input": "word1 = \"aaaabbbbcccc\", word2 = \"ddddeeeeffff\"",
        "output": "ddddeeeeffffaaaabbbbcccc"
      },
      {
        "input": "word1 = \"hellohellohello\", word2 = \"worldworld\"",
        "output": "worlhellohellohellodworld"
      },
      {
        "input": "word1 = \"abcabcabcabc\", word2 = \"abcabc\"",
        "output": "abcabcabcabcabcabc"
      },
      {
        "input": "word1 = \"zzzz\", word2 = \"zzz\"",
        "output": "zzzzzzz"
      },
      {
        "input": "word1 = \"xyzzzzzzzzzzzz\", word2 = \"yyyyyyyyyyyyyy\"",
        "output": "yyyyyyyyyyyyyyxyzzzzzzzzzzzz"
      },
      {
        "input": "word1 = \"aabaaa\", word2 = \"baabaa\"",
        "output": "baabaabaaaaa"
      },
      {
        "input": "word1 = \"aaaaaaaaaabbbbbbbbbbcccccccccc\", word2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzaaaaaaaaaabbbbbbbbbbcccccccccc"
      }
    ]
  },
  {
    "id": 1315,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return 0.\nA grandparent of a node is the parent of its parent if it exists.\n\u00a0\nExample 1:\n\n\nInput: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\nOutput: 18\nExplanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.\n\nExample 2:\n\n\nInput: root = [1]\nOutput: 0\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n1 <= Node.val <= 100\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumEvenGrandparent(self, root: Optional[TreeNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [8,4,5,0,1,null,null,null,null,7]",
        "output": "8"
      },
      {
        "input": "root = [4,2,7,1,3,6,9,8,null,null,null,null,5]",
        "output": "27"
      },
      {
        "input": "root = [4,2,5,1,3,null,7,null,null,null,null,null,9]",
        "output": "11"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "38"
      },
      {
        "input": "root = [2,1,3,null,null,4,null,null,null,5]",
        "output": "4"
      },
      {
        "input": "root = [5,14,3,null,10,null,7]",
        "output": "0"
      },
      {
        "input": "root = [2,1,3,null,null,4,5,6,7]",
        "output": "9"
      },
      {
        "input": "root = [5,3,1,4,null,2,6,8,null,null,null,null,7]",
        "output": "0"
      },
      {
        "input": "root = [2,null,3,null,4,null,5]",
        "output": "4"
      },
      {
        "input": "root = [11,10,12,9,8,7,6,5,4,3,2,1]",
        "output": "15"
      },
      {
        "input": "root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
        "output": "18"
      },
      {
        "input": "root = [4,2,7,1,3,6,9]",
        "output": "19"
      },
      {
        "input": "root = [6,11,1,null,null,2,null,null,3,null,null,4,null,null,5,null,null,6,null,null,7,null,null,8,null,null,9,null,null,10,null,null,11,null,null,12,null,null,13,null,null,14,null,null,15,null,null,16,null,null,17,null,null,18,null,null,19,null,null,20,null,null,21,null,null,22,null,null,23,null,null,24,null,null,25,null,null,26,null,null,27,null,null,28,null,null,29,null,null,30]",
        "output": "2"
      },
      {
        "input": "root = [1]",
        "output": "0"
      },
      {
        "input": "root = [2,3,4,5,6,7,8]",
        "output": "26"
      },
      {
        "input": "root = [5,3,7,2,4,6,8,1,null,null,null,null,null,null,9]",
        "output": "0"
      },
      {
        "input": "root = [3,null,9,6,null,10,11,2,null,null,null,8,null,7]",
        "output": "17"
      },
      {
        "input": "root = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45]",
        "output": "114"
      },
      {
        "input": "root = [6,3,8,1,4,7,9,0,5,null,null,null,10,null,null,null,null,11,null,null,12]",
        "output": "31"
      },
      {
        "input": "root = [24,12,16,6,10,8,20,3,9,7,11,5,15,1,13,null,null,null,null,null,null,null,null,null,4,null,null,null,14,17,18,19,null,21,22,23]",
        "output": "161"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,40,60,90,110,140,160,190,5,15,30,45,55,65,80,100,115,130,135,155,165,180,195]",
        "output": "1200"
      },
      {
        "input": "root = [18,4,5,2,9,10,6,null,null,1,3,null,null,7,8,null,null,11,12,13,14,15,16,17]",
        "output": "89"
      },
      {
        "input": "root = [20,12,13,8,11,14,15,null,null,null,10,null,9,16,17,18,19,null,null,null,null,21,22,null,23]",
        "output": "81"
      },
      {
        "input": "root = [8, 4, 12, 2, 6, 10, 14, 1, 3, 5, 7, 9, 11, 13, 15]",
        "output": "96"
      },
      {
        "input": "root = [5,3,1,6,2,null,8,4,null,null,null,7,9]",
        "output": "0"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "2568"
      },
      {
        "input": "root = [16,12,20,8,14,18,22,4,10,13,15,17,19,21,23]",
        "output": "184"
      },
      {
        "input": "root = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]",
        "output": "296"
      },
      {
        "input": "root = [14,11,8,6,12,9,5,2,4,13,7,3,10,null,null,null,null,null,null,null,1,null,null,15,16,17,null,null,null,null,18,19,20,21]",
        "output": "67"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,18,22,35,42,48,55,3,7,9,11,13,17,19,21,23,37,38,41,43,47,49,53,57,59]",
        "output": "551"
      },
      {
        "input": "root = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "1140"
      },
      {
        "input": "root = [13,11,17,7,3,16,20,1,5,9,15,12,null,null,null,4,6,8,10,14,null,18,19,21,2,null,null,null,null,null,null,null,null,null,null,null]",
        "output": "23"
      },
      {
        "input": "root = [14, 7, 27, 4, 9, 20, 35, 2, 6, 8, 11, 16, 22, 29, 42]",
        "output": "68"
      },
      {
        "input": "root = [18,9,21,15,5,10,3,7,null,6,null,8,2,null,4,null,null,1,null,null,null,11]",
        "output": "44"
      },
      {
        "input": "root = [10,5,null,3,7,null,null,2,null,6,8,1,null,null,null,4,9,10,null,null,null,null,11,12,13,14,15]",
        "output": "60"
      },
      {
        "input": "root = [50, 25, 75, 12, 37, 63, 90, 6, 20, 30, 40, 55, 65, 85, 95]",
        "output": "202"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,7,9,11,13,17,19,21,23,27,29,31,33,37,39,41,43,45,47,49]",
        "output": "178"
      },
      {
        "input": "root = [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]",
        "output": "666"
      },
      {
        "input": "root = [6,10,14,4,8,12,16,2,6,10,14,18,22,26,30,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]",
        "output": "424"
      },
      {
        "input": "root = [22,6,18,2,14,16,20,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41]",
        "output": "493"
      },
      {
        "input": "root = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "228"
      },
      {
        "input": "root = [18, 3, 20, null, 5, 15, 25, null, null, null, null, 13, null, 22]",
        "output": "58"
      },
      {
        "input": "root = [6,2,12,1,5,9,15,0,null,null,3,7,11,13,19,null,null,null,4,6,8,10,12,14,16,18,20]",
        "output": "83"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,5,11,16,24,29,31,34,41]",
        "output": "0"
      },
      {
        "input": "root = [10,4,6,8,2,null,5,null,null,null,null,1,3,7,9,11,13,15,17,19]",
        "output": "19"
      },
      {
        "input": "root = [6,2,8,0,4,7,9,null,null,3,5]",
        "output": "28"
      },
      {
        "input": "root = [5, 3, 8, 2, 4, 7, 9, null, null, 6, null, null, null, null, 10]",
        "output": "10"
      },
      {
        "input": "root = [30,10,50,5,15,40,60,3,7,13,17,35,45,55,65]",
        "output": "360"
      },
      {
        "input": "root = [32, 16, 48, 8, 24, 36, 56, 4, 12, 20, 28, 32, 40, 52, 60]",
        "output": "372"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15]",
        "output": "96"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,80,110,140,160,190,5,15,22,35,55,65,72,78,85,95,105,135,137,145,155,172,180,195,200]",
        "output": "1755"
      },
      {
        "input": "root = [8,3,6,1,5,7,9,2,4,6,8,10,12,14,16]",
        "output": "74"
      },
      {
        "input": "root = [40, 20, 60, 10, 30, 50, 70, 5, 15, 25, 35, 45, 55, 65, 75]",
        "output": "480"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,null,null,6]",
        "output": "28"
      },
      {
        "input": "root = [15,5,6,3,1,null,null,2,4,null,null,null,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]",
        "output": "279"
      },
      {
        "input": "root = [10, 5, 15, 3, 7, 12, 20, 2, 4, 6, 8, 11, 13, 18, 22]",
        "output": "42"
      },
      {
        "input": "root = [8,6,5,2,4,9,7,null,null,1,null,null,3,10,null,null,11,12,13,null,null,14,15,null,16]",
        "output": "34"
      },
      {
        "input": "root = [3, 9, 20, null, null, 15, 7, null, null, 25, 35, null, null, 45, 55]",
        "output": "60"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,null,null,30,60,90,110,140,180,20,40,55,65,85,95,105,115,130,145,160,185,195,null,null,22,28,35,45,58,68,72,82,92,102,112,118,128,135,148,155,165,175,188,198]",
        "output": "3331"
      },
      {
        "input": "root = [50,25,75,10,40,60,90,5,15,30,45,55,65,70,100,2,6,12,20,35,43,53,57,63,67,73,77,85,95,105]",
        "output": "993"
      },
      {
        "input": "root = [10,4,15,1,null,11,19,6,null,null,12,null,null,5]",
        "output": "37"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,13,17,23,27,33,37,1,4,6,8,12,14,16,18,22,24,26,28,32,34,36,38,39]",
        "output": "240"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "210"
      },
      {
        "input": "root = [20, 10, 30, 5, 15, 25, 35, 2, 7, 13, 18, 23, 28, 33, 38]",
        "output": "242"
      },
      {
        "input": "root = [8,5,10,3,6,null,11,1,null,4,7,null,14]",
        "output": "34"
      },
      {
        "input": "root = [4,2,7,1,3,6,9,9,null,1,4,null,null,null,5,6,null,null,8,10]",
        "output": "33"
      },
      {
        "input": "root = [20, 10, 30, 5, 15, 25, 35, 1, 3, 7, 13, 19, 23, 29, 37]",
        "output": "212"
      },
      {
        "input": "root = [10,5,15,3,7,12,20,1,4,6,8,11,14,17,22,0,null,null,null,null,null,null,9,null,null,13,null,null,16,null,null,18,null,null,21,null,null]",
        "output": "92"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "108"
      },
      {
        "input": "root = [22, 11, 44, 7, 33, 55, 66, 1, 5, 9, 27, 50, 70, 100, 200]",
        "output": "581"
      },
      {
        "input": "root = [2,1,5,2,3,4,8,5,6,7,9,10,11,12,13]",
        "output": "17"
      },
      {
        "input": "root = [6, 2, 10, 1, 3, 7, 13, null, 4, null, 5, 8, 12, 14, 16]",
        "output": "83"
      },
      {
        "input": "root = [46,23,69,11,35,55,82,5,19,30,40,50,60,70,80,2,7,14,21,27,32,39,45,47,53,57,61,67,73,77,81,1,3,8,12,20,26,31,37,43,49,52,58,62,66,72,76,83,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]",
        "output": "1042"
      },
      {
        "input": "root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "108"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,40,60,90,110,140,160,190]",
        "output": "1200"
      },
      {
        "input": "root = [32,16,48,8,24,36,60,4,12,20,28,32,44,52,56,2,6,10,14,18,22,26,30,34,46,50,54,58,null,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,7,null,null,null,11,null,null,null,null,null,null,null,null,null,15,null,null,null,null,null,null,null,null,null,19,null,null,null,null,null,null,null,null,null]",
        "output": "782"
      },
      {
        "input": "root = [4,2,5,1,3,null,6,0,8,null,null,7,9]",
        "output": "18"
      },
      {
        "input": "root = [17,5,10,null,null,8,9,null,null,3,null,null,13]",
        "output": "3"
      },
      {
        "input": "root = [50,25,75,12,37,60,82,6,20,null,40,55,70,10,5,15,30,45,65,77,null,null,null,null,58]",
        "output": "404"
      },
      {
        "input": "root = [16, 8, 24, 4, 12, 20, 28, 2, 6, 10, 14, 18, 22, 26, 30]",
        "output": "192"
      },
      {
        "input": "root = [24,12,25,6,18,21,29,3,9,15,null,19,23,27,31,1,5,7,11,13,null,17,null,null,22,null,26,null,30,2,4,8,10,14,16,null,null,null,null,null,20,null,null,25,null,null,28,null,null,32]",
        "output": "138"
      },
      {
        "input": "root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "31"
      },
      {
        "input": "root = [2,1,3,null,null,4,null,null,null,5,null,null,null,6,null,null,null,7,null,null,null,8,null,null,null,9,null,null,null,10]",
        "output": "4"
      },
      {
        "input": "root = [6, 7, 8, 2, 7, 1, 3, 9, null, 1, 4, 8, null, null, null, 5, 6, 7]",
        "output": "32"
      },
      {
        "input": "root = [14, 8, 22, 4, 12, 16, 28, 2, 6, 10, 14, 18, 22, 26, 30]",
        "output": "188"
      },
      {
        "input": "root = [7,5,9,3,6,8,10,2,4,null,null,null,null,null,null]",
        "output": "0"
      },
      {
        "input": "root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "38"
      },
      {
        "input": "root = [22,17,30,10,21,28,32,5,14,19,29,null,35,3,null,null,12,null,18,null,null,null,null,null,24,26,31,33,36]",
        "output": "240"
      }
    ]
  },
  {
    "id": 1319,
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "problemDescription": "There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.\nYou are given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.\nReturn the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.\n\u00a0\nExample 1:\n\n\nInput: n = 4, connections = [[0,1],[0,2],[1,2]]\nOutput: 1\nExplanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.\n\nExample 2:\n\n\nInput: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]\nOutput: 2\n\nExample 3:\n\nInput: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]\nOutput: -1\nExplanation: There are not enough cables.\n\n\u00a0\nConstraints:\n\n1 <= n <= 105\n1 <= connections.length <= min(n * (n - 1) / 2, 105)\nconnections[i].length == 2\n0 <= ai, bi < n\nai != bi\nThere are no repeated connections.\nNo two computers are connected by more than one cable.\n\n",
    "starterCode": "class Solution:\n    def makeConnected(self, n: int, connections: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 10, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "0"
      },
      {
        "input": "n = 5, connections = [[0,1],[1,2],[3,4]]",
        "output": "-1"
      },
      {
        "input": "n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]",
        "output": "-1"
      },
      {
        "input": "n = 5, connections = [[0,1],[2,3]]",
        "output": "-1"
      },
      {
        "input": "n = 3, connections = [[0,1],[1,2]]",
        "output": "0"
      },
      {
        "input": "n = 7, connections = [[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]]",
        "output": "3"
      },
      {
        "input": "n = 5, connections = [[0,1],[0,2],[3,4]]",
        "output": "-1"
      },
      {
        "input": "n = 2, connections = [[0,1]]",
        "output": "0"
      },
      {
        "input": "n = 4, connections = [[0,1],[0,2],[1,2]]",
        "output": "1"
      },
      {
        "input": "n = 10, connections = [[0,1],[2,3],[4,5],[6,7],[8,9]]",
        "output": "-1"
      },
      {
        "input": "n = 1, connections = []",
        "output": "0"
      },
      {
        "input": "n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]",
        "output": "2"
      },
      {
        "input": "n = 7, connections = [[0,1],[0,2],[1,2],[3,4],[5,6]]",
        "output": "-1"
      },
      {
        "input": "n = 10, connections = [[0,1],[0,2],[1,2],[3,4],[4,5],[5,6],[7,8],[8,9]]",
        "output": "-1"
      },
      {
        "input": "n = 7, connections = [[0,1],[0,2],[1,2],[3,4],[4,5],[5,6]]",
        "output": "1"
      },
      {
        "input": "n = 15, connections = [[0,1],[1,2],[3,4],[4,5],[5,6],[7,8],[8,9],[9,10],[11,12],[12,13],[13,14]]",
        "output": "-1"
      },
      {
        "input": "n = 20, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]]",
        "output": "0"
      },
      {
        "input": "n = 12, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[6,7],[7,8],[8,9],[9,6],[0,6],[1,7],[2,8],[3,9],[4,0]]",
        "output": "0"
      },
      {
        "input": "n = 15, connections = [[0,1],[1,2],[2,3],[3,4],[4,0],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,5]]",
        "output": "1"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[3,4],[4,5],[6,7],[7,8],[8,9]]",
        "output": "-1"
      },
      {
        "input": "n = 9, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[0,8]]",
        "output": "0"
      },
      {
        "input": "n = 14, connections = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[13,0],[1,12],[2,11],[3,10],[4,9],[5,8],[6,7]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]]",
        "output": "0"
      },
      {
        "input": "n = 8, connections = [[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,4]]",
        "output": "1"
      },
      {
        "input": "n = 20, connections = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[0,2],[1,3],[4,6],[5,7],[8,10],[9,11],[12,14],[13,15],[16,18],[17,19]]",
        "output": "4"
      },
      {
        "input": "n = 11, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "-1"
      },
      {
        "input": "n = 12, connections = [[0,1],[0,2],[1,2],[3,4],[4,5],[5,3],[6,7],[7,8],[8,9],[9,10],[10,6],[11,10]]",
        "output": "2"
      },
      {
        "input": "n = 12, connections = [[0,1],[0,2],[1,2],[3,4],[3,5],[4,5],[6,7],[6,8],[7,8],[9,10],[9,11],[10,11]]",
        "output": "3"
      },
      {
        "input": "n = 13, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]]",
        "output": "0"
      },
      {
        "input": "n = 100, connections = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[20,21],[22,23],[24,25],[26,27],[28,29],[30,31],[32,33],[34,35],[36,37],[38,39],[40,41],[42,43],[44,45],[46,47],[48,49],[50,51],[52,53],[54,55],[56,57],[58,59],[60,61],[62,63],[64,65],[66,67],[68,69],[70,71],[72,73],[74,75],[76,77],[78,79],[80,81],[82,83],[84,85],[86,87],[88,89],[90,91],[92,93],[94,95],[96,97],[98,99]]",
        "output": "-1"
      },
      {
        "input": "n = 15, connections = [[0,1],[0,2],[1,2],[3,4],[3,5],[4,5],[6,7],[6,8],[7,8],[9,10],[9,11],[10,11],[12,13],[12,14],[13,14]]",
        "output": "4"
      },
      {
        "input": "n = 12, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,0],[0,5],[5,10],[10,3],[3,8],[8,1]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[6,7],[7,8],[8,9],[9,6]]",
        "output": "1"
      },
      {
        "input": "n = 8, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0]]",
        "output": "0"
      },
      {
        "input": "n = 15, connections = [[0,1],[0,2],[0,3],[1,2],[1,3],[2,3],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
        "output": "1"
      },
      {
        "input": "n = 30, connections = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[19,21],[20,22],[21,23],[22,24],[23,25],[24,26],[25,27],[26,28],[27,29],[0,29]]",
        "output": "0"
      },
      {
        "input": "n = 30, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29]]",
        "output": "0"
      },
      {
        "input": "n = 12, connections = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11]]",
        "output": "-1"
      },
      {
        "input": "n = 25, connections = [[0,1],[0,2],[0,3],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
        "output": "-1"
      },
      {
        "input": "n = 20, connections = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[0,2],[0,3],[1,2],[1,3],[2,3],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7],[8,9]]",
        "output": "2"
      },
      {
        "input": "n = 10, connections = [[0,1],[0,2],[1,2],[3,4],[5,6],[7,8],[8,9]]",
        "output": "-1"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,9],[1,3],[2,5],[4,7],[6,8]]",
        "output": "0"
      },
      {
        "input": "n = 12, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[0,11]]",
        "output": "0"
      },
      {
        "input": "n = 7, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "0"
      },
      {
        "input": "n = 15, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[0,14]]",
        "output": "0"
      },
      {
        "input": "n = 11, connections = [[0,1],[0,2],[0,3],[1,2],[2,3],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "1"
      },
      {
        "input": "n = 20, connections = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19]]",
        "output": "-1"
      },
      {
        "input": "n = 15, connections = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14]]",
        "output": "0"
      },
      {
        "input": "n = 25, connections = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[1,7],[1,8],[2,9],[2,10],[2,11],[2,12],[3,13],[3,14],[3,15],[3,16],[4,17],[4,18],[4,19],[4,20],[5,21],[6,22],[7,23],[8,24]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "1"
      },
      {
        "input": "n = 8, connections = [[0,1],[1,2],[2,3],[4,5],[5,6],[6,7]]",
        "output": "-1"
      },
      {
        "input": "n = 14, connections = [[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,4],[7,8],[8,9],[9,10],[10,11],[11,12],[12,7],[13,13]]",
        "output": "3"
      },
      {
        "input": "n = 14, connections = [[0,1],[0,2],[0,3],[1,2],[1,3],[2,3],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]]",
        "output": "1"
      },
      {
        "input": "n = 8, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "0"
      },
      {
        "input": "n = 12, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[0,2],[1,3]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[0,2],[0,3],[1,2],[1,3],[2,3],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "1"
      },
      {
        "input": "n = 16, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,0],[0,7],[7,14],[14,6],[6,13],[13,5],[5,12],[12,4],[4,11],[11,3],[3,10],[10,2],[2,9],[9,1],[1,8]]",
        "output": "0"
      },
      {
        "input": "n = 8, connections = [[0,1],[1,2],[2,3],[0,4],[4,5],[5,6],[6,7],[7,0],[0,3],[3,6],[2,5]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[0,2],[1,2],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,3]]",
        "output": "1"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,9],[1,8],[2,7],[3,6],[4,5]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[3,4],[4,5],[5,6],[7,8],[8,9]]",
        "output": "-1"
      },
      {
        "input": "n = 12, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,0]]",
        "output": "0"
      },
      {
        "input": "n = 15, connections = [[0,1],[0,2],[0,3],[0,4],[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14]]",
        "output": "0"
      },
      {
        "input": "n = 7, connections = [[0,1],[1,2],[3,4],[4,5]]",
        "output": "-1"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,9]]",
        "output": "0"
      },
      {
        "input": "n = 15, connections = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,14]]",
        "output": "0"
      },
      {
        "input": "n = 30, connections = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[20,21],[22,23],[24,25],[26,27],[28,29]]",
        "output": "-1"
      },
      {
        "input": "n = 20, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,0]]",
        "output": "0"
      },
      {
        "input": "n = 30, connections = [[0,1],[0,2],[0,3],[0,4],[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15],[12,16],[13,17],[14,18],[15,19],[16,20],[17,21],[18,22],[19,23],[20,24],[21,25],[22,26],[23,27],[24,28],[25,29]]",
        "output": "0"
      },
      {
        "input": "n = 20, connections = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[2,3],[3,4],[5,6],[6,7],[7,8],[8,9]]",
        "output": "-1"
      },
      {
        "input": "n = 5, connections = [[0,1],[1,2],[2,3],[3,4],[4,0],[0,2],[1,3],[2,4],[3,0],[4,1]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0],[0,5],[5,1]]",
        "output": "0"
      },
      {
        "input": "n = 20, connections = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[0,19],[1,18],[2,17],[3,16],[4,15],[5,14],[6,13],[7,12],[8,11],[9,10]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[1,2],[2,3],[3,4],[4,0],[5,6],[6,7],[7,8],[8,9]]",
        "output": "1"
      },
      {
        "input": "n = 16, connections = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15]]",
        "output": "-1"
      },
      {
        "input": "n = 9, connections = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[0,8],[1,7],[2,5],[3,6]]",
        "output": "0"
      },
      {
        "input": "n = 9, connections = [[0,1],[0,2],[1,2],[3,4],[4,5],[5,6],[7,8]]",
        "output": "-1"
      },
      {
        "input": "n = 15, connections = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]]",
        "output": "0"
      },
      {
        "input": "n = 15, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
        "output": "0"
      },
      {
        "input": "n = 25, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24]]",
        "output": "0"
      },
      {
        "input": "n = 20, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[0,5],[1,6],[2,7],[3,8],[4,9]]",
        "output": "0"
      },
      {
        "input": "n = 10, connections = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9]]",
        "output": "0"
      },
      {
        "input": "n = 7, connections = [[0,1],[1,2],[2,0],[3,4],[4,5],[5,6]]",
        "output": "1"
      },
      {
        "input": "n = 20, connections = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[0,3],[2,5],[4,7],[6,9],[8,11],[10,13],[12,15],[14,17],[16,19]]",
        "output": "0"
      },
      {
        "input": "n = 12, connections = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11]]",
        "output": "0"
      }
    ]
  },
  {
    "id": 1524,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "problemDescription": "Given an array of integers arr, return the number of subarrays with an odd sum.\nSince the answer can be very large, return it modulo 109 + 7.\n\u00a0\nExample 1:\n\nInput: arr = [1,3,5]\nOutput: 4\nExplanation: All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\nOdd sums are [1,9,3,5] so the answer is 4.\n\nExample 2:\n\nInput: arr = [2,4,6]\nOutput: 0\nExplanation: All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\nAll sub-arrays have even sum and the answer is 0.\n\nExample 3:\n\nInput: arr = [1,2,3,4,5,6,7]\nOutput: 16\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 105\n1 <= arr[i] <= 100\n\n",
    "starterCode": "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "arr = [2,4,6,8,10]",
        "output": "0"
      },
      {
        "input": "arr = [100,100,100,100,100]",
        "output": "0"
      },
      {
        "input": "arr = [50,50,50,50,50]",
        "output": "0"
      },
      {
        "input": "arr = [1,2,3]",
        "output": "4"
      },
      {
        "input": "arr = [2,2,2,2,2]",
        "output": "0"
      },
      {
        "input": "arr = [1,2]",
        "output": "2"
      },
      {
        "input": "arr = [99,100,101]",
        "output": "4"
      },
      {
        "input": "arr = [100,100,100]",
        "output": "0"
      },
      {
        "input": "arr = [2,4,6]",
        "output": "0"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7]",
        "output": "16"
      },
      {
        "input": "arr = [1]",
        "output": "1"
      },
      {
        "input": "arr = [1,1,1,1,1]",
        "output": "9"
      },
      {
        "input": "arr = [100,99,98,97,96]",
        "output": "8"
      },
      {
        "input": "arr = [101,102,103,104,105]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,4,5]",
        "output": "9"
      },
      {
        "input": "arr = [2,3,4,5,6,7,8,9,10]",
        "output": "24"
      },
      {
        "input": "arr = [2]",
        "output": "0"
      },
      {
        "input": "arr = [1,1,2,2,3,3,4,4]",
        "output": "14"
      },
      {
        "input": "arr = [1,3,5]",
        "output": "4"
      },
      {
        "input": "arr = [97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78]",
        "output": "110"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "0"
      },
      {
        "input": "arr = [99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1]",
        "output": "110"
      },
      {
        "input": "arr = [100] * 100000",
        "output": "Error: Solution.numOfSubarrays() missing 1 required positional argument: 'arr'"
      },
      {
        "input": "arr = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "462"
      },
      {
        "input": "arr = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]",
        "output": "30"
      },
      {
        "input": "arr = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]",
        "output": "30"
      },
      {
        "input": "arr = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3]",
        "output": "30"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "64"
      },
      {
        "input": "arr = [100, 1, 200, 2, 300, 3, 400, 4, 500, 5]",
        "output": "30"
      },
      {
        "input": "arr = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "0"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15]",
        "output": "20"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "30"
      },
      {
        "input": "arr = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]",
        "output": "30"
      },
      {
        "input": "arr = [97, 2, 83, 4, 81, 6, 79, 8, 77, 10, 75, 12, 73, 14, 71, 16, 69, 18, 67, 20]",
        "output": "110"
      },
      {
        "input": "arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "110"
      },
      {
        "input": "arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "0"
      },
      {
        "input": "arr = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]",
        "output": "110"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "0"
      },
      {
        "input": "arr = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "30"
      },
      {
        "input": "arr = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]",
        "output": "0"
      },
      {
        "input": "arr = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3]",
        "output": "64"
      },
      {
        "input": "arr = [99, 199, 299, 399, 499, 599, 699, 799, 899, 999]",
        "output": "30"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "0"
      },
      {
        "input": "arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]",
        "output": "63"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11]",
        "output": "12"
      },
      {
        "input": "arr = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]",
        "output": "30"
      },
      {
        "input": "arr = [97, 98, 99, 100, 1, 2, 3, 4, 5, 6]",
        "output": "30"
      },
      {
        "input": "arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "output": "30"
      },
      {
        "input": "arr = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]",
        "output": "60"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "10"
      },
      {
        "input": "arr = [50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51]",
        "output": "110"
      },
      {
        "input": "arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "30"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]",
        "output": "240"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "30"
      },
      {
        "input": "arr = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "240"
      },
      {
        "input": "arr = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]",
        "output": "28"
      },
      {
        "input": "arr = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "240"
      },
      {
        "input": "arr = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750]",
        "output": "0"
      },
      {
        "input": "arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]",
        "output": "110"
      },
      {
        "input": "arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]",
        "output": "0"
      },
      {
        "input": "arr = [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]",
        "output": "36"
      },
      {
        "input": "arr = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]",
        "output": "98"
      },
      {
        "input": "arr = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]",
        "output": "0"
      },
      {
        "input": "arr = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "110"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "110"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "0"
      },
      {
        "input": "arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]",
        "output": "63"
      },
      {
        "input": "arr = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80]",
        "output": "110"
      },
      {
        "input": "arr = [99, 100, 98, 97, 101, 96, 102, 95, 103, 94, 104, 93, 105, 92, 106]",
        "output": "48"
      },
      {
        "input": "arr = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36]",
        "output": "64"
      },
      {
        "input": "arr = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "30"
      },
      {
        "input": "arr = [101, 201, 301, 401, 501, 601, 701, 801, 901, 1001]",
        "output": "30"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "64"
      },
      {
        "input": "arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "0"
      },
      {
        "input": "arr = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1]",
        "output": "110"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "0"
      },
      {
        "input": "arr = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75]",
        "output": "64"
      },
      {
        "input": "arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60]",
        "output": "0"
      },
      {
        "input": "arr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20]",
        "output": "310"
      },
      {
        "input": "arr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]",
        "output": "52"
      },
      {
        "input": "arr = [100, 99, 1, 2, 98, 3, 4, 97, 5, 6]",
        "output": "30"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "110"
      },
      {
        "input": "arr = [1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21]",
        "output": "110"
      },
      {
        "input": "arr = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]",
        "output": "110"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "420"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]",
        "output": "15"
      },
      {
        "input": "arr = [100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100]",
        "output": "0"
      },
      {
        "input": "arr = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0]",
        "output": "28"
      },
      {
        "input": "arr = list(range(1, 100001))",
        "output": "Error: Solution.numOfSubarrays() missing 1 required positional argument: 'arr'"
      }
    ]
  },
  {
    "id": 842,
    "difficulty": "Medium",
    "tags": [
      "String",
      "Backtracking"
    ],
    "problemDescription": "You are given a string of digits num, such as \"123456579\". We can split it into a Fibonacci-like sequence [123, 456, 579].\nFormally, a Fibonacci-like sequence is a list f of non-negative integers such that:\n\n0 <= f[i] < 231, (that is, each integer fits in a 32-bit signed integer type),\nf.length >= 3, and\nf[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2.\n\nNote that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\nReturn any Fibonacci-like sequence split from num, or return [] if it cannot be done.\n\u00a0\nExample 1:\n\nInput: num = \"1101111\"\nOutput: [11,0,11,11]\nExplanation: The output [110, 1, 111] would also be accepted.\n\nExample 2:\n\nInput: num = \"112358130\"\nOutput: []\nExplanation: The task is impossible.\n\nExample 3:\n\nInput: num = \"0123\"\nOutput: []\nExplanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.\n\n\u00a0\nConstraints:\n\n1 <= num.length <= 200\nnum contains only digits.\n\n",
    "starterCode": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "num = \"10\"",
        "output": "[]"
      },
      {
        "input": "num = \"1203\"",
        "output": "[]"
      },
      {
        "input": "num = \"101001011001101110000110011100011010011110000\"",
        "output": "[]"
      },
      {
        "input": "num = \"0123\"",
        "output": "[]"
      },
      {
        "input": "num = \"53983465721539834678539834699107966937716195040762699173453431867752970178509821133650133\"",
        "output": "[]"
      },
      {
        "input": "num = \"10112358\"",
        "output": "[1, 0, 1, 1, 2, 3, 5, 8]"
      },
      {
        "input": "num = \"53983465510284675882952\"",
        "output": "[]"
      },
      {
        "input": "num = \"55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555\"",
        "output": "[]"
      },
      {
        "input": "num = \"1101111\"",
        "output": "[11, 0, 11, 11]"
      },
      {
        "input": "num = \"111\"",
        "output": "[]"
      },
      {
        "input": "num = \"123456579\"",
        "output": "[123, 456, 579]"
      },
      {
        "input": "num = \"199100199\"",
        "output": "[1, 99, 100, 199]"
      },
      {
        "input": "num = \"112358130\"",
        "output": "[]"
      },
      {
        "input": "num = \"0000\"",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "num = \"00000\"",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "num = \"214748364721474836482147483646\"",
        "output": "[]"
      },
      {
        "input": "num = \"539834653091229486220197747750493000537622019774775049300053762\"",
        "output": "[]"
      },
      {
        "input": "num = \"5500550000000000000000000000000000000000000000000000000000000000\"",
        "output": "[]"
      },
      {
        "input": "num = \"1010101010101010101010101010101010101010101010101010101010101010101\"",
        "output": "[]"
      },
      {
        "input": "num = \"2189229958345551690260329539342957514193011232571777825519283043251\"",
        "output": "[]"
      },
      {
        "input": "num = \"1010203050813213455891440\"",
        "output": "[]"
      },
      {
        "input": "num = \"100000000010000000011000000012000000023000000450000007800000123\"",
        "output": "[]"
      },
      {
        "input": "num = \"112358132134558914423337761098715972584418559654330786547413903\"",
        "output": "[]"
      },
      {
        "input": "num = \"19641831781129858327132231435820140521011229963145654252296088955571186180559945309415\"",
        "output": "[]"
      },
      {
        "input": "num = \"1111111111222222223333333355555555888888881414213562373095048801922239641504076297850251470507925331978420941989030622213902439519781072266386935013004913220113023504674837457618958332110361340813201903214827848862248736090247475626926107126856242086055224517950816942922470696623689952663023662366236\"",
        "output": "[]"
      },
      {
        "input": "num = \"55144233377\"",
        "output": "[]"
      },
      {
        "input": "num = \"539834657215398346785398346991818018118818645518818212\"",
        "output": "[]"
      },
      {
        "input": "num = \"30508132134558914423337710141520\"",
        "output": "[]"
      },
      {
        "input": "num = \"19910011992\"",
        "output": "[]"
      },
      {
        "input": "num = \"1001012030508132134558914423337761098159725844181676510946177112865746368750140518752964196544\"",
        "output": "[]"
      },
      {
        "input": "num = \"1000999199899799699599499399299199098979695949392919089796959493\"",
        "output": "[]"
      },
      {
        "input": "num = \"8914423337761098715972584418167651094655921349556979\"",
        "output": "[]"
      },
      {
        "input": "num = \"305078118299718606835889290810611235649871976067436781691303468\"",
        "output": "[]"
      },
      {
        "input": "num = \"01010101010101010101010101010101010101010101010101010101010101\"",
        "output": "[]"
      },
      {
        "input": "num = \"10102030508132134558914423337761098715972584214633628946\"",
        "output": "[]"
      },
      {
        "input": "num = \"101020305081321345589144\"",
        "output": "[]"
      },
      {
        "input": "num = \"5555500000000000000000000000000000000000000000000000000000000000000000000\"",
        "output": "[]"
      },
      {
        "input": "num = \"3654352961622705190521006455228285587903213238462643383279509884035\"",
        "output": "[]"
      },
      {
        "input": "num = \"1224365589144233377\"",
        "output": "[]"
      },
      {
        "input": "num = \"1001010110211233583132134558981391123581321345589144233377610987\"",
        "output": "[]"
      },
      {
        "input": "num = \"123456579101415202535588143\"",
        "output": "[]"
      },
      {
        "input": "num = \"12345678910111213141516171819202122232425262728293031323334353637383940\"",
        "output": "[]"
      },
      {
        "input": "num = \"3000000003\"",
        "output": "[]"
      },
      {
        "input": "num = \"3589014494737144108571129522619683030531176667422058003735352909040718542829032\"",
        "output": "[]"
      },
      {
        "input": "num = \"3174592653897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\"",
        "output": "[]"
      },
      {
        "input": "num = \"21892299583477870\"",
        "output": "[]"
      },
      {
        "input": "num = \"13213455891442333776109871597258441816765109465592134955697921\"",
        "output": "[]"
      },
      {
        "input": "num = \"1010203050813213455891442333776109815972584418167651094617711286574636875014051875296419654423337761098159725844181676510946177112865746368750140518752964196544\"",
        "output": "[]"
      },
      {
        "input": "num = \"1234567890123456789012345678901234567890\"",
        "output": "[]"
      },
      {
        "input": "num = \"11111111111111111111111111111111111111111111111111\"",
        "output": "[]"
      },
      {
        "input": "num = \"504329353555168827726123264864707818289106704556020971834363288219037107536233243\"",
        "output": "[]"
      },
      {
        "input": "num = \"1123581321345589144233377610987159725844181076036548214611663861370879102147404313423355812408790942594517191973075474824622450904452049229322734639046752384341598130235028841971693993751058209749445923078164062862089986280348253421170679\"",
        "output": "[]"
      },
      {
        "input": "num = \"305078116559834749165212441511537708168291561047446076484270032896\"",
        "output": "[]"
      },
      {
        "input": "num = \"1000000000000000000000000000000000000000000000000000000000000000101\"",
        "output": "[]"
      },
      {
        "input": "num = \"10000000000000000000000000000000000000000000000001000000000000000000000000\"",
        "output": "[]"
      },
      {
        "input": "num = \"111111111111111111111111111111111111111111111111111111111111111111111111111\"",
        "output": "[]"
      },
      {
        "input": "num = \"25841321345589144233377610987159725844181676510946\"",
        "output": "[]"
      },
      {
        "input": "num = \"352457863245986551816477364000016558014109896102208342120562338240750010987987\"",
        "output": "[]"
      },
      {
        "input": "num = \"55555555555555555555555555555555555555555555555555\"",
        "output": "[]"
      },
      {
        "input": "num = \"10100010001100021000320005300085001380021130341055089014402330377060\"",
        "output": "[]"
      },
      {
        "input": "num = \"21123581321345589144\"",
        "output": "[]"
      },
      {
        "input": "num = \"505349634\"",
        "output": "[]"
      },
      {
        "input": "num = \"1224366101525358912\"",
        "output": "[]"
      },
      {
        "input": "num = \"891442333776109871597258412914977374154233306638104538732745388111\"",
        "output": "[]"
      },
      {
        "input": "num = \"000000000000000000000000000000\"",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "num = \"55005500000000000000000000000000000000000000000000000000000000000000000000000000\"",
        "output": "[]"
      },
      {
        "input": "num = \"0101020305081321345589144233377\"",
        "output": "[]"
      },
      {
        "input": "num = \"1000000000100000000020000000000\"",
        "output": "[]"
      },
      {
        "input": "num = \"050050500000000000000000000000000000000000000000000000000000000000000000000000000\"",
        "output": "[]"
      },
      {
        "input": "num = \"10100000000000000000000000000000000000000000000000000000000000000002\"",
        "output": "[]"
      },
      {
        "input": "num = \"2134558914423337761098715972584418559654330786547413903890131055\"",
        "output": "[]"
      },
      {
        "input": "num = \"101123581321345589144\"",
        "output": "[1, 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]"
      },
      {
        "input": "num = \"2112358132134558914423337761098715972584\"",
        "output": "[]"
      },
      {
        "input": "num = \"555555555555\"",
        "output": "[]"
      },
      {
        "input": "num = \"0123581321345589144\"",
        "output": "[]"
      },
      {
        "input": "num = \"1224365813213455891442333776109871597258412914977374154233306638104\"",
        "output": "[]"
      },
      {
        "input": "num = \"1964183938646565104891103515279327917900041088400684259688063\"",
        "output": "[]"
      },
      {
        "input": "num = \"9223372036854775807922337203685477580718446744073709551615\"",
        "output": "[]"
      }
    ]
  },
  {
    "id": 1899,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array"
    ],
    "problemDescription": "A triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.\nTo obtain target, you may apply the following operation on triplets any number of times (possibly zero):\n\nChoose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)].\n\n\t\nFor example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], triplets[j] will be updated to [max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5].\n\n\n\nReturn true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.\n\u00a0\nExample 1:\n\nInput: triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]\nOutput: true\nExplanation: Perform the following operations:\n- Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]]\nThe target triplet [2,7,5] is now an element of triplets.\n\nExample 2:\n\nInput: triplets = [[3,4,5],[4,5,6]], target = [3,2,5]\nOutput: false\nExplanation: It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets.\n\nExample 3:\n\nInput: triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]\nOutput: true\nExplanation: Perform the following operations:\n- Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]].\n- Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]].\nThe target triplet [5,5,5] is now an element of triplets.\n\n\u00a0\nConstraints:\n\n1 <= triplets.length <= 105\ntriplets[i].length == target.length == 3\n1 <= ai, bi, ci, x, y, z <= 1000\n\n",
    "starterCode": "class Solution:\n    def mergeTriplets(self, triplets: List[List[int]], target: List[int]) -> bool:\n        ",
    "testCases": [
      {
        "input": "triplets = [[1,2,3],[4,5,6]], target = [1,2,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[3,4,5],[4,5,6]], target = [3,2,5]",
        "output": "False"
      },
      {
        "input": "triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1000,1000,1000]], target = [1000,1000,1000]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[3,3,3]], target = [1,2,3]",
        "output": "False"
      },
      {
        "input": "triplets = [[1,2,3],[3,2,1],[2,3,1]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[7,8,9]], target = [1,2,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[3,3,3]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[5,5,5],[5,5,5],[5,5,5]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,1,1],[1,1,1]], target = [1,1,1]",
        "output": "True"
      },
      {
        "input": "triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,3,3],[3,1,3],[3,3,1]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[7,8,9]], target = [7,8,9]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[1,2,4],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1000,1,1],[1,1000,1],[1,1,1000],[500,500,500]], target = [1000,1000,1000]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7],[8,8,8],[9,9,9]], target = [6,6,6]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,2],[1,2,1],[2,1,1],[1,1,3],[1,3,1],[3,1,1],[1,2,2],[2,1,2],[2,2,1]], target = [1,2,2]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]], target = [1,2,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[7,8,9],[1,1,1],[10,10,10]], target = [7,8,9]",
        "output": "True"
      },
      {
        "input": "triplets = [[100,1,1],[1,100,1],[1,1,100],[50,50,50],[10,10,10],[20,20,20],[30,30,30],[40,40,40]], target = [50,50,50]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]], target = [13,14,15]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[3,4,5],[5,6,7],[7,8,9],[9,10,11]], target = [9,10,11]",
        "output": "True"
      },
      {
        "input": "triplets = [[999,1,1],[1,999,1],[1,1,999],[1000,1000,1000]], target = [999,999,999]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[3,2,1],[2,3,1],[3,1,2],[1,3,2],[2,1,3],[1,1,1]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,2,2],[2,1,2],[2,2,1],[1,2,1],[2,1,1]], target = [2,2,2]",
        "output": "True"
      },
      {
        "input": "triplets = [[2,5,3],[1,8,4],[1,7,5],[3,2,1],[6,6,6],[9,9,9]], target = [3,8,9]",
        "output": "False"
      },
      {
        "input": "triplets = [[2,5,3],[1,8,4],[1,7,5],[3,2,1],[6,6,6],[9,9,9]], target = [2,7,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,1,1],[1,1,1],[1,1,2],[1,2,1],[2,1,1],[1,2,2],[2,1,2],[2,2,1],[2,2,2]], target = [2,2,2]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7],[8,8,8],[9,9,9],[10,10,10]], target = [10,10,10]",
        "output": "True"
      },
      {
        "input": "triplets = [[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8]], target = [6,7,8]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1000,1],[2,2,999],[3,3,3],[4,4,4],[5,5,5]], target = [5,1000,999]",
        "output": "True"
      },
      {
        "input": "triplets = [[1000,1,1],[1,1000,1],[1,1,1000]], target = [1000,1000,1000]",
        "output": "True"
      },
      {
        "input": "triplets = [[999,999,999],[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7],[8,8,8]], target = [999,999,999]",
        "output": "True"
      },
      {
        "input": "triplets = [[1000,1000,1000],[999,999,999],[1,1,1]], target = [1000,1000,1000]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9],[8,9,10],[9,10,1],[10,1,2]], target = [10,10,10]",
        "output": "True"
      },
      {
        "input": "triplets = [[9,8,7],[6,5,4],[3,2,1],[10,11,12]], target = [10,11,12]",
        "output": "True"
      },
      {
        "input": "triplets = [[1000,1000,1000],[999,999,999],[998,998,998],[1,2,3]], target = [1000,1000,1000]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,1,1],[1,1,1],[2,2,2],[2,2,2],[2,2,2],[3,3,3],[3,3,3],[3,3,3]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[3,2,1],[2,3,1],[1,3,2]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]], target = [4,5,6]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[7,8,9],[3,2,1]], target = [4,5,6]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]], target = [7,8,9]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1],[1,1,1],[2,2,2],[3,3,3]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,3,1],[2,1,2],[3,2,3],[4,3,4],[5,4,5]], target = [5,5,5]",
        "output": "False"
      },
      {
        "input": "triplets = [[1,2,3],[1,2,2],[2,2,3],[2,2,2],[3,2,3],[3,2,2],[3,3,3],[6,6,6],[9,9,9]], target = [9,9,9]",
        "output": "True"
      },
      {
        "input": "triplets = [[9,5,1],[5,9,1],[1,9,5],[5,1,9],[9,1,5]], target = [9,9,9]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1000,1,1],[1,1000,1],[1,1,1000],[1000,1000,1000]], target = [1000,1000,1000]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,3,2],[3,2,1],[2,1,3],[4,4,4]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,9,1],[1,1,9],[9,1,1],[9,9,9],[5,5,5],[4,4,4],[3,3,3],[2,2,2],[1,1,1]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[3,3,3],[3,3,3],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[5,5,5],[5,5,5],[5,5,5],[1,2,3],[4,5,6],[7,8,9]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[9,9,9],[8,8,8],[7,7,7],[6,6,6],[5,5,5],[4,4,4],[3,3,3],[2,2,2],[1,1,1]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,2],[2,2,3],[3,3,4],[4,4,5]], target = [3,3,4]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,3,1],[2,1,2],[3,2,1],[1,2,3],[2,3,1],[3,1,2]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9]], target = [7,8,9]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,9,9],[9,1,9],[9,9,1],[3,3,3],[2,2,2],[4,4,4]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[7,8,9],[2,3,4],[5,6,7],[8,9,10],[3,4,5],[6,7,8],[9,10,11]], target = [7,8,9]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,3,5],[3,5,1],[5,1,3],[2,4,6],[4,6,2],[6,2,4]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[1,2,3],[1,2,3],[2,3,4],[2,3,4]], target = [2,3,4]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[7,8,9],[1,1,1],[10,10,10],[2,2,2],[3,3,3],[5,5,5]], target = [4,5,6]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1]], target = [1,1,1]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7]], target = [7,7,7]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[1,2,4],[2,3,4],[3,4,5],[4,5,6]], target = [4,5,6]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,1,2],[2,1,1],[2,1,2],[1,2,1],[1,2,2],[2,2,1],[2,2,2]], target = [2,2,2]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[1,5,1],[5,1,5],[1,5,5]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[10,20,30],[10,25,35],[15,25,30],[10,20,35],[10,25,30],[15,20,30]], target = [15,25,30]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[1,5,6],[4,2,6],[4,5,3]], target = [4,5,6]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,3,5],[2,2,2],[3,1,4],[4,4,4],[5,5,5]], target = [5,4,5]",
        "output": "False"
      },
      {
        "input": "triplets = [[1,1,2],[1,2,1],[2,1,1],[1,2,2],[2,2,1],[2,1,2],[2,2,2]], target = [2,2,2]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]], target = [15,15,15]",
        "output": "False"
      },
      {
        "input": "triplets = [[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[999,999,999]], target = [999,999,999]",
        "output": "True"
      },
      {
        "input": "triplets = [[2,5,3],[1,8,4],[1,7,5],[2,7,5],[5,7,5],[2,7,9]], target = [2,7,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,2],[1,2,1],[2,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[5,1,1],[1,5,1],[1,1,5],[1,1,1],[1,1,1]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,2,2],[2,2,2],[2,3,3],[3,3,3]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[1,2,3],[2,1,3],[3,2,1]], target = [3,3,3]",
        "output": "False"
      },
      {
        "input": "triplets = [[500,1,1],[1,500,1],[1,1,500],[1,1,1],[1,1,1],[1,1,1]], target = [500,500,500]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9],[8,9,10]], target = [6,7,8]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,100,1],[100,1,1],[1,1,100],[100,100,1],[100,1,100],[1,100,100]], target = [100,100,100]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,5,3],[1,8,4],[1,7,5],[1,7,9],[2,5,5],[1,8,8],[1,7,7]], target = [1,8,8]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,2,1],[1,1,2],[2,1,1],[2,2,1],[2,1,2],[1,2,2],[2,2,2]], target = [2,2,2]",
        "output": "True"
      },
      {
        "input": "triplets = [[3,2,1],[2,1,3],[1,3,2],[3,3,3]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]], target = [10,11,12]",
        "output": "True"
      },
      {
        "input": "triplets = [[10,10,10],[20,20,20],[30,30,30],[40,40,40],[50,50,50]], target = [30,30,30]",
        "output": "True"
      },
      {
        "input": "triplets = [[2,1,1],[1,2,1],[1,1,2],[2,2,2]], target = [2,2,2]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]], target = [3,3,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[100,200,300],[300,400,500],[500,600,700],[700,800,900],[900,1000,100],[100,300,500],[200,400,600]], target = [100,400,600]",
        "output": "False"
      },
      {
        "input": "triplets = [[1000,1000,1000],[1000,1000,1000],[1000,1000,1000],[1,2,3],[4,5,6],[7,8,9]], target = [1000,1000,1000]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,1,1],[1,1,2],[1,2,1],[2,1,1]], target = [1,1,2]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7],[8,8,8],[9,9,9]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[1,2,2],[2,2,3],[2,2,2],[3,2,3],[3,2,2],[3,3,3],[6,6,6],[9,9,9]], target = [6,6,6]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7],[8,8,8],[9,9,9]], target = [1,1,1]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8]], target = [5,6,7]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[3,2,1],[2,3,1],[2,1,3],[3,1,2],[1,3,2],[1,1,1],[999,999,999]], target = [2,2,2]",
        "output": "False"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7],[8,8,8],[9,9,9]], target = [9,9,9]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,999,1],[999,1,1],[1,1,999],[999,999,1],[999,1,999],[1,999,999],[999,999,999]], target = [999,999,999]",
        "output": "True"
      },
      {
        "input": "triplets = [[5,1,1],[1,5,1],[1,1,5],[5,5,1],[5,1,5],[1,5,5],[5,5,5]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1]], target = [1,1,1]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[4,5,6],[7,8,9],[1,1,1],[10,10,10],[2,2,2],[3,3,3],[5,5,5]], target = [10,10,10]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[3,2,1],[2,3,1],[1,3,2],[3,1,2],[2,1,3],[5,5,5]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,999],[1,999,1],[999,1,1],[999,999,1],[999,1,999],[999,999,999]], target = [999,999,999]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[1,2,2],[2,2,3],[2,2,2],[3,2,3],[3,2,2],[3,3,3],[6,6,6],[9,9,9]], target = [3,2,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,1,2],[1,2,1],[2,1,1],[1,2,2],[2,1,2],[2,2,1],[2,2,2],[2,2,3]], target = [2,2,2]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[2,3,1],[3,1,2],[3,2,1],[2,1,3],[1,3,2]], target = [1,2,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[2,3,4],[3,4,5],[4,5,6]], target = [4,5,6]",
        "output": "True"
      },
      {
        "input": "triplets = [[500,500,500],[1,1,1],[1000,1000,1000],[250,250,250],[750,750,750]], target = [500,500,500]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1000,1000],[1000,1,1000],[1000,1000,1],[250,250,250],[500,500,500],[750,750,750]], target = [1000,1000,1000]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1]], target = [1,1,1]",
        "output": "True"
      },
      {
        "input": "triplets = [[3,4,5],[5,6,7],[8,9,10],[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7]], target = [8,9,10]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5]], target = [1,1,1]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7]], target = [5,6,7]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7],[8,8,8],[9,9,9],[10,10,10]], target = [5,5,5]",
        "output": "True"
      },
      {
        "input": "triplets = [[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9],[8,9,10],[9,10,11],[10,11,12]], target = [7,8,9]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[3,4,5],[5,6,7],[7,8,9]], target = [5,6,7]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,2,3],[1,2,2],[2,2,3],[2,2,2],[3,2,3],[3,2,2],[3,3,3]], target = [3,2,3]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[2,3,4],[5,6,7],[1,2,3],[4,5,6],[7,8,9]], target = [7,8,9]",
        "output": "True"
      },
      {
        "input": "triplets = [[1,1,1],[1,1,2],[1,2,1],[2,1,1],[1,2,2],[2,1,2],[2,2,1],[2,2,2]], target = [2,2,2]",
        "output": "True"
      }
    ]
  },
  {
    "id": 2679,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Matrix",
      "Sorting",
      "Simulation",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 0-indexed 2D integer array nums. Initially, your score is 0. Perform the following operations until the matrix becomes empty:\n\nFrom each row in the matrix, select the largest number and remove it. In the case of a tie, it does not matter which number is chosen.\nIdentify the highest number amongst all those removed in step 1. Add that number to your score.\n\nReturn the final score.\n\u00a0\nExample 1:\n\nInput: nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]\nOutput: 15\nExplanation: In the first operation, we remove 7, 6, 6, and 3. We then add 7 to our score. Next, we remove 2, 4, 5, and 2. We add 5 to our score. Lastly, we remove 1, 2, 3, and 1. We add 3 to our score. Thus, our final score is 7 + 5 + 3 = 15.\n\nExample 2:\n\nInput: nums = [[1]]\nOutput: 1\nExplanation: We remove 1 and add it to the answer. We return 1.\n\u00a0\nConstraints:\n\n1 <= nums.length <= 300\n1 <= nums[i].length <= 500\n0 <= nums[i][j] <= 103\n\n",
    "starterCode": "class Solution:\n    def matrixSum(self, nums: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [[1]]",
        "output": "1"
      },
      {
        "input": "nums = [[5,4,3],[1,2,3],[3,2,1]]",
        "output": "12"
      },
      {
        "input": "nums = [[5,3,1],[4,2,1],[3,2,1]]",
        "output": "9"
      },
      {
        "input": "nums = [[0,0,0],[0,0,0],[0,0,0]]",
        "output": "0"
      },
      {
        "input": "nums = [[10,6,9,1],[7,5,8,2],[12,11,10,3]]",
        "output": "36"
      },
      {
        "input": "nums = [[3,1,4],[1,5,9],[2,6,5]]",
        "output": "16"
      },
      {
        "input": "nums = [[100,99,98],[97,96,95],[94,93,92]]",
        "output": "297"
      },
      {
        "input": "nums = [[10,20,30],[5,15,25],[1,2,3]]",
        "output": "60"
      },
      {
        "input": "nums = [[9,8,7],[6,5,4],[3,2,1]]",
        "output": "24"
      },
      {
        "input": "nums = [[5,4,3],[8,7,6],[9,8,7]]",
        "output": "24"
      },
      {
        "input": "nums = [[5,2,3],[1,6,4],[7,8,9]]",
        "output": "24"
      },
      {
        "input": "nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]",
        "output": "15"
      },
      {
        "input": "nums = [[1,2],[3,4],[5,6]]",
        "output": "11"
      },
      {
        "input": "nums = [[3,6,9,12],[2,5,8,11],[1,4,7,10]]",
        "output": "30"
      },
      {
        "input": "nums = [[1,2,3,4,5],[5,4,3,2,1],[1,3,5,7,9]]",
        "output": "25"
      },
      {
        "input": "nums = [[10,10,10],[10,10,10],[10,10,10]]",
        "output": "30"
      },
      {
        "input": "nums = [[10,6,9,1],[7,5,8,1],[4,3,7,1]]",
        "output": "26"
      },
      {
        "input": "nums = [[99,98,97,96,95,94],[93,92,91,90,89,88],[87,86,85,84,83,82],[81,80,79,78,77,76],[75,74,73,72,71,70]]",
        "output": "579"
      },
      {
        "input": "nums = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]]",
        "output": "39"
      },
      {
        "input": "nums = [[1,3,5,7,9],[2,4,6,8,10],[0,11,12,13,14],[15,16,17,18,19]]",
        "output": "85"
      },
      {
        "input": "nums = [[10,20,30],[5,15,25],[1,11,21],[6,16,26],[11,21,31]]",
        "output": "63"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]",
        "output": "155"
      },
      {
        "input": "nums = [[300, 200, 100, 0], [250, 150, 50, 0], [200, 100, 0, 0], [150, 50, 0, 0]]",
        "output": "600"
      },
      {
        "input": "nums = [[5, 3, 8], [2, 6, 9], [1, 7, 4], [10, 1, 12], [11, 0, 13]]",
        "output": "27"
      },
      {
        "input": "nums = [[10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10],[-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10]]",
        "output": "0"
      },
      {
        "input": "nums = [[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3],[4,4,4,4,4],[5,5,5,5,5]]",
        "output": "25"
      },
      {
        "input": "nums = [[100, 200, 300], [50, 150, 250], [10, 80, 160]]",
        "output": "600"
      },
      {
        "input": "nums = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "nums = [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]",
        "output": "4"
      },
      {
        "input": "nums = [[9, 8, 7, 6, 5], [4, 3, 2, 1, 0], [10, 9, 8, 7, 6], [5, 4, 3, 2, 1]]",
        "output": "40"
      },
      {
        "input": "nums = [[1, 2, 3], [3, 2, 1], [2, 3, 1], [1, 3, 2], [3, 1, 2]]",
        "output": "6"
      },
      {
        "input": "nums = [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]",
        "output": "5"
      },
      {
        "input": "nums = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]",
        "output": "0"
      },
      {
        "input": "nums = [[500,501,502,503,504,505,506,507,508,509],[510,511,512,513,514,515,516,517,518,519],[520,521,522,523,524,525,526,527,528,529]]",
        "output": "5245"
      },
      {
        "input": "nums = [[10, 20, 30, 40, 50], [50, 40, 30, 20, 10], [1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [9, 8, 7, 6, 5]]",
        "output": "150"
      },
      {
        "input": "nums = [[9, 7, 5, 3, 1], [8, 6, 4, 2, 0], [7, 5, 3, 1, 0]]",
        "output": "25"
      },
      {
        "input": "nums = [[100,99,98,97],[96,95,94,93],[92,91,90,89],[88,87,86,85]]",
        "output": "394"
      },
      {
        "input": "nums = [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [9, 8, 7, 6, 5]]",
        "output": "36"
      },
      {
        "input": "nums = [[3,2,1],[2,1,0],[1,0,0],[0,0,0]]",
        "output": "6"
      },
      {
        "input": "nums = [[9,8,7],[6,5,4],[3,2,1],[0,0,0],[0,0,0]]",
        "output": "24"
      },
      {
        "input": "nums = [[500, 400, 300, 200, 100], [450, 350, 250, 150, 50], [400, 300, 200, 100, 0], [350, 250, 150, 50, -50]]",
        "output": "1500"
      },
      {
        "input": "nums = [[10, 20, 30, 40, 50], [5, 15, 25, 35, 45], [1, 11, 21, 31, 41], [0, 10, 20, 30, 40]]",
        "output": "150"
      },
      {
        "input": "nums = [[1,3,5,7,9],[2,4,6,8,10],[11,13,15,17,19],[21,23,25,27,29],[31,33,35,37,39]]",
        "output": "175"
      },
      {
        "input": "nums = [[50,25,0],[49,24,1],[48,23,2],[47,22,3],[46,21,4]]",
        "output": "79"
      },
      {
        "input": "nums = [[9, 7, 5, 3, 1], [8, 6, 4, 2, 0], [9, 8, 7, 6, 5], [4, 3, 2, 1, 0]]",
        "output": "35"
      },
      {
        "input": "nums = [[100,200,300,400],[400,300,200,100],[1,2,3,4],[4,3,2,1]]",
        "output": "1000"
      },
      {
        "input": "nums = [[100,200,300,400],[150,250,350,450],[125,225,325,425],[175,275,375,475]]",
        "output": "1300"
      },
      {
        "input": "nums = [[5, 5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5]]",
        "output": "20"
      },
      {
        "input": "nums = [[15, 20, 25, 30], [14, 19, 24, 29], [13, 18, 23, 28], [12, 17, 22, 27], [11, 16, 21, 26]]",
        "output": "90"
      },
      {
        "input": "nums = [[300,299,298,297,296,295,294,293,292,291],[290,289,288,287,286,285,284,283,282,281],[280,279,278,277,276,275,274,273,272,271],[270,269,268,267,266,265,264,263,262,261],[260,259,258,257,256,255,254,253,252,251],[250,249,248,247,246,245,244,243,242,241],[240,239,238,237,236,235,234,233,232,231],[230,229,228,227,226,225,224,223,222,221],[220,219,218,217,216,215,214,213,212,211],[210,209,208,207,206,205,204,203,202,201]]",
        "output": "2955"
      },
      {
        "input": "nums = [[300, 200, 100], [299, 199, 99], [298, 198, 98], [297, 197, 97], [296, 196, 96]]",
        "output": "600"
      },
      {
        "input": "nums = [[3, 2, 1], [6, 5, 4], [9, 8, 7], [12, 11, 10], [15, 14, 13], [18, 17, 16], [21, 20, 19]]",
        "output": "60"
      },
      {
        "input": "nums = [[500,400,300,200,100],[499,399,299,199,99],[498,398,298,198,98],[497,397,297,197,97]]",
        "output": "1500"
      },
      {
        "input": "nums = [[100, 99, 98], [97, 96, 95], [94, 93, 92], [91, 90, 89]]",
        "output": "297"
      },
      {
        "input": "nums = [[5,5,5,5,5],[4,4,4,4,4],[3,3,3,3,3],[2,2,2,2,2],[1,1,1,1,1]]",
        "output": "25"
      },
      {
        "input": "nums = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "10"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "55"
      },
      {
        "input": "nums = [[1000, 900, 800], [700, 600, 500], [400, 300, 200], [100, 0, 1]]",
        "output": "2700"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[2,4,6,8,10,12,14,16,18,20],[20,18,16,14,12,10,8,6,4,2]]",
        "output": "110"
      },
      {
        "input": "nums = [[9,5,1,8],[7,4,2,6],[3,8,6,4],[10,3,7,5]]",
        "output": "26"
      },
      {
        "input": "nums = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]",
        "output": "20"
      },
      {
        "input": "nums = [[3],[2],[1],[4],[5],[6]]",
        "output": "6"
      },
      {
        "input": "nums = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "nums = [[999,1000,998,997,996],[995,994,993,992,991],[990,989,988,987,986],[985,984,983,982,981]]",
        "output": "4990"
      },
      {
        "input": "nums = [[1,1000,999],[2,998,997],[3,996,995],[4,994,993],[5,992,991]]",
        "output": "2004"
      },
      {
        "input": "nums = [[1000,500,250,125,62,31,15,7,3,1],[999,499,249,124,62,31,15,7,3,1],[998,498,248,124,62,31,15,7,3,1],[997,497,247,123,61,31,15,7,3,1]]",
        "output": "1994"
      },
      {
        "input": "nums = [[500,499,498,497,496,495,494,493,492,491],[490,489,488,487,486,485,484,483,482,481],[480,479,478,477,476,475,474,473,472,471]]",
        "output": "4955"
      },
      {
        "input": "nums = [[5,10,15,20,25],[25,20,15,10,5],[30,35,40,45,50],[50,45,40,35,30],[55,60,65,70,75]]",
        "output": "325"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]]",
        "output": "55"
      },
      {
        "input": "nums = [[300, 200, 100], [250, 150, 50], [200, 100, 0], [150, 50, -50], [100, 0, -100]]",
        "output": "600"
      },
      {
        "input": "nums = [[1000, 0, 0], [0, 1000, 0], [0, 0, 1000]]",
        "output": "1000"
      },
      {
        "input": "nums = [[3,1,4,1,5,9,2,6,5,3,5,9,7,9,3,2,3,8,4,6,2,6,4,3,3,8,3,2,7,9,5,0,2,8,8,4,1,9,7,1,6,9,3,9,9,3,7,5,1,0,5,8,2,0,9,7,4,9,4,4,5,9,2,3,0,7,8,1,6,4,0,6,2,8,6,2,0,8,9,9,8,6,2,8,0,3,4,8,2,5,3,4,2,1,1,7,0,1,0,5,3,0,9,8,9,9,9,0,1,2,3,8,5,6,4,3,3,8,3,2,7,9,5,0,2,8,8,4,1,9,7,1,6,9,3,9,9,3,7,5,1,0,5,8,2,0,9,7,4,9,4,4,5,9,2,3,0,7,8,1,6,4,0,6,2,8,6,2,0,8,9,9,8,6,2,8]]",
        "output": "835"
      },
      {
        "input": "nums = [[3, 1, 4, 1, 5], [9, 2, 6, 5, 3], [5, 8, 9, 7, 9], [2, 6, 5, 3, 5]]",
        "output": "38"
      },
      {
        "input": "nums = [[5,15,25,35],[10,20,30,40],[15,25,35,45],[20,30,40,50]]",
        "output": "140"
      },
      {
        "input": "nums = [[10,20,30,40,50],[50,40,30,20,10],[20,10,40,30,50],[30,50,10,40,20],[40,30,50,20,10]]",
        "output": "150"
      },
      {
        "input": "nums = [[15,25,5,10],[30,20,25,15],[5,5,5,5],[40,10,30,20]]",
        "output": "105"
      },
      {
        "input": "nums = [[9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9],[10,9,8,7,6,5,4,3,2]]",
        "output": "54"
      },
      {
        "input": "nums = [[300,200,100],[250,150,50],[200,100,0],[150,50,0]]",
        "output": "600"
      },
      {
        "input": "nums = [[999, 998, 997], [996, 995, 994], [993, 992, 991], [990, 989, 988], [987, 986, 985]]",
        "output": "2994"
      },
      {
        "input": "nums = [[10, 20], [20, 10], [30, 40], [40, 30], [50, 60], [60, 50], [70, 80], [80, 70]]",
        "output": "150"
      },
      {
        "input": "nums = [[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10],[10,1,2,3,4,5,6,7,8,9]]",
        "output": "55"
      },
      {
        "input": "nums = [[1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [4, 4, 4, 4, 4], [5, 5, 5, 5, 5]]",
        "output": "25"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [2, 4, 6, 8, 10, 1, 3, 5, 7, 9], [9, 7, 5, 3, 1, 10, 8, 6, 4, 2]]",
        "output": "55"
      },
      {
        "input": "nums = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]",
        "output": "4"
      },
      {
        "input": "nums = [[300, 200, 100], [299, 199, 99], [298, 198, 98], [297, 197, 97], [296, 196, 96], [295, 195, 95], [294, 194, 94], [293, 193, 93], [292, 192, 92], [291, 191, 91]]",
        "output": "600"
      },
      {
        "input": "nums = [[10, 20, 30], [30, 20, 10], [10, 30, 20]]",
        "output": "60"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[5,10,15,20,25,30,35,40,45,50],[50,45,40,35,30,25,20,15,10,5]]",
        "output": "275"
      },
      {
        "input": "nums = [[1000,999,998,997],[996,995,994,993],[992,991,990,989],[988,987,986,985],[984,983,982,981]]",
        "output": "3994"
      },
      {
        "input": "nums = [[1, 1000], [1, 999], [1, 998], [1, 997], [1, 996], [1, 995], [1, 994], [1, 993], [1, 992], [1, 991], [1, 990], [1, 989], [1, 988], [1, 987], [1, 986], [1, 985], [1, 984], [1, 983], [1, 982], [1, 981]]",
        "output": "1001"
      },
      {
        "input": "nums = [[9,15,3,11],[8,14,4,12],[7,13,5,10],[6,10,6,9],[5,9,7,8],[4,8,8,7],[3,7,9,6],[2,6,10,5],[1,5,11,4]]",
        "output": "42"
      },
      {
        "input": "nums = [[1,0,0,0],[0,2,0,0],[0,0,3,0],[0,0,0,4]]",
        "output": "4"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[2,3,4,5,6,7,8,9,10,1],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "55"
      },
      {
        "input": "nums = [[100,101,102,103,104],[200,201,202,203,204],[300,301,302,303,304],[400,401,402,403,404],[500,501,502,503,504]]",
        "output": "2510"
      },
      {
        "input": "nums = [[1,2,3,4,5],[5,4,3,2,1],[6,7,8,9,10],[10,9,8,7,6],[11,12,13,14,15]]",
        "output": "65"
      },
      {
        "input": "nums = [[99,98,97],[96,95,94],[93,92,91],[90,89,88],[87,86,85]]",
        "output": "294"
      },
      {
        "input": "nums = [[1, 1000, 1], [1, 1000, 1], [1, 1000, 1], [1, 1000, 1], [1, 1000, 1]]",
        "output": "1002"
      },
      {
        "input": "nums = [[100, 200, 300], [50, 150, 250], [20, 120, 220], [10, 110, 210]]",
        "output": "600"
      },
      {
        "input": "nums = [[100, 200, 300], [90, 180, 270], [80, 160, 240], [70, 140, 210], [60, 120, 180], [50, 100, 150]]",
        "output": "600"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]]",
        "output": "255"
      },
      {
        "input": "nums = [[999,998,997,996,995,994,993,992,991,990],[989,988,987,986,985,984,983,982,981,980],[979,978,977,976,975,974,973,972,971,970]]",
        "output": "9945"
      },
      {
        "input": "nums = [[50, 40, 30, 20, 10], [51, 41, 31, 21, 11], [52, 42, 32, 22, 12], [53, 43, 33, 23, 13], [54, 44, 34, 24, 14], [55, 45, 35, 25, 15], [56, 46, 36, 26, 16], [57, 47, 37, 27, 17], [58, 48, 38, 28, 18], [59, 49, 39, 29, 19]]",
        "output": "195"
      },
      {
        "input": "nums = [[100,1,2,3,4,5],[6,7,8,9,10,100],[100,11,12,13,14,15],[16,17,18,19,20,100],[21,22,23,24,25,100]]",
        "output": "215"
      },
      {
        "input": "nums = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]]",
        "output": "10"
      }
    ]
  },
  {
    "id": 2832,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Array",
      "Monotonic Stack"
    ],
    "problemDescription": "You are given a 0-indexed array nums of distinct integers.\nLet us define a 0-indexed array ans of the same length as nums in the following way:\n\nans[i] is the maximum length of a subarray nums[l..r], such that the maximum element in that subarray is equal to nums[i].\n\nReturn the array ans.\nNote that a subarray is a contiguous part of the array.\n\u00a0\nExample 1:\n\nInput: nums = [1,5,4,3,6]\nOutput: [1,4,2,1,5]\nExplanation: For nums[0] the longest subarray in which 1 is the maximum is nums[0..0] so ans[0] = 1.\nFor nums[1] the longest subarray in which 5 is the maximum is nums[0..3] so ans[1] = 4.\nFor nums[2] the longest subarray in which 4 is the maximum is nums[2..3] so ans[2] = 2.\nFor nums[3] the longest subarray in which 3 is the maximum is nums[3..3] so ans[3] = 1.\nFor nums[4] the longest subarray in which 6 is the maximum is nums[0..4] so ans[4] = 5.\n\nExample 2:\n\nInput: nums = [1,2,3,4,5]\nOutput: [1,2,3,4,5]\nExplanation: For nums[i] the longest subarray in which it's the maximum is nums[0..i] so ans[i] = i + 1.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 105\nAll elements in nums are distinct.\n\n",
    "starterCode": "class Solution:\n    def maximumLengthOfRanges(self, nums: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [100000]",
        "output": "[1]"
      },
      {
        "input": "nums = [1]",
        "output": "[1]"
      },
      {
        "input": "nums = [1,3,2]",
        "output": "[1, 3, 1]"
      },
      {
        "input": "nums = [3,1]",
        "output": "[2, 1]"
      },
      {
        "input": "nums = [10,1,2,3,4]",
        "output": "[5, 1, 2, 3, 4]"
      },
      {
        "input": "nums = [1,5,4,3,6]",
        "output": "[1, 4, 2, 1, 5]"
      },
      {
        "input": "nums = [1,2]",
        "output": "[1, 2]"
      },
      {
        "input": "nums = [10,1,2,3,4,5,6,7,8,9]",
        "output": "[10, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [100000, 1, 2, 3, 4, 5]",
        "output": "[6, 1, 2, 3, 4, 5]"
      },
      {
        "input": "nums = [2,1]",
        "output": "[2, 1]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [3,1,4,2,5]",
        "output": "[2, 1, 4, 1, 5]"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6]",
        "output": "[1, 10, 1, 8, 1, 6, 1, 4, 1, 2]"
      },
      {
        "input": "nums = [7,1,5,3,6,4,2,9,8,10]",
        "output": "[7, 1, 3, 1, 6, 2, 1, 9, 1, 10]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11]",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 20, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [100,50,150,75,200,25,175,300,125,10,350,15,225,275,325,5,375,20,400,450]",
        "output": "[2, 1, 4, 1, 7, 1, 2, 10, 2, 1, 16, 1, 2, 3, 5, 1, 18, 1, 19, 20]"
      },
      {
        "input": "nums = [6,7,8,9,10,1,2,3,4,5]",
        "output": "[1, 2, 3, 4, 10, 1, 2, 3, 4, 5]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [8,1,2,10,6,7,9,3,4,5]",
        "output": "[3, 1, 2, 10, 1, 2, 6, 1, 2, 3]"
      },
      {
        "input": "nums = [3,1,6,4,5,2,7,8,9,10]",
        "output": "[2, 1, 6, 1, 3, 1, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1]"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5]",
        "output": "[2, 1, 4, 1, 5, 11, 1, 5, 3, 1, 3]"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [14,12,8,6,4,2,1,3,5,7,9,11,13,15,10]",
        "output": "[13, 11, 8, 6, 4, 2, 1, 3, 5, 7, 9, 10, 12, 15, 1]"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [100, 50, 75, 25, 125, 70, 80, 60, 90, 30, 40, 65, 85, 95, 110, 120, 130]",
        "output": "[4, 1, 3, 1, 16, 1, 3, 1, 8, 1, 2, 3, 4, 9, 10, 11, 17]"
      },
      {
        "input": "nums = [10,20,30,40,50,1,2,3,4,5,6,7,8,9]",
        "output": "[1, 2, 3, 4, 14, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [3,1,5,2,4,6,7]",
        "output": "[2, 1, 5, 1, 2, 6, 7]"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
      },
      {
        "input": "nums = [2,1,4,3,6,5,8,7,10,9,12,11]",
        "output": "[2, 1, 4, 1, 6, 1, 8, 1, 10, 1, 12, 1]"
      },
      {
        "input": "nums = [8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 6, 7]",
        "output": "[2, 1, 4, 1, 6, 1, 8, 1, 12, 1, 2, 3]"
      },
      {
        "input": "nums = [25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [10,20,15,25,30,5,40,45,50,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,26,27,28,29,31,32,33,34,35,36,37,38,39,41,42,43,44,46,47,48,49,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99]",
        "output": "[1, 3, 1, 4, 6, 1, 7, 8, 53, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98]"
      },
      {
        "input": "nums = [1,10,9,8,7,6,5,4,3,2]",
        "output": "[1, 10, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "nums = [1, 2, 4, 3, 5, 7, 6, 8, 10, 9, 11, 13, 12, 14, 16, 15, 17, 19, 18, 20]",
        "output": "[1, 2, 4, 1, 5, 7, 1, 8, 10, 1, 11, 13, 1, 14, 16, 1, 17, 19, 1, 20]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,2,4,6,8,10,12,14,16,18,20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20]"
      },
      {
        "input": "nums = [5,1,4,3,7,2,6,8,9,0]",
        "output": "[4, 1, 3, 1, 7, 1, 2, 8, 10, 1]"
      },
      {
        "input": "nums = [100000,99999,99998,99997,99996,99995,99994,99993,99992,99991]",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,21,20,23,22,25,24]",
        "output": "[1, 3, 1, 5, 1, 7, 1, 9, 1, 11, 1, 13, 1, 15, 1, 17, 1, 19, 1, 21, 1, 23, 1, 25, 1]"
      },
      {
        "input": "nums = [3,2,1,6,5,4,9,8,7,12,11,10,15,14,13]",
        "output": "[3, 2, 1, 6, 2, 1, 9, 2, 1, 12, 2, 1, 15, 2, 1]"
      },
      {
        "input": "nums = [7,1,3,2,6,5,4,8,10,9,11,13,12,15,14,16,17,18,19,20]",
        "output": "[7, 1, 3, 1, 6, 2, 1, 8, 10, 1, 11, 13, 1, 15, 1, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "nums = [15,1,2,14,3,4,13,5,6,12,7,8,9,10,11]",
        "output": "[15, 1, 2, 14, 1, 2, 11, 1, 2, 8, 1, 2, 3, 4, 5]"
      },
      {
        "input": "nums = [2,1,4,3,6,5,8,7,10,9,12,11,14,13,16,15,18,17,20,19]",
        "output": "[2, 1, 4, 1, 6, 1, 8, 1, 10, 1, 12, 1, 14, 1, 16, 1, 18, 1, 20, 1]"
      },
      {
        "input": "nums = [7,1,14,2,11,3,13,4,9,5,8,6,12,10,15]",
        "output": "[2, 1, 14, 1, 3, 1, 11, 1, 5, 1, 3, 1, 7, 1, 15]"
      },
      {
        "input": "nums = [23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]",
        "output": "[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "nums = [20, 1, 19, 2, 18, 3, 17, 4, 16, 5, 15, 6, 14, 7, 13, 8, 12, 9, 11, 10]",
        "output": "[20, 1, 19, 1, 17, 1, 15, 1, 13, 1, 11, 1, 9, 1, 7, 1, 5, 1, 3, 1]"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10,5,15,25,35,45,55,65,75,85,95]",
        "output": "[20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3, 2, 3, 8, 4, 6, 2, 6, 4, 3, 3, 8, 3, 2, 7, 9, 5, 0, 2, 8, 8]",
        "output": "[2, 1, 4, 1, 5, 35, 1, 5, 3, 1, 3, 35, 1, 35, 3, 1, 3, 15, 1, 7, 1, 7, 3, 2, 2, 15, 2, 1, 3, 35, 3, 1, 2, 5, 5]"
      },
      {
        "input": "nums = [20,10,30,40,50,15,25,35,45,55]",
        "output": "[2, 1, 3, 4, 9, 1, 2, 3, 4, 10]"
      },
      {
        "input": "nums = [10,1,20,2,30,3,40,4,50,5,60,6,70,7,80,8,90,9,100,10]",
        "output": "[2, 1, 4, 1, 6, 1, 8, 1, 10, 1, 12, 1, 14, 1, 16, 1, 18, 1, 20, 1]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]",
        "output": "[1, 2, 3, 4, 9, 1, 2, 3, 4, 10]"
      },
      {
        "input": "nums = [1,9,2,8,3,7,4,6,5,0]",
        "output": "[1, 10, 1, 8, 1, 6, 1, 4, 2, 1]"
      },
      {
        "input": "nums = [5,3,1,4,2,6,8,7,10,9,12,11,14,13,15]",
        "output": "[5, 2, 1, 4, 1, 6, 8, 1, 10, 1, 12, 1, 14, 1, 15]"
      },
      {
        "input": "nums = [25,21,22,23,24,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[25, 1, 2, 3, 24, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [15,1,14,2,13,3,12,4,11,5,10,6,9,7,8,20,16,19,17,22,18,23,21,25,24]",
        "output": "[15, 1, 14, 1, 12, 1, 10, 1, 8, 1, 6, 1, 4, 1, 2, 19, 1, 3, 1, 21, 1, 23, 1, 25, 1]"
      },
      {
        "input": "nums = [1,5,2,8,4,7,3,6]",
        "output": "[1, 3, 1, 8, 1, 4, 1, 2]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 8, 6, 4, 2, 10, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 21]",
        "output": "[1, 2, 3, 4, 9, 4, 3, 2, 1, 10, 12, 1, 14, 1, 16, 1, 18, 1, 20, 1, 21]"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6,11]",
        "output": "[1, 10, 1, 8, 1, 6, 1, 4, 1, 2, 11]"
      },
      {
        "input": "nums = [2,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,10,20,30,40,50]",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 11, 12, 13, 14]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,10]",
        "output": "[1, 3, 1, 5, 1, 7, 1, 9, 1, 10]"
      },
      {
        "input": "nums = [3,9,20,5,18,25,15,8,12,7,10]",
        "output": "[1, 2, 5, 1, 2, 11, 5, 1, 4, 1, 2]"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14]",
        "output": "[1, 3, 1, 5, 1, 7, 1, 9, 1, 11, 1, 13, 1, 15, 1]"
      },
      {
        "input": "nums = [9,3,5,1,7,2,8,4,6,10]",
        "output": "[9, 1, 3, 1, 5, 1, 8, 1, 2, 10]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "nums = [5,3,6,1,7,4,9,2,10,8]",
        "output": "[2, 1, 4, 1, 6, 1, 8, 1, 10, 1]"
      },
      {
        "input": "nums = [5, 1, 9, 13, 3, 11, 4, 12, 5, 6, 7, 8, 10, 2]",
        "output": "[2, 1, 3, 14, 1, 3, 1, 10, 1, 2, 3, 4, 6, 1]"
      },
      {
        "input": "nums = [7,1,5,3,6,4,2,8,9,0]",
        "output": "[7, 1, 3, 1, 6, 2, 1, 8, 10, 1]"
      },
      {
        "input": "nums = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "nums = [100000, 50000, 25000, 12500, 6250, 3125, 1562, 781, 390, 195]",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [1,3,2,4,6,5,7,9,8,10]",
        "output": "[1, 3, 1, 4, 6, 1, 7, 9, 1, 10]"
      },
      {
        "input": "nums = [1,15,2,14,3,13,4,12,5,11,6,10,7,9,8]",
        "output": "[1, 15, 1, 13, 1, 11, 1, 9, 1, 7, 1, 5, 1, 3, 1]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,11]",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11]"
      },
      {
        "input": "nums = [4, 2, 6, 3, 9, 5, 11, 7, 13, 8, 15, 10, 17, 12, 19, 14, 21, 16, 23, 18]",
        "output": "[2, 1, 4, 1, 6, 1, 8, 1, 10, 1, 12, 1, 14, 1, 16, 1, 18, 1, 20, 1]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,90,80,70,60,50,40,30,20,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [5,1,9,2,8,3,7,4,6,10]",
        "output": "[2, 1, 9, 1, 6, 1, 4, 1, 2, 10]"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10]",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [5,1,4,2,3,9,6,8,7,10]",
        "output": "[5, 1, 4, 1, 2, 9, 1, 3, 1, 10]"
      },
      {
        "input": "nums = [1,2,10,15,5,7,9,13,11,3,4,6,8,12,14]",
        "output": "[1, 2, 3, 15, 1, 2, 3, 10, 5, 1, 2, 3, 4, 6, 11]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20]"
      },
      {
        "input": "nums = [1,2,10,8,6,7,3,4,9,5]",
        "output": "[1, 2, 10, 5, 1, 4, 1, 2, 7, 1]"
      },
      {
        "input": "nums = [100,10,1,90,20,30,80,40,50,70,60]",
        "output": "[11, 2, 1, 10, 1, 2, 7, 1, 2, 4, 1]"
      },
      {
        "input": "nums = [29,27,25,23,21,19,17,15,13,11,9,7,5,3,1]",
        "output": "[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [10,5,8,1,7,3,9,2,6,4]",
        "output": "[10, 1, 5, 1, 3, 1, 9, 1, 3, 1]"
      },
      {
        "input": "nums = [20,18,16,14,12,10,8,6,4,2,19,17,15,13,11,9,7,5,3,1]",
        "output": "[20, 9, 8, 7, 6, 5, 4, 3, 2, 1, 19, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [1,2,3,4,5,10,9,8,7,6]",
        "output": "[1, 2, 3, 4, 5, 10, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [21,19,17,15,13,11,9,7,5,3,1]",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums = [100000, 1, 99999, 2, 99998, 3, 99997, 4, 99996, 5, 99995, 6, 99994, 7, 99993, 8, 99992, 9, 99991, 10]",
        "output": "[20, 1, 19, 1, 17, 1, 15, 1, 13, 1, 11, 1, 9, 1, 7, 1, 5, 1, 3, 1]"
      },
      {
        "input": "nums = [3,1,6,7,5,2,4,8,9]",
        "output": "[2, 1, 3, 7, 3, 1, 2, 8, 9]"
      },
      {
        "input": "nums = [10,20,15,30,25,40,35,50,45,60]",
        "output": "[1, 3, 1, 5, 1, 7, 1, 9, 1, 10]"
      },
      {
        "input": "nums = [2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[2, 1, 4, 1, 6, 1, 8, 1, 10, 1, 12, 1, 14, 1, 16, 1, 18, 1, 20, 1, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "nums = [8,9,7,10,6,11,5,12,4,13,3,14,2,15,1]",
        "output": "[1, 3, 1, 5, 1, 7, 1, 9, 1, 11, 1, 13, 1, 15, 1]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"
      },
      {
        "input": "nums = [3,1,2,5,4,6,7,8,9,10]",
        "output": "[3, 1, 2, 5, 1, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [3,1,4,2,7,5,8,6,11,9,12,10]",
        "output": "[2, 1, 4, 1, 6, 1, 8, 1, 10, 1, 12, 1]"
      },
      {
        "input": "nums = [1,100,2,99,3,98,4,97,5,96,6,95,7,94,8,93,9,92,10,91]",
        "output": "[1, 20, 1, 18, 1, 16, 1, 14, 1, 12, 1, 10, 1, 8, 1, 6, 1, 4, 1, 2]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 1]"
      },
      {
        "input": "nums = [10, 1, 9, 2, 8, 3, 7, 4, 6, 5]",
        "output": "[10, 1, 9, 1, 7, 1, 5, 1, 3, 1]"
      },
      {
        "input": "nums = [6,1,3,2,5,4,7]",
        "output": "[6, 1, 3, 1, 5, 1, 7]"
      }
    ]
  },
  {
    "id": 469,
    "difficulty": "Medium",
    "tags": [
      "Geometry",
      "Array",
      "Math"
    ],
    "problemDescription": "You are given an array of points on the X-Y plane points where points[i] = [xi, yi]. The points form a polygon when joined sequentially.\nReturn true if this polygon is convex and false otherwise.\nYou may assume the polygon formed by given points is always a simple polygon. In other words, we ensure that exactly two edges intersect at each vertex and that edges otherwise don't intersect each other.\n\u00a0\nExample 1:\n\n\nInput: points = [[0,0],[0,5],[5,5],[5,0]]\nOutput: true\n\nExample 2:\n\n\nInput: points = [[0,0],[0,10],[10,10],[10,0],[5,5]]\nOutput: false\n\n\u00a0\nConstraints:\n\n3 <= points.length <= 104\npoints[i].length == 2\n-104 <= xi, yi <= 104\nAll the given points are unique.\n\n",
    "starterCode": "class Solution:\n    def isConvex(self, points: List[List[int]]) -> bool:\n        ",
    "testCases": [
      {
        "input": "points = [[1,0],[0,0],[0,1]]",
        "output": "True"
      },
      {
        "input": "points = [[1,1],[2,3],[3,2],[4,1],[4,3],[3,4],[1,4]]",
        "output": "False"
      },
      {
        "input": "points = [[-1,-1],[1,1],[0,0]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[1,0],[0,1]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[1,0],[2,1],[1,1]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[1,0],[1,1],[0,1]]",
        "output": "True"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4]]",
        "output": "True"
      },
      {
        "input": "points = [[-1,0],[0,1],[1,0],[0,-1]]",
        "output": "True"
      },
      {
        "input": "points = [[1,2],[2,3],[3,1]]",
        "output": "True"
      },
      {
        "input": "points = [[1,1],[1,3],[3,3],[3,1]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[0,10],[10,10],[10,0],[5,5]]",
        "output": "False"
      },
      {
        "input": "points = [[1,1],[2,3],[3,2]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[1,0],[2,0],[3,0]]",
        "output": "True"
      },
      {
        "input": "points = [[1,1],[2,2],[3,1],[2,0]]",
        "output": "True"
      },
      {
        "input": "points = [[1,2],[2,3],[3,1],[4,2],[5,1]]",
        "output": "False"
      },
      {
        "input": "points = [[1,1],[2,3],[3,2],[4,4],[5,3]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[0,5],[5,5],[5,0]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[2,0],[2,2],[0,2],[1,1]]",
        "output": "False"
      },
      {
        "input": "points = [[10,0],[10,10],[0,10],[0,0],[5,5],[2,2],[8,8]]",
        "output": "False"
      },
      {
        "input": "points = [[-5,0],[-4,-1],[-2,1],[2,0],[3,-1],[1,-2]]",
        "output": "False"
      },
      {
        "input": "points = [[1,1],[3,3],[2,2],[4,4],[3,5],[2,4],[1,3]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[2,0],[3,1],[2,2],[1,2],[0,2],[-1,1],[0,0]]",
        "output": "True"
      },
      {
        "input": "points = [[-5,-5],[-5,5],[5,5],[0,0],[5,-5]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[0,4],[2,4],[2,0],[1,1],[1,3]]",
        "output": "False"
      },
      {
        "input": "points = [[1,0],[2,2],[3,1],[2,-1],[1,-1],[0,1]]",
        "output": "False"
      },
      {
        "input": "points = [[1,1],[2,1],[2,2],[3,2],[3,3],[2,3],[2,4],[1,4],[1,3],[0,3],[0,2],[1,2]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[1,0],[1,1],[0,1],[0.5,0.5]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[0,1],[1,1],[1,0],[0.5,0.5],[0.5,0.25]]",
        "output": "False"
      },
      {
        "input": "points = [[-5,0],[-5,5],[0,5],[0,0],[5,0],[5,5]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[2,1],[2,3],[1,4],[-1,3],[-1,1]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[1,2],[2,0],[1,1],[0,2]]",
        "output": "False"
      },
      {
        "input": "points = [[-5,-5],[5,5],[5,-5],[-5,5]]",
        "output": "False"
      },
      {
        "input": "points = [[-3,0],[0,3],[3,0],[0,-3]]",
        "output": "True"
      },
      {
        "input": "points = [[1,0],[2,1],[1,2],[0,1],[1,0]]",
        "output": "True"
      },
      {
        "input": "points = [[-1,0],[0,1],[1,0],[0,-1],[-1,0]]",
        "output": "True"
      },
      {
        "input": "points = [[1,2],[3,4],[5,6],[7,8],[9,10],[8,9],[6,7],[4,5]]",
        "output": "True"
      },
      {
        "input": "points = [[5,0],[3,2],[0,0],[1,2],[2,0],[4,2],[3,4]]",
        "output": "False"
      },
      {
        "input": "points = [[1,0],[0,1],[-1,0],[0,-1],[0.5,0.5]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[1,2],[2,2],[2,3],[1,4],[0,3],[0,2]]",
        "output": "False"
      },
      {
        "input": "points = [[-4,0],[-2,-2],[-2,-4],[0,-2],[2,-4],[2,-2],[4,0],[2,2],[2,4],[0,2],[-2,4]]",
        "output": "False"
      },
      {
        "input": "points = [[-1,-1],[-1,2],[2,-1],[2,2]]",
        "output": "False"
      },
      {
        "input": "points = [[-3,-1],[-2,-3],[-1,-2],[1,0],[2,1],[0,-2]]",
        "output": "False"
      },
      {
        "input": "points = [[-1000,-1000],[-1000,0],[0,0],[0,-1000],[500,500]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[1,3],[0,2],[0,1]]",
        "output": "True"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[4,6],[3,5],[2,6],[1,5]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[1,0],[2,1],[1,2],[0,2],[-1,1]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[0,10],[5,5],[10,10],[10,0]]",
        "output": "False"
      },
      {
        "input": "points = [[-2,-2],[-2,2],[2,2],[2,-2],[0,1]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[5,0],[5,5],[0,5],[2,2],[3,3]]",
        "output": "True"
      },
      {
        "input": "points = [[1,1],[2,2],[3,1],[2,0],[1,1]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[2,0],[2,2],[1,3],[0,2]]",
        "output": "True"
      },
      {
        "input": "points = [[1,1],[2,2],[3,1],[2,0],[1,0],[0,1]]",
        "output": "False"
      },
      {
        "input": "points = [[1,1],[2,2],[3,1],[2,-1],[1,-1],[0,0],[1,0],[2,0],[3,0]]",
        "output": "False"
      },
      {
        "input": "points = [[-1,1],[-2,1],[-3,0],[-2,-1],[-1,-1],[0,-1],[0,1]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[2,0],[1,1],[1,0]]",
        "output": "False"
      },
      {
        "input": "points = [[1,2],[3,4],[5,3],[4,1],[2,2],[4,5]]",
        "output": "False"
      },
      {
        "input": "points = [[1,1],[2,3],[3,2],[2,1],[1,2]]",
        "output": "False"
      },
      {
        "input": "points = [[-1,0],[0,1],[1,0],[0,-1],[-0.5,0.5]]",
        "output": "False"
      },
      {
        "input": "points = [[-1,0],[1,0],[0,1],[-1,-1],[1,-1]]",
        "output": "False"
      },
      {
        "input": "points = [[10,0],[10,10],[0,10],[5,5],[0,0]]",
        "output": "False"
      },
      {
        "input": "points = [[-1,-1],[1,-1],[1,1],[-1,1],[0,0]]",
        "output": "False"
      },
      {
        "input": "points = [[-3,2],[-2,-1],[-1,2],[0,-1],[1,2],[2,-1],[3,2]]",
        "output": "False"
      },
      {
        "input": "points = [[5,0],[5,4],[1,4],[0,2],[1,0],[2,0],[3,0],[4,0]]",
        "output": "True"
      },
      {
        "input": "points = [[-1,1],[0,2],[1,1],[0,0]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[1,0],[1,1],[2,1],[2,2],[1,2],[0,2],[-1,2],[-1,1],[-1,0]]",
        "output": "False"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[1,1],[2,0],[2,2],[1,3],[0,2]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[1,0],[1,1],[0,1],[-1,0]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[1,0],[2,1],[2,2],[1,3],[0,2]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[1,0],[2,0],[1,1],[0,1],[0.5,0.5],[1.5,0.5]]",
        "output": "False"
      },
      {
        "input": "points = [[1,1],[2,2],[3,1],[4,2],[5,1],[6,2],[7,1]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[5,0],[5,5],[0,5],[-2,2]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[1,1],[2,0],[1,-1],[0,-1],[0,0]]",
        "output": "True"
      },
      {
        "input": "points = [[-2,-2],[-1,-1],[-2,0],[0,-2],[0,0]]",
        "output": "True"
      },
      {
        "input": "points = [[10,10],[20,10],[20,20],[15,25],[10,20],[10,10]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[1,0],[2,1],[2,2],[3,2],[3,3],[2,4],[1,3],[0,2]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[1,1],[2,0],[1,-1],[0,-1],[-1,-1],[-1,0]]",
        "output": "False"
      },
      {
        "input": "points = [[-5,-5],[-4,-4],[-3,-5],[-4,-6]]",
        "output": "True"
      },
      {
        "input": "points = [[-2,0],[-3,-1],[-1,-1],[-1,-2],[-2,-2],[-3,-2]]",
        "output": "False"
      },
      {
        "input": "points = [[-3,0],[-2,1],[-1,0],[0,1],[1,0],[2,1],[3,0],[2,-1],[1,0],[0,-1],[-1,0],[-2,-1]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[2,0],[3,2],[2,4],[0,4],[1,2]]",
        "output": "False"
      },
      {
        "input": "points = [[1,2],[3,4],[5,3],[4,1],[2,3]]",
        "output": "False"
      },
      {
        "input": "points = [[1,1],[2,2],[3,1],[3,0],[2,-1],[1,-1],[0,0]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[2,0],[3,1],[2,2],[0,2],[-1,1]]",
        "output": "True"
      },
      {
        "input": "points = [[-5,0],[-5,5],[0,5],[5,0],[5,-5],[0,-5]]",
        "output": "True"
      },
      {
        "input": "points = [[1,1],[2,1],[3,2],[4,1],[3,0],[2,0],[1,0]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,1],[3,0],[2,-1],[1,-1],[0,-1]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[1,0],[1,1],[0,1],[0.5,0.25],[0.25,0.5]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[2,0],[3,1],[3,2],[2,3],[1,2],[0,1],[1,1]]",
        "output": "False"
      },
      {
        "input": "points = [[1,1],[2,3],[4,5],[5,4],[4,2],[3,1]]",
        "output": "True"
      },
      {
        "input": "points = [[1,0],[2,0],[3,1],[2,1],[1,2],[0,1],[0,0]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[2,1],[3,3],[1,4],[-1,3],[-2,1]]",
        "output": "True"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[4,3],[3,2],[2,1]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[5,0],[5,5],[2,5],[2,3],[0,3]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[5,0],[5,5],[0,5],[2,2]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0]]",
        "output": "True"
      },
      {
        "input": "points = [[1,0],[2,1],[2,3],[1,4],[0,3],[0,1]]",
        "output": "True"
      },
      {
        "input": "points = [[1,1],[4,1],[4,5],[2,5],[2,3],[0,5],[0,1],[2,1]]",
        "output": "False"
      },
      {
        "input": "points = [[-1,1],[-1,3],[2,2],[1,0],[0,0]]",
        "output": "True"
      },
      {
        "input": "points = [[0,0],[1,0],[2,1],[1,2],[0,1],[-1,1],[-1,2],[-2,1]]",
        "output": "False"
      },
      {
        "input": "points = [[100,100],[100,200],[200,200],[200,150],[150,150],[150,100]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[0,1],[1,1],[2,1],[2,0],[1,0],[1,1],[0,1]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[4,0],[4,4],[2,5],[0,4]]",
        "output": "True"
      },
      {
        "input": "points = [[-1,-1],[1,-1],[1,1],[-1,1],[0,2]]",
        "output": "False"
      },
      {
        "input": "points = [[0,0],[1,0],[1,1],[0.5,2],[0,1]]",
        "output": "True"
      },
      {
        "input": "points = [[1,2],[2,3],[3,2],[2,1],[1,2],[2,3],[3,2],[2,1]]",
        "output": "True"
      },
      {
        "input": "points = [[-1,1],[-2,0],[-1,-1],[1,-1],[2,0],[1,1]]",
        "output": "True"
      },
      {
        "input": "points = [[1,0],[0,1],[1,1],[0,-1],[-1,0]]",
        "output": "False"
      },
      {
        "input": "points = [[-5,-5],[-5,0],[0,0],[0,-5]]",
        "output": "True"
      },
      {
        "input": "points = [[-2,-2],[-2,-1],[-1,-2],[-1,-1],[0,0],[0,1],[1,0],[1,1]]",
        "output": "False"
      },
      {
        "input": "points = [[-1,1],[-2,2],[-1,3],[1,3],[2,2],[1,1]]",
        "output": "True"
      },
      {
        "input": "points = [[1,1],[2,2],[3,1],[3,2],[2,3],[1,2]]",
        "output": "False"
      }
    ]
  },
  {
    "id": 1156,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "problemDescription": "You are given a string text. You can swap two of the characters in the text.\nReturn the length of the longest substring with repeated characters.\n\u00a0\nExample 1:\n\nInput: text = \"ababa\"\nOutput: 3\nExplanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is \"aaa\" with length 3.\n\nExample 2:\n\nInput: text = \"aaabaaa\"\nOutput: 6\nExplanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring \"aaaaaa\" with length 6.\n\nExample 3:\n\nInput: text = \"aaaaa\"\nOutput: 5\nExplanation: No need to swap, longest repeated character substring is \"aaaaa\" with length is 5.\n\n\u00a0\nConstraints:\n\n1 <= text.length <= 2 * 104\ntext consist of lowercase English characters only.\n\n",
    "starterCode": "class Solution:\n    def maxRepOpt1(self, text: str) -> int:\n        ",
    "testCases": [
      {
        "input": "text = \"ababababab\"",
        "output": "3"
      },
      {
        "input": "text = \"abababababababab\"",
        "output": "3"
      },
      {
        "input": "text = \"ababa\"",
        "output": "3"
      },
      {
        "input": "text = \"aaaaa\"",
        "output": "5"
      },
      {
        "input": "text = \"zzzzzzzzzz\"",
        "output": "10"
      },
      {
        "input": "text = \"aabbccddeeffgg\"",
        "output": "2"
      },
      {
        "input": "text = \"aabbccdd\"",
        "output": "2"
      },
      {
        "input": "text = \"abacabadabacaba\"",
        "output": "3"
      },
      {
        "input": "text = \"abbcccddddeeefffggghhh\"",
        "output": "4"
      },
      {
        "input": "text = \"zzzxxzzz\"",
        "output": "4"
      },
      {
        "input": "text = \"aabbaa\"",
        "output": "3"
      },
      {
        "input": "text = \"ababababababababababababababababababababababababababababababababababababababababababababababababababab\"",
        "output": "3"
      },
      {
        "input": "text = \"abcdefgabcdefgabcdefg\"",
        "output": "2"
      },
      {
        "input": "text = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "106"
      },
      {
        "input": "text = \"abcdabcabc\"",
        "output": "2"
      },
      {
        "input": "text = \"abbcccddddeee\"",
        "output": "4"
      },
      {
        "input": "text = \"zzzzzzzzzzzzzzzzzzzz\"",
        "output": "20"
      },
      {
        "input": "text = \"aabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccdd\"",
        "output": "3"
      },
      {
        "input": "text = \"ababcababcab\"",
        "output": "3"
      },
      {
        "input": "text = \"aabbccddeeffgghhii\"",
        "output": "2"
      },
      {
        "input": "text = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "2"
      },
      {
        "input": "text = \"aaabaaa\"",
        "output": "6"
      },
      {
        "input": "text = \"aabacaaa\"",
        "output": "5"
      },
      {
        "input": "text = \"abcdefgabcdefg\"",
        "output": "2"
      },
      {
        "input": "text = \"abcde\"",
        "output": "1"
      },
      {
        "input": "text = \"aaabbaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaabbaaab\"",
        "output": "4"
      },
      {
        "input": "text = \"zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "2"
      },
      {
        "input": "text = \"aabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccdd\"",
        "output": "3"
      },
      {
        "input": "text = \"aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnoooo\"",
        "output": "4"
      },
      {
        "input": "text = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "2"
      },
      {
        "input": "text = \"abababababababababababababab\"",
        "output": "3"
      },
      {
        "input": "text = \"abacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadaba\"",
        "output": "3"
      },
      {
        "input": "text = \"aabbccccaaaabbccccaaaabbccccaaaabbccccaaaabbccccaaaabbccccaaaabbccccaaaabbccccaaaabbccccaaaa\"",
        "output": "5"
      },
      {
        "input": "text = \"abacabadabacab\"",
        "output": "3"
      },
      {
        "input": "text = \"aabbccccddddddaaaabbbcccc\"",
        "output": "6"
      },
      {
        "input": "text = \"abracadabraabracadabraabracadabra\"",
        "output": "3"
      },
      {
        "input": "text = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "2"
      },
      {
        "input": "text = \"aaaaaaaaaabbbbbbbbbbccccccccccddddddddddaaaaaaaaaabbbbbbbbbbccccccccccddddddddddaaaaaaaaaabbbbbbbbbb\"",
        "output": "11"
      },
      {
        "input": "text = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzyxwvuutsrqponmlkjihgfedcba\"",
        "output": "3"
      },
      {
        "input": "text = \"abababababababababababababababababababababababababababababababababababababababababababababab\"",
        "output": "3"
      },
      {
        "input": "text = \"xyzyxyzyxyzyzyzyzyzyzyzyzyzyzyzyzyzyzyz\"",
        "output": "3"
      },
      {
        "input": "text = \"aaaaabbbbbbccccccdddddeeeeeffffffffgggggghhhhhhiiiiiiijjjjjjkkkkkkklllllllmmmmmmmnnnnnnnooooooo\"",
        "output": "8"
      },
      {
        "input": "text = \"aabccbaabbccbaabbccbaabbccbaabbccbaabbccbaabbccbaabbccbaabbccbaabbccbaabbccbaabbccbaabbccba\"",
        "output": "3"
      },
      {
        "input": "text = \"aabbaabbaaabbbaabbaabbaabb\"",
        "output": "4"
      },
      {
        "input": "text = \"qqqqwweerrttyyuiioopplkkjjhhggffddssaazzzxxxxccvvbbnmm\"",
        "output": "4"
      },
      {
        "input": "text = \"aabbaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccddeeaabbccdd\"",
        "output": "3"
      },
      {
        "input": "text = \"ppppooooiiiiuuuueeeeooooooooaaaaaaaaaaaaaaaaaabbbbbbbbbbbb\"",
        "output": "18"
      },
      {
        "input": "text = \"abccbaabccbaabccbaabccba\"",
        "output": "3"
      },
      {
        "input": "text = \"abcabcabcabcabcabc\"",
        "output": "2"
      },
      {
        "input": "text = \"abcdabcabcdabcabcdabcabcd\"",
        "output": "2"
      },
      {
        "input": "text = \"aabbaaabbbaaabbaabbbaa\"",
        "output": "4"
      },
      {
        "input": "text = \"aabbbccddddeeefffggg\"",
        "output": "4"
      },
      {
        "input": "text = \"aabbaaabbbaaaabbbbaaabbbbaaaabbbbaaabbbbaaaabbbbaaabbbbaaaabbbbaaabbbbaaaabbbbaaabbbbaaaabb\"",
        "output": "5"
      },
      {
        "input": "text = \"xyzzzzzzzzzzzzzyxzzzzzzzzzzzzzyx\"",
        "output": "14"
      },
      {
        "input": "text = \"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde\"",
        "output": "2"
      },
      {
        "input": "text = \"abcdeedcbaedcbaedcba\"",
        "output": "3"
      }
    ]
  },
  {
    "id": 2342,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 0-indexed array nums consisting of positive integers. You can choose two indices i and j, such that i != j, and the sum of digits of the number nums[i] is equal to that of nums[j].\nReturn the maximum value of nums[i] + nums[j] that you can obtain over all possible indices i and j that satisfy the conditions. If no such pair of indices exists, return -1.\n\u00a0\nExample 1:\n\nInput: nums = [18,43,36,13,7]\nOutput: 54\nExplanation: The pairs (i, j) that satisfy the conditions are:\n- (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54.\n- (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50.\nSo the maximum sum that we can obtain is 54.\n\nExample 2:\n\nInput: nums = [10,12,19,14]\nOutput: -1\nExplanation: There are no two numbers that satisfy the conditions, so we return -1.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def maximumSum(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [99,18,81,27]",
        "output": "108"
      },
      {
        "input": "nums = [55,23,45,55,23]",
        "output": "110"
      },
      {
        "input": "nums = [55,23,45,55]",
        "output": "110"
      },
      {
        "input": "nums = [111,222,333,444]",
        "output": "-1"
      },
      {
        "input": "nums = [1000000000]",
        "output": "-1"
      },
      {
        "input": "nums = [5,5,5,5,5]",
        "output": "10"
      },
      {
        "input": "nums = [999999999, 999999999]",
        "output": "1999999998"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "-1"
      },
      {
        "input": "nums = [999999999,111111111,222222222]",
        "output": "-1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9]",
        "output": "-1"
      },
      {
        "input": "nums = [99,18,81,27,72]",
        "output": "153"
      },
      {
        "input": "nums = [9,99,999,9999]",
        "output": "-1"
      },
      {
        "input": "nums = [100,200,300,400,500]",
        "output": "-1"
      },
      {
        "input": "nums = [1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1]",
        "output": "1100000000"
      },
      {
        "input": "nums = [89,98,76,67,54,45,32,23,10,1]",
        "output": "187"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5]",
        "output": "10"
      },
      {
        "input": "nums = [55,23,32,44,55]",
        "output": "110"
      },
      {
        "input": "nums = [55,23,45,67,89,90,11]",
        "output": "135"
      },
      {
        "input": "nums = [123,321,213,132,231,312]",
        "output": "633"
      },
      {
        "input": "nums = [10,12,19,14]",
        "output": "-1"
      },
      {
        "input": "nums = [18,43,36,13,7]",
        "output": "54"
      },
      {
        "input": "nums = [123,321,213]",
        "output": "534"
      },
      {
        "input": "nums = [55,23,45,67,89,90]",
        "output": "135"
      },
      {
        "input": "nums = [123,321,213,132,312,231]",
        "output": "633"
      },
      {
        "input": "nums = [111,222,333,444,555,666,777,888,999]",
        "output": "-1"
      },
      {
        "input": "nums = [123456789, 987654321, 234567891, 123456789, 987654321]",
        "output": "1975308642"
      },
      {
        "input": "nums = [123456789,987654321,111111111,222222222,333333333,444444444,555555555,666666666,777777777,888888888]",
        "output": "1543209876"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "1100"
      },
      {
        "input": "nums = [55555, 44444, 33333, 22222, 11111, 66666, 77777, 88888, 99999]",
        "output": "-1"
      },
      {
        "input": "nums = [12345, 54321, 13452, 21435, 23541, 32145, 42315, 52314, 34512, 54123]",
        "output": "108444"
      },
      {
        "input": "nums = [12345, 54321, 23451, 45123, 34512, 123456, 654321, 234516, 165432, 321654, 654123, 412365, 564321, 123654, 654312]",
        "output": "1308633"
      },
      {
        "input": "nums = [123, 321, 231, 312, 132, 213, 456, 654, 564, 546, 465, 645, 789, 987, 897, 879, 798, 978]",
        "output": "1965"
      },
      {
        "input": "nums = [1001, 1100, 1010, 1001, 2002, 2020, 2200, 3003, 3030, 3300]",
        "output": "6330"
      },
      {
        "input": "nums = [123456789, 987654321, 234567891, 345678912, 456789123, 567891234, 678912345, 789123456, 891234567]",
        "output": "1878888888"
      },
      {
        "input": "nums = [1000000001, 1000000011, 1000000111, 1000001111, 1000011111, 1000111111, 1001111111, 1011111111, 1111111111]",
        "output": "-1"
      },
      {
        "input": "nums = [1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999, 10000]",
        "output": "-1"
      },
      {
        "input": "nums = [123, 132, 213, 231, 312, 321, 456, 465, 546, 564, 645, 654, 789, 798, 879, 897, 978, 987, 101, 110, 1001, 1010, 1100]",
        "output": "2110"
      },
      {
        "input": "nums = [555555555, 222222222, 333333333, 444444444, 55555555, 22222222, 33333333, 44444444, 5555555, 2222222, 3333333, 4444444]",
        "output": "-1"
      },
      {
        "input": "nums = [999999999,888888888,777777777,666666666,555555555,444444444,333333333,222222222,111111111]",
        "output": "-1"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999]",
        "output": "1100000000"
      },
      {
        "input": "nums = [123, 321, 213, 132, 312, 231, 111, 222, 333]",
        "output": "633"
      },
      {
        "input": "nums = [999, 111, 222, 333, 444, 555, 666, 777, 888, 999]",
        "output": "1998"
      },
      {
        "input": "nums = [1001,1100,1010,10001,9999,8888,7777,6666,5555,4444,3333,2222,1111]",
        "output": "11101"
      },
      {
        "input": "nums = [99, 999, 9999, 99999, 999999]",
        "output": "-1"
      },
      {
        "input": "nums = [1234567, 7654321, 2345678, 8765432, 3456789, 9876543, 4567890, 0987654]",
        "output": "Error: Solution.maximumSum() missing 1 required positional argument: 'nums'"
      },
      {
        "input": "nums = [111111111, 222222222, 333333333, 444444444, 555555555, 666666666, 777777777, 888888888, 999999999, 123456789, 987654321]",
        "output": "1543209876"
      },
      {
        "input": "nums = [1234, 4321, 2341, 1432, 1243, 2413, 3412, 4123, 1342, 3241]",
        "output": "8444"
      },
      {
        "input": "nums = [999999999, 111111111, 222222222, 333333333, 444444444]",
        "output": "-1"
      },
      {
        "input": "nums = [987654321, 123456789, 98765432, 12345678, 9876543, 1234567]",
        "output": "1111111110"
      },
      {
        "input": "nums = [1001, 1010, 1100, 2002, 2020, 2200, 3003, 3030, 3300]",
        "output": "6330"
      },
      {
        "input": "nums = [11112, 22223, 33334, 44445, 55556, 66667, 77778, 88889, 99990]",
        "output": "177768"
      },
      {
        "input": "nums = [123, 321, 111, 456, 654, 789, 987]",
        "output": "1776"
      },
      {
        "input": "nums = [987654321, 123456789, 111222333, 333222111, 444444444, 555555555]",
        "output": "1543209876"
      },
      {
        "input": "nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 100, 200, 300, 400, 500, 600, 700, 800, 900]",
        "output": "1233"
      },
      {
        "input": "nums = [876, 768, 687, 867, 678, 786, 543, 456, 345, 435, 543, 534]",
        "output": "1743"
      },
      {
        "input": "nums = [12345, 54321, 11111, 22222, 33333, 44444, 55555, 66666, 77777, 88888, 99999]",
        "output": "87654"
      },
      {
        "input": "nums = [1111111111,111111111,11111111,1111111,111111,11111,1111,111,11,1]",
        "output": "-1"
      },
      {
        "input": "nums = [54321, 21345, 32145, 45321, 14523, 51423, 23451, 34512, 45123, 12354]",
        "output": "105744"
      },
      {
        "input": "nums = [111, 1111, 11111, 111111, 1111111, 11111111, 111111111, 1111111111, 11111111111]",
        "output": "-1"
      },
      {
        "input": "nums = [123,321,456,654,789,987,111,222,333,444,555,666,777,888,999]",
        "output": "1875"
      },
      {
        "input": "nums = [500000000,499999999,1,2,3,4,5,6,7,8,9,999999999]",
        "output": "500000005"
      },
      {
        "input": "nums = [12, 21, 30, 13, 31, 40, 24, 42, 33, 50]",
        "output": "75"
      },
      {
        "input": "nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]",
        "output": "-1"
      },
      {
        "input": "nums = [123, 321, 213, 111, 222, 333]",
        "output": "543"
      },
      {
        "input": "nums = [999, 111, 222, 333, 444, 555, 666, 777, 888]",
        "output": "-1"
      },
      {
        "input": "nums = [9,90,900,9000,90000,900000,9000000,90000000,900000000]",
        "output": "990000000"
      },
      {
        "input": "nums = [123456789, 987654321, 111111111, 222222222, 333333333, 444444444, 555555555, 666666666, 777777777, 888888888]",
        "output": "1543209876"
      },
      {
        "input": "nums = [9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999]",
        "output": "-1"
      },
      {
        "input": "nums = [199, 288, 377, 466, 555, 644, 733, 822, 911, 1000]",
        "output": "-1"
      },
      {
        "input": "nums = [123, 321, 213, 132, 312, 231]",
        "output": "633"
      },
      {
        "input": "nums = [12345,54321,23451,15432,67890,98760,89076,76980,32145,54312]",
        "output": "187836"
      },
      {
        "input": "nums = [999999999, 111111111, 222222222, 333333333, 444444444, 555555555, 666666666, 777777777, 888888888]",
        "output": "-1"
      },
      {
        "input": "nums = [123456789, 12345678, 1234567, 123456, 12345, 1234, 123, 12, 1]",
        "output": "-1"
      },
      {
        "input": "nums = [123,321,213,132,231,312,456,654,546,465,564,645,789,987,897,798,879,978]",
        "output": "1965"
      },
      {
        "input": "nums = [987654321, 123456789, 234567891, 345678912, 456789123]",
        "output": "1444443444"
      },
      {
        "input": "nums = [9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 18, 81, 123, 321, 132, 213, 231, 312]",
        "output": "633"
      },
      {
        "input": "nums = [123456789, 987654321, 123456789, 987654321]",
        "output": "1975308642"
      },
      {
        "input": "nums = [100, 101, 110, 111, 200, 201, 210, 211, 300, 301, 310, 311]",
        "output": "611"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]",
        "output": "1100000000"
      },
      {
        "input": "nums = [9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 18, 27, 36, 45, 54, 63, 72, 81, 90]",
        "output": "171"
      },
      {
        "input": "nums = [123, 321, 213, 111, 222, 333, 444, 555, 666, 777, 888, 999]",
        "output": "543"
      },
      {
        "input": "nums = [99999999, 9999999, 999999, 99999, 9999, 999, 99, 9, 88888888, 8888888, 888888, 88888, 8888, 888, 88, 8]",
        "output": "-1"
      },
      {
        "input": "nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 1001, 2002, 3003, 4004, 5005, 6006, 7007, 8008, 9009]",
        "output": "9675"
      },
      {
        "input": "nums = [12,21,13,31,14,41,15,51,16,61,17,71,18,81,19,91]",
        "output": "110"
      },
      {
        "input": "nums = [9, 99, 999, 9999, 99999, 999999, 9999999]",
        "output": "-1"
      },
      {
        "input": "nums = [1001, 110, 1110, 1011, 11100, 11110, 10111]",
        "output": "21221"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000]",
        "output": "1100"
      },
      {
        "input": "nums = [99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 9999999999]",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "31"
      },
      {
        "input": "nums = [123, 234, 345, 456, 567, 678, 789, 890, 901, 102]",
        "output": "-1"
      },
      {
        "input": "nums = [100000000, 100000001, 100000002, 100000003, 100000004, 100000005]",
        "output": "-1"
      },
      {
        "input": "nums = [1001,1010,1100,2002,2020,2200,3003,3030,3300]",
        "output": "6330"
      },
      {
        "input": "nums = [999, 888, 777, 666, 555, 444, 333, 222, 111, 0]",
        "output": "-1"
      },
      {
        "input": "nums = [123456789, 987654321, 111222333, 444555666, 777888999]",
        "output": "1432209987"
      },
      {
        "input": "nums = [123456789,987654321,234567891,123456782,111111111]",
        "output": "1222222212"
      },
      {
        "input": "nums = [1001, 2002, 3003, 4004, 5005, 6006, 7007, 8008, 9009]",
        "output": "-1"
      },
      {
        "input": "nums = [123, 321, 456, 654, 789, 987, 234, 432, 567, 765, 890, 980]",
        "output": "1870"
      },
      {
        "input": "nums = [100000000, 200000000, 300000000, 111111111, 222222222, 333333333]",
        "output": "-1"
      },
      {
        "input": "nums = [1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000]",
        "output": "1100000000"
      },
      {
        "input": "nums = [98765, 56789, 12345, 54321, 67890, 9876, 6789, 1234, 5678, 2345]",
        "output": "155554"
      },
      {
        "input": "nums = [56, 65, 74, 47, 83, 38, 92, 29, 101, 110]",
        "output": "211"
      },
      {
        "input": "nums = [99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 99990]",
        "output": "-1"
      },
      {
        "input": "nums = [1000000000, 100000000, 10000000, 1000000, 100000, 10000, 1000, 100, 10, 1]",
        "output": "1100000000"
      },
      {
        "input": "nums = [876543210, 123456789, 111222333, 444555666, 777888999, 555555555, 666666666]",
        "output": "1000111221"
      },
      {
        "input": "nums = [999999999,888888888,777777777,666666666,555555555,444444444,333333333,222222222,111111111,100000000]",
        "output": "-1"
      },
      {
        "input": "nums = [12345, 54321, 1234, 4321, 123, 321, 12, 21, 1, 0]",
        "output": "66666"
      },
      {
        "input": "nums = [999999999, 111111111, 222222222, 333333333, 444444444, 555555555]",
        "output": "-1"
      },
      {
        "input": "nums = [123, 1230, 1203, 1023, 10023, 100023, 1000023, 10000023, 100000023]",
        "output": "110000046"
      },
      {
        "input": "nums = [112,121,211,221,212,122,333,444,555,666,777,888,999,1001,1010,1100]",
        "output": "2110"
      },
      {
        "input": "nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]",
        "output": "633"
      },
      {
        "input": "nums = [111111111, 222222222, 333333333, 444444444, 555555555, 666666666, 777777777, 888888888, 999999999]",
        "output": "-1"
      },
      {
        "input": "nums = [1001, 2002, 3003, 4004, 5005, 6006, 7007, 8008, 9009, 1101, 2202, 3303, 4404, 5505]",
        "output": "10410"
      },
      {
        "input": "nums = [101, 110, 202, 220, 303, 330, 404, 440, 505, 550]",
        "output": "1055"
      },
      {
        "input": "nums = [1234, 4321, 2134, 1324, 2341, 3412, 3421, 4231, 4123, 2431]",
        "output": "8552"
      },
      {
        "input": "nums = [101, 202, 303, 404, 505, 606, 707, 808, 909]",
        "output": "-1"
      },
      {
        "input": "nums = [123, 321, 213, 132, 231, 312, 12, 21, 111, 222, 333, 444, 555, 666, 777, 888, 999]",
        "output": "633"
      },
      {
        "input": "nums = [11111, 22222, 33333, 44444, 55555, 66666, 77777, 88888, 99999]",
        "output": "-1"
      },
      {
        "input": "nums = [987654321, 98765432, 9876543, 987654, 98765, 9876, 987, 98, 9]",
        "output": "-1"
      },
      {
        "input": "nums = [123,321,213,456,654,564,999,888,777,111]",
        "output": "1218"
      },
      {
        "input": "nums = [987,654,321,432,789,123]",
        "output": "1776"
      },
      {
        "input": "nums = [88, 88, 88, 88, 88, 88, 88, 88, 88, 88]",
        "output": "176"
      },
      {
        "input": "nums = [1000000000,999999999,888888888,777777777,666666666,555555555,444444444,333333333,222222222,111111111,100000000,10000000,1000000,100000,10000,1000,100,10,1]",
        "output": "1100000000"
      }
    ]
  },
  {
    "id": 1040,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Two Pointers",
      "Sorting"
    ],
    "problemDescription": "There are some stones in different positions on the X-axis. You are given an integer array stones, the positions of the stones.\nCall a stone an endpoint stone if it has the smallest or largest position. In one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.\n\nIn particular, if the stones are at say, stones = [1,2,5], you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone.\n\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\nReturn an integer array answer of length 2 where:\n\nanswer[0] is the minimum number of moves you can play, and\nanswer[1] is the maximum number of moves you can play.\n\n\u00a0\nExample 1:\n\nInput: stones = [7,4,9]\nOutput: [1,2]\nExplanation: We can move 4 -> 8 for one move to finish the game.\nOr, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.\n\nExample 2:\n\nInput: stones = [6,5,4,3,10]\nOutput: [2,3]\nExplanation: We can move 3 -> 8 then 10 -> 7 to finish the game.\nOr, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.\nNotice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.\n\n\u00a0\nConstraints:\n\n3 <= stones.length <= 104\n1 <= stones[i] <= 109\nAll the values of stones are unique.\n\n",
    "starterCode": "class Solution:\n    def numMovesStonesII(self, stones: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "stones = [4,5,6,7,100]",
        "output": "[2, 92]"
      },
      {
        "input": "stones = [10,11,12,14,15,16]",
        "output": "[1, 1]"
      },
      {
        "input": "stones = [3,6,9,12,15]",
        "output": "[3, 6]"
      },
      {
        "input": "stones = [6,5,4,3,10]",
        "output": "[2, 3]"
      },
      {
        "input": "stones = [1,3,5,7,9]",
        "output": "[2, 3]"
      },
      {
        "input": "stones = [1,1000000000,2000000000]",
        "output": "[2, 999999999]"
      },
      {
        "input": "stones = [7,4,9]",
        "output": "[1, 2]"
      },
      {
        "input": "stones = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 0]"
      },
      {
        "input": "stones = [100,101,102,103]",
        "output": "[0, 0]"
      },
      {
        "input": "stones = [1,2,100,101,102]",
        "output": "[2, 97]"
      },
      {
        "input": "stones = [1,5,9,14,15]",
        "output": "[3, 10]"
      },
      {
        "input": "stones = [1,5,100]",
        "output": "[2, 94]"
      },
      {
        "input": "stones = [1,2,5,7,9]",
        "output": "[2, 4]"
      },
      {
        "input": "stones = [10,11,12,13,14,15]",
        "output": "[0, 0]"
      },
      {
        "input": "stones = [2,3,6,8,9]",
        "output": "[2, 3]"
      },
      {
        "input": "stones = [1,2,5]",
        "output": "[2, 2]"
      },
      {
        "input": "stones = [1,2,3,4,5]",
        "output": "[0, 0]"
      },
      {
        "input": "stones = [1,2,3,4,10,11,12,13]",
        "output": "[4, 5]"
      },
      {
        "input": "stones = [1,100,101,102]",
        "output": "[2, 98]"
      },
      {
        "input": "stones = [1,2,3,8,10]",
        "output": "[2, 5]"
      },
      {
        "input": "stones = [1,2,1000,1001,1002,1003]",
        "output": "[2, 997]"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[0, 0]"
      },
      {
        "input": "stones = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45]",
        "output": "[10, 26]"
      },
      {
        "input": "stones = [1, 10, 11, 12, 13, 14, 15, 20]",
        "output": "[2, 8]"
      },
      {
        "input": "stones = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91, 101]",
        "output": "[9, 81]"
      },
      {
        "input": "stones = [5,6,10,11,15,16,20,21,25,26,30,31,35,36,40]",
        "output": "[9, 21]"
      },
      {
        "input": "stones = [10,11,12,13,14,15,16,17,18,19,20,100,101]",
        "output": "[2, 79]"
      },
      {
        "input": "stones = [1, 2, 10, 20, 30, 40, 50, 60, 70, 80]",
        "output": "[7, 70]"
      },
      {
        "input": "stones = [1,2,1000,2000,3000,4000,5000]",
        "output": "[5, 4993]"
      },
      {
        "input": "stones = [1,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[2, 8]"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "[0, 0]"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,100]",
        "output": "[2, 79]"
      },
      {
        "input": "stones = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "output": "[7, 88]"
      },
      {
        "input": "stones = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]",
        "output": "[8, 20]"
      },
      {
        "input": "stones = [1,3,10,15,18,25]",
        "output": "[4, 18]"
      },
      {
        "input": "stones = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "[14, 126]"
      },
      {
        "input": "stones = [1,2,5,6,9,10,13,14,17,18,21,22,25,26,29,30]",
        "output": "[8, 14]"
      },
      {
        "input": "stones = [10, 11, 12, 20, 21, 22, 23, 24]",
        "output": "[3, 7]"
      },
      {
        "input": "stones = [1, 3, 5, 7, 9, 11, 15]",
        "output": "[3, 7]"
      },
      {
        "input": "stones = [1,3,6,8,12,15,18,22,25]",
        "output": "[5, 15]"
      },
      {
        "input": "stones = [2, 5, 7, 12, 15, 18, 22, 25, 28, 32, 35, 38]",
        "output": "[8, 23]"
      },
      {
        "input": "stones = [100, 101, 102, 200, 201, 202, 300, 301, 302]",
        "output": "[6, 194]"
      },
      {
        "input": "stones = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97,100]",
        "output": "[19, 72]"
      },
      {
        "input": "stones = [1,3,6,10,15,21,28,36,45,55,66,78,91,105,120,136,153,171,190,210,231,253,276,300,325,351,378,406,435,465,496,528,561,595,630,666,703,741,780,820,861,903,946,990,1035,1081,1128,1176,1225,1275,1326,1378,1431,1485,1540,1596,1653,1711,1770,1830,1891,1953,2016,2080,2145,2211,2278,2346,2415,2485,2556,2628,2701,2775,2850,2926,3003,3081,3160,3240,3321,3403,3486,3570,3655,3741,3828,3916,4005,4095,4186,4278,4371,4465,4560,4656,4753,4851,4950]",
        "output": "[86, 4850]"
      },
      {
        "input": "stones = [1, 3, 6, 8, 10, 13, 16, 18, 21]",
        "output": "[5, 11]"
      },
      {
        "input": "stones = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990, 1035, 1081]",
        "output": "[37, 1034]"
      },
      {
        "input": "stones = [1, 2, 3, 6, 10]",
        "output": "[2, 5]"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "[0, 0]"
      },
      {
        "input": "stones = [5, 10, 15, 20, 25, 30, 35]",
        "output": "[5, 20]"
      },
      {
        "input": "stones = [1,2,3,4,5,10,11,12,13,14,20,21,22,23,24,30,31,32,33,34,40,41,42,43,44,50,51,52,53,54]",
        "output": "[14, 24]"
      },
      {
        "input": "stones = [1,2,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120]",
        "output": "[2, 97]"
      },
      {
        "input": "stones = [1, 2, 3, 10, 11, 12, 20, 21, 22, 30]",
        "output": "[6, 20]"
      },
      {
        "input": "stones = [1, 2, 3, 4, 100, 101, 102]",
        "output": "[3, 95]"
      },
      {
        "input": "stones = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]",
        "output": "[18, 171]"
      },
      {
        "input": "stones = [1,100,200,300,400,500,600,700,800,900,1000]",
        "output": "[10, 891]"
      },
      {
        "input": "stones = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190]",
        "output": "[17, 162]"
      },
      {
        "input": "stones = [1, 2, 3, 4, 100, 101, 102, 103]",
        "output": "[4, 95]"
      },
      {
        "input": "stones = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113]",
        "output": "[21, 81]"
      },
      {
        "input": "stones = [5,15,25,35,45,55,65,75,85,95,105]",
        "output": "[9, 81]"
      },
      {
        "input": "stones = [1,2,1000000000]",
        "output": "[2, 999999997]"
      },
      {
        "input": "stones = [1, 2, 3, 100, 101, 102, 200, 201, 202, 300]",
        "output": "[7, 290]"
      },
      {
        "input": "stones = [1,2,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[2, 7]"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,100]",
        "output": "[2, 90]"
      },
      {
        "input": "stones = [2,5,7,10,15,20,30]",
        "output": "[4, 20]"
      },
      {
        "input": "stones = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]",
        "output": "[15, 72]"
      },
      {
        "input": "stones = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300]",
        "output": "[27, 261]"
      },
      {
        "input": "stones = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]",
        "output": "[6, 11]"
      },
      {
        "input": "stones = [10,20,30,40,50,60,70,80,90,100,110,120,130]",
        "output": "[11, 99]"
      },
      {
        "input": "stones = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40]",
        "output": "[3, 27]"
      },
      {
        "input": "stones = [1,2,4,6,8,10,12,14,16,18,20,22,24,26,28]",
        "output": "[7, 13]"
      },
      {
        "input": "stones = [1, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[8, 36]"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[0, 0]"
      },
      {
        "input": "stones = [1,2,3,7,8,9,13,14,15,19,20,21]",
        "output": "[6, 9]"
      },
      {
        "input": "stones = [2, 5, 7, 8, 11, 13, 15, 17, 19, 22, 25, 27, 29]",
        "output": "[6, 14]"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1000]",
        "output": "[2, 980]"
      },
      {
        "input": "stones = [1,2,3,6,7,8,10,11,12,15,16,17]",
        "output": "[3, 5]"
      },
      {
        "input": "stones = [1,3,5,7,9,11,13,15,17,19,21,23,25]",
        "output": "[6, 11]"
      },
      {
        "input": "stones = [10,20,30,40,50,60,70,80,90,100]",
        "output": "[9, 72]"
      },
      {
        "input": "stones = [1,2,3,8,9,10,11]",
        "output": "[3, 4]"
      },
      {
        "input": "stones = [1,5,10,15,20,25,30,35,40,45,50]",
        "output": "[8, 36]"
      },
      {
        "input": "stones = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,30]",
        "output": "[7, 14]"
      },
      {
        "input": "stones = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "[6, 502]"
      },
      {
        "input": "stones = [1,2,3,5,6,7,10,11,12,15,16,17,20,21,22,25,26,27]",
        "output": "[6, 9]"
      },
      {
        "input": "stones = [1, 2, 3, 4, 5, 6, 7, 100, 101, 102, 103, 104, 105, 106]",
        "output": "[7, 92]"
      },
      {
        "input": "stones = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35]",
        "output": "[9, 16]"
      },
      {
        "input": "stones = [1,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,11000,12000,13000,14000,15000,16000,17000,18000,19000,20000]",
        "output": "[20, 18981]"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,20,21,22,23,24,25]",
        "output": "[6, 9]"
      },
      {
        "input": "stones = [2,4,5,6,8,10,11,13,15,16]",
        "output": "[3, 5]"
      },
      {
        "input": "stones = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190]",
        "output": "[17, 162]"
      },
      {
        "input": "stones = [1,10,20,30,40,50,60,70,80,90,100,200,300,400,500]",
        "output": "[13, 477]"
      },
      {
        "input": "stones = [1,2,3,4,9,10,11,12,17,18,19,20]",
        "output": "[4, 8]"
      },
      {
        "input": "stones = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150,155,160,165,170,175,180,185,190,195,200,205,210,215,220,225,230,235,240,245,250]",
        "output": "[40, 196]"
      },
      {
        "input": "stones = [1, 2, 3, 5, 6, 8, 10, 11]",
        "output": "[2, 3]"
      },
      {
        "input": "stones = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[9, 81]"
      },
      {
        "input": "stones = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57]",
        "output": "[11, 39]"
      },
      {
        "input": "stones = [1,2,3,8,9,10,11,16,17,18,19,24,25,26,27]",
        "output": "[7, 12]"
      },
      {
        "input": "stones = [2, 5, 7, 11, 14, 17, 20]",
        "output": "[4, 10]"
      },
      {
        "input": "stones = [1, 4, 8, 10, 13, 17, 20]",
        "output": "[4, 11]"
      },
      {
        "input": "stones = [1,2,3,4,5,100,101,102,103,104]",
        "output": "[5, 94]"
      },
      {
        "input": "stones = [1, 2, 5, 7, 11, 13, 17, 19]",
        "output": "[4, 11]"
      },
      {
        "input": "stones = [3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105]",
        "output": "[9, 88]"
      },
      {
        "input": "stones = [1, 2, 3, 8, 9, 10]",
        "output": "[3, 4]"
      },
      {
        "input": "stones = [5, 10, 15, 20, 25, 30, 35, 40]",
        "output": "[6, 24]"
      },
      {
        "input": "stones = [1,3,6,10,14,15]",
        "output": "[3, 9]"
      },
      {
        "input": "stones = [1,3,5,7,9,100]",
        "output": "[3, 93]"
      },
      {
        "input": "stones = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130]",
        "output": "[21, 100]"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150]",
        "output": "[0, 0]"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,25,26,27,28,29,30]",
        "output": "[4, 4]"
      },
      {
        "input": "stones = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500]",
        "output": "[45, 441]"
      },
      {
        "input": "stones = [1,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,40]",
        "output": "[2, 9]"
      },
      {
        "input": "stones = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "[7, 13]"
      },
      {
        "input": "stones = [1,2,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "[16, 78]"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[0, 0]"
      },
      {
        "input": "stones = [2,5,7,8,11,13,16,20]",
        "output": "[4, 9]"
      },
      {
        "input": "stones = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[8, 32]"
      },
      {
        "input": "stones = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]",
        "output": "[6, 44]"
      },
      {
        "input": "stones = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75]",
        "output": "[12, 52]"
      },
      {
        "input": "stones = [1,10,20,30,40,50,60,70,80,90]",
        "output": "[8, 72]"
      },
      {
        "input": "stones = [1,2,3,1000000000,2000000000]",
        "output": "[2, 1999999995]"
      },
      {
        "input": "stones = [1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000]",
        "output": "[8, 999999982]"
      },
      {
        "input": "stones = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "[9, 792]"
      },
      {
        "input": "stones = [1, 2, 3, 4, 100, 101, 102, 150]",
        "output": "[4, 142]"
      },
      {
        "input": "stones = [5,10,15,20,25,30,35,40,45,50]",
        "output": "[8, 32]"
      },
      {
        "input": "stones = [1, 2, 3, 4, 5, 100, 101, 102, 103, 104]",
        "output": "[5, 94]"
      },
      {
        "input": "stones = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 100, 101, 102, 103, 104, 105]",
        "output": "[6, 84]"
      },
      {
        "input": "stones = [100,101,102,103,104,200,201,202,203,204]",
        "output": "[5, 95]"
      },
      {
        "input": "stones = [1,3,10,20,30,40,50]",
        "output": "[5, 42]"
      },
      {
        "input": "stones = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "[16, 76]"
      },
      {
        "input": "stones = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "[13, 117]"
      },
      {
        "input": "stones = [2,5,10,15,20,25,30,35,40]",
        "output": "[6, 28]"
      },
      {
        "input": "stones = [1, 3, 5, 10, 20, 30]",
        "output": "[3, 23]"
      },
      {
        "input": "stones = [1,2,5,6,10,11,13,14,17,18]",
        "output": "[4, 8]"
      },
      {
        "input": "stones = [1, 2, 3, 4, 5, 10, 11, 12, 13, 14]",
        "output": "[4, 4]"
      },
      {
        "input": "stones = [1, 2, 3, 10, 11, 12]",
        "output": "[3, 6]"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,100]",
        "output": "[2, 89]"
      },
      {
        "input": "stones = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[0, 0]"
      },
      {
        "input": "stones = [1,3,6,10,15,21,28,36,45,55,66,78,91,105]",
        "output": "[10, 90]"
      },
      {
        "input": "stones = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]",
        "output": "[6, 10]"
      },
      {
        "input": "stones = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "[16, 72]"
      },
      {
        "input": "stones = [1,1000000000]",
        "output": "[2, 0]"
      }
    ]
  },
  {
    "id": 2333,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Binary Search",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given two positive 0-indexed integer arrays nums1 and nums2, both of length n.\nThe sum of squared difference of arrays nums1 and nums2 is defined as the sum of (nums1[i] - nums2[i])2 for each 0 <= i < n.\nYou are also given two positive integers k1 and k2. You can modify any of the elements of nums1 by +1 or -1 at most k1 times. Similarly, you can modify any of the elements of nums2 by +1 or -1 at most k2 times.\nReturn the minimum sum of squared difference after modifying array nums1 at most k1 times and modifying array nums2 at most k2 times.\nNote: You are allowed to modify the array elements to become negative integers.\n\u00a0\nExample 1:\n\nInput: nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0, k2 = 0\nOutput: 579\nExplanation: The elements in nums1 and nums2 cannot be modified because k1 = 0 and k2 = 0. \nThe sum of square difference will be: (1 - 2)2 + (2 - 10)2 + (3 - 20)2 + (4 - 19)2\u00a0= 579.\n\nExample 2:\n\nInput: nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1, k2 = 1\nOutput: 43\nExplanation: One way to obtain the minimum sum of square difference is: \n- Increase nums1[0] once.\n- Increase nums2[2] once.\nThe minimum of the sum of square difference will be: \n(2 - 5)2 + (4 - 8)2 + (10 - 7)2 + (12 - 9)2\u00a0= 43.\nNote that, there are other ways to obtain the minimum of the sum of square difference, but there is no way to obtain a sum smaller than 43.\n\u00a0\nConstraints:\n\nn == nums1.length == nums2.length\n1 <= n <= 105\n0 <= nums1[i], nums2[i] <= 105\n0 <= k1, k2 <= 109\n\n",
    "starterCode": "class Solution:\n    def minSumSquareDiff(self, nums1: List[int], nums2: List[int], k1: int, k2: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums1 = [5,5,5,5], nums2 = [5,5,5,5], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [5,15,25,35,45], k1 = 50, k2 = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [100000, 100000], nums2 = [0, 0], k1 = 100000, k2 = 100000",
        "output": "0"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [2,4,6,8,10], k1 = 1, k2 = 1",
        "output": "3"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [3,2,1], k1 = 3, k2 = 3",
        "output": "0"
      },
      {
        "input": "nums1 = [0,0,0,0], nums2 = [100,100,100,100], k1 = 200, k2 = 200",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [3,2,1], k1 = 10, k2 = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0, k2 = 0",
        "output": "579"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [3,2,1], k1 = 2, k2 = 2",
        "output": "0"
      },
      {
        "input": "nums1 = [5,5,5,5], nums2 = [1,1,1,1], k1 = 4, k2 = 4",
        "output": "16"
      },
      {
        "input": "nums1 = [1,1,1,1,1], nums2 = [5,5,5,5,5], k1 = 5, k2 = 5",
        "output": "20"
      },
      {
        "input": "nums1 = [0,0,0,0], nums2 = [0,0,0,0], k1 = 5, k2 = 5",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1], k1 = 5, k2 = 5",
        "output": "2"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [9,9,9,9,9,9,9,9,9,9], k1 = 50, k2 = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [0,0,0,0], nums2 = [10,10,10,10], k1 = 20, k2 = 20",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1], k1 = 3, k2 = 3",
        "output": "10"
      },
      {
        "input": "nums1 = [0,0,0], nums2 = [100,100,100], k1 = 150, k2 = 150",
        "output": "0"
      },
      {
        "input": "nums1 = [10,20,30], nums2 = [1,2,3], k1 = 25, k2 = 25",
        "output": "6"
      },
      {
        "input": "nums1 = [1,1,1,1], nums2 = [1,1,1,1], k1 = 5, k2 = 5",
        "output": "0"
      },
      {
        "input": "nums1 = [0,0,0,0], nums2 = [1,1,1,1], k1 = 2, k2 = 2",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1,1], nums2 = [10,10,10,10], k1 = 10, k2 = 10",
        "output": "64"
      },
      {
        "input": "nums1 = [3,5,7,9], nums2 = [4,6,8,10], k1 = 3, k2 = 3",
        "output": "0"
      },
      {
        "input": "nums1 = [100000,100000,100000], nums2 = [0,0,0], k1 = 300000, k2 = 300000",
        "output": "0"
      },
      {
        "input": "nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1, k2 = 1",
        "output": "43"
      },
      {
        "input": "nums1 = [100000,100000,100000], nums2 = [0,0,0], k1 = 100000, k2 = 100000",
        "output": "3333333334"
      },
      {
        "input": "nums1 = [5,5,5,5], nums2 = [1,1,1,1], k1 = 10, k2 = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [100000, 100000, 100000], nums2 = [0, 0, 0], k1 = 100000, k2 = 100000",
        "output": "3333333334"
      },
      {
        "input": "nums1 = [1000, 2000, 3000, 4000, 5000], nums2 = [5000, 4000, 3000, 2000, 1000], k1 = 2000, k2 = 2000",
        "output": "16000000"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [15, 25, 35, 45, 55], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [100000, 90000, 80000, 70000], nums2 = [60000, 50000, 40000, 30000], k1 = 500000, k2 = 500000",
        "output": "0"
      },
      {
        "input": "nums1 = [100000, 50000, 25000, 10000], nums2 = [90000, 60000, 35000, 15000], k1 = 50000, k2 = 50000",
        "output": "0"
      },
      {
        "input": "nums1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], nums2 = [99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999], k1 = 1000000, k2 = 1000000",
        "output": "0"
      },
      {
        "input": "nums1 = [100000, 50000, 25000], nums2 = [0, 0, 0], k1 = 500000, k2 = 500000",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [1, 2, 3, 4, 5], k1 = 50, k2 = 50",
        "output": "245"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k1 = 1000, k2 = 1000",
        "output": "1298535"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25], nums2 = [100, 100, 100, 100, 100], k1 = 300, k2 = 300",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], nums2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1], k1 = 1000000000, k2 = 1000000000",
        "output": "0"
      },
      {
        "input": "nums1 = [9, 8, 7, 6, 5, 4, 3, 2, 1], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9], k1 = 10, k2 = 10",
        "output": "52"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [10,10,10,10,10,10,10,10,10,10], k1 = 50, k2 = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1], k1 = 0, k2 = 0",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [1, 2, 3, 4, 5], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [50000, 50000, 50000], nums2 = [0, 0, 0], k1 = 150000, k2 = 150000",
        "output": "0"
      },
      {
        "input": "nums1 = [1000, 2000, 3000, 4000, 5000], nums2 = [500, 1000, 1500, 2000, 2500], k1 = 1000, k2 = 1000",
        "output": "6583334"
      },
      {
        "input": "nums1 = [100, 200, 300], nums2 = [300, 200, 100], k1 = 150, k2 = 150",
        "output": "5000"
      },
      {
        "input": "nums1 = [1000, 2000, 3000, 4000, 5000], nums2 = [500, 1500, 2500, 3500, 4500], k1 = 100000, k2 = 100000",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], k1 = 150, k2 = 150",
        "output": "4252"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25, 30], nums2 = [3, 6, 9, 12, 15, 18], k1 = 20, k2 = 25",
        "output": "0"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19], nums2 = [2,4,6,8,10,12,14,16,18,20], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [5, 15, 25, 35, 45], k1 = 10, k2 = 10",
        "output": "5"
      },
      {
        "input": "nums1 = [100, 200, 300, 400], nums2 = [150, 250, 350, 450], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1], k1 = 10, k2 = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], nums2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k1 = 50, k2 = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 200, 300, 400], nums2 = [105, 205, 305, 405], k1 = 10, k2 = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [50, 50, 50, 50, 50], nums2 = [1, 2, 3, 4, 5], k1 = 200, k2 = 200",
        "output": "0"
      },
      {
        "input": "nums1 = [0,0,0,0,0,0,0,0,0,0], nums2 = [10,10,10,10,10,10,10,10,10,10], k1 = 5, k2 = 5",
        "output": "810"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [100000, 0, 50000], nums2 = [0, 100000, 50000], k1 = 100000, k2 = 100000",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k1 = 100, k2 = 100",
        "output": "12728"
      },
      {
        "input": "nums1 = [5, 5, 5, 5, 5], nums2 = [1, 2, 3, 4, 5], k1 = 20, k2 = 20",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k1 = 0, k2 = 0",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,1], k1 = 0, k2 = 0",
        "output": "330"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], k1 = 500, k2 = 500",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1], k1 = 10, k2 = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [50, 50, 50, 50, 50], nums2 = [0, 0, 0, 0, 0], k1 = 50, k2 = 50",
        "output": "4500"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [5,5,5,5,5,5,5,5,5,5], nums2 = [10,10,10,10,10,10,10,10,10,10], k1 = 20, k2 = 20",
        "output": "10"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [10,10,10,10,10,10,10,10,10,10], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k1 = 1000, k2 = 1000",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [100, 100, 100, 100, 100], k1 = 100, k2 = 100",
        "output": "175000"
      },
      {
        "input": "nums1 = [10000, 20000, 30000, 40000, 50000], nums2 = [50000, 40000, 30000, 20000, 10000], k1 = 1000000, k2 = 1000000",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 100, 100, 100, 100, 100], nums2 = [1, 1, 1, 1, 1, 1], k1 = 300, k2 = 300",
        "output": "0"
      },
      {
        "input": "nums1 = [1000, 2000, 3000, 4000, 5000], nums2 = [500, 1500, 2500, 3500, 4500], k1 = 2000, k2 = 2000",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30], nums2 = [30, 20, 10], k1 = 20, k2 = 20",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k1 = 50, k2 = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k1 = 50, k2 = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [1, 1, 1, 1, 1], k1 = 10, k2 = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [50000, 40000, 30000, 20000, 10000], nums2 = [50000, 40000, 30000, 20000, 10000], k1 = 0, k2 = 0",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [1, 2, 3, 4, 5], k1 = 1000, k2 = 1000",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [100000, 100000, 100000, 100000, 100000], k1 = 50000, k2 = 50000",
        "output": "31999200005"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [15, 25, 35, 45, 55], k1 = 15, k2 = 20",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [10, 20, 30, 40, 50], k1 = 10000, k2 = 10000",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1], k1 = 10, k2 = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k1 = 0, k2 = 0",
        "output": "330"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,20,30,40,50,60,70,80,90,100], k1 = 500, k2 = 500",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,1], k1 = 20, k2 = 20",
        "output": "10"
      },
      {
        "input": "nums1 = [50, 50, 50, 50, 50], nums2 = [100, 100, 100, 100, 100], k1 = 150, k2 = 150",
        "output": "0"
      },
      {
        "input": "nums1 = [100000, 90000, 80000, 70000], nums2 = [60000, 50000, 40000, 30000], k1 = 1000000, k2 = 1000000",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], k1 = 1000, k2 = 1000",
        "output": "0"
      },
      {
        "input": "nums1 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], nums2 = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k1 = 5, k2 = 5",
        "output": "160"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [90, 190, 290, 390, 490], k1 = 5, k2 = 5",
        "output": "320"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k1 = 500, k2 = 500",
        "output": "0"
      },
      {
        "input": "nums1 = [100000, 90000, 80000, 70000, 60000], nums2 = [1, 2, 3, 4, 5], k1 = 1000000, k2 = 1000000",
        "output": "0"
      },
      {
        "input": "nums1 = [100000, 90000, 80000, 70000, 60000], nums2 = [50000, 40000, 30000, 20000, 10000], k1 = 1000000, k2 = 1000000",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k1 = 20, k2 = 20",
        "output": "10"
      },
      {
        "input": "nums1 = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k1 = 50, k2 = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 200, 300], nums2 = [1, 1, 1], k1 = 500, k2 = 500",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [50, 150, 250, 350, 450], k1 = 1000, k2 = 1000",
        "output": "0"
      },
      {
        "input": "nums1 = [100000, 100000, 100000], nums2 = [0, 0, 0], k1 = 150000, k2 = 150000",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,1], k1 = 50, k2 = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [100000, 100000, 100000, 100000, 100000], nums2 = [0, 0, 0, 0, 0], k1 = 1000000, k2 = 1000000",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [5, 15, 25, 35, 45], k1 = 25, k2 = 25",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [100, 90, 80, 70, 60], k1 = 500, k2 = 500",
        "output": "0"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60,70,80,90,100], nums2 = [10,20,30,40,50,60,70,80,90,100], k1 = 500, k2 = 500",
        "output": "0"
      },
      {
        "input": "nums1 = [5,5,5,5,5], nums2 = [5,5,5,5,5], k1 = 100, k2 = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25], nums2 = [3, 8, 13, 18, 23], k1 = 25, k2 = 25",
        "output": "0"
      },
      {
        "input": "nums1 = [10000, 20000, 30000, 40000, 50000], nums2 = [1, 2, 3, 4, 5], k1 = 1000000, k2 = 1000000",
        "output": "0"
      },
      {
        "input": "nums1 = [100,200,300,400,500], nums2 = [500,400,300,200,100], k1 = 1000, k2 = 1000",
        "output": "0"
      },
      {
        "input": "nums1 = [100,200,300,400,500], nums2 = [1,2,3,4,5], k1 = 1000, k2 = 1000",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000], k1 = 1500000, k2 = 1500000",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [10, 20, 30, 40, 50], k1 = 250, k2 = 250",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], nums2 = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k1 = 1000, k2 = 1000",
        "output": "0"
      }
    ]
  },
  {
    "id": 845,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Enumeration"
    ],
    "problemDescription": "You may recall that an array arr is a mountain array if and only if:\n\narr.length >= 3\nThere exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:\n\t\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]\narr[i] > arr[i + 1] > ... > arr[arr.length - 1]\n\n\n\nGiven an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.\n\u00a0\nExample 1:\n\nInput: arr = [2,1,4,7,3,2,5]\nOutput: 5\nExplanation: The largest mountain is [1,4,7,3,2] which has length 5.\n\nExample 2:\n\nInput: arr = [2,2,2]\nOutput: 0\nExplanation: There is no mountain.\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 104\n0 <= arr[i] <= 104\n\n\u00a0\nFollow up:\n\nCan you solve it using only one pass?\nCan you solve it in O(1) space?\n\n",
    "starterCode": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8,9,0]",
        "output": "11"
      },
      {
        "input": "arr = [0,1,0,2,1,0,1,3,2,1]",
        "output": "5"
      },
      {
        "input": "arr = [5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "arr = [1,3,1,4,5,6,7,8,9,8,7,6,5]",
        "output": "11"
      },
      {
        "input": "arr = [9,8,7,6,5,4,3,2,1,0]",
        "output": "0"
      },
      {
        "input": "arr = [1,2,3]",
        "output": "0"
      },
      {
        "input": "arr = [1,2,3,4,3,2,1,0]",
        "output": "8"
      },
      {
        "input": "arr = [1,3,5,4,2,3,6,7,5]",
        "output": "5"
      },
      {
        "input": "arr = [1,2,3,1,2,3,4,5,6,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "arr = [3,3,3,2,1]",
        "output": "0"
      },
      {
        "input": "arr = [1,2,2,1]",
        "output": "0"
      },
      {
        "input": "arr = [3,3,3,2,1,2,3,3,3]",
        "output": "0"
      },
      {
        "input": "arr = [1,2,3,4,5,3,1]",
        "output": "7"
      },
      {
        "input": "arr = [1,3,1]",
        "output": "3"
      },
      {
        "input": "arr = [2,1,4,7,3,2,5]",
        "output": "5"
      },
      {
        "input": "arr = [1,2,2,2,1]",
        "output": "0"
      },
      {
        "input": "arr = [2,2,2]",
        "output": "0"
      },
      {
        "input": "arr = [1,3,5,4,2,3,4,5,3,1]",
        "output": "6"
      },
      {
        "input": "arr = [2,2,2,3,4,5,4,3,2,1,1]",
        "output": "8"
      },
      {
        "input": "arr = [0,2,1,0]",
        "output": "4"
      },
      {
        "input": "arr = [1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "arr = [1,3,1,4,5,2,1]",
        "output": "5"
      },
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8,9]",
        "output": "0"
      },
      {
        "input": "arr = [0,2,1,0,2,0,1,0]",
        "output": "4"
      },
      {
        "input": "arr = [2,3,3,2,2,2,1]",
        "output": "0"
      },
      {
        "input": "arr = [1,3,5,7,9,8,7,6,5,4,3,2,1]",
        "output": "13"
      },
      {
        "input": "arr = [1,2,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [0,1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "arr = [3,3,3,2,1,2,3]",
        "output": "0"
      },
      {
        "input": "arr = [1,3,2,4,3,5,4,6,5]",
        "output": "3"
      },
      {
        "input": "arr = [1,2,3,4,3,2,1,0,-1,-2,-1,0,1,2,3,2,1]",
        "output": "10"
      },
      {
        "input": "arr = [0,2,1,0,2,1,0]",
        "output": "4"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5]",
        "output": "20"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,3,2,1]",
        "output": "20"
      },
      {
        "input": "arr = [1,2,3,2,1,2,3,4,5,4,3,2,1,2,3,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "19"
      },
      {
        "input": "arr = [1,2,3,4,3,4,5,6,5,4,3,2,1,0,1,2,3,4,5,4,3,2,1,0]",
        "output": "11"
      },
      {
        "input": "arr = [1,2,3,2,1,2,3,4,5,6,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "19"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0,1,2,3]",
        "output": "20"
      },
      {
        "input": "arr = [1,2,3,4,5,6,5,4,3,2,1,0,1,2,3,4,5,6,5,4,3,2,1]",
        "output": "12"
      },
      {
        "input": "arr = [1,2,3,4,3,2,3,4,5,6,5,4,3,2,1,0,1,2,3]",
        "output": "11"
      },
      {
        "input": "arr = [1,2,3,2,1,2,3,4,3,2,1,2,3,4,5,6,5,4,3,2,1]",
        "output": "11"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1,0,1]",
        "output": "12"
      },
      {
        "input": "arr = [9,8,7,6,5,4,5,6,7,8,9,8,7,6,5]",
        "output": "10"
      },
      {
        "input": "arr = [0,1,2,3,4,5,4,3,2,1,0,1,2,3,4,3,2,1]",
        "output": "11"
      },
      {
        "input": "arr = [1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,7,6,5,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "arr = [1,1,2,3,4,5,4,3,2,1,1,2,3,4,5,4,3,2,1,1,2,3,4,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "20"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0,1,2,3,4,3,2,1]",
        "output": "18"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0]",
        "output": "19"
      },
      {
        "input": "arr = [1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1,0]",
        "output": "12"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,2,3,4,5]",
        "output": "17"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,1,2,3,4,3,2,1,0,1,2,3,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,2,1,2,3,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,6,7,6,5,4,3,2,1]",
        "output": "13"
      },
      {
        "input": "arr = [9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "20"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15,13,11,9,7,5,3,1,3,5,7,9,11]",
        "output": "15"
      },
      {
        "input": "arr = [9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "18"
      },
      {
        "input": "arr = [5,6,7,8,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "18"
      },
      {
        "input": "arr = [3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7]",
        "output": "15"
      },
      {
        "input": "arr = [1,3,5,7,9,11,9,7,5,3,1,3,5,7,9,11,9,7,5,3,1]",
        "output": "11"
      },
      {
        "input": "arr = [1,2,3,2,3,4,3,2,3,4,5,4,3,2,3,4,5,6,5,4,3,2,3,4,5,6,7,6,5,4,3,2,1]",
        "output": "12"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,11,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "23"
      },
      {
        "input": "arr = [1,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3]",
        "output": "5"
      },
      {
        "input": "arr = [1,3,5,4,2,3,4,5,3,1,5,6,7,6,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1]",
        "output": "11"
      },
      {
        "input": "arr = [9,8,7,6,5,4,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "15"
      },
      {
        "input": "arr = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1]",
        "output": "11"
      },
      {
        "input": "arr = [2,1,4,7,3,2,5,6,8,4,3,2,1]",
        "output": "8"
      },
      {
        "input": "arr = [1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,0,1,2,3,4,5,6,5,4,3,2,1,0,1,2,3,4,5,6,5,4,3,2,1,0]",
        "output": "13"
      },
      {
        "input": "arr = [8,9,10,11,12,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "18"
      },
      {
        "input": "arr = [2,1,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1]",
        "output": "5"
      },
      {
        "input": "arr = [1,2,3,2,1,0,1,2,3,2,1,0,1,2,3,2,1,0,1,2,3,2,1,0]",
        "output": "7"
      },
      {
        "input": "arr = [1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5]",
        "output": "15"
      },
      {
        "input": "arr = [1,2,3,2,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5,6,7,8,9,10]",
        "output": "17"
      },
      {
        "input": "arr = [1,2,1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10,9,11,10,12,11,13,12,14,13,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "16"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "20"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,3,4,5,6,5,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [1,3,2,1,2,3,4,5,4,3,2,1,2,3,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0]",
        "output": "19"
      },
      {
        "input": "arr = [5,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1,0]",
        "output": "10"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5]",
        "output": "19"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1,0]",
        "output": "17"
      },
      {
        "input": "arr = [8,9,10,11,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "17"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "17"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "11"
      },
      {
        "input": "arr = [0,1,2,3,4,5,4,3,2,1,0,1,2,3,2,1]",
        "output": "11"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10]",
        "output": "19"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1]",
        "output": "11"
      },
      {
        "input": "arr = [1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3]",
        "output": "4"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0,1,2]",
        "output": "20"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "arr = [1,2,3,4,5,6,5,4,3,2,1,0]",
        "output": "12"
      },
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0]",
        "output": "19"
      },
      {
        "input": "arr = [2,1,4,7,3,2,5,6,8,4,3,1]",
        "output": "7"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15,17,19,17,15,13,11,9,7,5,3,1]",
        "output": "19"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "19"
      },
      {
        "input": "arr = [1,2,3,4,3,2,1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,6,7,6,5,4,3,2,1]",
        "output": "13"
      },
      {
        "input": "arr = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1]",
        "output": "3"
      },
      {
        "input": "arr = [10,9,8,7,6,5,6,7,8,9,10,9,8,7,6,5,6,7,8,9,10]",
        "output": "11"
      },
      {
        "input": "arr = [1,1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1]",
        "output": "11"
      },
      {
        "input": "arr = [1,2,3,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5]",
        "output": "20"
      },
      {
        "input": "arr = [1,1,1,2,3,4,5,4,3,2,1,1,1,2,3,4,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,2,1,2,3,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "17"
      },
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "20"
      },
      {
        "input": "arr = [5,4,3,2,1,0,1,2,3,4,5,4,3,2,1,0,1,2,3,4,5,6,5,4,3,2,1,0]",
        "output": "13"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5]",
        "output": "19"
      },
      {
        "input": "arr = [0,1,2,3,2,1,0,1,2,3,4,3,2,1,0,1,2,3,4,5,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "arr = [1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "17"
      },
      {
        "input": "arr = [0,1,2,3,4,5,6,5,4,3,2,1,0]",
        "output": "13"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15,17,15,13,11,9,7,5,3,1,3,5,7,9,11,13,15,17,15,13,11,9,7,5,3,1]",
        "output": "17"
      },
      {
        "input": "arr = [1,2,3,4,5,6,5,4,3,2,1,0,1,2,3,2,1]",
        "output": "12"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,4,5,6,5,4,3,4,5,6,7,6,5,4,3,4,5,6,7,8,7,6,5,4,3,2,1]",
        "output": "13"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,2,1,2,3,4,3,2,1,2,3,4,5,4,3,2,1,2,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [1,3,5,7,9,7,5,3,1,3,5,7,9,7,5,3,1,3,5,7,9,7,5,3,1]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,2,1,1,2,3,2,1,1,2,3,2,1,1,2,3,2,1]",
        "output": "5"
      },
      {
        "input": "arr = [0,1,2,3,4,5,4,3,2,1,0,1,2,3,2,1,0]",
        "output": "11"
      },
      {
        "input": "arr = [2,1,4,7,3,2,5,8,6,5,4,3,2,1,0]",
        "output": "10"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,0,1,2,3,4,3,2,1,0,1,2,3,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "arr = [1,2,3,2,1,0,1,2,3,4,3,2,1,0,1,2,3,2,1,0,1,2,3,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9]",
        "output": "11"
      },
      {
        "input": "arr = [1,2,3,4,5,6,5,4,3,2,1,0,1,2,3,4,5,6,5,4,3,2,1,0]",
        "output": "13"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0]",
        "output": "18"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "17"
      },
      {
        "input": "arr = [1,2,1,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1]",
        "output": "7"
      },
      {
        "input": "arr = [5,4,3,2,1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "11"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "19"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9]",
        "output": "18"
      },
      {
        "input": "arr = [1,2,3,2,1,0,1,2,3,4,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1,2,3,4,5]",
        "output": "11"
      },
      {
        "input": "arr = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1]",
        "output": "5"
      },
      {
        "input": "arr = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1]",
        "output": "3"
      },
      {
        "input": "arr = [5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5]",
        "output": "15"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,2,3,4,5,6]",
        "output": "17"
      },
      {
        "input": "arr = [1,3,5,7,9,11,9,7,5,3,1,3,5,7,9,7,5,3,1,3,5,7,9,7,5,3,1]",
        "output": "11"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15,17,19,21,19,17,15,13,11,9,7,5,3,1,3,5,7,9,7,5,3,1]",
        "output": "21"
      },
      {
        "input": "arr = [1,2,3,4,5,6,5,4,3,2,1,0,1,2,3,4,5]",
        "output": "12"
      },
      {
        "input": "arr = [3,3,3,3,2,1,2,3,3,3,3,2,1,2,3,3,3,3,2,1]",
        "output": "0"
      },
      {
        "input": "arr = [10000,9999,9998,9997,9996,9995,9994,9993,9992,9991,9990,9989,9988,9987,9986,9985,9984,9983,9982,9981,9980]",
        "output": "0"
      },
      {
        "input": "arr = [1,2,3,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1,0]",
        "output": "12"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9]",
        "output": "17"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,8,7,6]",
        "output": "18"
      },
      {
        "input": "arr = [1,2,3,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5,6,5,4,3,2,1]",
        "output": "11"
      },
      {
        "input": "arr = [5,6,7,8,9,8,7,6,5,4,3,2,1,0]",
        "output": "14"
      },
      {
        "input": "arr = [5,6,7,8,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "17"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0,1,2,3,4]",
        "output": "20"
      },
      {
        "input": "arr = [2,3,2,1,2,3,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5]",
        "output": "9"
      },
      {
        "input": "arr = [5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5]",
        "output": "16"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "20"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5]",
        "output": "18"
      },
      {
        "input": "arr = [1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,7,6,5,4,3,5,4,3,2,1,0]",
        "output": "8"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "19"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,3,4,3,2,1,0,1,2,3,2,1,0]",
        "output": "8"
      },
      {
        "input": "arr = [1,2,3,4,3,2,1,0,1,2,3,4,3,2,1,0,1,2,3,4,3,2,1,0,1,2,3,4,5]",
        "output": "9"
      },
      {
        "input": "arr = [9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0,1,2,3]",
        "output": "19"
      },
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,3,2,1,0]",
        "output": "11"
      }
    ]
  },
  {
    "id": 1836,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Linked List"
    ],
    "problemDescription": "Given the head of a linked list, find all the values that appear more than once in the list and delete the nodes that have any of those values.\\r\n\\r\nReturn the linked list after the deletions.\\r\n\\r\n\u00a0\\r\nExample 1:\\r\n\\r\n\\r\nInput: head = [1,2,3,2]\\r\nOutput: [1,3]\\r\nExplanation: 2 appears twice in the linked list, so all 2's should be deleted. After deleting all 2's, we are left with [1,3].\\r\n\\r\n\\r\nExample 2:\\r\n\\r\n\\r\nInput: head = [2,1,1,2]\\r\nOutput: []\\r\nExplanation: 2 and 1 both appear twice. All the elements should be deleted.\\r\n\\r\n\\r\nExample 3:\\r\n\\r\n\\r\nInput: head = [3,2,2,1,3,2,4]\\r\nOutput: [1,4]\\r\nExplanation: 3 appears twice and 2 appears three times. After deleting all 3's and 2's, we are left with [1,4].\\r\n\\r\n\\r\n\u00a0\\r\nConstraints:\\r\n\\r\n\\r\n\tThe number of nodes in the list is in the range\u00a0[1, 105]\\r\n\t1 <= Node.val <= 105\\r\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicatesUnsorted(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "head = [2,1,1,2]",
        "output": "None"
      },
      {
        "input": "head = [5,6,7,8,9]",
        "output": "[5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [1,2,3,4,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [5,4,3,2,1,1,2,3,4,5]",
        "output": "None"
      },
      {
        "input": "head = [3,2,2,1,3,2,4]",
        "output": "[1, 4]"
      },
      {
        "input": "head = [1,1,1,1,1]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,2]",
        "output": "[1, 3]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1,2,3,4,5]",
        "output": "[6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10]",
        "output": "None"
      },
      {
        "input": "head = [100000,99999,99998,99997,99996,99995,100000,99999,99998,99997,99996,99995]",
        "output": "None"
      },
      {
        "input": "head = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]",
        "output": "None"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "None"
      },
      {
        "input": "head = [100000,99999,100000,99999,100000]",
        "output": "None"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]",
        "output": "None"
      },
      {
        "input": "head = [100000,99999,100000,99999,1,1,2,2,3,3]",
        "output": "None"
      },
      {
        "input": "head = [10,20,30,40,50,10,20,30,40,50,10,20,30,40,50]",
        "output": "None"
      },
      {
        "input": "head = [5, 4, 3, 2, 1, 2, 3, 4, 5]",
        "output": "[1]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "None"
      },
      {
        "input": "head = [1,2]",
        "output": "[1, 2]"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]",
        "output": "[10]"
      },
      {
        "input": "head = [1,1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]",
        "output": "[2]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10]",
        "output": "[11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [5,5,4,4,3,3,2,2,1,1]",
        "output": "None"
      },
      {
        "input": "head = [1,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "None"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "None"
      },
      {
        "input": "head = [1,2,2,3,4,5,5,6,7,8,9,9,10,11,11,12,13,14,14,15,16,17,18,19,19]",
        "output": "[1, 3, 4, 6, 7, 8, 10, 12, 13, 15, 16, 17, 18]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,1,2,3]",
        "output": "[4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9]",
        "output": "None"
      },
      {
        "input": "head = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7]",
        "output": "None"
      },
      {
        "input": "head = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "None"
      },
      {
        "input": "head = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7]",
        "output": "[1]"
      },
      {
        "input": "head = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11]",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]",
        "output": "[1]"
      },
      {
        "input": "head = [1]",
        "output": "[1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [5,6,7,5,8,6,9,10,7]",
        "output": "[8, 9, 10]"
      },
      {
        "input": "head = [100000, 99999, 100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 99990, 99989, 99988, 99987, 99986, 99985, 99984, 99983, 99982, 99981, 99980, 99979, 99978, 99977, 99976, 99975, 99974, 99973, 99972, 99971, 99970]",
        "output": "[99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 99990, 99989, 99988, 99987, 99986, 99985, 99984, 99983, 99982, 99981, 99980, 99979, 99978, 99977, 99976, 99975, 99974, 99973, 99972, 99971, 99970]"
      },
      {
        "input": "head = [100000,100000,100000,99999,99999,99998]",
        "output": "[99998]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,10,20,30,40,50,60,70,80,90,100]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,5,5,4,3,2,1,6,7,8,9,10,10,9,8,7,6]",
        "output": "None"
      },
      {
        "input": "head = [5,5,4,3,2,1,2,3,4,5]",
        "output": "[1]"
      },
      {
        "input": "head = [100000,99999,100000,99999,100000,99999]",
        "output": "None"
      },
      {
        "input": "head = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "[1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5]",
        "output": "[6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1]",
        "output": "None"
      },
      {
        "input": "head = [5, 5, 6, 7, 8, 6, 9, 10, 7, 11]",
        "output": "[8, 9, 10, 11]"
      },
      {
        "input": "head = [1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "None"
      },
      {
        "input": "head = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,5,4,3,2,1,1,2,3,4,5]",
        "output": "None"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10]",
        "output": "[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "None"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,2,3,4,5,2,3,4,5]",
        "output": "None"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "None"
      },
      {
        "input": "head = [50000,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,50000,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,2,1,4,5,4,6,5,7,8,9,8,10,9]",
        "output": "[3, 6, 7, 10]"
      },
      {
        "input": "head = [1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "[1]"
      },
      {
        "input": "head = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15]",
        "output": "None"
      },
      {
        "input": "head = [100000, 99999, 100000, 99999, 99998]",
        "output": "[99998]"
      },
      {
        "input": "head = [100000,1,2,3,4,5,100000,5,4,3,2,1]",
        "output": "None"
      },
      {
        "input": "head = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10]",
        "output": "None"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1]",
        "output": "None"
      },
      {
        "input": "head = [1,2,2,3,4,4,5,5,5,6]",
        "output": "[1, 3, 6]"
      },
      {
        "input": "head = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "None"
      },
      {
        "input": "head = [5,6,7,8,9,5,6,7,8,9]",
        "output": "None"
      },
      {
        "input": "head = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9]",
        "output": "None"
      },
      {
        "input": "head = [5,5,4,3,4,2,5,1,2]",
        "output": "[3, 1]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5]",
        "output": "[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "None"
      }
    ]
  },
  {
    "id": 623,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.\nNote that the root node is at depth 1.\nThe adding rule is:\n\nGiven the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root.\ncur's original left subtree should be the left subtree of the new left subtree root.\ncur's original right subtree should be the right subtree of the new right subtree root.\nIf depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.\n\n\u00a0\nExample 1:\n\n\nInput: root = [4,2,6,3,1,5], val = 1, depth = 2\nOutput: [4,1,1,2,null,null,6,3,1,5]\n\nExample 2:\n\n\nInput: root = [4,2,null,3,1], val = 1, depth = 3\nOutput: [4,2,null,1,1,3,null,null,1]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\nThe depth of the tree is in the range [1, 104].\n-100 <= Node.val <= 100\n-105 <= val <= 105\n1 <= depth <= the depth of tree + 1\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def addOneRow(self, root: Optional[TreeNode], val: int, depth: int) -> Optional[TreeNode]:\n        ",
    "testCases": [
      {
        "input": "depth",
        "output": "Error: Solution.addOneRow() missing 3 required positional arguments: 'root', 'val', and 'depth'"
      },
      {
        "input": "val",
        "output": "Error: Solution.addOneRow() missing 3 required positional arguments: 'root', 'val', and 'depth'"
      },
      {
        "input": "root",
        "output": "Error: Solution.addOneRow() missing 3 required positional arguments: 'root', 'val', and 'depth'"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], val = 0, depth = 2",
        "output": "[1, 0, 0, 2, None, None, 3, 4, 5, 6, 7]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], val = 0, depth = 4",
        "output": "[1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "root = [1,2,3,4], val = 5, depth = 5",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], val = 10, depth = 4",
        "output": "[1, 2, 3, 4, 5, 6, 7, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], val = 1, depth = 3",
        "output": "[1, 2, 3, 1, 1, 1, 1, 4, None, None, 5, 6, None, None, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "root = [1,null,2,null,3], val = 4, depth = 4",
        "output": "[1, None, 2, None, 3, 4, 4]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4], val = 5, depth = 5",
        "output": "[1, None, 2, None, 3, None, 4, 5, 5]"
      },
      {
        "input": "root = [1,2,3], val = 4, depth = 4",
        "output": "[1, 2, 3]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4], val = 5, depth = 4",
        "output": "[1, None, 2, None, 3, 5, 5, None, None, None, 4]"
      },
      {
        "input": "root = [1,2,3], val = 5, depth = 4",
        "output": "[1, 2, 3]"
      },
      {
        "input": "root = [5,4,8,11,null,17,4,7,1,null,null,5,3], val = 1, depth = 3",
        "output": "[5, 4, 8, 1, 1, 1, 1, 11, None, None, None, 17, None, None, 4, 7, 1, None, None, 5, 3]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], val = 1, depth = 1",
        "output": "[1, 1, None, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], val = 0, depth = 3",
        "output": "[1, 2, 3, 0, 0, 0, 0, 4, None, None, 5, 6, None, None, 7]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], val = 8, depth = 1",
        "output": "[8, 1, None, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], val = 8, depth = 4",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8]"
      },
      {
        "input": "root = [1], val = 2, depth = 1",
        "output": "[2, 1]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], val = 3, depth = 3",
        "output": "[1, 2, 3, 3, 3, 3, 3, 4, None, None, 5, 6, None, None, 7]"
      },
      {
        "input": "root = [1,2,3,4], val = 5, depth = 4",
        "output": "[1, 2, 3, 4, None, None, None, 5, 5]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5], val = 2, depth = 3",
        "output": "[1, None, 2, 2, 2, None, None, None, 3, None, 4, None, 5]"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1], val = 3, depth = 3",
        "output": "[5, 4, 8, 3, 3, 3, 3, 11, None, None, None, 13, None, None, 4, 7, 2, None, None, None, 1]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4], val = 5, depth = 3",
        "output": "[1, None, 2, 5, 5, None, None, None, 3, None, 4]"
      },
      {
        "input": "root = [4,2,6,3,1,5], val = 1, depth = 2",
        "output": "[4, 1, 1, 2, None, None, 6, 3, 1, 5]"
      },
      {
        "input": "root = [1,2,3], val = 4, depth = 5",
        "output": "[1, 2, 3]"
      },
      {
        "input": "root = [4,2,null,3,1], val = 1, depth = 3",
        "output": "[4, 2, None, 1, 1, 3, None, None, 1]"
      },
      {
        "input": "root = [1,null,2], val = 3, depth = 2",
        "output": "[1, 3, 3, None, None, None, 2]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9], val = 6, depth = 2",
        "output": "[1, 6, 6, 2, None, None, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "root = [1,2,3,4,5], val = -1, depth = 2",
        "output": "[1, -1, -1, 2, None, None, 3, 4, 5]"
      },
      {
        "input": "root = [1,2,3,null,4], val = 5, depth = 3",
        "output": "[1, 2, 3, 5, 5, 5, 5, None, None, None, 4]"
      },
      {
        "input": "root = [1,2,3,4], val = 5, depth = 2",
        "output": "[1, 5, 5, 2, None, None, 3, 4]"
      },
      {
        "input": "root = [1,2,3], val = 4, depth = 2",
        "output": "[1, 4, 4, 2, None, None, 3]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], val = 3, depth = 4",
        "output": "[1, 2, 3, 4, 5, 6, 7, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "root = [1,2,3,4,5], val = 0, depth = 4",
        "output": "[1, 2, 3, 4, 5, None, None, 0, 0, 0, 0]"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], val = 1, depth = 2",
        "output": "[5, 1, 1, 4, None, None, 8, 11, None, 13, 4, 7, 2, None, None, 5, 1]"
      },
      {
        "input": "root = [1,2,3], val = 0, depth = 2",
        "output": "[1, 0, 0, 2, None, None, 3]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5], val = 1, depth = 3",
        "output": "[1, None, 2, 1, 1, None, None, None, 3, None, 4, None, 5]"
      },
      {
        "input": "root = [1,null,2,null,3], val = 4, depth = 2",
        "output": "[1, 4, 4, None, None, None, 2, None, 3]"
      },
      {
        "input": "root = [5,4,8,11,null,17,4,7,1,5,3], val = 2, depth = 3",
        "output": "[5, 4, 8, 2, 2, 2, 2, 11, None, None, None, 17, None, None, 4, 7, 1, 5, 3]"
      }
    ]
  },
  {
    "id": 1514,
    "difficulty": "Medium",
    "tags": [
      "Graph",
      "Array",
      "Shortest Path",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an undirected weighted graph of\u00a0n\u00a0nodes (0-indexed), represented by an edge list where\u00a0edges[i] = [a, b]\u00a0is an undirected edge connecting the nodes\u00a0a\u00a0and\u00a0b\u00a0with a probability of success of traversing that edge\u00a0succProb[i].\nGiven two nodes\u00a0start\u00a0and\u00a0end, find the path with the maximum probability of success to go from\u00a0start\u00a0to\u00a0end\u00a0and return its success probability.\nIf there is no path from\u00a0start\u00a0to\u00a0end, return\u00a00. Your answer will be accepted if it differs from the correct answer by at most 1e-5.\n\u00a0\nExample 1:\n\n\nInput: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2\nOutput: 0.25000\nExplanation:\u00a0There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.\n\nExample 2:\n\n\nInput: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2\nOutput: 0.30000\n\nExample 3:\n\n\nInput: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2\nOutput: 0.00000\nExplanation:\u00a0There is no path between 0 and 2.\n\n\u00a0\nConstraints:\n\n2 <= n <= 10^4\n0 <= start, end < n\nstart != end\n0 <= a, b < n\na != b\n0 <= succProb.length == edges.length <= 2*10^4\n0 <= succProb[i] <= 1\nThere is at most one edge between every two nodes.\n\n",
    "starterCode": "class Solution:\n    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start_node: int, end_node: int) -> float:\n        ",
    "testCases": [
      {
        "input": "n = 4, edges = [[0,1],[1,2],[2,3]], succProb = [0.1,0.2,0.3], start_node = 0, end_node = 3",
        "output": "0.006000000000000001"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[2,3]], succProb = [0.1,0.9,0.8], start_node = 0, end_node = 3",
        "output": "0.07200000000000001"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,4]], succProb = [0.5,0.5,0.5,0.5], start_node = 0, end_node = 4",
        "output": "0.0625"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], succProb = [0.1,0.1,0.1,0.1,0.1,0.1], start_node = 0, end_node = 6",
        "output": "1.0000000000000004e-06"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,7],[5,7],[6,7]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1], start_node = 0, end_node = 7",
        "output": "0.09000000000000001"
      },
      {
        "input": "n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start_node = 0, end_node = 2",
        "output": "0.3"
      },
      {
        "input": "n = 6, edges = [[0,1],[1,2],[2,3],[3,4],[4,5]], succProb = [0.1,0.2,0.3,0.4,0.5], start_node = 0, end_node = 5",
        "output": "0.0012000000000000003"
      },
      {
        "input": "n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start_node = 0, end_node = 2",
        "output": "0.25"
      },
      {
        "input": "n = 5, edges = [[0,1],[0,2],[1,3],[1,4],[2,3],[2,4]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6], start_node = 0, end_node = 4",
        "output": "0.12"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[2,3]], succProb = [0.1,0.9,0.5], start_node = 0, end_node = 3",
        "output": "0.045000000000000005"
      },
      {
        "input": "n = 3, edges = [[0,1]], succProb = [0.5], start_node = 0, end_node = 2",
        "output": "0"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[2,3]], succProb = [0.9,0.8,0.7], start_node = 0, end_node = 3",
        "output": "0.504"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,4]], succProb = [0.1,0.9,0.8,0.2], start_node = 0, end_node = 4",
        "output": "0.014400000000000003"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[0,3],[3,4]], succProb = [0.9,0.8,0.7,0.6], start_node = 0, end_node = 2",
        "output": "0.7200000000000001"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[3,4]], succProb = [0.7,0.8,0.9], start_node = 0, end_node = 4",
        "output": "0"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,4]], succProb = [0.5,0.4,0.3,0.2], start_node = 0, end_node = 4",
        "output": "0.012"
      },
      {
        "input": "n = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], succProb = [0.01,0.99,0.02,0.98,0.03,0.97,0.04,0.96,0.05,0.95,0.06,0.94,0.07,0.93], start_node = 0, end_node = 14",
        "output": "3.7815442046807046e-11"
      },
      {
        "input": "n = 8, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8], start_node = 1, end_node = 7",
        "output": "0.08000000000000002"
      },
      {
        "input": "n = 12, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,0],[0,6],[1,7],[2,8],[3,9],[4,10],[5,11]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9], start_node = 0, end_node = 11",
        "output": "0.3"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9]], succProb = [0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1], start_node = 0, end_node = 5",
        "output": "0.5"
      },
      {
        "input": "n = 8, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[0,3],[1,4],[2,5],[3,6],[4,7]], succProb = [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.8,0.8,0.8,0.8,0.8,0.8], start_node = 0, end_node = 7",
        "output": "0.06400000000000002"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11],[6,12],[7,13],[8,14],[9,14]], succProb = [0.1,0.1,0.1,0.2,0.2,0.3,0.3,0.4,0.4,0.5,0.5,0.6,0.6,0.7,0.7], start_node = 0, end_node = 14",
        "output": "0.028000000000000004"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1], start_node = 0, end_node = 5",
        "output": "0.03024"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[0,6]], succProb = [0.01,0.01,0.01,0.01,0.01,0.01,0.99], start_node = 0, end_node = 6",
        "output": "0.99"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], succProb = [0.1,0.9,0.2,0.8,0.3,0.7,0.4,0.6], start_node = 0, end_node = 9",
        "output": "0"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0],[0,5],[1,6],[2,7],[3,8],[4,9]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1,0.2,0.3,0.4,0.5,0.6], start_node = 0, end_node = 9",
        "output": "0.1"
      },
      {
        "input": "n = 8, edges = [[0,1],[1,2],[2,3],[3,0],[1,4],[4,5],[5,6],[6,7],[7,4]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9], start_node = 0, end_node = 6",
        "output": "0.036000000000000004"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,7],[5,7],[6,7]], succProb = [0.1,0.1,0.2,0.2,0.3,0.3,0.4,0.4,0.5,0.5], start_node = 0, end_node = 7",
        "output": "0.015"
      },
      {
        "input": "n = 6, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[1,3],[2,4],[3,5]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1], start_node = 0, end_node = 5",
        "output": "0.6"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]], succProb = [0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05], start_node = 0, end_node = 19",
        "output": "1.907348632812502e-25"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,5],[1,2],[1,3],[2,4],[3,4],[4,5]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7], start_node = 0, end_node = 4",
        "output": "0.13999999999999999"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[0,2],[2,3],[3,4],[2,4],[4,5],[5,6],[6,7],[7,8],[8,9]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1], start_node = 0, end_node = 9",
        "output": "0"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], succProb = [0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5], start_node = 5, end_node = 9",
        "output": "0.0625"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], succProb = [0.99,0.98,0.97,0.96,0.95,0.94,0.93,0.92,0.91], start_node = 0, end_node = 9",
        "output": "0.6281565095552946"
      },
      {
        "input": "n = 8, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,3],[1,4],[2,5],[3,6],[4,7],[5,0],[6,1],[7,2]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8], start_node = 0, end_node = 6",
        "output": "0.5599999999999999"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,9]], succProb = [0.5,0.4,0.3,0.2,0.1,0.9,0.8,0.7,0.6,0.5], start_node = 0, end_node = 9",
        "output": "0.5"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[0,6],[1,3],[2,4],[3,5]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.01], start_node = 0, end_node = 6",
        "output": "0.7"
      },
      {
        "input": "n = 6, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[0,5]], succProb = [0.5,0.5,0.5,0.5,0.5,0.5], start_node = 0, end_node = 5",
        "output": "0.5"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[0,5],[5,10],[10,15],[15,20]], succProb = [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.2,0.2,0.2,0.2], start_node = 0, end_node = 19",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,0]], succProb = [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1], start_node = 0, end_node = 19",
        "output": "0.1"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9], start_node = 0, end_node = 9",
        "output": "0.0003628800000000001"
      },
      {
        "input": "n = 12, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[0,5],[5,10],[1,6],[6,11],[2,7],[7,0],[3,8],[8,1],[4,9],[9,2]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1,0.2], start_node = 0, end_node = 11",
        "output": "0.33599999999999997"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,9]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.9], start_node = 0, end_node = 9",
        "output": "0.9"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,9],[1,3],[3,5],[5,7],[7,9]], succProb = [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.2,0.2,0.2,0.2], start_node = 0, end_node = 9",
        "output": "0.1"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.8,0.7,0.6,0.5,0.4], start_node = 0, end_node = 14",
        "output": "0.048"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,9],[1,8],[2,7],[3,6],[4,5],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9]], succProb = [0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.01,0.02,0.03,0.04,0.05], start_node = 0, end_node = 9",
        "output": "0.1"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,9],[1,8],[2,7],[3,6],[4,5]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1,0.2,0.3,0.4,0.5], start_node = 0, end_node = 9",
        "output": "0.1"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]], succProb = [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1], start_node = 0, end_node = 19",
        "output": "1.000000000000001e-19"
      },
      {
        "input": "n = 6, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[1,3],[2,4],[0,4],[1,5],[2,5]], succProb = [0.2,0.2,0.2,0.2,0.2,0.2,0.9,0.9,0.9,0.9,0.9], start_node = 0, end_node = 5",
        "output": "0.7290000000000001"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,2],[1,3],[2,3],[2,4],[3,4],[3,5],[4,5]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9], start_node = 0, end_node = 5",
        "output": "0.108"
      },
      {
        "input": "n = 8, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[0,7],[1,5],[2,6],[3,7]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1,0.2,0.3], start_node = 0, end_node = 7",
        "output": "0.8"
      },
      {
        "input": "n = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], succProb = [0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1,0.2,0.3,0.4,0.5,0.6], start_node = 0, end_node = 14",
        "output": "2.6127360000000006e-06"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], succProb = [0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5], start_node = 0, end_node = 9",
        "output": "0.001953125"
      },
      {
        "input": "n = 6, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[0,3],[2,5]], succProb = [0.9,0.8,0.7,0.6,0.5,0.4,0.3], start_node = 0, end_node = 5",
        "output": "0.21600000000000003"
      },
      {
        "input": "n = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[0,14]], succProb = [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1], start_node = 0, end_node = 14",
        "output": "0.1"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[0,6],[1,3],[2,4],[3,5]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1], start_node = 0, end_node = 6",
        "output": "0.7"
      },
      {
        "input": "n = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], succProb = [0.05,0.06,0.07,0.08,0.09,0.10,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18], start_node = 0, end_node = 14",
        "output": "2.6676557107200007e-14"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[0,19]], succProb = [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.9], start_node = 0, end_node = 19",
        "output": "0.9"
      },
      {
        "input": "n = 12, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,0]], succProb = [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1], start_node = 0, end_node = 5",
        "output": "1.0000000000000004e-05"
      },
      {
        "input": "n = 10, edges = [[0,9],[0,8],[8,9],[1,7],[1,6],[6,7],[2,5],[2,4],[4,5],[3,0],[3,1],[3,2]], succProb = [0.1,0.2,0.15,0.3,0.4,0.35,0.5,0.6,0.55,0.7,0.8,0.85], start_node = 3, end_node = 9",
        "output": "0.06999999999999999"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], succProb = [0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5], start_node = 0, end_node = 4",
        "output": "0.0625"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[6,7],[7,8],[8,9],[9,10],[10,11]], succProb = [0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.05,0.06,0.07,0.08,0.09,0.1,0.2], start_node = 0, end_node = 11",
        "output": "0.024"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]], succProb = [0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.05,0.06,0.07,0.08,0.09,0.1,0.2,0.3,0.4,0.5], start_node = 0, end_node = 19",
        "output": "6.584094720000003e-13"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[0,19],[1,18],[2,17],[3,16],[4,15],[5,14],[6,13],[7,12],[8,11],[9,10]], succProb = [0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1], start_node = 0, end_node = 19",
        "output": "0.8"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]], succProb = [0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05], start_node = 0, end_node = 19",
        "output": "1.907348632812502e-25"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], succProb = [0.01,0.01,0.01,0.01,0.01,0.01], start_node = 0, end_node = 6",
        "output": "1.0000000000000002e-12"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[0,10],[10,15]], succProb = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.5,0.3,0.4], start_node = 0, end_node = 19",
        "output": "0.03024"
      },
      {
        "input": "n = 8, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7]], succProb = [0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.05,0.15,0.25,0.35,0.45], start_node = 0, end_node = 7",
        "output": "0.2"
      },
      {
        "input": "n = 12, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]], succProb = [0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.99], start_node = 0, end_node = 11",
        "output": "9.900000000000002e-21"
      },
      {
        "input": "n = 25, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,0]], succProb = [0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.9,0.8,0.7,0.6,0.5,0.4,0.3], start_node = 0, end_node = 24",
        "output": "0.3"
      }
    ]
  },
  {
    "id": 1621,
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "problemDescription": "Given n points on a 1-D plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The k line segments do not have to cover all n points, and they are allowed to share endpoints.\nReturn the number of ways we can draw k non-overlapping line segments. Since this number can be huge, return it modulo 109 + 7.\n\u00a0\nExample 1:\n\n\nInput: n = 4, k = 2\nOutput: 5\nExplanation: The two line segments are shown in red and blue.\nThe image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}.\n\nExample 2:\n\nInput: n = 3, k = 1\nOutput: 3\nExplanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.\n\nExample 3:\n\nInput: n = 30, k = 7\nOutput: 796297179\nExplanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives us 796297179.\n\n\u00a0\nConstraints:\n\n2 <= n <= 1000\n1 <= k <= n-1\n\n",
    "starterCode": "class Solution:\n    def numberOfSets(self, n: int, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 3, k = 1",
        "output": "3"
      },
      {
        "input": "n = 1000, k = 500",
        "output": "70047606"
      },
      {
        "input": "n = 30, k = 7",
        "output": "796297179"
      },
      {
        "input": "n = 6, k = 3",
        "output": "28"
      },
      {
        "input": "n = 8, k = 4",
        "output": "165"
      },
      {
        "input": "n = 5, k = 2",
        "output": "15"
      },
      {
        "input": "n = 7, k = 1",
        "output": "21"
      },
      {
        "input": "n = 100, k = 50",
        "output": "237930091"
      },
      {
        "input": "n = 4, k = 2",
        "output": "5"
      },
      {
        "input": "n = 20, k = 10",
        "output": "10015005"
      },
      {
        "input": "n = 9, k = 2",
        "output": "210"
      },
      {
        "input": "n = 10, k = 3",
        "output": "924"
      },
      {
        "input": "n = 400, k = 200",
        "output": "849395041"
      },
      {
        "input": "n = 300, k = 150",
        "output": "188049093"
      },
      {
        "input": "n = 250, k = 125",
        "output": "61117700"
      },
      {
        "input": "n = 200, k = 100",
        "output": "412289370"
      },
      {
        "input": "n = 150, k = 50",
        "output": "703668401"
      },
      {
        "input": "n = 500, k = 200",
        "output": "89039524"
      },
      {
        "input": "n = 80, k = 20",
        "output": "527894588"
      },
      {
        "input": "n = 1000, k = 999",
        "output": "1"
      },
      {
        "input": "n = 999, k = 998",
        "output": "1"
      },
      {
        "input": "n = 750, k = 300",
        "output": "966786381"
      },
      {
        "input": "n = 800, k = 350",
        "output": "811412361"
      },
      {
        "input": "n = 950, k = 400",
        "output": "686452764"
      },
      {
        "input": "n = 25, k = 10",
        "output": "391975633"
      },
      {
        "input": "n = 1000, k = 300",
        "output": "535696304"
      },
      {
        "input": "n = 50, k = 10",
        "output": "984308396"
      },
      {
        "input": "n = 600, k = 250",
        "output": "917595427"
      },
      {
        "input": "n = 400, k = 150",
        "output": "37130153"
      },
      {
        "input": "n = 998, k = 499",
        "output": "990039585"
      },
      {
        "input": "n = 700, k = 250",
        "output": "1718306"
      },
      {
        "input": "n = 50, k = 20",
        "output": "875426906"
      },
      {
        "input": "n = 700, k = 350",
        "output": "906610068"
      },
      {
        "input": "n = 999, k = 499",
        "output": "970118741"
      },
      {
        "input": "n = 900, k = 450",
        "output": "891508928"
      },
      {
        "input": "n = 600, k = 100",
        "output": "945626632"
      },
      {
        "input": "n = 8, k = 3",
        "output": "210"
      },
      {
        "input": "n = 150, k = 75",
        "output": "937415442"
      },
      {
        "input": "n = 250, k = 20",
        "output": "344905395"
      },
      {
        "input": "n = 250, k = 100",
        "output": "47365034"
      },
      {
        "input": "n = 25, k = 5",
        "output": "20030010"
      },
      {
        "input": "n = 100, k = 10",
        "output": "697218647"
      },
      {
        "input": "n = 100, k = 20",
        "output": "114267332"
      },
      {
        "input": "n = 15, k = 5",
        "output": "92378"
      },
      {
        "input": "n = 50, k = 15",
        "output": "188331431"
      },
      {
        "input": "n = 100, k = 40",
        "output": "234333249"
      },
      {
        "input": "n = 1000, k = 1",
        "output": "499500"
      },
      {
        "input": "n = 600, k = 220",
        "output": "66442708"
      },
      {
        "input": "n = 800, k = 300",
        "output": "374845297"
      },
      {
        "input": "n = 750, k = 375",
        "output": "796219809"
      },
      {
        "input": "n = 600, k = 300",
        "output": "508930020"
      },
      {
        "input": "n = 50, k = 5",
        "output": "930713009"
      },
      {
        "input": "n = 800, k = 400",
        "output": "530286193"
      },
      {
        "input": "n = 250, k = 75",
        "output": "928665746"
      },
      {
        "input": "n = 999, k = 500",
        "output": "688428127"
      },
      {
        "input": "n = 350, k = 175",
        "output": "134369598"
      },
      {
        "input": "n = 500, k = 100",
        "output": "698790075"
      },
      {
        "input": "n = 500, k = 250",
        "output": "540818587"
      }
    ]
  },
  {
    "id": 2152,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Geometry",
      "Array",
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Bitmask"
    ],
    "problemDescription": "You are given an array points where points[i] = [xi, yi] represents a point on an X-Y plane.\nStraight lines are going to be added to the X-Y plane, such that every point is covered by at least one line.\nReturn the minimum number of straight lines needed to cover all the points.\n\u00a0\nExample 1:\n\n\nInput: points = [[0,1],[2,3],[4,5],[4,3]]\nOutput: 2\nExplanation: The minimum number of straight lines needed is two. One possible solution is to add:\n- One line connecting the point at (0, 1) to the point at (4, 5).\n- Another line connecting the point at (2, 3) to the point at (4, 3).\n\nExample 2:\n\n\nInput: points = [[0,2],[-2,-2],[1,4]]\nOutput: 1\nExplanation: The minimum number of straight lines needed is one. The only solution is to add:\n- One line connecting the point at (-2, -2) to the point at (1, 4).\n\n\u00a0\nConstraints:\n\n1 <= points.length <= 10\npoints[i].length == 2\n-100 <= xi, yi <= 100\nAll the points are unique.\n\n",
    "starterCode": "class Solution:\n    def minimumLines(self, points: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "points = [[0,1],[2,3],[4,5],[4,3]]",
        "output": "2"
      },
      {
        "input": "points = [[-100,-100],[100,100],[-100,100],[100,-100]]",
        "output": "2"
      },
      {
        "input": "points = [[1,1],[2,2],[1,2],[2,1]]",
        "output": "2"
      },
      {
        "input": "points = [[0,0],[10,10],[-10,-10],[5,5]]",
        "output": "1"
      },
      {
        "input": "points = [[0,2],[-2,-2],[1,4]]",
        "output": "1"
      },
      {
        "input": "points = [[1,2],[2,1],[3,4],[4,3]]",
        "output": "2"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[1,0],[2,0],[3,0],[4,0]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[2,2],[3,1],[4,2]]",
        "output": "2"
      },
      {
        "input": "points = [[1,2],[2,1],[3,4],[4,3],[5,6]]",
        "output": "2"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "1"
      },
      {
        "input": "points = [[0,1],[0,2],[0,3],[0,4],[0,5]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[1,2],[2,1]]",
        "output": "2"
      },
      {
        "input": "points = [[0,0],[1,0],[0,1],[1,1]]",
        "output": "2"
      },
      {
        "input": "points = [[-1,-1],[0,0],[1,1],[2,2]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[1,1],[1,0],[0,1]]",
        "output": "2"
      },
      {
        "input": "points = [[-1,0],[0,-1],[1,0],[0,1]]",
        "output": "2"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4]]",
        "output": "1"
      },
      {
        "input": "points = [[1,0],[2,0],[3,0],[4,0],[5,0]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[1,1],[-1,-1],[2,2],[-2,-2]]",
        "output": "1"
      },
      {
        "input": "points = [[-100,100],[100,-100],[0,0]]",
        "output": "1"
      },
      {
        "input": "points = [[-1,1],[0,0],[1,-1]]",
        "output": "1"
      },
      {
        "input": "points = [[1,2],[2,3],[3,2],[4,3],[5,4],[6,5],[7,4],[8,5],[9,6],[10,5],[11,6]]",
        "output": "4"
      },
      {
        "input": "points = [[1,2],[2,4],[3,6],[4,8],[5,10]]",
        "output": "1"
      },
      {
        "input": "points = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8]]",
        "output": "1"
      },
      {
        "input": "points = [[-10,0],[0,-10],[10,0],[0,10],[5,5],[-5,5],[5,-5],[-5,-5]]",
        "output": "3"
      },
      {
        "input": "points = [[0,10],[10,0],[0,0],[10,10],[5,5],[2,8],[8,2],[3,7],[7,3],[6,6]]",
        "output": "2"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[1,0]]",
        "output": "2"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,5],[4,8],[5,11]]",
        "output": "2"
      },
      {
        "input": "points = [[1, 1], [2, 2], [3, 3], [1, 3], [3, 1], [2, 1], [1, 2], [2, 3], [3, 2]]",
        "output": "3"
      },
      {
        "input": "points = [[1, 1], [2, 3], [3, 5], [4, 7], [5, 9], [2, 2], [4, 4], [6, 6], [8, 8]]",
        "output": "2"
      },
      {
        "input": "points = [[0, 0], [0, 1], [1, 0], [1, 1], [0, 2], [1, 2], [2, 0], [2, 1], [2, 2]]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "1"
      },
      {
        "input": "points = [[0, 0], [1, 1], [2, 2], [0, 1], [1, 0], [2, 1]]",
        "output": "3"
      },
      {
        "input": "points = [[-1, 0], [0, -1], [1, 0], [0, 1], [-2, 0], [0, -2], [2, 0], [0, 2], [-1, -1], [1, 1]]",
        "output": "3"
      },
      {
        "input": "points = [[0, 0], [1, 0], [0, 1], [1, 1], [2, 0], [2, 1], [3, 0], [3, 1], [4, 0], [4, 1]]",
        "output": "2"
      },
      {
        "input": "points = [[-10, 10], [-9, 9], [-8, 8], [-7, 7], [-6, 6], [-5, 5], [-4, 4], [-3, 3], [-2, 2], [-1, 1]]",
        "output": "1"
      },
      {
        "input": "points = [[0, 0], [1, 2], [2, 4], [3, 6], [4, 8], [5, 10], [5, 0], [4, 2], [3, 4], [2, 6], [1, 8], [0, 10]]",
        "output": "2"
      },
      {
        "input": "points = [[-10,10],[0,0],[10,-10],[5,5],[-5,-5],[2,2],[-2,-2],[7,7],[-7,-7],[3,3]]",
        "output": "2"
      },
      {
        "input": "points = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [1, 10], [10, 1]]",
        "output": "2"
      },
      {
        "input": "points = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[1,1],[1,0],[2,2],[2,0],[2,1],[3,3],[3,0],[3,1],[3,2]]",
        "output": "4"
      },
      {
        "input": "points = [[-5,-5],[-4,-4],[-3,-3],[-2,-2],[-1,-1],[0,0],[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[1,2],[2,4],[3,6],[4,8],[5,10]]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[2,2],[3,2],[4,3],[5,4],[6,5],[7,5],[8,6]]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[1,0],[0,1],[1,1],[2,0],[2,1],[3,0],[3,1],[4,0],[4,1],[5,0],[5,1]]",
        "output": "2"
      },
      {
        "input": "points = [[-5,0],[0,-5],[5,0],[0,5],[0,0],[1,1],[-1,-1],[1,-1],[-1,1],[2,2],[-2,-2]]",
        "output": "4"
      },
      {
        "input": "points = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]",
        "output": "1"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
        "output": "1"
      },
      {
        "input": "points = [[0, 0], [1, 2], [2, 4], [3, 6], [4, 8], [5, 10]]",
        "output": "1"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[0,1],[0,2],[0,3],[0,4],[1,0],[2,0],[3,0],[4,0],[5,0]]",
        "output": "2"
      },
      {
        "input": "points = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16]]",
        "output": "1"
      },
      {
        "input": "points = [[-1, 1], [0, 0], [1, -1], [-2, 2], [2, -2], [-3, 3], [3, -3], [-4, 4], [4, -4]]",
        "output": "1"
      },
      {
        "input": "points = [[-100, -100], [0, 0], [100, 100], [-50, 50], [50, -50], [25, 75], [-25, -75]]",
        "output": "3"
      },
      {
        "input": "points = [[0, 0], [1, 2], [2, 4], [3, 6], [0, 1], [1, 3], [2, 5], [3, 7], [0, 2], [1, 4]]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[0,5],[1,4],[2,3],[3,2]]",
        "output": "2"
      },
      {
        "input": "points = [[10,10],[20,20],[30,30],[40,40],[10,20],[20,30],[30,40],[20,10],[30,20],[40,30]]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[1,1],[2,1],[3,2],[4,2],[5,3],[6,3],[7,4],[8,4],[9,5],[10,5],[11,6]]",
        "output": "2"
      },
      {
        "input": "points = [[-10,10],[0,0],[10,-10],[15,-15],[20,-20],[25,-25]]",
        "output": "1"
      },
      {
        "input": "points = [[0,1],[1,0],[2,1],[3,0],[4,1],[5,0],[6,1],[7,0],[8,1],[9,0]]",
        "output": "2"
      },
      {
        "input": "points = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]",
        "output": "2"
      },
      {
        "input": "points = [[-5,0],[0,5],[5,0],[0,-5],[2,2],[-2,-2],[2,-2],[-2,2],[1,0],[0,1]]",
        "output": "4"
      },
      {
        "input": "points = [[0,1],[1,0],[2,3],[3,2],[4,5],[5,4],[6,7],[7,6],[8,9],[9,8]]",
        "output": "2"
      },
      {
        "input": "points = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12]]",
        "output": "1"
      },
      {
        "input": "points = [[0, 0], [2, 2], [4, 4], [1, 1], [3, 3], [5, 5], [6, 6], [8, 8]]",
        "output": "1"
      },
      {
        "input": "points = [[-1,0],[0,-1],[1,0],[0,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[1,1],[2,1],[3,2],[4,2],[5,3],[6,3],[7,4],[8,4],[9,5]]",
        "output": "2"
      },
      {
        "input": "points = [[1,1],[2,3],[3,2],[4,5],[5,4],[6,7],[7,6]]",
        "output": "3"
      },
      {
        "input": "points = [[-3,-3],[-2,-2],[-1,-1],[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]",
        "output": "1"
      },
      {
        "input": "points = [[0, 0], [1, 1], [2, 2], [3, 3], [0, 2], [2, 0], [4, 4], [2, 4], [4, 2], [3, 1]]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[1,0],[2,0],[3,0],[0,1],[1,1],[2,1],[3,1],[0,2],[1,2],[2,2],[3,2]]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
        "output": "1"
      },
      {
        "input": "points = [[-5,5],[0,0],[5,-5],[10,-10],[15,-15]]",
        "output": "1"
      },
      {
        "input": "points = [[-10,-10],[-5,-5],[0,0],[5,5],[10,10],[0,5],[0,-5],[5,0],[-5,0]]",
        "output": "3"
      },
      {
        "input": "points = [[1, 1], [1, 2], [2, 1], [2, 2], [3, 3], [3, 4], [4, 3], [4, 4], [5, 5], [5, 6]]",
        "output": "3"
      },
      {
        "input": "points = [[1, 1], [1, 2], [2, 1], [2, 2], [3, 3], [3, 4], [4, 3], [4, 4]]",
        "output": "3"
      },
      {
        "input": "points = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [10, 20], [20, 10], [40, 30], [30, 40]]",
        "output": "3"
      },
      {
        "input": "points = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]",
        "output": "1"
      },
      {
        "input": "points = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [1, 10], [10, 1], [5, 1], [1, 5], [10, 5], [5, 10]]",
        "output": "4"
      },
      {
        "input": "points = [[-2,2],[-1,1],[0,0],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[1,2],[2,1],[3,3],[4,2],[5,1],[6,3]]",
        "output": "3"
      },
      {
        "input": "points = [[1, 2], [2, 4], [3, 6], [4, 8], [5, 10], [6, 12], [7, 14], [8, 16], [9, 18], [10, 20]]",
        "output": "1"
      },
      {
        "input": "points = [[-5, -5], [-3, -3], [-1, -1], [0, 0], [1, 1], [3, 3], [5, 5]]",
        "output": "1"
      },
      {
        "input": "points = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [0, 5], [5, 0]]",
        "output": "2"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "2"
      },
      {
        "input": "points = [[0,0],[1,2],[2,4],[3,6],[4,8],[5,10],[6,12],[7,14],[8,16],[9,18]]",
        "output": "1"
      },
      {
        "input": "points = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]]",
        "output": "1"
      },
      {
        "input": "points = [[-5, -5], [-4, -4], [-3, -3], [-2, -2], [-1, -1], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]",
        "output": "1"
      },
      {
        "input": "points = [[1,2],[2,3],[3,1],[4,5],[5,4],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "3"
      },
      {
        "input": "points = [[1,2],[2,1],[3,4],[4,3],[5,6],[6,5],[7,8],[8,7],[9,10],[10,9]]",
        "output": "2"
      },
      {
        "input": "points = [[1,1],[2,2],[3,4],[4,3],[5,5],[6,6],[7,8],[8,7],[9,9],[10,10]]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3],[4,1]]",
        "output": "3"
      },
      {
        "input": "points = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]]",
        "output": "1"
      },
      {
        "input": "points = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]]",
        "output": "1"
      },
      {
        "input": "points = [[1, 2], [2, 4], [3, 6], [4, 8], [5, 10], [6, 12], [7, 14]]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[2,1],[4,2],[6,3],[8,4],[10,5],[12,6],[14,7],[16,8],[18,9],[20,10]]",
        "output": "1"
      },
      {
        "input": "points = [[0, 0], [1, 1], [2, 2], [3, 3], [0, 3], [1, 2], [2, 1], [3, 0], [4, 4], [5, 5]]",
        "output": "2"
      },
      {
        "input": "points = [[0, 0], [100, 100], [50, 50], [25, 25], [75, 75], [0, 100], [100, 0]]",
        "output": "2"
      },
      {
        "input": "points = [[-5,0],[0,0],[5,0],[0,-5],[0,5],[1,1],[2,2],[3,3],[-1,-1],[-2,-2],[-3,-3]]",
        "output": "3"
      },
      {
        "input": "points = [[0, 1], [1, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7]]",
        "output": "2"
      },
      {
        "input": "points = [[1,2],[2,1],[3,4],[4,3],[5,6],[6,5],[7,8],[8,7]]",
        "output": "2"
      },
      {
        "input": "points = [[0,1],[1,0],[2,1],[1,2],[0,3],[1,4],[2,3]]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[1,2]]",
        "output": "2"
      }
    ]
  },
  {
    "id": 625,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Math"
    ],
    "problemDescription": "Given a positive integer num, return the smallest positive integer x whose multiplication of each digit equals num. If there is no answer or the answer is not fit in 32-bit signed integer, return 0.\n\u00a0\nExample 1:\nInput: num = 48\nOutput: 68\nExample 2:\nInput: num = 15\nOutput: 35\n\n\u00a0\nConstraints:\n\n1 <= num <= 231 - 1\n\n",
    "starterCode": "class Solution:\n    def smallestFactorization(self, num: int) -> int:\n        ",
    "testCases": [
      {
        "input": "num = 3249",
        "output": "0"
      },
      {
        "input": "num = 10",
        "output": "25"
      },
      {
        "input": "num = 48",
        "output": "68"
      },
      {
        "input": "num = 210",
        "output": "567"
      },
      {
        "input": "num = 1000000000",
        "output": "0"
      },
      {
        "input": "num = 360",
        "output": "589"
      },
      {
        "input": "num = 123456789",
        "output": "0"
      },
      {
        "input": "num = 216",
        "output": "389"
      },
      {
        "input": "num = 18",
        "output": "29"
      },
      {
        "input": "num = 1",
        "output": "1"
      },
      {
        "input": "num = 100",
        "output": "455"
      },
      {
        "input": "num = 1024",
        "output": "2888"
      },
      {
        "input": "num = 2147483647",
        "output": "0"
      },
      {
        "input": "num = 72",
        "output": "89"
      },
      {
        "input": "num = 999999999",
        "output": "0"
      },
      {
        "input": "num = 231",
        "output": "0"
      },
      {
        "input": "num = 180",
        "output": "459"
      },
      {
        "input": "num = 37",
        "output": "0"
      },
      {
        "input": "num = 15",
        "output": "35"
      },
      {
        "input": "num = 222222222",
        "output": "0"
      },
      {
        "input": "num = 12345678",
        "output": "0"
      },
      {
        "input": "num = 512",
        "output": "888"
      },
      {
        "input": "num = 111111111",
        "output": "0"
      },
      {
        "input": "num = 555555555",
        "output": "0"
      },
      {
        "input": "num = 4294967295",
        "output": "0"
      },
      {
        "input": "num = 2384185791015625",
        "output": "0"
      },
      {
        "input": "num = 888888888",
        "output": "0"
      },
      {
        "input": "num = 6789",
        "output": "0"
      },
      {
        "input": "num = 444444444",
        "output": "0"
      },
      {
        "input": "num = 5184",
        "output": "8899"
      },
      {
        "input": "num = 777777777",
        "output": "0"
      },
      {
        "input": "num = 82944",
        "output": "288899"
      },
      {
        "input": "num = 666666666",
        "output": "0"
      },
      {
        "input": "num = 65535",
        "output": "0"
      },
      {
        "input": "num = 333333333",
        "output": "0"
      },
      {
        "input": "num = 1999999999",
        "output": "0"
      },
      {
        "input": "num = 3628800",
        "output": "45578899"
      },
      {
        "input": "num = 46656",
        "output": "88999"
      },
      {
        "input": "num = 1234567890",
        "output": "0"
      },
      {
        "input": "num = 86420",
        "output": "0"
      },
      {
        "input": "num = 94143178827",
        "output": "0"
      },
      {
        "input": "num = 46189",
        "output": "0"
      },
      {
        "input": "num = 987654321",
        "output": "0"
      },
      {
        "input": "num = 268435456",
        "output": "0"
      },
      {
        "input": "num = 86400000",
        "output": "0"
      },
      {
        "input": "num = 1000000007",
        "output": "0"
      },
      {
        "input": "num = 55555",
        "output": "0"
      },
      {
        "input": "num = 86400",
        "output": "556889"
      },
      {
        "input": "num = 99999",
        "output": "0"
      },
      {
        "input": "num = 1000000",
        "output": "55555588"
      },
      {
        "input": "num = 65536",
        "output": "288888"
      },
      {
        "input": "num = 199999999",
        "output": "0"
      }
    ]
  },
  {
    "id": 3155,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Binary Search"
    ],
    "problemDescription": "You have n data centers and need to upgrade their servers.\nYou are given four arrays count, upgrade, sell, and money of length n, which show:\n\nThe number of servers\nThe cost of upgrading a single server\nThe money you get by selling a server\nThe money you initially have\n\nfor each data center respectively.\nReturn an array answer, where for each data center, the corresponding element in answer represents the maximum number of servers that can be upgraded.\nNote that the money from one data center cannot be used for another data center.\n\u00a0\nExample 1:\n\nInput: count = [4,3], upgrade = [3,5], sell = [4,2], money = [8,9]\nOutput: [3,2]\nExplanation:\nFor the first data center, if we sell one server, we'll have 8 + 4 = 12 units of money and we can upgrade the remaining 3 servers.\nFor the second data center, if we sell one server, we'll have 9 + 2 = 11 units of money and we can upgrade the remaining 2 servers.\n\nExample 2:\n\nInput: count = [1], upgrade = [2], sell = [1], money = [1]\nOutput: [0]\n\n\u00a0\nConstraints:\n\n1 <= count.length == upgrade.length == sell.length == money.length <= 105\n1 <= count[i], upgrade[i], sell[i], money[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def maxUpgrades(self, count: List[int], upgrade: List[int], sell: List[int], money: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "count = [100000], upgrade = [100000], sell = [100000], money = [1000000000]",
        "output": "[55000]"
      },
      {
        "input": "count = [10,20,30], upgrade = [5,4,3], sell = [1,2,3], money = [50,100,150]",
        "output": "[10, 20, 30]"
      },
      {
        "input": "count = [10,20,30], upgrade = [1,2,3], sell = [4,5,6], money = [100,100,100]",
        "output": "[10, 20, 30]"
      },
      {
        "input": "count = [4,3], upgrade = [3,5], sell = [4,2], money = [8,9]",
        "output": "[3, 2]"
      },
      {
        "input": "count = [5,5,5], upgrade = [10,20,30], sell = [5,10,15], money = [100,100,100]",
        "output": "[5, 5, 3]"
      },
      {
        "input": "count = [1], upgrade = [2], sell = [1], money = [1]",
        "output": "[0]"
      },
      {
        "input": "count = [10,20,30], upgrade = [5,10,15], sell = [1,2,3], money = [100,200,300]",
        "output": "[10, 20, 21]"
      },
      {
        "input": "count = [10,20,30], upgrade = [1,2,3], sell = [4,5,6], money = [50,100,150]",
        "output": "[10, 20, 30]"
      },
      {
        "input": "count = [5,5,5], upgrade = [10,20,30], sell = [5,15,25], money = [100,150,200]",
        "output": "[5, 5, 5]"
      },
      {
        "input": "count = [5,5,5], upgrade = [1,2,3], sell = [3,2,1], money = [10,10,10]",
        "output": "[5, 5, 3]"
      },
      {
        "input": "count = [100,100,100], upgrade = [1000,1000,1000], sell = [500,500,500], money = [50000,50000,50000]",
        "output": "[66, 66, 66]"
      },
      {
        "input": "count = [100], upgrade = [10], sell = [5], money = [500]",
        "output": "[66]"
      },
      {
        "input": "count = [10,20,30], upgrade = [1,2,3], sell = [3,2,1], money = [100,200,300]",
        "output": "[10, 20, 30]"
      },
      {
        "input": "count = [5,5,5], upgrade = [10,10,10], sell = [5,5,5], money = [50,50,50]",
        "output": "[5, 5, 5]"
      },
      {
        "input": "count = [5,5,5], upgrade = [10,10,10], sell = [5,5,5], money = [20,20,20]",
        "output": "[3, 3, 3]"
      },
      {
        "input": "count = [2,4,6], upgrade = [1,2,3], sell = [2,4,6], money = [10,20,30]",
        "output": "[2, 4, 6]"
      },
      {
        "input": "count = [100, 200, 300, 400], upgrade = [5, 10, 15, 20], sell = [20, 15, 10, 5], money = [500, 1000, 1500, 2000]",
        "output": "[100, 160, 180, 160]"
      },
      {
        "input": "count = [100, 200, 300, 400, 500], upgrade = [5, 10, 15, 20, 25], sell = [20, 15, 10, 5, 1], money = [1000, 2000, 3000, 4000, 5000]",
        "output": "[100, 200, 240, 240, 211]"
      },
      {
        "input": "count = [1, 2, 3, 4, 5], upgrade = [10, 20, 30, 40, 50], sell = [50, 40, 30, 20, 10], money = [100, 200, 300, 400, 500]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "count = [15, 25, 35, 45], upgrade = [2, 3, 4, 5], sell = [5, 4, 3, 2], money = [150, 250, 350, 450]",
        "output": "[15, 25, 35, 45]"
      },
      {
        "input": "count = [100, 50, 25], upgrade = [5, 10, 15], sell = [2, 4, 6], money = [1000, 500, 250]",
        "output": "[100, 50, 19]"
      },
      {
        "input": "count = [1,2,3,4,5,6,7,8,9,10], upgrade = [10,20,30,40,50,60,70,80,90,100], sell = [5,10,15,20,25,30,35,40,45,50], money = [50,100,150,200,250,300,350,400,450,500]",
        "output": "[1, 2, 3, 4, 5, 5, 5, 6, 6, 6]"
      },
      {
        "input": "count = [30000, 25000, 20000], upgrade = [100, 150, 200], sell = [200, 150, 100], money = [5000000, 4000000, 3000000]",
        "output": "[30000, 25000, 16666]"
      },
      {
        "input": "count = [1, 2, 3, 4, 5], upgrade = [1, 2, 3, 4, 5], sell = [5, 4, 3, 2, 1], money = [15, 10, 5, 0, 0]",
        "output": "[1, 2, 2, 1, 0]"
      },
      {
        "input": "count = [333, 666, 999], upgrade = [33, 66, 99], sell = [11, 22, 33], money = [1110, 2220, 3330]",
        "output": "[108, 191, 274]"
      },
      {
        "input": "count = [50, 50, 50, 50], upgrade = [2, 3, 4, 5], sell = [3, 2, 1, 4], money = [150, 200, 250, 300]",
        "output": "[50, 50, 50, 50]"
      },
      {
        "input": "count = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], upgrade = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], sell = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], money = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "count = [1000, 2000, 3000], upgrade = [1, 2, 3], sell = [2, 1, 2], money = [5000, 10000, 15000]",
        "output": "[1000, 2000, 3000]"
      },
      {
        "input": "count = [10, 10, 10, 10, 10], upgrade = [1, 2, 3, 4, 5], sell = [5, 4, 3, 2, 1], money = [50, 40, 30, 20, 10]",
        "output": "[10, 10, 10, 6, 3]"
      },
      {
        "input": "count = [20, 25, 30, 35, 40, 45, 50], upgrade = [5, 6, 7, 8, 9, 10, 11], sell = [11, 10, 9, 8, 7, 6, 5], money = [200, 250, 300, 350, 400, 450, 500]",
        "output": "[20, 25, 30, 35, 40, 45, 46]"
      },
      {
        "input": "count = [500, 500, 500, 500], upgrade = [10, 20, 30, 40], sell = [20, 10, 40, 30], money = [2000, 1000, 4000, 3000]",
        "output": "[400, 200, 342, 257]"
      },
      {
        "input": "count = [50, 75, 100], upgrade = [2, 3, 4], sell = [1, 2, 3], money = [100, 200, 300]",
        "output": "[50, 70, 85]"
      },
      {
        "input": "count = [100, 100, 100, 100], upgrade = [1, 1, 1, 1], sell = [2, 2, 2, 2], money = [1000, 2000, 3000, 4000]",
        "output": "[100, 100, 100, 100]"
      },
      {
        "input": "count = [100, 150, 200], upgrade = [10, 15, 20], sell = [5, 10, 15], money = [1000, 1500, 2000]",
        "output": "[100, 120, 142]"
      },
      {
        "input": "count = [50, 50, 50], upgrade = [10, 20, 30], sell = [15, 25, 35], money = [500, 750, 1000]",
        "output": "[50, 44, 42]"
      },
      {
        "input": "count = [50, 50, 50, 50, 50], upgrade = [10, 20, 30, 40, 50], sell = [5, 10, 15, 20, 25], money = [500, 1000, 1500, 2000, 2500]",
        "output": "[50, 50, 50, 50, 50]"
      },
      {
        "input": "count = [15, 25, 35], upgrade = [4, 6, 8], sell = [7, 5, 3], money = [150, 250, 350]",
        "output": "[15, 25, 35]"
      },
      {
        "input": "count = [50, 60, 70, 80, 90], upgrade = [3, 5, 7, 9, 11], sell = [2, 4, 6, 8, 10], money = [250, 500, 750, 1000, 1250]",
        "output": "[50, 60, 70, 80, 90]"
      },
      {
        "input": "count = [5, 10, 15, 20, 25], upgrade = [2, 4, 6, 8, 10], sell = [1, 2, 3, 4, 5], money = [20, 40, 60, 80, 100]",
        "output": "[5, 10, 11, 13, 15]"
      },
      {
        "input": "count = [10,20,30,40,50,60,70,80,90,100], upgrade = [1,2,3,4,5,6,7,8,9,10], sell = [1,2,3,4,5,6,7,8,9,10], money = [50,100,150,200,250,300,350,400,450,500]",
        "output": "[10, 20, 30, 40, 50, 55, 60, 65, 70, 75]"
      },
      {
        "input": "count = [99999, 99998, 99997], upgrade = [99999, 99998, 99997], sell = [99997, 99998, 99999], money = [1000000000, 1000000000, 1000000000]",
        "output": "[54999, 54999, 54999]"
      },
      {
        "input": "count = [100, 50, 75], upgrade = [10, 5, 20], sell = [5, 15, 25], money = [500, 250, 700]",
        "output": "[66, 50, 57]"
      },
      {
        "input": "count = [50, 50, 50, 50, 50], upgrade = [10, 20, 30, 40, 50], sell = [5, 15, 25, 35, 45], money = [1000, 2000, 3000, 4000, 5000]",
        "output": "[50, 50, 50, 50, 50]"
      },
      {
        "input": "count = [1000, 2000, 3000, 4000, 5000], upgrade = [100, 200, 300, 400, 500], sell = [150, 250, 350, 450, 550], money = [10000, 20000, 30000, 40000, 50000]",
        "output": "[640, 1155, 1661, 2164, 2666]"
      },
      {
        "input": "count = [50, 60, 70], upgrade = [5, 6, 7], sell = [2, 3, 4], money = [250, 300, 350]",
        "output": "[50, 53, 57]"
      },
      {
        "input": "count = [1, 2, 3, 4, 5], upgrade = [100000, 90000, 80000, 70000, 60000], sell = [50000, 60000, 70000, 80000, 90000], money = [1000000, 1000000, 1000000, 1000000, 1000000]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "count = [10000, 20000, 30000], upgrade = [1000, 2000, 3000], sell = [3000, 2000, 1000], money = [100000, 200000, 300000]",
        "output": "[7525, 10050, 7575]"
      },
      {
        "input": "count = [10000, 20000], upgrade = [100, 200], sell = [50, 100], money = [1000000, 2000000]",
        "output": "[10000, 13333]"
      },
      {
        "input": "count = [1, 2, 3, 4, 5], upgrade = [1, 1, 1, 1, 1], sell = [1, 1, 1, 1, 1], money = [1, 2, 3, 4, 5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "count = [100, 200, 300, 400], upgrade = [10, 9, 8, 7], sell = [7, 8, 9, 10], money = [500, 1000, 1500, 2000]",
        "output": "[70, 152, 247, 352]"
      },
      {
        "input": "count = [30,60,90], upgrade = [5,10,15], sell = [2,4,6], money = [150,300,450]",
        "output": "[30, 38, 47]"
      },
      {
        "input": "count = [50, 50, 50, 50, 50], upgrade = [10, 15, 20, 25, 30], sell = [3, 6, 9, 12, 15], money = [100, 200, 300, 400, 500]",
        "output": "[19, 23, 25, 27, 27]"
      },
      {
        "input": "count = [1, 1, 1, 1, 1], upgrade = [100000, 90000, 80000, 70000, 60000], sell = [50000, 60000, 70000, 80000, 90000], money = [100000, 100000, 100000, 100000, 100000]",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "count = [100,100,100,100], upgrade = [1,1,1,1], sell = [1,1,1,1], money = [100,100,100,100]",
        "output": "[100, 100, 100, 100]"
      },
      {
        "input": "count = [100000], upgrade = [1], sell = [1], money = [100000]",
        "output": "[100000]"
      },
      {
        "input": "count = [25, 50, 75, 100], upgrade = [5, 10, 15, 20], sell = [10, 20, 30, 40], money = [500, 1000, 1500, 2000]",
        "output": "[25, 50, 75, 100]"
      },
      {
        "input": "count = [100000, 50000, 25000], upgrade = [1000, 500, 250], sell = [500, 250, 125], money = [10000000, 5000000, 2500000]",
        "output": "[40000, 23333, 15000]"
      },
      {
        "input": "count = [1000, 2000, 3000], upgrade = [50, 75, 100], sell = [25, 50, 75], money = [50000, 100000, 150000]",
        "output": "[1000, 1600, 2142]"
      },
      {
        "input": "count = [15,25,35,45], upgrade = [2,4,6,8], sell = [1,3,5,7], money = [50,75,100,125]",
        "output": "[15, 21, 25, 29]"
      },
      {
        "input": "count = [50,40,30,20,10], upgrade = [10,20,30,40,50], sell = [5,10,15,20,25], money = [100,150,200,250,300]",
        "output": "[23, 18, 14, 10, 7]"
      },
      {
        "input": "count = [1, 2, 3, 4, 5, 6], upgrade = [1000, 900, 800, 700, 600, 500], sell = [500, 600, 700, 800, 900, 1000], money = [10000, 20000, 30000, 40000, 50000, 60000]",
        "output": "[1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "count = [1000, 2000, 3000], upgrade = [10, 20, 30], sell = [5, 10, 15], money = [10000, 20000, 30000]",
        "output": "[1000, 1333, 1666]"
      },
      {
        "input": "count = [100, 100], upgrade = [10, 5], sell = [20, 10], money = [1000, 500]",
        "output": "[100, 100]"
      },
      {
        "input": "count = [100000, 100000], upgrade = [1, 1], sell = [1, 1], money = [200000, 200000]",
        "output": "[100000, 100000]"
      },
      {
        "input": "count = [30, 20, 10], upgrade = [1, 2, 3], sell = [3, 2, 1], money = [100, 50, 10]",
        "output": "[30, 20, 5]"
      },
      {
        "input": "count = [100, 200, 300, 400], upgrade = [1, 2, 3, 4], sell = [4, 3, 2, 1], money = [1000, 2000, 3000, 4000]",
        "output": "[100, 200, 300, 400]"
      },
      {
        "input": "count = [100000], upgrade = [1], sell = [1], money = [50000]",
        "output": "[75000]"
      },
      {
        "input": "count = [500, 500, 500, 500], upgrade = [5, 5, 5, 5], sell = [2, 2, 2, 2], money = [1000, 2000, 3000, 4000]",
        "output": "[285, 428, 500, 500]"
      },
      {
        "input": "count = [100000, 100000, 100000], upgrade = [50000, 60000, 70000], sell = [30000, 20000, 10000], money = [900000, 1200000, 1500000]",
        "output": "[37511, 25015, 12518]"
      },
      {
        "input": "count = [1000, 2000, 3000, 4000], upgrade = [100, 200, 300, 400], sell = [10, 20, 30, 40], money = [10000, 20000, 30000, 40000]",
        "output": "[181, 272, 363, 454]"
      },
      {
        "input": "count = [1000, 2000, 3000], upgrade = [1, 1, 1], sell = [1, 1, 1], money = [1000, 2000, 3000]",
        "output": "[1000, 2000, 3000]"
      },
      {
        "input": "count = [25, 25, 25, 25], upgrade = [10, 20, 30, 40], sell = [1, 2, 3, 4], money = [500, 750, 1000, 1250]",
        "output": "[25, 25, 25, 25]"
      },
      {
        "input": "count = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], upgrade = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], sell = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], money = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "count = [50, 50, 50, 50, 50], upgrade = [1, 2, 3, 4, 5], sell = [5, 4, 3, 2, 1], money = [250, 200, 150, 100, 50]",
        "output": "[50, 50, 50, 33, 16]"
      },
      {
        "input": "count = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], upgrade = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], sell = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], money = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]",
        "output": "[100, 100, 100, 100, 100, 100, 100, 100, 100, 100]"
      },
      {
        "input": "count = [15, 25, 35], upgrade = [7, 11, 13], sell = [5, 8, 6], money = [150, 250, 350]",
        "output": "[15, 23, 29]"
      },
      {
        "input": "count = [10, 20, 30, 40, 50], upgrade = [1, 2, 3, 4, 5], sell = [5, 4, 3, 2, 1], money = [50, 100, 150, 200, 250]",
        "output": "[10, 20, 30, 40, 50]"
      },
      {
        "input": "count = [10, 20, 30, 40], upgrade = [5, 4, 3, 2], sell = [2, 3, 4, 5], money = [50, 100, 150, 200]",
        "output": "[10, 20, 30, 40]"
      },
      {
        "input": "count = [1000, 2000], upgrade = [50, 75], sell = [25, 35], money = [10000, 20000]",
        "output": "[466, 818]"
      },
      {
        "input": "count = [90000, 10000], upgrade = [9, 1], sell = [1, 9], money = [900000, 100000]",
        "output": "[90000, 10000]"
      },
      {
        "input": "count = [100, 100, 100, 100], upgrade = [10, 20, 30, 40], sell = [40, 30, 20, 10], money = [1000, 2000, 3000, 4000]",
        "output": "[100, 100, 100, 100]"
      },
      {
        "input": "count = [100, 200, 300, 400], upgrade = [15, 25, 35, 45], sell = [5, 10, 15, 20], money = [1000, 2000, 3000, 4000]",
        "output": "[75, 114, 150, 184]"
      },
      {
        "input": "count = [1, 2, 3, 4, 5], upgrade = [1, 2, 3, 4, 5], sell = [5, 4, 3, 2, 1], money = [5, 10, 15, 20, 25]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "count = [50, 50, 50, 50], upgrade = [5, 6, 7, 8], sell = [8, 7, 6, 5], money = [500, 600, 700, 800]",
        "output": "[50, 50, 50, 50]"
      },
      {
        "input": "count = [99999, 99998, 99997], upgrade = [99, 98, 97], sell = [97, 96, 95], money = [9999900, 9999800, 9999700]",
        "output": "[99999, 99998, 99997]"
      },
      {
        "input": "count = [100, 150, 200], upgrade = [5, 7, 9], sell = [8, 6, 4], money = [300, 450, 600]",
        "output": "[84, 103, 107]"
      },
      {
        "input": "count = [20, 40, 60, 80, 100], upgrade = [1, 2, 3, 4, 5], sell = [10, 20, 30, 40, 50], money = [500, 1000, 1500, 2000, 2500]",
        "output": "[20, 40, 60, 80, 100]"
      },
      {
        "input": "count = [50000,50000], upgrade = [2,2], sell = [1,1], money = [150000,150000]",
        "output": "[50000, 50000]"
      },
      {
        "input": "count = [50, 60, 70], upgrade = [3, 4, 5], sell = [2, 3, 4], money = [150, 200, 250]",
        "output": "[50, 54, 58]"
      },
      {
        "input": "count = [100000], upgrade = [1], sell = [10], money = [900000]",
        "output": "[100000]"
      },
      {
        "input": "count = [10, 20, 30, 40, 50], upgrade = [5, 10, 15, 20, 25], sell = [30, 25, 20, 15, 10], money = [1000, 2000, 3000, 4000, 5000]",
        "output": "[10, 20, 30, 40, 50]"
      },
      {
        "input": "count = [33333, 33333, 33333], upgrade = [1, 1, 1], sell = [1, 1, 1], money = [1000000, 1000000, 1000000]",
        "output": "[33333, 33333, 33333]"
      },
      {
        "input": "count = [1000, 2000, 3000], upgrade = [1, 2, 3], sell = [2, 4, 6], money = [20000, 40000, 60000]",
        "output": "[1000, 2000, 3000]"
      },
      {
        "input": "count = [100, 100, 100, 100], upgrade = [1, 2, 3, 4], sell = [4, 3, 2, 1], money = [100, 200, 300, 400]",
        "output": "[100, 100, 100, 100]"
      },
      {
        "input": "count = [1, 2, 3, 4, 5], upgrade = [1, 1, 1, 1, 1], sell = [2, 2, 2, 2, 2], money = [0, 1, 3, 6, 10]",
        "output": "[0, 1, 3, 4, 5]"
      }
    ]
  },
  {
    "id": 1424,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "Given a 2D integer array nums, return all elements of nums in diagonal order as shown in the below images.\n\u00a0\nExample 1:\n\n\nInput: nums = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,4,2,7,5,3,8,6,9]\n\nExample 2:\n\n\nInput: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]\nOutput: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i].length <= 105\n1 <= sum(nums[i].length) <= 105\n1 <= nums[i][j] <= 105\n\n",
    "starterCode": "class Solution:\n    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [[1]]",
        "output": "[1]"
      },
      {
        "input": "nums = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[1, 4, 2, 7, 5, 3, 8, 6, 9]"
      },
      {
        "input": "nums = [[1,2,3],[4,5],[6]]",
        "output": "[1, 4, 2, 6, 5, 3]"
      },
      {
        "input": "nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]",
        "output": "[1, 6, 2, 8, 7, 3, 9, 4, 12, 10, 5, 13, 11, 14, 15, 16]"
      },
      {
        "input": "nums = [[1,2],[3,4],[5,6]]",
        "output": "[1, 3, 2, 5, 4, 6]"
      },
      {
        "input": "nums = [[1,2,3],[4],[5,6,7],[8,9]]",
        "output": "[1, 4, 2, 5, 3, 8, 6, 9, 7]"
      },
      {
        "input": "nums = [[1,2],[3,4,5],[6,7,8,9]]",
        "output": "[1, 3, 2, 6, 4, 7, 5, 8, 9]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19],[20,21,22,23,24,25,26],[27,28,29,30,31],[32,33,34],[35,36],[37]]",
        "output": "[1, 11, 2, 20, 12, 3, 27, 21, 13, 4, 32, 28, 22, 14, 5, 35, 33, 29, 23, 15, 6, 37, 36, 34, 30, 24, 16, 7, 31, 25, 17, 8, 26, 18, 9, 19, 10]"
      },
      {
        "input": "nums = [[100,200],[300,400,500,600],[700],[800,900,1000,1100,1200,1300],[1400,1500]]",
        "output": "[100, 300, 200, 700, 400, 800, 500, 1400, 900, 600, 1500, 1000, 1100, 1200, 1300]"
      },
      {
        "input": "nums = [[1,2,3,4],[5,6,7],[8],[9,10,11,12],[13,14],[15,16,17,18,19,20]]",
        "output": "[1, 5, 2, 8, 6, 3, 9, 7, 4, 13, 10, 15, 14, 11, 16, 12, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]]",
        "output": "[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36],[37,38,39,40],[41,42],[43],[44,45,46],[47,48,49,50,51]]",
        "output": "[1, 21, 2, 31, 22, 3, 37, 32, 23, 4, 41, 38, 33, 24, 5, 43, 42, 39, 34, 25, 6, 44, 40, 35, 26, 7, 47, 45, 36, 27, 8, 48, 46, 28, 9, 49, 29, 10, 50, 30, 11, 51, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [[1,2],[3,4,5],[6,7,8,9],[10,11,12,13,14],[15,16,17,18,19,20],[21,22,23,24,25,26,27]]",
        "output": "[1, 3, 2, 6, 4, 10, 7, 5, 15, 11, 8, 21, 16, 12, 9, 22, 17, 13, 23, 18, 14, 24, 19, 25, 20, 26, 27]"
      },
      {
        "input": "nums = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15],[16,17,18],[19,20],[21],[22,23,24],[25,26,27,28]]",
        "output": "[1, 11, 2, 16, 12, 3, 19, 17, 13, 4, 21, 20, 18, 14, 5, 22, 15, 6, 25, 23, 7, 26, 24, 8, 27, 9, 28, 10]"
      },
      {
        "input": "nums = [[1],[2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[26,27,28,29,30,31],[32,33,34,35,36,37,38,39,40]]",
        "output": "[1, 2, 11, 3, 26, 12, 4, 32, 27, 13, 5, 33, 28, 14, 6, 34, 29, 15, 7, 35, 30, 16, 8, 36, 31, 17, 9, 37, 18, 10, 38, 19, 39, 20, 40, 21, 22, 23, 24, 25]"
      },
      {
        "input": "nums = [[1],[2,3],[4,5,6],[7,8,9,10],[11,12,13,14,15],[16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35,36]]",
        "output": "[1, 2, 4, 3, 7, 5, 11, 8, 6, 16, 12, 9, 22, 17, 13, 10, 29, 23, 18, 14, 30, 24, 19, 15, 31, 25, 20, 32, 26, 21, 33, 27, 34, 28, 35, 36]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19],[20,21,22,23,24,25,26,27],[28,29,30,31,32,33],[34,35,36,37,38],[39,40,41,42],[43,44,45],[46,47],[48,49],[50]]",
        "output": "[1, 11, 2, 20, 12, 3, 28, 21, 13, 4, 34, 29, 22, 14, 5, 39, 35, 30, 23, 15, 6, 43, 40, 36, 31, 24, 16, 7, 46, 44, 41, 37, 32, 25, 17, 8, 48, 47, 45, 42, 38, 33, 26, 18, 9, 50, 49, 27, 19, 10]"
      },
      {
        "input": "nums = [[1],[2,3,4],[5,6,7,8],[9,10,11,12,13],[14,15,16,17,18,19],[20,21,22,23,24,25,26],[27,28,29,30,31,32,33,34],[35,36,37,38,39,40,41,42,43]]",
        "output": "[1, 2, 5, 3, 9, 6, 4, 14, 10, 7, 20, 15, 11, 8, 27, 21, 16, 12, 35, 28, 22, 17, 13, 36, 29, 23, 18, 37, 30, 24, 19, 38, 31, 25, 39, 32, 26, 40, 33, 41, 34, 42, 43]"
      },
      {
        "input": "nums = [[1,2,3,4],[5,6],[7,8,9],[10],[11,12,13,14,15],[16,17,18],[19,20],[21,22,23,24],[25,26,27],[28,29,30]]",
        "output": "[1, 5, 2, 7, 6, 3, 10, 8, 4, 11, 9, 16, 12, 19, 17, 13, 21, 20, 18, 14, 25, 22, 15, 28, 26, 23, 29, 27, 24, 30]"
      },
      {
        "input": "nums = [[1,2,3,4,5],[6,7,8],[9,10],[11],[12,13,14,15,16,17],[18,19,20,21],[22]]",
        "output": "[1, 6, 2, 9, 7, 3, 11, 10, 8, 4, 12, 5, 18, 13, 22, 19, 14, 20, 15, 21, 16, 17]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19],[20,21,22,23,24,25,26],[27,28,29,30,31,32],[33,34,35,36,37],[38,39,40,41],[42,43,44],[45,46],[47]]",
        "output": "[1, 11, 2, 20, 12, 3, 27, 21, 13, 4, 33, 28, 22, 14, 5, 38, 34, 29, 23, 15, 6, 42, 39, 35, 30, 24, 16, 7, 45, 43, 40, 36, 31, 25, 17, 8, 47, 46, 44, 41, 37, 32, 26, 18, 9, 19, 10]"
      },
      {
        "input": "nums = [[1,2,3],[4,5,6,7,8,9,10],[11,12,13],[14,15,16,17,18,19,20,21,22]]",
        "output": "[1, 4, 2, 11, 5, 3, 14, 12, 6, 15, 13, 7, 16, 8, 17, 9, 18, 10, 19, 20, 21, 22]"
      },
      {
        "input": "nums = [[1,2],[3,4,5,6,7],[8,9,10],[11,12],[13],[14,15,16,17],[18,19,20],[21,22],[23],[24,25,26,27,28]]",
        "output": "[1, 3, 2, 8, 4, 11, 9, 5, 13, 12, 10, 6, 14, 7, 18, 15, 21, 19, 16, 23, 22, 20, 17, 24, 25, 26, 27, 28]"
      },
      {
        "input": "nums = [[1],[2,3],[4,5,6],[7,8,9,10],[11,12,13,14,15],[16,17,18,19,20,21]]",
        "output": "[1, 2, 4, 3, 7, 5, 11, 8, 6, 16, 12, 9, 17, 13, 10, 18, 14, 19, 15, 20, 21]"
      },
      {
        "input": "nums = [[1,2,3],[4,5,6,7,8],[9,10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]]",
        "output": "[1, 4, 2, 9, 5, 3, 19, 10, 6, 28, 20, 11, 7, 29, 21, 12, 8, 30, 22, 13, 31, 23, 14, 32, 24, 15, 33, 25, 16, 34, 26, 17, 35, 27, 18, 36, 37, 38, 39, 40, 41, 42, 43]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19],[20,21,22,23,24,25,26],[27,28,29,30,31,32],[33,34,35,36,37],[38,39,40,41],[42,43,44],[45,46],[47],[48]]",
        "output": "[1, 11, 2, 20, 12, 3, 27, 21, 13, 4, 33, 28, 22, 14, 5, 38, 34, 29, 23, 15, 6, 42, 39, 35, 30, 24, 16, 7, 45, 43, 40, 36, 31, 25, 17, 8, 47, 46, 44, 41, 37, 32, 26, 18, 9, 48, 19, 10]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6],[7,8,9],[10,11],[12,13,14,15],[16,17,18,19,20]]",
        "output": "[1, 7, 2, 10, 8, 3, 12, 11, 9, 4, 16, 13, 5, 17, 14, 6, 18, 15, 19, 20]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]"
      },
      {
        "input": "nums = [[1],[2,3],[4,5,6],[7,8,9,10],[11,12,13],[14,15],[16]]",
        "output": "[1, 2, 4, 3, 7, 5, 11, 8, 6, 14, 12, 9, 16, 15, 13, 10]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19],[20,21,22,23,24],[25,26,27],[28,29,30,31,32,33,34,35,36]]",
        "output": "[1, 11, 2, 20, 12, 3, 25, 21, 13, 4, 28, 26, 22, 14, 5, 29, 27, 23, 15, 6, 30, 24, 16, 7, 31, 17, 8, 32, 18, 9, 33, 19, 10, 34, 35, 36]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6],[7,8],[9,10,11],[12,13,14],[15],[16,17,18,19]]",
        "output": "[1, 7, 2, 9, 8, 3, 12, 10, 4, 15, 13, 11, 5, 16, 14, 6, 17, 18, 19]"
      },
      {
        "input": "nums = [[1,2,3,4],[5,6,7],[8],[9,10,11,12],[13,14]]",
        "output": "[1, 5, 2, 8, 6, 3, 9, 7, 4, 13, 10, 14, 11, 12]"
      },
      {
        "input": "nums = [[1,2,3],[4,5,6,7],[8,9,10,11,12],[13,14,15,16],[17,18,19],[20,21],[22]]",
        "output": "[1, 4, 2, 8, 5, 3, 13, 9, 6, 17, 14, 10, 7, 20, 18, 15, 11, 22, 21, 19, 16, 12]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6],[7,8,9],[10,11,12,13],[14,15],[16]]",
        "output": "[1, 7, 2, 10, 8, 3, 14, 11, 9, 4, 16, 15, 12, 5, 13, 6]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28],[29,30,31],[32,33],[34],[35,36,37],[38,39,40,41,42]]",
        "output": "[1, 11, 2, 19, 12, 3, 25, 20, 13, 4, 29, 26, 21, 14, 5, 32, 30, 27, 22, 15, 6, 34, 33, 31, 28, 23, 16, 7, 35, 24, 17, 8, 38, 36, 18, 9, 39, 37, 10, 40, 41, 42]"
      },
      {
        "input": "nums = [[1,2,3],[4,5,6,7,8],[9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28,29],[30,31,32,33,34,35,36,37,38]]",
        "output": "[1, 4, 2, 9, 5, 3, 15, 10, 6, 22, 16, 11, 7, 30, 23, 17, 12, 8, 31, 24, 18, 13, 32, 25, 19, 14, 33, 26, 20, 34, 27, 21, 35, 28, 36, 29, 37, 38]"
      },
      {
        "input": "nums = [[1],[2,3,4],[5,6,7,8],[9,10,11,12,13],[14,15,16,17,18,19],[20,21,22,23,24,25,26],[27,28,29,30,31,32,33,34]]",
        "output": "[1, 2, 5, 3, 9, 6, 4, 14, 10, 7, 20, 15, 11, 8, 27, 21, 16, 12, 28, 22, 17, 13, 29, 23, 18, 30, 24, 19, 31, 25, 32, 26, 33, 34]"
      },
      {
        "input": "nums = [[1,2,3,4,5],[6,7,8,9,10,11],[12,13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29],[30,31,32,33],[34,35,36],[37,38],[39]]",
        "output": "[1, 6, 2, 12, 7, 3, 19, 13, 8, 4, 25, 20, 14, 9, 5, 30, 26, 21, 15, 10, 34, 31, 27, 22, 16, 11, 37, 35, 32, 28, 23, 17, 39, 38, 36, 33, 29, 24, 18]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55]"
      },
      {
        "input": "nums = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19],[20,21,22,23,24,25,26],[27,28,29,30,31,32,33,34,35,36,37,38,39,40]]",
        "output": "[1, 11, 2, 20, 12, 3, 27, 21, 13, 4, 28, 22, 14, 5, 29, 23, 15, 6, 30, 24, 16, 7, 31, 25, 17, 8, 32, 26, 18, 9, 33, 19, 10, 34, 35, 36, 37, 38, 39, 40]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6],[7,8,9,10],[11,12,13],[14,15],[16],[17,18,19,20]]",
        "output": "[1, 7, 2, 11, 8, 3, 14, 12, 9, 4, 16, 15, 13, 10, 5, 17, 6, 18, 19, 20]"
      },
      {
        "input": "nums = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]]",
        "output": "[1, 26, 2, 27, 3, 28, 4, 29, 5, 30, 6, 31, 7, 32, 8, 33, 9, 34, 10, 35, 11, 36, 12, 37, 13, 38, 14, 39, 15, 40, 16, 41, 17, 42, 18, 43, 19, 44, 20, 45, 21, 46, 22, 47, 23, 48, 24, 49, 25, 50]"
      },
      {
        "input": "nums = [[1,2,3],[4,5,6,7,8,9],[10,11,12,13,14],[15,16],[17,18,19,20],[21]]",
        "output": "[1, 4, 2, 10, 5, 3, 15, 11, 6, 17, 16, 12, 7, 21, 18, 13, 8, 19, 14, 9, 20]"
      },
      {
        "input": "nums = [[1,2,3,4,5],[6,7,8],[9,10],[11],[12,13,14,15],[16,17,18],[19],[20,21,22,23,24,25,26,27,28,29,30]]",
        "output": "[1, 6, 2, 9, 7, 3, 11, 10, 8, 4, 12, 5, 16, 13, 19, 17, 14, 20, 18, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "nums = [[1,2,3,4,5],[6,7,8,9],[10,11,12],[13,14],[15],[16,17,18,19,20]]",
        "output": "[1, 6, 2, 10, 7, 3, 13, 11, 8, 4, 15, 14, 12, 9, 5, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [[1],[2,3],[4,5,6],[7,8,9,10],[11,12,13,14,15]]",
        "output": "[1, 2, 4, 3, 7, 5, 11, 8, 6, 12, 9, 13, 10, 14, 15]"
      },
      {
        "input": "nums = [[1,2],[3,4,5],[6,7,8,9],[10,11,12,13,14],[15,16,17,18,19,20]]",
        "output": "[1, 3, 2, 6, 4, 10, 7, 5, 15, 11, 8, 16, 12, 9, 17, 13, 18, 14, 19, 20]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[16,17,18,19,20,21,22,23,24,25,26,27,28,29],[30,31,32,33,34,35,36,37,38,39,40,41],[42,43,44,45,46,47,48,49,50,51,52],[53,54,55,56,57,58,59,60,61,62],[63,64,65,66,67,68,69,70,71],[72,73,74,75,76,77,78],[79,80,81,82,83,84],[85,86,87,88,89],[90,91,92,93],[94,95,96],[97,98],[99]]",
        "output": "[1, 16, 2, 30, 17, 3, 42, 31, 18, 4, 53, 43, 32, 19, 5, 63, 54, 44, 33, 20, 6, 72, 64, 55, 45, 34, 21, 7, 79, 73, 65, 56, 46, 35, 22, 8, 85, 80, 74, 66, 57, 47, 36, 23, 9, 90, 86, 81, 75, 67, 58, 48, 37, 24, 10, 94, 91, 87, 82, 76, 68, 59, 49, 38, 25, 11, 97, 95, 92, 88, 83, 77, 69, 60, 50, 39, 26, 12, 99, 98, 96, 93, 89, 84, 78, 70, 61, 51, 40, 27, 13, 71, 62, 52, 41, 28, 14, 29, 15]"
      },
      {
        "input": "nums = [[1,2,3,4,5],[6,7,8,9],[10,11,12],[13,14],[15]]",
        "output": "[1, 6, 2, 10, 7, 3, 13, 11, 8, 4, 15, 14, 12, 9, 5]"
      },
      {
        "input": "nums = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "nums = [[1,2,3,4],[5,6,7],[8,9],[10],[11,12,13,14,15],[16,17,18,19]]",
        "output": "[1, 5, 2, 8, 6, 3, 10, 9, 7, 4, 11, 16, 12, 17, 13, 18, 14, 19, 15]"
      },
      {
        "input": "nums = [[1],[2,3],[4,5,6],[7,8,9,10],[11,12,13,14,15],[16,17,18,19,20,21],[22,23,24,25,26,27,28]]",
        "output": "[1, 2, 4, 3, 7, 5, 11, 8, 6, 16, 12, 9, 22, 17, 13, 10, 23, 18, 14, 24, 19, 15, 25, 20, 26, 21, 27, 28]"
      },
      {
        "input": "nums = [[1,2],[3],[4,5,6,7],[8,9],[10,11,12],[13,14,15,16,17],[18,19,20,21,22,23]]",
        "output": "[1, 3, 2, 4, 8, 5, 10, 9, 6, 13, 11, 7, 18, 14, 12, 19, 15, 20, 16, 21, 17, 22, 23]"
      },
      {
        "input": "nums = [[1,2,3,4],[5,6,7],[8,9],[10],[11,12,13,14],[15,16]]",
        "output": "[1, 5, 2, 8, 6, 3, 10, 9, 7, 4, 11, 15, 12, 16, 13, 14]"
      },
      {
        "input": "nums = [[1],[2,3,4],[5,6],[7,8,9,10],[11,12,13],[14,15,16,17,18]]",
        "output": "[1, 2, 5, 3, 7, 6, 4, 11, 8, 14, 12, 9, 15, 13, 10, 16, 17, 18]"
      },
      {
        "input": "nums = [[1,2,3,4,5],[6,7,8,9],[10,11,12],[13,14],[15],[16,17,18,19,20],[21,22,23,24,25]]",
        "output": "[1, 6, 2, 10, 7, 3, 13, 11, 8, 4, 15, 14, 12, 9, 5, 16, 21, 17, 22, 18, 23, 19, 24, 20, 25]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28],[29,30,31],[32,33],[34]]",
        "output": "[1, 11, 2, 19, 12, 3, 25, 20, 13, 4, 29, 26, 21, 14, 5, 32, 30, 27, 22, 15, 6, 34, 33, 31, 28, 23, 16, 7, 24, 17, 8, 18, 9, 10]"
      },
      {
        "input": "nums = [[100,200,300],[400,500],[600],[700,800,900,1000],[1100,1200,1300],[1400,1500,1600,1700,1800]]",
        "output": "[100, 400, 200, 600, 500, 300, 700, 1100, 800, 1400, 1200, 900, 1500, 1300, 1000, 1600, 1700, 1800]"
      },
      {
        "input": "nums = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [[1,2,3,4],[5,6,7],[8,9],[10]]",
        "output": "[1, 5, 2, 8, 6, 3, 10, 9, 7, 4]"
      },
      {
        "input": "nums = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45]]",
        "output": "[1, 6, 2, 11, 7, 3, 16, 12, 8, 4, 21, 17, 13, 9, 5, 26, 22, 18, 14, 10, 31, 27, 23, 19, 15, 36, 32, 28, 24, 20, 41, 37, 33, 29, 25, 42, 38, 34, 30, 43, 39, 35, 44, 40, 45]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16],[17,18,19,20,21],[22,23,24,25],[26,27],[28]]",
        "output": "[1, 10, 2, 17, 11, 3, 22, 18, 12, 4, 26, 23, 19, 13, 5, 28, 27, 24, 20, 14, 6, 25, 21, 15, 7, 16, 8, 9]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]]",
        "output": "[1, 16, 2, 31, 17, 3, 32, 18, 4, 33, 19, 5, 34, 20, 6, 35, 21, 7, 36, 22, 8, 37, 23, 9, 38, 24, 10, 39, 25, 11, 40, 26, 12, 41, 27, 13, 42, 28, 14, 43, 29, 15, 44, 30, 45]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]]",
        "output": "[1, 21, 2, 22, 3, 23, 4, 24, 5, 25, 6, 26, 7, 27, 8, 28, 9, 29, 10, 30, 11, 31, 12, 32, 13, 33, 14, 34, 15, 35, 16, 36, 17, 37, 18, 38, 19, 39, 20, 40]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19],[20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34],[35,36,37,38,39,40]]",
        "output": "[1, 11, 2, 20, 12, 3, 28, 21, 13, 4, 35, 29, 22, 14, 5, 36, 30, 23, 15, 6, 37, 31, 24, 16, 7, 38, 32, 25, 17, 8, 39, 33, 26, 18, 9, 40, 34, 27, 19, 10]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10,11],[12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27],[28,29,30,31,32],[33,34,35,36],[37,38,39],[40,41],[42],[43]]",
        "output": "[1, 12, 2, 21, 13, 3, 28, 22, 14, 4, 33, 29, 23, 15, 5, 37, 34, 30, 24, 16, 6, 40, 38, 35, 31, 25, 17, 7, 42, 41, 39, 36, 32, 26, 18, 8, 43, 27, 19, 9, 20, 10, 11]"
      }
    ]
  },
  {
    "id": 2104,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Array",
      "Monotonic Stack"
    ],
    "problemDescription": "You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.\nReturn the sum of all subarray ranges of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,3]\nOutput: 4\nExplanation: The 6 subarrays of nums are the following:\n[1], range = largest - smallest = 1 - 1 = 0 \n[2], range = 2 - 2 = 0\n[3], range = 3 - 3 = 0\n[1,2], range = 2 - 1 = 1\n[2,3], range = 3 - 2 = 1\n[1,2,3], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.\nExample 2:\n\nInput: nums = [1,3,3]\nOutput: 4\nExplanation: The 6 subarrays of nums are the following:\n[1], range = largest - smallest = 1 - 1 = 0\n[3], range = 3 - 3 = 0\n[3], range = 3 - 3 = 0\n[1,3], range = 3 - 1 = 2\n[3,3], range = 3 - 3 = 0\n[1,3,3], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.\n\nExample 3:\n\nInput: nums = [4,-2,-3,4,1]\nOutput: 59\nExplanation: The sum of all subarray ranges of nums is 59.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 1000\n-109 <= nums[i] <= 109\n\n\u00a0\nFollow-up: Could you find a solution with O(n) time complexity?\n",
    "starterCode": "class Solution:\n    def subArrayRanges(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [-1, -2, -3, -4]",
        "output": "10"
      },
      {
        "input": "nums = [0, 0, 0, 0]",
        "output": "0"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "165"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "165"
      },
      {
        "input": "nums = [1,-1,1,-1,1,-1]",
        "output": "30"
      },
      {
        "input": "nums = [4,-2,-3,4,1]",
        "output": "59"
      },
      {
        "input": "nums = [3,2,2,2,1]",
        "output": "8"
      },
      {
        "input": "nums = [1000000000,-1000000000,1000000000,-1000000000,1000000000]",
        "output": "20000000000"
      },
      {
        "input": "nums = [10,20,30,40,50]",
        "output": "200"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5]",
        "output": "20"
      },
      {
        "input": "nums = [0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "20"
      },
      {
        "input": "nums = [100,100,100,100]",
        "output": "0"
      },
      {
        "input": "nums = [1000000000, -1000000000, 1000000000, -1000000000]",
        "output": "12000000000"
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [10,-10,20,-20,30,-30]",
        "output": "700"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50]",
        "output": "200"
      },
      {
        "input": "nums = [1,2,2,2,3]",
        "output": "8"
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "20"
      },
      {
        "input": "nums = [-10,-20,-30,-40,-50]",
        "output": "200"
      },
      {
        "input": "nums = [1,3,3]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3]",
        "output": "4"
      },
      {
        "input": "nums = [-10,100,-20,200,-30,300]",
        "output": "3580"
      },
      {
        "input": "nums = [5]",
        "output": "0"
      },
      {
        "input": "nums = [-1, 0, 1, -1, 0, 1, -1, 0, 1]",
        "output": "66"
      },
      {
        "input": "nums = [-1, 4, -2, 3, -3]",
        "output": "60"
      },
      {
        "input": "nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]",
        "output": "45"
      },
      {
        "input": "nums = [1,0,-1,2,-2,3,-3,4,-4,5,-5]",
        "output": "384"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "16500"
      },
      {
        "input": "nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]",
        "output": "64"
      },
      {
        "input": "nums = [10,-10,20,-20,30,-30,40,-40,50]",
        "output": "2400"
      },
      {
        "input": "nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "190"
      },
      {
        "input": "nums = [10, 20, 30, 25, 15, 10, 5, 2, 1, 0]",
        "output": "743"
      },
      {
        "input": "nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]",
        "output": "105"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "560"
      },
      {
        "input": "nums = [5,3,8,1,4]",
        "output": "57"
      },
      {
        "input": "nums = [10, 20, 30, 25, 15, 5]",
        "output": "240"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4]",
        "output": "168"
      },
      {
        "input": "nums = [1000000000,-1000000000,1000000000,-1000000000]",
        "output": "12000000000"
      },
      {
        "input": "nums = [1,-1,2,-2,3,-3,4,-4,5,-5]",
        "output": "330"
      },
      {
        "input": "nums = [5,1,4,2,8,3]",
        "output": "77"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5]",
        "output": "60"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
        "output": "1540"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, -500, -400, -300, -200, -100]",
        "output": "29000"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "560"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500]",
        "output": "2000"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, -50, -40, -30, -20, -10]",
        "output": "2900"
      },
      {
        "input": "nums = [1000000000, -1000000000, 1000000000, -1000000000, 1000000000]",
        "output": "20000000000"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]",
        "output": "635"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000]",
        "output": "0"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 100, 200, 300, 400, 500, 100, 200, 300, 400, 500]",
        "output": "36000"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "1540"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4]",
        "output": "40"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [100,10,1,0,1,10,100]",
        "output": "1149"
      },
      {
        "input": "nums = [-1,0,1,-1,0,1,-1,0,1]",
        "output": "66"
      },
      {
        "input": "nums = [9,-8,7,-6,5,-4,3,-2,1]",
        "output": "444"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19]",
        "output": "330"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "80"
      },
      {
        "input": "nums = [0, 1, 0, 1, 0, 1, 0, 1]",
        "output": "28"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]",
        "output": "480"
      },
      {
        "input": "nums = [10, 1, 20, 2, 30, 3, 40, 4, 50, 5]",
        "output": "1655"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5]",
        "output": "240"
      },
      {
        "input": "nums = [10, -10, 20, -20, 30, -30, 40, -40]",
        "output": "1680"
      },
      {
        "input": "nums = [10, 20, 10, 20, 10, 20, 10]",
        "output": "210"
      },
      {
        "input": "nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]",
        "output": "45"
      },
      {
        "input": "nums = [1000000000, -1000000000, 500000000, -500000000, 250000000, -250000000]",
        "output": "21000000000"
      },
      {
        "input": "nums = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "5600"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "1650"
      },
      {
        "input": "nums = [19, 17, 15, 13, 11, 9, 7, 5, 3, 1]",
        "output": "330"
      },
      {
        "input": "nums = [5, 8, 6, 7, 9, 1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "1736"
      },
      {
        "input": "nums = [9,7,5,3,1]",
        "output": "40"
      },
      {
        "input": "nums = [5, 8, 3, 7, 9, 1]",
        "output": "87"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "0"
      },
      {
        "input": "nums = [1000,900,800,700,600,500,400,300,200,100,0]",
        "output": "22000"
      },
      {
        "input": "nums = [3,1,2,4,5,6,7,8,9,10]",
        "output": "180"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5]",
        "output": "20"
      },
      {
        "input": "nums = [10, -5, 3, 7, -2, 8]",
        "output": "172"
      },
      {
        "input": "nums = [1, 2, 3, 4, 3, 2, 1]",
        "output": "42"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "165"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "330"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 4, 3, 2, 1]",
        "output": "90"
      },
      {
        "input": "nums = [-1, -5, -9, -3, -6]",
        "output": "59"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600]",
        "output": "3500"
      },
      {
        "input": "nums = [1,5,3,7,9,2,6,8,4,10]",
        "output": "283"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "560"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1]",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "165"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5]",
        "output": "240"
      },
      {
        "input": "nums = [-10,-20,-30,-40,-50,-60,-70,-80,-90,-100]",
        "output": "1650"
      },
      {
        "input": "nums = [5, 2, 9, 1, 5, 6]",
        "output": "99"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]",
        "output": "328"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14]",
        "output": "651"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "1540"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]",
        "output": "285"
      },
      {
        "input": "nums = [100, -100, 200, -200, 300]",
        "output": "4000"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,90,80,70,60,50,40,30,20,10]",
        "output": "8550"
      },
      {
        "input": "nums = [9,7,5,3,1,2,4,6,8,10]",
        "output": "235"
      },
      {
        "input": "nums = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100]",
        "output": "6150"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [1000000000, 1000000000, -1000000000, -1000000000]",
        "output": "8000000000"
      },
      {
        "input": "nums = [-1,2,-3,4,-5]",
        "output": "70"
      },
      {
        "input": "nums = [1000000000, -1000000000, 500000000, -500000000, 250000000]",
        "output": "15250000000"
      },
      {
        "input": "nums = [100,-200,300,-400,500]",
        "output": "7000"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]",
        "output": "220"
      },
      {
        "input": "nums = [5, 3, 1, 2, 4]",
        "output": "27"
      },
      {
        "input": "nums = [5, 2, 3, 1, 4, 6, 8, 7, 9, 0]",
        "output": "244"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "2660"
      },
      {
        "input": "nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "45"
      },
      {
        "input": "nums = [5, 3, 8, 1, 4]",
        "output": "57"
      },
      {
        "input": "nums = [5,2,4,6,1,3]",
        "output": "60"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1]",
        "output": "56"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5]",
        "output": "330"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "1650"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1]",
        "output": "90"
      },
      {
        "input": "nums = [5, 3, 8, 2, 7]",
        "output": "53"
      },
      {
        "input": "nums = [5, 1, 4, 3, 2]",
        "output": "29"
      },
      {
        "input": "nums = [1, 2, 3, -1, -2, -3, 4, 5, 6]",
        "output": "201"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15]",
        "output": "2135"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]",
        "output": "1650"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3]",
        "output": "392"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]",
        "output": "165000"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "5600"
      },
      {
        "input": "nums = [7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7]",
        "output": "560"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "1540"
      }
    ]
  },
  {
    "id": 1024,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given a series of video clips from a sporting event that lasted time seconds. These video clips can be overlapping with each other and have varying lengths.\nEach video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi.\nWe can cut these clips into segments freely.\n\nFor example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].\n\nReturn the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. If the task is impossible, return -1.\n\u00a0\nExample 1:\n\nInput: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\nOutput: 3\nExplanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\nThen, we can reconstruct the sporting event as follows:\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].\n\nExample 2:\n\nInput: clips = [[0,1],[1,2]], time = 5\nOutput: -1\nExplanation: We cannot cover [0,5] with only [0,1] and [1,2].\n\nExample 3:\n\nInput: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9\nOutput: 3\nExplanation: We can take clips [0,4], [4,7], and [6,9].\n\n\u00a0\nConstraints:\n\n1 <= clips.length <= 100\n0 <= starti <= endi <= 100\n1 <= time <= 100\n\n",
    "starterCode": "class Solution:\n    def videoStitching(self, clips: List[List[int]], time: int) -> int:\n        ",
    "testCases": [
      {
        "input": "clips = [[0,5],[0,7],[1,3],[1,4],[2,5],[2,6],[3,4],[3,5],[4,5],[4,6],[5,6],[5,7],[6,7],[6,8],[7,8],[7,10],[7,9],[8,10],[9,10]], time = 10",
        "output": "2"
      },
      {
        "input": "clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10",
        "output": "3"
      },
      {
        "input": "clips = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], time = 10",
        "output": "10"
      },
      {
        "input": "clips = [[0,10]], time = 10",
        "output": "1"
      },
      {
        "input": "clips = [[0,5],[0,7],[0,8],[1,5],[2,4],[4,5],[5,8],[5,10],[6,8],[7,10],[8,10],[9,10]], time = 10",
        "output": "2"
      },
      {
        "input": "clips = [[0,1],[1,3],[3,4],[4,6],[6,7],[7,9],[9,10]], time = 10",
        "output": "7"
      },
      {
        "input": "clips = [[0,1],[1,2]], time = 5",
        "output": "-1"
      },
      {
        "input": "clips = [[0,0],[6,8],[0,4],[0,7],[7,9],[8,10],[9,10],[9,12],[4,5],[4,4],[0,3],[6,7],[0,6],[0,6],[0,2],[7,10],[7,9],[9,10]], time = 9",
        "output": "2"
      },
      {
        "input": "clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9",
        "output": "3"
      },
      {
        "input": "clips = [[0,5],[1,5],[1,6],[3,4],[3,5]], time = 5",
        "output": "1"
      },
      {
        "input": "clips = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[19,21],[20,22],[21,23],[22,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30]], time = 30",
        "output": "15"
      },
      {
        "input": "clips = [[0,20],[1,19],[2,18],[3,17],[4,16],[5,15],[6,14],[7,13],[8,12],[9,11]], time = 20",
        "output": "1"
      },
      {
        "input": "clips = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], time = 15",
        "output": "15"
      },
      {
        "input": "clips = [[0,50],[25,75],[50,100],[0,25],[25,50],[50,75],[75,100],[0,100]], time = 100",
        "output": "1"
      },
      {
        "input": "clips = [[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[0,10]], time = 10",
        "output": "1"
      },
      {
        "input": "clips = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[20,21],[22,23],[24,25],[26,27],[28,29],[30,31],[32,33],[34,35],[36,37],[38,39]], time = 39",
        "output": "-1"
      },
      {
        "input": "clips = [[0,50],[50,100],[100,150],[150,200],[200,250],[250,300],[300,350],[350,400],[400,450],[450,500]], time = 500",
        "output": "10"
      },
      {
        "input": "clips = [[0,5],[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[35,40],[40,45],[45,50],[50,55]], time = 55",
        "output": "11"
      },
      {
        "input": "clips = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], time = 10",
        "output": "-1"
      },
      {
        "input": "clips = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[19,21],[20,22]], time = 22",
        "output": "11"
      },
      {
        "input": "clips = [[0,2],[1,5],[3,7],[4,9],[6,11],[8,13],[10,15],[12,17],[14,19],[16,21],[18,23],[20,25]], time = 25",
        "output": "7"
      },
      {
        "input": "clips = [[0,10],[2,8],[3,5],[4,6],[6,9],[8,10],[1,4],[5,7]], time = 10",
        "output": "1"
      },
      {
        "input": "clips = [[0,10],[5,20],[15,30],[10,25],[20,35],[25,40],[0,5],[5,15],[15,25],[25,35],[30,40],[5,10],[10,15],[15,20],[20,25],[25,30]], time = 40",
        "output": "3"
      },
      {
        "input": "clips = [[0,4],[4,8],[8,12],[12,16],[16,20],[20,24],[24,28],[28,32],[0,2],[2,4],[4,6],[6,8],[8,10],[10,12],[12,14],[14,16],[16,18],[18,20],[20,22],[22,24],[24,26],[26,28],[28,30]], time = 32",
        "output": "8"
      },
      {
        "input": "clips = [[0,50],[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90],[90,100]], time = 100",
        "output": "6"
      },
      {
        "input": "clips = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[20,21],[22,23],[24,25]], time = 25",
        "output": "-1"
      },
      {
        "input": "clips = [[0,10],[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90],[90,100]], time = 50",
        "output": "5"
      },
      {
        "input": "clips = [[0,10],[1,11],[2,12],[3,13],[4,14],[5,15],[6,16],[7,17],[8,18],[9,19]], time = 19",
        "output": "2"
      },
      {
        "input": "clips = [[0,10],[2,20],[5,30],[7,25],[10,40],[12,50],[15,35],[20,60],[25,45],[30,70]], time = 60",
        "output": "3"
      },
      {
        "input": "clips = [[0,2],[2,4],[4,6],[6,8],[8,10],[10,12],[12,14],[14,16],[16,18],[18,20]], time = 20",
        "output": "10"
      },
      {
        "input": "clips = [[0,100],[0,50],[50,75],[75,100],[0,25],[25,50],[50,75],[75,100]], time = 100",
        "output": "1"
      },
      {
        "input": "clips = [[0,1],[0,2],[0,3],[0,4],[0,5],[1,6],[2,7],[3,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15]], time = 15",
        "output": "3"
      },
      {
        "input": "clips = [[0,10],[5,15],[10,20],[15,25],[20,30],[25,35],[30,40],[35,45],[40,50],[45,55]], time = 55",
        "output": "6"
      },
      {
        "input": "clips = [[0,15],[5,20],[10,25],[15,30],[20,35],[25,40],[30,45],[35,50],[40,55],[45,60],[50,65],[55,70],[60,75],[65,80],[70,85],[75,90],[80,95],[85,100]], time = 100",
        "output": "7"
      },
      {
        "input": "clips = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]], time = 13",
        "output": "13"
      },
      {
        "input": "clips = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], time = 11",
        "output": "-1"
      },
      {
        "input": "clips = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[0,10],[10,20],[20,30]], time = 30",
        "output": "3"
      },
      {
        "input": "clips = [[0,20],[5,10],[10,15],[15,20],[2,4],[4,6],[6,8],[8,10],[12,14],[14,16],[16,18],[18,20]], time = 20",
        "output": "1"
      },
      {
        "input": "clips = [[0,5],[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[35,40],[40,45],[45,50]], time = 49",
        "output": "10"
      },
      {
        "input": "clips = [[0,100],[0,50],[50,100],[25,75],[75,100],[50,75],[25,50]], time = 100",
        "output": "1"
      },
      {
        "input": "clips = [[0,50],[5,15],[10,20],[15,25],[20,30],[25,35],[30,35],[35,40],[40,45],[45,50],[0,10],[10,20],[20,30],[30,40],[40,50]], time = 50",
        "output": "1"
      },
      {
        "input": "clips = [[5,10],[10,15],[0,5],[15,20],[20,25],[0,25],[25,30],[0,15],[15,25],[0,30]], time = 30",
        "output": "1"
      },
      {
        "input": "clips = [[0,50],[25,75],[50,100],[75,125],[100,150],[125,175],[150,200]], time = 200",
        "output": "4"
      },
      {
        "input": "clips = [[0,10],[5,15],[10,20],[15,25],[20,30],[25,35],[30,40],[35,45],[40,50]], time = 45",
        "output": "5"
      },
      {
        "input": "clips = [[0,10],[1,11],[2,12],[3,13],[4,14],[5,15],[6,16],[7,17],[8,18],[9,19]], time = 20",
        "output": "-1"
      },
      {
        "input": "clips = [[0,50],[10,60],[20,70],[30,80],[40,90],[50,100],[60,110],[70,120],[80,130],[90,140]], time = 140",
        "output": "3"
      },
      {
        "input": "clips = [[0,1],[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]], time = 20",
        "output": "-1"
      },
      {
        "input": "clips = [[0,20],[5,15],[10,25],[0,10],[15,20],[20,30]], time = 25",
        "output": "2"
      },
      {
        "input": "clips = [[0,5],[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[35,40],[40,45],[45,50]], time = 50",
        "output": "10"
      },
      {
        "input": "clips = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[0,5],[5,10],[10,15],[15,20]], time = 20",
        "output": "4"
      },
      {
        "input": "clips = [[0,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]], time = 11",
        "output": "10"
      },
      {
        "input": "clips = [[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[0,10],[0,11],[0,12],[0,13],[0,14],[0,15]], time = 15",
        "output": "1"
      },
      {
        "input": "clips = [[0,10],[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1],[10,0]], time = 10",
        "output": "1"
      },
      {
        "input": "clips = [[0,2],[1,4],[2,6],[3,5],[4,7],[5,8],[6,9],[7,10],[8,11],[9,12],[10,13],[11,14],[12,15],[13,16],[14,17],[15,18],[16,19],[17,20],[18,21],[19,22],[20,23],[21,24],[22,25],[23,26],[24,27],[25,28],[26,29],[27,30]], time = 30",
        "output": "10"
      },
      {
        "input": "clips = [[0,10],[1,20],[2,30],[3,40],[4,50],[5,60],[6,70],[7,80],[8,90],[9,100]], time = 100",
        "output": "2"
      },
      {
        "input": "clips = [[0,30],[3,20],[5,25],[7,15],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30]], time = 30",
        "output": "1"
      },
      {
        "input": "clips = [[0,3],[1,4],[2,5],[3,6],[4,7],[5,8],[6,9],[7,10],[8,11],[9,12]], time = 12",
        "output": "4"
      },
      {
        "input": "clips = [[0,1],[0,1],[0,1],[0,1],[0,1],[0,1],[0,1],[0,1],[0,1],[0,1],[0,1],[0,1],[0,1],[0,1],[0,1]], time = 1",
        "output": "1"
      },
      {
        "input": "clips = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19]], time = 20",
        "output": "-1"
      },
      {
        "input": "clips = [[0,1],[1,100]], time = 100",
        "output": "2"
      },
      {
        "input": "clips = [[0,100],[1,99],[2,98],[3,97],[4,96],[5,95],[6,94],[7,93],[8,92],[9,91]], time = 100",
        "output": "1"
      },
      {
        "input": "clips = [[0,20],[15,30],[25,40],[10,25],[30,45],[5,15],[0,10],[20,30],[10,20],[40,50]], time = 50",
        "output": "4"
      },
      {
        "input": "clips = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[0,5],[5,10],[10,15],[15,20]], time = 20",
        "output": "4"
      },
      {
        "input": "clips = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[20,21]], time = 21",
        "output": "-1"
      },
      {
        "input": "clips = [[0,2],[2,4],[4,6],[6,8],[8,10],[10,12],[12,14],[14,16],[16,18],[18,20],[20,22],[22,24],[24,26],[26,28],[28,30]], time = 30",
        "output": "15"
      },
      {
        "input": "clips = [[0,25],[5,50],[10,75],[15,100],[20,125],[25,150],[30,175],[35,200],[40,225],[45,250],[50,275],[55,300],[60,325],[65,350],[70,375],[75,400]], time = 400",
        "output": "3"
      },
      {
        "input": "clips = [[0,30],[1,29],[2,28],[3,27],[4,26],[5,25],[6,24],[7,23],[8,22],[9,21],[10,20],[11,19],[12,18],[13,17],[14,16]], time = 30",
        "output": "1"
      },
      {
        "input": "clips = [[0,5],[0,10],[0,15],[0,20],[0,25],[0,30],[0,35],[0,40],[0,45],[0,50]], time = 50",
        "output": "1"
      },
      {
        "input": "clips = [[0,1],[2,4],[4,6],[6,8],[8,10],[10,12],[12,14],[14,16],[16,18],[18,20],[20,22],[22,24],[24,26],[26,28],[28,30],[30,32],[32,34],[34,36],[36,38],[38,40]], time = 40",
        "output": "-1"
      },
      {
        "input": "clips = [[0,50],[10,60],[20,70],[30,80],[40,90],[50,100],[60,110],[70,120],[80,130],[90,140],[100,150]], time = 150",
        "output": "3"
      },
      {
        "input": "clips = [[0,3],[4,9],[5,11],[13,14],[10,14],[11,14],[12,15],[15,16],[6,13],[1,6],[3,8],[7,8],[9,10],[10,12],[8,9],[14,15],[1,2],[0,1]], time = 16",
        "output": "5"
      },
      {
        "input": "clips = [[0,10],[2,5],[5,15],[10,20],[15,25],[20,30],[0,5],[5,10],[10,15],[15,20],[20,25],[25,30],[1,4],[4,7],[7,10],[10,13],[13,16],[16,19],[19,22],[22,25],[25,28],[28,30]], time = 30",
        "output": "3"
      },
      {
        "input": "clips = [[0,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20]], time = 20",
        "output": "11"
      },
      {
        "input": "clips = [[0,20],[1,19],[2,18],[3,17],[4,16],[5,15],[6,14],[7,13],[8,12],[9,11],[10,10],[11,9],[12,8],[13,7],[14,6],[15,5],[16,4],[17,3],[18,2],[19,1],[20,0]], time = 20",
        "output": "1"
      },
      {
        "input": "clips = [[0,100],[1,99],[2,98],[3,97],[4,96],[5,95],[6,94],[7,93],[8,92],[9,91],[10,90],[11,89],[12,88],[13,87],[14,86],[15,85]], time = 95",
        "output": "1"
      },
      {
        "input": "clips = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[20,21],[22,23],[24,25],[26,27],[28,29],[30,31],[32,33],[34,35],[36,37],[38,39],[40,41],[42,43],[44,45],[46,47],[48,49],[50,51],[52,53],[54,55]], time = 55",
        "output": "-1"
      },
      {
        "input": "clips = [[0,10],[2,20],[4,30],[6,40],[8,50],[10,60],[12,70],[14,80],[16,90],[18,100]], time = 100",
        "output": "3"
      },
      {
        "input": "clips = [[0,5],[1,9],[2,11],[3,13],[4,15],[5,17],[6,19],[7,21],[8,23],[9,25]], time = 25",
        "output": "3"
      },
      {
        "input": "clips = [[0,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11]], time = 11",
        "output": "6"
      },
      {
        "input": "clips = [[0,50],[1,49],[2,48],[3,47],[4,46],[5,45],[6,44],[7,43],[8,42],[9,41]], time = 50",
        "output": "1"
      },
      {
        "input": "clips = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]], time = 20",
        "output": "20"
      },
      {
        "input": "clips = [[0,3],[1,7],[2,8],[3,11],[5,10],[7,15],[8,16],[12,18],[14,20],[16,22],[18,25]], time = 25",
        "output": "5"
      },
      {
        "input": "clips = [[0,2],[2,4],[4,6],[6,8],[8,10],[10,12],[12,14],[14,16],[16,18],[18,20],[20,22],[22,24],[24,26],[26,28],[28,30],[30,32],[32,34],[34,36],[36,38],[38,40]], time = 40",
        "output": "20"
      },
      {
        "input": "clips = [[0,10],[5,20],[15,25],[20,30],[25,35],[30,40],[35,45],[40,50],[45,55],[50,60]], time = 60",
        "output": "6"
      },
      {
        "input": "clips = [[0,5],[2,8],[4,10],[6,12],[8,14],[10,16],[12,18],[14,20],[16,22],[18,24],[20,25]], time = 25",
        "output": "5"
      },
      {
        "input": "clips = [[0,3],[1,6],[2,7],[3,10],[4,8],[5,9],[6,11],[7,12],[8,13],[9,14]], time = 14",
        "output": "3"
      },
      {
        "input": "clips = [[0,10],[1,5],[5,10],[10,15],[15,20],[20,25],[25,30],[0,30],[15,30],[30,40],[35,45],[40,50],[35,50],[0,25],[25,45]], time = 50",
        "output": "3"
      },
      {
        "input": "clips = [[0,1],[1,3],[2,5],[4,6],[6,8],[8,10],[10,12],[12,14],[14,16],[16,18],[18,20],[20,22]], time = 22",
        "output": "12"
      },
      {
        "input": "clips = [[0,25],[5,50],[10,75],[15,100],[20,125],[25,150],[30,175],[35,200],[40,225],[45,250]], time = 250",
        "output": "3"
      },
      {
        "input": "clips = [[0,30],[10,20],[20,30],[5,15],[15,25],[25,35],[0,10],[10,20],[20,30],[30,40],[40,50]], time = 45",
        "output": "3"
      },
      {
        "input": "clips = [[0,3],[4,7],[8,12],[5,9],[1,4],[2,6],[3,5],[6,10],[7,11],[0,1],[9,13]], time = 13",
        "output": "4"
      },
      {
        "input": "clips = [[0,1],[0,3],[0,5],[0,7],[0,9],[1,2],[1,4],[1,6],[1,8],[1,10],[2,3],[2,5],[2,7],[2,9],[3,4],[3,6],[3,8],[3,10],[4,5],[4,7],[4,9],[5,6],[5,8],[5,10],[6,7],[6,9],[7,8],[7,10],[8,9]], time = 10",
        "output": "2"
      },
      {
        "input": "clips = [[0,10],[2,20],[4,30],[6,40],[8,50],[10,60],[12,70],[14,80],[16,90],[18,100],[20,110],[22,120]], time = 120",
        "output": "3"
      },
      {
        "input": "clips = [[0,100],[1,99],[2,98],[3,97],[4,96],[5,95],[6,94],[7,93],[8,92],[9,91],[10,90],[11,89],[12,88],[13,87],[14,86],[15,85],[16,84],[17,83],[18,82],[19,81],[20,80],[21,79],[22,78],[23,77],[24,76],[25,75],[26,74],[27,73],[28,72],[29,71],[30,70],[31,69],[32,68],[33,67],[34,66],[35,65],[36,64],[37,63],[38,62],[39,61],[40,60],[41,59],[42,58],[43,57],[44,56],[45,55],[46,54],[47,53],[48,52],[49,51]], time = 100",
        "output": "1"
      },
      {
        "input": "clips = [[0,10],[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90],[90,100]], time = 100",
        "output": "10"
      }
    ]
  },
  {
    "id": 1456,
    "difficulty": "Medium",
    "tags": [
      "String",
      "Sliding Window"
    ],
    "problemDescription": "Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.\nVowel letters in English are 'a', 'e', 'i', 'o', and 'u'.\n\u00a0\nExample 1:\n\nInput: s = \"abciiidef\", k = 3\nOutput: 3\nExplanation: The substring \"iii\" contains 3 vowel letters.\n\nExample 2:\n\nInput: s = \"aeiou\", k = 2\nOutput: 2\nExplanation: Any substring of length 2 contains 2 vowels.\n\nExample 3:\n\nInput: s = \"leetcode\", k = 3\nOutput: 2\nExplanation: \"lee\", \"eet\" and \"ode\" contain 2 vowels.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 105\ns consists of lowercase English letters.\n1 <= k <= s.length\n\n",
    "starterCode": "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"aooiiieeec\", k = 6",
        "output": "6"
      },
      {
        "input": "s = \"a\", k = 1",
        "output": "1"
      },
      {
        "input": "s = \"happy\", k = 2",
        "output": "1"
      },
      {
        "input": "s = \"rhythms\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"fluffy\", k = 2",
        "output": "1"
      },
      {
        "input": "s = \"leetcode\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"aeiou\", k = 2",
        "output": "2"
      },
      {
        "input": "s = \"beautiful\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"rhythms\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"bbbb\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"aaaaaa\", k = 5",
        "output": "5"
      },
      {
        "input": "s = \"abciiidef\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"aabbccddeeff\", k = 4",
        "output": "2"
      },
      {
        "input": "s = \"quartz\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"uuuuuuuuuuuuuuuuuuuuuuuuuu\", k = 5",
        "output": "5"
      },
      {
        "input": "s = \"eiuaooeiuaooeiuaooeiuaoo\", k = 8",
        "output": "8"
      },
      {
        "input": "s = \"bcdfghjklmnpqrstvwxyz\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"understanding\", k = 4",
        "output": "2"
      },
      {
        "input": "s = \"abacabadabacaba\", k = 5",
        "output": "3"
      },
      {
        "input": "s = \"uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\", k = 100",
        "output": "50"
      },
      {
        "input": "s = \"aeiouaeiou\", k = 1",
        "output": "1"
      },
      {
        "input": "s = \"bbbbbbaaaaa\", k = 5",
        "output": "5"
      },
      {
        "input": "s = \"bbaeixixixixxxeiiixieeiix\", k = 15",
        "output": "10"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 50",
        "output": "0"
      },
      {
        "input": "s = \"uoieaouieaouieaouieaouieaouieao\", k = 15",
        "output": "15"
      },
      {
        "input": "s = \"mississippi\", k = 4",
        "output": "2"
      },
      {
        "input": "s = \"aeiouaeiouaeiouaeiouaeiouaeiou\", k = 20",
        "output": "20"
      },
      {
        "input": "s = \"iouaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", k = 50",
        "output": "50"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 12",
        "output": "4"
      },
      {
        "input": "s = \"xyzvowelsabcdefg\", k = 5",
        "output": "2"
      },
      {
        "input": "s = \"leetcodeisawesome\", k = 5",
        "output": "3"
      },
      {
        "input": "s = \"lovelaceeinstein\", k = 7",
        "output": "5"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 13",
        "output": "3"
      },
      {
        "input": "s = \"thisisaverylongstringwithsomevowelsinside\", k = 20",
        "output": "8"
      },
      {
        "input": "s = \"aaaaaaaabbbbbbbbcccccccc\", k = 12",
        "output": "8"
      },
      {
        "input": "s = \"bbaeiooacaioiiceiue\", k = 11",
        "output": "10"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 20",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 26",
        "output": "6"
      },
      {
        "input": "s = \"aeiouaeiouaeiouaeiouaeiou\", k = 10",
        "output": "10"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzz\", k = 20",
        "output": "0"
      },
      {
        "input": "s = \"uvvwxyz\", k = 3",
        "output": "1"
      },
      {
        "input": "s = \"abcdeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\", k = 15",
        "output": "15"
      },
      {
        "input": "s = \"uoieaouieaouieaouieaouieaouiea\", k = 7",
        "output": "7"
      },
      {
        "input": "s = \"mnoabcdeioufghijkl\", k = 7",
        "output": "4"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", k = 15",
        "output": "4"
      },
      {
        "input": "s = \"leetcodeisaverygoodplatform\", k = 10",
        "output": "6"
      },
      {
        "input": "s = \"ababababab\", k = 5",
        "output": "3"
      },
      {
        "input": "s = \"uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\", k = 30",
        "output": "30"
      },
      {
        "input": "s = \"bcdafg\", k = 6",
        "output": "1"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaa\", k = 10",
        "output": "10"
      },
      {
        "input": "s = \"bcdfghjklmnpqrstvwxyz\", k = 1",
        "output": "0"
      },
      {
        "input": "s = \"thisisaverylongstringwithseveralvowelsinside\", k = 15",
        "output": "6"
      },
      {
        "input": "s = \"aiaioieiaioieiaioieiaioieiaioieiaioieiaioieiaioieiaioieiaioieiaioieiaioieiaioieiaioiei\", k = 20",
        "output": "20"
      },
      {
        "input": "s = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\", k = 15",
        "output": "15"
      },
      {
        "input": "s = \"uoieaouioeaouioeaouioe\", k = 12",
        "output": "12"
      },
      {
        "input": "s = \"aeiouaeiouaeiouaeiou\", k = 7",
        "output": "7"
      },
      {
        "input": "s = \"bcbcbcbcbcbcbcbcbcbcbcbc\", k = 7",
        "output": "0"
      },
      {
        "input": "s = \"uqeiouqeiouqeiouqeiouqeiouqe\", k = 11",
        "output": "9"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 10",
        "output": "3"
      },
      {
        "input": "s = \"qqqwwweee\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"bbaeixoubb\", k = 5",
        "output": "4"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 26",
        "output": "5"
      },
      {
        "input": "s = \"aeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeiioooooooouuuuuuuuuuuaaaaaaaa\", k = 25",
        "output": "25"
      },
      {
        "input": "s = \"bvflkqmbvkjgnqmfqlqjflvngqnvfkvnqjvfbvmqjbfvmlkjbfnvqjgbfnvqjbngfjkqnvbmfkqjbgfnjkbv\", k = 10",
        "output": "0"
      },
      {
        "input": "s = \"vowelsarebeautiful\", k = 10",
        "output": "6"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzz\", k = 15",
        "output": "0"
      },
      {
        "input": "s = \"bcbcbcbcbcbaaaaaa\", k = 10",
        "output": "6"
      },
      {
        "input": "s = \"aeiaaioaaaaeiiiiiiooooaauuaeiu\", k = 15",
        "output": "15"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyzxyzxyz\", k = 8",
        "output": "0"
      },
      {
        "input": "s = \"thisisaverylongstringwithlotsofvowelsandconsonants\", k = 18",
        "output": "7"
      },
      {
        "input": "s = \"environmentally\", k = 10",
        "output": "4"
      },
      {
        "input": "s = \"leetcodeisacommunityforcoders\", k = 8",
        "output": "5"
      },
      {
        "input": "s = \"leetcodeisfun\", k = 7",
        "output": "4"
      },
      {
        "input": "s = \"leetcodeisawesome\", k = 7",
        "output": "4"
      },
      {
        "input": "s = \"bcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc\", k = 10",
        "output": "0"
      },
      {
        "input": "s = \"aaabbbcccdddeeefffggghhhiii\", k = 5",
        "output": "3"
      },
      {
        "input": "s = \"bcbcbcbcbcbcbcbcbcbcbcbcbcbc\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"uoieaooooieau\", k = 7",
        "output": "7"
      },
      {
        "input": "s = \"abecidofugihanukleomnonuopqrstuvwxyz\", k = 20",
        "output": "10"
      },
      {
        "input": "s = \"aeiaaioaaaaeiiiiouuuu\", k = 12",
        "output": "12"
      }
    ]
  },
  {
    "id": 249,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "String"
    ],
    "problemDescription": "Perform the following shift operations on a string:\n\nRight shift: Replace every letter with the successive letter of the English alphabet, where 'z' is replaced by 'a'. For example, \"abc\" can be right-shifted to \"bcd\" or \"xyz\" can be right-shifted to \"yza\".\nLeft shift: Replace every letter with the preceding letter of the English alphabet, where 'a' is replaced by 'z'. For example, \"bcd\" can be left-shifted to \"abc\" or \"yza\" can be left-shifted to \"xyz\".\n\nWe can keep shifting the string in both directions to form an endless shifting sequence.\n\nFor example, shift \"abc\" to form the sequence: ... <-> \"abc\" <-> \"bcd\" <-> ... <-> \"xyz\" <-> \"yza\" <-> .... <-> \"zab\" <-> \"abc\" <-> ...\n\nYou are given an array of strings strings, group together all strings[i] that belong to the same shifting sequence. You may return the answer in any order.\n\u00a0\nExample 1:\n\nInput: strings = [\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"]\nOutput: [[\"acef\"],[\"a\",\"z\"],[\"abc\",\"bcd\",\"xyz\"],[\"az\",\"ba\"]]\n\nExample 2:\n\nInput: strings = [\"a\"]\nOutput: [[\"a\"]]\n\n\u00a0\nConstraints:\n\n1 <= strings.length <= 200\n1 <= strings[i].length <= 50\nstrings[i] consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def groupStrings(self, strings: List[str]) -> List[List[str]]:\n        ",
    "testCases": [
      {
        "input": "strings = [\"aaa\",\"bbb\",\"ccc\",\"zzz\",\"aaa\",\"zzz\"]",
        "output": "[['aaa', 'bbb', 'ccc', 'zzz', 'aaa', 'zzz']]"
      },
      {
        "input": "strings = [\"abcdefghijklmnopqrstuvwxyz\",\"bcdefghijklmnopqrstuvwxyza\",\"zabcdefghijklmnopqrstuvwxy\"]",
        "output": "[['abcdefghijklmnopqrstuvwxyz', 'bcdefghijklmnopqrstuvwxyza', 'zabcdefghijklmnopqrstuvwxy']]"
      },
      {
        "input": "strings = [\"aaa\", \"bbb\", \"ccc\", \"xyz\", \"zyz\", \"aba\", \"bab\", \"aab\", \"abb\", \"abc\", \"bca\", \"cab\"]",
        "output": "[['aaa', 'bbb', 'ccc'], ['xyz', 'abc'], ['zyz', 'bab'], ['aba'], ['aab'], ['abb'], ['bca'], ['cab']]"
      },
      {
        "input": "strings = [\"az\",\"za\",\"ba\",\"ab\",\"yx\",\"xy\"]",
        "output": "[['az', 'ba', 'yx'], ['za', 'ab', 'xy']]"
      },
      {
        "input": "strings = [\"az\",\"za\",\"abc\",\"bca\",\"cab\",\"xyz\",\"zyx\"]",
        "output": "[['az'], ['za'], ['abc', 'xyz'], ['bca'], ['cab'], ['zyx']]"
      },
      {
        "input": "strings = [\"abc\",\"bcd\",\"cde\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"zab\",\"abc\"]",
        "output": "[['abc', 'bcd', 'cde', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'zab', 'abc'], ['yz']]"
      },
      {
        "input": "strings = [\"a\"]",
        "output": "[['a']]"
      },
      {
        "input": "strings = [\"aaa\", \"bbb\", \"ccc\", \"xyz\", \"yza\", \"zaa\"]",
        "output": "[['aaa', 'bbb', 'ccc'], ['xyz', 'yza'], ['zaa']]"
      },
      {
        "input": "strings = [\"abcdefghijklmnopqrstuvwxyz\", \"bcdefghijklmnopqrstuvwxyza\", \"zabcdefghijklmnopqrstuvwxy\"]",
        "output": "[['abcdefghijklmnopqrstuvwxyz', 'bcdefghijklmnopqrstuvwxyza', 'zabcdefghijklmnopqrstuvwxy']]"
      },
      {
        "input": "strings = [\"abc\",\"bcd\",\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"]",
        "output": "[['abc', 'bcd', 'abc', 'bcd', 'xyz'], ['acef'], ['az', 'ba'], ['a', 'z']]"
      },
      {
        "input": "strings = [\"az\", \"ba\", \"ca\", \"cb\", \"ab\", \"bc\", \"da\"]",
        "output": "[['az', 'ba', 'cb'], ['ca'], ['ab', 'bc'], ['da']]"
      },
      {
        "input": "strings = [\"az\",\"za\",\"abc\",\"cab\",\"bca\",\"xyz\",\"yza\"]",
        "output": "[['az'], ['za'], ['abc', 'xyz', 'yza'], ['cab'], ['bca']]"
      },
      {
        "input": "strings = [\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\",\"aaa\",\"zzz\"]",
        "output": "[['abc', 'bcd', 'xyz'], ['acef'], ['az', 'ba'], ['a', 'z'], ['aaa', 'zzz']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"def\", \"a\", \"z\", \"za\", \"zb\"]",
        "output": "[['abc', 'bcd', 'def'], ['a', 'z'], ['za'], ['zb']]"
      },
      {
        "input": "strings = [\"abcdefghijklmnopqrstuvwxyz\", \"zabcdefghijklmnopqrstuvwxy\", \"yzyxwvutsrqponmlkjihgfedcba\"]",
        "output": "[['abcdefghijklmnopqrstuvwxyz', 'zabcdefghijklmnopqrstuvwxy'], ['yzyxwvutsrqponmlkjihgfedcba']]"
      },
      {
        "input": "strings = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]",
        "output": "[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']]"
      },
      {
        "input": "strings = [\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"]",
        "output": "[['abc', 'bcd', 'xyz'], ['acef'], ['az', 'ba'], ['a', 'z']]"
      },
      {
        "input": "strings = [\"aaa\",\"bbb\",\"ccc\",\"ddd\",\"zzz\",\"zyz\",\"xyx\",\"wxw\",\"uvw\",\"tvs\",\"sru\",\"qrq\",\"ppp\",\"ooo\",\"nnn\",\"mmm\",\"lll\",\"kkk\",\"jjj\",\"iii\",\"hhh\",\"ggg\",\"fff\",\"eee\",\"ddd\",\"ccc\",\"bbb\",\"aaa\"]",
        "output": "[['aaa', 'bbb', 'ccc', 'ddd', 'zzz', 'ppp', 'ooo', 'nnn', 'mmm', 'lll', 'kkk', 'jjj', 'iii', 'hhh', 'ggg', 'fff', 'eee', 'ddd', 'ccc', 'bbb', 'aaa'], ['zyz'], ['xyx', 'wxw', 'qrq'], ['uvw'], ['tvs'], ['sru']]"
      },
      {
        "input": "strings = [\"a\", \"z\", \"a\", \"z\", \"a\", \"z\", \"a\", \"z\"]",
        "output": "[['a', 'z', 'a', 'z', 'a', 'z', 'a', 'z']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"acef\", \"xyz\", \"az\", \"ba\", \"a\", \"z\", \"cab\", \"bdc\", \"efg\", \"pqr\", \"stu\", \"vwx\", \"yz\", \"za\", \"cb\", \"dc\"]",
        "output": "[['abc', 'bcd', 'xyz', 'efg', 'pqr', 'stu', 'vwx'], ['acef'], ['az', 'ba', 'cb', 'dc'], ['a', 'z'], ['cab'], ['bdc'], ['yz', 'za']]"
      },
      {
        "input": "strings = [\"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyza\", \"yzab\", \"zabc\"]",
        "output": "[['qrst', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz', 'xyza', 'yzab', 'zabc']]"
      },
      {
        "input": "strings = [\"abcd\", \"bcde\", \"cdef\", \"defg\", \"efgh\", \"fghi\", \"ghij\", \"hijk\", \"ijkl\", \"jklm\", \"klmn\", \"lmno\", \"mnop\", \"nopq\", \"opqr\", \"pqrs\", \"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyza\", \"yzab\", \"zabc\", \"mnop\", \"nopq\", \"opqr\", \"pqrs\", \"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyza\", \"yzab\", \"zabc\"]",
        "output": "[['abcd', 'bcde', 'cdef', 'defg', 'efgh', 'fghi', 'ghij', 'hijk', 'ijkl', 'jklm', 'klmn', 'lmno', 'mnop', 'nopq', 'opqr', 'pqrs', 'qrst', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz', 'xyza', 'yzab', 'zabc', 'mnop', 'nopq', 'opqr', 'pqrs', 'qrst', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz', 'xyza', 'yzab', 'zabc']]"
      },
      {
        "input": "strings = [\"zzz\", \"zyz\", \"yzz\", \"aaa\", \"aab\", \"aba\", \"baa\", \"zz\", \"zy\", \"yz\", \"aa\", \"ab\", \"ba\", \"zzzz\", \"zzzy\", \"zzyz\", \"zyzz\", \"yyyy\", \"yyyz\", \"yzyz\", \"yyy\", \"yyy\", \"yyz\", \"yzy\", \"zzz\", \"zzx\", \"zxz\", \"xzz\"]",
        "output": "[['zzz', 'aaa', 'yyy', 'yyy', 'zzz'], ['zyz'], ['yzz'], ['aab', 'yyz'], ['aba', 'yzy'], ['baa'], ['zz', 'aa'], ['zy', 'ba'], ['yz', 'ab'], ['zzzz', 'yyyy'], ['zzzy'], ['zzyz'], ['zyzz'], ['yyyz'], ['yzyz'], ['zzx'], ['zxz'], ['xzz']]"
      },
      {
        "input": "strings = [\"hello\", \"ifmmp\", \"jgnnq\", \"eiqjd\", \"fjqud\", \"kgsvf\", \"ohhps\", \"piiqt\", \"qjjru\", \"hkkph\", \"limmz\", \"mmnna\", \"nnobb\", \"ooopc\"]",
        "output": "[['hello', 'ifmmp', 'jgnnq'], ['eiqjd'], ['fjqud'], ['kgsvf'], ['ohhps', 'piiqt', 'qjjru'], ['hkkph'], ['limmz'], ['mmnna'], ['nnobb'], ['ooopc']]"
      },
      {
        "input": "strings = [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\", \"ooo\", \"ppp\", \"qqq\", \"rrr\", \"sss\", \"ttt\", \"uuu\", \"vvv\", \"www\", \"xxx\", \"yyy\", \"zzz\"]",
        "output": "[['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll', 'mmm', 'nnn', 'ooo', 'ppp', 'qqq', 'rrr', 'sss', 'ttt', 'uuu', 'vvv', 'www', 'xxx', 'yyy', 'zzz']]"
      },
      {
        "input": "strings = [\"mnopqr\", \"opqrst\", \"pqrstu\", \"qrstuv\", \"rstuvw\", \"stuvwx\", \"tuvwxy\", \"uvwxyz\", \"vwxyza\", \"wxyzab\", \"xyzabc\", \"zabcd\", \"abcd\", \"bcde\", \"cdef\", \"defg\", \"efgh\", \"fghi\", \"ghij\", \"hijk\", \"ijkl\", \"jklm\", \"klmn\", \"lmno\", \"mnop\", \"nopq\", \"opqr\", \"pqrs\", \"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyz\", \"yz\", \"za\", \"a\", \"z\"]",
        "output": "[['mnopqr', 'opqrst', 'pqrstu', 'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy', 'uvwxyz', 'vwxyza', 'wxyzab', 'xyzabc'], ['zabcd'], ['abcd', 'bcde', 'cdef', 'defg', 'efgh', 'fghi', 'ghij', 'hijk', 'ijkl', 'jklm', 'klmn', 'lmno', 'mnop', 'nopq', 'opqr', 'pqrs', 'qrst', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz'], ['xyz'], ['yz', 'za'], ['a', 'z']]"
      },
      {
        "input": "strings = [\"aab\", \"bbc\", \"ccz\", \"zaz\", \"aza\", \"azb\", \"bbb\", \"bcc\", \"ccz\", \"zba\", \"aba\", \"abb\", \"bba\", \"abc\", \"bcd\", \"cde\", \"bcd\", \"cde\", \"def\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\", \"yza\", \"zab\", \"abc\"]",
        "output": "[['aab', 'bbc'], ['ccz', 'ccz'], ['zaz', 'aba'], ['aza'], ['azb'], ['bbb'], ['bcc', 'abb'], ['zba'], ['bba'], ['abc', 'bcd', 'cde', 'bcd', 'cde', 'def', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz', 'yza', 'zab', 'abc']]"
      },
      {
        "input": "strings = [\"abcdef\", \"bcdefg\", \"cdefgh\", \"defghi\", \"efghij\", \"fghijk\", \"ghijkl\", \"hijklm\", \"ijklmn\", \"jklmno\", \"klmnop\", \"lmnopq\", \"mnopqr\", \"nopqrs\", \"opqrst\", \"pqrstu\", \"qrstuv\", \"rstuvw\", \"stuvwx\", \"tuvwxy\", \"uvwxyx\", \"vwxyzx\", \"wxyzxz\", \"xyzxza\", \"yzxzab\", \"zxyzab\"]",
        "output": "[['abcdef', 'bcdefg', 'cdefgh', 'defghi', 'efghij', 'fghijk', 'ghijkl', 'hijklm', 'ijklmn', 'jklmno', 'klmnop', 'lmnopq', 'mnopqr', 'nopqrs', 'opqrst', 'pqrstu', 'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy'], ['uvwxyx'], ['vwxyzx'], ['wxyzxz'], ['xyzxza'], ['yzxzab'], ['zxyzab']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"cde\", \"xyz\", \"yza\", \"zab\", \"abc\", \"bcd\"]",
        "output": "[['abc', 'bcd', 'cde', 'xyz', 'yza', 'zab', 'abc', 'bcd']]"
      },
      {
        "input": "strings = [\"mnop\", \"opqr\", \"pqrs\", \"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyzm\", \"yzmo\", \"zmon\", \"mnop\", \"nopo\", \"popq\", \"oqpr\", \"qprs\", \"prst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyzm\"]",
        "output": "[['mnop', 'opqr', 'pqrs', 'qrst', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz', 'mnop', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz'], ['xyzm', 'xyzm'], ['yzmo'], ['zmon'], ['nopo'], ['popq'], ['oqpr'], ['qprs'], ['prst']]"
      },
      {
        "input": "strings = [\"dog\", \"god\", \"log\", \"cog\", \"doge\", \"oge\", \"age\", \"bog\", \"zag\", \"zog\"]",
        "output": "[['dog'], ['god'], ['log'], ['cog'], ['doge'], ['oge'], ['age'], ['bog'], ['zag'], ['zog']]"
      },
      {
        "input": "strings = [\"ab\", \"bc\", \"cd\", \"de\", \"ef\", \"fg\", \"gh\", \"hi\", \"ij\", \"jk\", \"kl\", \"lm\", \"mn\", \"no\", \"op\", \"pq\", \"qr\", \"rs\", \"st\", \"tu\", \"uv\", \"vw\", \"wx\", \"xy\", \"yz\", \"za\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"za\", \"yz\", \"zy\", \"yx\", \"xy\", \"wx\", \"vw\", \"uv\", \"tu\", \"st\", \"rs\", \"qr\", \"pq\", \"op\", \"no\", \"mn\", \"lm\", \"kl\", \"jk\", \"ij\", \"hi\", \"gh\", \"fg\", \"ef\", \"de\", \"cd\", \"bc\", \"ab\"]",
        "output": "[['ab', 'bc', 'cd', 'de', 'ef', 'fg', 'gh', 'hi', 'ij', 'jk', 'kl', 'lm', 'mn', 'no', 'op', 'pq', 'qr', 'rs', 'st', 'tu', 'uv', 'vw', 'wx', 'xy', 'yz', 'za', 'za', 'yz', 'xy', 'wx', 'vw', 'uv', 'tu', 'st', 'rs', 'qr', 'pq', 'op', 'no', 'mn', 'lm', 'kl', 'jk', 'ij', 'hi', 'gh', 'fg', 'ef', 'de', 'cd', 'bc', 'ab'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'], ['zy', 'yx']]"
      },
      {
        "input": "strings = [\"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\", \"yza\", \"zab\", \"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\"]",
        "output": "[['jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz', 'yza', 'zab', 'abc', 'bcd', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"cde\", \"def\", \"xyz\", \"yza\", \"zab\"]",
        "output": "[['abc', 'bcd', 'cde', 'def', 'xyz', 'yza', 'zab']]"
      },
      {
        "input": "strings = [\"uvw\", \"vwx\", \"wxy\", \"xyz\", \"yza\", \"zab\", \"abc\"]",
        "output": "[['uvw', 'vwx', 'wxy', 'xyz', 'yza', 'zab', 'abc']]"
      },
      {
        "input": "strings = [\"xyz\", \"yza\", \"zab\", \"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\", \"zab\", \"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\", \"zab\", \"abc\"]",
        "output": "[['xyz', 'yza', 'zab', 'abc', 'bcd', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz', 'zab', 'abc', 'bcd', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz', 'zab', 'abc']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"cde\", \"xyz\", \"yza\", \"zab\", \"uvw\", \"vwx\", \"wxy\", \"xza\", \"yab\", \"zbc\"]",
        "output": "[['abc', 'bcd', 'cde', 'xyz', 'yza', 'zab', 'uvw', 'vwx', 'wxy'], ['xza', 'yab', 'zbc']]"
      },
      {
        "input": "strings = [\"aaa\", \"bbb\", \"ccc\", \"zzz\", \"aba\", \"bab\", \"abc\", \"bcd\", \"xyz\", \"yza\", \"aab\", \"bba\", \"abb\", \"baa\", \"acc\", \"cca\", \"aac\", \"caa\"]",
        "output": "[['aaa', 'bbb', 'ccc', 'zzz'], ['aba'], ['bab'], ['abc', 'bcd', 'xyz', 'yza'], ['aab'], ['bba'], ['abb'], ['baa'], ['acc'], ['cca'], ['aac'], ['caa']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"acef\", \"xyz\", \"az\", \"ba\", \"a\", \"z\", \"def\", \"efg\", \"fgh\", \"ghj\"]",
        "output": "[['abc', 'bcd', 'xyz', 'def', 'efg', 'fgh'], ['acef'], ['az', 'ba'], ['a', 'z'], ['ghj']]"
      },
      {
        "input": "strings = [\"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"abcdefghij\", \"jihgfedcba\", \"klmnopqr\", \"rqponmlk\", \"stuvwxyz\", \"zyxwvuts\", \"abcdefghijk\", \"kjihgfedcba\", \"mnopqrstuv\", \"vutsrqponm\", \"abcdefghijklmnop\", \"ponmlkjihgfe\"]",
        "output": "[['k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['abcdefghij', 'mnopqrstuv'], ['jihgfedcba', 'vutsrqponm'], ['klmnopqr', 'stuvwxyz'], ['rqponmlk', 'zyxwvuts'], ['abcdefghijk'], ['kjihgfedcba'], ['abcdefghijklmnop'], ['ponmlkjihgfe']]"
      },
      {
        "input": "strings = [\"a\", \"z\", \"az\", \"za\", \"ab\", \"ba\", \"xy\", \"yx\", \"pqrs\", \"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwv\", \"vwxy\", \"wxyz\", \"xyzq\", \"yzqr\", \"zqrs\", \"qrs\", \"rs\", \"s\", \"q\", \"z\", \"a\", \"za\", \"az\", \"zz\", \"aa\", \"abcd\", \"bcde\", \"cdef\", \"defg\", \"efgh\", \"fghi\", \"ghij\", \"hijk\", \"ijkl\", \"jklm\", \"klmn\", \"lmno\", \"mnop\", \"nopq\", \"opqr\", \"pqrstu\", \"qrstuv\", \"rstuvw\", \"stuvwx\", \"tuvwxy\", \"uvwxyz\"]",
        "output": "[['a', 'z', 's', 'q', 'z', 'a'], ['az', 'ba', 'yx', 'az'], ['za', 'ab', 'xy', 'rs', 'za'], ['pqrs', 'qrst', 'rstu', 'stuv', 'tuvw', 'vwxy', 'wxyz', 'abcd', 'bcde', 'cdef', 'defg', 'efgh', 'fghi', 'ghij', 'hijk', 'ijkl', 'jklm', 'klmn', 'lmno', 'mnop', 'nopq', 'opqr'], ['uvwv'], ['xyzq'], ['yzqr'], ['zqrs'], ['qrs'], ['zz', 'aa'], ['pqrstu', 'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy', 'uvwxyz']]"
      },
      {
        "input": "strings = [\"a\", \"z\", \"za\", \"az\", \"zz\", \"aa\", \"aaa\", \"zzz\", \"abc\", \"bcd\", \"xyz\", \"yza\", \" zab\", \"ba\", \"mnopqrstuvwxyza\", \"nopqrstuvwxyzab\"]",
        "output": "[['a', 'z'], ['za'], ['az', 'ba'], ['zz', 'aa'], ['aaa', 'zzz'], ['abc', 'bcd', 'xyz', 'yza'], [' zab'], ['mnopqrstuvwxyza', 'nopqrstuvwxyzab']]"
      },
      {
        "input": "strings = [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\", \"nnnnn\", \"ooooo\", \"ppppp\", \"qqqqq\", \"rrrrr\", \"sssss\", \"ttttt\", \"uuuuu\", \"vvvvv\", \"wwwww\", \"xxxxx\", \"yyyyy\", \"zzzzz\"]",
        "output": "[['aaaaa', 'bbbbb', 'ccccc', 'ddddd', 'eeeee', 'fffff', 'ggggg', 'hhhhh', 'iiiii', 'jjjjj', 'kkkkk', 'lllll', 'mmmmm', 'nnnnn', 'ooooo', 'ppppp', 'qqqqq', 'rrrrr', 'sssss', 'ttttt', 'uuuuu', 'vvvvv', 'wwwww', 'xxxxx', 'yyyyy', 'zzzzz']]"
      },
      {
        "input": "strings = [\"mnopqr\", \"nopqrs\", \"opqrst\", \"pqrstu\", \"qrstuv\", \"rstuvw\", \"stuvwx\", \"tuvwxy\", \"uvwxya\", \"vwxyab\", \"wxyabc\", \"xyabcd\", \"yabcde\", \"zabcde\", \"abcdeg\", \"bcdegh\", \"cdefgh\", \"defghi\", \"efghij\", \"fghijk\", \"ghijkl\", \"hijklm\", \"ijklmn\", \"jklmno\", \"klmnop\", \"lmnopq\", \"mnopqr\", \"nopqrs\", \"opqrst\", \"pqrstu\", \"qrstuv\", \"rstuvw\", \"stuvwx\", \"tuvwxy\", \"uvwxya\", \"vwxyab\", \"wxyabc\", \"xyabcd\", \"yabcde\", \"zabcde\"]",
        "output": "[['mnopqr', 'nopqrs', 'opqrst', 'pqrstu', 'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy', 'zabcde', 'cdefgh', 'defghi', 'efghij', 'fghijk', 'ghijkl', 'hijklm', 'ijklmn', 'jklmno', 'klmnop', 'lmnopq', 'mnopqr', 'nopqrs', 'opqrst', 'pqrstu', 'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy', 'zabcde'], ['uvwxya', 'abcdeg', 'uvwxya'], ['vwxyab', 'bcdegh', 'vwxyab'], ['wxyabc', 'wxyabc'], ['xyabcd', 'xyabcd'], ['yabcde', 'yabcde']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"acef\", \"xyz\", \"az\", \"ba\", \"a\", \"z\", \"aaa\", \"bbb\", \"ccc\", \"zzz\", \"aba\", \"bab\", \"bba\", \"aab\", \"aca\", \"bcb\", \"cbc\", \"baa\", \"aca\", \"bcb\", \"cbc\", \"baa\", \"aba\", \"bab\", \"bba\", \"aab\"]",
        "output": "[['abc', 'bcd', 'xyz'], ['acef'], ['az', 'ba'], ['a', 'z'], ['aaa', 'bbb', 'ccc', 'zzz'], ['aba', 'bcb', 'bcb', 'aba'], ['bab', 'cbc', 'cbc', 'bab'], ['bba', 'bba'], ['aab', 'aab'], ['aca', 'aca'], ['baa', 'baa']]"
      },
      {
        "input": "strings = [\"abcd\", \"bcde\", \"cdef\", \"defg\", \"efgh\", \"fghi\", \"ghij\", \"hijk\", \"ijkl\", \"jklm\", \"klmn\", \"lmno\", \"mnop\", \"nopq\", \"opqr\", \"pqrstu\", \"qrstuv\", \"rstuvw\", \"stuvwx\", \"tuvwxy\", \"uvwxyz\", \"vwxyza\", \"wxyzab\", \"xyzabc\", \"zabcd\", \"abcd\", \"bcde\", \"cdef\", \"defg\", \"efgh\", \"fghi\", \"ghij\", \"hijk\", \"ijkl\", \"jklm\", \"klmn\", \"lmno\", \"mnop\", \"nopq\", \"opqr\", \"pqr\", \"qr\", \"r\", \"q\", \"z\", \"a\", \"za\", \"az\", \"zz\", \"aa\", \"ab\", \"ba\", \"xy\", \"yx\", \"pq\", \"qp\"]",
        "output": "[['abcd', 'bcde', 'cdef', 'defg', 'efgh', 'fghi', 'ghij', 'hijk', 'ijkl', 'jklm', 'klmn', 'lmno', 'mnop', 'nopq', 'opqr', 'abcd', 'bcde', 'cdef', 'defg', 'efgh', 'fghi', 'ghij', 'hijk', 'ijkl', 'jklm', 'klmn', 'lmno', 'mnop', 'nopq', 'opqr'], ['pqrstu', 'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy', 'uvwxyz', 'vwxyza', 'wxyzab', 'xyzabc'], ['zabcd'], ['pqr'], ['qr', 'za', 'ab', 'xy', 'pq'], ['r', 'q', 'z', 'a'], ['az', 'ba', 'yx', 'qp'], ['zz', 'aa']]"
      },
      {
        "input": "strings = [\"abcdefghij\", \"bcdefghijk\", \"cdefghijkl\", \"defghijklm\", \"efghijklmn\", \"fghijklmno\", \"ghijklmnop\", \"hijklmnopq\", \"ijklmnopqr\", \"jklmnopqrs\"]",
        "output": "[['abcdefghij', 'bcdefghijk', 'cdefghijkl', 'defghijklm', 'efghijklmn', 'fghijklmno', 'ghijklmnop', 'hijklmnopq', 'ijklmnopqr', 'jklmnopqrs']]"
      },
      {
        "input": "strings = [\"aaa\", \"bbb\", \"ccc\", \"xyz\", \"xyx\", \"xyy\", \"aab\", \"aac\"]",
        "output": "[['aaa', 'bbb', 'ccc'], ['xyz'], ['xyx'], ['xyy'], ['aab'], ['aac']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\"]",
        "output": "[['abc', 'bcd', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"cde\", \"xyz\", \"wxy\", \"vwx\", \"a\", \"z\", \"y\", \"x\"]",
        "output": "[['abc', 'bcd', 'cde', 'xyz', 'wxy', 'vwx'], ['a', 'z', 'y', 'x']]"
      },
      {
        "input": "strings = [\"abcd\", \"bcde\", \"cdef\", \"defg\", \"efgh\", \"fghi\", \"ghij\", \"hijk\", \"ijkl\", \"jklm\", \"klmn\", \"lmno\", \"mnop\", \"nopq\", \"opqr\", \"pqrs\", \"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyz\", \"yza\", \"zab\", \"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\", \"zab\", \"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\", \"zab\", \"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\"]",
        "output": "[['abcd', 'bcde', 'cdef', 'defg', 'efgh', 'fghi', 'ghij', 'hijk', 'ijkl', 'jklm', 'klmn', 'lmno', 'mnop', 'nopq', 'opqr', 'pqrs', 'qrst', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz'], ['xyz', 'yza', 'zab', 'abc', 'bcd', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz', 'zab', 'abc', 'bcd', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz', 'zab', 'abc', 'bcd', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\", \"yza\", \"zab\", \"abc\"]",
        "output": "[['abc', 'bcd', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz', 'yza', 'zab', 'abc']]"
      },
      {
        "input": "strings = [\"abc\", \"bcde\", \"cdefg\", \"defghi\", \"efghij\", \"fghijk\", \"ghijkl\", \"hijklm\", \"ijklmn\", \"jklmno\", \"klmnop\", \"lmnopq\", \"mnopqr\", \"nopqrs\", \"opqrst\", \"pqrstu\", \"qrstuv\", \"rstuvw\", \"stuvwx\", \"tuvwxy\", \"uvwxyza\", \"vwxyzab\", \"wxyzbac\", \"xyzbacd\", \"yzbadce\"]",
        "output": "[['abc'], ['bcde'], ['cdefg'], ['defghi', 'efghij', 'fghijk', 'ghijkl', 'hijklm', 'ijklmn', 'jklmno', 'klmnop', 'lmnopq', 'mnopqr', 'nopqrs', 'opqrst', 'pqrstu', 'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy'], ['uvwxyza', 'vwxyzab'], ['wxyzbac'], ['xyzbacd'], ['yzbadce']]"
      },
      {
        "input": "strings = [\"zzzz\", \"aaaa\", \"zzzy\", \"zzzx\", \"aaab\", \"aaac\", \"zzwa\", \"zzwb\", \"zzwc\", \"zzwd\", \"zzwe\", \"zzwf\", \"zzwg\", \"zzwh\", \"zzwi\", \"zzwj\", \"zzwk\", \"zzwl\", \"zzwm\", \"zzwn\", \"zzwo\", \"zzwp\", \"zzwq\", \"zzwr\", \"zzws\", \"zzwt\", \"zzwu\", \"zzwv\", \"zzww\", \"zzwx\", \"zzwy\", \"zzwz\", \"zzxa\", \"zzxb\", \"zzxc\", \"zzxd\", \"zzxe\", \"zzxf\", \"zzxg\", \"zzxh\", \"zzxi\", \"zzxj\", \"zzxk\", \"zzxl\", \"zzxm\", \"zzxn\", \"zzxo\", \"zzxp\", \"zzxq\", \"zzxr\", \"zzxs\", \"zzxt\", \"zzxu\", \"zzxv\", \"zzxw\", \"zzxx\", \"zzxy\", \"zzxz\"]",
        "output": "[['zzzz', 'aaaa'], ['zzzy'], ['zzzx'], ['aaab'], ['aaac'], ['zzwa'], ['zzwb'], ['zzwc'], ['zzwd'], ['zzwe'], ['zzwf'], ['zzwg'], ['zzwh'], ['zzwi'], ['zzwj'], ['zzwk'], ['zzwl'], ['zzwm'], ['zzwn'], ['zzwo'], ['zzwp'], ['zzwq'], ['zzwr'], ['zzws'], ['zzwt'], ['zzwu'], ['zzwv'], ['zzww'], ['zzwx'], ['zzwy'], ['zzwz'], ['zzxa'], ['zzxb'], ['zzxc'], ['zzxd'], ['zzxe'], ['zzxf'], ['zzxg'], ['zzxh'], ['zzxi'], ['zzxj'], ['zzxk'], ['zzxl'], ['zzxm'], ['zzxn'], ['zzxo'], ['zzxp'], ['zzxq'], ['zzxr'], ['zzxs'], ['zzxt'], ['zzxu'], ['zzxv'], ['zzxw'], ['zzxx'], ['zzxy'], ['zzxz']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\", \"yza\", \"zab\"]",
        "output": "[['abc', 'bcd', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz', 'yza', 'zab']]"
      },
      {
        "input": "strings = [\"abcd\", \"bcde\", \"cdef\", \"degh\", \"efgh\", \"fghi\", \"ghij\", \"hijk\", \"ijkl\", \"jklm\", \"klmn\", \"lmno\", \"mnop\", \"nopq\", \"opqr\", \"pqrq\", \"qrqs\", \"rqrt\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyza\", \"yzab\", \"zabc\"]",
        "output": "[['abcd', 'bcde', 'cdef', 'efgh', 'fghi', 'ghij', 'hijk', 'ijkl', 'jklm', 'klmn', 'lmno', 'mnop', 'nopq', 'opqr', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz', 'xyza', 'yzab', 'zabc'], ['degh'], ['pqrq'], ['qrqs'], ['rqrt']]"
      },
      {
        "input": "strings = [\"a\", \"z\", \"az\", \"za\", \"aa\", \"zz\", \"abc\", \"bcd\", \"xyz\", \"yza\", \"zab\", \"abcde\", \"bcdef\", \"cdefg\", \"defgh\", \"efghi\", \"fghij\", \"ghijk\", \"hijkl\", \"ijklm\", \"jklmn\", \"klmno\", \"mnopq\", \"nopqr\", \"opqrs\", \"pqrst\", \"qrstu\", \"rstuv\", \"stuvw\", \"tuvwx\", \"uvwxy\", \"vwxyz\"]",
        "output": "[['a', 'z'], ['az'], ['za'], ['aa', 'zz'], ['abc', 'bcd', 'xyz', 'yza', 'zab'], ['abcde', 'bcdef', 'cdefg', 'defgh', 'efghi', 'fghij', 'ghijk', 'hijkl', 'ijklm', 'jklmn', 'klmno', 'mnopq', 'nopqr', 'opqrs', 'pqrst', 'qrstu', 'rstuv', 'stuvw', 'tuvwx', 'uvwxy', 'vwxyz']]"
      },
      {
        "input": "strings = [\"xy\", \"yz\", \"za\", \"ab\", \"bc\", \"cd\", \"de\", \"ef\", \"fg\", \"gh\", \"hi\", \"ij\", \"jk\", \"kl\", \"lm\", \"mn\", \"no\", \"op\", \"pq\", \"qr\", \"rs\", \"st\", \"tu\", \"uv\", \"vw\", \"wx\", \"xy\", \"yz\", \"za\", \"ab\"]",
        "output": "[['xy', 'yz', 'za', 'ab', 'bc', 'cd', 'de', 'ef', 'fg', 'gh', 'hi', 'ij', 'jk', 'kl', 'lm', 'mn', 'no', 'op', 'pq', 'qr', 'rs', 'st', 'tu', 'uv', 'vw', 'wx', 'xy', 'yz', 'za', 'ab']]"
      },
      {
        "input": "strings = [\"hello\", \"ifmmp\", \"jgnnq\", \"khoor\", \"lipps\", \"mjqqt\", \"nrruo\", \"ossvt\", \"pttzu\", \"quuav\", \"rvvbw\", \"swcxc\", \"txdyd\", \"uezez\", \"vfafa\", \"wgfbg\", \"xhfcg\", \"yigdh\", \"zjheh\"]",
        "output": "[['hello', 'ifmmp', 'jgnnq', 'khoor', 'lipps', 'mjqqt'], ['nrruo'], ['ossvt'], ['pttzu', 'quuav', 'rvvbw'], ['swcxc', 'txdyd'], ['uezez', 'vfafa'], ['wgfbg'], ['xhfcg', 'yigdh'], ['zjheh']]"
      },
      {
        "input": "strings = [\"abcdefghij\", \"jklmnopqrs\", \"tuvwxyzabc\", \"defghijklm\", \"opqrstuvwx\", \"ghijklmnop\", \"pqrsuvwxy\", \"stuvwxyzab\", \"vwxyzabcd\", \"xyzabcde\", \"zabcdefg\"]",
        "output": "[['abcdefghij', 'jklmnopqrs', 'tuvwxyzabc', 'defghijklm', 'opqrstuvwx', 'ghijklmnop', 'stuvwxyzab'], ['pqrsuvwxy'], ['vwxyzabcd'], ['xyzabcde', 'zabcdefg']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\", \"zab\", \"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\", \"zab\", \"abc\", \"bcd\", \"cde\"]",
        "output": "[['abc', 'bcd', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz', 'zab', 'abc', 'bcd', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz', 'zab', 'abc', 'bcd', 'cde']]"
      },
      {
        "input": "strings = [\"mnopqr\", \"nopqrs\", \"opqrst\", \"pqrstu\", \"qrstuv\", \"rstuvw\", \"stuvwx\", \"tuvwxy\", \"uvwxya\", \"vwxyab\", \"wxyabc\", \"xyabcd\", \"yabcde\", \"zabcde\", \"abcdeg\", \"bcdegh\", \"cdefgh\", \"defghi\", \"efghij\", \"fghijk\", \"ghijkl\", \"hijklm\", \"ijklmn\", \"jklmno\", \"klmnop\", \"lmnopq\", \"mnopqr\"]",
        "output": "[['mnopqr', 'nopqrs', 'opqrst', 'pqrstu', 'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy', 'zabcde', 'cdefgh', 'defghi', 'efghij', 'fghijk', 'ghijkl', 'hijklm', 'ijklmn', 'jklmno', 'klmnop', 'lmnopq', 'mnopqr'], ['uvwxya', 'abcdeg'], ['vwxyab', 'bcdegh'], ['wxyabc'], ['xyabcd'], ['yabcde']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"acef\", \"xyz\", \"az\", \"ba\", \"a\", \"z\", \"abcdef\", \"bcdefg\", \"cdefgh\", \"defghi\", \"efghij\", \"fghijk\", \"ghijkl\", \"hijklm\", \"ijklmn\", \"jklmno\", \"klmnop\", \"lmnopq\", \"mnopqr\", \"nopqrs\", \"opqrst\", \"pqrstu\", \"qrstuv\", \"rstuvw\", \"stuvwx\", \"tuvwxy\", \"uvwxyz\"]",
        "output": "[['abc', 'bcd', 'xyz'], ['acef'], ['az', 'ba'], ['a', 'z'], ['abcdef', 'bcdefg', 'cdefgh', 'defghi', 'efghij', 'fghijk', 'ghijkl', 'hijklm', 'ijklmn', 'jklmno', 'klmnop', 'lmnopq', 'mnopqr', 'nopqrs', 'opqrst', 'pqrstu', 'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy', 'uvwxyz']]"
      },
      {
        "input": "strings = [\"abcdefg\", \"bcdefgh\", \"cdefghi\", \"defghij\", \"efghijk\", \"fghijkl\", \"ghijklm\", \"hijklmn\", \"ijklmno\", \"jklmnop\", \"klmnopq\", \"lmnopqr\", \"mnopqrs\", \"nopqrst\", \"opqrstu\", \"qrstuvw\", \"rstuvwx\", \"stuvwxy\", \"tuvwxyx\", \"uvwxyyx\", \"vwxyxyx\", \"wxyxyyx\", \"xxyxyyx\", \"xyxyxyx\", \"yxyxyxy\", \"xyxyxyy\"]",
        "output": "[['abcdefg', 'bcdefgh', 'cdefghi', 'defghij', 'efghijk', 'fghijkl', 'ghijklm', 'hijklmn', 'ijklmno', 'jklmnop', 'klmnopq', 'lmnopqr', 'mnopqrs', 'nopqrst', 'opqrstu', 'qrstuvw', 'rstuvwx', 'stuvwxy'], ['tuvwxyx'], ['uvwxyyx'], ['vwxyxyx'], ['wxyxyyx'], ['xxyxyyx'], ['xyxyxyx'], ['yxyxyxy'], ['xyxyxyy']]"
      },
      {
        "input": "strings = [\"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\", \"yza\", \"zab\", \"abc\"]",
        "output": "[['mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz', 'yza', 'zab', 'abc']]"
      },
      {
        "input": "strings = [\"acef\", \"aefg\", \"efgh\", \"fghi\", \"ghij\", \"hijk\", \"ijkl\", \"jklm\", \"klmn\", \"lmno\", \"mnop\", \"nopq\", \"opqr\", \"pqrs\", \"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyza\", \"yzab\", \"zabc\"]",
        "output": "[['acef'], ['aefg'], ['efgh', 'fghi', 'ghij', 'hijk', 'ijkl', 'jklm', 'klmn', 'lmno', 'mnop', 'nopq', 'opqr', 'pqrs', 'qrst', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz', 'xyza', 'yzab', 'zabc']]"
      },
      {
        "input": "strings = [\"abcdef\", \"bcdefg\", \"cdefgh\", \"defghi\", \"efghij\", \"fghijk\", \"ghijkl\", \"hijklm\", \"ijklmn\", \"jklmno\", \"klmnop\", \"lmnopq\", \"mnopqr\", \"nopqrs\", \"opqrst\", \"pqrsut\", \"qrstuv\", \"rstuvw\", \"stuvwx\", \"tuvwxy\", \"uvwxyx\", \"vwxyxz\", \"wxyxzy\", \"xyxzya\", \"yzxzyb\", \"zxzyba\"]",
        "output": "[['abcdef', 'bcdefg', 'cdefgh', 'defghi', 'efghij', 'fghijk', 'ghijkl', 'hijklm', 'ijklmn', 'jklmno', 'klmnop', 'lmnopq', 'mnopqr', 'nopqrs', 'opqrst', 'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy'], ['pqrsut'], ['uvwxyx'], ['vwxyxz'], ['wxyxzy'], ['xyxzya'], ['yzxzyb'], ['zxzyba']]"
      },
      {
        "input": "strings = [\"abcdefg\", \"bcdefgh\", \"cdefghi\", \"defghij\", \"efghijk\", \"fghijkl\", \"ghijklm\", \"hijklmn\", \"ijklmno\", \"jklmnop\", \"klmnopq\", \"lmnopqr\", \"mnopqrs\", \"nopqrst\", \"opqrstu\", \"pqrstuv\", \"qrstuvw\", \"rstuvwx\", \"stuvwxy\", \"tuvwxyza\", \"uvwxyzbac\", \"vwxyzbadce\", \"wxyzbacdef\", \"xyzbacdefg\", \"yzbadcefg\"]",
        "output": "[['abcdefg', 'bcdefgh', 'cdefghi', 'defghij', 'efghijk', 'fghijkl', 'ghijklm', 'hijklmn', 'ijklmno', 'jklmnop', 'klmnopq', 'lmnopqr', 'mnopqrs', 'nopqrst', 'opqrstu', 'pqrstuv', 'qrstuvw', 'rstuvwx', 'stuvwxy'], ['tuvwxyza'], ['uvwxyzbac'], ['vwxyzbadce'], ['wxyzbacdef'], ['xyzbacdefg'], ['yzbadcefg']]"
      },
      {
        "input": "strings = [\"abcdef\", \"defabc\", \"efabcd\", \"fabcde\", \"ghijkl\", \"hijklg\", \"ijklgh\", \"jklghi\", \"klghij\", \"lghijk\", \"mnopqr\", \"nopqrm\", \"opqrml\", \"pqrmln\", \"qrmlno\"]",
        "output": "[['abcdef', 'ghijkl', 'mnopqr'], ['defabc', 'jklghi'], ['efabcd', 'klghij'], ['fabcde', 'lghijk'], ['hijklg', 'nopqrm'], ['ijklgh'], ['opqrml'], ['pqrmln'], ['qrmlno']]"
      },
      {
        "input": "strings = [\"abcd\", \"bcde\", \"cdef\", \"defg\", \"efgh\", \"fghi\", \"ghij\", \"hijk\", \"ijkl\", \"jklm\", \"klmn\", \"lmno\", \"mnop\", \"nopq\", \"opqr\", \"pqrs\", \"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyza\", \"yzab\", \"zabc\"]",
        "output": "[['abcd', 'bcde', 'cdef', 'defg', 'efgh', 'fghi', 'ghij', 'hijk', 'ijkl', 'jklm', 'klmn', 'lmno', 'mnop', 'nopq', 'opqr', 'pqrs', 'qrst', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz', 'xyza', 'yzab', 'zabc']]"
      },
      {
        "input": "strings = [\"a\", \"z\", \"az\", \"za\", \"abc\", \"bcd\", \"cde\", \"xyz\", \"zyx\", \"aaa\", \"zzz\", \"aba\", \"bab\", \"bba\", \"aab\", \"acef\", \"xyz\", \"az\", \"ba\", \"abcdefghi\", \"ghijklmno\", \"nopqrstuv\", \"wxyzabcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"zabcd\", \"efghi\", \"jklmn\", \"opqrs\", \"tuvwx\", \"yzabc\", \"bcdef\", \"cdefg\", \"defgh\", \"efghi\", \"fghij\", \"ghijk\", \"hijkl\", \"ijklm\", \"jklmn\", \"klmno\", \"lmnop\", \"mnopq\", \"nopqr\", \"opqrs\", \"pqrst\", \"qrstu\", \"rstuv\", \"stuvw\", \"tuvwx\", \"uvwxy\", \"vwxyz\", \"wxyza\", \"xyzaa\", \"yzaab\", \"zaabc\", \"aabbc\", \"abbbc\", \"bbbbc\", \"bbbbc\"]",
        "output": "[['a', 'z'], ['az', 'az', 'ba'], ['za'], ['abc', 'bcd', 'cde', 'xyz', 'xyz'], ['zyx'], ['aaa', 'zzz'], ['aba'], ['bab'], ['bba'], ['aab'], ['acef'], ['abcdefghi', 'ghijklmno', 'nopqrstuv', 'wxyzabcde'], ['fghij', 'klmno', 'pqrst', 'uvwxy', 'zabcd', 'efghi', 'jklmn', 'opqrs', 'tuvwx', 'yzabc', 'bcdef', 'cdefg', 'defgh', 'efghi', 'fghij', 'ghijk', 'hijkl', 'ijklm', 'jklmn', 'klmno', 'lmnop', 'mnopq', 'nopqr', 'opqrs', 'pqrst', 'qrstu', 'rstuv', 'stuvw', 'tuvwx', 'uvwxy', 'vwxyz', 'wxyza'], ['xyzaa'], ['yzaab'], ['zaabc'], ['aabbc'], ['abbbc'], ['bbbbc', 'bbbbc']]"
      },
      {
        "input": "strings = [\"abcd\", \"bcde\", \"cdef\", \"dddd\", \"aaaa\", \"abab\", \"baba\"]",
        "output": "[['abcd', 'bcde', 'cdef'], ['dddd', 'aaaa'], ['abab'], ['baba']]"
      },
      {
        "input": "strings = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"zabcd\", \"efghi\", \"jklmn\", \"opqrs\", \"tuvwx\", \"yzabc\", \"ghijk\", \"lmnop\", \"qrstu\", \"vwxyz\", \"abcdz\"]",
        "output": "[['abcde', 'fghij', 'klmno', 'pqrst', 'uvwxy', 'zabcd', 'efghi', 'jklmn', 'opqrs', 'tuvwx', 'yzabc', 'ghijk', 'lmnop', 'qrstu', 'vwxyz'], ['abcdz']]"
      },
      {
        "input": "strings = [\"bdfhjlnprtvxz\", \"acegikmoqsuwy\", \"xyzabc\", \"uvwxyza\", \"mnopqr\", \"rstuvw\", \"klmnop\", \"qrstuv\", \"lmnopq\", \"nopqrs\"]",
        "output": "[['bdfhjlnprtvxz', 'acegikmoqsuwy'], ['xyzabc', 'mnopqr', 'rstuvw', 'klmnop', 'qrstuv', 'lmnopq', 'nopqrs'], ['uvwxyza']]"
      },
      {
        "input": "strings = [\"zzzz\", \"aaa\", \"zzz\", \"aa\", \"z\", \"\", \"abcdef\", \"fedcba\", \"ghijkl\", \"lkjihg\", \"mnopqr\", \"rqponm\", \"stuvwx\", \"xwvuts\", \"yz\", \"zy\", \"abc\", \"bca\", \"cab\", \"xyz\", \"yzx\", \"zxy\", \"aaaa\", \"bbbb\", \"cccc\", \"ddddd\"]",
        "output": "Error: string index out of range"
      },
      {
        "input": "strings = [\"zzzz\", \"aaaa\", \"zzzy\", \"zzyz\", \"zyzz\", \"azzz\", \"zzza\", \"zzya\", \"zyza\", \"yzzz\", \"zzay\", \"zzza\", \"zyaa\", \"yaaz\", \"aaaz\", \"aaay\", \"aazy\", \"ayzz\", \"yzaz\", \"zayz\", \"zzaz\", \"zayz\", \"yzaa\", \"zaaz\", \"aaaz\", \"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\", \"ooo\", \"ppp\", \"qqq\", \"rrr\", \"sss\", \"ttt\", \"uuu\", \"vvv\", \"www\", \"xxx\", \"yyy\", \"zzz\"]",
        "output": "[['zzzz', 'aaaa'], ['zzzy', 'aaaz', 'aaaz'], ['zzyz'], ['zyzz'], ['azzz'], ['zzza', 'zzza'], ['zzya'], ['zyza'], ['yzzz'], ['zzay'], ['zyaa'], ['yaaz'], ['aaay'], ['aazy'], ['ayzz'], ['yzaz'], ['zayz', 'zayz'], ['zzaz'], ['yzaa'], ['zaaz'], ['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll', 'mmm', 'nnn', 'ooo', 'ppp', 'qqq', 'rrr', 'sss', 'ttt', 'uuu', 'vvv', 'www', 'xxx', 'yyy', 'zzz']]"
      },
      {
        "input": "strings = [\"mnop\", \"nopq\", \"opqr\", \"pqrt\", \"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyzx\", \"yzxy\", \"zxyz\"]",
        "output": "[['mnop', 'nopq', 'opqr', 'qrst', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz'], ['pqrt'], ['xyzx'], ['yzxy'], ['zxyz']]"
      },
      {
        "input": "strings = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\", \"zz\"]",
        "output": "[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'], ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll', 'mm', 'nn', 'oo', 'pp', 'qq', 'rr', 'ss', 'tt', 'uu', 'vv', 'ww', 'xx', 'yy', 'zz']]"
      },
      {
        "input": "strings = [\"mnopqr\", \"nopqrs\", \"opqrst\", \"pqrstu\", \"qrstuv\", \"rstuvw\", \"stuvwx\", \"tuvwxy\", \"uvwxyx\", \"vwxyz\", \"wxyza\", \"xyzab\", \"yzabc\", \"zabcd\"]",
        "output": "[['mnopqr', 'nopqrs', 'opqrst', 'pqrstu', 'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy'], ['uvwxyx'], ['vwxyz', 'wxyza', 'xyzab', 'yzabc', 'zabcd']]"
      },
      {
        "input": "strings = [\"abc\", \"bcd\", \"cde\", \"xyz\", \"yza\", \"zab\", \"aaa\", \"bbb\", \"zzz\", \"zyz\", \"yxy\"]",
        "output": "[['abc', 'bcd', 'cde', 'xyz', 'yza', 'zab'], ['aaa', 'bbb', 'zzz'], ['zyz', 'yxy']]"
      },
      {
        "input": "strings = [\"abcd\", \"bcde\", \"cdef\", \"defg\", \"efgh\", \"fghi\", \"ghij\", \"hijk\", \"ijkl\", \"jklm\", \"klmn\", \"lmno\", \"mnop\", \"nopq\", \"opqr\", \"pqrs\", \"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyz\", \"yza\", \"zab\", \"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\"]",
        "output": "[['abcd', 'bcde', 'cdef', 'defg', 'efgh', 'fghi', 'ghij', 'hijk', 'ijkl', 'jklm', 'klmn', 'lmno', 'mnop', 'nopq', 'opqr', 'pqrs', 'qrst', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz'], ['xyz', 'yza', 'zab', 'abc', 'bcd', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno', 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz']]"
      },
      {
        "input": "strings = [\"a\", \"z\", \"az\", \"za\", \"ba\", \"ab\", \"xyz\", \"zyx\", \"yxz\", \"xzy\", \"zyz\", \"zzz\", \"aaa\", \"zz\", \"aa\", \"zzzz\", \"aaaa\"]",
        "output": "[['a', 'z'], ['az', 'ba'], ['za', 'ab'], ['xyz'], ['zyx'], ['yxz'], ['xzy'], ['zyz'], ['zzz', 'aaa'], ['zz', 'aa'], ['zzzz', 'aaaa']]"
      },
      {
        "input": "strings = [\"mnopqr\", \"nopqrs\", \"opqrst\", \"pqrstu\", \"qrstuv\", \"rstuvw\", \"stuvwx\", \"tuvwxy\", \"uvwxyza\", \"vwxyzab\"]",
        "output": "[['mnopqr', 'nopqrs', 'opqrst', 'pqrstu', 'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy'], ['uvwxyza', 'vwxyzab']]"
      },
      {
        "input": "strings = [\"abcdefg\", \"bcdefgh\", \"cdefghi\", \"defghij\", \"efghijk\", \"fghijkl\", \"ghijklm\", \"hijklmn\", \"ijklmno\", \"jklmnop\", \"klmnopq\", \"lmnopqr\", \"mnopqrs\", \"nopqrst\", \"opqrstu\", \"pqrstuv\", \"qrstuvw\", \"rstuvwx\", \"stuvwxy\", \"tuvwxyx\", \"uvwxyza\", \"vwxyzab\", \"wxyzabc\", \"xyzabcd\", \"yzabcde\", \"zabcdef\"]",
        "output": "[['abcdefg', 'bcdefgh', 'cdefghi', 'defghij', 'efghijk', 'fghijkl', 'ghijklm', 'hijklmn', 'ijklmno', 'jklmnop', 'klmnopq', 'lmnopqr', 'mnopqrs', 'nopqrst', 'opqrstu', 'pqrstuv', 'qrstuvw', 'rstuvwx', 'stuvwxy', 'uvwxyza', 'vwxyzab', 'wxyzabc', 'xyzabcd', 'yzabcde', 'zabcdef'], ['tuvwxyx']]"
      },
      {
        "input": "strings = [\"mnop\", \"opqr\", \"qrst\", \"rstu\", \"stuv\", \"tuvw\", \"uvwx\", \"vwxy\", \"wxyz\", \"xyz\", \"yza\", \"zab\", \"abc\"]",
        "output": "[['mnop', 'opqr', 'qrst', 'rstu', 'stuv', 'tuvw', 'uvwx', 'vwxy', 'wxyz'], ['xyz', 'yza', 'zab', 'abc']]"
      },
      {
        "input": "strings = [\"qwerty\", \"wertyq\", \"ertyqw\", \"rtyqwe\", \"tyqwre\", \"yqwret\", \"zxcvbn\", \"xcvbnz\", \"cvbnzx\", \"vbnzxc\", \"bnzxcv\", \"nzxcvb\", \"mnbvcx\", \"nbvcxm\", \"bvcxmn\", \"vcxmnv\", \"cxmnvb\", \"xmnvbx\", \"mnvbxm\", \"nvcxbm\"]",
        "output": "[['qwerty'], ['wertyq'], ['ertyqw'], ['rtyqwe'], ['tyqwre'], ['yqwret'], ['zxcvbn'], ['xcvbnz'], ['cvbnzx'], ['vbnzxc'], ['bnzxcv'], ['nzxcvb'], ['mnbvcx'], ['nbvcxm'], ['bvcxmn'], ['vcxmnv'], ['cxmnvb'], ['xmnvbx'], ['mnvbxm'], ['nvcxbm']]"
      },
      {
        "input": "strings = [\"dog\", \"dog\", \"god\", \"god\", \"fog\", \"fog\", \"log\", \"log\", \"dpe\", \"eqf\", \"fpg\", \"gqh\", \"hri\", \"isi\", \"jti\", \"ktj\", \"luk\", \"mvc\", \"nwd\", \"oex\", \"pfy\", \"qgz\", \"rhs\", \"sia\", \"tjb\", \"uka\", \"vlb\", \"wmc\", \"xnd\", \"yoe\", \"zpf\", \"aqg\", \"bph\", \"coi\", \"dpj\", \"eqk\", \"frl\", \"gsm\", \"htn\", \"iou\", \"jpv\", \"kqw\", \"lrx\", \"msy\", \"ntz\", \"oua\", \"pvb\", \"qwc\", \"rxd\", \"sye\", \"tzf\"]",
        "output": "[['dog', 'dog'], ['god', 'god'], ['fog', 'fog'], ['log', 'log'], ['dpe', 'eqf'], ['fpg', 'gqh', 'hri'], ['isi'], ['jti'], ['ktj', 'luk'], ['mvc', 'nwd'], ['oex', 'pfy', 'qgz'], ['rhs'], ['sia', 'tjb'], ['uka', 'vlb', 'wmc', 'xnd', 'yoe', 'zpf', 'aqg'], ['bph'], ['coi', 'dpj', 'eqk', 'frl', 'gsm', 'htn'], ['iou', 'jpv', 'kqw', 'lrx', 'msy', 'ntz', 'oua', 'pvb', 'qwc', 'rxd', 'sye', 'tzf']]"
      },
      {
        "input": "strings = [\"aaa\", \"bbb\", \"ccc\", \"zzz\", \"aba\", \"bab\", \"bba\", \"aab\", \"aca\", \"bcb\", \"cbc\", \"baa\", \"aba\", \"bab\", \"bba\", \"aab\", \"aca\", \"bcb\", \"cbc\", \"baa\", \"aba\", \"bab\", \"bba\", \"aab\", \"aca\", \"bcb\", \"cbc\", \"baa\"]",
        "output": "[['aaa', 'bbb', 'ccc', 'zzz'], ['aba', 'bcb', 'aba', 'bcb', 'aba', 'bcb'], ['bab', 'cbc', 'bab', 'cbc', 'bab', 'cbc'], ['bba', 'bba', 'bba'], ['aab', 'aab', 'aab'], ['aca', 'aca', 'aca'], ['baa', 'baa', 'baa']]"
      }
    ]
  },
  {
    "id": 573,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math"
    ],
    "problemDescription": "You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\n\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\nThe distance is the number of moves.\n\u00a0\nExample 1:\n\n\nInput: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.\n\nExample 2:\n\n\nInput: height = 1, width = 3, tree = [0,1], squirrel = [0,0], nuts = [[0,2]]\nOutput: 3\n\n\u00a0\nConstraints:\n\n1 <= height, width <= 100\ntree.length == 2\nsquirrel.length == 2\n1 <= nuts.length <= 5000\nnuts[i].length == 2\n0 <= treer, squirrelr, nutir <= height\n0 <= treec, squirrelc, nutic <= width\n\n",
    "starterCode": "class Solution:\n    def minDistance(self, height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "height = 6, width = 6, tree = [3,3], squirrel = [5,0], nuts = [[3,3], [1,1], [5,5], [0,0]]",
        "output": "27"
      },
      {
        "input": "height = 10, width = 10, tree = [5,5], squirrel = [0,0], nuts = [[9,9], [0,0], [5,5]]",
        "output": "26"
      },
      {
        "input": "height = 100, width = 100, tree = [50,50], squirrel = [99,99], nuts = [[49,49], [51,51]]",
        "output": "102"
      },
      {
        "input": "height = 10, width = 10, tree = [5,5], squirrel = [0,0], nuts = [[9,9], [5,5], [0,0]]",
        "output": "26"
      },
      {
        "input": "height = 10, width = 10, tree = [5,5], squirrel = [0,0], nuts = [[9,9], [8,8], [7,7]]",
        "output": "46"
      },
      {
        "input": "height = 6, width = 8, tree = [3,4], squirrel = [0,0], nuts = [[1,2], [3,5], [5,6], [4,1]]",
        "output": "25"
      },
      {
        "input": "height = 1, width = 3, tree = [0,1], squirrel = [0,0], nuts = [[0,2]]",
        "output": "3"
      },
      {
        "input": "height = 3, width = 3, tree = [1,1], squirrel = [2,2], nuts = [[0,0], [2,2]]",
        "output": "6"
      },
      {
        "input": "height = 3, width = 3, tree = [1,1], squirrel = [2,2], nuts = [[0,0], [1,0], [0,1]]",
        "output": "10"
      },
      {
        "input": "height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]",
        "output": "12"
      },
      {
        "input": "height = 10, width = 10, tree = [5,5], squirrel = [0,0], nuts = [[9,9], [0,9], [9,0]]",
        "output": "52"
      },
      {
        "input": "height = 10, width = 10, tree = [5,5], squirrel = [9,9], nuts = [[5,5], [8,8], [4,4]]",
        "output": "12"
      },
      {
        "input": "height = 4, width = 4, tree = [2,2], squirrel = [3,3], nuts = [[0,0], [3,3], [2,2], [1,1]]",
        "output": "14"
      },
      {
        "input": "height = 3, width = 3, tree = [1,1], squirrel = [0,0], nuts = [[2,2], [1,0]]",
        "output": "6"
      },
      {
        "input": "height = 3, width = 3, tree = [1,1], squirrel = [0,0], nuts = [[2,2], [1,2], [2,1]]",
        "output": "10"
      },
      {
        "input": "height = 4, width = 4, tree = [2,2], squirrel = [3,3], nuts = [[1,1], [1,2], [2,1]]",
        "output": "10"
      },
      {
        "input": "height = 3, width = 3, tree = [1,1], squirrel = [0,0], nuts = [[2,2], [1,1], [0,0]]",
        "output": "6"
      },
      {
        "input": "height = 8, width = 8, tree = [4,4], squirrel = [7,7], nuts = [[1,1], [1,7], [7,1], [7,7], [2,2], [2,6], [6,2], [6,6], [3,3], [5,5], [4,1], [4,7], [1,4], [7,4]]",
        "output": "106"
      },
      {
        "input": "height = 100, width = 100, tree = [50,50], squirrel = [1,1], nuts = [[99,99], [80,80], [70,70], [60,60], [50,50], [40,40], [30,30], [20,20], [10,10], [0,0]]",
        "output": "938"
      },
      {
        "input": "height = 30, width = 30, tree = [15,15], squirrel = [10,10], nuts = [[20,20], [10,20], [20,10], [10,10], [15,20], [20,15], [15,10]]",
        "output": "100"
      },
      {
        "input": "height = 15, width = 15, tree = [7,7], squirrel = [0,0], nuts = [[14,14], [13,13], [12,12], [11,11], [10,10]]",
        "output": "114"
      },
      {
        "input": "height = 50, width = 50, tree = [25,25], squirrel = [49,49], nuts = [[0,0], [0,49], [49,0], [25,25], [24,24], [26,26]]",
        "output": "304"
      },
      {
        "input": "height = 100, width = 100, tree = [50,50], squirrel = [0,0], nuts = [[99,99], [98,98], [97,97], [96,96], [95,95]]",
        "output": "1040"
      },
      {
        "input": "height = 20, width = 15, tree = [10,10], squirrel = [1,1], nuts = [[5,5], [10,5], [5,10], [15,15], [0,0], [19,14]]",
        "output": "108"
      },
      {
        "input": "height = 20, width = 20, tree = [10,10], squirrel = [0,0], nuts = [[19,19], [18,18], [17,17], [16,16], [15,15]]",
        "output": "160"
      },
      {
        "input": "height = 20, width = 20, tree = [10,10], squirrel = [0,0], nuts = [[1,1], [2,2], [3,3], [4,4], [5,5], [6,6], [7,7], [8,8], [9,9], [10,10], [11,11], [12,12], [13,13], [14,14], [15,15], [16,16], [17,17], [18,18], [19,19]]",
        "output": "344"
      },
      {
        "input": "height = 50, width = 50, tree = [25,25], squirrel = [0,0], nuts = [[25,0], [0,25], [25,50], [50,25], [10,10], [40,40], [15,15], [35,35], [20,20], [30,30]]",
        "output": "430"
      },
      {
        "input": "height = 60, width = 60, tree = [30,30], squirrel = [55,5], nuts = [[25,25], [10,10], [40,40], [5,5], [55,55], [15,15], [45,45], [20,20], [35,35], [50,50]]",
        "output": "600"
      },
      {
        "input": "height = 15, width = 15, tree = [7,7], squirrel = [14,14], nuts = [[5,5], [10,10], [2,2], [12,12], [0,0], [14,0], [0,14], [8,8]]",
        "output": "142"
      },
      {
        "input": "height = 80, width = 80, tree = [40,40], squirrel = [5,75], nuts = [[20,20], [60,60], [10,10], [70,70], [30,30], [50,50], [15,15], [65,65], [25,25], [55,55], [35,35], [45,45]]",
        "output": "850"
      },
      {
        "input": "height = 30, width = 15, tree = [15,7], squirrel = [1,1], nuts = [[25,5], [10,10], [1,14], [29,14], [14,1], [29,1]]",
        "output": "170"
      },
      {
        "input": "height = 50, width = 50, tree = [25,25], squirrel = [0,50], nuts = [[20,20], [30,30], [10,10], [40,40], [25,25], [15,15], [35,35], [5,5], [45,45]]",
        "output": "410"
      },
      {
        "input": "height = 50, width = 50, tree = [30,30], squirrel = [0,0], nuts = [[45,45], [46,46], [47,47], [48,48], [49,49], [40,40], [35,35], [30,30], [25,25], [20,20]]",
        "output": "480"
      },
      {
        "input": "height = 60, width = 60, tree = [30,30], squirrel = [59,59], nuts = [[1,1], [2,2], [3,3], [4,4], [5,5], [6,6], [7,7], [8,8], [9,9]]",
        "output": "958"
      },
      {
        "input": "height = 20, width = 20, tree = [10,10], squirrel = [1,1], nuts = [[2,2], [18,18], [5,5], [15,15], [0,0], [19,19]]",
        "output": "162"
      },
      {
        "input": "height = 100, width = 100, tree = [50,50], squirrel = [99,99], nuts = [[0,0], [99,0], [0,99], [50,50], [49,49], [51,51], [50,49], [50,51], [49,50], [51,50], [50,48], [50,52], [48,50], [52,50]]",
        "output": "628"
      },
      {
        "input": "height = 50, width = 50, tree = [25,25], squirrel = [40,40], nuts = [[0,0], [1,1], [2,2], [3,3], [4,4], [5,5], [6,6], [7,7], [8,8], [9,9]]",
        "output": "850"
      },
      {
        "input": "height = 10, width = 10, tree = [5,5], squirrel = [0,9], nuts = [[1,1], [2,2], [3,3], [4,4], [5,5], [6,6], [7,7], [8,8], [9,9], [0,0], [9,0], [0,9]]",
        "output": "127"
      },
      {
        "input": "height = 10, width = 10, tree = [5,5], squirrel = [1,1], nuts = [[9,9], [8,8], [7,7], [6,6], [5,4], [4,5]]",
        "output": "50"
      },
      {
        "input": "height = 30, width = 30, tree = [15,15], squirrel = [29,29], nuts = [[14,14], [16,16], [15,14], [15,16], [14,15], [16,15]]",
        "output": "40"
      },
      {
        "input": "height = 12, width = 12, tree = [6,6], squirrel = [11,11], nuts = [[0,0], [11,0], [0,11], [3,3], [8,8], [6,1], [1,6]]",
        "output": "108"
      },
      {
        "input": "height = 90, width = 90, tree = [45,45], squirrel = [10,10], nuts = [[30,30], [60,60], [15,15], [75,75], [20,20], [65,65], [25,25], [70,70], [35,35], [50,50], [80,80]]",
        "output": "870"
      },
      {
        "input": "height = 40, width = 40, tree = [20,20], squirrel = [1,1], nuts = [[39,39], [38,38], [37,37], [36,36], [35,35], [34,34], [33,33]]",
        "output": "486"
      },
      {
        "input": "height = 12, width = 12, tree = [6,6], squirrel = [11,0], nuts = [[5,5], [7,7], [3,3], [9,9], [2,2], [10,10], [1,1], [8,8], [4,4], [6,0], [0,6], [11,11]]",
        "output": "143"
      },
      {
        "input": "height = 20, width = 20, tree = [10,10], squirrel = [0,0], nuts = [[5,5], [15,15], [2,18], [18,2], [10,0], [0,10]]",
        "output": "144"
      },
      {
        "input": "height = 10, width = 10, tree = [4,4], squirrel = [9,0], nuts = [[0,0], [0,9], [9,0], [9,9], [4,4]]",
        "output": "63"
      },
      {
        "input": "height = 15, width = 15, tree = [7,7], squirrel = [14,14], nuts = [[7,0], [7,14], [0,7], [14,7], [5,5], [10,10]]",
        "output": "76"
      },
      {
        "input": "height = 15, width = 30, tree = [7,15], squirrel = [0,0], nuts = [[0,30], [1,29], [2,28], [3,27], [4,26], [5,25], [6,24], [7,23], [8,22], [9,21], [10,20], [11,19], [12,18], [13,17], [14,16]]",
        "output": "360"
      },
      {
        "input": "height = 40, width = 40, tree = [20,20], squirrel = [5,35], nuts = [[10,10], [11,11], [12,12], [13,13], [14,14], [15,15], [16,16], [17,17], [18,18], [19,19], [20,20]]",
        "output": "230"
      },
      {
        "input": "height = 8, width = 8, tree = [4,4], squirrel = [7,0], nuts = [[1,1], [2,2], [3,3], [5,5], [6,6], [7,7], [0,0], [1,7], [7,1], [3,6]]",
        "output": "89"
      },
      {
        "input": "height = 40, width = 40, tree = [20,20], squirrel = [39,0], nuts = [[19,19], [21,21], [39,39], [0,0], [1,1], [38,38], [2,2], [37,37], [3,3], [36,36], [4,4], [35,35], [5,5], [34,34], [6,6], [33,33], [7,7], [32,32], [8,8], [31,31], [9,9], [30,30], [10,10], [29,29], [11,11], [28,28]]",
        "output": "1351"
      },
      {
        "input": "height = 12, width = 12, tree = [6,6], squirrel = [0,0], nuts = [[1,1], [2,2], [3,3], [4,4], [5,5], [6,6], [7,7], [8,8], [9,9], [10,10], [11,11], [0,11], [11,0]]",
        "output": "156"
      },
      {
        "input": "height = 30, width = 30, tree = [15,15], squirrel = [29,29], nuts = [[15,0], [0,15], [15,30], [30,15], [20,20], [10,10], [5,5]]",
        "output": "200"
      },
      {
        "input": "height = 15, width = 15, tree = [7,7], squirrel = [14,14], nuts = [[0,0], [1,1], [2,2], [3,3], [4,4], [5,5], [6,6]]",
        "output": "126"
      },
      {
        "input": "height = 15, width = 20, tree = [10,10], squirrel = [1,1], nuts = [[5,5], [14,14], [0,0], [19,19], [7,7], [12,12]]",
        "output": "114"
      },
      {
        "input": "height = 10, width = 10, tree = [2,2], squirrel = [9,9], nuts = [[1,1], [3,3], [5,5], [7,7], [9,9], [8,8]]",
        "output": "78"
      },
      {
        "input": "height = 15, width = 15, tree = [14,14], squirrel = [0,0], nuts = [[7,7], [1,1], [2,2], [3,3], [4,4], [5,5], [6,6], [13,13], [12,12], [11,11], [10,10], [9,9], [8,8]]",
        "output": "340"
      },
      {
        "input": "height = 100, width = 100, tree = [50,50], squirrel = [99,99], nuts = [[50,0], [0,50], [50,100], [100,50], [25,25], [75,75], [10,10], [90,90], [5,5], [95,95], [40,40], [60,60], [15,15], [85,85], [20,20], [80,80], [25,25], [75,75], [30,30], [70,70]]",
        "output": "2158"
      },
      {
        "input": "height = 40, width = 40, tree = [20,20], squirrel = [39,39], nuts = [[10,10], [30,30], [5,5], [35,35], [15,15], [25,25], [20,20], [5,35], [35,5], [15,25]]",
        "output": "358"
      },
      {
        "input": "height = 50, width = 50, tree = [25,25], squirrel = [0,0], nuts = [[49,49], [48,48], [47,47], [46,46], [45,45], [44,44], [43,43]]",
        "output": "638"
      },
      {
        "input": "height = 30, width = 30, tree = [15,15], squirrel = [10,20], nuts = [[5,5], [10,10], [15,15], [20,20], [25,25], [10,25], [25,10]]",
        "output": "170"
      },
      {
        "input": "height = 20, width = 20, tree = [10,10], squirrel = [0,0], nuts = [[19,19], [0,19], [19,0], [9,9], [10,9], [9,10], [8,8], [11,11], [12,12], [7,7], [6,6], [13,13], [14,14], [5,5], [4,4], [15,15], [16,16], [3,3], [2,2], [17,17]]",
        "output": "360"
      },
      {
        "input": "height = 70, width = 70, tree = [35,35], squirrel = [69,0], nuts = [[34,34], [36,36], [69,69], [0,0], [1,1], [68,68], [2,2], [67,67], [3,3], [66,66], [4,4], [65,65], [5,5], [64,64], [6,6], [63,63], [7,7], [62,62], [8,8], [61,61]]",
        "output": "2203"
      },
      {
        "input": "height = 75, width = 75, tree = [37,37], squirrel = [60,60], nuts = [[50,50], [20,20], [10,10], [5,5], [74,74], [65,65], [55,55], [45,45]]",
        "output": "674"
      },
      {
        "input": "height = 100, width = 100, tree = [50,50], squirrel = [99,0], nuts = [[49,49], [51,51], [99,99], [0,0], [1,1], [98,98], [2,2], [97,97], [3,3], [96,96], [4,4], [95,95], [5,5], [94,94], [6,6], [93,93]]",
        "output": "2611"
      },
      {
        "input": "height = 7, width = 7, tree = [3,3], squirrel = [6,6], nuts = [[0,0], [0,1], [0,2], [0,3], [0,4], [0,5], [0,6], [1,0], [1,6], [2,0], [2,6], [3,0], [3,6], [4,0], [4,6], [5,0], [5,6], [6,0], [6,1], [6,2], [6,3], [6,4], [6,5]]",
        "output": "200"
      },
      {
        "input": "height = 7, width = 7, tree = [3,3], squirrel = [0,3], nuts = [[1,0], [1,1], [1,2], [1,3], [1,4], [1,5], [1,6], [6,0], [6,1], [6,2], [6,3], [6,4], [6,5], [6,6]]",
        "output": "117"
      },
      {
        "input": "height = 25, width = 25, tree = [12,12], squirrel = [5,5], nuts = [[20,20], [21,21], [22,22], [23,23], [24,24], [15,15], [10,10]]",
        "output": "226"
      },
      {
        "input": "height = 20, width = 20, tree = [10,10], squirrel = [5,5], nuts = [[0,0], [20,20], [10,0], [0,10], [20,0], [0,20]]",
        "output": "190"
      },
      {
        "input": "height = 15, width = 15, tree = [7,7], squirrel = [0,14], nuts = [[0,0], [0,14], [14,0], [14,14], [7,0], [7,14], [0,7], [14,7], [5,5], [9,9]]",
        "output": "170"
      },
      {
        "input": "height = 50, width = 50, tree = [25,25], squirrel = [49,0], nuts = [[24,24], [26,26], [49,49], [0,0], [1,1], [48,48]]",
        "output": "391"
      },
      {
        "input": "height = 20, width = 20, tree = [15,15], squirrel = [0,0], nuts = [[10,10], [10,0], [0,10], [20,20], [5,5], [15,5], [5,15]]",
        "output": "190"
      },
      {
        "input": "height = 80, width = 80, tree = [40,40], squirrel = [79,0], nuts = [[39,39], [41,41], [79,79], [0,0], [1,1], [78,78], [2,2], [77,77], [3,3], [76,76], [4,4], [75,75], [5,5], [74,74], [6,6], [73,73], [7,7], [72,72], [8,8], [71,71], [9,9], [70,70], [10,10], [69,69], [11,11], [68,68], [12,12], [67,67], [13,13], [66,66], [14,14], [65,65], [15,15], [64,64]]",
        "output": "4103"
      },
      {
        "input": "height = 10, width = 10, tree = [5,5], squirrel = [9,0], nuts = [[0,0], [0,9], [9,0], [9,9], [5,0], [0,5], [5,9], [9,5], [3,3], [6,6], [4,4], [7,7], [2,2], [8,8], [1,1], [8,1], [1,8]]",
        "output": "191"
      },
      {
        "input": "height = 20, width = 20, tree = [10,10], squirrel = [0,0], nuts = [[9,9], [11,11], [0,20], [20,0], [19,19], [1,1], [18,18]]",
        "output": "176"
      },
      {
        "input": "height = 30, width = 30, tree = [15,15], squirrel = [29,0], nuts = [[14,14], [16,16], [29,29], [0,0], [1,1], [28,28], [2,2], [27,27], [3,3], [26,26]]",
        "output": "423"
      },
      {
        "input": "height = 8, width = 8, tree = [7,7], squirrel = [0,0], nuts = [[1,1], [2,2], [3,3], [4,4], [5,5], [6,6], [7,0]]",
        "output": "88"
      },
      {
        "input": "height = 50, width = 50, tree = [25,25], squirrel = [49,49], nuts = [[26,26], [24,24], [25,26], [25,24], [24,25], [26,25]]",
        "output": "60"
      }
    ]
  },
  {
    "id": 1834,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given n\u200b\u200b\u200b\u200b\u200b\u200b tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b task will be available to process at enqueueTimei and will take processingTimei to finish processing.\nYou have a single-threaded CPU that can process at most one task at a time and will act in the following way:\n\nIf the CPU is idle and there are no available tasks to process, the CPU remains idle.\nIf the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.\nOnce a task is started, the CPU will process the entire task without stopping.\nThe CPU can finish a task then start a new one instantly.\n\nReturn the order in which the CPU will process the tasks.\n\u00a0\nExample 1:\n\nInput: tasks = [[1,2],[2,4],[3,2],[4,1]]\nOutput: [0,2,3,1]\nExplanation: The events go as follows: \n- At time = 1, task 0 is available to process. Available tasks = {0}.\n- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n- At time = 2, task 1 is available to process. Available tasks = {1}.\n- At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n- At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n- At time = 10, the CPU finishes task 1 and becomes idle.\n\nExample 2:\n\nInput: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]\nOutput: [4,3,2,0,1]\nExplanation: The events go as follows:\n- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n- At time = 40, the CPU finishes task 1 and becomes idle.\n\n\u00a0\nConstraints:\n\ntasks.length == n\n1 <= n <= 105\n1 <= enqueueTimei, processingTimei <= 109\n\n",
    "starterCode": "class Solution:\n    def getOrder(self, tasks: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "tasks = [[1,3],[2,2],[3,1],[4,4]]",
        "output": "[0, 2, 1, 3]"
      },
      {
        "input": "tasks = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "tasks = [[1,3],[2,5],[8,2],[7,4],[10,2]]",
        "output": "[0, 1, 2, 4, 3]"
      },
      {
        "input": "tasks = [[1,3],[2,2],[3,1],[4,4],[5,5]]",
        "output": "[0, 2, 1, 3, 4]"
      },
      {
        "input": "tasks = [[3,1],[1,2],[2,4],[1,4]]",
        "output": "[1, 0, 2, 3]"
      },
      {
        "input": "tasks = [[5,2],[3,1],[1,4],[4,3],[2,5]]",
        "output": "[2, 1, 0, 3, 4]"
      },
      {
        "input": "tasks = [[5,5],[8,2],[1,9],[3,8]]",
        "output": "[2, 1, 0, 3]"
      },
      {
        "input": "tasks = [[9,3],[3,7],[8,10],[4,3],[5,3]]",
        "output": "[1, 0, 3, 4, 2]"
      },
      {
        "input": "tasks = [[2,1],[3,1],[1,2],[7,3],[8,4],[9,5]]",
        "output": "[2, 0, 1, 3, 4, 5]"
      },
      {
        "input": "tasks = [[19,13],[16,9],[21,10],[32,25],[37,4],[49,24],[2,15],[38,41],[37,34],[33,6],[45,4],[18,18],[46,39],[12,24]]",
        "output": "[6, 1, 2, 9, 4, 10, 0, 11, 5, 13, 3, 8, 12, 7]"
      },
      {
        "input": "tasks = [[5,2],[7,2],[9,4],[6,3],[8,2]]",
        "output": "[0, 1, 4, 3, 2]"
      },
      {
        "input": "tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]",
        "output": "[4, 3, 2, 0, 1]"
      },
      {
        "input": "tasks = [[5,2],[1,2],[3,1],[2,1]]",
        "output": "[1, 2, 3, 0]"
      },
      {
        "input": "tasks = [[1,2],[2,4],[3,2],[4,1]]",
        "output": "[0, 2, 3, 1]"
      },
      {
        "input": "tasks = [[1,3],[2,5],[8,2],[7,4],[6,1],[5,6],[4,3],[3,2],[9,5],[10,4]]",
        "output": "[0, 7, 4, 6, 2, 3, 9, 1, 8, 5]"
      },
      {
        "input": "tasks = [[1,1],[1,1],[1,1],[1,1],[1,1]]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "tasks = [[1,2],[1,3],[1,4],[1,5],[1,6]]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "tasks = [[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1],[10,10]]",
        "output": "[0, 8, 7, 6, 5, 4, 3, 2, 1, 9]"
      },
      {
        "input": "tasks = [[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "tasks = [[1,10],[2,10],[3,10],[4,10],[5,10]]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "tasks = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1]]",
        "output": "[0, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "tasks = [[1,2],[2,3],[4,5],[8,9],[16,17],[32,33],[64,65],[128,129],[256,257],[512,513],[1024,1025],[2048,2049],[4096,4097],[8192,8193],[16384,16385]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "tasks = [[1,100],[101,1],[201,10],[301,100],[401,10],[501,1],[601,100],[701,10],[801,1],[901,100]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,1],[2,2],[1,3],[2,4],[1,5],[2,6],[1,7],[2,8],[1,9],[2,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,100],[2,200],[3,300],[4,400],[5,500],[6,600],[7,700],[8,800],[9,900],[10,1000]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "[0, 10, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19]"
      },
      {
        "input": "tasks = [[1,1000000000],[2,1000000000],[3,1000000000],[4,1000000000],[5,1000000000]]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "tasks = [[1,100],[200,1],[300,1],[400,1],[500,1],[600,1],[700,1],[800,1],[900,1],[1000,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,5],[2,4],[3,3],[4,2],[5,1],[6,1],[7,2],[8,3],[9,4],[10,5]]",
        "output": "[0, 4, 5, 3, 6, 2, 7, 1, 8, 9]"
      },
      {
        "input": "tasks = [[1,10],[10,10],[20,10],[30,10],[40,10],[50,10],[60,10],[70,10],[80,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "tasks = [[2,5],[1,3],[2,2],[4,1],[5,10],[7,1],[8,2],[9,3],[10,4]]",
        "output": "[1, 3, 2, 5, 6, 7, 8, 0, 4]"
      },
      {
        "input": "tasks = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,5],[2,4],[3,3],[4,2],[5,1],[1,1],[2,2],[3,3],[4,4],[5,5],[1,2],[2,3],[3,4],[4,5],[5,6],[1,3],[2,4],[3,5],[4,6],[5,7]]",
        "output": "[5, 6, 3, 4, 10, 2, 7, 11, 15, 1, 8, 12, 16, 0, 9, 13, 17, 14, 18, 19]"
      },
      {
        "input": "tasks = [[1,10],[10,1],[100,1],[1000,1],[10000,1],[100000,1],[1000000,1],[10000000,1],[100000000,1],[1000000000,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[10,100],[100,10],[200,20],[300,30],[400,40],[500,50],[600,60],[700,70],[800,80],[900,90]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,1],[2,2],[3,3],[4,4],[5,5],[1,6],[2,7],[3,8],[4,9],[5,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,5],[1,4],[1,3],[1,2],[1,1],[2,1],[2,2],[2,3],[2,4],[2,5]]",
        "output": "[4, 5, 3, 6, 2, 7, 1, 8, 0, 9]"
      },
      {
        "input": "tasks = [[1,3],[1,2],[1,1],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]]",
        "output": "[2, 1, 0, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,2],[1,2],[1,2],[2,1],[2,1],[2,1],[3,3],[3,3],[3,3],[4,4],[4,4],[4,4],[5,5],[5,5],[5,5]]",
        "output": "[0, 3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "tasks = [[1,1],[1000000000,1000000000],[2,2],[999999999,999999999],[3,3],[999999998,999999998],[4,4],[999999997,999999997],[5,5],[999999996,999999996]]",
        "output": "[0, 2, 4, 6, 8, 9, 7, 5, 3, 1]"
      },
      {
        "input": "tasks = [[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10],[10,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,2],[2,1],[3,2],[4,1],[5,2],[6,1],[7,2],[8,1],[9,2],[10,1],[1,2],[2,1],[3,2],[4,1],[5,2],[6,1],[7,2],[8,1],[9,2],[10,1]]",
        "output": "[0, 1, 3, 11, 5, 13, 7, 15, 9, 17, 19, 2, 4, 6, 8, 10, 12, 14, 16, 18]"
      },
      {
        "input": "tasks = [[1,1],[10,2],[20,3],[30,4],[40,5],[50,6],[60,7],[70,8],[80,9],[90,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91]]",
        "output": "[0, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "tasks = [[1000000000,1],[1000000000,2],[1000000000,3],[1000000000,4],[1000000000,5]]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "tasks = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1],[10,0]]",
        "output": "[0, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "tasks = [[1,1],[1,2],[1,4],[1,8],[1,16],[1,32],[1,64],[1,128],[1,256],[1,512]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]"
      },
      {
        "input": "tasks = [[5,10],[10,5],[15,1],[20,2],[25,8],[30,3],[35,4],[40,9],[45,6],[50,7]]",
        "output": "[0, 2, 1, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,1000000000],[2,1000000000],[3,1000000000],[4,1000000000],[5,1000000000],[6,1000000000],[7,1000000000],[8,1000000000],[9,1000000000],[10,1000000000]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2],[10,2]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,1],[1000000000,1],[999999999,2],[2,2],[999999998,3],[3,3],[999999997,4],[4,4],[999999996,5],[5,5]]",
        "output": "[0, 3, 5, 7, 9, 8, 1, 2, 4, 6]"
      },
      {
        "input": "tasks = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2],[10,2]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"
      },
      {
        "input": "tasks = [[1,2],[1,3],[2,1],[2,2],[3,3],[3,4],[4,1],[4,2],[5,3],[5,4],[6,1],[6,2],[7,3],[7,4],[8,1],[8,2],[9,3],[9,4],[10,1],[10,2]]",
        "output": "[0, 2, 6, 3, 10, 14, 7, 18, 11, 15, 19, 1, 4, 8, 12, 16, 5, 9, 13, 17]"
      },
      {
        "input": "tasks = [[1,100],[2,50],[3,25],[4,12],[5,6],[6,3],[7,2],[8,1]]",
        "output": "[0, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "tasks = [[1,20],[5,10],[10,5],[15,2],[20,1],[25,1],[30,1],[35,1],[40,1],[45,1]]",
        "output": "[0, 4, 3, 2, 5, 6, 1, 7, 8, 9]"
      },
      {
        "input": "tasks = [[100,100],[150,100],[200,100],[250,100],[300,100],[350,100],[400,100],[450,100],[500,100]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "tasks = [[1,1],[3,1],[5,1],[7,1],[9,1],[11,1],[13,1],[15,1],[17,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "tasks = [[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[4,1]]",
        "output": "[0, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[2,1],[4,1],[6,1],[8,1],[10,1],[1,2],[3,2],[5,2],[7,2],[9,2],[11,2],[13,2],[15,2],[17,2],[19,2]]",
        "output": "[5, 0, 1, 6, 2, 3, 7, 4, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "tasks = [[10,10],[20,20],[30,30],[40,40],[50,50],[60,60],[70,70],[80,80],[90,90],[100,100]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "tasks = [[10,10],[15,5],[20,1],[25,2],[30,3],[35,4],[40,5],[45,6],[50,7]]",
        "output": "[0, 2, 1, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "tasks = [[1,100],[10,100],[20,100],[30,100],[40,100],[50,100],[60,100],[70,100],[80,100],[90,100]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"
      },
      {
        "input": "tasks = [[1,5],[3,3],[5,1],[7,2],[9,4],[11,6],[13,5],[15,3],[17,2],[19,1]]",
        "output": "[0, 2, 3, 1, 4, 7, 9, 8, 6, 5]"
      },
      {
        "input": "tasks = [[1000000000, 1],[1000000000, 1],[1000000000, 1],[1000000000, 1],[1000000000, 1]]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "tasks = [[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,10],[11,1],[21,1],[31,1],[41,1],[51,1],[61,1],[71,1],[81,1],[91,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[10,1],[11,2],[12,3],[13,4],[14,5],[15,6],[16,7],[17,8],[18,9],[19,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,2],[1,2],[1,2],[1,2],[1,2],[2,1],[2,1],[2,1],[2,1],[2,1]]",
        "output": "[0, 5, 6, 7, 8, 9, 1, 2, 3, 4]"
      },
      {
        "input": "tasks = [[1,2],[10,3],[20,4],[30,5],[40,6],[50,7],[60,8],[70,9],[80,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "tasks = [[1,1],[1,10],[1,100],[1,1000],[1,10000],[1,100000],[1,1000000],[1,10000000],[1,100000000],[1,1000000000]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[2,1],[2,1],[2,1],[2,1],[2,1],[2,1],[2,1],[2,1],[2,1],[2,1],[3,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "tasks = [[1,2],[3,1],[5,3],[7,4],[9,2],[11,1],[13,5],[15,3],[17,2],[19,1]]",
        "output": "[0, 1, 2, 3, 5, 4, 7, 8, 9, 6]"
      },
      {
        "input": "tasks = [[9,5],[1,5],[8,5],[3,5],[2,5],[4,5],[6,5],[7,5],[10,5],[11,5]]",
        "output": "[1, 3, 0, 2, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,2],[2,1],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,1],[10,2],[100,3],[1000,4],[10000,5],[100000,6],[1000000,7],[10000000,8],[100000000,9],[1000000000,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[10,3],[20,2],[30,1],[40,4],[50,5],[60,6]]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "tasks = [[1,1],[3,3],[5,5],[7,7],[9,9],[2,2],[4,4],[6,6],[8,8],[10,10]]",
        "output": "[0, 5, 1, 6, 2, 7, 3, 8, 4, 9]"
      },
      {
        "input": "tasks = [[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1]]",
        "output": "[0, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "tasks = [[1,10],[1,9],[1,8],[1,7],[1,6],[1,5],[1,4],[1,3],[1,2],[1,1],[2,10],[2,9],[2,8],[2,7],[2,6],[2,5],[2,4],[2,3],[2,2],[2,1]]",
        "output": "[9, 19, 8, 18, 7, 17, 6, 16, 5, 15, 4, 14, 3, 13, 2, 12, 1, 11, 0, 10]"
      },
      {
        "input": "tasks = [[1,1],[2,1],[3,1],[4,1],[5,1],[1,1],[2,1],[3,1],[4,1],[5,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,1],[3,3],[5,5],[7,7],[9,9],[11,11],[13,13],[15,15],[17,17],[19,19]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,2],[2,4],[3,8],[4,16],[5,32],[6,64],[7,128],[8,256],[9,512],[10,1024]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "tasks = [[1,10],[10,10],[20,10],[30,10],[40,10],[50,10]]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "tasks = [[1,2],[2,1],[1,2],[2,1],[1,2],[2,1],[1,2],[2,1],[1,2],[2,1]]",
        "output": "[0, 1, 3, 5, 7, 9, 2, 4, 6, 8]"
      },
      {
        "input": "tasks = [[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2]]",
        "output": "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]"
      },
      {
        "input": "tasks = [[1,1],[1,1],[1,2],[1,2],[1,3],[1,3],[1,4],[1,4],[1,5],[1,5]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,1],[10,1],[20,1],[30,1],[40,1],[50,1],[60,1],[70,1],[80,1],[90,1],[100,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "tasks = [[1,10],[2,5],[3,15],[4,20],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]]",
        "output": "[0, 4, 5, 6, 7, 8, 9, 1, 2, 3]"
      },
      {
        "input": "tasks = [[1000000000,1000000000],[1000000001,1000000000],[1000000002,1000000000],[1000000003,1000000000],[1000000004,1000000000]]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "tasks = [[1,2],[3,3],[5,2],[7,1],[9,2],[11,3],[13,1],[15,2],[17,3],[19,1],[21,2],[23,3],[25,1],[27,2],[29,3]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "tasks = [[10,1],[20,1],[30,1],[40,1],[50,1],[60,1],[70,1],[80,1],[90,1],[100,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,10],[5,1],[3,2],[2,3],[7,4],[6,5],[8,6],[9,7],[10,8]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "tasks = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[11,1],[12,1],[13,1],[14,1],[15,1]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "tasks = [[1,1000000000],[2,900000000],[3,800000000],[4,700000000],[5,600000000],[6,500000000],[7,400000000],[8,300000000],[9,200000000],[10,100000000]]",
        "output": "[0, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "tasks = [[10,10],[20,5],[30,15],[40,1],[50,20]]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "tasks = [[1,1],[2,1],[1,2],[2,2],[1,3],[2,3],[1,4],[2,4],[1,5],[2,5]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "tasks = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "tasks = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30]]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "tasks = [[1,9],[1,8],[1,7],[1,6],[1,5],[1,4],[1,3],[1,2],[1,1]]",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "tasks = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1],[11,10],[12,9],[13,8],[14,7],[15,6],[16,5],[17,4],[18,3],[19,2],[20,1]]",
        "output": "[0, 9, 8, 7, 6, 19, 18, 17, 16, 5, 15, 4, 14, 3, 13, 2, 12, 1, 11, 10]"
      }
    ]
  },
  {
    "id": 948,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "problemDescription": "You start with an initial power of power, an initial score of 0, and a bag of tokens given as an integer array tokens, where each\u00a0tokens[i] denotes the value of tokeni.\nYour goal is to maximize the total score by strategically playing these tokens. In one move, you can play an unplayed token in one of the two ways (but not both for the same token):\n\nFace-up: If your current power is at least tokens[i], you may play tokeni, losing tokens[i] power and gaining 1 score.\nFace-down: If your current score is at least 1, you may play tokeni, gaining tokens[i] power and losing 1 score.\n\nReturn the maximum possible score you can achieve after playing any number of tokens.\n\u00a0\nExample 1:\n\nInput: tokens = [100], power = 50\nOutput: 0\nExplanation: Since your score is 0 initially, you cannot play the token face-down. You also cannot play it face-up since your power (50) is less than tokens[0]\u00a0(100).\n\nExample 2:\n\nInput: tokens = [200,100], power = 150\nOutput: 1\nExplanation: Play token1 (100) face-up, reducing your power to\u00a050 and increasing your score to\u00a01.\nThere is no need to play token0, since you cannot play it face-up to add to your score. The maximum score achievable is 1.\n\nExample 3:\n\nInput: tokens = [100,200,300,400], power = 200\nOutput: 2\nExplanation: Play the tokens in this order to get a score of 2:\n\nPlay token0 (100) face-up, reducing power to 100 and increasing score to 1.\nPlay token3 (400) face-down, increasing power to 500 and reducing score to 0.\nPlay token1 (200) face-up, reducing power to 300 and increasing score to 1.\nPlay token2 (300) face-up, reducing power to 0 and increasing score to 2.\n\nThe maximum score achievable is 2.\n\n\u00a0\nConstraints:\n\n0 <= tokens.length <= 1000\n0 <= tokens[i], power < 104\n\n",
    "starterCode": "class Solution:\n    def bagOfTokensScore(self, tokens: List[int], power: int) -> int:\n        ",
    "testCases": [
      {
        "input": "tokens = [100,200,300,400], power = 200",
        "output": "2"
      },
      {
        "input": "tokens = [100, 200, 300, 400], power = 100",
        "output": "1"
      },
      {
        "input": "tokens = [71, 55, 82], power = 54",
        "output": "0"
      },
      {
        "input": "tokens = [100,200,300,400], power = 500",
        "output": "2"
      },
      {
        "input": "tokens = [100], power = 50",
        "output": "0"
      },
      {
        "input": "tokens = [], power = 0",
        "output": "0"
      },
      {
        "input": "tokens = [50,50,50,50,50], power = 150",
        "output": "3"
      },
      {
        "input": "tokens = [100,200,300,400,500], power = 250",
        "output": "2"
      },
      {
        "input": "tokens = [50, 100, 150, 200, 250], power = 200",
        "output": "2"
      },
      {
        "input": "tokens = [80,90,95], power = 100",
        "output": "1"
      },
      {
        "input": "tokens = [100, 150, 200, 250, 300], power = 100",
        "output": "1"
      },
      {
        "input": "tokens = [100,200,300,400,500], power = 300",
        "output": "2"
      },
      {
        "input": "tokens = [], power = 1000",
        "output": "0"
      },
      {
        "input": "tokens = [1000,2000,3000,4000], power = 1500",
        "output": "1"
      },
      {
        "input": "tokens = [1, 2, 3, 4, 5], power = 3",
        "output": "2"
      },
      {
        "input": "tokens = [100,200,300,400], power = 300",
        "output": "2"
      },
      {
        "input": "tokens = [200,100], power = 150",
        "output": "1"
      },
      {
        "input": "tokens = [50,100,150,200,250], power = 200",
        "output": "2"
      },
      {
        "input": "tokens = [1,1,1,1,1,1,1,1,1,1], power = 5",
        "output": "5"
      },
      {
        "input": "tokens = [50, 50, 50, 50], power = 150",
        "output": "3"
      },
      {
        "input": "tokens = [71,55,82], power = 54",
        "output": "0"
      },
      {
        "input": "tokens = [500], power = 1000",
        "output": "1"
      },
      {
        "input": "tokens = [200, 100], power = 150",
        "output": "1"
      },
      {
        "input": "tokens = [75,150,225,300,375,450], power = 225",
        "output": "2"
      },
      {
        "input": "tokens = [5,10,15,20], power = 50",
        "output": "4"
      },
      {
        "input": "tokens = [], power = 100",
        "output": "0"
      },
      {
        "input": "tokens = [7, 8, 9, 10, 11], power = 20",
        "output": "2"
      },
      {
        "input": "tokens = [1,1,1,1,1,1,1,1,1,1], power = 0",
        "output": "0"
      },
      {
        "input": "tokens = [100, 100, 100, 100, 100, 100], power = 300",
        "output": "3"
      },
      {
        "input": "tokens = [1, 2, 3, 4, 5], power = 5",
        "output": "3"
      },
      {
        "input": "tokens = [100, 100, 100, 100], power = 300",
        "output": "3"
      },
      {
        "input": "tokens = [100,200,300,400], power = 400",
        "output": "2"
      },
      {
        "input": "tokens = [100, 200, 300, 400], power = 200",
        "output": "2"
      },
      {
        "input": "tokens = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], power = 10",
        "output": "3"
      },
      {
        "input": "tokens = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], power = 250",
        "output": "4"
      },
      {
        "input": "tokens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], power = 1500",
        "output": "16"
      },
      {
        "input": "tokens = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], power = 500",
        "output": "4"
      },
      {
        "input": "tokens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], power = 500",
        "output": "9"
      },
      {
        "input": "tokens = [5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000], power = 1000",
        "output": "8"
      },
      {
        "input": "tokens = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], power = 200",
        "output": "6"
      },
      {
        "input": "tokens = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], power = 30",
        "output": "7"
      },
      {
        "input": "tokens = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], power = 550",
        "output": "4"
      },
      {
        "input": "tokens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], power = 50",
        "output": "4"
      },
      {
        "input": "tokens = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], power = 5000",
        "output": "9"
      },
      {
        "input": "tokens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], power = 10",
        "output": "6"
      },
      {
        "input": "tokens = [25, 50, 75, 100, 125, 150, 175, 200], power = 100",
        "output": "3"
      },
      {
        "input": "tokens = [25, 50, 75, 100, 125, 150, 175, 200, 225, 250], power = 100",
        "output": "4"
      },
      {
        "input": "tokens = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71], power = 100",
        "output": "11"
      },
      {
        "input": "tokens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], power = 1000",
        "output": "14"
      },
      {
        "input": "tokens = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], power = 5",
        "output": "5"
      },
      {
        "input": "tokens = [9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990], power = 10000",
        "output": "1"
      },
      {
        "input": "tokens = [1, 10, 100, 1000, 10000, 100000], power = 50000",
        "output": "5"
      },
      {
        "input": "tokens = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], power = 1500",
        "output": "5"
      },
      {
        "input": "tokens = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], power = 75",
        "output": "9"
      },
      {
        "input": "tokens = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], power = 1000",
        "output": "9"
      },
      {
        "input": "tokens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], power = 100",
        "output": "13"
      },
      {
        "input": "tokens = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105], power = 100",
        "output": "5"
      },
      {
        "input": "tokens = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], power = 1000",
        "output": "5"
      },
      {
        "input": "tokens = [5, 10, 20, 25, 50, 100], power = 55",
        "output": "4"
      },
      {
        "input": "tokens = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], power = 50",
        "output": "4"
      },
      {
        "input": "tokens = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], power = 1024",
        "output": "10"
      },
      {
        "input": "tokens = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], power = 500",
        "output": "5"
      },
      {
        "input": "tokens = [5, 7, 8, 10, 12], power = 15",
        "output": "2"
      },
      {
        "input": "tokens = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], power = 25",
        "output": "5"
      },
      {
        "input": "tokens = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], power = 1000",
        "output": "9"
      },
      {
        "input": "tokens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], power = 10",
        "output": "8"
      },
      {
        "input": "tokens = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], power = 10",
        "output": "5"
      },
      {
        "input": "tokens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], power = 250",
        "output": "6"
      },
      {
        "input": "tokens = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], power = 100",
        "output": "4"
      },
      {
        "input": "tokens = [100, 200, 300, 400, 500], power = 1",
        "output": "0"
      },
      {
        "input": "tokens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], power = 75",
        "output": "6"
      },
      {
        "input": "tokens = [300, 200, 100, 400, 500], power = 250",
        "output": "2"
      },
      {
        "input": "tokens = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50], power = 200",
        "output": "4"
      },
      {
        "input": "tokens = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], power = 10",
        "output": "9"
      },
      {
        "input": "tokens = [500, 400, 300, 200, 100, 50, 25, 10], power = 1000",
        "output": "6"
      },
      {
        "input": "tokens = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], power = 1023",
        "output": "10"
      },
      {
        "input": "tokens = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], power = 500",
        "output": "4"
      },
      {
        "input": "tokens = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75], power = 250",
        "output": "10"
      },
      {
        "input": "tokens = [90, 95, 100, 105, 110, 115, 120, 125, 130, 135], power = 100",
        "output": "1"
      },
      {
        "input": "tokens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], power = 70",
        "output": "6"
      },
      {
        "input": "tokens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], power = 100",
        "output": "6"
      },
      {
        "input": "tokens = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], power = 100",
        "output": "11"
      },
      {
        "input": "tokens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], power = 15",
        "output": "5"
      },
      {
        "input": "tokens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], power = 50",
        "output": "11"
      },
      {
        "input": "tokens = [300, 200, 100, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200], power = 500",
        "output": "5"
      },
      {
        "input": "tokens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], power = 1000",
        "output": "13"
      },
      {
        "input": "tokens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], power = 20",
        "output": "7"
      },
      {
        "input": "tokens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], power = 10",
        "output": "4"
      },
      {
        "input": "tokens = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], power = 200",
        "output": "10"
      },
      {
        "input": "tokens = [1, 10, 100, 1000, 10000], power = 5000",
        "output": "4"
      },
      {
        "input": "tokens = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], power = 10",
        "output": "4"
      },
      {
        "input": "tokens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], power = 100",
        "output": "14"
      },
      {
        "input": "tokens = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], power = 100",
        "output": "6"
      },
      {
        "input": "tokens = [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], power = 100",
        "output": "1"
      },
      {
        "input": "tokens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], power = 150",
        "output": "5"
      },
      {
        "input": "tokens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], power = 5",
        "output": "4"
      },
      {
        "input": "tokens = [300, 200, 400, 100, 500], power = 250",
        "output": "2"
      },
      {
        "input": "tokens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], power = 25",
        "output": "6"
      },
      {
        "input": "tokens = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], power = 300",
        "output": "4"
      },
      {
        "input": "tokens = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], power = 15",
        "output": "6"
      },
      {
        "input": "tokens = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50], power = 200",
        "output": "4"
      },
      {
        "input": "tokens = [500, 200, 300, 100, 400, 600, 700, 800, 900, 1000], power = 400",
        "output": "4"
      },
      {
        "input": "tokens = [300, 200, 100, 400, 500, 600], power = 350",
        "output": "2"
      }
    ]
  },
  {
    "id": 2,
    "difficulty": "Medium",
    "tags": [
      "Recursion",
      "Linked List",
      "Math"
    ],
    "problemDescription": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\u00a0as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\u00a0\nExample 1:\n\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n\nExample 2:\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\nExample 3:\n\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n\n\u00a0\nConstraints:\n\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "l1 = [9,8,7], l2 = [1,2,3]",
        "output": "[0, 1, 1, 1]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], l2 = [5,6,4]",
        "output": "[6, 6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [5,6,4]",
        "output": "[6, 6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [2,4,3], l2 = [5,6,4,1]",
        "output": "[7, 0, 8, 1]"
      },
      {
        "input": "l1 = [1,2,3,4,5], l2 = [9,8,7,6,5]",
        "output": "[0, 1, 1, 1, 1, 1]"
      },
      {
        "input": "l1 = [1], l2 = [9,9,9,9,9,9,9,9,9,9]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [5,5,5], l2 = [5,5,5,5,5]",
        "output": "[0, 1, 1, 6, 5]"
      },
      {
        "input": "l1 = [9, 9, 9, 9, 9, 9, 9], l2 = [9, 9, 9, 9]",
        "output": "[8, 9, 9, 9, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9,9,9,9], l2 = [1]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [1], l2 = [9,9]",
        "output": "[0, 0, 1]"
      },
      {
        "input": "l1 = [1,0,0,0,0], l2 = [9,9,9,9]",
        "output": "[0, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [9,8,7,6,5,4,3,2,1], l2 = [1,2,3,4,5,6,7,8,9]",
        "output": "[0, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "l1 = [1,8,9], l2 = [0,0,9]",
        "output": "[1, 8, 8, 1]"
      },
      {
        "input": "l1 = [2, 4, 3], l2 = [5, 6, 4]",
        "output": "[7, 0, 8]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [5,6,4]",
        "output": "[6, 6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [2,4,6], l2 = [1,3,5]",
        "output": "[3, 7, 1, 1]"
      },
      {
        "input": "l1 = [1,1,1], l2 = [9,9,9]",
        "output": "[0, 1, 1, 1]"
      },
      {
        "input": "l1 = [1, 8], l2 = [0]",
        "output": "[1, 8]"
      },
      {
        "input": "l1 = [1,8], l2 = [0]",
        "output": "[1, 8]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], l2 = [4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5]",
        "output": "[5, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "l1 = [1,8,9], l2 = [9,1]",
        "output": "[0, 0, 0, 1]"
      },
      {
        "input": "l1 = [7,2,4,3], l2 = [5,6,4]",
        "output": "[2, 9, 8, 3]"
      },
      {
        "input": "l1 = [1], l2 = [1,2,3,4,5]",
        "output": "[2, 2, 3, 4, 5]"
      },
      {
        "input": "l1 = [1], l2 = [9,9,9,9,9,9,9,9,9]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [6,4,5], l2 = [0,4,5]",
        "output": "[6, 8, 0, 1]"
      },
      {
        "input": "l1 = [5], l2 = [5]",
        "output": "[0, 1]"
      },
      {
        "input": "l1 = [7,2,4,3], l2 = [5,6,4,2]",
        "output": "[2, 9, 8, 5]"
      },
      {
        "input": "l1 = [1,2], l2 = [3,4,5,6]",
        "output": "[4, 6, 5, 6]"
      },
      {
        "input": "l1 = [9,9,9], l2 = [1]",
        "output": "[0, 0, 0, 1]"
      },
      {
        "input": "l1 = [9,9], l2 = [1]",
        "output": "[0, 0, 1]"
      },
      {
        "input": "l1 = [1], l2 = [9,9,9,9,9,9,9,9]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [1], l2 = [9]",
        "output": "[0, 1]"
      },
      {
        "input": "l1 = [1,2,3], l2 = [9,8,7]",
        "output": "[0, 1, 1, 1]"
      },
      {
        "input": "l1 = [1,2,3], l2 = [7,8,9]",
        "output": "[8, 0, 3, 1]"
      },
      {
        "input": "l1 = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], l2 = [5, 6, 4]",
        "output": "[6, 6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [1,1,1,1,1,1,1,1,1,1], l2 = [9,9,9,9,9,9,9,9,9,9]",
        "output": "[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "l1 = [1,2,3], l2 = [4,5,6]",
        "output": "[5, 7, 9]"
      },
      {
        "input": "l1 = [1,2,3,4,5], l2 = [5,4,3,2,1]",
        "output": "[6, 6, 6, 6, 6]"
      },
      {
        "input": "l1 = [0,0,1], l2 = [0,0,1]",
        "output": "[0, 0, 2]"
      },
      {
        "input": "l1 = [9,9], l2 = [1,1,1]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "l1 = [6,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [3,4,2]",
        "output": "[9, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [9], l2 = [1]",
        "output": "[0, 1]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0], l2 = [1]",
        "output": "[2, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "l1 = [1, 2, 3], l2 = [4, 5, 6]",
        "output": "[5, 7, 9]"
      },
      {
        "input": "l1 = [1,8,9], l2 = [2,5,8]",
        "output": "[3, 3, 8, 1]"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]",
        "output": "[8, 9, 9, 9, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [3,2,1], l2 = [9,8,7]",
        "output": "[2, 1, 9]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [5,6,4]",
        "output": "[6, 6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], l2 = [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6]",
        "output": "[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7]"
      },
      {
        "input": "l1 = [1,2,3,4,5], l2 = [1,2,3,4,5]",
        "output": "[2, 4, 6, 8, 0, 1]"
      },
      {
        "input": "l1 = [0], l2 = [0]",
        "output": "[0]"
      },
      {
        "input": "l1 = [2,4,9], l2 = [5,6,4,9]",
        "output": "[7, 0, 4, 0, 1]"
      },
      {
        "input": "l1 = [2,4,3], l2 = [5,6,4]",
        "output": "[7, 0, 8]"
      },
      {
        "input": "l1 = [2,4,3,2,5,5,5], l2 = [5,6,4]",
        "output": "[7, 0, 8, 2, 5, 5, 5]"
      },
      {
        "input": "l1 = [1,0,0,0,0], l2 = [9,9,9,9,9]",
        "output": "[0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [2,4,6,8], l2 = [1,3,5,7]",
        "output": "[3, 7, 1, 6, 1]"
      },
      {
        "input": "l1 = [9], l2 = [1,9,9,9,9,9,9,9,9,9]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "l1 = [0,1], l2 = [0,1]",
        "output": "[0, 2]"
      },
      {
        "input": "l1 = [7,1,6], l2 = [5,9,2]",
        "output": "[2, 1, 9]"
      }
    ]
  },
  {
    "id": 1609,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "A binary tree is named Even-Odd if it meets the following conditions:\n\nThe root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.\nFor every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).\nFor every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).\n\nGiven the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.\n\u00a0\nExample 1:\n\n\nInput: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]\nOutput: true\nExplanation: The node values on each level are:\nLevel 0: [1]\nLevel 1: [10,4]\nLevel 2: [3,7,9]\nLevel 3: [12,8,6,2]\nSince levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.\n\nExample 2:\n\n\nInput: root = [5,4,2,3,3,7]\nOutput: false\nExplanation: The node values on each level are:\nLevel 0: [5]\nLevel 1: [4,2]\nLevel 2: [3,3,7]\nNode values in level 2 must be in strictly increasing order, so the tree is not Even-Odd.\n\nExample 3:\n\n\nInput: root = [5,9,1,3,5,7]\nOutput: false\nExplanation: Node values in the level 1 should be even integers.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 105].\n1 <= Node.val <= 106\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isEvenOddTree(self, root: Optional[TreeNode]) -> bool:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3]",
        "output": "False"
      },
      {
        "input": "root = [2,1,3,4,7,6,8,null,null,null,null,9]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2]",
        "output": "True"
      },
      {
        "input": "root = [5,4,2,3,3,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,null,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6]",
        "output": "False"
      },
      {
        "input": "root = [1,3,5,7,9]",
        "output": "False"
      },
      {
        "input": "root = [2,2,2]",
        "output": "False"
      },
      {
        "input": "root = [2,1,3,4,7,6,8]",
        "output": "False"
      },
      {
        "input": "root = [5,9,1,3,5,7]",
        "output": "False"
      },
      {
        "input": "root = [2,1,3,4,7,6,8,null,null,null,null,null,null,9]",
        "output": "False"
      },
      {
        "input": "root = [1]",
        "output": "True"
      },
      {
        "input": "root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17]",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,15,14]",
        "output": "False"
      },
      {
        "input": "root = [1,10,5,3,8,null,7,null,4,null,null,2,6,9,11]",
        "output": "False"
      },
      {
        "input": "root = [10,9,8,7,6,5,4,3,2,1]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,21]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,18,null,null,null,null,null,null,20,null,null,21,null,22,null,null,23]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,18,null,null,null,null,null,null,null,null,19,null,null,null,null,20]",
        "output": "False"
      },
      {
        "input": "root = [5,2,8,null,11,null,21,null,35,18,null,null,47,null,53,27,null,65]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,6,8,9,11,13,12,14]",
        "output": "False"
      },
      {
        "input": "root = [10,9,10,5,7,8,9,2,4,6,8,10,12,14,16,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47]",
        "output": "False"
      },
      {
        "input": "root = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,2,9,8,6,12,13,15,17,19,21,23]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,14,16,13,11,15,null,null,18,17,null,null,19,null,null,20]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,2,9,8,6,12,null,null,null,null,13]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,2,9,8,6,12,13,15]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,14,13,11,null,null,15,17,18]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,null,null,5,null,null,11,null,null,13,null,null,15]",
        "output": "False"
      },
      {
        "input": "root = [1,8,6,3,5,7,9,2,4,6,8,10,12,14,16]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,11,15,null,5]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,6,1,8,9,10,11,12,13,14]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,16,17,18,19,20,21,22]",
        "output": "False"
      },
      {
        "input": "root = [5,9,1,3,5,7,null,null,8,6,null,10,11,12,null,14,null,null,null,13]",
        "output": "False"
      },
      {
        "input": "root = [2,6,10,4,8,12,16,2,4,6,8,10,12,14,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,14,16,13,11,15,null,null,18,17,null,null,19]",
        "output": "False"
      },
      {
        "input": "root = [11,6,8,9,5,14,7,12,null,9,15,null,null,null,1,null,null,13,null,null,10]",
        "output": "False"
      },
      {
        "input": "root = [1,3,2,4,6,5,null,null,null,null,null,null,7]",
        "output": "False"
      },
      {
        "input": "root = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,null,7,8,9,10,11,12,13,14,15]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,11,null,5]",
        "output": "False"
      },
      {
        "input": "root = [3,12,8,10,14,2,13,7,12,null,6,14,9,14,9,14,null,null,12,null,13,13,7,12,null,12,13,null,null,null,10,null,6,null,null,null,null,null,null,10,null,14,9,3,null,13,13,null,null,null,12,null,null,null,14,null,null,null,null,null,null,14]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,11,null,null,null,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,16]",
        "output": "False"
      },
      {
        "input": "root = [7,4,9,6,5,8,3,1,null,2,6,4,5,null,null,null,null,null,9,3]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,11,null,16,5]",
        "output": "False"
      },
      {
        "input": "root = [9,14,4,14,2,9,5,null,null,6,null,null,12,null,null,14,null,7,10]",
        "output": "False"
      },
      {
        "input": "root = [2,8,6,10,4,3,7,1,9,5,6,12,null,11,null,null,null,null,null,null,null,13]",
        "output": "False"
      },
      {
        "input": "root = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51]",
        "output": "False"
      },
      {
        "input": "root = [5,9,1,3,5,7,null,null,8,6,null,10,11,12,null,null,null,null,13]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,5,null,null,11,14,null,null,13,null,null,15]",
        "output": "False"
      },
      {
        "input": "root = [2,1,3,4,7,6,8,null,null,null,null,9,10,11,12]",
        "output": "False"
      },
      {
        "input": "root = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53]",
        "output": "False"
      },
      {
        "input": "root = [1,8,6,null,9,2,5,null,11,null,null,null,7]",
        "output": "False"
      },
      {
        "input": "root = [1,3,2,5,7,6,8,9,11,13,15,14,12,10,8]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,null,null,7,8,9,null,11,null,13,null,null,17,null,null,19]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,18,null,null,null,null,null,null,20,null,null,21,null,22,null,null,24]",
        "output": "False"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5]",
        "output": "True"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,5,null,null,11]",
        "output": "True"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,8,6,4,2,null,9,11,13,15,17,19,21,23,25]",
        "output": "False"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5]",
        "output": "True"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,2,9,8,6,12,13,15,17,19,21]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "False"
      },
      {
        "input": "root = [2,6,1,3,5,7,11,13,17,19,23,29,31,37,41]",
        "output": "False"
      },
      {
        "input": "root = [5,8,6,3,5,7,8,1,6,null,10,9,null,null,11,null,null,12,null,null,13,null,null,14,null,null,15,null,null,16]",
        "output": "False"
      },
      {
        "input": "root = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,11,null,null,5,null]",
        "output": "False"
      },
      {
        "input": "root = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,2,9,8,6,12,null,null,null,13]",
        "output": "False"
      },
      {
        "input": "root = [3,5,9,7,11,13,17,19,23,27,29,31,35,37,39,41,43,47,51,53,57,59]",
        "output": "False"
      },
      {
        "input": "root = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,16]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,2,9,8,6,12,13]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,8,7,9,12,8,6,11,null,null,2,5]",
        "output": "False"
      },
      {
        "input": "root = [8,6,10,5,3,7,9,2,null,null,6,null,null,11,null,null,2,5,12,11,10]",
        "output": "False"
      },
      {
        "input": "root = [15,9,11,7,13,17,19,3,5,12,14,18,20,null,null,null,null,10]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,11,null,15,null,5]",
        "output": "False"
      },
      {
        "input": "root = [2,1,3,4,7,6,8,null,null,9,10,null,null,11,12,null,null,13,14]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,2,9,8,6,12]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,9,null,11,13,null,15]",
        "output": "False"
      },
      {
        "input": "root = [7,4,6,1,null,null,8,null,1,null,3,5,9]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,1,6,null,8,4,5,null,null,null,null,null,9,10]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,18,null,null,null,null,null,null,20,null,null,21,null,22,null,null,25]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,14,13,11,null,null,15]",
        "output": "False"
      },
      {
        "input": "root = [7,6,5,4,3,2,1,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,null,null,8,6,null,9,null,null,null,null,10]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,2,9,8,6,12,null,null,13]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,26,null,null,null,null,null,null,null,27]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,16,null,null,null,null,null,null,null,null,17]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,null,null,11,null,5]",
        "output": "False"
      },
      {
        "input": "root = [1,8,6,null,9,2,5,null,null,null,null,null,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,null,7,null,9,null,11,null,13,null,15,null,17,null,19]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,8,9,null,11,null,13,null,15,null,17,null,19]",
        "output": "False"
      },
      {
        "input": "root = [31,15,16,7,9,11,13,3,5,6,8,10,12,14,18,1,2,4,null,null,null,null,null,null,null,null,null,null,null,null,null,null,25,null,null,null,null,null,null,null,null,null,null]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,14,16,13,11,15,null,null,18,17]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,14,13,11,null,null,15,17,18,20]",
        "output": "False"
      },
      {
        "input": "root = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,4,5,6,null,null,7,8,9,10,null,null,11,12,13,14]",
        "output": "False"
      },
      {
        "input": "root = [7,10,5,1,1,null,6,null,null,3,8,2,4,null,null,null,9]",
        "output": "False"
      },
      {
        "input": "root = [1,3,2,4,6,5,null,null,null,null,null,8,null,7]",
        "output": "False"
      },
      {
        "input": "root = [1,14,3,7,null,7,9,12,8,6,null,10,null,null,null,null,11]",
        "output": "False"
      },
      {
        "input": "root = [5,8,6,12,4,null,10,null,2,0,3,9,7,5,6]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,null,null,14,16,null,13,null,11,null,15,null,null,18,17]",
        "output": "False"
      },
      {
        "input": "root = [2,3,4,5,6,7,8,null,null,9,10,null,null,11,12,null,null,13,14,null,null,15,16,null,null,17,18]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,5,null,7,null,9,null,11]",
        "output": "False"
      },
      {
        "input": "root = [5,9,1,3,5,7,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,8,1,1,6,6,9,10,null,null,null,null,null,null,11,12]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,5,null,null,10]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,6,1,null,8,9,10,11,12,13]",
        "output": "False"
      },
      {
        "input": "root = [5,9,1,3,5,7,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,16,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,11,null,13,null,null,17,null,null,19]",
        "output": "False"
      },
      {
        "input": "root = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,8,1,6,null,10,9,null,null,11,null,null,12,13]",
        "output": "False"
      },
      {
        "input": "root = [11,13,12,14,15,16,17,18,19,20,21,22,23,24,25,null,null,26,27,28,29,30,31,32,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,33]",
        "output": "False"
      },
      {
        "input": "root = [15,20,17,12,8,13,11,7,5,6,14,4,3,10,2,1,18,16,9,19]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,14,13,11,null,null,15,17,18,20,22,24,26,28,30,32,34]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,5,null,null,null,11]",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,18,null,19,null,null,22,null,null,23,null,null,26,null,null,27]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,2,9,8,6,12,13,15,17,19]",
        "output": "False"
      },
      {
        "input": "root = [11,6,10,8,6,6,6,10,8,2,4,null,null,10,1,null,null,6,2,4,8,null,10,6,2,6,4,8,null,4,null,null,4,null,8,10,null,6,null,null,null,null,4,8,null,6,null,2,10,6,null,null,10,null,null,null,null,null,null,6,null,null,null,null,null,null,null,null,null,null,null,null,10]",
        "output": "False"
      },
      {
        "input": "root = [1,8,6,3,5,7,9,2,4,null,6,null,8,null,null,null,null,null,10]",
        "output": "False"
      },
      {
        "input": "root = [3,12,8,10,14,9,5,11,13,null,null,4,6,null,null,2,7,null,null,15,null,1,16]",
        "output": "False"
      },
      {
        "input": "root = [5,9,1,3,5,7,6,2,4,8,10,12,14,16,18]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,11,14,null,5]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,2,9,8,6,12,13,15,17]",
        "output": "False"
      },
      {
        "input": "root = [1,10,4,3,null,7,9,12,8,6,null,null,2,5,null,null,null,null,11]",
        "output": "True"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,2,9,8,6,12,13,15,17,19,21,23,25]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,10,1,null,null,6,8,9,12]",
        "output": "False"
      },
      {
        "input": "root = [5,4,2,3,3,7,8,6,5,4,3,2,1]",
        "output": "False"
      }
    ]
  },
  {
    "id": 990,
    "difficulty": "Medium",
    "tags": [
      "Union Find",
      "Graph",
      "Array",
      "String"
    ],
    "problemDescription": "You are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: \"xi==yi\" or \"xi!=yi\".Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.\nReturn true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.\n\u00a0\nExample 1:\n\nInput: equations = [\"a==b\",\"b!=a\"]\nOutput: false\nExplanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations.\n\nExample 2:\n\nInput: equations = [\"b==a\",\"a==b\"]\nOutput: true\nExplanation: We could assign a = 1 and b = 1 to satisfy both equations.\n\n\u00a0\nConstraints:\n\n1 <= equations.length <= 500\nequations[i].length == 4\nequations[i][0] is a lowercase letter.\nequations[i][1] is either '=' or '!'.\nequations[i][2] is '='.\nequations[i][3] is a lowercase letter.\n\n",
    "starterCode": "class Solution:\n    def equationsPossible(self, equations: List[str]) -> bool:\n        ",
    "testCases": [
      {
        "input": "equations = [\"a!=a\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"c==d\",\"e==f\",\"g==h\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"c==c\",\"b==d\",\"x!=z\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"a!=c\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==a\",\"b==b\",\"c==c\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b!=a\",\"a==c\",\"c==b\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a!=b\",\"b!=c\",\"c!=a\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a!=b\",\"b!=c\",\"a!=c\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b!=c\",\"c==a\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"b==a\",\"a==b\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"f==g\",\"g==f\",\"f!=g\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b!=a\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"a==c\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==a\",\"a!=b\",\"b!=c\",\"c!=a\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\", \"b!=c\", \"c!=d\", \"d!=e\", \"e!=f\", \"f!=g\", \"g!=h\", \"h!=i\", \"i!=j\", \"j!=k\", \"k!=l\", \"l!=m\", \"m!=n\", \"n!=o\", \"o!=p\", \"p!=q\", \"q!=r\", \"r!=s\", \"s!=t\", \"t!=u\", \"u!=v\", \"v!=w\", \"w!=x\", \"x!=y\", \"y!=z\", \"z==a\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"p!=q\",\"q!=r\",\"r!=s\",\"s!=t\",\"t!=u\",\"u!=v\",\"v!=w\",\"w!=x\",\"x!=y\",\"y!=z\",\"z!=a\",\"a!=b\",\"b!=c\",\"c!=d\",\"d!=e\",\"e!=f\",\"f!=g\",\"g!=h\",\"h!=i\",\"i!=j\",\"j!=k\",\"k!=l\",\"l!=m\",\"m!=n\",\"n!=o\",\"o!=p\",\"p!=q\",\"q!=r\",\"r!=s\",\"s!=t\",\"t!=u\",\"u!=v\",\"v!=w\",\"w!=x\",\"x!=y\",\"y!=z\",\"z!=a\",\"a!=b\",\"b!=c\",\"c!=d\",\"d!=e\",\"e!=f\",\"f!=g\",\"g!=h\",\"h!=i\",\"i!=j\",\"j!=k\",\"k!=l\",\"l!=m\",\"m!=n\",\"n!=o\",\"o!=p\",\"p!=q\",\"q!=r\",\"r!=s\",\"s!=t\",\"t!=u\",\"u!=v\",\"v!=w\",\"w!=x\",\"x!=y\",\"y!=z\",\"z!=a\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"x==y\",\"y==z\",\"z==w\",\"w==x\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c!=a\",\"a==d\",\"d!=b\",\"b!=c\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==a\",\"e==f\",\"f!=g\",\"g==h\",\"h==i\",\"i!=j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n!=o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s!=t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x!=y\",\"y!=z\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"x==y\", \"y==z\", \"z==w\", \"w==x\", \"x!=y\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\", \"b==c\", \"c!=d\", \"d==e\", \"e==f\", \"f!=g\", \"g==h\", \"h==i\", \"i==j\", \"j!=k\", \"k==l\", \"l==m\", \"m==n\", \"n!=o\", \"o==p\", \"p==q\", \"q==r\", \"r==s\", \"s==t\", \"t==u\", \"u==v\", \"v==w\", \"w==x\", \"x==y\", \"y==z\", \"z!=a\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"x==y\",\"y==z\",\"z==w\",\"w!=x\",\"p==q\",\"q==r\",\"r!=s\",\"s==t\",\"t!=u\",\"u==v\",\"v!=w\",\"w==x\",\"x==y\",\"y!=z\",\"z==a\",\"a==b\",\"b!=c\",\"c==d\",\"d!=e\",\"e==f\",\"f!=g\",\"g==h\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"x==y\",\"y==z\",\"z==x\",\"x!=y\",\"y!=z\",\"z!=x\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==a\",\"a!=g\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==m\",\"m!=n\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c!=d\",\"d!=e\",\"e==f\",\"f==g\",\"g!=h\",\"h!=i\",\"i==j\",\"j==k\",\"k!=l\",\"l!=m\",\"m==n\",\"n==o\",\"o!=p\",\"p!=q\",\"q==r\",\"r==s\",\"s!=t\",\"t!=u\",\"u==v\",\"v==w\",\"w!=x\",\"x!=y\",\"y==z\",\"z!=a\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"x==y\", \"y==z\", \"x!=z\", \"w==x\", \"w==y\", \"w!=z\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==a\",\"c!=d\",\"d!=c\",\"e==f\",\"f!=e\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\", \"b==c\", \"c==d\", \"d==e\", \"e==f\", \"f==g\", \"g==h\", \"h==i\", \"i==j\", \"j==k\", \"k==l\", \"l==m\", \"m==n\", \"n==o\", \"o==p\", \"p==q\", \"q==r\", \"r==s\", \"s==t\", \"t==u\", \"u==v\", \"v==w\", \"w==x\", \"x==y\", \"y==z\", \"z!=a\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==p\",\"p!=r\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c!=d\",\"d==e\",\"e==f\",\"f!=g\",\"g==h\",\"h!=i\",\"i==j\",\"j!=k\",\"k==l\",\"l!=m\",\"m==n\",\"n!=o\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a!=b\",\"b!=c\",\"c!=d\",\"d!=e\",\"e!=f\",\"f!=g\",\"g!=h\",\"h!=i\",\"i!=j\",\"j!=k\",\"k!=l\",\"l!=m\",\"m!=n\",\"n!=o\",\"o!=p\",\"p!=q\",\"q!=r\",\"r!=s\",\"s!=t\",\"t!=u\",\"u!=v\",\"v!=w\",\"w!=x\",\"x!=y\",\"y!=z\",\"z!=a\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"a==c\",\"a!=b\",\"b!=c\",\"a!=c\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"a!=d\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"x==y\",\"y==z\",\"z==x\",\"u==v\",\"v==w\",\"w==u\",\"x!=u\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"p==q\",\"q!=r\",\"r==s\",\"s!=t\",\"t==u\",\"u==p\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a==b\",\"b==a\",\"c==d\",\"d==c\",\"e==f\",\"f==e\",\"g==h\",\"h==g\",\"i==j\",\"j==i\",\"k==l\",\"l==k\",\"m==n\",\"n==m\",\"o==p\",\"p==o\",\"q==r\",\"r==q\",\"s==t\",\"t==s\",\"u==v\",\"v==u\",\"w==x\",\"x==w\",\"y==z\",\"z==y\",\"a!=a\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a!=b\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c!=d\",\"d==e\",\"e==f\",\"f!=g\",\"g==h\",\"h==i\",\"i!=j\",\"j==k\",\"k==l\",\"l!=m\",\"m==n\",\"n==o\",\"o!=p\",\"p==q\",\"q==r\",\"r!=s\",\"s==t\",\"t==u\",\"u!=v\",\"v==w\",\"w==x\",\"x!=y\",\"y==z\",\"z!=a\",\"a==b\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a!=b\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\", \"b==c\", \"c!=d\", \"d==e\", \"e==f\", \"f!=a\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"a!=d\",\"b!=c\",\"d!=a\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"x==y\",\"y==z\",\"z==w\",\"w!=x\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\", \"b==c\", \"c==a\", \"a==d\", \"d==e\", \"e==f\", \"f==a\", \"a!=b\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a!=c\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"p==q\",\"q==r\",\"r==s\",\"s==p\",\"p!=q\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"p==q\", \"q==r\", \"r==s\", \"s==p\", \"p!=q\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\", \"b==c\", \"a!=c\", \"d==e\", \"e==f\", \"d!=f\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==a\",\"a==d\",\"b==e\",\"c==f\",\"d==e\",\"e==f\",\"f==d\",\"a!=d\",\"b!=e\",\"c!=f\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==p\",\"p!=q\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\", \"b==c\", \"c==d\", \"a!=d\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"x1==y1\",\"y1==z1\",\"z1==w1\",\"w1!=x1\",\"a2==b2\",\"b2==c2\",\"c2==d2\",\"d2==e2\",\"e2!=f2\",\"g3==h3\",\"h3==i3\",\"i3==j3\",\"j3!=k3\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a==b\",\"b==m\",\"m!=n\",\"n!=o\",\"o!=p\",\"p!=q\",\"q!=r\",\"r!=s\",\"s!=t\",\"t!=u\",\"u!=v\",\"v!=w\",\"w!=x\",\"x!=y\",\"y!=z\",\"z!=a\",\"a!=b\",\"b!=m\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b!=c\",\"c==d\",\"d!=e\",\"e==f\",\"f==g\",\"g!=h\",\"h==i\",\"i!=j\",\"j==k\",\"k!=l\",\"l==m\",\"m==n\",\"n!=o\",\"o==p\",\"p!=q\",\"q==r\",\"r==s\",\"s!=t\",\"t==u\",\"u!=v\",\"v==w\",\"w==x\",\"x!=y\",\"y==z\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"x==y\",\"y==z\",\"z==w\",\"w==x\",\"x!=y\",\"y!=z\",\"z!=w\",\"w!=x\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"x==y\",\"y==z\",\"z==x\",\"x!=y\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c!=a\",\"d==e\",\"e==f\",\"f!=d\",\"g==h\",\"h==i\",\"i!=g\",\"j==k\",\"k==l\",\"l!=j\",\"m==n\",\"n==o\",\"o!=m\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c!=d\",\"d==e\",\"e==f\",\"f!=g\",\"g==h\",\"h!=i\",\"i==j\",\"j!=k\",\"k==l\",\"l!=m\",\"m==n\",\"n==o\",\"o!=p\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==a\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\", \"b==c\", \"c==a\", \"a!=d\", \"d!=e\", \"e!=f\", \"f!=a\", \"a==b\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"a!=d\",\"b==e\",\"e!=f\",\"f==g\",\"g!=h\",\"h==i\",\"i!=j\",\"j==k\",\"k!=l\",\"l!=m\",\"m!=n\",\"n!=o\",\"o!=p\",\"p!=a\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==a\",\"a!=b\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==a\",\"c==d\",\"d==c\",\"e==f\",\"f==e\",\"g==h\",\"h==g\",\"i==j\",\"j==i\",\"k==l\",\"l==k\",\"m==n\",\"n==m\",\"o==p\",\"p==o\",\"q==r\",\"r==q\",\"s==t\",\"t==s\",\"u==v\",\"v==u\",\"w==x\",\"x==w\",\"y==z\",\"z==y\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"m==n\", \"n==o\", \"o==p\", \"p==q\", \"q==r\", \"r==s\", \"s==m\", \"m!=n\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"a==d\",\"a!=d\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==a\",\"a!=b\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"x==y\",\"y==z\",\"z!=x\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"x==y\",\"y==z\",\"z==w\",\"w==v\",\"v==u\",\"u==x\",\"x!=y\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"m==n\",\"n==o\",\"o!=p\",\"p==q\",\"q==r\",\"r!=s\",\"s==t\",\"t==u\",\"u==v\",\"v!=w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a==b\",\"b!=c\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c!=a\",\"d==e\",\"e==f\",\"f!=d\",\"g==h\",\"h==i\",\"i!=g\",\"j==k\",\"k==l\",\"l!=j\",\"m==n\",\"n==o\",\"o!=m\",\"p==q\",\"q==r\",\"r!=p\",\"s==t\",\"t==u\",\"u!=s\",\"v==w\",\"w==x\",\"x!=v\",\"y==z\",\"z==a\",\"a!=y\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e==f\",\"f==g\",\"g==h\",\"h==i\",\"i==j\",\"j==k\",\"k==l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\",\"a!=b\",\"b!=c\",\"c!=d\",\"d!=e\",\"e!=f\",\"f!=g\",\"g!=h\",\"h!=i\",\"i!=j\",\"j!=k\",\"k!=l\",\"l!=m\",\"m!=n\",\"n!=o\",\"o!=p\",\"p!=q\",\"q!=r\",\"r!=s\",\"s!=t\",\"t!=u\",\"u!=v\",\"v!=w\",\"w!=x\",\"x!=y\",\"y!=z\",\"z!=a\",\"a!=b\",\"b!=c\",\"c!=d\",\"d!=e\",\"e!=f\",\"f!=g\",\"g!=h\",\"h!=i\",\"i!=j\",\"j!=k\",\"k!=l\",\"l!=m\",\"m!=n\",\"n!=o\",\"o!=p\",\"p!=q\",\"q!=r\",\"r!=s\",\"s!=t\",\"t!=u\",\"u!=v\",\"v!=w\",\"w!=x\",\"x!=y\",\"y!=z\",\"z!=a\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"m==n\",\"n==o\",\"o!=p\",\"p!=q\",\"q==r\",\"r==s\",\"s!=t\",\"t!=u\",\"u==v\",\"v==w\",\"w!=x\",\"x!=y\",\"y==z\",\"z==a\",\"a!=b\",\"b!=c\",\"c!=d\",\"d!=e\",\"e!=f\",\"f!=g\",\"g!=h\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==d\",\"d==e\",\"e!=f\",\"f!=g\",\"g!=h\",\"h!=i\",\"i!=j\",\"j!=k\",\"k!=l\",\"l==m\",\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==a\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==p\",\"p!=t\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\", \"b==c\", \"c==d\", \"d==e\", \"e==f\", \"f==g\", \"g==h\", \"h==i\", \"i==j\", \"j==k\", \"k==l\", \"l==m\", \"m==n\", \"n==o\", \"o==p\", \"p==q\", \"q==r\", \"r==s\", \"s==t\", \"t==u\", \"u==v\", \"v==w\", \"w==x\", \"x==y\", \"y==z\", \"z==a\", \"a!=b\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==a\",\"a!=d\",\"d!=e\",\"e!=a\"]",
        "output": "True"
      },
      {
        "input": "equations = [\"a==b\",\"b==c\",\"c==a\",\"a!=b\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"p==q\", \"q==r\", \"r==s\", \"s==t\", \"t==p\", \"p!=q\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"m==n\", \"n==o\", \"o==p\", \"p==q\", \"q==r\", \"r==s\", \"s==t\", \"t==u\", \"u==v\", \"v==w\", \"w==x\", \"x==y\", \"y==z\", \"z==m\", \"m!=n\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==u\",\"u==v\",\"v==w\",\"w==x\",\"x==y\",\"y==z\",\"z==m\",\"m!=n\"]",
        "output": "False"
      },
      {
        "input": "equations = [\"m==n\",\"n==o\",\"o==p\",\"p==q\",\"q==r\",\"r==s\",\"s==t\",\"t==m\",\"m!=o\"]",
        "output": "False"
      }
    ]
  },
  {
    "id": 562,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "problemDescription": "Given an m x n binary matrix mat, return the length of the longest line of consecutive one in the matrix.\nThe line could be horizontal, vertical, diagonal, or anti-diagonal.\n\u00a0\nExample 1:\n\n\nInput: mat = [[0,1,1,0],[0,1,1,0],[0,0,0,1]]\nOutput: 3\n\nExample 2:\n\n\nInput: mat = [[1,1,1,1],[0,1,1,0],[0,0,0,1]]\nOutput: 4\n\n\u00a0\nConstraints:\n\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 104\n1 <= m * n <= 104\nmat[i][j] is either 0 or 1.\n\n",
    "starterCode": "class Solution:\n    def longestLine(self, mat: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "mat = [[1,0,0,1],[0,1,1,0],[0,0,0,1]]",
        "output": "2"
      },
      {
        "input": "mat = [[1,1,1,1],[1,1,1,1],[1,1,1,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[0,0,0,0],[0,0,0,0],[0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "mat = [[1,1,1],[1,1,1],[1,1,1]]",
        "output": "3"
      },
      {
        "input": "mat = [[0,1,1,0],[0,1,1,0],[0,0,0,1]]",
        "output": "3"
      },
      {
        "input": "mat = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "mat = [[1,1,0,0],[0,0,1,1],[1,0,1,0],[0,1,0,1]]",
        "output": "3"
      },
      {
        "input": "mat = [[1,1,0,0],[0,0,1,1],[0,0,0,0]]",
        "output": "2"
      },
      {
        "input": "mat = [[1,0,0,1],[0,1,1,0],[0,1,1,0],[1,0,0,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[0,0,0],[0,0,0],[0,0,0]]",
        "output": "0"
      },
      {
        "input": "mat = [[1,1,1,1],[0,1,1,0],[0,0,0,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,1],[1,0,1,1,1,1,1,1,0,1],[1,0,1,0,0,0,0,1,0,1],[1,0,1,0,1,1,1,0,0,1]]",
        "output": "10"
      },
      {
        "input": "mat = [[1,1,0,1,1,0,0],[1,0,1,0,0,1,1],[0,1,0,1,1,0,1],[1,0,1,0,1,0,0],[0,0,1,0,0,1,0]]",
        "output": "5"
      },
      {
        "input": "mat = [[0,1,0,1,0,1],[1,0,1,0,1,0],[0,1,0,1,0,1],[1,0,1,0,1,0],[0,1,0,1,0,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[0,0,0,0,0],[0,1,1,1,0],[0,1,0,1,0],[0,1,1,1,0],[0,0,0,0,0]]",
        "output": "3"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,1],[1,0,1,0,1,0,1,0,1,1],[1,0,0,1,0,1,0,1,0,1]]",
        "output": "10"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,1],[1,0,1,1,1,1,0,1],[1,0,1,0,0,1,0,1],[1,0,1,1,1,1,0,1],[1,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1]]",
        "output": "8"
      },
      {
        "input": "mat = [[1,0,1,0,1,0,1],[0,1,0,1,0,1,0],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0],[1,0,1,0,1,0,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[0,0,0,1,1,0,0],[1,1,0,0,0,1,1],[0,0,1,1,0,0,1],[1,1,0,0,1,1,0],[0,1,1,0,0,1,0]]",
        "output": "3"
      },
      {
        "input": "mat = [[1,1,0,0,0],[0,1,1,0,0],[0,0,1,1,0],[0,0,0,1,1],[0,0,0,0,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,1,0,0],[0,1,0,1,0],[0,0,1,1,1],[1,0,0,0,1],[0,1,1,1,0]]",
        "output": "3"
      },
      {
        "input": "mat = [[0,0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0]]",
        "output": "7"
      },
      {
        "input": "mat = [[1,1,1,1,1,1],[0,1,1,0,0,1],[1,1,0,0,1,1],[0,0,0,1,1,1],[0,1,1,1,1,1]]",
        "output": "6"
      },
      {
        "input": "mat = [[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,1,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0]]",
        "output": "6"
      },
      {
        "input": "mat = [[1,0,1,1,0,0],[0,1,0,0,1,0],[1,0,1,0,0,1],[0,1,0,1,0,0],[0,0,1,0,1,0]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,0,0,0,1,0,0,0,1],[0,1,0,0,0,1,0,0,0],[0,0,1,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]]",
        "output": "9"
      },
      {
        "input": "mat = [[0,1,0,1,0],[1,0,1,0,1],[0,1,0,1,0],[1,0,1,0,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,0,1,0,1],[0,1,0,1,0],[1,0,1,0,1],[0,1,0,1,0],[1,0,1,0,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[0,1,1,0,1,0,0,1],[1,1,1,0,0,1,1,1],[0,1,1,0,1,0,0,1],[1,1,1,0,0,1,1,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[0,1,1,1,0],[0,0,1,0,0],[1,1,1,1,1],[0,1,1,1,0],[0,0,1,0,0]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,1,1,0,0],[0,0,1,1,1,0],[0,0,0,0,1,1],[0,0,0,0,0,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,1,1],[0,1,0,1,0],[1,0,1,0,1],[0,1,0,1,0],[1,0,1,0,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,1,1,0],[1,0,0,1,0],[0,1,0,1,1],[1,0,1,0,1],[1,1,1,0,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0]]",
        "output": "7"
      },
      {
        "input": "mat = [[1,0,0,1,0],[0,1,1,0,0],[1,1,1,1,1],[0,0,1,0,0],[1,0,0,1,0]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,1,0,0],[0,1,1,1,0],[0,0,1,1,1],[1,0,0,0,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0]]",
        "output": "9"
      },
      {
        "input": "mat = [[1,1,0,0,0],[1,0,1,0,0],[0,1,0,1,0],[0,0,1,0,1],[0,0,0,1,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[0,1,0,0,0],[1,1,1,0,1],[0,1,0,1,0],[1,0,1,1,0],[1,0,0,1,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,0,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,0,0,1]]",
        "output": "3"
      },
      {
        "input": "mat = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,1,1,1,1,1,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,0,0,1,0,0,1,0],[0,1,1,0,1,1,0,1],[1,0,0,1,0,0,1,0],[0,1,1,0,1,1,0,1]]",
        "output": "3"
      },
      {
        "input": "mat = [[1,1,1,1,0,0],[0,1,1,1,1,0],[0,0,1,1,1,1],[0,0,0,1,1,1],[0,0,0,0,1,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,0,0,0,1],[0,1,0,1,0],[0,0,1,0,0],[0,1,0,1,0],[1,0,0,0,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,0,0,1,1,1],[0,1,1,1,0,0,1],[0,0,1,1,1,1,0],[0,0,0,1,1,0,0],[1,0,0,1,1,1,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,0,0,0,0,0],[0,0,1,1,0,0,0],[0,0,0,0,1,1,0],[0,0,0,0,0,0,1],[1,1,1,1,1,1,1]]",
        "output": "7"
      },
      {
        "input": "mat = [[1,1,0,0,1,1],[0,0,1,1,0,0],[1,1,0,0,1,1],[0,0,1,1,0,0]]",
        "output": "2"
      },
      {
        "input": "mat = [[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0]]",
        "output": "6"
      },
      {
        "input": "mat = [[1,1,1,1,0,0,0,1,1,1,1],[0,0,0,0,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,1,1,1,1],[0,0,0,0,1,1,1,0,0,0,0]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1]]",
        "output": "8"
      },
      {
        "input": "mat = [[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]]",
        "output": "6"
      },
      {
        "input": "mat = [[1,1,0,0,0,1,1],[1,0,0,0,0,0,1],[1,0,1,1,1,0,1],[0,0,1,0,1,0,0],[1,0,1,0,1,0,1]]",
        "output": "3"
      },
      {
        "input": "mat = [[0,1,1,0,1,1,0],[1,0,0,1,0,0,1],[0,1,1,0,1,1,0],[1,0,0,1,0,0,1],[0,1,1,0,1,1,0]]",
        "output": "3"
      },
      {
        "input": "mat = [[1,1,0,0,0],[0,1,1,1,0],[0,0,0,1,0],[1,0,1,1,1],[1,1,0,1,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[0,0,0,0,0,0],[0,1,1,1,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,1,1,0],[0,0,0,0,0,0]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,1,1],[1,0,1,0,1],[1,0,1,0,1],[1,0,1,0,1],[1,1,1,1,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,1,1,0,1,1,1,1],[1,1,1,0,0,0,0,1,1],[1,1,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,1],[1,1,0,0,0,0,0,1,1],[1,1,1,0,0,0,1,1,1],[1,1,1,1,0,1,1,1,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,0,0,0,0,0,1],[0,1,0,0,0,1,0],[0,0,1,0,1,0,0],[0,0,0,1,0,0,0],[1,0,1,0,1,0,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,1,0],[0,0,0,0,0,1]]",
        "output": "6"
      },
      {
        "input": "mat = [[0,1,0,0,1,0,0,1],[0,0,1,0,0,1,0,0],[1,0,0,1,0,0,1,0],[0,1,0,0,1,0,0,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,0,1,1],[0,1,1,1,0],[1,1,1,0,0],[0,0,0,1,1],[1,1,0,0,0]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1],[0,0,0,1,0,0,0],[1,0,0,0,0,0,1],[0,0,0,0,0,0,0],[0,1,1,1,1,1,0],[0,0,0,0,0,0,0],[1,0,0,0,0,0,1]]",
        "output": "7"
      },
      {
        "input": "mat = [[1,0,0,0,1,0,1],[0,1,1,1,0,1,0],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0],[1,0,1,0,1,0,1],[0,1,1,1,0,1,0],[1,0,0,0,1,0,1]]",
        "output": "7"
      },
      {
        "input": "mat = [[0,0,0,0,0,0],[0,1,0,1,0,0],[0,0,1,0,1,0],[0,1,0,1,0,0],[0,0,0,0,0,0]]",
        "output": "3"
      },
      {
        "input": "mat = [[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]]",
        "output": "6"
      },
      {
        "input": "mat = [[1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0],[1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,0,0,0],[1,1,1,0,0],[1,1,1,1,0],[0,1,1,1,1],[0,0,1,1,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,1,1,0,0,0,0],[0,0,0,0,1,1,1,1],[1,0,0,0,0,0,0,1],[0,0,0,0,1,0,0,0],[1,0,0,0,0,0,0,1],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[0,1,1,1,1],[1,1,0,1,0],[0,1,1,1,0],[0,1,0,0,0],[1,1,1,1,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,1,0,0,0,1,1,1],[0,1,1,1,0,1,1,1,0],[1,0,1,1,1,1,1,0,1],[0,1,0,1,1,1,0,1,0]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,0,1,1,0,1,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[1,1,0,1,1,0,1,1,0,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,0,1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0,1]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,0,0],[1,1,1,1,0],[0,1,1,1,1],[0,0,1,1,1],[0,0,0,1,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1],[0,0,0,1,1,0,0,0],[1,1,0,0,0,1,1,0],[0,0,1,1,1,0,0,1],[1,1,0,0,0,1,1,0]]",
        "output": "8"
      },
      {
        "input": "mat = [[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0]]",
        "output": "7"
      },
      {
        "input": "mat = [[0,0,0,0,0],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[0,0,0,0,0]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0],[1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0],[1,0,1,0,1,0,1,0,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,0,0,1,0],[0,0,1,0,0],[1,0,0,0,1],[0,0,1,0,0],[0,1,0,1,0]]",
        "output": "2"
      },
      {
        "input": "mat = [[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[0,1,0,1,0,1],[1,0,1,0,1,0],[0,1,0,1,0,1],[1,0,1,0,1,0]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,0,0],[1,1,0,1,0],[0,1,0,1,1],[0,0,1,0,1],[1,1,1,1,0]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,1],[1,0,1,1,1,1,1,1,0,1],[1,0,1,0,0,0,0,1,0,1],[1,0,1,0,1,1,0,1,0,1]]",
        "output": "10"
      },
      {
        "input": "mat = [[0,1,1,0,1,0,1,0],[1,0,1,0,1,0,1,0],[0,1,1,0,1,0,1,0],[1,0,1,0,1,0,1,0]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,1,0,1,1,1],[0,0,0,0,1,0,0,0],[1,1,1,1,0,1,1,1],[0,0,0,0,1,0,0,0]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1]]",
        "output": "6"
      },
      {
        "input": "mat = [[1,1,1,1,1],[0,1,1,1,0],[0,0,1,0,0],[1,0,1,0,1],[1,1,1,1,1]]",
        "output": "5"
      }
    ]
  },
  {
    "id": 473,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bitmask"
    ],
    "problemDescription": "You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\nReturn true if you can make this square and false otherwise.\n\u00a0\nExample 1:\n\n\nInput: matchsticks = [1,1,2,2,2]\nOutput: true\nExplanation: You can form a square with length 2, one side of the square came two sticks with length 1.\n\nExample 2:\n\nInput: matchsticks = [3,3,3,3,4]\nOutput: false\nExplanation: You cannot find a way to form a square with all the matchsticks.\n\n\u00a0\nConstraints:\n\n1 <= matchsticks.length <= 15\n1 <= matchsticks[i] <= 108\n\n",
    "starterCode": "class Solution:\n    def makesquare(self, matchsticks: List[int]) -> bool:\n        ",
    "testCases": [
      {
        "input": "matchsticks = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,1,1,2,2,2,2,3,3,3,3]",
        "output": "True"
      },
      {
        "input": "matchsticks = [10,10,10,10]",
        "output": "True"
      },
      {
        "input": "matchsticks = [5,5,5,5]",
        "output": "True"
      },
      {
        "input": "matchsticks = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "True"
      },
      {
        "input": "matchsticks = [1,3,3,3,4]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,1,1,2,2,2,2]",
        "output": "True"
      },
      {
        "input": "matchsticks = [1,1,2,2,2]",
        "output": "True"
      },
      {
        "input": "matchsticks = [1,2,3,4,5]",
        "output": "False"
      },
      {
        "input": "matchsticks = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,12]",
        "output": "False"
      },
      {
        "input": "matchsticks = [5,5,5,5,4,4,4,4]",
        "output": "True"
      },
      {
        "input": "matchsticks = [3,3,3,3,4]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]",
        "output": "True"
      },
      {
        "input": "matchsticks = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [2,2,2,2,2,2,2,2]",
        "output": "True"
      },
      {
        "input": "matchsticks = [7,7,7,7,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "False"
      },
      {
        "input": "matchsticks = [10,20,30,40,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,1,1,1,1,1,1]",
        "output": "True"
      },
      {
        "input": "matchsticks = [1,3,3,4,4,5,5,5,5,5,5,5,5,5,5]",
        "output": "False"
      },
      {
        "input": "matchsticks = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "False"
      },
      {
        "input": "matchsticks = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]",
        "output": "False"
      },
      {
        "input": "matchsticks = [7,8,10,10,10,11,11,11,11,12,12,12,12,12,12]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "False"
      },
      {
        "input": "matchsticks = [20,20,20,20,20,20,20,20,20,20,20,20,20,20,80]",
        "output": "False"
      },
      {
        "input": "matchsticks = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,16]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,6]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,5]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 30]",
        "output": "False"
      },
      {
        "input": "matchsticks = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [100000000, 100000000, 100000000, 100000000, 25000000, 25000000, 25000000, 25000000]",
        "output": "True"
      },
      {
        "input": "matchsticks = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "False"
      },
      {
        "input": "matchsticks = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]",
        "output": "False"
      },
      {
        "input": "matchsticks = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8]",
        "output": "True"
      },
      {
        "input": "matchsticks = [2,3,4,5,6,7,8,9,10,1,11,12,13,14,15]",
        "output": "True"
      },
      {
        "input": "matchsticks = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4]",
        "output": "True"
      },
      {
        "input": "matchsticks = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,5]",
        "output": "False"
      },
      {
        "input": "matchsticks = [2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]",
        "output": "False"
      },
      {
        "input": "matchsticks = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]",
        "output": "True"
      },
      {
        "input": "matchsticks = [10,10,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,1,1,2,2,2,2,2,2,2,2,2,2,8]",
        "output": "True"
      },
      {
        "input": "matchsticks = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,100]",
        "output": "False"
      },
      {
        "input": "matchsticks = [10,10,10,10,10,1,1,1,1,1,1,1,1,1,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,1,1,1,1,1,1,1,1,1,1,1,2,2]",
        "output": "False"
      },
      {
        "input": "matchsticks = [100,100,100,100,25,25,25,25,25,25,25,25,25,25,25]",
        "output": "False"
      },
      {
        "input": "matchsticks = [100000000,100000000,100000000,100000000,25000000,25000000,25000000,25000000,25000000,25000000,25000000,25000000,25000000,25000000,25000000]",
        "output": "False"
      },
      {
        "input": "matchsticks = [100000000,100000000,100000000,100000000,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]",
        "output": "False"
      },
      {
        "input": "matchsticks = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,5]",
        "output": "False"
      },
      {
        "input": "matchsticks = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "False"
      },
      {
        "input": "matchsticks = [5,5,5,5,5,5,5,5,5,5,5,5,5,1,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "True"
      },
      {
        "input": "matchsticks = [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3]",
        "output": "True"
      },
      {
        "input": "matchsticks = [100000000,100000000,100000000,100000000,100000000,100000000,100000000,100000000,100000000,100000000,100000000,100000000,100000000,100000000,100000000]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
        "output": "False"
      },
      {
        "input": "matchsticks = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "True"
      },
      {
        "input": "matchsticks = [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,4]",
        "output": "False"
      },
      {
        "input": "matchsticks = [10, 20, 30, 40, 10, 20, 30, 40]",
        "output": "True"
      },
      {
        "input": "matchsticks = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,28]",
        "output": "False"
      },
      {
        "input": "matchsticks = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [2,2,2,2,3,3,3,3,4,4,4,4,5,5,5]",
        "output": "False"
      },
      {
        "input": "matchsticks = [15,15,15,15,1,2,3,4,5,6,7,8,9,10,11]",
        "output": "False"
      },
      {
        "input": "matchsticks = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,15]",
        "output": "False"
      },
      {
        "input": "matchsticks = [10,20,30,40,50,15,5,25,35]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
        "output": "True"
      },
      {
        "input": "matchsticks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "True"
      },
      {
        "input": "matchsticks = [8,8,8,8,8,8,8,8,1,1,1,1,1,1,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,32]",
        "output": "False"
      },
      {
        "input": "matchsticks = [15,15,15,15,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [100000000,100000000,100000000,100000000]",
        "output": "True"
      },
      {
        "input": "matchsticks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,20]",
        "output": "False"
      },
      {
        "input": "matchsticks = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,1]",
        "output": "False"
      },
      {
        "input": "matchsticks = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,20]",
        "output": "False"
      },
      {
        "input": "matchsticks = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]",
        "output": "True"
      }
    ]
  },
  {
    "id": 825,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.\nA Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:\n\nage[y] <= 0.5 * age[x] + 7\nage[y] > age[x]\nage[y] > 100 && age[x] < 100\n\nOtherwise, x will send a friend request to y.\nNote that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.\nReturn the total number of friend requests made.\n\u00a0\nExample 1:\n\nInput: ages = [16,16]\nOutput: 2\nExplanation: 2 people friend request each other.\n\nExample 2:\n\nInput: ages = [16,17,18]\nOutput: 2\nExplanation: Friend requests are made 17 -> 16, 18 -> 17.\n\nExample 3:\n\nInput: ages = [20,30,100,110,120]\nOutput: 3\nExplanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.\n\n\u00a0\nConstraints:\n\nn == ages.length\n1 <= n <= 2 * 104\n1 <= ages[i] <= 120\n\n",
    "starterCode": "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "ages = [120,119,118,117,116,115,114,113,112,111,110]",
        "output": "55"
      },
      {
        "input": "ages = [25,25,25,25,25,25,25,25,25,25]",
        "output": "90"
      },
      {
        "input": "ages = [18,18,18,18,18,18,18,18,18,18]",
        "output": "90"
      },
      {
        "input": "ages = [15,15,15,15,15]",
        "output": "20"
      },
      {
        "input": "ages = [20,20,21,22,23,24,25]",
        "output": "22"
      },
      {
        "input": "ages = [1,2,3,120,119,118,117,116,115,114,113,112,111,110]",
        "output": "55"
      },
      {
        "input": "ages = [15,15,15,15]",
        "output": "12"
      },
      {
        "input": "ages = [16,17,18,19,20]",
        "output": "6"
      },
      {
        "input": "ages = [20,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30]",
        "output": "220"
      },
      {
        "input": "ages = [15,15,15,16,17]",
        "output": "7"
      },
      {
        "input": "ages = [120,119,118,117,116,115,114,113,112,111]",
        "output": "45"
      },
      {
        "input": "ages = [120,119,118,117,116]",
        "output": "10"
      },
      {
        "input": "ages = [15,16,15,17,18]",
        "output": "4"
      },
      {
        "input": "ages = [1,120,1,120,1,120,1,120,1,120]",
        "output": "20"
      },
      {
        "input": "ages = [10,20,30,40,50,60,70,80,90,100,110,120]",
        "output": "25"
      },
      {
        "input": "ages = [16,16]",
        "output": "2"
      },
      {
        "input": "ages = [1,2,3,4,5,6,7,8,9,10]",
        "output": "0"
      },
      {
        "input": "ages = [16,16,16,16,16,16,16]",
        "output": "42"
      },
      {
        "input": "ages = [16,32,48,64,80,96,112]",
        "output": "9"
      },
      {
        "input": "ages = [10,20,30,40,50,60,70,80,90,100]",
        "output": "16"
      },
      {
        "input": "ages = [15,15,15]",
        "output": "6"
      },
      {
        "input": "ages = [100,101,102,103,104]",
        "output": "10"
      },
      {
        "input": "ages = [20,30,100,110,120]",
        "output": "3"
      },
      {
        "input": "ages = [101,102,103,104,105]",
        "output": "10"
      },
      {
        "input": "ages = [120,119,118,117,116,115]",
        "output": "15"
      },
      {
        "input": "ages = [20,20,20,20,20,20,20,20,20,20]",
        "output": "90"
      },
      {
        "input": "ages = [1,2,3,100,101,102,103,104,105]",
        "output": "15"
      },
      {
        "input": "ages = [16,17,18]",
        "output": "2"
      },
      {
        "input": "ages = [100,100,100,100,100]",
        "output": "20"
      },
      {
        "input": "ages = [50,50,50,50,50]",
        "output": "20"
      },
      {
        "input": "ages = [1, 15, 16, 17, 18, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 101, 102, 105, 110, 115, 120]",
        "output": "140"
      },
      {
        "input": "ages = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "306"
      },
      {
        "input": "ages = [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "303"
      },
      {
        "input": "ages = [10, 21, 31, 41, 51, 61, 71, 81, 91, 101, 111]",
        "output": "20"
      },
      {
        "input": "ages = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "306"
      },
      {
        "input": "ages = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "72"
      },
      {
        "input": "ages = [16, 16, 17, 18, 18, 19, 20, 20, 21, 21, 22, 22]",
        "output": "43"
      },
      {
        "input": "ages = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "0"
      },
      {
        "input": "ages = [16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25]",
        "output": "120"
      },
      {
        "input": "ages = [1, 120, 2, 119, 3, 118, 4, 117, 5, 116, 6, 115, 7, 114, 8, 113, 9, 112, 10, 111, 11, 110, 12]",
        "output": "55"
      },
      {
        "input": "ages = [20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "72"
      },
      {
        "input": "ages = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "72"
      },
      {
        "input": "ages = [16,16,16,17,17,17,18,18,18,19,19,19,20,20,20]",
        "output": "84"
      },
      {
        "input": "ages = [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120]",
        "output": "2756"
      },
      {
        "input": "ages = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 110, 111, 112, 113, 114, 115]",
        "output": "71"
      },
      {
        "input": "ages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 10, 20, 30, 40, 50]",
        "output": "43"
      },
      {
        "input": "ages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]",
        "output": "2756"
      },
      {
        "input": "ages = [15, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25]",
        "output": "126"
      },
      {
        "input": "ages = [15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119]",
        "output": "676"
      },
      {
        "input": "ages = [25, 50, 75, 100, 120, 100, 75, 50, 25]",
        "output": "20"
      },
      {
        "input": "ages = [120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120]",
        "output": "812"
      },
      {
        "input": "ages = [5, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "25"
      },
      {
        "input": "ages = [20, 20, 20, 20, 30, 30, 30, 30, 40, 40, 40, 40, 50, 50, 50, 50, 60, 60, 60, 60]",
        "output": "124"
      },
      {
        "input": "ages = [15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,120]",
        "output": "702"
      },
      {
        "input": "ages = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 120]",
        "output": "57"
      },
      {
        "input": "ages = [18, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "144"
      },
      {
        "input": "ages = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 120, 120, 120]",
        "output": "106"
      },
      {
        "input": "ages = [18, 25, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 120, 120, 120]",
        "output": "53"
      },
      {
        "input": "ages = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "56"
      },
      {
        "input": "ages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "122"
      },
      {
        "input": "ages = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]",
        "output": "210"
      },
      {
        "input": "ages = [16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25]",
        "output": "285"
      },
      {
        "input": "ages = [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "56"
      },
      {
        "input": "ages = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]",
        "output": "100"
      },
      {
        "input": "ages = [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "306"
      },
      {
        "input": "ages = [16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 16, 24, 32, 40, 48, 56, 64, 72]",
        "output": "109"
      },
      {
        "input": "ages = [15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185]",
        "output": "Error: list index out of range"
      },
      {
        "input": "ages = [15, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28]",
        "output": "200"
      },
      {
        "input": "ages = [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]",
        "output": "136"
      },
      {
        "input": "ages = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120]",
        "output": "110"
      },
      {
        "input": "ages = [15,16,17,18,19,20,21,22,23,24,25]",
        "output": "25"
      },
      {
        "input": "ages = [120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120]",
        "output": "462"
      },
      {
        "input": "ages = [75, 75, 75, 75, 80, 80, 80, 85, 85, 90, 90, 95, 95, 100, 100, 105, 105, 110, 110, 115, 115, 120, 120]",
        "output": "270"
      },
      {
        "input": "ages = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]",
        "output": "279"
      },
      {
        "input": "ages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "156"
      },
      {
        "input": "ages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "25"
      },
      {
        "input": "ages = [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,120,120,120,120,120]",
        "output": "3046"
      },
      {
        "input": "ages = [15, 15, 16, 17, 18, 19, 20, 20, 20]",
        "output": "18"
      },
      {
        "input": "ages = [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "1211"
      },
      {
        "input": "ages = [20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280]",
        "output": "Error: list index out of range"
      },
      {
        "input": "ages = [16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30]",
        "output": "254"
      },
      {
        "input": "ages = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]",
        "output": "2756"
      },
      {
        "input": "ages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "99"
      },
      {
        "input": "ages = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "56"
      },
      {
        "input": "ages = [10, 12, 14, 16, 18, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "73"
      },
      {
        "input": "ages = [18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23]",
        "output": "64"
      },
      {
        "input": "ages = [20, 20, 20, 30, 30, 30, 40, 40, 40, 50, 50, 50]",
        "output": "42"
      },
      {
        "input": "ages = [101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120]",
        "output": "190"
      },
      {
        "input": "ages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "291"
      },
      {
        "input": "ages = [18, 24, 24, 30, 30, 30, 40, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "48"
      },
      {
        "input": "ages = [1, 7, 14, 15, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 1, 7, 14, 15, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "124"
      },
      {
        "input": "ages = [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "465"
      },
      {
        "input": "ages = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "156"
      },
      {
        "input": "ages = [20, 20, 20, 30, 30, 30, 40, 40, 40, 50, 50, 50, 60, 60, 60, 70, 70, 70]",
        "output": "90"
      },
      {
        "input": "ages = [16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,76,80,84,88,92,96,100]",
        "output": "110"
      },
      {
        "input": "ages = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]",
        "output": "756"
      },
      {
        "input": "ages = [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "156"
      },
      {
        "input": "ages = [20, 20, 20, 21, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "173"
      },
      {
        "input": "ages = [16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58]",
        "output": "326"
      },
      {
        "input": "ages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300]",
        "output": "Error: list index out of range"
      },
      {
        "input": "ages = [16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23]",
        "output": "80"
      },
      {
        "input": "ages = [20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 110, 120, 110, 120, 110, 120, 110, 120, 110, 120]",
        "output": "160"
      },
      {
        "input": "ages = [120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "2756"
      },
      {
        "input": "ages = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120]",
        "output": "2756"
      },
      {
        "input": "ages = [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "25"
      }
    ]
  },
  {
    "id": 912,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Bucket Sort",
      "Counting Sort",
      "Radix Sort",
      "Sorting",
      "Heap (Priority Queue)",
      "Merge Sort"
    ],
    "problemDescription": "Given an array of integers nums, sort the array in ascending order and return it.\nYou must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.\n\u00a0\nExample 1:\n\nInput: nums = [5,2,3,1]\nOutput: [1,2,3,5]\nExplanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).\n\nExample 2:\n\nInput: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]\nExplanation: Note that the values of nums are not necessairly unique.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 5 * 104\n-5 * 104 <= nums[i] <= 5 * 104\n\n",
    "starterCode": "class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [-4,-2,-3,-1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [5, -1, 3, -2, 4, 0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [5,-3,2,7,1,-8,4,-2,6,0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1,3,5,7,9,2,4,6,8,0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [3,3,3,3,3,3]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-5,0,5,-1,1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-5,3,-2,10,0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10000, -10000, 5000, -5000, 0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [0,0,0,0,0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [5,1,1,2,0,0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [0]",
        "output": "[0]"
      },
      {
        "input": "nums = [10000,-10000,5000,-5000,0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10000,-10000,0,5000,-5000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [5,2,3,1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [99999, -99999, 50000, -50000, 25000, -25000, 1, -1, 0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250, 3125, -3125]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10000, 5000, 2500, 1250, 625, 312, 156, 78, 39, 19, 9, 4, 2, 1, 0, -1, -2, -4, -8, -16, -32, -64, -128, -256, -512, -1024, -2048, -4096, -8192, -16384, -32768]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [50000, 40000, 30000, 20000, 10000, 0, -10000, -20000, -30000, -40000, -50000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [0, -1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, 10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [5, 2, 3, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-50000, -40000, -30000, -20000, -10000, 0, 10000, 20000, 30000, 40000, 50000, -1, 1, -2, 2, -3, 3, -4, 4, -5, 5]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [50000, 25000, 12500, 6250, 3125, 1562, 781, 390, 195, 97, 48, 24, 12, 6, 3, 1, -1, -3, -6, -12, -24, -48, -97, -195, -390, -781, -1562, -3125, -6250, -12500, -25000, -50000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [50000, 49999, 49998, 49997, 49996, 49995, 49994, 49993, 49992, 49991]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [100000, -100000, 50000, -50000, 25000, -25000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10000, -10000, 5000, -5000, 0, 2500, -2500]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [9999, -9999, 9998, -9998, 9997, -9997, 9996, -9996, 9995, -9995]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [3, -1, 2, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [50000, 49999, 49998, 49997, 49996, 49995, 49994, 49993, 49992, 49991, 49990, 49989, 49988, 49987, 49986, 49985, 49984, 49983, 49982, 49981]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [100000, -100000, 50000, -50000, 0, 25000, -25000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-1]",
        "output": "[-1]"
      },
      {
        "input": "nums = [1, 3, 2, 4, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [50000]",
        "output": "[50000]"
      },
      {
        "input": "nums = [1, 3, 2, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10, -10, 20, -20, 30, -30, 40, -40, 50, -50]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-1, -3, -2, -4, -6, -5, -8, -7, -10, -9, -12, -11, -14, -13, -16, -15]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10000, -10000, 5000, -5000, 2500, -2500, 0, 1, -1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [50000, -50000, 40000, -40000, 30000, -30000, 20000, -20000, 10000, -10000, 0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-50000, -40000, -30000, -20000, -10000, 0, 10000, 20000, 30000, 40000, 50000, -49999, -49998, -49997, -49996, -49995, -49994, -49993, -49992, -49991]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 32, 31, 34, 33, 36, 35, 38, 37, 40, 39, 42, 41, 44, 43, 46, 45, 48, 47, 50, 49, 52, 51, 54, 53, 56, 55, 58, 57, 60, 59, 62, 61, 64, 63, 66, 65, 68, 67, 70, 69, 72, 71, 74, 73, 76, 75, 78, 77, 80, 79, 82, 81, 84, 83, 86, 85, 88, 87, 90, 89, 92, 91, 94, 93, 96, 95, 98, 97, 100, 99]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [50000, 49999, 49998, 49997, 49996, 49995]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-50000]",
        "output": "[-50000]"
      },
      {
        "input": "nums = [100000, -100000, 50000, -50000, 0, 1, -1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [50000, 50000, 50000, 50000, 50000, -50000, -50000, -50000, -50000, -50000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10000, 20000, 30000, 40000, 50000, -10000, -20000, -30000, -40000, -50000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [50000, 40000, 30000, 20000, 10000, 0, -10000, -20000, -30000, -40000, -50000, 49999, 49998, 49997, 49996, 49995, 49994, 49993, 49992, 49991]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [5, 3, 1, 2, 4, 6, 8, 7, 10, 9, 11, 13, 12, 15, 14, 17, 16, 19, 18, 20]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [50000, 49999, 49998, 49997, 49996, 49995, 49994, 49993, 49992, 49991, 49990, 49989, 49988, 49987, 49986]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, -100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10000, -10000, 20000, -20000, 0, 5000, -5000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-50000, -40000, -30000, -20000, -10000, 0, 10000, 20000, 30000, 40000, 50000, -50000, -40000, -30000, -20000, -10000, 0, 10000, 20000, 30000, 40000, 50000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [5, -2, 3, 5, -2, 3, 5, -2, 3, 5, -2, 3, 5, -2, 3, 5, -2, 3, 5, -2, 3, 5, -2, 3, 5, -2, 3, 5, -2, 3]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1000, 500, 250, 125, 62, 31, 15, 7, 3, 1, 0, -1, -3, -7, -15, -31, -62, -125, -250, -500, -1000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [10000, -10000, 25000, -25000, 0, 0, 5000, -5000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1]",
        "output": "[1]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [0, 1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, -1, -1, -1, -2, -2, -2, -3, -3, -3, -4, -4, -4, -5, -5, -5]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [100, -100, 50, -50, 25, -25, 0, 0, 25, -25]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-50000, -49999, -49998, -49997, -49996, -49995]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-50000, -49999, -49998, -49997, -49996, -49995, -49994, -49993, -49992, -49991, -49990, -49989, -49988, -49987, -49986, -49985, -49984, -49983, -49982, -49981]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000]",
        "output": "Error: name 'randint' is not defined"
      },
      {
        "input": "nums = [-50000, -49999, -49998, -49997, -49996, -49995, -49994, -49993, -49992, -49991, -49990, -49989, -49988, -49987, -49986]",
        "output": "Error: name 'randint' is not defined"
      }
    ]
  },
  {
    "id": 2337,
    "difficulty": "Medium",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "problemDescription": "You are given two strings start and target, both of length n. Each string consists only of the characters 'L', 'R', and '_' where:\n\nThe characters 'L' and 'R' represent pieces, where a piece 'L' can move to the left only if there is a blank space directly to its left, and a piece 'R' can move to the right only if there is a blank space directly to its right.\nThe character '_' represents a blank space that can be occupied by any of the 'L' or 'R' pieces.\n\nReturn true if it is possible to obtain the string target by moving the pieces of the string start any number of times. Otherwise, return false.\n\u00a0\nExample 1:\n\nInput: start = \"_L__R__R_\", target = \"L______RR\"\nOutput: true\nExplanation: We can obtain the string target from start by doing the following moves:\n- Move the first piece one step to the left, start becomes equal to \"L___R__R_\".\n- Move the last piece one step to the right, start becomes equal to \"L___R___R\".\n- Move the second piece three steps to the right, start becomes equal to \"L______RR\".\nSince it is possible to get the string target from start, we return true.\n\nExample 2:\n\nInput: start = \"R_L_\", target = \"__LR\"\nOutput: false\nExplanation: The 'R' piece in the string start can move one step to the right to obtain \"_RL_\".\nAfter that, no pieces can move anymore, so it is impossible to obtain the string target from start.\n\nExample 3:\n\nInput: start = \"_R\", target = \"R_\"\nOutput: false\nExplanation: The piece in the string start can move only to the right, so it is impossible to obtain the string target from start.\n\u00a0\nConstraints:\n\nn == start.length == target.length\n1 <= n <= 105\nstart and target consist of the characters 'L', 'R', and '_'.\n\n",
    "starterCode": "class Solution:\n    def canChange(self, start: str, target: str) -> bool:\n        ",
    "testCases": [
      {
        "input": "start = \"_R\", target = \"R_\"",
        "output": "False"
      },
      {
        "input": "start = \"___\", target = \"___\"",
        "output": "True"
      },
      {
        "input": "start = \"LR\", target = \"LR\"",
        "output": "True"
      },
      {
        "input": "start = \"_LL_R\", target = \"LL__R\"",
        "output": "True"
      },
      {
        "input": "start = \"____\", target = \"____\"",
        "output": "True"
      },
      {
        "input": "start = \"L_R\", target = \"_LR\"",
        "output": "False"
      },
      {
        "input": "start = \"R__L\", target = \"L__R\"",
        "output": "False"
      },
      {
        "input": "start = \"L_L_R\", target = \"LL_R_\"",
        "output": "False"
      },
      {
        "input": "start = \"R_R\", target = \"_RR\"",
        "output": "True"
      },
      {
        "input": "start = \"_L__R__R_\", target = \"L______RR\"",
        "output": "True"
      },
      {
        "input": "start = \"L___R\", target = \"_L__R\"",
        "output": "False"
      },
      {
        "input": "start = \"LL_R\", target = \"R_L_\"",
        "output": "False"
      },
      {
        "input": "start = \"__L___\", target = \"L_____\"",
        "output": "True"
      },
      {
        "input": "start = \"LRRL\", target = \"LRRL\"",
        "output": "True"
      },
      {
        "input": "start = \"RL\", target = \"LR\"",
        "output": "False"
      },
      {
        "input": "start = \"R__L\", target = \"__LR\"",
        "output": "False"
      },
      {
        "input": "start = \"LRLR\", target = \"LRLR\"",
        "output": "True"
      },
      {
        "input": "start = \"LL_RR\", target = \"L_RLR\"",
        "output": "False"
      },
      {
        "input": "start = \"L_L\", target = \"LL_\"",
        "output": "True"
      },
      {
        "input": "start = \"RLRL\", target = \"LRLR\"",
        "output": "False"
      },
      {
        "input": "start = \"L___R\", target = \"L___R\"",
        "output": "True"
      },
      {
        "input": "start = \"R___L\", target = \"L___R\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_\", target = \"__LR\"",
        "output": "False"
      },
      {
        "input": "start = \"R_LRL\", target = \"RLR_L\"",
        "output": "False"
      },
      {
        "input": "start = \"RRLL____\", target = \"____RRLL\"",
        "output": "False"
      },
      {
        "input": "start = \"R__L__R\", target = \"__LR___\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R___L___L___R___R\", target = \"_______LL___RR\"",
        "output": "False"
      },
      {
        "input": "start = \"LR___LR___LR____\", target = \"_L__L___R___R___\"",
        "output": "False"
      },
      {
        "input": "start = \"L___R_L__\", target = \"L______LR\"",
        "output": "False"
      },
      {
        "input": "start = \"____L___R___\", target = \"L___________R\"",
        "output": "True"
      },
      {
        "input": "start = \"R_____L_______\", target = \"_________LR____\"",
        "output": "False"
      },
      {
        "input": "start = \"R_R_R_R_R\", target = \"RRRRR_____\"",
        "output": "False"
      },
      {
        "input": "start = \"R____L_____\", target = \"_____R____L\"",
        "output": "False"
      },
      {
        "input": "start = \"R______L\", target = \"_____LR_\"",
        "output": "False"
      },
      {
        "input": "start = \"R___L__R_L\", target = \"_____LR__L\"",
        "output": "False"
      },
      {
        "input": "start = \"L______R______L\", target = \"_______LR______\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_L___R_R\", target = \"__LR___LR\"",
        "output": "False"
      },
      {
        "input": "start = \"R__L___L_\", target = \"___LR___L\"",
        "output": "False"
      },
      {
        "input": "start = \"L____R____L___\", target = \"________LR____\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R____R\", target = \"_LR_____\"",
        "output": "False"
      },
      {
        "input": "start = \"R__L_____R\", target = \"_______LR___\"",
        "output": "False"
      },
      {
        "input": "start = \"R_R_R_R_\", target = \"____RRRR\"",
        "output": "True"
      },
      {
        "input": "start = \"R_L_R_L_R\", target = \"_L__L__RR\"",
        "output": "False"
      },
      {
        "input": "start = \"R__LR_R__\", target = \"__LR___R_\"",
        "output": "False"
      },
      {
        "input": "start = \"___L_R___L___R___\", target = \"L_____L____R____\"",
        "output": "False"
      },
      {
        "input": "start = \"LR_L_R_L_R\", target = \"L_R_L_R_L_\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R_L_R\", target = \"_L__L_R\"",
        "output": "False"
      },
      {
        "input": "start = \"R__L___R_L\", target = \"____LR__RL\"",
        "output": "False"
      },
      {
        "input": "start = \"RRR_______LLL\", target = \"________RRRLLL\"",
        "output": "False"
      },
      {
        "input": "start = \"__LR__R\", target = \"____LRR\"",
        "output": "False"
      },
      {
        "input": "start = \"L___R___L\", target = \"____L__LR\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R__L_R__L\", target = \"_______L___LR\"",
        "output": "False"
      },
      {
        "input": "start = \"R__L___L_R\", target = \"___LL______R\"",
        "output": "False"
      },
      {
        "input": "start = \"_L_R__L_R\", target = \"L______LR\"",
        "output": "False"
      },
      {
        "input": "start = \"L_L_L_L_L\", target = \"_____LLLL\"",
        "output": "False"
      },
      {
        "input": "start = \"____L_R_L____\", target = \"_________LR\"",
        "output": "False"
      },
      {
        "input": "start = \"_L_R__L__R\", target = \"__LR____R\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_R_L_R_L\", target = \"_LR_L_L_R_L\"",
        "output": "False"
      },
      {
        "input": "start = \"_L_R_L_R\", target = \"L___L___R\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_R_L___\", target = \"__LR____L\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_R_L_R\", target = \"___R_L_RL\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_R_L_R\", target = \"_LR_L__RR\"",
        "output": "False"
      },
      {
        "input": "start = \"R___L___R___L\", target = \"_____R___L___\"",
        "output": "False"
      },
      {
        "input": "start = \"R___L___R___L___\", target = \"_____R____L____\"",
        "output": "False"
      },
      {
        "input": "start = \"LR_LRL__\", target = \"LRL_L___\"",
        "output": "False"
      },
      {
        "input": "start = \"L___R____L\", target = \"______LR_L\"",
        "output": "False"
      },
      {
        "input": "start = \"R___R___R___L___L___\", target = \"_______RRR____\"",
        "output": "False"
      },
      {
        "input": "start = \"_R____L____R\", target = \"____L___R_R\"",
        "output": "False"
      },
      {
        "input": "start = \"L_____R__L\", target = \"L_________RL\"",
        "output": "False"
      },
      {
        "input": "start = \"L___R___L___R___L___\", target = \"__________LRLRL\"",
        "output": "False"
      },
      {
        "input": "start = \"____R_L_R___\", target = \"R_L_____R_\"",
        "output": "False"
      },
      {
        "input": "start = \"___L__R___\", target = \"L_______R__\"",
        "output": "True"
      },
      {
        "input": "start = \"R____L____R\", target = \"____R___L\"",
        "output": "False"
      },
      {
        "input": "start = \"LR__LR__LR___\", target = \"L___R___L___RRR\"",
        "output": "False"
      },
      {
        "input": "start = \"L____R____\", target = \"____LR____\"",
        "output": "False"
      },
      {
        "input": "start = \"RRR___LLL\", target = \"___LLLRRR\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R_L___R\", target = \"L___L_R__\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R___R___R___R___L\", target = \"___L_____RRR___\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R_L_R_L_R\", target = \"LL______RRR\"",
        "output": "False"
      },
      {
        "input": "start = \"_L__R_L_R\", target = \"L_____RLR\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_R__L\", target = \"_R___L_RL\"",
        "output": "False"
      },
      {
        "input": "start = \"R___R___L___R___L\", target = \"_____RR____L___\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_R_L_R_L_R___\", target = \"_L_R_L_R_L_R____\"",
        "output": "False"
      },
      {
        "input": "start = \"R___L___R\", target = \"__LR___R_\"",
        "output": "False"
      },
      {
        "input": "start = \"______L_R\", target = \"L______R_\"",
        "output": "False"
      },
      {
        "input": "start = \"R__L_L___R\", target = \"___LR____R\"",
        "output": "False"
      },
      {
        "input": "start = \"R___L___R___R___L___\", target = \"_____R____R____L___\"",
        "output": "False"
      },
      {
        "input": "start = \"_L_L_L_L\", target = \"LLLL____\"",
        "output": "True"
      },
      {
        "input": "start = \"_L_R_L_R_\", target = \"L_____R_R\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R_L_R_L_R\", target = \"_LR_L_R_L_R\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R_L_R_L_R\", target = \"_L_L_L_RLR_\"",
        "output": "False"
      },
      {
        "input": "start = \"L___R___R___L\", target = \"_____L___RR\"",
        "output": "False"
      },
      {
        "input": "start = \"R_______L\", target = \"________LR\"",
        "output": "False"
      },
      {
        "input": "start = \"L_____R_L____\", target = \"________L_R__\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_R___L_R___\", target = \"_L_R_L___R____\"",
        "output": "False"
      },
      {
        "input": "start = \"_L_R__L__R\", target = \"____L___LR\"",
        "output": "False"
      },
      {
        "input": "start = \"_L_R__L___R\", target = \"L_____R____R\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_R___L\", target = \"_LR______\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R_L___R\", target = \"L___LR___\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_R_L_R\", target = \"_LR_L_R_L\"",
        "output": "False"
      },
      {
        "input": "start = \"LRLR_LRL\", target = \"LRLR_LRL\"",
        "output": "True"
      },
      {
        "input": "start = \"R_____L__\", target = \"_____LR__\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_R_L\", target = \"__LR__L\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L_R_L_R_L\", target = \"LR_L_R_L_R_\"",
        "output": "False"
      },
      {
        "input": "start = \"L_____R___L\", target = \"________LRL\"",
        "output": "False"
      },
      {
        "input": "start = \"_L____R_____\", target = \"L_____R_____\"",
        "output": "True"
      },
      {
        "input": "start = \"R__R__L\", target = \"_____RR_L\"",
        "output": "False"
      },
      {
        "input": "start = \"___LR___R\", target = \"L_____RR_\"",
        "output": "False"
      },
      {
        "input": "start = \"_L___R_L_R\", target = \"L_____RR__\"",
        "output": "False"
      },
      {
        "input": "start = \"L___R__L_R\", target = \"LL______RR\"",
        "output": "False"
      },
      {
        "input": "start = \"______\", target = \"______\"",
        "output": "True"
      },
      {
        "input": "start = \"R_L_R___L_R\", target = \"_L_R_L___RR\"",
        "output": "False"
      },
      {
        "input": "start = \"L_L_L__L___\", target = \"_L_L___L___L_\"",
        "output": "False"
      },
      {
        "input": "start = \"R________L\", target = \"________LR\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L___L_R\", target = \"__LR__L_R\"",
        "output": "False"
      },
      {
        "input": "start = \"R___________L\", target = \"____________LR\"",
        "output": "False"
      },
      {
        "input": "start = \"L___R___L\", target = \"__L___R_L\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R___R__L\", target = \"____L___R\"",
        "output": "False"
      },
      {
        "input": "start = \"_______L_L_R_R\", target = \"L______L___R_R\"",
        "output": "True"
      },
      {
        "input": "start = \"RRRLLL___\", target = \"___RRRLLL\"",
        "output": "False"
      },
      {
        "input": "start = \"L__R__L___R____\", target = \"L___L__R__R____\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R___R___R___L\", target = \"___L_____RR___\"",
        "output": "False"
      },
      {
        "input": "start = \"L___R__L___\", target = \"_L_____RL__\"",
        "output": "False"
      },
      {
        "input": "start = \"L___R___L___R\", target = \"L___L___R___R\"",
        "output": "False"
      },
      {
        "input": "start = \"____L___R__\", target = \"L_____R____\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R__L_R\", target = \"_LR__LR_\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L___LR__L____\", target = \"__LR__LR__L____\"",
        "output": "False"
      },
      {
        "input": "start = \"L___R___R\", target = \"___L____R\"",
        "output": "False"
      },
      {
        "input": "start = \"L___R___L_R\", target = \"L_____RL___\"",
        "output": "False"
      },
      {
        "input": "start = \"__L_R__R_L\", target = \"L_____R__L\"",
        "output": "False"
      },
      {
        "input": "start = \"_L___R__L\", target = \"L_____R__\"",
        "output": "False"
      },
      {
        "input": "start = \"L_R___R___L___\", target = \"___L_____R___\"",
        "output": "False"
      },
      {
        "input": "start = \"_L_R_L_R_R\", target = \"L______RRR\"",
        "output": "False"
      },
      {
        "input": "start = \"_L___R_L_R\", target = \"L______LR\"",
        "output": "False"
      },
      {
        "input": "start = \"_R_L_R_L____\", target = \"____LR____LR\"",
        "output": "False"
      },
      {
        "input": "start = \"R_L__R\", target = \"__LR__\"",
        "output": "False"
      }
    ]
  },
  {
    "id": 1942,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "There is a party where n friends numbered from 0 to n - 1 are attending. There is an infinite number of chairs in this party that are numbered from 0 to infinity. When a friend arrives at the party, they sit on the unoccupied chair with the smallest number.\n\nFor example, if chairs 0, 1, and 5 are occupied when a friend comes, they will sit on chair number 2.\n\nWhen a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair.\nYou are given a 0-indexed 2D integer array times where times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the ith friend respectively, and an integer targetFriend. All arrival times are distinct.\nReturn the chair number that the friend numbered targetFriend will sit on.\n\u00a0\nExample 1:\n\nInput: times = [[1,4],[2,3],[4,6]], targetFriend = 1\nOutput: 1\nExplanation: \n- Friend 0 arrives at time 1 and sits on chair 0.\n- Friend 1 arrives at time 2 and sits on chair 1.\n- Friend 1 leaves at time 3 and chair 1 becomes empty.\n- Friend 0 leaves at time 4 and chair 0 becomes empty.\n- Friend 2 arrives at time 4 and sits on chair 0.\nSince friend 1 sat on chair 1, we return 1.\n\nExample 2:\n\nInput: times = [[3,10],[1,5],[2,6]], targetFriend = 0\nOutput: 2\nExplanation: \n- Friend 1 arrives at time 1 and sits on chair 0.\n- Friend 2 arrives at time 2 and sits on chair 1.\n- Friend 0 arrives at time 3 and sits on chair 2.\n- Friend 1 leaves at time 5 and chair 0 becomes empty.\n- Friend 2 leaves at time 6 and chair 1 becomes empty.\n- Friend 0 leaves at time 10 and chair 2 becomes empty.\nSince friend 0 sat on chair 2, we return 2.\n\n\u00a0\nConstraints:\n\nn == times.length\n2 <= n <= 104\ntimes[i].length == 2\n1 <= arrivali < leavingi <= 105\n0 <= targetFriend <= n - 1\nEach arrivali time is distinct.\n\n",
    "starterCode": "class Solution:\n    def smallestChair(self, times: List[List[int]], targetFriend: int) -> int:\n        ",
    "testCases": [
      {
        "input": "times = [[5,10],[1,3],[2,6],[7,8]], targetFriend = 1",
        "output": "0"
      },
      {
        "input": "times = [[5,10],[1,2],[3,8]], targetFriend = 2",
        "output": "0"
      },
      {
        "input": "times = [[2,7],[7,9],[1,5]], targetFriend = 2",
        "output": "0"
      },
      {
        "input": "times = [[1,2],[2,3],[3,4],[4,5]], targetFriend = 3",
        "output": "0"
      },
      {
        "input": "times = [[8,12],[1,6],[3,5],[9,10]], targetFriend = 2",
        "output": "1"
      },
      {
        "input": "times = [[2,5],[3,7],[4,9],[5,10]], targetFriend = 2",
        "output": "2"
      },
      {
        "input": "times = [[5,15],[1,20],[10,25]], targetFriend = 2",
        "output": "2"
      },
      {
        "input": "times = [[10,20],[20,30],[15,25],[5,15]], targetFriend = 2",
        "output": "0"
      },
      {
        "input": "times = [[2,5],[3,9],[4,7],[5,8]], targetFriend = 2",
        "output": "2"
      },
      {
        "input": "times = [[5,10],[1,3],[4,8],[6,9]], targetFriend = 3",
        "output": "2"
      },
      {
        "input": "times = [[10,20],[5,10],[15,25]], targetFriend = 1",
        "output": "0"
      },
      {
        "input": "times = [[1,4],[2,3],[4,6]], targetFriend = 1",
        "output": "1"
      },
      {
        "input": "times = [[5,10],[1,3],[4,6],[6,7]], targetFriend = 1",
        "output": "0"
      },
      {
        "input": "times = [[1,3],[2,5],[3,6],[4,7]], targetFriend = 2",
        "output": "0"
      },
      {
        "input": "times = [[2,5],[1,3],[6,7],[4,8]], targetFriend = 1",
        "output": "0"
      },
      {
        "input": "times = [[3,10],[1,5],[2,6]], targetFriend = 0",
        "output": "2"
      },
      {
        "input": "times = [[1,2],[2,5],[4,7],[7,9]], targetFriend = 0",
        "output": "0"
      },
      {
        "input": "times = [[3,4],[1,5],[2,6],[5,7],[4,8],[6,9]], targetFriend = 3",
        "output": "0"
      },
      {
        "input": "times = [[5,8],[12,15],[10,14],[20,25],[1,4],[16,18],[6,9],[19,22],[3,7],[11,13]], targetFriend = 8",
        "output": "1"
      },
      {
        "input": "times = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26]], targetFriend = 6",
        "output": "0"
      },
      {
        "input": "times = [[1,10],[2,20],[3,30],[4,40],[5,50],[6,60],[7,70],[8,80],[9,90],[10,100],[11,110],[12,120]], targetFriend = 11",
        "output": "10"
      },
      {
        "input": "times = [[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92]], targetFriend = 8",
        "output": "8"
      },
      {
        "input": "times = [[1,10],[2,5],[3,7],[8,12],[6,9],[11,13]], targetFriend = 5",
        "output": "0"
      },
      {
        "input": "times = [[1, 100], [2, 99], [3, 98], [4, 97], [5, 96], [6, 95], [7, 94], [8, 93], [9, 92], [10, 91], [11, 90], [12, 89], [13, 88], [14, 87], [15, 86]], targetFriend = 7",
        "output": "7"
      },
      {
        "input": "times = [[10, 20], [5, 15], [1, 10], [16, 30], [21, 40]], targetFriend = 3",
        "output": "1"
      },
      {
        "input": "times = [[1,10],[2,11],[3,12],[4,13],[5,14]], targetFriend = 2",
        "output": "2"
      },
      {
        "input": "times = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11]], targetFriend = 6",
        "output": "2"
      },
      {
        "input": "times = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]], targetFriend = 8",
        "output": "0"
      },
      {
        "input": "times = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], targetFriend = 5",
        "output": "0"
      },
      {
        "input": "times = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28]], targetFriend = 7",
        "output": "0"
      },
      {
        "input": "times = [[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91]], targetFriend = 0",
        "output": "0"
      },
      {
        "input": "times = [[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10],[10,10]], targetFriend = 9",
        "output": "0"
      },
      {
        "input": "times = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1]], targetFriend = 9",
        "output": "0"
      },
      {
        "input": "times = [[5,10],[1,6],[7,12],[15,20],[2,8]], targetFriend = 4",
        "output": "1"
      },
      {
        "input": "times = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10]], targetFriend = 3",
        "output": "3"
      },
      {
        "input": "times = [[3,20],[1,5],[7,15],[10,18],[2,8],[13,17]], targetFriend = 3",
        "output": "1"
      },
      {
        "input": "times = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]], targetFriend = 4",
        "output": "0"
      },
      {
        "input": "times = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48], [49, 50]], targetFriend = 22",
        "output": "0"
      },
      {
        "input": "times = [[1,5],[2,3],[5,7],[6,8],[7,9],[8,10],[9,11]], targetFriend = 5",
        "output": "1"
      },
      {
        "input": "times = [[10,20],[1,6],[3,11],[7,14],[15,25]], targetFriend = 4",
        "output": "0"
      },
      {
        "input": "times = [[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91],[11,90],[12,89],[13,88],[14,87],[15,86],[16,85],[17,84],[18,83],[19,82],[20,81]], targetFriend = 15",
        "output": "15"
      },
      {
        "input": "times = [[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91],[11,90],[12,89],[13,88],[14,87],[15,86]], targetFriend = 10",
        "output": "10"
      },
      {
        "input": "times = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], targetFriend = 6",
        "output": "0"
      },
      {
        "input": "times = [[1,50],[2,49],[3,48],[4,47],[5,46],[6,45],[7,44],[8,43],[9,42],[10,41]], targetFriend = 9",
        "output": "9"
      },
      {
        "input": "times = [[1,10],[2,5],[3,4],[6,9],[7,11]], targetFriend = 4",
        "output": "2"
      },
      {
        "input": "times = [[1,10],[11,20],[21,30],[31,40],[41,50],[51,60],[61,70],[71,80],[81,90],[91,100]], targetFriend = 9",
        "output": "0"
      },
      {
        "input": "times = [[1,10],[2,12],[3,14],[4,16],[5,18],[6,20]], targetFriend = 2",
        "output": "2"
      },
      {
        "input": "times = [[1,1000],[2,999],[3,998],[4,997],[5,996],[6,995],[7,994],[8,993],[9,992],[10,991]], targetFriend = 9",
        "output": "9"
      },
      {
        "input": "times = [[3, 8], [1, 5], [2, 6], [7, 10], [4, 9], [6, 12], [8, 15]], targetFriend = 2",
        "output": "1"
      },
      {
        "input": "times = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30],[31,32],[33,34],[35,36],[37,38],[39,40]], targetFriend = 19",
        "output": "0"
      },
      {
        "input": "times = [[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90]], targetFriend = 4",
        "output": "0"
      },
      {
        "input": "times = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14]], targetFriend = 10",
        "output": "0"
      },
      {
        "input": "times = [[10,20],[5,15],[1,8],[21,25],[11,18]], targetFriend = 2",
        "output": "0"
      },
      {
        "input": "times = [[2,4],[6,8],[10,12],[1,3],[5,7],[9,11]], targetFriend = 0",
        "output": "1"
      },
      {
        "input": "times = [[1,10],[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90],[90,100]], targetFriend = 5",
        "output": "0"
      },
      {
        "input": "times = [[1,10],[2,5],[6,12],[3,9],[7,15]], targetFriend = 2",
        "output": "1"
      },
      {
        "input": "times = [[1,100],[2,99],[3,98],[4,97],[5,96],[6,95]], targetFriend = 5",
        "output": "5"
      },
      {
        "input": "times = [[1,5],[2,3],[4,7],[5,8],[6,9],[7,10],[8,11],[9,12],[10,13],[11,14],[12,15]], targetFriend = 7",
        "output": "2"
      },
      {
        "input": "times = [[1,4],[2,5],[3,6],[4,7],[5,8],[6,9]], targetFriend = 5",
        "output": "2"
      },
      {
        "input": "times = [[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[35,40]], targetFriend = 5",
        "output": "0"
      },
      {
        "input": "times = [[1,30],[2,25],[3,20],[4,15],[5,10],[6,28],[7,24],[8,22],[9,29],[10,18],[11,21],[12,27],[13,23],[14,26],[15,19],[16,17]], targetFriend = 4",
        "output": "4"
      },
      {
        "input": "times = [[1,10000],[2,9999],[3,9998],[4,9997],[5,9996],[6,9995],[7,9994],[8,9993],[9,9992],[10,9991]], targetFriend = 9",
        "output": "9"
      },
      {
        "input": "times = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], targetFriend = 0",
        "output": "0"
      },
      {
        "input": "times = [[10,20],[30,40],[20,30],[5,15],[45,55],[50,60]], targetFriend = 4",
        "output": "0"
      },
      {
        "input": "times = [[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91]], targetFriend = 9",
        "output": "9"
      },
      {
        "input": "times = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12]], targetFriend = 9",
        "output": "1"
      },
      {
        "input": "times = [[1,500],[2,499],[3,498],[4,497],[5,496],[6,495],[7,494],[8,493],[9,492],[10,491],[11,490],[12,489],[13,488],[14,487],[15,486]], targetFriend = 13",
        "output": "13"
      },
      {
        "input": "times = [[10,20],[15,25],[5,15],[20,30],[25,35],[0,10]], targetFriend = 2",
        "output": "1"
      },
      {
        "input": "times = [[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80]], targetFriend = 3",
        "output": "0"
      },
      {
        "input": "times = [[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90],[90,100],[100,110]], targetFriend = 4",
        "output": "0"
      },
      {
        "input": "times = [[10,30],[20,40],[30,50],[40,60],[50,70],[60,80],[70,90],[80,100],[90,110],[100,120],[110,130],[120,140],[130,150],[140,160],[150,170],[160,180],[170,190],[180,200],[190,210],[200,220]], targetFriend = 9",
        "output": "1"
      },
      {
        "input": "times = [[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[35,40],[40,45],[45,50]], targetFriend = 0",
        "output": "0"
      },
      {
        "input": "times = [[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[35,40]], targetFriend = 3",
        "output": "0"
      },
      {
        "input": "times = [[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[35,40],[40,45],[45,50],[50,55]], targetFriend = 8",
        "output": "0"
      },
      {
        "input": "times = [[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10],[10,10],[11,10]], targetFriend = 10",
        "output": "0"
      },
      {
        "input": "times = [[1,100],[2,30],[3,40],[4,50],[5,60],[6,70],[7,80],[8,90],[9,100]], targetFriend = 5",
        "output": "5"
      },
      {
        "input": "times = [[1,30],[2,29],[3,28],[4,27],[5,26],[6,25],[7,24],[8,23],[9,22],[10,21]], targetFriend = 5",
        "output": "5"
      },
      {
        "input": "times = [[1,20],[2,19],[3,18],[4,17],[5,16],[6,15],[7,14],[8,13],[9,12],[10,11]], targetFriend = 6",
        "output": "6"
      },
      {
        "input": "times = [[1,10000],[2,9999],[3,9998],[4,9997],[5,9996],[6,9995],[7,9994]], targetFriend = 6",
        "output": "6"
      },
      {
        "input": "times = [[1,10],[2,11],[3,12],[4,13],[5,14],[6,15],[7,16],[8,17],[9,18],[10,19]], targetFriend = 9",
        "output": "0"
      },
      {
        "input": "times = [[1,3],[3,5],[5,7],[7,9],[9,11],[11,13],[13,15],[15,17],[17,19],[19,21]], targetFriend = 5",
        "output": "0"
      },
      {
        "input": "times = [[1,10],[11,20],[2,19],[12,18],[3,17]], targetFriend = 3",
        "output": "3"
      },
      {
        "input": "times = [[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12]], targetFriend = 4",
        "output": "4"
      },
      {
        "input": "times = [[3,8],[5,10],[1,4],[7,12],[9,15]], targetFriend = 3",
        "output": "2"
      },
      {
        "input": "times = [[1,10],[2,12],[3,14],[4,16],[5,18],[6,20],[7,22],[8,24],[9,26],[10,28]], targetFriend = 9",
        "output": "0"
      },
      {
        "input": "times = [[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90]], targetFriend = 5",
        "output": "0"
      },
      {
        "input": "times = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]], targetFriend = 5",
        "output": "0"
      },
      {
        "input": "times = [[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[20,21]], targetFriend = 9",
        "output": "0"
      },
      {
        "input": "times = [[1,5],[1,4],[1,3],[1,2],[2,3],[2,4],[3,4],[4,5],[5,6],[6,7]], targetFriend = 8",
        "output": "0"
      },
      {
        "input": "times = [[10,25],[20,30],[5,15],[15,20],[1,10],[25,35],[30,40],[5,10],[15,20]], targetFriend = 5",
        "output": "0"
      },
      {
        "input": "times = [[1,10],[2,5],[3,6],[7,12],[8,9],[4,11]], targetFriend = 2",
        "output": "2"
      },
      {
        "input": "times = [[1,100],[2,50],[3,30],[4,20],[5,10],[6,5],[7,3]], targetFriend = 0",
        "output": "0"
      },
      {
        "input": "times = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], targetFriend = 8",
        "output": "0"
      },
      {
        "input": "times = [[1,10],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1]], targetFriend = 4",
        "output": "4"
      },
      {
        "input": "times = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14]], targetFriend = 7",
        "output": "3"
      },
      {
        "input": "times = [[5, 10], [1, 6], [11, 16], [21, 26], [10, 15], [6, 11], [16, 21], [26, 31], [2, 7], [7, 12]], targetFriend = 8",
        "output": "1"
      },
      {
        "input": "times = [[1, 20], [2, 19], [3, 18], [4, 17], [5, 16], [6, 15], [7, 14], [8, 13], [9, 12], [10, 11], [21, 40], [22, 39], [23, 38], [24, 37], [25, 36], [26, 35], [27, 34], [28, 33], [29, 32], [30, 31]], targetFriend = 15",
        "output": "5"
      },
      {
        "input": "times = [[1,10],[11,20],[21,30],[31,40],[41,50],[51,60]], targetFriend = 5",
        "output": "0"
      },
      {
        "input": "times = [[5,10],[10,20],[15,25],[20,30],[25,35],[30,40]], targetFriend = 3",
        "output": "0"
      },
      {
        "input": "times = [[5,10],[1,2],[3,4],[6,7],[8,9],[10,11]], targetFriend = 1",
        "output": "0"
      },
      {
        "input": "times = [[10,20],[5,15],[1,11],[25,35],[30,40]], targetFriend = 4",
        "output": "1"
      }
    ]
  },
  {
    "id": 2130,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Linked List",
      "Two Pointers"
    ],
    "problemDescription": "In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.\n\nFor example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.\n\nThe twin sum is defined as the sum of a node and its twin.\nGiven the head of a linked list with even length, return the maximum twin sum of the linked list.\n\u00a0\nExample 1:\n\n\nInput: head = [5,4,2,1]\nOutput: 6\nExplanation:\nNodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.\nThere are no other nodes with twins in the linked list.\nThus, the maximum twin sum of the linked list is 6. \n\nExample 2:\n\n\nInput: head = [4,2,2,3]\nOutput: 7\nExplanation:\nThe nodes with twins present in this linked list are:\n- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.\n- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.\nThus, the maximum twin sum of the linked list is max(7, 4) = 7. \n\nExample 3:\n\n\nInput: head = [1,100000]\nOutput: 100001\nExplanation:\nThere is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is an even integer in the range [2, 105].\n1 <= Node.val <= 105\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def pairSum(self, head: Optional[ListNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "head = [9,4,2,10,7,8]",
        "output": "17"
      },
      {
        "input": "head = [4,2,2,3]",
        "output": "7"
      },
      {
        "input": "head = [8,7,6,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "head = [99999,99999,99999,99999]",
        "output": "199998"
      },
      {
        "input": "head = [100000,1,100000,1]",
        "output": "100001"
      },
      {
        "input": "head = [5,4,2,1]",
        "output": "6"
      },
      {
        "input": "head = [1,100000]",
        "output": "100001"
      },
      {
        "input": "head = [1,2,3,4,5,6]",
        "output": "7"
      },
      {
        "input": "head = [9,4,2,10]",
        "output": "19"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8]",
        "output": "9"
      },
      {
        "input": "head = [3,3,5,5,7,7,9,9]",
        "output": "12"
      },
      {
        "input": "head = [8,9,10,11,12,13,14,15]",
        "output": "23"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]",
        "output": "3"
      },
      {
        "input": "head = [1,10,2,9,3,8,4,7,5,6,6,5,7,4,8,3,9,2,10,1]",
        "output": "20"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50]",
        "output": "55"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "17"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]",
        "output": "19"
      },
      {
        "input": "head = [50000,50000,50000,50000,50000,50000]",
        "output": "100000"
      },
      {
        "input": "head = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]",
        "output": "34"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]",
        "output": "32"
      },
      {
        "input": "head = [99999, 1, 99998, 2, 99997, 3, 99996, 4]",
        "output": "100003"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,90,80,70,60,50,40,30,20,10,1]",
        "output": "190"
      },
      {
        "input": "head = [99999,99998,99997,99996,99995,99994,99993,99992,99991,99990,99989,99988,99987,99986,99985,99984]",
        "output": "199983"
      },
      {
        "input": "head = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "130"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10]",
        "output": "11"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110,120]",
        "output": "130"
      },
      {
        "input": "head = [8,5,3,7,1,2,9,6]",
        "output": "14"
      },
      {
        "input": "head = [99999, 1, 99998, 2, 99997, 3, 99996, 4, 99995, 5]",
        "output": "100004"
      },
      {
        "input": "head = [1,10,2,9,3,8,4,7,5,6]",
        "output": "15"
      },
      {
        "input": "head = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "10"
      },
      {
        "input": "head = [1, 9, 2, 8, 3, 7, 4, 6, 5, 5]",
        "output": "14"
      },
      {
        "input": "head = [99999,1,99998,2,99997,3,99996,4]",
        "output": "100003"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1]",
        "output": "2"
      },
      {
        "input": "head = [10000,20000,30000,40000,50000,60000,70000,80000,90000,100000,110000,120000,130000,140000,150000,160000,170000,180000,190000,200000]",
        "output": "210000"
      },
      {
        "input": "head = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 99990, 99989, 99988, 99987, 99986, 99985, 99984, 99983, 99982, 99981, 99980, 99979, 99978, 99977, 99976, 99975, 99974, 99973, 99972, 99971, 99970, 99969, 99968, 99967, 99966, 99965, 99964, 99963, 99962, 99961, 99960, 99959, 99958, 99957, 99956, 99955, 99954, 99953, 99952, 99951, 99950, 99949, 99948, 99947, 99946, 99945, 99944, 99943, 99942, 99941, 99940, 99939, 99938, 99937, 99936, 99935, 99934, 99933, 99932, 99931, 99930, 99929, 99928, 99927, 99926, 99925, 99924, 99923, 99922, 99921, 99920, 99919, 99918, 99917, 99916, 99915, 99914, 99913, 99912, 99911, 99910, 99909, 99908, 99907, 99906, 99905, 99904, 99903, 99902, 99901, 99900]",
        "output": "199900"
      },
      {
        "input": "head = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "21"
      },
      {
        "input": "head = [25000,30000,35000,40000,45000,40000,35000,30000,25000,20000,20000,25000,30000,35000,40000,45000]",
        "output": "70000"
      },
      {
        "input": "head = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "32"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]",
        "output": "210"
      },
      {
        "input": "head = [1000,900,800,700,600,500,400,300,200,100]",
        "output": "1100"
      },
      {
        "input": "head = [100000,200000,300000,400000,500000,400000,300000,200000,100000,1]",
        "output": "900000"
      },
      {
        "input": "head = [10000,20000,30000,40000,50000,60000,70000,80000,90000,100000,110000,120000]",
        "output": "130000"
      },
      {
        "input": "head = [100000, 1, 200000, 2, 300000, 3, 400000, 4, 500000, 5, 600000, 6]",
        "output": "600001"
      },
      {
        "input": "head = [25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000]",
        "output": "50000"
      },
      {
        "input": "head = [5,6,7,8,9,10,11,12,13,14,15,16]",
        "output": "21"
      },
      {
        "input": "head = [5,3,6,7,1,9]",
        "output": "14"
      },
      {
        "input": "head = [99999,99998,99997,99996,1,2,3,4]",
        "output": "100003"
      },
      {
        "input": "head = [1, 99999, 2, 99998, 3, 99997, 4, 99996]",
        "output": "100003"
      },
      {
        "input": "head = [8,6,4,2,1,3,5,7,9,11,13,15,17,19,21,23]",
        "output": "31"
      },
      {
        "input": "head = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0]",
        "output": "190"
      },
      {
        "input": "head = [1,100,2,99,3,98,4,97,5,96,6,95,7,94,8,93,9,92,10,91]",
        "output": "110"
      },
      {
        "input": "head = [50000,49999,49998,49997,49996,49995,49994,49993,49992,49991]",
        "output": "99991"
      },
      {
        "input": "head = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53]",
        "output": "55"
      },
      {
        "input": "head = [5,6,7,8,9,10,1,2,3,4]",
        "output": "19"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "31"
      },
      {
        "input": "head = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]",
        "output": "5"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "21"
      },
      {
        "input": "head = [5,6,7,8,9,10,11,12,13,14]",
        "output": "19"
      },
      {
        "input": "head = [1,99999,2,99998,3,99997,4,99996,5,99995]",
        "output": "100004"
      },
      {
        "input": "head = [50000, 50000, 50000, 50000, 50000, 50000]",
        "output": "100000"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "13"
      },
      {
        "input": "head = [100000,99999,99998,99997,99996,99995]",
        "output": "199995"
      },
      {
        "input": "head = [150000,1,150000,1,150000,1,150000,1,150000,1,150000,1,150000,1,150000,1]",
        "output": "150001"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "1100"
      },
      {
        "input": "head = [100000,100000,100000,100000,100000,100000]",
        "output": "200000"
      },
      {
        "input": "head = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "2"
      },
      {
        "input": "head = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600]",
        "output": "1700"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "2"
      },
      {
        "input": "head = [1,100000,1,100000,1,100000,1,100000,1,100000,1,100000,1,100000,1,100000,1,100000,1,100000,1,100000,1,100000,1,100000,1,100000,1,100000]",
        "output": "100001"
      },
      {
        "input": "head = [100000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 100000]",
        "output": "200000"
      },
      {
        "input": "head = [50000,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,50000]",
        "output": "100000"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23]",
        "output": "24"
      },
      {
        "input": "head = [6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2]",
        "output": "8"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,55,60]",
        "output": "65"
      },
      {
        "input": "head = [31,29,27,25,23,21,19,17,15,13,11,9,7,5,3,1]",
        "output": "32"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "21"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10]",
        "output": "20"
      },
      {
        "input": "head = [8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "9"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100]",
        "output": "110"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "2"
      },
      {
        "input": "head = [100000,50000,25000,12500,6250,3125,1562,781,390,195,97,48,24,12,6,3]",
        "output": "100003"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]",
        "output": "42"
      },
      {
        "input": "head = [100000,90000,80000,70000,60000,50000,40000,30000,20000,10000]",
        "output": "110000"
      },
      {
        "input": "head = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "21"
      },
      {
        "input": "head = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009]",
        "output": "1011"
      },
      {
        "input": "head = [99999,1,99999,1,99999,1,99999,1]",
        "output": "100000"
      },
      {
        "input": "head = [10000,5000,1000,500,100,50,10,5]",
        "output": "10005"
      },
      {
        "input": "head = [12345, 67890, 54321, 98765, 23456, 87654]",
        "output": "153086"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
        "output": "17"
      }
    ]
  },
  {
    "id": 3067,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Array"
    ],
    "problemDescription": "You are given an unrooted weighted tree with n vertices representing servers numbered from 0 to n - 1, an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional edge between vertices ai and bi of weight weighti. You are also given an integer signalSpeed.\nTwo servers a and b are connectable through a server c if:\n\na < b, a != c and b != c.\nThe distance from c to a is divisible by signalSpeed.\nThe distance from c to b is divisible by signalSpeed.\nThe path from c to b and the path from c to a do not share any edges.\n\nReturn an integer array count of length n where count[i] is the number of server pairs that are connectable through the server i.\n\u00a0\nExample 1:\n\n\nInput: edges = [[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]], signalSpeed = 1\nOutput: [0,4,6,6,4,0]\nExplanation: Since signalSpeed is 1, count[c] is equal to the number of pairs of paths that start at c and do not share any edges.\nIn the case of the given path graph, count[c] is equal to the number of servers to the left of c multiplied by the servers to the right of c.\n\nExample 2:\n\n\nInput: edges = [[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]], signalSpeed = 3\nOutput: [2,0,0,0,0,0,2]\nExplanation: Through server 0, there are 2 pairs of connectable servers: (4, 5) and (4, 6).\nThrough server 6, there are 2 pairs of connectable servers: (4, 5) and (0, 5).\nIt can be shown that no two servers are connectable through servers other than 0 and 6.\n\n\u00a0\nConstraints:\n\n2 <= n <= 1000\nedges.length == n - 1\nedges[i].length == 3\n0 <= ai, bi < n\nedges[i] = [ai, bi, weighti]\n1 <= weighti <= 106\n1 <= signalSpeed <= 106\nThe input is generated such that edges represents a valid tree.\n\n",
    "starterCode": "class Solution:\n    def countPairsOfConnectableServers(self, edges: List[List[int]], signalSpeed: int) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,1],[4,5,1],[5,6,1],[6,7,1],[7,8,1],[8,9,1]], signalSpeed = 1",
        "output": "[0, 8, 14, 18, 20, 20, 18, 14, 8, 0]"
      },
      {
        "input": "edges = [[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]], signalSpeed = 1",
        "output": "[0, 4, 6, 6, 4, 0]"
      },
      {
        "input": "edges = [[0,1,5],[1,2,10],[2,3,15],[3,4,20]], signalSpeed = 5",
        "output": "[0, 3, 4, 3, 0]"
      },
      {
        "input": "edges = [[0,1,2],[0,2,3],[1,3,4],[1,4,5],[2,5,6],[2,6,7]], signalSpeed = 1",
        "output": "[9, 9, 9, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10]], signalSpeed = 5",
        "output": "[9, 9, 9, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,4],[1,2,8],[2,3,12],[3,4,16]], signalSpeed = 4",
        "output": "[0, 3, 4, 3, 0]"
      },
      {
        "input": "edges = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6]], signalSpeed = 2",
        "output": "[0, 2, 0, 0, 2, 0]"
      },
      {
        "input": "edges = [[0,1,1],[0,2,2],[0,3,3],[1,4,4],[1,5,5],[2,6,6],[3,7,7]], signalSpeed = 1",
        "output": "[16, 11, 6, 6, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,2],[1,2,4],[2,3,6],[3,4,8]], signalSpeed = 2",
        "output": "[0, 3, 4, 3, 0]"
      },
      {
        "input": "edges = [[0,1,3],[1,2,6],[2,3,9],[3,4,12],[4,5,15]], signalSpeed = 3",
        "output": "[0, 4, 6, 6, 4, 0]"
      },
      {
        "input": "edges = [[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]], signalSpeed = 3",
        "output": "[2, 0, 0, 0, 0, 0, 2]"
      },
      {
        "input": "edges = [[0,1,10],[1,2,20],[2,3,30],[3,4,40]], signalSpeed = 10",
        "output": "[0, 3, 4, 3, 0]"
      },
      {
        "input": "edges = [[0,1,4],[1,2,8],[2,3,12]], signalSpeed = 4",
        "output": "[0, 2, 2, 0]"
      },
      {
        "input": "edges = [[0,1,4],[1,2,5],[2,3,6]], signalSpeed = 2",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,2],[1,2,4],[2,3,8],[3,4,16]], signalSpeed = 2",
        "output": "[0, 3, 4, 3, 0]"
      },
      {
        "input": "edges = [[0,1,13],[0,2,26],[1,3,39],[1,4,52],[2,5,65],[2,6,78],[3,7,91],[4,8,104],[5,9,117],[6,10,130],[7,11,143],[8,12,156],[9,13,169]], signalSpeed = 13",
        "output": "[42, 51, 46, 22, 22, 22, 12, 12, 12, 12, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,19],[1,2,38],[1,3,57],[2,4,76],[2,5,95],[3,6,114],[3,7,133],[4,8,152],[5,9,171],[6,10,190],[7,11,209],[8,12,228],[9,13,247],[10,14,266],[11,15,285],[12,16,304],[13,17,323],[14,18,342]], signalSpeed = 19",
        "output": "[0, 89, 96, 89, 45, 45, 45, 32, 32, 32, 32, 17, 17, 17, 17, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,6],[0,2,12],[1,3,18],[1,4,24],[2,5,30],[2,6,36],[3,7,42],[3,8,48],[4,9,54],[5,10,60],[6,11,66]], signalSpeed = 6",
        "output": "[30, 36, 32, 19, 10, 10, 10, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,7],[0,2,14],[1,3,21],[1,4,28],[2,5,35],[2,6,42],[3,7,49],[3,8,56],[4,9,63],[4,10,70]], signalSpeed = 7",
        "output": "[21, 33, 17, 17, 17, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,11],[1,2,22],[2,3,33],[3,4,44],[4,5,55],[5,6,66],[6,7,77],[7,8,88],[8,9,99],[9,10,110]], signalSpeed = 11",
        "output": "[0, 9, 16, 21, 24, 25, 24, 21, 16, 9, 0]"
      },
      {
        "input": "edges = [[0,1,1],[0,2,2],[0,3,3],[0,4,4],[1,5,5],[1,6,6],[2,7,7],[2,8,8],[3,9,9],[3,10,10],[4,11,11],[4,12,12]], signalSpeed = 1",
        "output": "[54, 21, 21, 21, 21, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,9],[1,2,18],[2,3,27],[3,4,36],[4,5,45],[5,6,54],[6,7,63],[7,8,72],[8,9,81],[9,10,90],[10,11,99],[11,12,108]], signalSpeed = 9",
        "output": "[0, 11, 20, 27, 32, 35, 36, 35, 32, 27, 20, 11, 0]"
      },
      {
        "input": "edges = [[0,1,7],[0,2,14],[1,3,21],[1,4,28],[2,5,35],[2,6,42],[3,7,49],[3,8,56],[4,9,63],[5,10,70],[6,11,77]], signalSpeed = 7",
        "output": "[30, 36, 32, 19, 10, 10, 10, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,7],[0,2,14],[1,3,21],[1,4,28],[2,5,35],[2,6,42],[3,7,49],[3,8,56],[4,9,63],[4,10,70],[5,11,77],[5,12,84],[6,13,91],[6,14,98]], signalSpeed = 7",
        "output": "[49, 57, 57, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,17],[0,2,34],[1,3,51],[1,4,68],[2,5,85],[2,6,102],[3,7,119],[3,8,136],[4,9,153],[4,10,170],[5,11,187],[5,12,204],[6,13,221],[6,14,238]], signalSpeed = 17",
        "output": "[49, 57, 57, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,2],[1,2,4],[2,3,8],[3,4,16],[4,5,32],[5,6,64],[6,7,128],[7,8,256],[8,9,512]], signalSpeed = 2",
        "output": "[0, 8, 14, 18, 20, 20, 18, 14, 8, 0]"
      },
      {
        "input": "edges = [[0,1,100000],[1,2,200000],[2,3,300000],[3,4,400000],[4,5,500000],[5,6,600000],[6,7,700000]], signalSpeed = 100000",
        "output": "[0, 6, 10, 12, 12, 10, 6, 0]"
      },
      {
        "input": "edges = [[0,1,2],[1,2,4],[2,3,8],[3,4,16],[4,5,32],[5,6,64]], signalSpeed = 2",
        "output": "[0, 5, 8, 9, 8, 5, 0]"
      },
      {
        "input": "edges = [[0,1,10],[0,2,20],[0,3,30],[1,4,40],[1,5,50],[2,6,60],[2,7,70],[3,8,80],[3,9,90],[4,10,100],[5,11,110],[6,12,120]], signalSpeed = 10",
        "output": "[47, 36, 29, 21, 11, 11, 11, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9],[8,9,10]], signalSpeed = 2",
        "output": "[0, 4, 0, 2, 6, 6, 2, 0, 4, 0]"
      },
      {
        "input": "edges = [[0,1,5],[1,2,10],[1,3,15],[2,4,20],[3,5,25],[4,6,30],[5,7,35]], signalSpeed = 5",
        "output": "[0, 15, 10, 10, 6, 6, 0, 0]"
      },
      {
        "input": "edges = [[0,1,2],[1,2,4],[2,3,8],[3,4,16],[4,5,32],[5,6,64],[6,7,128],[7,8,256],[8,9,512],[9,10,1024]], signalSpeed = 2",
        "output": "[0, 9, 16, 21, 24, 25, 24, 21, 16, 9, 0]"
      },
      {
        "input": "edges = [[0,1,3],[0,2,6],[1,3,9],[1,4,12],[2,5,15],[2,6,18]], signalSpeed = 3",
        "output": "[9, 9, 9, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,7],[1,2,14],[2,3,21],[3,4,28],[4,5,35],[5,6,42],[6,7,49],[7,8,56]], signalSpeed = 7",
        "output": "[0, 7, 12, 15, 16, 15, 12, 7, 0]"
      },
      {
        "input": "edges = [[0,1,6],[1,2,12],[1,3,18],[3,4,24],[3,5,30],[5,6,36],[5,7,42],[7,8,48],[7,9,54],[9,10,60],[10,11,66]], signalSpeed = 6",
        "output": "[0, 19, 0, 31, 0, 35, 0, 31, 0, 18, 10, 0]"
      },
      {
        "input": "edges = [[0,1,10],[0,2,20],[1,3,15],[1,4,25],[2,5,30],[2,6,35]], signalSpeed = 5",
        "output": "[9, 9, 9, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,7],[0,2,14],[1,3,21],[1,4,28],[2,5,35],[2,6,42],[3,7,49],[4,8,56],[5,9,63],[6,10,70],[7,11,77],[8,12,84],[9,13,91],[10,14,98],[11,15,105],[12,16,112],[13,17,119],[14,18,126]], signalSpeed = 7",
        "output": "[81, 96, 96, 45, 45, 45, 45, 32, 32, 32, 32, 17, 17, 17, 17, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,3],[0,2,9],[1,3,12],[1,4,6],[2,5,15],[2,6,3]], signalSpeed = 3",
        "output": "[9, 9, 9, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,1],[0,2,1],[0,3,1],[0,4,1],[1,5,1],[1,6,1],[2,7,1],[2,8,1],[3,9,1],[3,10,1],[4,11,1],[4,12,1]], signalSpeed = 1",
        "output": "[54, 21, 21, 21, 21, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,5],[0,2,10],[0,3,15],[1,4,20],[2,5,25],[3,6,30]], signalSpeed = 5",
        "output": "[12, 5, 5, 5, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70]], signalSpeed = 5",
        "output": "[0, 6, 10, 12, 12, 10, 6, 0]"
      },
      {
        "input": "edges = [[0,1,5],[0,2,10],[1,3,15],[1,4,20],[2,5,25],[2,6,30],[3,7,35],[4,8,40],[5,9,45],[6,10,50],[7,11,55],[8,12,60],[9,13,65],[10,14,70]], signalSpeed = 5",
        "output": "[49, 57, 57, 24, 24, 24, 24, 13, 13, 13, 13, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100],[10,11,110]], signalSpeed = 10",
        "output": "[0, 10, 18, 24, 28, 30, 30, 28, 24, 18, 10, 0]"
      },
      {
        "input": "edges = [[0,1,10],[1,2,15],[2,3,20],[3,4,25],[4,5,30],[5,6,35],[6,0,40]], signalSpeed = 5",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "edges = [[0,1,1],[0,2,2],[1,3,3],[1,4,4],[2,5,5],[2,6,6],[3,7,7],[3,8,8],[4,9,9],[5,10,10],[6,11,11]], signalSpeed = 1",
        "output": "[30, 36, 32, 19, 10, 10, 10, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,11],[1,2,22],[2,3,33],[3,4,44],[4,5,55],[5,6,66],[6,7,77],[7,8,88],[8,9,99]], signalSpeed = 33",
        "output": "[0, 0, 5, 8, 1, 9, 8, 0, 5, 0]"
      },
      {
        "input": "edges = [[0,1,100],[1,2,200],[2,3,300],[3,4,400],[4,5,500],[5,6,600],[6,7,700],[7,8,800]], signalSpeed = 100",
        "output": "[0, 7, 12, 15, 16, 15, 12, 7, 0]"
      },
      {
        "input": "edges = [[0,1,3],[1,2,4],[2,3,5],[3,4,6],[4,5,7],[5,6,8],[6,7,9]], signalSpeed = 3",
        "output": "[0, 4, 0, 6, 6, 0, 4, 0]"
      },
      {
        "input": "edges = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40]], signalSpeed = 7",
        "output": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
      },
      {
        "input": "edges = [[0,1,11],[0,2,22],[2,3,33],[2,4,44],[4,5,55],[4,6,66],[6,7,77],[6,8,88],[8,9,99],[8,10,110],[9,11,121],[11,12,132]], signalSpeed = 11",
        "output": "[11, 0, 29, 0, 39, 0, 41, 0, 35, 20, 0, 11, 0]"
      },
      {
        "input": "edges = [[0,1,5],[1,2,15],[1,3,25],[3,4,35],[3,5,45],[5,6,55],[5,7,65],[7,8,75],[7,9,85],[9,10,95]], signalSpeed = 5",
        "output": "[0, 17, 0, 27, 0, 29, 0, 23, 0, 9, 0]"
      },
      {
        "input": "edges = [[0,1,8],[0,2,16],[1,3,24],[1,4,32],[2,5,40],[2,6,48],[3,7,56],[3,8,64],[4,9,72],[4,10,80],[5,11,88],[5,12,96],[6,13,104],[6,14,112]], signalSpeed = 8",
        "output": "[49, 57, 57, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,11],[0,2,22],[1,3,33],[1,4,44],[2,5,55],[2,6,66],[3,7,77],[4,8,88],[5,9,99],[6,10,110],[7,11,121],[8,12,132],[9,13,143],[10,14,154],[11,15,165],[12,16,176],[13,17,187],[14,18,198],[15,19,209],[16,20,220]], signalSpeed = 11",
        "output": "[99, 125, 112, 64, 64, 51, 51, 51, 51, 36, 36, 36, 36, 19, 19, 19, 19, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,19],[0,2,38],[1,3,57],[1,4,76],[2,5,95],[2,6,114],[3,7,133],[3,8,152],[4,9,171],[4,10,190],[5,11,209],[5,12,228],[6,13,247],[6,14,266]], signalSpeed = 19",
        "output": "[49, 57, 57, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45]], signalSpeed = 5",
        "output": "[0, 8, 14, 18, 20, 20, 18, 14, 8, 0]"
      },
      {
        "input": "edges = [[0,1,13],[1,2,26],[2,3,39],[3,4,52],[4,5,65],[5,6,78],[6,7,91],[7,8,104],[8,9,117],[9,10,130]], signalSpeed = 13",
        "output": "[0, 9, 16, 21, 24, 25, 24, 21, 16, 9, 0]"
      },
      {
        "input": "edges = [[0,1,15],[1,2,30],[2,3,45],[3,4,60],[4,5,75],[5,6,90],[6,7,105],[7,8,120]], signalSpeed = 15",
        "output": "[0, 7, 12, 15, 16, 15, 12, 7, 0]"
      },
      {
        "input": "edges = [[0,1,3],[0,2,9],[2,3,27],[2,4,81],[4,5,243],[4,6,729],[6,7,2187],[6,8,6561],[8,9,19683],[8,10,59049]], signalSpeed = 3",
        "output": "[9, 0, 23, 0, 29, 0, 27, 0, 17, 0, 0]"
      },
      {
        "input": "edges = [[0,1,7],[1,2,14],[2,3,21],[3,4,28],[4,5,35],[5,6,42],[6,7,49],[7,8,56],[8,9,63],[9,10,70]], signalSpeed = 7",
        "output": "[0, 9, 16, 21, 24, 25, 24, 21, 16, 9, 0]"
      },
      {
        "input": "edges = [[0,1,3],[1,2,9],[2,3,12],[1,4,7],[4,5,14],[5,6,8]], signalSpeed = 3",
        "output": "[0, 5, 3, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,13],[0,2,26],[1,3,39],[1,4,52],[2,5,65],[2,6,78],[3,7,91],[3,8,104],[4,9,117],[4,10,130],[5,11,143],[5,12,156],[6,13,169],[6,14,182]], signalSpeed = 13",
        "output": "[49, 57, 57, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,1],[0,2,3],[0,3,5],[1,4,7],[1,5,9],[2,6,11],[2,7,13],[3,8,15],[3,9,17]], signalSpeed = 1",
        "output": "[27, 15, 15, 15, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9]], signalSpeed = 3",
        "output": "[0, 0, 5, 8, 1, 9, 8, 0, 5, 0]"
      },
      {
        "input": "edges = [[0,1,10],[0,2,20],[0,3,30],[1,4,40],[1,5,50],[2,6,60],[2,7,70],[3,8,80],[3,9,90]], signalSpeed = 10",
        "output": "[27, 15, 15, 15, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,11],[0,2,22],[1,3,33],[1,4,44],[2,5,55],[2,6,66],[3,7,77],[3,8,88],[4,9,99],[4,10,110],[5,11,121],[5,12,132],[6,13,143],[6,14,154]], signalSpeed = 11",
        "output": "[49, 57, 57, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,5],[0,2,10],[1,3,15],[1,4,20],[2,5,25],[2,6,30],[3,7,35],[3,8,40],[4,9,45],[4,10,50],[5,11,55],[5,12,60],[6,13,65],[6,14,70]], signalSpeed = 5",
        "output": "[49, 57, 57, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,10],[0,2,20],[1,3,30],[1,4,40],[2,5,50],[2,6,60],[5,7,70],[5,8,80]], signalSpeed = 10",
        "output": "[15, 13, 19, 0, 0, 13, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,13],[1,2,26],[2,3,39],[3,4,52],[4,5,65],[5,6,78],[6,7,91],[7,8,104],[8,9,117],[9,10,130],[10,11,143]], signalSpeed = 13",
        "output": "[0, 10, 18, 24, 28, 30, 30, 28, 24, 18, 10, 0]"
      },
      {
        "input": "edges = [[0,1,6],[1,2,12],[2,3,18],[3,4,24],[4,5,30],[5,6,36],[6,7,42],[7,8,48],[8,9,54]], signalSpeed = 6",
        "output": "[0, 8, 14, 18, 20, 20, 18, 14, 8, 0]"
      },
      {
        "input": "edges = [[0,1,2],[1,2,4],[2,3,6],[3,4,8],[4,5,10],[5,6,12],[6,7,14],[7,8,16],[8,9,18],[9,10,20]], signalSpeed = 2",
        "output": "[0, 9, 16, 21, 24, 25, 24, 21, 16, 9, 0]"
      },
      {
        "input": "edges = [[0,1,3],[1,2,9],[2,3,27],[3,4,81],[4,5,243],[5,6,729],[6,7,2187],[7,8,6561],[8,9,19683]], signalSpeed = 3",
        "output": "[0, 8, 14, 18, 20, 20, 18, 14, 8, 0]"
      },
      {
        "input": "edges = [[0,1,7],[0,2,14],[1,3,21],[1,4,28],[2,5,35],[2,6,42],[3,7,49],[4,8,56],[5,9,63]], signalSpeed = 7",
        "output": "[20, 24, 20, 8, 8, 8, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,9],[1,2,18],[2,3,27],[3,4,36],[4,5,45],[5,6,54],[6,7,63],[7,8,72],[8,9,81],[9,10,90],[10,11,99]], signalSpeed = 9",
        "output": "[0, 10, 18, 24, 28, 30, 30, 28, 24, 18, 10, 0]"
      },
      {
        "input": "edges = [[0,1,17],[1,2,34],[2,3,51],[3,4,68],[4,5,85],[5,6,102],[6,7,119],[7,8,136],[8,9,153],[9,10,170],[10,11,187],[11,12,204]], signalSpeed = 17",
        "output": "[0, 11, 20, 27, 32, 35, 36, 35, 32, 27, 20, 11, 0]"
      },
      {
        "input": "edges = [[0,1,2],[1,2,4],[2,3,6],[3,4,8],[4,5,10],[5,6,12],[6,7,14],[7,8,16],[8,9,18]], signalSpeed = 2",
        "output": "[0, 8, 14, 18, 20, 20, 18, 14, 8, 0]"
      },
      {
        "input": "edges = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40]], signalSpeed = 5",
        "output": "[0, 7, 12, 15, 16, 15, 12, 7, 0]"
      },
      {
        "input": "edges = [[0,1,23],[1,2,46],[2,3,69],[3,4,92],[4,5,115],[5,6,138],[6,7,161],[7,8,184],[8,9,207],[9,10,230],[10,11,253],[11,12,276],[12,13,299],[13,14,322]], signalSpeed = 23",
        "output": "[0, 13, 24, 33, 40, 45, 48, 49, 48, 45, 40, 33, 24, 13, 0]"
      },
      {
        "input": "edges = [[0,1,12],[0,2,24],[1,3,36],[1,4,48],[2,5,60],[2,6,72],[3,7,84],[3,8,96],[4,9,108],[4,10,120],[5,11,132],[5,12,144],[6,13,156],[6,14,168]], signalSpeed = 12",
        "output": "[49, 57, 57, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,100],[1,2,200],[2,3,300],[3,4,400],[4,5,500],[5,6,600],[6,7,700],[7,8,800],[8,9,900]], signalSpeed = 50",
        "output": "[0, 8, 14, 18, 20, 20, 18, 14, 8, 0]"
      },
      {
        "input": "edges = [[0,1,19],[1,2,38],[2,3,57],[3,4,76],[4,5,95],[5,6,114],[6,7,133],[7,8,152],[8,9,171],[9,10,190],[10,11,209],[11,12,228],[12,13,247]], signalSpeed = 19",
        "output": "[0, 12, 22, 30, 36, 40, 42, 42, 40, 36, 30, 22, 12, 0]"
      },
      {
        "input": "edges = [[0,1,11],[1,2,22],[2,3,33],[3,4,44],[4,5,55],[5,6,66],[6,7,77],[7,8,88],[8,9,99]], signalSpeed = 11",
        "output": "[0, 8, 14, 18, 20, 20, 18, 14, 8, 0]"
      },
      {
        "input": "edges = [[0,1,11],[0,2,22],[0,3,33],[1,4,44],[1,5,55],[2,6,66],[2,7,77],[3,8,88],[3,9,99],[4,10,110],[4,11,121],[5,12,132],[5,13,143],[6,14,154],[6,15,165],[7,16,176],[7,17,187],[8,18,198],[8,19,209],[9,20,220],[9,21,231]], signalSpeed = 11",
        "output": "[147, 99, 99, 99, 39, 39, 39, 39, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,11],[1,2,22],[1,3,33],[2,4,44],[2,5,55],[3,6,66],[3,7,77],[4,8,88],[5,9,99],[6,10,110],[7,11,121]], signalSpeed = 11",
        "output": "[0, 35, 32, 32, 10, 10, 10, 10, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,3],[1,2,6],[1,3,9],[2,4,12],[2,5,15],[3,6,18],[3,7,21]], signalSpeed = 3",
        "output": "[0, 15, 11, 11, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,2],[0,2,4],[0,3,6],[1,4,8],[1,5,10],[2,6,12],[2,7,14],[3,8,16],[3,9,18]], signalSpeed = 2",
        "output": "[27, 15, 15, 15, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,6],[1,2,12],[2,3,18],[3,4,24],[4,5,30],[5,6,36],[6,7,42],[7,8,48],[8,9,54],[9,10,60],[10,11,66]], signalSpeed = 6",
        "output": "[0, 10, 18, 24, 28, 30, 30, 28, 24, 18, 10, 0]"
      },
      {
        "input": "edges = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70]], signalSpeed = 10",
        "output": "[0, 6, 10, 12, 12, 10, 6, 0]"
      },
      {
        "input": "edges = [[0,1,3],[0,2,6],[1,3,9],[1,4,12],[2,5,15],[2,6,18],[3,7,21],[4,8,24],[5,9,27],[6,10,30]], signalSpeed = 3",
        "output": "[25, 28, 28, 9, 9, 9, 9, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,2],[0,2,4],[1,3,6],[1,4,8],[2,5,10],[2,6,12]], signalSpeed = 2",
        "output": "[9, 9, 9, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,7],[1,2,14],[2,3,21],[3,4,28],[4,5,35],[5,6,42],[6,7,49],[7,8,56],[8,9,63]], signalSpeed = 7",
        "output": "[0, 8, 14, 18, 20, 20, 18, 14, 8, 0]"
      },
      {
        "input": "edges = [[0,1,17],[1,2,34],[1,3,51],[2,4,68],[2,5,85],[3,6,102],[3,7,119],[4,8,136],[5,9,153],[6,10,170],[7,11,187],[8,12,204],[9,13,221],[10,14,238]], signalSpeed = 17",
        "output": "[0, 55, 57, 51, 24, 24, 24, 13, 13, 13, 13, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,14],[0,2,28],[1,3,42],[1,4,56],[2,5,70],[2,6,84],[4,7,98],[4,8,112],[5,9,126],[5,10,140],[7,11,154],[7,12,168]], signalSpeed = 14",
        "output": "[35, 41, 35, 0, 35, 21, 0, 21, 0, 0, 0, 0, 0]"
      },
      {
        "input": "edges = [[0,1,3],[1,2,6],[2,3,9],[3,4,12],[4,5,15],[5,6,18]], signalSpeed = 3",
        "output": "[0, 5, 8, 9, 8, 5, 0]"
      }
    ]
  },
  {
    "id": 1462,
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "problemDescription": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course ai first if you want to take course bi.\n\nFor example, the pair [0, 1] indicates that you have to take course 0 before you can take course 1.\n\nPrerequisites can also be indirect. If course a is a prerequisite of course b, and course b is a prerequisite of course c, then course a is a prerequisite of course c.\nYou are also given an array queries where queries[j] = [uj, vj]. For the jth query, you should answer whether course uj is a prerequisite of course vj or not.\nReturn a boolean array answer, where answer[j] is the answer to the jth query.\n\u00a0\nExample 1:\n\n\nInput: numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]\nOutput: [false,true]\nExplanation: The pair [1, 0] indicates that you have to take course 1 before you can take course 0.\nCourse 0 is not a prerequisite of course 1, but the opposite is true.\n\nExample 2:\n\nInput: numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]\nOutput: [false,false]\nExplanation: There are no prerequisites, and each course is independent.\n\nExample 3:\n\n\nInput: numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]\nOutput: [true,true]\n\n\u00a0\nConstraints:\n\n2 <= numCourses <= 100\n0 <= prerequisites.length <= (numCourses * (numCourses - 1) / 2)\nprerequisites[i].length == 2\n0 <= ai, bi <= numCourses - 1\nai != bi\nAll the pairs [ai, bi] are unique.\nThe prerequisites graph has no cycles.\n1 <= queries.length <= 104\n0 <= ui, vi <= numCourses - 1\nui != vi\n\n",
    "starterCode": "class Solution:\n    def checkIfPrerequisite(self, numCourses: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        ",
    "testCases": [
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0]]",
        "output": "[True, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[1,2],[2,3]], queries = [[0,3],[1,3],[0,2]]",
        "output": "[True, True, True]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,4]], queries = [[0,3],[1,4],[2,3]]",
        "output": "[True, True, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[1,2]], queries = [[0,2],[2,0]]",
        "output": "[True, False]"
      },
      {
        "input": "numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]",
        "output": "[False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,3],[2,4]], queries = [[0,3],[0,4],[3,4]]",
        "output": "[True, True, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,3],[2,4]], queries = [[0,3],[0,4],[1,4],[2,3]]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]",
        "output": "[True, True]"
      },
      {
        "input": "numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]",
        "output": "[False, True]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[1,2],[2,3]], queries = [[0,3],[1,2],[2,0],[3,0]]",
        "output": "[True, True, False, False]"
      },
      {
        "input": "numCourses = 9, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8]], queries = [[0,8],[1,7],[2,6],[3,5],[4,5],[0,4],[1,2]]",
        "output": "[True, True, True, False, False, True, False]"
      },
      {
        "input": "numCourses = 15, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], queries = [[0,7],[0,8],[0,9],[0,10],[0,11],[0,12],[0,13],[0,14],[1,11],[1,12],[2,7],[2,8]]",
        "output": "[True, True, True, True, True, True, True, True, False, False, False, False]"
      },
      {
        "input": "numCourses = 15, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], queries = [[0,14],[1,13],[2,12],[3,11],[4,10],[5,9],[6,8],[7,7]]",
        "output": "[True, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 8, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,7],[5,7],[6,7]], queries = [[0,7],[1,5],[2,4],[3,6],[5,7]]",
        "output": "[True, False, False, False, True]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], queries = [[0,9],[1,8],[2,7],[3,6],[4,5],[5,4]]",
        "output": "[True, True, True, True, True, False]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], queries = [[0,9],[1,8],[2,7],[3,6],[4,5],[0,3],[1,2]]",
        "output": "[True, True, False, False, False, True, False]"
      },
      {
        "input": "numCourses = 12, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,8],[4,9],[5,10],[5,11],[6,10],[6,11],[7,11],[8,11],[9,11]], queries = [[0,7],[0,8],[0,9],[0,10],[0,11],[1,10],[1,11],[2,10],[2,11],[3,11],[4,11]]",
        "output": "[True, True, True, True, True, False, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 9, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,7],[4,8]], queries = [[0,7],[0,8],[1,7],[1,8],[2,7],[2,8],[0,3],[0,4]]",
        "output": "[True, True, True, True, False, False, True, True]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,9],[6,9],[7,9],[8,9]], queries = [[0,9],[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9]]",
        "output": "[True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 9, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,7],[5,7],[6,8]], queries = [[0,7],[0,8],[1,5],[1,6],[2,7],[2,8],[3,7],[3,8],[4,7],[5,7],[6,8]]",
        "output": "[True, True, False, False, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], queries = [[0,9],[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9]]",
        "output": "[True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5]], queries = [[0,5],[1,4],[2,3],[0,2]]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "numCourses = 12, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[6,11]], queries = [[0,11],[1,10],[2,9],[3,8],[4,7],[5,6],[0,5],[1,2]]",
        "output": "[True, False, False, True, False, False, True, False]"
      },
      {
        "input": "numCourses = 7, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[3,6],[4,6],[5,6]], queries = [[0,6],[1,6],[2,6],[3,6],[4,6],[5,6],[1,5],[0,4],[0,3]]",
        "output": "[True, True, True, True, True, True, False, True, True]"
      },
      {
        "input": "numCourses = 9, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8]], queries = [[0,3],[0,7],[1,8],[2,6],[3,5]]",
        "output": "[True, True, True, True, False]"
      },
      {
        "input": "numCourses = 9, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[0,4],[1,5],[2,6],[3,7],[4,8]], queries = [[0,8],[1,7],[2,6],[3,5],[4,4],[5,3],[6,2],[7,1],[8,0]]",
        "output": "[True, True, True, True, True, False, False, False, False]"
      },
      {
        "input": "numCourses = 7, prerequisites = [[0,1],[0,2],[1,3],[2,3],[3,4],[4,5],[5,6]], queries = [[0,3],[1,5],[2,6],[3,6]]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], queries = [[0,9],[1,8],[2,7],[3,6],[4,5]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "numCourses = 7, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,4],[2,5],[4,6],[5,6]], queries = [[0,6],[1,6],[2,6],[3,6],[4,6],[5,6],[1,5]]",
        "output": "[True, True, True, False, True, True, False]"
      },
      {
        "input": "numCourses = 8, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], queries = [[0,7],[1,6],[2,5],[3,4],[0,3]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,3],[2,4],[3,5],[4,5]], queries = [[0,5],[1,4],[2,4],[3,5],[1,3],[2,3]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5]], queries = [[0,3],[0,4],[0,5],[1,2],[1,5],[2,3],[2,4]]",
        "output": "[True, True, True, False, False, False, False]"
      },
      {
        "input": "numCourses = 8, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,3],[2,5],[3,6],[4,6],[5,6],[6,7]], queries = [[0,3],[0,4],[0,5],[1,6],[1,7],[2,6],[2,7]]",
        "output": "[True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 8, prerequisites = [[0,2],[1,2],[2,3],[3,5],[3,6],[6,7],[7,5]], queries = [[0,5],[0,7],[1,5],[1,7],[2,5],[2,7],[3,7]]",
        "output": "[True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,7],[5,8],[6,8],[7,9],[8,9]], queries = [[0,9],[1,9],[2,9],[0,8],[0,7],[0,6],[0,5],[0,4],[0,3],[0,2],[0,1],[1,8],[1,7],[1,6],[1,5],[1,4],[2,7],[2,6],[2,5],[3,6],[3,5],[4,6],[4,5]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, False, True, False, False, True, False, True, True, False, False, False, False]"
      },
      {
        "input": "numCourses = 12, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[6,11],[7,10],[8,11]], queries = [[0,10],[0,11],[1,10],[1,11],[2,10],[2,11],[3,10],[3,11],[4,10],[4,11]]",
        "output": "[True, True, True, True, True, True, True, True, False, False]"
      },
      {
        "input": "numCourses = 8, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], queries = [[0,7],[1,6],[2,5],[3,4],[4,3]]",
        "output": "[True, True, True, True, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5]], queries = [[0,5],[1,4],[2,3],[0,2],[3,5]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[0,2],[1,3],[2,3],[3,4],[4,5]], queries = [[0,5],[1,5],[2,5],[0,4],[1,4],[2,4]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 8, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[0,7],[1,6],[2,5],[3,4]], queries = [[0,3],[0,4],[0,5],[0,6],[0,7],[1,3],[1,4],[1,5],[1,6],[1,7],[2,3],[2,4],[2,5],[2,6],[2,7],[3,4],[3,5],[3,6],[3,7],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 7, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], queries = [[0,3],[0,4],[0,5],[0,6],[1,5],[1,6]]",
        "output": "[True, True, True, True, False, False]"
      },
      {
        "input": "numCourses = 8, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], queries = [[0,7],[1,6],[2,5],[3,4],[0,2],[1,3]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,9],[1,8],[2,7],[3,6],[4,5],[0,1],[1,2],[2,3],[3,4]], queries = [[0,8],[1,7],[2,6],[3,5],[4,6]]",
        "output": "[True, True, True, True, False]"
      },
      {
        "input": "numCourses = 8, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], queries = [[0,7],[1,7],[2,7],[3,7],[4,7],[5,7]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 7, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,3],[2,4],[3,5],[4,5],[5,6]], queries = [[0,3],[0,4],[0,5],[0,6],[1,5],[1,6],[2,5],[2,6],[3,6],[4,6]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 11, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], queries = [[0,10],[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1]]",
        "output": "[True, True, True, True, True, True, False, False, False, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5]], queries = [[0,5],[0,4],[1,4],[2,5]]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[1,2],[0,2],[2,4],[3,4],[4,5]], queries = [[0,5],[2,5],[3,5],[0,3],[5,0]]",
        "output": "[True, True, True, False, False]"
      },
      {
        "input": "numCourses = 15, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], queries = [[0,14],[1,13],[2,12],[3,11],[4,10],[5,9],[6,8],[0,10],[10,0]]",
        "output": "[True, True, True, True, True, True, True, True, False]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[2,3],[4,5],[6,7],[8,9],[1,2],[3,4],[5,6],[7,8]], queries = [[0,9],[2,8],[4,7],[6,5],[0,8]]",
        "output": "[True, True, True, False, True]"
      },
      {
        "input": "numCourses = 9, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,8],[6,8]], queries = [[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[1,5],[1,6],[1,7],[1,8],[2,3],[2,4],[2,7],[2,8],[3,8],[4,8],[5,6],[6,7]]",
        "output": "[True, True, True, True, True, True, False, False, True, True, False, False, False, True, False, True, False, False]"
      },
      {
        "input": "numCourses = 8, prerequisites = [[0,2],[1,2],[2,3],[2,4],[3,5],[4,5],[5,6],[5,7]], queries = [[0,5],[0,6],[0,7],[1,5],[1,6],[1,7],[2,6],[2,7],[3,6],[3,7],[4,6],[4,7]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5]], queries = [[0,5],[1,5],[2,5],[0,4]]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[4,5],[5,6],[6,7],[7,8],[8,9]], queries = [[0,9],[0,8],[1,7],[2,6],[3,5]]",
        "output": "[True, True, True, False, False]"
      },
      {
        "input": "numCourses = 12, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[0,5],[1,6],[2,7],[3,8],[4,9],[5,10],[6,11]], queries = [[0,11],[1,10],[2,9],[3,8],[4,7],[5,6],[0,7],[1,8],[2,7],[3,6],[4,5],[5,4]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, False]"
      },
      {
        "input": "numCourses = 7, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,4],[3,5],[3,6],[4,5],[4,6],[5,6]], queries = [[0,5],[0,6],[1,5],[1,6],[2,5],[2,6],[3,6]]",
        "output": "[True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], queries = [[0,9],[0,8],[1,6],[3,9],[5,4]]",
        "output": "[True, True, True, True, False]"
      },
      {
        "input": "numCourses = 7, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[0,3],[1,4],[2,5]], queries = [[0,6],[1,5],[2,4],[0,5],[3,4],[0,4],[4,6],[1,3]]",
        "output": "[True, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 15, prerequisites = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14]], queries = [[0,13],[0,14],[1,13],[1,14],[2,13],[2,14],[3,13],[3,14],[4,13],[4,14]]",
        "output": "[True, True, True, True, False, False, False, False, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[0,4],[1,2],[1,3],[2,4],[3,4]], queries = [[0,2],[0,3],[1,4],[2,3],[3,2]]",
        "output": "[True, True, True, False, False]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9]], queries = [[0,5],[0,6],[0,7],[0,8],[0,9],[1,9],[2,9],[3,5],[3,6],[4,7]]",
        "output": "[True, True, True, True, True, False, False, False, False, False]"
      },
      {
        "input": "numCourses = 12, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[6,11],[7,11],[8,11],[9,11],[10,11]], queries = [[0,11],[1,11],[2,11],[3,11],[4,11],[5,11],[6,11],[7,11],[8,11],[9,11],[10,11]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,9],[6,9]], queries = [[0,9],[1,8],[2,7],[3,6],[4,5]]",
        "output": "[True, True, False, False, False]"
      },
      {
        "input": "numCourses = 8, prerequisites = [[0,1],[1,2],[2,3],[0,4],[4,5],[5,6],[6,7],[2,6]], queries = [[0,7],[1,6],[2,5],[3,4]]",
        "output": "[True, True, False, False]"
      },
      {
        "input": "numCourses = 15, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,8],[4,9],[5,10],[5,11],[6,11],[6,12],[7,13],[8,13],[9,13],[10,14],[11,14],[12,14]], queries = [[0,7],[0,8],[0,9],[0,10],[0,11],[0,12],[0,13],[0,14]]",
        "output": "[True, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 12, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]], queries = [[0,11],[1,10],[2,9],[3,8],[4,7],[5,6]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,5],[1,6],[2,7],[3,8],[4,9]], queries = [[0,9],[1,8],[2,7],[3,6],[4,5],[0,8],[1,7],[2,6],[3,5],[0,7],[1,6],[2,5],[3,4]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 7, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,4],[5,6]], queries = [[0,4],[0,5],[0,6],[1,3],[1,5],[1,6],[2,5],[2,6],[3,5],[4,6]]",
        "output": "[True, True, True, True, False, False, True, True, False, False]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,2],[1,2],[2,3],[2,4],[3,5],[4,5],[5,6],[5,7],[6,8],[7,9]], queries = [[0,5],[1,6],[2,8],[3,9],[4,7],[5,8]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 7, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], queries = [[0,3],[0,5],[1,6],[3,5],[4,6]]",
        "output": "[True, True, False, False, False]"
      },
      {
        "input": "numCourses = 12, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]], queries = [[0,11],[1,10],[2,9],[3,8],[4,7],[5,6],[0,9],[1,8],[2,7],[3,6],[4,5],[0,8],[1,7],[2,6],[3,5],[0,7],[1,6],[2,5],[3,4]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 10, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], queries = [[0,9],[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9]]",
        "output": "[True, True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 8, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,7],[5,7],[6,7]], queries = [[0,7],[1,7],[2,7],[3,7],[4,7],[5,7],[6,7]]",
        "output": "[True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,2]], queries = [[0,2],[1,0],[2,0]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[1,2],[2,3]], queries = [[0,3],[3,0],[1,2]]",
        "output": "[True, False, True]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 3], [2, 4]], queries = [[0, 3], [0, 4], [1, 2], [3, 4]]",
        "output": "[True, True, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[1,2],[0,3],[3,4],[1,4]], queries = [[0,2],[2,0],[0,4],[4,0]]",
        "output": "[True, False, True, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5]], queries = [[0,5],[5,0],[1,4],[4,1]]",
        "output": "[True, False, True, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [], queries = [[0,1],[1,0],[0,2],[2,0]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0],[2,0]], queries = [[0,1],[2,1],[1,2]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]], queries = [[0,1],[0,2],[1,3],[2,3]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[1,0],[0,2],[2,3],[3,4]], queries = [[1,4],[0,4],[0,3],[0,2]]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[1,2],[0,2]], queries = [[0,1],[1,2],[0,2],[3,0]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,2]], queries = [[0,1],[1,0],[0,2],[2,0]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,2],[1,3],[2,4],[3,4],[4,5]], queries = [[1,5],[1,4],[2,5],[3,5],[4,5]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[2,3]], queries = [[0,3],[1,3],[0,2]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]], queries = [[0,1],[0,2],[0,3],[1,3],[2,3]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[1,2],[2,3]], queries = [[0,3],[1,2]]",
        "output": "[True, True]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[1,3],[3,1]]",
        "output": "[True, False, True, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0, 1], [1, 2], [2, 3]], queries = [[0, 3], [1, 3], [2, 3], [3, 0]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,4],[2,4],[3,5],[4,5]], queries = [[1,5],[2,5],[3,4]]",
        "output": "[True, True, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[1,3]]",
        "output": "[True, False, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,0],[2,0],[3,1],[4,1],[5,2],[5,3]], queries = [[5,0],[5,1],[4,2],[4,3],[2,1]]",
        "output": "[True, True, False, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[0,1]], queries = [[0,1],[1,0],[1,2]]",
        "output": "[True, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[0,2],[1,3],[2,3]], queries = [[0,3],[3,0],[1,2],[2,1]]",
        "output": "[True, False, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,3],[2,4]], queries = [[0,3],[0,4],[1,2]]",
        "output": "[True, True, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [], queries = [[0,1],[1,2],[2,3],[3,0]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[2,3]], queries = [[0,2],[1,3],[0,3],[2,1]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[1,2],[2,3]], queries = [[0,3],[0,2],[1,3],[2,0]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,0],[2,0],[3,1],[4,1],[5,2],[5,3]], queries = [[0,1],[0,3],[0,5],[1,2],[2,3],[3,4]]",
        "output": "[False, False, False, False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[1,0],[2,0],[3,1]], queries = [[0,3],[1,3],[2,3]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0]], queries = [[0,1],[1,0],[1,2],[0,2]]",
        "output": "[False, True, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]], queries = [[0,1],[1,3],[0,3]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,2],[2,3],[3,4],[4,5]], queries = [[1,5],[2,4],[3,5],[0,5]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,2]], queries = [[0,1],[1,0],[2,0]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [], queries = [[0,1],[1,0],[2,3],[3,2]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[1,2],[0,2]], queries = [[0,1],[1,2],[0,2],[2,0],[1,0],[2,1]]",
        "output": "[True, True, True, False, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[1,2],[2,3],[3,4],[1,3],[1,4]], queries = [[0,1],[1,0],[2,4]]",
        "output": "[False, False, True]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[2,3]], queries = [[0,1],[1,2],[2,3],[3,0]]",
        "output": "[True, False, True, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0],[1,2]], queries = [[0,1],[1,2],[0,2]]",
        "output": "[False, True, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,0],[2,1],[3,2],[4,3],[5,4]], queries = [[0,5],[1,5],[2,5],[3,5],[4,5]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[1,0],[2,0],[3,1],[3,2]], queries = [[0,3],[1,3],[2,3]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[1,2],[1,3],[2,4],[3,4],[4,5]], queries = [[0,5],[1,5],[2,5]]",
        "output": "[True, True, True]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[1,4],[2,4],[3,4]], queries = [[0,4],[1,4],[2,4],[3,4],[4,0]]",
        "output": "[True, True, True, True, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[1,3],[3,0]]",
        "output": "[True, False, True, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5]], queries = [[0,5],[5,0],[2,3],[3,2]]",
        "output": "[True, False, True, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,0],[2,0],[3,1],[4,2],[5,3],[5,4]], queries = [[0,5],[1,5],[2,5],[3,5],[4,5]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,1],[0,4],[1,3],[2,4],[4,0]]",
        "output": "[True, True, True, True, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,0],[2,0],[3,1],[4,1],[5,2]], queries = [[0,5],[1,4],[2,5],[0,3],[3,2]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[1,4],[0,3],[1,3],[0,2],[1,2],[2,4],[0,1],[2,3],[4,0]]",
        "output": "[True, True, True, True, True, True, True, True, True, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[0,1]], queries = [[0,1],[1,0],[0,2],[2,0]]",
        "output": "[True, False, False, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,0],[2,0],[3,1],[4,1],[5,2]], queries = [[0,1],[0,2],[1,2],[2,3],[3,4],[4,5]]",
        "output": "[False, False, False, False, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[2,3]]",
        "output": "[True, False, True]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[1,2],[2,3]], queries = [[0,3],[3,0],[1,2],[0,2]]",
        "output": "[True, False, True, True]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[0,2],[1,3],[2,3]], queries = [[0,3],[1,3],[2,3],[3,0]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5]], queries = [[0,5],[2,5]]",
        "output": "[True, True]"
      },
      {
        "input": "numCourses = 3, prerequisites = [], queries = [[1,0],[0,1],[2,1]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0]], queries = [[0,1],[2,0],[1,2]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0],[2,0]], queries = [[0,1],[1,0],[1,2],[2,1],[2,0]]",
        "output": "[False, True, False, False, True]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0],[1,2]], queries = [[0,1],[1,0],[0,2],[2,0]]",
        "output": "[False, True, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[1,2],[0,3],[3,2]], queries = [[0,2],[1,3],[2,0],[0,1]]",
        "output": "[True, False, False, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,2],[1,4],[1,5],[2,3],[3,4],[3,5]], queries = [[1,3],[1,4],[2,5],[3,1]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,2],[1,3],[2,4],[3,5]], queries = [[1,4],[2,5],[3,4],[0,5]]",
        "output": "[True, False, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0],[1,2]], queries = [[0,1],[1,2],[2,0]]",
        "output": "[False, True, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[1,2],[3,4]], queries = [[0,2],[3,4]]",
        "output": "[True, True]"
      },
      {
        "input": "numCourses = 3, prerequisites = [], queries = [[0,1],[1,0],[1,2],[2,1]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,2],[0,2]], queries = [[0,1],[1,0],[0,2],[2,0]]",
        "output": "[False, False, True, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,0],[2,0],[3,1],[4,2],[5,3]], queries = [[0,5],[1,5],[2,5],[3,5],[4,5]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[1,3],[2,4]]",
        "output": "[True, False, True, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,0],[2,0],[3,1],[3,2],[4,3],[5,4]], queries = [[0,5],[1,5],[2,5],[3,5]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "numCourses = 7, prerequisites = [[1,0],[2,0],[3,1],[4,2],[5,3],[6,4],[6,5]], queries = [[0,6],[1,6],[2,6],[3,6],[4,6],[5,6]]",
        "output": "[False, False, False, False, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0]], queries = [[2,0],[2,1]]",
        "output": "[False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0],[1,2]], queries = [[0,1],[1,0],[0,2]]",
        "output": "[False, True, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[2,3],[1,3],[2,4],[3,5]], queries = [[0,3],[2,5],[0,5],[1,2]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[0,2],[1,3],[2,3],[3,4]], queries = [[0,4],[1,4],[2,4]]",
        "output": "[True, True, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,5]], queries = [[0,3],[0,4],[1,5],[2,3]]",
        "output": "[True, True, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[1,2],[2,3],[3,4],[4,0]], queries = [[1,4],[4,1],[0,3],[3,2]]",
        "output": "[True, False, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,2],[2,0]], queries = [[1,0],[2,0],[0,1]]",
        "output": "[True, True, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,2]], queries = [[0,1],[0,2],[1,0]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0]], queries = [[0,1],[1,0]]",
        "output": "[False, True]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[0,1],[0,2]], queries = [[0,1],[1,0],[1,2],[2,1],[2,0],[0,2]]",
        "output": "[True, False, False, False, False, True]"
      },
      {
        "input": "numCourses = 4, prerequisites = [], queries = [[0,1],[1,0],[1,2],[2,1]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]], queries = [[0,1],[1,3],[0,3],[3,0]]",
        "output": "[False, False, False, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5]], queries = [[0,5],[1,4],[2,3],[0,2],[3,1]]",
        "output": "[True, True, True, True, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1, 2]], queries = [[0, 2], [1, 0], [2, 1]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[0,2],[1,3],[2,3]], queries = [[1,3],[2,3],[3,0],[3,1]]",
        "output": "[True, True, False, False]"
      },
      {
        "input": "numCourses = 8, prerequisites = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], queries = [[0,7],[1,7],[2,7],[3,7],[4,7],[5,7],[6,7]]",
        "output": "[True, True, True, True, True, True, True]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]], queries = [[0,1],[0,2],[1,3],[2,3],[3,0]]",
        "output": "[False, False, False, False, True]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0, 1], [1, 4], [2, 4], [3, 4]], queries = [[0, 4], [1, 2], [2, 0], [3, 1]]",
        "output": "[True, False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]], queries = [[0,1],[0,2],[1,2],[2,3],[3,0]]",
        "output": "[False, False, False, False, True]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[0,2],[1,3],[1,4]], queries = [[0,3],[0,4]]",
        "output": "[True, True]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[0,2],[1,3],[1,4],[2,4]], queries = [[0,4],[0,3],[1,4],[2,3],[3,4]]",
        "output": "[True, True, True, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [], queries = [[0,1],[1,2],[2,0]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,2],[1,0]], queries = [[0,1],[1,0],[2,0]]",
        "output": "[False, True, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0],[2,1]], queries = [[0,1],[1,2],[0,2]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0],[1,2]], queries = [[0,1],[1,2]]",
        "output": "[False, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,0],[2,0],[3,1],[3,2]], queries = [[0,1],[1,3],[2,3],[3,0]]",
        "output": "[False, False, False, True]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[1,0],[2,0],[3,0]], queries = [[0,1],[0,2],[0,3],[1,2]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[0,2],[1,3],[2,3],[2,4]], queries = [[0,3],[0,4],[1,4],[2,0]]",
        "output": "[True, True, False, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,2],[1,3],[2,4],[3,5]], queries = [[1,4],[4,1],[1,5],[5,1]]",
        "output": "[True, False, True, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [[1,0],[1,2]], queries = [[0,1],[1,0],[1,2]]",
        "output": "[False, True, True]"
      },
      {
        "input": "numCourses = 3, prerequisites = [], queries = [[0,1],[1,0],[1,2]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[1,2],[2,3]], queries = [[0,1],[1,3],[0,3]]",
        "output": "[True, True, True]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[0,1],[2,3],[4,5]], queries = [[0,1],[2,3],[4,5],[3,4]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "numCourses = 3, prerequisites = [], queries = [[0,1],[1,0],[2,1]]",
        "output": "[False, False, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1,0],[2,0],[3,1],[4,2],[5,3],[5,4]], queries = [[0,5],[1,5],[2,5],[3,5]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "numCourses = 6, prerequisites = [[1, 0], [2, 0], [3, 1], [4, 1], [5, 2]], queries = [[3, 0], [5, 0], [4, 2], [1, 2]]",
        "output": "[True, True, False, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[0,2],[1,3],[2,3],[1,4],[2,4]], queries = [[0,4],[1,4],[2,3],[3,4]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[2,0],[1,0],[3,1],[3,2]], queries = [[0,1],[2,0],[0,3],[3,0],[2,3]]",
        "output": "[False, True, False, True, False]"
      },
      {
        "input": "numCourses = 4, prerequisites = [[0,1],[1,2],[2,3]], queries = [[0,3],[1,3],[0,2],[3,0]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "numCourses = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,1],[1,3],[0,4],[2,3],[4,2]]",
        "output": "[True, True, True, True, False]"
      }
    ]
  },
  {
    "id": 376,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n\nFor example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.\nIn contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n\nA subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\nGiven an integer array nums, return the length of the longest wiggle subsequence of nums.\n\u00a0\nExample 1:\n\nInput: nums = [1,7,4,9,2,5]\nOutput: 6\nExplanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n\nExample 2:\n\nInput: nums = [1,17,5,10,13,15,10,5,16,8]\nOutput: 7\nExplanation: There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n\nExample 3:\n\nInput: nums = [1,2,3,4,5,6,7,8,9]\nOutput: 2\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 1000\n0 <= nums[i] <= 1000\n\n\u00a0\nFollow up: Could you solve this in O(n) time?\n",
    "starterCode": "class Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,2,2,3]",
        "output": "2"
      },
      {
        "input": "nums = [80,80,80,80,80,80]",
        "output": "1"
      },
      {
        "input": "nums = [3,3,3,2,5,25,50,41,60,70,55,65,80,90,99]",
        "output": "7"
      },
      {
        "input": "nums = [1,1,1,1]",
        "output": "1"
      },
      {
        "input": "nums = [2,1]",
        "output": "2"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [0,0]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,7,4,9,2,5]",
        "output": "6"
      },
      {
        "input": "nums = [0,0,1,0,0,2,0,0,3]",
        "output": "6"
      },
      {
        "input": "nums = [1,3,2,2,3,1,4]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,2,3,4,4,5]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9]",
        "output": "2"
      },
      {
        "input": "nums = [3,3,3,2,5]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5]",
        "output": "2"
      },
      {
        "input": "nums = [1,7,4,9,2,5]",
        "output": "6"
      },
      {
        "input": "nums = [5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [3,3,3,2,5,25,35,45]",
        "output": "3"
      },
      {
        "input": "nums = [1,2]",
        "output": "2"
      },
      {
        "input": "nums = [1,17,5,10,13,15,10,5,16,8]",
        "output": "7"
      },
      {
        "input": "nums = [1,1]",
        "output": "1"
      },
      {
        "input": "nums = [100,100]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,2,1]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5]",
        "output": "2"
      },
      {
        "input": "nums = [3,3,3,3,3]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,2,2,3,1,4,3,2,1,2,3,4,5,6,7,8,9]",
        "output": "8"
      },
      {
        "input": "nums = [10,20,10,20,30,20,30,40,30,40,50,40,50,60]",
        "output": "10"
      },
      {
        "input": "nums = [5, 3, 1, 2, 3, 4, 5, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]",
        "output": "6"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]",
        "output": "3"
      },
      {
        "input": "nums = [3,3,3,2,1,4,5,6,7,8,9,10]",
        "output": "3"
      },
      {
        "input": "nums = [1,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4]",
        "output": "14"
      },
      {
        "input": "nums = [3, 3, 3, 2, 2, 1, 1, 0, 0, 1, 1, 2, 2, 3, 3]",
        "output": "3"
      },
      {
        "input": "nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "20"
      },
      {
        "input": "nums = [1, 18, 3, 7, 10, 14, 6, 15, 4, 9, 12]",
        "output": "8"
      },
      {
        "input": "nums = [50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100]",
        "output": "16"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2]",
        "output": "8"
      },
      {
        "input": "nums = [5, 3, 3, 3, 5, 5, 2, 3, 4, 3, 2, 1]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10,9,11,10,12,11,13,12,14]",
        "output": "26"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7]",
        "output": "2"
      },
      {
        "input": "nums = [1,3,2,4,5,3,6,7,8,6,9,10,11,10]",
        "output": "9"
      },
      {
        "input": "nums = [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "16"
      },
      {
        "input": "nums = [1, 2, 3, 4, 3, 2, 3, 4, 3, 2, 3, 4, 3, 2, 1, 2, 3, 4]",
        "output": "8"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "2"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "3"
      },
      {
        "input": "nums = [1,18,5,10,13,15,10,5,16,8,17,7,18]",
        "output": "10"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81]",
        "output": "2"
      },
      {
        "input": "nums = [100, 4, 200, 1, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "7"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1]",
        "output": "2"
      },
      {
        "input": "nums = [1, 18, 3, 7, 10, 13, 10, 5, 16, 8, 20, 15]",
        "output": "9"
      },
      {
        "input": "nums = [8,4,6,2,3,5,7,1,9,11,10,12,14,13,15]",
        "output": "11"
      },
      {
        "input": "nums = [5, 3, 3, 5, 2, 1, 6, 1, 2, 3, 4]",
        "output": "7"
      },
      {
        "input": "nums = [1000, 0, 1000, 0, 1000, 0, 1000, 0, 1000, 0]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,4,5,4,3,4,5,4,3,4,5,4,3,4,5,4,3,4,5,4,3,4,5]",
        "output": "14"
      },
      {
        "input": "nums = [3, 3, 3, 2, 5, 25, 2, 5, 25, 2, 5, 25]",
        "output": "7"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]",
        "output": "39"
      },
      {
        "input": "nums = [10, 15, 10, 5, 15, 5, 20, 10, 25, 15, 30, 20]",
        "output": "11"
      },
      {
        "input": "nums = [1, 3, 2, 5, 3, 7, 5, 9, 7, 11, 9, 13, 11, 15, 13, 17, 15, 19, 17, 21]",
        "output": "20"
      },
      {
        "input": "nums = [1, 10, 3, 100, 4, 101, 5, 102, 6, 103, 7, 104, 8, 105, 9, 106]",
        "output": "16"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9]",
        "output": "2"
      },
      {
        "input": "nums = [1,3,2,4,3,5,2,6,3,7,4,8,5,9,6,10,7,11,8,12,9,13,10,14,11,15]",
        "output": "26"
      },
      {
        "input": "nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4]",
        "output": "4"
      },
      {
        "input": "nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]",
        "output": "12"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "1"
      },
      {
        "input": "nums = [10,11,12,13,14,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "3"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "2"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10]",
        "output": "19"
      },
      {
        "input": "nums = [1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10,9,11,10,12,11,13,12,14]",
        "output": "24"
      },
      {
        "input": "nums = [3, 3, 3, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2]",
        "output": "18"
      },
      {
        "input": "nums = [10, 20, 30, 25, 20, 15, 25, 30, 20, 10]",
        "output": "5"
      },
      {
        "input": "nums = [8, 3, 5, 1, 4, 2, 10, 9, 12, 6, 14, 7]",
        "output": "12"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2]",
        "output": "7"
      },
      {
        "input": "nums = [89, 45, 68, 90, 29, 34, 67, 30, 89, 21, 55, 62, 87, 90, 21, 56, 89, 34, 67, 23]",
        "output": "14"
      },
      {
        "input": "nums = [8, 6, 8, 6, 8, 6, 8, 6, 8, 6, 8, 6, 8, 6, 8, 6, 8, 6, 8, 6]",
        "output": "20"
      },
      {
        "input": "nums = [1000, 999, 998, 999, 998, 997, 998, 997, 996, 997, 996, 995]",
        "output": "8"
      },
      {
        "input": "nums = [1, 3, 7, 10, 9, 8, 2, 1, 5, 7, 10, 12, 8, 6, 4, 2, 3, 5, 7]",
        "output": "6"
      },
      {
        "input": "nums = [999, 1000, 999, 1000, 999, 1000, 999, 1000, 999, 1000]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "2"
      },
      {
        "input": "nums = [10, 20, 30, 25, 20, 15, 10, 15, 20, 25, 30]",
        "output": "4"
      },
      {
        "input": "nums = [1, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5]",
        "output": "4"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "3"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14]",
        "output": "15"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1]",
        "output": "11"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "2"
      },
      {
        "input": "nums = [10, 90, 49, 2, 1, 100, 67, 89, 34, 67, 33, 21, 50, 41, 66, 70]",
        "output": "12"
      },
      {
        "input": "nums = [500,400,500,400,500,400,500,400,500,400,500,400,500,400]",
        "output": "14"
      },
      {
        "input": "nums = [1,3,2,4,5,6,4,6,7,8,9,0,1,2,3,4,5]",
        "output": "8"
      },
      {
        "input": "nums = [1,3,2,1,4,3,2,1,5,4,3,2,1]",
        "output": "7"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8]",
        "output": "15"
      },
      {
        "input": "nums = [1,2,3,4,3,4,5,4,5,6,5,6,7,6,7,8,7,8,9,8,9,10,9,10,11]",
        "output": "16"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 1, 2]",
        "output": "14"
      },
      {
        "input": "nums = [3,3,3,2,5,5,4,8,8,9,10,10]",
        "output": "5"
      },
      {
        "input": "nums = [1,18,9,14,7,11,3,8,16,5]",
        "output": "9"
      },
      {
        "input": "nums = [5,10,5,10,5,10,5,10,5]",
        "output": "9"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1]",
        "output": "3"
      },
      {
        "input": "nums = [1,18,17,19,20,21,15,10,22,23,24,14,13,12,25,26,27,9,8,7]",
        "output": "9"
      },
      {
        "input": "nums = [2,3,1,4,3,5,4,6,5,7,6,8,7,9,8,10,9,11,10,12]",
        "output": "20"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4]",
        "output": "4"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]",
        "output": "2"
      },
      {
        "input": "nums = [1,100,1,99,2,98,3,97,4,96,5,95,6,94,7,93,8,92]",
        "output": "18"
      },
      {
        "input": "nums = [100, 44, 61, 78, 54, 48, 101, 56, 30, 93, 47, 72, 38]",
        "output": "10"
      },
      {
        "input": "nums = [8, 4, 5, 7, 7, 5, 4, 9, 2, 9, 10, 13, 7, 4, 8, 20]",
        "output": "9"
      },
      {
        "input": "nums = [100, 40, 20, 60, 30, 50, 40, 80, 70, 90]",
        "output": "9"
      },
      {
        "input": "nums = [100, 90, 95, 110, 105, 115, 100, 120, 80]",
        "output": "8"
      },
      {
        "input": "nums = [100, 4, 200, 1, 3, 2, 3, 5, 4]",
        "output": "8"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "2"
      },
      {
        "input": "nums = [100,90,80,90,100,95,105,92,107,85,110,75,115,65,120,55,125,45,130,35]",
        "output": "18"
      },
      {
        "input": "nums = [5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5]",
        "output": "29"
      },
      {
        "input": "nums = [1, 3, 2, 3, 1, 4, 2, 5, 3, 6, 4, 7, 5, 8, 6]",
        "output": "15"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]",
        "output": "5"
      },
      {
        "input": "nums = [10, 20, 15, 25, 20, 30, 25, 35, 30, 40, 35, 45, 40, 50]",
        "output": "14"
      },
      {
        "input": "nums = [1, 2, 3, 4, 3, 2, 3, 4, 3, 2, 3, 4, 3, 2, 3, 4, 3, 2, 3, 4]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8]",
        "output": "2"
      },
      {
        "input": "nums = [3, 1, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11]",
        "output": "17"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "20"
      },
      {
        "input": "nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]",
        "output": "20"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "1"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "nums = [3, 1, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9]",
        "output": "16"
      },
      {
        "input": "nums = [8, 4, 10, 3, 5, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "7"
      },
      {
        "input": "nums = [3, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3]",
        "output": "3"
      },
      {
        "input": "nums = [1, 2, 3, 4, 3, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4]",
        "output": "6"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 2, 2, 1, 1, 2, 2, 3, 3, 2, 2, 1, 1]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "102"
      },
      {
        "input": "nums = [9, 8, 8, 5, 3, 5, 3, 4, 5, 0, 0, 0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0]",
        "output": "8"
      }
    ]
  },
  {
    "id": 40,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Backtracking"
    ],
    "problemDescription": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates\u00a0where the candidate numbers sum to target.\nEach number in candidates\u00a0may only be used once in the combination.\nNote:\u00a0The solution set must not contain duplicate combinations.\n\u00a0\nExample 1:\n\nInput: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n\nExample 2:\n\nInput: candidates = [2,5,2,1,2], target = 5\nOutput: \n[\n[1,2,2],\n[5]\n]\n\n\u00a0\nConstraints:\n\n1 <=\u00a0candidates.length <= 100\n1 <=\u00a0candidates[i] <= 50\n1 <= target <= 30\n\n",
    "starterCode": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "candidates = [1,1,1,1,1], target = 3",
        "output": "[[1, 1, 1]]"
      },
      {
        "input": "candidates = [2,5,2,1,2], target = 5",
        "output": "[[1, 2, 2], [5]]"
      },
      {
        "input": "candidates = [4,4,2,1,4,2,2,1,3], target = 6",
        "output": "[[1, 1, 2, 2], [1, 1, 4], [1, 2, 3], [2, 2, 2], [2, 4]]"
      },
      {
        "input": "candidates = [1,2], target = 4",
        "output": "[]"
      },
      {
        "input": "candidates = [1,2,3,4,5], target = 5",
        "output": "[[1, 4], [2, 3], [5]]"
      },
      {
        "input": "candidates = [10,1,2,7,6,1,5], target = 8",
        "output": "[[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]"
      },
      {
        "input": "candidates = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 25",
        "output": "[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]"
      },
      {
        "input": "candidates = [3,1,3,5,1,1], target = 8",
        "output": "[[1, 1, 1, 5], [1, 1, 3, 3], [3, 5]]"
      },
      {
        "input": "candidates = [1,1,1,1,1,1,1,1,1,1], target = 5",
        "output": "[[1, 1, 1, 1, 1]]"
      },
      {
        "input": "candidates = [1], target = 1",
        "output": "[[1]]"
      },
      {
        "input": "candidates = [1,1,2,2,2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8], target = 20",
        "output": "[[1, 1, 2, 2, 2, 3, 3, 6], [1, 1, 2, 2, 2, 3, 4, 5], [1, 1, 2, 2, 2, 4, 4, 4], [1, 1, 2, 2, 2, 4, 8], [1, 1, 2, 2, 2, 5, 7], [1, 1, 2, 2, 2, 6, 6], [1, 1, 2, 2, 3, 3, 4, 4], [1, 1, 2, 2, 3, 3, 8], [1, 1, 2, 2, 3, 4, 7], [1, 1, 2, 2, 3, 5, 6], [1, 1, 2, 2, 4, 4, 6], [1, 1, 2, 2, 4, 5, 5], [1, 1, 2, 2, 6, 8], [1, 1, 2, 2, 7, 7], [1, 1, 2, 3, 3, 4, 6], [1, 1, 2, 3, 3, 5, 5], [1, 1, 2, 3, 4, 4, 5], [1, 1, 2, 3, 5, 8], [1, 1, 2, 3, 6, 7], [1, 1, 2, 4, 4, 4, 4], [1, 1, 2, 4, 4, 8], [1, 1, 2, 4, 5, 7], [1, 1, 2, 4, 6, 6], [1, 1, 2, 5, 5, 6], [1, 1, 2, 8, 8], [1, 1, 3, 3, 4, 4, 4], [1, 1, 3, 3, 4, 8], [1, 1, 3, 3, 5, 7], [1, 1, 3, 3, 6, 6], [1, 1, 3, 4, 4, 7], [1, 1, 3, 4, 5, 6], [1, 1, 3, 5, 5, 5], [1, 1, 3, 7, 8], [1, 1, 4, 4, 4, 6], [1, 1, 4, 4, 5, 5], [1, 1, 4, 6, 8], [1, 1, 4, 7, 7], [1, 1, 5, 5, 8], [1, 1, 5, 6, 7], [1, 1, 6, 6, 6], [1, 2, 2, 2, 3, 3, 7], [1, 2, 2, 2, 3, 4, 6], [1, 2, 2, 2, 3, 5, 5], [1, 2, 2, 2, 4, 4, 5], [1, 2, 2, 2, 5, 8], [1, 2, 2, 2, 6, 7], [1, 2, 2, 3, 3, 4, 5], [1, 2, 2, 3, 4, 4, 4], [1, 2, 2, 3, 4, 8], [1, 2, 2, 3, 5, 7], [1, 2, 2, 3, 6, 6], [1, 2, 2, 4, 4, 7], [1, 2, 2, 4, 5, 6], [1, 2, 2, 5, 5, 5], [1, 2, 2, 7, 8], [1, 2, 3, 3, 4, 7], [1, 2, 3, 3, 5, 6], [1, 2, 3, 4, 4, 6], [1, 2, 3, 4, 5, 5], [1, 2, 3, 6, 8], [1, 2, 3, 7, 7], [1, 2, 4, 4, 4, 5], [1, 2, 4, 5, 8], [1, 2, 4, 6, 7], [1, 2, 5, 5, 7], [1, 2, 5, 6, 6], [1, 3, 3, 4, 4, 5], [1, 3, 3, 5, 8], [1, 3, 3, 6, 7], [1, 3, 4, 4, 4, 4], [1, 3, 4, 4, 8], [1, 3, 4, 5, 7], [1, 3, 4, 6, 6], [1, 3, 5, 5, 6], [1, 3, 8, 8], [1, 4, 4, 4, 7], [1, 4, 4, 5, 6], [1, 4, 5, 5, 5], [1, 4, 7, 8], [1, 5, 6, 8], [1, 5, 7, 7], [1, 6, 6, 7], [2, 2, 2, 3, 3, 4, 4], [2, 2, 2, 3, 3, 8], [2, 2, 2, 3, 4, 7], [2, 2, 2, 3, 5, 6], [2, 2, 2, 4, 4, 6], [2, 2, 2, 4, 5, 5], [2, 2, 2, 6, 8], [2, 2, 2, 7, 7], [2, 2, 3, 3, 4, 6], [2, 2, 3, 3, 5, 5], [2, 2, 3, 4, 4, 5], [2, 2, 3, 5, 8], [2, 2, 3, 6, 7], [2, 2, 4, 4, 4, 4], [2, 2, 4, 4, 8], [2, 2, 4, 5, 7], [2, 2, 4, 6, 6], [2, 2, 5, 5, 6], [2, 2, 8, 8], [2, 3, 3, 4, 4, 4], [2, 3, 3, 4, 8], [2, 3, 3, 5, 7], [2, 3, 3, 6, 6], [2, 3, 4, 4, 7], [2, 3, 4, 5, 6], [2, 3, 5, 5, 5], [2, 3, 7, 8], [2, 4, 4, 4, 6], [2, 4, 4, 5, 5], [2, 4, 6, 8], [2, 4, 7, 7], [2, 5, 5, 8], [2, 5, 6, 7], [2, 6, 6, 6], [3, 3, 4, 4, 6], [3, 3, 4, 5, 5], [3, 3, 6, 8], [3, 3, 7, 7], [3, 4, 4, 4, 5], [3, 4, 5, 8], [3, 4, 6, 7], [3, 5, 5, 7], [3, 5, 6, 6], [4, 4, 4, 8], [4, 4, 5, 7], [4, 4, 6, 6], [4, 5, 5, 6], [4, 8, 8], [5, 5, 5, 5], [5, 7, 8], [6, 6, 8], [6, 7, 7]]"
      },
      {
        "input": "candidates = [5,10,15,20,25,30,35,40,45,50], target = 100",
        "output": "[[5, 10, 15, 20, 50], [5, 10, 15, 25, 45], [5, 10, 15, 30, 40], [5, 10, 20, 25, 40], [5, 10, 20, 30, 35], [5, 10, 35, 50], [5, 10, 40, 45], [5, 15, 20, 25, 35], [5, 15, 30, 50], [5, 15, 35, 45], [5, 20, 25, 50], [5, 20, 30, 45], [5, 20, 35, 40], [5, 25, 30, 40], [5, 45, 50], [10, 15, 20, 25, 30], [10, 15, 25, 50], [10, 15, 30, 45], [10, 15, 35, 40], [10, 20, 25, 45], [10, 20, 30, 40], [10, 25, 30, 35], [10, 40, 50], [15, 20, 25, 40], [15, 20, 30, 35], [15, 35, 50], [15, 40, 45], [20, 30, 50], [20, 35, 45], [25, 30, 45], [25, 35, 40]]"
      },
      {
        "input": "candidates = [4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7], target = 60",
        "output": "[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 7, 7], [4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 7, 7], [4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 6, 6, 7], [4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6], [4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 7], [4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6], [4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7], [4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 7], [4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6], [4, 4, 4, 4, 4, 4, 4, 5, 6, 7, 7, 7], [4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 7, 7], [4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6], [4, 4, 4, 4, 4, 4, 5, 5, 5, 7, 7, 7], [4, 4, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7], [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 7], [4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6], [4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], [4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 7, 7], [4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7], [4, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6], [4, 4, 4, 4, 4, 5, 7, 7, 7, 7, 7], [4, 4, 4, 4, 4, 6, 6, 7, 7, 7, 7], [4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 7, 7], [4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 7], [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6], [4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 7], [4, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7], [4, 4, 4, 4, 6, 6, 6, 6, 6, 7, 7], [4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 7], [4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6], [4, 4, 4, 5, 5, 5, 5, 7, 7, 7, 7], [4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7], [4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7], [4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 7], [4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6], [4, 4, 4, 6, 7, 7, 7, 7, 7, 7], [4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7], [4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6], [4, 4, 5, 5, 5, 5, 5, 6, 7, 7, 7], [4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7], [4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 7], [4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6], [4, 4, 5, 5, 7, 7, 7, 7, 7, 7], [4, 4, 5, 6, 6, 7, 7, 7, 7, 7], [4, 4, 6, 6, 6, 6, 7, 7, 7, 7], [4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6], [4, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7], [4, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7], [4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7], [4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6], [4, 5, 5, 5, 6, 7, 7, 7, 7, 7], [4, 5, 5, 6, 6, 6, 7, 7, 7, 7], [4, 5, 6, 6, 6, 6, 6, 7, 7, 7], [4, 6, 6, 6, 6, 6, 6, 6, 7, 7], [4, 7, 7, 7, 7, 7, 7, 7, 7], [5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7], [5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7], [5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5, 7, 7, 7, 7, 7], [5, 5, 5, 5, 6, 6, 7, 7, 7, 7], [5, 5, 5, 6, 6, 6, 6, 7, 7, 7], [5, 5, 6, 6, 6, 6, 6, 6, 7, 7], [5, 6, 6, 6, 6, 6, 6, 6, 6, 7], [5, 6, 7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 7, 7, 7, 7, 7, 7]]"
      },
      {
        "input": "candidates = [2,3,6,7,10,11,13,15,18,21,22,23,24,25,27], target = 50",
        "output": "[[2, 3, 6, 7, 10, 22], [2, 3, 6, 7, 11, 21], [2, 3, 6, 10, 11, 18], [2, 3, 6, 11, 13, 15], [2, 3, 6, 15, 24], [2, 3, 6, 18, 21], [2, 3, 7, 10, 13, 15], [2, 3, 7, 11, 27], [2, 3, 7, 13, 25], [2, 3, 7, 15, 23], [2, 3, 10, 11, 24], [2, 3, 10, 13, 22], [2, 3, 11, 13, 21], [2, 3, 18, 27], [2, 3, 21, 24], [2, 3, 22, 23], [2, 6, 7, 10, 25], [2, 6, 7, 11, 24], [2, 6, 7, 13, 22], [2, 6, 10, 11, 21], [2, 6, 11, 13, 18], [2, 6, 15, 27], [2, 6, 18, 24], [2, 7, 10, 13, 18], [2, 7, 18, 23], [2, 10, 11, 27], [2, 10, 13, 25], [2, 10, 15, 23], [2, 11, 13, 24], [2, 11, 15, 22], [2, 21, 27], [2, 23, 25], [3, 6, 7, 10, 11, 13], [3, 6, 7, 10, 24], [3, 6, 7, 11, 23], [3, 6, 7, 13, 21], [3, 6, 10, 13, 18], [3, 6, 18, 23], [3, 7, 13, 27], [3, 7, 15, 25], [3, 7, 18, 22], [3, 10, 13, 24], [3, 10, 15, 22], [3, 11, 13, 23], [3, 11, 15, 21], [3, 22, 25], [3, 23, 24], [6, 7, 10, 27], [6, 7, 13, 24], [6, 7, 15, 22], [6, 10, 11, 23], [6, 10, 13, 21], [6, 11, 15, 18], [6, 21, 23], [7, 10, 11, 22], [7, 10, 15, 18], [7, 18, 25], [7, 21, 22], [10, 13, 27], [10, 15, 25], [10, 18, 22], [11, 15, 24], [11, 18, 21], [13, 15, 22], [23, 27]]"
      },
      {
        "input": "candidates = [10, 20, 30, 40, 50], target = 50",
        "output": "[[10, 40], [20, 30], [50]]"
      },
      {
        "input": "candidates = [10,1,2,7,6,1,5,1,2], target = 10",
        "output": "[[1, 1, 1, 2, 5], [1, 1, 1, 7], [1, 1, 2, 6], [1, 2, 2, 5], [1, 2, 7], [2, 2, 6], [10]]"
      },
      {
        "input": "candidates = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], target = 15",
        "output": "[[1, 1, 2, 2, 3, 6], [1, 1, 2, 2, 4, 5], [1, 1, 2, 2, 9], [1, 1, 2, 3, 3, 5], [1, 1, 2, 3, 4, 4], [1, 1, 2, 3, 8], [1, 1, 2, 4, 7], [1, 1, 2, 5, 6], [1, 1, 3, 3, 7], [1, 1, 3, 4, 6], [1, 1, 3, 5, 5], [1, 1, 3, 10], [1, 1, 4, 4, 5], [1, 1, 4, 9], [1, 1, 5, 8], [1, 1, 6, 7], [1, 2, 2, 3, 3, 4], [1, 2, 2, 3, 7], [1, 2, 2, 4, 6], [1, 2, 2, 5, 5], [1, 2, 2, 10], [1, 2, 3, 3, 6], [1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 4, 8], [1, 2, 5, 7], [1, 2, 6, 6], [1, 3, 3, 4, 4], [1, 3, 3, 8], [1, 3, 4, 7], [1, 3, 5, 6], [1, 4, 4, 6], [1, 4, 5, 5], [1, 4, 10], [1, 5, 9], [1, 6, 8], [1, 7, 7], [2, 2, 3, 3, 5], [2, 2, 3, 4, 4], [2, 2, 3, 8], [2, 2, 4, 7], [2, 2, 5, 6], [2, 3, 3, 7], [2, 3, 4, 6], [2, 3, 5, 5], [2, 3, 10], [2, 4, 4, 5], [2, 4, 9], [2, 5, 8], [2, 6, 7], [3, 3, 4, 5], [3, 3, 9], [3, 4, 8], [3, 5, 7], [3, 6, 6], [4, 4, 7], [4, 5, 6], [5, 10], [6, 9], [7, 8]]"
      },
      {
        "input": "candidates = [15, 20, 1, 3, 8, 12, 3, 10], target = 33",
        "output": "[[1, 12, 20], [3, 3, 12, 15], [3, 8, 10, 12], [3, 10, 20], [8, 10, 15]]"
      },
      {
        "input": "candidates = [3,3,6,6,9,9,12,12,15,15,18,18,21,21,24,24,27,27,30,30], target = 60",
        "output": "[[3, 3, 6, 6, 9, 9, 12, 12], [3, 3, 6, 6, 9, 9, 24], [3, 3, 6, 6, 9, 12, 21], [3, 3, 6, 6, 9, 15, 18], [3, 3, 6, 6, 12, 12, 18], [3, 3, 6, 6, 12, 15, 15], [3, 3, 6, 6, 12, 30], [3, 3, 6, 6, 15, 27], [3, 3, 6, 6, 18, 24], [3, 3, 6, 6, 21, 21], [3, 3, 6, 9, 9, 12, 18], [3, 3, 6, 9, 9, 15, 15], [3, 3, 6, 9, 9, 30], [3, 3, 6, 9, 12, 12, 15], [3, 3, 6, 9, 12, 27], [3, 3, 6, 9, 15, 24], [3, 3, 6, 9, 18, 21], [3, 3, 6, 12, 12, 24], [3, 3, 6, 12, 15, 21], [3, 3, 6, 12, 18, 18], [3, 3, 6, 15, 15, 18], [3, 3, 6, 18, 30], [3, 3, 6, 21, 27], [3, 3, 6, 24, 24], [3, 3, 9, 9, 12, 24], [3, 3, 9, 9, 15, 21], [3, 3, 9, 9, 18, 18], [3, 3, 9, 12, 12, 21], [3, 3, 9, 12, 15, 18], [3, 3, 9, 15, 30], [3, 3, 9, 18, 27], [3, 3, 9, 21, 24], [3, 3, 12, 12, 15, 15], [3, 3, 12, 12, 30], [3, 3, 12, 15, 27], [3, 3, 12, 18, 24], [3, 3, 12, 21, 21], [3, 3, 15, 15, 24], [3, 3, 15, 18, 21], [3, 3, 24, 30], [3, 3, 27, 27], [3, 6, 6, 9, 9, 12, 15], [3, 6, 6, 9, 9, 27], [3, 6, 6, 9, 12, 24], [3, 6, 6, 9, 15, 21], [3, 6, 6, 9, 18, 18], [3, 6, 6, 12, 12, 21], [3, 6, 6, 12, 15, 18], [3, 6, 6, 15, 30], [3, 6, 6, 18, 27], [3, 6, 6, 21, 24], [3, 6, 9, 9, 12, 21], [3, 6, 9, 9, 15, 18], [3, 6, 9, 12, 12, 18], [3, 6, 9, 12, 15, 15], [3, 6, 9, 12, 30], [3, 6, 9, 15, 27], [3, 6, 9, 18, 24], [3, 6, 9, 21, 21], [3, 6, 12, 12, 27], [3, 6, 12, 15, 24], [3, 6, 12, 18, 21], [3, 6, 15, 15, 21], [3, 6, 15, 18, 18], [3, 6, 21, 30], [3, 6, 24, 27], [3, 9, 9, 12, 12, 15], [3, 9, 9, 12, 27], [3, 9, 9, 15, 24], [3, 9, 9, 18, 21], [3, 9, 12, 12, 24], [3, 9, 12, 15, 21], [3, 9, 12, 18, 18], [3, 9, 15, 15, 18], [3, 9, 18, 30], [3, 9, 21, 27], [3, 9, 24, 24], [3, 12, 12, 15, 18], [3, 12, 15, 30], [3, 12, 18, 27], [3, 12, 21, 24], [3, 15, 15, 27], [3, 15, 18, 24], [3, 15, 21, 21], [3, 18, 18, 21], [3, 27, 30], [6, 6, 9, 9, 12, 18], [6, 6, 9, 9, 15, 15], [6, 6, 9, 9, 30], [6, 6, 9, 12, 12, 15], [6, 6, 9, 12, 27], [6, 6, 9, 15, 24], [6, 6, 9, 18, 21], [6, 6, 12, 12, 24], [6, 6, 12, 15, 21], [6, 6, 12, 18, 18], [6, 6, 15, 15, 18], [6, 6, 18, 30], [6, 6, 21, 27], [6, 6, 24, 24], [6, 9, 9, 12, 24], [6, 9, 9, 15, 21], [6, 9, 9, 18, 18], [6, 9, 12, 12, 21], [6, 9, 12, 15, 18], [6, 9, 15, 30], [6, 9, 18, 27], [6, 9, 21, 24], [6, 12, 12, 15, 15], [6, 12, 12, 30], [6, 12, 15, 27], [6, 12, 18, 24], [6, 12, 21, 21], [6, 15, 15, 24], [6, 15, 18, 21], [6, 24, 30], [6, 27, 27], [9, 9, 12, 12, 18], [9, 9, 12, 15, 15], [9, 9, 12, 30], [9, 9, 15, 27], [9, 9, 18, 24], [9, 9, 21, 21], [9, 12, 12, 27], [9, 12, 15, 24], [9, 12, 18, 21], [9, 15, 15, 21], [9, 15, 18, 18], [9, 21, 30], [9, 24, 27], [12, 12, 15, 21], [12, 12, 18, 18], [12, 15, 15, 18], [12, 18, 30], [12, 21, 27], [12, 24, 24], [15, 15, 30], [15, 18, 27], [15, 21, 24], [18, 18, 24], [18, 21, 21], [30, 30]]"
      },
      {
        "input": "candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 50",
        "output": "Execution timed out"
      },
      {
        "input": "candidates = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], target = 10",
        "output": "[[5, 5]]"
      },
      {
        "input": "candidates = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], target = 25",
        "output": "[[1, 2, 3, 4, 5, 10], [1, 2, 3, 4, 6, 9], [1, 2, 3, 4, 7, 8], [1, 2, 3, 4, 15], [1, 2, 3, 5, 6, 8], [1, 2, 3, 5, 14], [1, 2, 3, 6, 13], [1, 2, 3, 7, 12], [1, 2, 3, 8, 11], [1, 2, 3, 9, 10], [1, 2, 4, 5, 6, 7], [1, 2, 4, 5, 13], [1, 2, 4, 6, 12], [1, 2, 4, 7, 11], [1, 2, 4, 8, 10], [1, 2, 5, 6, 11], [1, 2, 5, 7, 10], [1, 2, 5, 8, 9], [1, 2, 6, 7, 9], [1, 2, 7, 15], [1, 2, 8, 14], [1, 2, 9, 13], [1, 2, 10, 12], [1, 3, 4, 5, 12], [1, 3, 4, 6, 11], [1, 3, 4, 7, 10], [1, 3, 4, 8, 9], [1, 3, 5, 6, 10], [1, 3, 5, 7, 9], [1, 3, 6, 7, 8], [1, 3, 6, 15], [1, 3, 7, 14], [1, 3, 8, 13], [1, 3, 9, 12], [1, 3, 10, 11], [1, 4, 5, 6, 9], [1, 4, 5, 7, 8], [1, 4, 5, 15], [1, 4, 6, 14], [1, 4, 7, 13], [1, 4, 8, 12], [1, 4, 9, 11], [1, 5, 6, 13], [1, 5, 7, 12], [1, 5, 8, 11], [1, 5, 9, 10], [1, 6, 7, 11], [1, 6, 8, 10], [1, 7, 8, 9], [1, 9, 15], [1, 10, 14], [1, 11, 13], [2, 3, 4, 5, 11], [2, 3, 4, 6, 10], [2, 3, 4, 7, 9], [2, 3, 5, 6, 9], [2, 3, 5, 7, 8], [2, 3, 5, 15], [2, 3, 6, 14], [2, 3, 7, 13], [2, 3, 8, 12], [2, 3, 9, 11], [2, 4, 5, 6, 8], [2, 4, 5, 14], [2, 4, 6, 13], [2, 4, 7, 12], [2, 4, 8, 11], [2, 4, 9, 10], [2, 5, 6, 12], [2, 5, 7, 11], [2, 5, 8, 10], [2, 6, 7, 10], [2, 6, 8, 9], [2, 8, 15], [2, 9, 14], [2, 10, 13], [2, 11, 12], [3, 4, 5, 6, 7], [3, 4, 5, 13], [3, 4, 6, 12], [3, 4, 7, 11], [3, 4, 8, 10], [3, 5, 6, 11], [3, 5, 7, 10], [3, 5, 8, 9], [3, 6, 7, 9], [3, 7, 15], [3, 8, 14], [3, 9, 13], [3, 10, 12], [4, 5, 6, 10], [4, 5, 7, 9], [4, 6, 7, 8], [4, 6, 15], [4, 7, 14], [4, 8, 13], [4, 9, 12], [4, 10, 11], [5, 6, 14], [5, 7, 13], [5, 8, 12], [5, 9, 11], [6, 7, 12], [6, 8, 11], [6, 9, 10], [7, 8, 10], [10, 15], [11, 14], [12, 13]]"
      },
      {
        "input": "candidates = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], target = 50",
        "output": "[[2, 4, 6, 8, 10, 20], [2, 4, 6, 8, 12, 18], [2, 4, 6, 8, 14, 16], [2, 4, 6, 8, 30], [2, 4, 6, 10, 12, 16], [2, 4, 6, 10, 28], [2, 4, 6, 12, 26], [2, 4, 6, 14, 24], [2, 4, 6, 16, 22], [2, 4, 6, 18, 20], [2, 4, 8, 10, 12, 14], [2, 4, 8, 10, 26], [2, 4, 8, 12, 24], [2, 4, 8, 14, 22], [2, 4, 8, 16, 20], [2, 4, 10, 12, 22], [2, 4, 10, 14, 20], [2, 4, 10, 16, 18], [2, 4, 12, 14, 18], [2, 4, 14, 30], [2, 4, 16, 28], [2, 4, 18, 26], [2, 4, 20, 24], [2, 6, 8, 10, 24], [2, 6, 8, 12, 22], [2, 6, 8, 14, 20], [2, 6, 8, 16, 18], [2, 6, 10, 12, 20], [2, 6, 10, 14, 18], [2, 6, 12, 14, 16], [2, 6, 12, 30], [2, 6, 14, 28], [2, 6, 16, 26], [2, 6, 18, 24], [2, 6, 20, 22], [2, 8, 10, 12, 18], [2, 8, 10, 14, 16], [2, 8, 10, 30], [2, 8, 12, 28], [2, 8, 14, 26], [2, 8, 16, 24], [2, 8, 18, 22], [2, 10, 12, 26], [2, 10, 14, 24], [2, 10, 16, 22], [2, 10, 18, 20], [2, 12, 14, 22], [2, 12, 16, 20], [2, 14, 16, 18], [2, 18, 30], [2, 20, 28], [2, 22, 26], [4, 6, 8, 10, 22], [4, 6, 8, 12, 20], [4, 6, 8, 14, 18], [4, 6, 10, 12, 18], [4, 6, 10, 14, 16], [4, 6, 10, 30], [4, 6, 12, 28], [4, 6, 14, 26], [4, 6, 16, 24], [4, 6, 18, 22], [4, 8, 10, 12, 16], [4, 8, 10, 28], [4, 8, 12, 26], [4, 8, 14, 24], [4, 8, 16, 22], [4, 8, 18, 20], [4, 10, 12, 24], [4, 10, 14, 22], [4, 10, 16, 20], [4, 12, 14, 20], [4, 12, 16, 18], [4, 16, 30], [4, 18, 28], [4, 20, 26], [4, 22, 24], [6, 8, 10, 12, 14], [6, 8, 10, 26], [6, 8, 12, 24], [6, 8, 14, 22], [6, 8, 16, 20], [6, 10, 12, 22], [6, 10, 14, 20], [6, 10, 16, 18], [6, 12, 14, 18], [6, 14, 30], [6, 16, 28], [6, 18, 26], [6, 20, 24], [8, 10, 12, 20], [8, 10, 14, 18], [8, 12, 14, 16], [8, 12, 30], [8, 14, 28], [8, 16, 26], [8, 18, 24], [8, 20, 22], [10, 12, 28], [10, 14, 26], [10, 16, 24], [10, 18, 22], [12, 14, 24], [12, 16, 22], [12, 18, 20], [14, 16, 20], [20, 30], [22, 28], [24, 26]]"
      },
      {
        "input": "candidates = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], target = 6",
        "output": "[[2, 2, 2]]"
      },
      {
        "input": "candidates = [10, 20, 30, 40, 50], target = 100",
        "output": "[[10, 20, 30, 40], [10, 40, 50], [20, 30, 50]]"
      },
      {
        "input": "candidates = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], target = 30",
        "output": "[[1, 2, 3, 4, 5, 6, 9], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 15], [1, 2, 3, 4, 6, 14], [1, 2, 3, 4, 7, 13], [1, 2, 3, 4, 8, 12], [1, 2, 3, 4, 9, 11], [1, 2, 3, 4, 20], [1, 2, 3, 5, 6, 13], [1, 2, 3, 5, 7, 12], [1, 2, 3, 5, 8, 11], [1, 2, 3, 5, 9, 10], [1, 2, 3, 5, 19], [1, 2, 3, 6, 7, 11], [1, 2, 3, 6, 8, 10], [1, 2, 3, 6, 18], [1, 2, 3, 7, 8, 9], [1, 2, 3, 7, 17], [1, 2, 3, 8, 16], [1, 2, 3, 9, 15], [1, 2, 3, 10, 14], [1, 2, 3, 11, 13], [1, 2, 3, 24], [1, 2, 4, 5, 6, 12], [1, 2, 4, 5, 7, 11], [1, 2, 4, 5, 8, 10], [1, 2, 4, 5, 18], [1, 2, 4, 6, 7, 10], [1, 2, 4, 6, 8, 9], [1, 2, 4, 6, 17], [1, 2, 4, 7, 16], [1, 2, 4, 8, 15], [1, 2, 4, 9, 14], [1, 2, 4, 10, 13], [1, 2, 4, 11, 12], [1, 2, 4, 23], [1, 2, 5, 6, 7, 9], [1, 2, 5, 6, 16], [1, 2, 5, 7, 15], [1, 2, 5, 8, 14], [1, 2, 5, 9, 13], [1, 2, 5, 10, 12], [1, 2, 5, 22], [1, 2, 6, 7, 14], [1, 2, 6, 8, 13], [1, 2, 6, 9, 12], [1, 2, 6, 10, 11], [1, 2, 6, 21], [1, 2, 7, 8, 12], [1, 2, 7, 9, 11], [1, 2, 7, 20], [1, 2, 8, 9, 10], [1, 2, 8, 19], [1, 2, 9, 18], [1, 2, 10, 17], [1, 2, 11, 16], [1, 2, 12, 15], [1, 2, 13, 14], [1, 2, 27], [1, 3, 4, 5, 6, 11], [1, 3, 4, 5, 7, 10], [1, 3, 4, 5, 8, 9], [1, 3, 4, 5, 17], [1, 3, 4, 6, 7, 9], [1, 3, 4, 6, 16], [1, 3, 4, 7, 15], [1, 3, 4, 8, 14], [1, 3, 4, 9, 13], [1, 3, 4, 10, 12], [1, 3, 4, 22], [1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 15], [1, 3, 5, 7, 14], [1, 3, 5, 8, 13], [1, 3, 5, 9, 12], [1, 3, 5, 10, 11], [1, 3, 5, 21], [1, 3, 6, 7, 13], [1, 3, 6, 8, 12], [1, 3, 6, 9, 11], [1, 3, 6, 20], [1, 3, 7, 8, 11], [1, 3, 7, 9, 10], [1, 3, 7, 19], [1, 3, 8, 18], [1, 3, 9, 17], [1, 3, 10, 16], [1, 3, 11, 15], [1, 3, 12, 14], [1, 3, 26], [1, 4, 5, 6, 14], [1, 4, 5, 7, 13], [1, 4, 5, 8, 12], [1, 4, 5, 9, 11], [1, 4, 5, 20], [1, 4, 6, 7, 12], [1, 4, 6, 8, 11], [1, 4, 6, 9, 10], [1, 4, 6, 19], [1, 4, 7, 8, 10], [1, 4, 7, 18], [1, 4, 8, 17], [1, 4, 9, 16], [1, 4, 10, 15], [1, 4, 11, 14], [1, 4, 12, 13], [1, 4, 25], [1, 5, 6, 7, 11], [1, 5, 6, 8, 10], [1, 5, 6, 18], [1, 5, 7, 8, 9], [1, 5, 7, 17], [1, 5, 8, 16], [1, 5, 9, 15], [1, 5, 10, 14], [1, 5, 11, 13], [1, 5, 24], [1, 6, 7, 16], [1, 6, 8, 15], [1, 6, 9, 14], [1, 6, 10, 13], [1, 6, 11, 12], [1, 6, 23], [1, 7, 8, 14], [1, 7, 9, 13], [1, 7, 10, 12], [1, 7, 22], [1, 8, 9, 12], [1, 8, 10, 11], [1, 8, 21], [1, 9, 20], [1, 10, 19], [1, 11, 18], [1, 12, 17], [1, 13, 16], [1, 14, 15], [1, 29], [2, 3, 4, 5, 6, 10], [2, 3, 4, 5, 7, 9], [2, 3, 4, 5, 16], [2, 3, 4, 6, 7, 8], [2, 3, 4, 6, 15], [2, 3, 4, 7, 14], [2, 3, 4, 8, 13], [2, 3, 4, 9, 12], [2, 3, 4, 10, 11], [2, 3, 4, 21], [2, 3, 5, 6, 14], [2, 3, 5, 7, 13], [2, 3, 5, 8, 12], [2, 3, 5, 9, 11], [2, 3, 5, 20], [2, 3, 6, 7, 12], [2, 3, 6, 8, 11], [2, 3, 6, 9, 10], [2, 3, 6, 19], [2, 3, 7, 8, 10], [2, 3, 7, 18], [2, 3, 8, 17], [2, 3, 9, 16], [2, 3, 10, 15], [2, 3, 11, 14], [2, 3, 12, 13], [2, 3, 25], [2, 4, 5, 6, 13], [2, 4, 5, 7, 12], [2, 4, 5, 8, 11], [2, 4, 5, 9, 10], [2, 4, 5, 19], [2, 4, 6, 7, 11], [2, 4, 6, 8, 10], [2, 4, 6, 18], [2, 4, 7, 8, 9], [2, 4, 7, 17], [2, 4, 8, 16], [2, 4, 9, 15], [2, 4, 10, 14], [2, 4, 11, 13], [2, 4, 24], [2, 5, 6, 7, 10], [2, 5, 6, 8, 9], [2, 5, 6, 17], [2, 5, 7, 16], [2, 5, 8, 15], [2, 5, 9, 14], [2, 5, 10, 13], [2, 5, 11, 12], [2, 5, 23], [2, 6, 7, 15], [2, 6, 8, 14], [2, 6, 9, 13], [2, 6, 10, 12], [2, 6, 22], [2, 7, 8, 13], [2, 7, 9, 12], [2, 7, 10, 11], [2, 7, 21], [2, 8, 9, 11], [2, 8, 20], [2, 9, 19], [2, 10, 18], [2, 11, 17], [2, 12, 16], [2, 13, 15], [2, 28], [3, 4, 5, 6, 12], [3, 4, 5, 7, 11], [3, 4, 5, 8, 10], [3, 4, 5, 18], [3, 4, 6, 7, 10], [3, 4, 6, 8, 9], [3, 4, 6, 17], [3, 4, 7, 16], [3, 4, 8, 15], [3, 4, 9, 14], [3, 4, 10, 13], [3, 4, 11, 12], [3, 4, 23], [3, 5, 6, 7, 9], [3, 5, 6, 16], [3, 5, 7, 15], [3, 5, 8, 14], [3, 5, 9, 13], [3, 5, 10, 12], [3, 5, 22], [3, 6, 7, 14], [3, 6, 8, 13], [3, 6, 9, 12], [3, 6, 10, 11], [3, 6, 21], [3, 7, 8, 12], [3, 7, 9, 11], [3, 7, 20], [3, 8, 9, 10], [3, 8, 19], [3, 9, 18], [3, 10, 17], [3, 11, 16], [3, 12, 15], [3, 13, 14], [3, 27], [4, 5, 6, 7, 8], [4, 5, 6, 15], [4, 5, 7, 14], [4, 5, 8, 13], [4, 5, 9, 12], [4, 5, 10, 11], [4, 5, 21], [4, 6, 7, 13], [4, 6, 8, 12], [4, 6, 9, 11], [4, 6, 20], [4, 7, 8, 11], [4, 7, 9, 10], [4, 7, 19], [4, 8, 18], [4, 9, 17], [4, 10, 16], [4, 11, 15], [4, 12, 14], [4, 26], [5, 6, 7, 12], [5, 6, 8, 11], [5, 6, 9, 10], [5, 6, 19], [5, 7, 8, 10], [5, 7, 18], [5, 8, 17], [5, 9, 16], [5, 10, 15], [5, 11, 14], [5, 12, 13], [5, 25], [6, 7, 8, 9], [6, 7, 17], [6, 8, 16], [6, 9, 15], [6, 10, 14], [6, 11, 13], [6, 24], [7, 8, 15], [7, 9, 14], [7, 10, 13], [7, 11, 12], [7, 23], [8, 9, 13], [8, 10, 12], [8, 22], [9, 10, 11], [9, 21], [10, 20], [11, 19], [12, 18], [13, 17], [14, 16], [30]]"
      },
      {
        "input": "candidates = [2, 3, 6, 7, 8, 10, 12, 13, 15, 18, 20, 21, 22, 25, 27, 28, 30], target = 30",
        "output": "[[2, 3, 6, 7, 12], [2, 3, 7, 8, 10], [2, 3, 7, 18], [2, 3, 10, 15], [2, 3, 12, 13], [2, 3, 25], [2, 6, 7, 15], [2, 6, 10, 12], [2, 6, 22], [2, 7, 8, 13], [2, 7, 21], [2, 8, 20], [2, 10, 18], [2, 13, 15], [2, 28], [3, 6, 8, 13], [3, 6, 21], [3, 7, 8, 12], [3, 7, 20], [3, 12, 15], [3, 27], [7, 8, 15], [7, 10, 13], [8, 10, 12], [8, 22], [10, 20], [12, 18], [30]]"
      },
      {
        "input": "candidates = [20,16,12,15,25,30,10,2,5,3,1], target = 25",
        "output": "[[1, 2, 10, 12], [1, 3, 5, 16], [2, 3, 5, 15], [2, 3, 20], [3, 10, 12], [5, 20], [10, 15], [25]]"
      },
      {
        "input": "candidates = [20, 10, 5, 5, 2, 1, 1], target = 27",
        "output": "[[1, 1, 5, 20], [2, 5, 20]]"
      },
      {
        "input": "candidates = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], target = 25",
        "output": "[[5, 5, 5, 5, 5]]"
      },
      {
        "input": "candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 15",
        "output": "[[1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 4, 8], [1, 2, 5, 7], [1, 3, 4, 7], [1, 3, 5, 6], [1, 5, 9], [1, 6, 8], [2, 3, 4, 6], [2, 4, 9], [2, 5, 8], [2, 6, 7], [3, 4, 8], [3, 5, 7], [4, 5, 6], [6, 9], [7, 8]]"
      },
      {
        "input": "candidates = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], target = 27",
        "output": "[[3, 3, 3, 3, 3, 3, 3, 3, 3]]"
      },
      {
        "input": "candidates = [1,3,5,7,9,11,13,15,17,19], target = 28",
        "output": "[[1, 3, 5, 19], [1, 3, 7, 17], [1, 3, 9, 15], [1, 3, 11, 13], [1, 5, 7, 15], [1, 5, 9, 13], [1, 7, 9, 11], [3, 5, 7, 13], [3, 5, 9, 11], [9, 19], [11, 17], [13, 15]]"
      },
      {
        "input": "candidates = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], target = 45",
        "output": "[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]"
      },
      {
        "input": "candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 15",
        "output": "[[1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 4, 8], [1, 2, 5, 7], [1, 3, 4, 7], [1, 3, 5, 6], [1, 4, 10], [1, 5, 9], [1, 6, 8], [2, 3, 4, 6], [2, 3, 10], [2, 4, 9], [2, 5, 8], [2, 6, 7], [3, 4, 8], [3, 5, 7], [4, 5, 6], [5, 10], [6, 9], [7, 8]]"
      },
      {
        "input": "candidates = [3, 3, 6, 3, 3, 3], target = 9",
        "output": "[[3, 3, 3], [3, 6]]"
      },
      {
        "input": "candidates = [4,4,4,4,4,4,4,4,4,4], target = 20",
        "output": "[[4, 4, 4, 4, 4]]"
      },
      {
        "input": "candidates = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49], target = 75",
        "output": "[[1, 3, 5, 7, 9, 11, 39], [1, 3, 5, 7, 9, 13, 37], [1, 3, 5, 7, 9, 15, 35], [1, 3, 5, 7, 9, 17, 33], [1, 3, 5, 7, 9, 19, 31], [1, 3, 5, 7, 9, 21, 29], [1, 3, 5, 7, 9, 23, 27], [1, 3, 5, 7, 11, 13, 35], [1, 3, 5, 7, 11, 15, 33], [1, 3, 5, 7, 11, 17, 31], [1, 3, 5, 7, 11, 19, 29], [1, 3, 5, 7, 11, 21, 27], [1, 3, 5, 7, 11, 23, 25], [1, 3, 5, 7, 13, 15, 31], [1, 3, 5, 7, 13, 17, 29], [1, 3, 5, 7, 13, 19, 27], [1, 3, 5, 7, 13, 21, 25], [1, 3, 5, 7, 15, 17, 27], [1, 3, 5, 7, 15, 19, 25], [1, 3, 5, 7, 15, 21, 23], [1, 3, 5, 7, 17, 19, 23], [1, 3, 5, 9, 11, 13, 33], [1, 3, 5, 9, 11, 15, 31], [1, 3, 5, 9, 11, 17, 29], [1, 3, 5, 9, 11, 19, 27], [1, 3, 5, 9, 11, 21, 25], [1, 3, 5, 9, 13, 15, 29], [1, 3, 5, 9, 13, 17, 27], [1, 3, 5, 9, 13, 19, 25], [1, 3, 5, 9, 13, 21, 23], [1, 3, 5, 9, 15, 17, 25], [1, 3, 5, 9, 15, 19, 23], [1, 3, 5, 9, 17, 19, 21], [1, 3, 5, 11, 13, 15, 27], [1, 3, 5, 11, 13, 17, 25], [1, 3, 5, 11, 13, 19, 23], [1, 3, 5, 11, 15, 17, 23], [1, 3, 5, 11, 15, 19, 21], [1, 3, 5, 13, 15, 17, 21], [1, 3, 5, 17, 49], [1, 3, 5, 19, 47], [1, 3, 5, 21, 45], [1, 3, 5, 23, 43], [1, 3, 5, 25, 41], [1, 3, 5, 27, 39], [1, 3, 5, 29, 37], [1, 3, 5, 31, 35], [1, 3, 7, 9, 11, 13, 31], [1, 3, 7, 9, 11, 15, 29], [1, 3, 7, 9, 11, 17, 27], [1, 3, 7, 9, 11, 19, 25], [1, 3, 7, 9, 11, 21, 23], [1, 3, 7, 9, 13, 15, 27], [1, 3, 7, 9, 13, 17, 25], [1, 3, 7, 9, 13, 19, 23], [1, 3, 7, 9, 15, 17, 23], [1, 3, 7, 9, 15, 19, 21], [1, 3, 7, 11, 13, 15, 25], [1, 3, 7, 11, 13, 17, 23], [1, 3, 7, 11, 13, 19, 21], [1, 3, 7, 11, 15, 17, 21], [1, 3, 7, 13, 15, 17, 19], [1, 3, 7, 15, 49], [1, 3, 7, 17, 47], [1, 3, 7, 19, 45], [1, 3, 7, 21, 43], [1, 3, 7, 23, 41], [1, 3, 7, 25, 39], [1, 3, 7, 27, 37], [1, 3, 7, 29, 35], [1, 3, 7, 31, 33], [1, 3, 9, 11, 13, 15, 23], [1, 3, 9, 11, 13, 17, 21], [1, 3, 9, 11, 15, 17, 19], [1, 3, 9, 13, 49], [1, 3, 9, 15, 47], [1, 3, 9, 17, 45], [1, 3, 9, 19, 43], [1, 3, 9, 21, 41], [1, 3, 9, 23, 39], [1, 3, 9, 25, 37], [1, 3, 9, 27, 35], [1, 3, 9, 29, 33], [1, 3, 11, 13, 47], [1, 3, 11, 15, 45], [1, 3, 11, 17, 43], [1, 3, 11, 19, 41], [1, 3, 11, 21, 39], [1, 3, 11, 23, 37], [1, 3, 11, 25, 35], [1, 3, 11, 27, 33], [1, 3, 11, 29, 31], [1, 3, 13, 15, 43], [1, 3, 13, 17, 41], [1, 3, 13, 19, 39], [1, 3, 13, 21, 37], [1, 3, 13, 23, 35], [1, 3, 13, 25, 33], [1, 3, 13, 27, 31], [1, 3, 15, 17, 39], [1, 3, 15, 19, 37], [1, 3, 15, 21, 35], [1, 3, 15, 23, 33], [1, 3, 15, 25, 31], [1, 3, 15, 27, 29], [1, 3, 17, 19, 35], [1, 3, 17, 21, 33], [1, 3, 17, 23, 31], [1, 3, 17, 25, 29], [1, 3, 19, 21, 31], [1, 3, 19, 23, 29], [1, 3, 19, 25, 27], [1, 3, 21, 23, 27], [1, 5, 7, 9, 11, 13, 29], [1, 5, 7, 9, 11, 15, 27], [1, 5, 7, 9, 11, 17, 25], [1, 5, 7, 9, 11, 19, 23], [1, 5, 7, 9, 13, 15, 25], [1, 5, 7, 9, 13, 17, 23], [1, 5, 7, 9, 13, 19, 21], [1, 5, 7, 9, 15, 17, 21], [1, 5, 7, 11, 13, 15, 23], [1, 5, 7, 11, 13, 17, 21], [1, 5, 7, 11, 15, 17, 19], [1, 5, 7, 13, 49], [1, 5, 7, 15, 47], [1, 5, 7, 17, 45], [1, 5, 7, 19, 43], [1, 5, 7, 21, 41], [1, 5, 7, 23, 39], [1, 5, 7, 25, 37], [1, 5, 7, 27, 35], [1, 5, 7, 29, 33], [1, 5, 9, 11, 13, 15, 21], [1, 5, 9, 11, 13, 17, 19], [1, 5, 9, 11, 49], [1, 5, 9, 13, 47], [1, 5, 9, 15, 45], [1, 5, 9, 17, 43], [1, 5, 9, 19, 41], [1, 5, 9, 21, 39], [1, 5, 9, 23, 37], [1, 5, 9, 25, 35], [1, 5, 9, 27, 33], [1, 5, 9, 29, 31], [1, 5, 11, 13, 45], [1, 5, 11, 15, 43], [1, 5, 11, 17, 41], [1, 5, 11, 19, 39], [1, 5, 11, 21, 37], [1, 5, 11, 23, 35], [1, 5, 11, 25, 33], [1, 5, 11, 27, 31], [1, 5, 13, 15, 41], [1, 5, 13, 17, 39], [1, 5, 13, 19, 37], [1, 5, 13, 21, 35], [1, 5, 13, 23, 33], [1, 5, 13, 25, 31], [1, 5, 13, 27, 29], [1, 5, 15, 17, 37], [1, 5, 15, 19, 35], [1, 5, 15, 21, 33], [1, 5, 15, 23, 31], [1, 5, 15, 25, 29], [1, 5, 17, 19, 33], [1, 5, 17, 21, 31], [1, 5, 17, 23, 29], [1, 5, 17, 25, 27], [1, 5, 19, 21, 29], [1, 5, 19, 23, 27], [1, 5, 21, 23, 25], [1, 7, 9, 11, 13, 15, 19], [1, 7, 9, 11, 47], [1, 7, 9, 13, 45], [1, 7, 9, 15, 43], [1, 7, 9, 17, 41], [1, 7, 9, 19, 39], [1, 7, 9, 21, 37], [1, 7, 9, 23, 35], [1, 7, 9, 25, 33], [1, 7, 9, 27, 31], [1, 7, 11, 13, 43], [1, 7, 11, 15, 41], [1, 7, 11, 17, 39], [1, 7, 11, 19, 37], [1, 7, 11, 21, 35], [1, 7, 11, 23, 33], [1, 7, 11, 25, 31], [1, 7, 11, 27, 29], [1, 7, 13, 15, 39], [1, 7, 13, 17, 37], [1, 7, 13, 19, 35], [1, 7, 13, 21, 33], [1, 7, 13, 23, 31], [1, 7, 13, 25, 29], [1, 7, 15, 17, 35], [1, 7, 15, 19, 33], [1, 7, 15, 21, 31], [1, 7, 15, 23, 29], [1, 7, 15, 25, 27], [1, 7, 17, 19, 31], [1, 7, 17, 21, 29], [1, 7, 17, 23, 27], [1, 7, 19, 21, 27], [1, 7, 19, 23, 25], [1, 9, 11, 13, 41], [1, 9, 11, 15, 39], [1, 9, 11, 17, 37], [1, 9, 11, 19, 35], [1, 9, 11, 21, 33], [1, 9, 11, 23, 31], [1, 9, 11, 25, 29], [1, 9, 13, 15, 37], [1, 9, 13, 17, 35], [1, 9, 13, 19, 33], [1, 9, 13, 21, 31], [1, 9, 13, 23, 29], [1, 9, 13, 25, 27], [1, 9, 15, 17, 33], [1, 9, 15, 19, 31], [1, 9, 15, 21, 29], [1, 9, 15, 23, 27], [1, 9, 17, 19, 29], [1, 9, 17, 21, 27], [1, 9, 17, 23, 25], [1, 9, 19, 21, 25], [1, 11, 13, 15, 35], [1, 11, 13, 17, 33], [1, 11, 13, 19, 31], [1, 11, 13, 21, 29], [1, 11, 13, 23, 27], [1, 11, 15, 17, 31], [1, 11, 15, 19, 29], [1, 11, 15, 21, 27], [1, 11, 15, 23, 25], [1, 11, 17, 19, 27], [1, 11, 17, 21, 25], [1, 11, 19, 21, 23], [1, 13, 15, 17, 29], [1, 13, 15, 19, 27], [1, 13, 15, 21, 25], [1, 13, 17, 19, 25], [1, 13, 17, 21, 23], [1, 15, 17, 19, 23], [1, 25, 49], [1, 27, 47], [1, 29, 45], [1, 31, 43], [1, 33, 41], [1, 35, 39], [3, 5, 7, 9, 11, 13, 27], [3, 5, 7, 9, 11, 15, 25], [3, 5, 7, 9, 11, 17, 23], [3, 5, 7, 9, 11, 19, 21], [3, 5, 7, 9, 13, 15, 23], [3, 5, 7, 9, 13, 17, 21], [3, 5, 7, 9, 15, 17, 19], [3, 5, 7, 11, 13, 15, 21], [3, 5, 7, 11, 13, 17, 19], [3, 5, 7, 11, 49], [3, 5, 7, 13, 47], [3, 5, 7, 15, 45], [3, 5, 7, 17, 43], [3, 5, 7, 19, 41], [3, 5, 7, 21, 39], [3, 5, 7, 23, 37], [3, 5, 7, 25, 35], [3, 5, 7, 27, 33], [3, 5, 7, 29, 31], [3, 5, 9, 11, 13, 15, 19], [3, 5, 9, 11, 47], [3, 5, 9, 13, 45], [3, 5, 9, 15, 43], [3, 5, 9, 17, 41], [3, 5, 9, 19, 39], [3, 5, 9, 21, 37], [3, 5, 9, 23, 35], [3, 5, 9, 25, 33], [3, 5, 9, 27, 31], [3, 5, 11, 13, 43], [3, 5, 11, 15, 41], [3, 5, 11, 17, 39], [3, 5, 11, 19, 37], [3, 5, 11, 21, 35], [3, 5, 11, 23, 33], [3, 5, 11, 25, 31], [3, 5, 11, 27, 29], [3, 5, 13, 15, 39], [3, 5, 13, 17, 37], [3, 5, 13, 19, 35], [3, 5, 13, 21, 33], [3, 5, 13, 23, 31], [3, 5, 13, 25, 29], [3, 5, 15, 17, 35], [3, 5, 15, 19, 33], [3, 5, 15, 21, 31], [3, 5, 15, 23, 29], [3, 5, 15, 25, 27], [3, 5, 17, 19, 31], [3, 5, 17, 21, 29], [3, 5, 17, 23, 27], [3, 5, 19, 21, 27], [3, 5, 19, 23, 25], [3, 7, 9, 11, 13, 15, 17], [3, 7, 9, 11, 45], [3, 7, 9, 13, 43], [3, 7, 9, 15, 41], [3, 7, 9, 17, 39], [3, 7, 9, 19, 37], [3, 7, 9, 21, 35], [3, 7, 9, 23, 33], [3, 7, 9, 25, 31], [3, 7, 9, 27, 29], [3, 7, 11, 13, 41], [3, 7, 11, 15, 39], [3, 7, 11, 17, 37], [3, 7, 11, 19, 35], [3, 7, 11, 21, 33], [3, 7, 11, 23, 31], [3, 7, 11, 25, 29], [3, 7, 13, 15, 37], [3, 7, 13, 17, 35], [3, 7, 13, 19, 33], [3, 7, 13, 21, 31], [3, 7, 13, 23, 29], [3, 7, 13, 25, 27], [3, 7, 15, 17, 33], [3, 7, 15, 19, 31], [3, 7, 15, 21, 29], [3, 7, 15, 23, 27], [3, 7, 17, 19, 29], [3, 7, 17, 21, 27], [3, 7, 17, 23, 25], [3, 7, 19, 21, 25], [3, 9, 11, 13, 39], [3, 9, 11, 15, 37], [3, 9, 11, 17, 35], [3, 9, 11, 19, 33], [3, 9, 11, 21, 31], [3, 9, 11, 23, 29], [3, 9, 11, 25, 27], [3, 9, 13, 15, 35], [3, 9, 13, 17, 33], [3, 9, 13, 19, 31], [3, 9, 13, 21, 29], [3, 9, 13, 23, 27], [3, 9, 15, 17, 31], [3, 9, 15, 19, 29], [3, 9, 15, 21, 27], [3, 9, 15, 23, 25], [3, 9, 17, 19, 27], [3, 9, 17, 21, 25], [3, 9, 19, 21, 23], [3, 11, 13, 15, 33], [3, 11, 13, 17, 31], [3, 11, 13, 19, 29], [3, 11, 13, 21, 27], [3, 11, 13, 23, 25], [3, 11, 15, 17, 29], [3, 11, 15, 19, 27], [3, 11, 15, 21, 25], [3, 11, 17, 19, 25], [3, 11, 17, 21, 23], [3, 13, 15, 17, 27], [3, 13, 15, 19, 25], [3, 13, 15, 21, 23], [3, 13, 17, 19, 23], [3, 15, 17, 19, 21], [3, 23, 49], [3, 25, 47], [3, 27, 45], [3, 29, 43], [3, 31, 41], [3, 33, 39], [3, 35, 37], [5, 7, 9, 11, 43], [5, 7, 9, 13, 41], [5, 7, 9, 15, 39], [5, 7, 9, 17, 37], [5, 7, 9, 19, 35], [5, 7, 9, 21, 33], [5, 7, 9, 23, 31], [5, 7, 9, 25, 29], [5, 7, 11, 13, 39], [5, 7, 11, 15, 37], [5, 7, 11, 17, 35], [5, 7, 11, 19, 33], [5, 7, 11, 21, 31], [5, 7, 11, 23, 29], [5, 7, 11, 25, 27], [5, 7, 13, 15, 35], [5, 7, 13, 17, 33], [5, 7, 13, 19, 31], [5, 7, 13, 21, 29], [5, 7, 13, 23, 27], [5, 7, 15, 17, 31], [5, 7, 15, 19, 29], [5, 7, 15, 21, 27], [5, 7, 15, 23, 25], [5, 7, 17, 19, 27], [5, 7, 17, 21, 25], [5, 7, 19, 21, 23], [5, 9, 11, 13, 37], [5, 9, 11, 15, 35], [5, 9, 11, 17, 33], [5, 9, 11, 19, 31], [5, 9, 11, 21, 29], [5, 9, 11, 23, 27], [5, 9, 13, 15, 33], [5, 9, 13, 17, 31], [5, 9, 13, 19, 29], [5, 9, 13, 21, 27], [5, 9, 13, 23, 25], [5, 9, 15, 17, 29], [5, 9, 15, 19, 27], [5, 9, 15, 21, 25], [5, 9, 17, 19, 25], [5, 9, 17, 21, 23], [5, 11, 13, 15, 31], [5, 11, 13, 17, 29], [5, 11, 13, 19, 27], [5, 11, 13, 21, 25], [5, 11, 15, 17, 27], [5, 11, 15, 19, 25], [5, 11, 15, 21, 23], [5, 11, 17, 19, 23], [5, 13, 15, 17, 25], [5, 13, 15, 19, 23], [5, 13, 17, 19, 21], [5, 21, 49], [5, 23, 47], [5, 25, 45], [5, 27, 43], [5, 29, 41], [5, 31, 39], [5, 33, 37], [7, 9, 11, 13, 35], [7, 9, 11, 15, 33], [7, 9, 11, 17, 31], [7, 9, 11, 19, 29], [7, 9, 11, 21, 27], [7, 9, 11, 23, 25], [7, 9, 13, 15, 31], [7, 9, 13, 17, 29], [7, 9, 13, 19, 27], [7, 9, 13, 21, 25], [7, 9, 15, 17, 27], [7, 9, 15, 19, 25], [7, 9, 15, 21, 23], [7, 9, 17, 19, 23], [7, 11, 13, 15, 29], [7, 11, 13, 17, 27], [7, 11, 13, 19, 25], [7, 11, 13, 21, 23], [7, 11, 15, 17, 25], [7, 11, 15, 19, 23], [7, 11, 17, 19, 21], [7, 13, 15, 17, 23], [7, 13, 15, 19, 21], [7, 19, 49], [7, 21, 47], [7, 23, 45], [7, 25, 43], [7, 27, 41], [7, 29, 39], [7, 31, 37], [7, 33, 35], [9, 11, 13, 15, 27], [9, 11, 13, 17, 25], [9, 11, 13, 19, 23], [9, 11, 15, 17, 23], [9, 11, 15, 19, 21], [9, 13, 15, 17, 21], [9, 17, 49], [9, 19, 47], [9, 21, 45], [9, 23, 43], [9, 25, 41], [9, 27, 39], [9, 29, 37], [9, 31, 35], [11, 13, 15, 17, 19], [11, 15, 49], [11, 17, 47], [11, 19, 45], [11, 21, 43], [11, 23, 41], [11, 25, 39], [11, 27, 37], [11, 29, 35], [11, 31, 33], [13, 15, 47], [13, 17, 45], [13, 19, 43], [13, 21, 41], [13, 23, 39], [13, 25, 37], [13, 27, 35], [13, 29, 33], [15, 17, 43], [15, 19, 41], [15, 21, 39], [15, 23, 37], [15, 25, 35], [15, 27, 33], [15, 29, 31], [17, 19, 39], [17, 21, 37], [17, 23, 35], [17, 25, 33], [17, 27, 31], [19, 21, 35], [19, 23, 33], [19, 25, 31], [19, 27, 29], [21, 23, 31], [21, 25, 29], [23, 25, 27]]"
      },
      {
        "input": "candidates = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], target = 15",
        "output": "[[5, 5, 5]]"
      },
      {
        "input": "candidates = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], target = 15",
        "output": "[[5, 5, 5]]"
      },
      {
        "input": "candidates = [4,4,4,4,2,2,3,5], target = 10",
        "output": "[[2, 3, 5], [2, 4, 4]]"
      },
      {
        "input": "candidates = [9,7,3,8,1,4,2,1,5,8,7,9,4,1,2,5], target = 15",
        "output": "[[1, 1, 1, 2, 2, 3, 5], [1, 1, 1, 2, 2, 4, 4], [1, 1, 1, 2, 2, 8], [1, 1, 1, 2, 3, 7], [1, 1, 1, 2, 5, 5], [1, 1, 1, 3, 4, 5], [1, 1, 1, 3, 9], [1, 1, 1, 4, 8], [1, 1, 1, 5, 7], [1, 1, 2, 2, 4, 5], [1, 1, 2, 2, 9], [1, 1, 2, 3, 4, 4], [1, 1, 2, 3, 8], [1, 1, 2, 4, 7], [1, 1, 3, 5, 5], [1, 1, 4, 4, 5], [1, 1, 4, 9], [1, 1, 5, 8], [1, 2, 2, 3, 7], [1, 2, 2, 5, 5], [1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 4, 8], [1, 2, 5, 7], [1, 3, 4, 7], [1, 4, 5, 5], [1, 5, 9], [1, 7, 7], [2, 2, 3, 4, 4], [2, 2, 3, 8], [2, 2, 4, 7], [2, 3, 5, 5], [2, 4, 4, 5], [2, 4, 9], [2, 5, 8], [3, 4, 8], [3, 5, 7], [4, 4, 7], [7, 8]]"
      },
      {
        "input": "candidates = [2,3,6,7,8,10,11,13,15], target = 21",
        "output": "[[2, 3, 6, 10], [2, 6, 13], [2, 8, 11], [3, 7, 11], [3, 8, 10], [6, 7, 8], [6, 15], [8, 13], [10, 11]]"
      },
      {
        "input": "candidates = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], target = 56",
        "output": "[[8, 8, 8, 8, 8, 8, 8]]"
      },
      {
        "input": "candidates = [1, 3, 2, 5, 4, 7, 6, 9, 8, 10], target = 30",
        "output": "[[1, 2, 3, 4, 5, 6, 9], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 5, 9, 10], [1, 2, 3, 6, 8, 10], [1, 2, 3, 7, 8, 9], [1, 2, 4, 5, 8, 10], [1, 2, 4, 6, 7, 10], [1, 2, 4, 6, 8, 9], [1, 2, 5, 6, 7, 9], [1, 2, 8, 9, 10], [1, 3, 4, 5, 7, 10], [1, 3, 4, 5, 8, 9], [1, 3, 4, 6, 7, 9], [1, 3, 5, 6, 7, 8], [1, 3, 7, 9, 10], [1, 4, 6, 9, 10], [1, 4, 7, 8, 10], [1, 5, 6, 8, 10], [1, 5, 7, 8, 9], [2, 3, 4, 5, 6, 10], [2, 3, 4, 5, 7, 9], [2, 3, 4, 6, 7, 8], [2, 3, 6, 9, 10], [2, 3, 7, 8, 10], [2, 4, 5, 9, 10], [2, 4, 6, 8, 10], [2, 4, 7, 8, 9], [2, 5, 6, 7, 10], [2, 5, 6, 8, 9], [3, 4, 5, 8, 10], [3, 4, 6, 7, 10], [3, 4, 6, 8, 9], [3, 5, 6, 7, 9], [3, 8, 9, 10], [4, 5, 6, 7, 8], [4, 7, 9, 10], [5, 6, 9, 10], [5, 7, 8, 10], [6, 7, 8, 9]]"
      },
      {
        "input": "candidates = [10,15,20,25,30,35,40], target = 60",
        "output": "[[10, 15, 35], [10, 20, 30], [15, 20, 25], [20, 40], [25, 35]]"
      },
      {
        "input": "candidates = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], target = 30",
        "output": "[[1, 2, 3, 4, 5, 6, 9], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 15], [1, 2, 3, 4, 6, 14], [1, 2, 3, 4, 7, 13], [1, 2, 3, 4, 8, 12], [1, 2, 3, 4, 9, 11], [1, 2, 3, 4, 20], [1, 2, 3, 5, 6, 13], [1, 2, 3, 5, 7, 12], [1, 2, 3, 5, 8, 11], [1, 2, 3, 5, 9, 10], [1, 2, 3, 5, 19], [1, 2, 3, 6, 7, 11], [1, 2, 3, 6, 8, 10], [1, 2, 3, 6, 18], [1, 2, 3, 7, 8, 9], [1, 2, 3, 7, 17], [1, 2, 3, 8, 16], [1, 2, 3, 9, 15], [1, 2, 3, 10, 14], [1, 2, 3, 11, 13], [1, 2, 4, 5, 6, 12], [1, 2, 4, 5, 7, 11], [1, 2, 4, 5, 8, 10], [1, 2, 4, 5, 18], [1, 2, 4, 6, 7, 10], [1, 2, 4, 6, 8, 9], [1, 2, 4, 6, 17], [1, 2, 4, 7, 16], [1, 2, 4, 8, 15], [1, 2, 4, 9, 14], [1, 2, 4, 10, 13], [1, 2, 4, 11, 12], [1, 2, 5, 6, 7, 9], [1, 2, 5, 6, 16], [1, 2, 5, 7, 15], [1, 2, 5, 8, 14], [1, 2, 5, 9, 13], [1, 2, 5, 10, 12], [1, 2, 6, 7, 14], [1, 2, 6, 8, 13], [1, 2, 6, 9, 12], [1, 2, 6, 10, 11], [1, 2, 7, 8, 12], [1, 2, 7, 9, 11], [1, 2, 7, 20], [1, 2, 8, 9, 10], [1, 2, 8, 19], [1, 2, 9, 18], [1, 2, 10, 17], [1, 2, 11, 16], [1, 2, 12, 15], [1, 2, 13, 14], [1, 3, 4, 5, 6, 11], [1, 3, 4, 5, 7, 10], [1, 3, 4, 5, 8, 9], [1, 3, 4, 5, 17], [1, 3, 4, 6, 7, 9], [1, 3, 4, 6, 16], [1, 3, 4, 7, 15], [1, 3, 4, 8, 14], [1, 3, 4, 9, 13], [1, 3, 4, 10, 12], [1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 15], [1, 3, 5, 7, 14], [1, 3, 5, 8, 13], [1, 3, 5, 9, 12], [1, 3, 5, 10, 11], [1, 3, 6, 7, 13], [1, 3, 6, 8, 12], [1, 3, 6, 9, 11], [1, 3, 6, 20], [1, 3, 7, 8, 11], [1, 3, 7, 9, 10], [1, 3, 7, 19], [1, 3, 8, 18], [1, 3, 9, 17], [1, 3, 10, 16], [1, 3, 11, 15], [1, 3, 12, 14], [1, 4, 5, 6, 14], [1, 4, 5, 7, 13], [1, 4, 5, 8, 12], [1, 4, 5, 9, 11], [1, 4, 5, 20], [1, 4, 6, 7, 12], [1, 4, 6, 8, 11], [1, 4, 6, 9, 10], [1, 4, 6, 19], [1, 4, 7, 8, 10], [1, 4, 7, 18], [1, 4, 8, 17], [1, 4, 9, 16], [1, 4, 10, 15], [1, 4, 11, 14], [1, 4, 12, 13], [1, 5, 6, 7, 11], [1, 5, 6, 8, 10], [1, 5, 6, 18], [1, 5, 7, 8, 9], [1, 5, 7, 17], [1, 5, 8, 16], [1, 5, 9, 15], [1, 5, 10, 14], [1, 5, 11, 13], [1, 6, 7, 16], [1, 6, 8, 15], [1, 6, 9, 14], [1, 6, 10, 13], [1, 6, 11, 12], [1, 7, 8, 14], [1, 7, 9, 13], [1, 7, 10, 12], [1, 8, 9, 12], [1, 8, 10, 11], [1, 9, 20], [1, 10, 19], [1, 11, 18], [1, 12, 17], [1, 13, 16], [1, 14, 15], [2, 3, 4, 5, 6, 10], [2, 3, 4, 5, 7, 9], [2, 3, 4, 5, 16], [2, 3, 4, 6, 7, 8], [2, 3, 4, 6, 15], [2, 3, 4, 7, 14], [2, 3, 4, 8, 13], [2, 3, 4, 9, 12], [2, 3, 4, 10, 11], [2, 3, 5, 6, 14], [2, 3, 5, 7, 13], [2, 3, 5, 8, 12], [2, 3, 5, 9, 11], [2, 3, 5, 20], [2, 3, 6, 7, 12], [2, 3, 6, 8, 11], [2, 3, 6, 9, 10], [2, 3, 6, 19], [2, 3, 7, 8, 10], [2, 3, 7, 18], [2, 3, 8, 17], [2, 3, 9, 16], [2, 3, 10, 15], [2, 3, 11, 14], [2, 3, 12, 13], [2, 4, 5, 6, 13], [2, 4, 5, 7, 12], [2, 4, 5, 8, 11], [2, 4, 5, 9, 10], [2, 4, 5, 19], [2, 4, 6, 7, 11], [2, 4, 6, 8, 10], [2, 4, 6, 18], [2, 4, 7, 8, 9], [2, 4, 7, 17], [2, 4, 8, 16], [2, 4, 9, 15], [2, 4, 10, 14], [2, 4, 11, 13], [2, 5, 6, 7, 10], [2, 5, 6, 8, 9], [2, 5, 6, 17], [2, 5, 7, 16], [2, 5, 8, 15], [2, 5, 9, 14], [2, 5, 10, 13], [2, 5, 11, 12], [2, 6, 7, 15], [2, 6, 8, 14], [2, 6, 9, 13], [2, 6, 10, 12], [2, 7, 8, 13], [2, 7, 9, 12], [2, 7, 10, 11], [2, 8, 9, 11], [2, 8, 20], [2, 9, 19], [2, 10, 18], [2, 11, 17], [2, 12, 16], [2, 13, 15], [3, 4, 5, 6, 12], [3, 4, 5, 7, 11], [3, 4, 5, 8, 10], [3, 4, 5, 18], [3, 4, 6, 7, 10], [3, 4, 6, 8, 9], [3, 4, 6, 17], [3, 4, 7, 16], [3, 4, 8, 15], [3, 4, 9, 14], [3, 4, 10, 13], [3, 4, 11, 12], [3, 5, 6, 7, 9], [3, 5, 6, 16], [3, 5, 7, 15], [3, 5, 8, 14], [3, 5, 9, 13], [3, 5, 10, 12], [3, 6, 7, 14], [3, 6, 8, 13], [3, 6, 9, 12], [3, 6, 10, 11], [3, 7, 8, 12], [3, 7, 9, 11], [3, 7, 20], [3, 8, 9, 10], [3, 8, 19], [3, 9, 18], [3, 10, 17], [3, 11, 16], [3, 12, 15], [3, 13, 14], [4, 5, 6, 7, 8], [4, 5, 6, 15], [4, 5, 7, 14], [4, 5, 8, 13], [4, 5, 9, 12], [4, 5, 10, 11], [4, 6, 7, 13], [4, 6, 8, 12], [4, 6, 9, 11], [4, 6, 20], [4, 7, 8, 11], [4, 7, 9, 10], [4, 7, 19], [4, 8, 18], [4, 9, 17], [4, 10, 16], [4, 11, 15], [4, 12, 14], [5, 6, 7, 12], [5, 6, 8, 11], [5, 6, 9, 10], [5, 6, 19], [5, 7, 8, 10], [5, 7, 18], [5, 8, 17], [5, 9, 16], [5, 10, 15], [5, 11, 14], [5, 12, 13], [6, 7, 8, 9], [6, 7, 17], [6, 8, 16], [6, 9, 15], [6, 10, 14], [6, 11, 13], [7, 8, 15], [7, 9, 14], [7, 10, 13], [7, 11, 12], [8, 9, 13], [8, 10, 12], [9, 10, 11], [10, 20], [11, 19], [12, 18], [13, 17], [14, 16]]"
      },
      {
        "input": "candidates = [2, 3, 6, 7, 1, 5, 8], target = 15",
        "output": "[[1, 2, 5, 7], [1, 3, 5, 6], [1, 6, 8], [2, 5, 8], [2, 6, 7], [3, 5, 7], [7, 8]]"
      },
      {
        "input": "candidates = [1,2,3,4,5,6,7,8,9,10], target = 15",
        "output": "[[1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 4, 8], [1, 2, 5, 7], [1, 3, 4, 7], [1, 3, 5, 6], [1, 4, 10], [1, 5, 9], [1, 6, 8], [2, 3, 4, 6], [2, 3, 10], [2, 4, 9], [2, 5, 8], [2, 6, 7], [3, 4, 8], [3, 5, 7], [4, 5, 6], [5, 10], [6, 9], [7, 8]]"
      },
      {
        "input": "candidates = [10,1,2,7,6,1,5,3,4,8,2,5,10,10], target = 12",
        "output": "[[1, 1, 2, 2, 6], [1, 1, 2, 3, 5], [1, 1, 2, 8], [1, 1, 3, 7], [1, 1, 4, 6], [1, 1, 5, 5], [1, 1, 10], [1, 2, 2, 3, 4], [1, 2, 2, 7], [1, 2, 3, 6], [1, 2, 4, 5], [1, 3, 8], [1, 4, 7], [1, 5, 6], [2, 2, 3, 5], [2, 2, 8], [2, 3, 7], [2, 4, 6], [2, 5, 5], [2, 10], [3, 4, 5], [4, 8], [5, 7]]"
      },
      {
        "input": "candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 17",
        "output": "[[1, 2, 3, 4, 7], [1, 2, 3, 5, 6], [1, 2, 4, 10], [1, 2, 5, 9], [1, 2, 6, 8], [1, 3, 4, 9], [1, 3, 5, 8], [1, 3, 6, 7], [1, 4, 5, 7], [1, 6, 10], [1, 7, 9], [2, 3, 4, 8], [2, 3, 5, 7], [2, 4, 5, 6], [2, 5, 10], [2, 6, 9], [2, 7, 8], [3, 4, 10], [3, 5, 9], [3, 6, 8], [4, 5, 8], [4, 6, 7], [7, 10], [8, 9]]"
      },
      {
        "input": "candidates = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15], target = 30",
        "output": "[[1, 2, 2, 3, 3, 4, 4, 5, 6], [1, 2, 2, 3, 3, 4, 4, 11], [1, 2, 2, 3, 3, 4, 5, 10], [1, 2, 2, 3, 3, 4, 6, 9], [1, 2, 2, 3, 3, 4, 7, 8], [1, 2, 2, 3, 3, 4, 15], [1, 2, 2, 3, 3, 5, 5, 9], [1, 2, 2, 3, 3, 5, 6, 8], [1, 2, 2, 3, 3, 5, 7, 7], [1, 2, 2, 3, 3, 5, 14], [1, 2, 2, 3, 3, 6, 6, 7], [1, 2, 2, 3, 3, 6, 13], [1, 2, 2, 3, 3, 7, 12], [1, 2, 2, 3, 3, 8, 11], [1, 2, 2, 3, 3, 9, 10], [1, 2, 2, 3, 4, 4, 5, 9], [1, 2, 2, 3, 4, 4, 6, 8], [1, 2, 2, 3, 4, 4, 7, 7], [1, 2, 2, 3, 4, 4, 14], [1, 2, 2, 3, 4, 5, 5, 8], [1, 2, 2, 3, 4, 5, 6, 7], [1, 2, 2, 3, 4, 5, 13], [1, 2, 2, 3, 4, 6, 12], [1, 2, 2, 3, 4, 7, 11], [1, 2, 2, 3, 4, 8, 10], [1, 2, 2, 3, 4, 9, 9], [1, 2, 2, 3, 5, 5, 6, 6], [1, 2, 2, 3, 5, 5, 12], [1, 2, 2, 3, 5, 6, 11], [1, 2, 2, 3, 5, 7, 10], [1, 2, 2, 3, 5, 8, 9], [1, 2, 2, 3, 6, 6, 10], [1, 2, 2, 3, 6, 7, 9], [1, 2, 2, 3, 6, 8, 8], [1, 2, 2, 3, 7, 7, 8], [1, 2, 2, 3, 7, 15], [1, 2, 2, 3, 8, 14], [1, 2, 2, 3, 9, 13], [1, 2, 2, 3, 10, 12], [1, 2, 2, 3, 11, 11], [1, 2, 2, 4, 4, 5, 5, 7], [1, 2, 2, 4, 4, 5, 6, 6], [1, 2, 2, 4, 4, 5, 12], [1, 2, 2, 4, 4, 6, 11], [1, 2, 2, 4, 4, 7, 10], [1, 2, 2, 4, 4, 8, 9], [1, 2, 2, 4, 5, 5, 11], [1, 2, 2, 4, 5, 6, 10], [1, 2, 2, 4, 5, 7, 9], [1, 2, 2, 4, 5, 8, 8], [1, 2, 2, 4, 6, 6, 9], [1, 2, 2, 4, 6, 7, 8], [1, 2, 2, 4, 6, 15], [1, 2, 2, 4, 7, 14], [1, 2, 2, 4, 8, 13], [1, 2, 2, 4, 9, 12], [1, 2, 2, 4, 10, 11], [1, 2, 2, 5, 5, 6, 9], [1, 2, 2, 5, 5, 7, 8], [1, 2, 2, 5, 5, 15], [1, 2, 2, 5, 6, 6, 8], [1, 2, 2, 5, 6, 7, 7], [1, 2, 2, 5, 6, 14], [1, 2, 2, 5, 7, 13], [1, 2, 2, 5, 8, 12], [1, 2, 2, 5, 9, 11], [1, 2, 2, 5, 10, 10], [1, 2, 2, 6, 6, 13], [1, 2, 2, 6, 7, 12], [1, 2, 2, 6, 8, 11], [1, 2, 2, 6, 9, 10], [1, 2, 2, 7, 7, 11], [1, 2, 2, 7, 8, 10], [1, 2, 2, 7, 9, 9], [1, 2, 2, 8, 8, 9], [1, 2, 2, 10, 15], [1, 2, 2, 11, 14], [1, 2, 2, 12, 13], [1, 2, 3, 3, 4, 4, 5, 8], [1, 2, 3, 3, 4, 4, 6, 7], [1, 2, 3, 3, 4, 4, 13], [1, 2, 3, 3, 4, 5, 5, 7], [1, 2, 3, 3, 4, 5, 6, 6], [1, 2, 3, 3, 4, 5, 12], [1, 2, 3, 3, 4, 6, 11], [1, 2, 3, 3, 4, 7, 10], [1, 2, 3, 3, 4, 8, 9], [1, 2, 3, 3, 5, 5, 11], [1, 2, 3, 3, 5, 6, 10], [1, 2, 3, 3, 5, 7, 9], [1, 2, 3, 3, 5, 8, 8], [1, 2, 3, 3, 6, 6, 9], [1, 2, 3, 3, 6, 7, 8], [1, 2, 3, 3, 6, 15], [1, 2, 3, 3, 7, 14], [1, 2, 3, 3, 8, 13], [1, 2, 3, 3, 9, 12], [1, 2, 3, 3, 10, 11], [1, 2, 3, 4, 4, 5, 5, 6], [1, 2, 3, 4, 4, 5, 11], [1, 2, 3, 4, 4, 6, 10], [1, 2, 3, 4, 4, 7, 9], [1, 2, 3, 4, 4, 8, 8], [1, 2, 3, 4, 5, 5, 10], [1, 2, 3, 4, 5, 6, 9], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 15], [1, 2, 3, 4, 6, 6, 8], [1, 2, 3, 4, 6, 7, 7], [1, 2, 3, 4, 6, 14], [1, 2, 3, 4, 7, 13], [1, 2, 3, 4, 8, 12], [1, 2, 3, 4, 9, 11], [1, 2, 3, 4, 10, 10], [1, 2, 3, 5, 5, 6, 8], [1, 2, 3, 5, 5, 7, 7], [1, 2, 3, 5, 5, 14], [1, 2, 3, 5, 6, 6, 7], [1, 2, 3, 5, 6, 13], [1, 2, 3, 5, 7, 12], [1, 2, 3, 5, 8, 11], [1, 2, 3, 5, 9, 10], [1, 2, 3, 6, 6, 12], [1, 2, 3, 6, 7, 11], [1, 2, 3, 6, 8, 10], [1, 2, 3, 6, 9, 9], [1, 2, 3, 7, 7, 10], [1, 2, 3, 7, 8, 9], [1, 2, 3, 9, 15], [1, 2, 3, 10, 14], [1, 2, 3, 11, 13], [1, 2, 3, 12, 12], [1, 2, 4, 4, 5, 5, 9], [1, 2, 4, 4, 5, 6, 8], [1, 2, 4, 4, 5, 7, 7], [1, 2, 4, 4, 5, 14], [1, 2, 4, 4, 6, 6, 7], [1, 2, 4, 4, 6, 13], [1, 2, 4, 4, 7, 12], [1, 2, 4, 4, 8, 11], [1, 2, 4, 4, 9, 10], [1, 2, 4, 5, 5, 6, 7], [1, 2, 4, 5, 5, 13], [1, 2, 4, 5, 6, 12], [1, 2, 4, 5, 7, 11], [1, 2, 4, 5, 8, 10], [1, 2, 4, 5, 9, 9], [1, 2, 4, 6, 6, 11], [1, 2, 4, 6, 7, 10], [1, 2, 4, 6, 8, 9], [1, 2, 4, 7, 7, 9], [1, 2, 4, 7, 8, 8], [1, 2, 4, 8, 15], [1, 2, 4, 9, 14], [1, 2, 4, 10, 13], [1, 2, 4, 11, 12], [1, 2, 5, 5, 6, 11], [1, 2, 5, 5, 7, 10], [1, 2, 5, 5, 8, 9], [1, 2, 5, 6, 6, 10], [1, 2, 5, 6, 7, 9], [1, 2, 5, 6, 8, 8], [1, 2, 5, 7, 7, 8], [1, 2, 5, 7, 15], [1, 2, 5, 8, 14], [1, 2, 5, 9, 13], [1, 2, 5, 10, 12], [1, 2, 5, 11, 11], [1, 2, 6, 6, 7, 8], [1, 2, 6, 6, 15], [1, 2, 6, 7, 14], [1, 2, 6, 8, 13], [1, 2, 6, 9, 12], [1, 2, 6, 10, 11], [1, 2, 7, 7, 13], [1, 2, 7, 8, 12], [1, 2, 7, 9, 11], [1, 2, 7, 10, 10], [1, 2, 8, 8, 11], [1, 2, 8, 9, 10], [1, 2, 12, 15], [1, 2, 13, 14], [1, 3, 3, 4, 4, 5, 10], [1, 3, 3, 4, 4, 6, 9], [1, 3, 3, 4, 4, 7, 8], [1, 3, 3, 4, 4, 15], [1, 3, 3, 4, 5, 5, 9], [1, 3, 3, 4, 5, 6, 8], [1, 3, 3, 4, 5, 7, 7], [1, 3, 3, 4, 5, 14], [1, 3, 3, 4, 6, 6, 7], [1, 3, 3, 4, 6, 13], [1, 3, 3, 4, 7, 12], [1, 3, 3, 4, 8, 11], [1, 3, 3, 4, 9, 10], [1, 3, 3, 5, 5, 6, 7], [1, 3, 3, 5, 5, 13], [1, 3, 3, 5, 6, 12], [1, 3, 3, 5, 7, 11], [1, 3, 3, 5, 8, 10], [1, 3, 3, 5, 9, 9], [1, 3, 3, 6, 6, 11], [1, 3, 3, 6, 7, 10], [1, 3, 3, 6, 8, 9], [1, 3, 3, 7, 7, 9], [1, 3, 3, 7, 8, 8], [1, 3, 3, 8, 15], [1, 3, 3, 9, 14], [1, 3, 3, 10, 13], [1, 3, 3, 11, 12], [1, 3, 4, 4, 5, 5, 8], [1, 3, 4, 4, 5, 6, 7], [1, 3, 4, 4, 5, 13], [1, 3, 4, 4, 6, 12], [1, 3, 4, 4, 7, 11], [1, 3, 4, 4, 8, 10], [1, 3, 4, 4, 9, 9], [1, 3, 4, 5, 5, 6, 6], [1, 3, 4, 5, 5, 12], [1, 3, 4, 5, 6, 11], [1, 3, 4, 5, 7, 10], [1, 3, 4, 5, 8, 9], [1, 3, 4, 6, 6, 10], [1, 3, 4, 6, 7, 9], [1, 3, 4, 6, 8, 8], [1, 3, 4, 7, 7, 8], [1, 3, 4, 7, 15], [1, 3, 4, 8, 14], [1, 3, 4, 9, 13], [1, 3, 4, 10, 12], [1, 3, 4, 11, 11], [1, 3, 5, 5, 6, 10], [1, 3, 5, 5, 7, 9], [1, 3, 5, 5, 8, 8], [1, 3, 5, 6, 6, 9], [1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 15], [1, 3, 5, 7, 14], [1, 3, 5, 8, 13], [1, 3, 5, 9, 12], [1, 3, 5, 10, 11], [1, 3, 6, 6, 7, 7], [1, 3, 6, 6, 14], [1, 3, 6, 7, 13], [1, 3, 6, 8, 12], [1, 3, 6, 9, 11], [1, 3, 6, 10, 10], [1, 3, 7, 7, 12], [1, 3, 7, 8, 11], [1, 3, 7, 9, 10], [1, 3, 8, 8, 10], [1, 3, 8, 9, 9], [1, 3, 11, 15], [1, 3, 12, 14], [1, 3, 13, 13], [1, 4, 4, 5, 5, 11], [1, 4, 4, 5, 6, 10], [1, 4, 4, 5, 7, 9], [1, 4, 4, 5, 8, 8], [1, 4, 4, 6, 6, 9], [1, 4, 4, 6, 7, 8], [1, 4, 4, 6, 15], [1, 4, 4, 7, 14], [1, 4, 4, 8, 13], [1, 4, 4, 9, 12], [1, 4, 4, 10, 11], [1, 4, 5, 5, 6, 9], [1, 4, 5, 5, 7, 8], [1, 4, 5, 5, 15], [1, 4, 5, 6, 6, 8], [1, 4, 5, 6, 7, 7], [1, 4, 5, 6, 14], [1, 4, 5, 7, 13], [1, 4, 5, 8, 12], [1, 4, 5, 9, 11], [1, 4, 5, 10, 10], [1, 4, 6, 6, 13], [1, 4, 6, 7, 12], [1, 4, 6, 8, 11], [1, 4, 6, 9, 10], [1, 4, 7, 7, 11], [1, 4, 7, 8, 10], [1, 4, 7, 9, 9], [1, 4, 8, 8, 9], [1, 4, 10, 15], [1, 4, 11, 14], [1, 4, 12, 13], [1, 5, 5, 6, 6, 7], [1, 5, 5, 6, 13], [1, 5, 5, 7, 12], [1, 5, 5, 8, 11], [1, 5, 5, 9, 10], [1, 5, 6, 6, 12], [1, 5, 6, 7, 11], [1, 5, 6, 8, 10], [1, 5, 6, 9, 9], [1, 5, 7, 7, 10], [1, 5, 7, 8, 9], [1, 5, 9, 15], [1, 5, 10, 14], [1, 5, 11, 13], [1, 5, 12, 12], [1, 6, 6, 7, 10], [1, 6, 6, 8, 9], [1, 6, 7, 7, 9], [1, 6, 7, 8, 8], [1, 6, 8, 15], [1, 6, 9, 14], [1, 6, 10, 13], [1, 6, 11, 12], [1, 7, 7, 15], [1, 7, 8, 14], [1, 7, 9, 13], [1, 7, 10, 12], [1, 7, 11, 11], [1, 8, 8, 13], [1, 8, 9, 12], [1, 8, 10, 11], [1, 9, 9, 11], [1, 9, 10, 10], [1, 14, 15], [2, 2, 3, 3, 4, 4, 5, 7], [2, 2, 3, 3, 4, 4, 6, 6], [2, 2, 3, 3, 4, 4, 12], [2, 2, 3, 3, 4, 5, 5, 6], [2, 2, 3, 3, 4, 5, 11], [2, 2, 3, 3, 4, 6, 10], [2, 2, 3, 3, 4, 7, 9], [2, 2, 3, 3, 4, 8, 8], [2, 2, 3, 3, 5, 5, 10], [2, 2, 3, 3, 5, 6, 9], [2, 2, 3, 3, 5, 7, 8], [2, 2, 3, 3, 5, 15], [2, 2, 3, 3, 6, 6, 8], [2, 2, 3, 3, 6, 7, 7], [2, 2, 3, 3, 6, 14], [2, 2, 3, 3, 7, 13], [2, 2, 3, 3, 8, 12], [2, 2, 3, 3, 9, 11], [2, 2, 3, 3, 10, 10], [2, 2, 3, 4, 4, 5, 10], [2, 2, 3, 4, 4, 6, 9], [2, 2, 3, 4, 4, 7, 8], [2, 2, 3, 4, 4, 15], [2, 2, 3, 4, 5, 5, 9], [2, 2, 3, 4, 5, 6, 8], [2, 2, 3, 4, 5, 7, 7], [2, 2, 3, 4, 5, 14], [2, 2, 3, 4, 6, 6, 7], [2, 2, 3, 4, 6, 13], [2, 2, 3, 4, 7, 12], [2, 2, 3, 4, 8, 11], [2, 2, 3, 4, 9, 10], [2, 2, 3, 5, 5, 6, 7], [2, 2, 3, 5, 5, 13], [2, 2, 3, 5, 6, 12], [2, 2, 3, 5, 7, 11], [2, 2, 3, 5, 8, 10], [2, 2, 3, 5, 9, 9], [2, 2, 3, 6, 6, 11], [2, 2, 3, 6, 7, 10], [2, 2, 3, 6, 8, 9], [2, 2, 3, 7, 7, 9], [2, 2, 3, 7, 8, 8], [2, 2, 3, 8, 15], [2, 2, 3, 9, 14], [2, 2, 3, 10, 13], [2, 2, 3, 11, 12], [2, 2, 4, 4, 5, 5, 8], [2, 2, 4, 4, 5, 6, 7], [2, 2, 4, 4, 5, 13], [2, 2, 4, 4, 6, 12], [2, 2, 4, 4, 7, 11], [2, 2, 4, 4, 8, 10], [2, 2, 4, 4, 9, 9], [2, 2, 4, 5, 5, 6, 6], [2, 2, 4, 5, 5, 12], [2, 2, 4, 5, 6, 11], [2, 2, 4, 5, 7, 10], [2, 2, 4, 5, 8, 9], [2, 2, 4, 6, 6, 10], [2, 2, 4, 6, 7, 9], [2, 2, 4, 6, 8, 8], [2, 2, 4, 7, 7, 8], [2, 2, 4, 7, 15], [2, 2, 4, 8, 14], [2, 2, 4, 9, 13], [2, 2, 4, 10, 12], [2, 2, 4, 11, 11], [2, 2, 5, 5, 6, 10], [2, 2, 5, 5, 7, 9], [2, 2, 5, 5, 8, 8], [2, 2, 5, 6, 6, 9], [2, 2, 5, 6, 7, 8], [2, 2, 5, 6, 15], [2, 2, 5, 7, 14], [2, 2, 5, 8, 13], [2, 2, 5, 9, 12], [2, 2, 5, 10, 11], [2, 2, 6, 6, 7, 7], [2, 2, 6, 6, 14], [2, 2, 6, 7, 13], [2, 2, 6, 8, 12], [2, 2, 6, 9, 11], [2, 2, 6, 10, 10], [2, 2, 7, 7, 12], [2, 2, 7, 8, 11], [2, 2, 7, 9, 10], [2, 2, 8, 8, 10], [2, 2, 8, 9, 9], [2, 2, 11, 15], [2, 2, 12, 14], [2, 2, 13, 13], [2, 3, 3, 4, 4, 5, 9], [2, 3, 3, 4, 4, 6, 8], [2, 3, 3, 4, 4, 7, 7], [2, 3, 3, 4, 4, 14], [2, 3, 3, 4, 5, 5, 8], [2, 3, 3, 4, 5, 6, 7], [2, 3, 3, 4, 5, 13], [2, 3, 3, 4, 6, 12], [2, 3, 3, 4, 7, 11], [2, 3, 3, 4, 8, 10], [2, 3, 3, 4, 9, 9], [2, 3, 3, 5, 5, 6, 6], [2, 3, 3, 5, 5, 12], [2, 3, 3, 5, 6, 11], [2, 3, 3, 5, 7, 10], [2, 3, 3, 5, 8, 9], [2, 3, 3, 6, 6, 10], [2, 3, 3, 6, 7, 9], [2, 3, 3, 6, 8, 8], [2, 3, 3, 7, 7, 8], [2, 3, 3, 7, 15], [2, 3, 3, 8, 14], [2, 3, 3, 9, 13], [2, 3, 3, 10, 12], [2, 3, 3, 11, 11], [2, 3, 4, 4, 5, 5, 7], [2, 3, 4, 4, 5, 6, 6], [2, 3, 4, 4, 5, 12], [2, 3, 4, 4, 6, 11], [2, 3, 4, 4, 7, 10], [2, 3, 4, 4, 8, 9], [2, 3, 4, 5, 5, 11], [2, 3, 4, 5, 6, 10], [2, 3, 4, 5, 7, 9], [2, 3, 4, 5, 8, 8], [2, 3, 4, 6, 6, 9], [2, 3, 4, 6, 7, 8], [2, 3, 4, 6, 15], [2, 3, 4, 7, 14], [2, 3, 4, 8, 13], [2, 3, 4, 9, 12], [2, 3, 4, 10, 11], [2, 3, 5, 5, 6, 9], [2, 3, 5, 5, 7, 8], [2, 3, 5, 5, 15], [2, 3, 5, 6, 6, 8], [2, 3, 5, 6, 7, 7], [2, 3, 5, 6, 14], [2, 3, 5, 7, 13], [2, 3, 5, 8, 12], [2, 3, 5, 9, 11], [2, 3, 5, 10, 10], [2, 3, 6, 6, 13], [2, 3, 6, 7, 12], [2, 3, 6, 8, 11], [2, 3, 6, 9, 10], [2, 3, 7, 7, 11], [2, 3, 7, 8, 10], [2, 3, 7, 9, 9], [2, 3, 8, 8, 9], [2, 3, 10, 15], [2, 3, 11, 14], [2, 3, 12, 13], [2, 4, 4, 5, 5, 10], [2, 4, 4, 5, 6, 9], [2, 4, 4, 5, 7, 8], [2, 4, 4, 5, 15], [2, 4, 4, 6, 6, 8], [2, 4, 4, 6, 7, 7], [2, 4, 4, 6, 14], [2, 4, 4, 7, 13], [2, 4, 4, 8, 12], [2, 4, 4, 9, 11], [2, 4, 4, 10, 10], [2, 4, 5, 5, 6, 8], [2, 4, 5, 5, 7, 7], [2, 4, 5, 5, 14], [2, 4, 5, 6, 6, 7], [2, 4, 5, 6, 13], [2, 4, 5, 7, 12], [2, 4, 5, 8, 11], [2, 4, 5, 9, 10], [2, 4, 6, 6, 12], [2, 4, 6, 7, 11], [2, 4, 6, 8, 10], [2, 4, 6, 9, 9], [2, 4, 7, 7, 10], [2, 4, 7, 8, 9], [2, 4, 9, 15], [2, 4, 10, 14], [2, 4, 11, 13], [2, 4, 12, 12], [2, 5, 5, 6, 12], [2, 5, 5, 7, 11], [2, 5, 5, 8, 10], [2, 5, 5, 9, 9], [2, 5, 6, 6, 11], [2, 5, 6, 7, 10], [2, 5, 6, 8, 9], [2, 5, 7, 7, 9], [2, 5, 7, 8, 8], [2, 5, 8, 15], [2, 5, 9, 14], [2, 5, 10, 13], [2, 5, 11, 12], [2, 6, 6, 7, 9], [2, 6, 6, 8, 8], [2, 6, 7, 7, 8], [2, 6, 7, 15], [2, 6, 8, 14], [2, 6, 9, 13], [2, 6, 10, 12], [2, 6, 11, 11], [2, 7, 7, 14], [2, 7, 8, 13], [2, 7, 9, 12], [2, 7, 10, 11], [2, 8, 8, 12], [2, 8, 9, 11], [2, 8, 10, 10], [2, 9, 9, 10], [2, 13, 15], [2, 14, 14], [3, 3, 4, 4, 5, 5, 6], [3, 3, 4, 4, 5, 11], [3, 3, 4, 4, 6, 10], [3, 3, 4, 4, 7, 9], [3, 3, 4, 4, 8, 8], [3, 3, 4, 5, 5, 10], [3, 3, 4, 5, 6, 9], [3, 3, 4, 5, 7, 8], [3, 3, 4, 5, 15], [3, 3, 4, 6, 6, 8], [3, 3, 4, 6, 7, 7], [3, 3, 4, 6, 14], [3, 3, 4, 7, 13], [3, 3, 4, 8, 12], [3, 3, 4, 9, 11], [3, 3, 4, 10, 10], [3, 3, 5, 5, 6, 8], [3, 3, 5, 5, 7, 7], [3, 3, 5, 5, 14], [3, 3, 5, 6, 6, 7], [3, 3, 5, 6, 13], [3, 3, 5, 7, 12], [3, 3, 5, 8, 11], [3, 3, 5, 9, 10], [3, 3, 6, 6, 12], [3, 3, 6, 7, 11], [3, 3, 6, 8, 10], [3, 3, 6, 9, 9], [3, 3, 7, 7, 10], [3, 3, 7, 8, 9], [3, 3, 9, 15], [3, 3, 10, 14], [3, 3, 11, 13], [3, 3, 12, 12], [3, 4, 4, 5, 5, 9], [3, 4, 4, 5, 6, 8], [3, 4, 4, 5, 7, 7], [3, 4, 4, 5, 14], [3, 4, 4, 6, 6, 7], [3, 4, 4, 6, 13], [3, 4, 4, 7, 12], [3, 4, 4, 8, 11], [3, 4, 4, 9, 10], [3, 4, 5, 5, 6, 7], [3, 4, 5, 5, 13], [3, 4, 5, 6, 12], [3, 4, 5, 7, 11], [3, 4, 5, 8, 10], [3, 4, 5, 9, 9], [3, 4, 6, 6, 11], [3, 4, 6, 7, 10], [3, 4, 6, 8, 9], [3, 4, 7, 7, 9], [3, 4, 7, 8, 8], [3, 4, 8, 15], [3, 4, 9, 14], [3, 4, 10, 13], [3, 4, 11, 12], [3, 5, 5, 6, 11], [3, 5, 5, 7, 10], [3, 5, 5, 8, 9], [3, 5, 6, 6, 10], [3, 5, 6, 7, 9], [3, 5, 6, 8, 8], [3, 5, 7, 7, 8], [3, 5, 7, 15], [3, 5, 8, 14], [3, 5, 9, 13], [3, 5, 10, 12], [3, 5, 11, 11], [3, 6, 6, 7, 8], [3, 6, 6, 15], [3, 6, 7, 14], [3, 6, 8, 13], [3, 6, 9, 12], [3, 6, 10, 11], [3, 7, 7, 13], [3, 7, 8, 12], [3, 7, 9, 11], [3, 7, 10, 10], [3, 8, 8, 11], [3, 8, 9, 10], [3, 12, 15], [3, 13, 14], [4, 4, 5, 5, 6, 6], [4, 4, 5, 5, 12], [4, 4, 5, 6, 11], [4, 4, 5, 7, 10], [4, 4, 5, 8, 9], [4, 4, 6, 6, 10], [4, 4, 6, 7, 9], [4, 4, 6, 8, 8], [4, 4, 7, 7, 8], [4, 4, 7, 15], [4, 4, 8, 14], [4, 4, 9, 13], [4, 4, 10, 12], [4, 4, 11, 11], [4, 5, 5, 6, 10], [4, 5, 5, 7, 9], [4, 5, 5, 8, 8], [4, 5, 6, 6, 9], [4, 5, 6, 7, 8], [4, 5, 6, 15], [4, 5, 7, 14], [4, 5, 8, 13], [4, 5, 9, 12], [4, 5, 10, 11], [4, 6, 6, 7, 7], [4, 6, 6, 14], [4, 6, 7, 13], [4, 6, 8, 12], [4, 6, 9, 11], [4, 6, 10, 10], [4, 7, 7, 12], [4, 7, 8, 11], [4, 7, 9, 10], [4, 8, 8, 10], [4, 8, 9, 9], [4, 11, 15], [4, 12, 14], [4, 13, 13], [5, 5, 6, 6, 8], [5, 5, 6, 7, 7], [5, 5, 6, 14], [5, 5, 7, 13], [5, 5, 8, 12], [5, 5, 9, 11], [5, 5, 10, 10], [5, 6, 6, 13], [5, 6, 7, 12], [5, 6, 8, 11], [5, 6, 9, 10], [5, 7, 7, 11], [5, 7, 8, 10], [5, 7, 9, 9], [5, 8, 8, 9], [5, 10, 15], [5, 11, 14], [5, 12, 13], [6, 6, 7, 11], [6, 6, 8, 10], [6, 6, 9, 9], [6, 7, 7, 10], [6, 7, 8, 9], [6, 9, 15], [6, 10, 14], [6, 11, 13], [6, 12, 12], [7, 7, 8, 8], [7, 8, 15], [7, 9, 14], [7, 10, 13], [7, 11, 12], [8, 8, 14], [8, 9, 13], [8, 10, 12], [8, 11, 11], [9, 9, 12], [9, 10, 11], [15, 15]]"
      },
      {
        "input": "candidates = [10, 10, 10, 10, 5, 5, 5, 5, 1, 1, 1, 1], target = 25",
        "output": "[[5, 5, 5, 10], [5, 10, 10]]"
      },
      {
        "input": "candidates = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4], target = 8",
        "output": "[[4, 4]]"
      },
      {
        "input": "candidates = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 10",
        "output": "[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]"
      },
      {
        "input": "candidates = [10, 1, 2, 7, 6, 1, 5, 3, 4, 8], target = 15",
        "output": "[[1, 1, 2, 3, 8], [1, 1, 2, 4, 7], [1, 1, 2, 5, 6], [1, 1, 3, 4, 6], [1, 1, 3, 10], [1, 1, 5, 8], [1, 1, 6, 7], [1, 2, 3, 4, 5], [1, 2, 4, 8], [1, 2, 5, 7], [1, 3, 4, 7], [1, 3, 5, 6], [1, 4, 10], [1, 6, 8], [2, 3, 4, 6], [2, 3, 10], [2, 5, 8], [2, 6, 7], [3, 4, 8], [3, 5, 7], [4, 5, 6], [5, 10], [7, 8]]"
      },
      {
        "input": "candidates = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1], target = 15",
        "output": "[[1, 1, 2, 2, 3, 6], [1, 1, 2, 2, 4, 5], [1, 1, 2, 2, 9], [1, 1, 2, 3, 3, 5], [1, 1, 2, 3, 4, 4], [1, 1, 2, 3, 8], [1, 1, 2, 4, 7], [1, 1, 2, 5, 6], [1, 1, 3, 3, 7], [1, 1, 3, 4, 6], [1, 1, 3, 5, 5], [1, 1, 3, 10], [1, 1, 4, 4, 5], [1, 1, 4, 9], [1, 1, 5, 8], [1, 1, 6, 7], [1, 2, 2, 3, 3, 4], [1, 2, 2, 3, 7], [1, 2, 2, 4, 6], [1, 2, 2, 5, 5], [1, 2, 2, 10], [1, 2, 3, 3, 6], [1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 4, 8], [1, 2, 5, 7], [1, 2, 6, 6], [1, 3, 3, 4, 4], [1, 3, 3, 8], [1, 3, 4, 7], [1, 3, 5, 6], [1, 4, 4, 6], [1, 4, 5, 5], [1, 4, 10], [1, 5, 9], [1, 6, 8], [1, 7, 7], [2, 2, 3, 3, 5], [2, 2, 3, 4, 4], [2, 2, 3, 8], [2, 2, 4, 7], [2, 2, 5, 6], [2, 3, 3, 7], [2, 3, 4, 6], [2, 3, 5, 5], [2, 3, 10], [2, 4, 4, 5], [2, 4, 9], [2, 5, 8], [2, 6, 7], [3, 3, 4, 5], [3, 3, 9], [3, 4, 8], [3, 5, 7], [3, 6, 6], [4, 4, 7], [4, 5, 6], [5, 10], [6, 9], [7, 8]]"
      },
      {
        "input": "candidates = [15, 10, 5, 7, 3, 2, 2, 1, 1], target = 18",
        "output": "[[1, 1, 2, 2, 5, 7], [1, 2, 2, 3, 10], [1, 2, 3, 5, 7], [1, 2, 5, 10], [1, 2, 15], [1, 7, 10], [3, 5, 10], [3, 15]]"
      },
      {
        "input": "candidates = [10,20,30,40,50,60,70,80,90,100], target = 150",
        "output": "[[10, 20, 30, 40, 50], [10, 20, 30, 90], [10, 20, 40, 80], [10, 20, 50, 70], [10, 30, 40, 70], [10, 30, 50, 60], [10, 40, 100], [10, 50, 90], [10, 60, 80], [20, 30, 40, 60], [20, 30, 100], [20, 40, 90], [20, 50, 80], [20, 60, 70], [30, 40, 80], [30, 50, 70], [40, 50, 60], [50, 100], [60, 90], [70, 80]]"
      },
      {
        "input": "candidates = [10, 1, 2, 7, 6, 1, 5, 3, 8, 4, 9], target = 10",
        "output": "[[1, 1, 2, 6], [1, 1, 3, 5], [1, 1, 8], [1, 2, 3, 4], [1, 2, 7], [1, 3, 6], [1, 4, 5], [1, 9], [2, 3, 5], [2, 8], [3, 7], [4, 6], [10]]"
      },
      {
        "input": "candidates = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target = 150",
        "output": "[[10, 20, 30, 40, 50], [10, 20, 30, 90], [10, 20, 40, 80], [10, 20, 50, 70], [10, 30, 40, 70], [10, 30, 50, 60], [10, 40, 100], [10, 50, 90], [10, 60, 80], [20, 30, 40, 60], [20, 30, 100], [20, 40, 90], [20, 50, 80], [20, 60, 70], [30, 40, 80], [30, 50, 70], [40, 50, 60], [50, 100], [60, 90], [70, 80]]"
      },
      {
        "input": "candidates = [1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9], target = 10",
        "output": "[[1, 2, 2, 2, 3], [1, 2, 2, 5], [1, 2, 3, 4], [1, 2, 7], [1, 3, 6], [1, 4, 5], [1, 9], [2, 2, 2, 4], [2, 2, 6], [2, 3, 5], [2, 8], [3, 7], [4, 6]]"
      },
      {
        "input": "candidates = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], target = 25",
        "output": "[[5, 5, 5, 5, 5]]"
      },
      {
        "input": "candidates = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31], target = 45",
        "output": "[[1, 3, 5, 7, 29], [1, 3, 5, 9, 27], [1, 3, 5, 11, 25], [1, 3, 5, 13, 23], [1, 3, 5, 15, 21], [1, 3, 5, 17, 19], [1, 3, 7, 9, 25], [1, 3, 7, 11, 23], [1, 3, 7, 13, 21], [1, 3, 7, 15, 19], [1, 3, 9, 11, 21], [1, 3, 9, 13, 19], [1, 3, 9, 15, 17], [1, 3, 11, 13, 17], [1, 5, 7, 9, 23], [1, 5, 7, 11, 21], [1, 5, 7, 13, 19], [1, 5, 7, 15, 17], [1, 5, 9, 11, 19], [1, 5, 9, 13, 17], [1, 5, 11, 13, 15], [1, 7, 9, 11, 17], [1, 7, 9, 13, 15], [1, 13, 31], [1, 15, 29], [1, 17, 27], [1, 19, 25], [1, 21, 23], [3, 5, 7, 9, 21], [3, 5, 7, 11, 19], [3, 5, 7, 13, 17], [3, 5, 9, 11, 17], [3, 5, 9, 13, 15], [3, 7, 9, 11, 15], [3, 11, 31], [3, 13, 29], [3, 15, 27], [3, 17, 25], [3, 19, 23], [5, 7, 9, 11, 13], [5, 9, 31], [5, 11, 29], [5, 13, 27], [5, 15, 25], [5, 17, 23], [5, 19, 21], [7, 9, 29], [7, 11, 27], [7, 13, 25], [7, 15, 23], [7, 17, 21], [9, 11, 25], [9, 13, 23], [9, 15, 21], [9, 17, 19], [11, 13, 21], [11, 15, 19], [13, 15, 17]]"
      },
      {
        "input": "candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 25",
        "output": "[[1, 2, 3, 4, 5, 10], [1, 2, 3, 4, 6, 9], [1, 2, 3, 4, 7, 8], [1, 2, 3, 5, 6, 8], [1, 2, 3, 9, 10], [1, 2, 4, 5, 6, 7], [1, 2, 4, 8, 10], [1, 2, 5, 7, 10], [1, 2, 5, 8, 9], [1, 2, 6, 7, 9], [1, 3, 4, 7, 10], [1, 3, 4, 8, 9], [1, 3, 5, 6, 10], [1, 3, 5, 7, 9], [1, 3, 6, 7, 8], [1, 4, 5, 6, 9], [1, 4, 5, 7, 8], [1, 5, 9, 10], [1, 6, 8, 10], [1, 7, 8, 9], [2, 3, 4, 6, 10], [2, 3, 4, 7, 9], [2, 3, 5, 6, 9], [2, 3, 5, 7, 8], [2, 4, 5, 6, 8], [2, 4, 9, 10], [2, 5, 8, 10], [2, 6, 7, 10], [2, 6, 8, 9], [3, 4, 5, 6, 7], [3, 4, 8, 10], [3, 5, 7, 10], [3, 5, 8, 9], [3, 6, 7, 9], [4, 5, 6, 10], [4, 5, 7, 9], [4, 6, 7, 8], [6, 9, 10], [7, 8, 10]]"
      },
      {
        "input": "candidates = [7, 6, 5, 4, 3, 2, 1], target = 15",
        "output": "[[1, 2, 3, 4, 5], [1, 2, 5, 7], [1, 3, 4, 7], [1, 3, 5, 6], [2, 3, 4, 6], [2, 6, 7], [3, 5, 7], [4, 5, 6]]"
      },
      {
        "input": "candidates = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], target = 10",
        "output": "[[1, 1, 2, 2, 4], [1, 1, 2, 3, 3], [1, 1, 3, 5], [1, 1, 4, 4], [1, 2, 2, 5], [1, 2, 3, 4], [1, 4, 5], [2, 2, 3, 3], [2, 3, 5], [2, 4, 4], [3, 3, 4], [5, 5]]"
      },
      {
        "input": "candidates = [1, 3, 2, 5, 4, 2, 2], target = 10",
        "output": "[[1, 2, 2, 2, 3], [1, 2, 2, 5], [1, 2, 3, 4], [1, 4, 5], [2, 2, 2, 4], [2, 3, 5]]"
      },
      {
        "input": "candidates = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], target = 20",
        "output": "[[4, 4, 4, 4, 4]]"
      },
      {
        "input": "candidates = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9], target = 30",
        "output": "[[1, 2, 3, 4, 5, 6, 9], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 10, 10], [1, 2, 3, 5, 9, 10], [1, 2, 3, 6, 8, 10], [1, 2, 3, 7, 8, 9], [1, 2, 4, 5, 8, 10], [1, 2, 4, 6, 7, 10], [1, 2, 4, 6, 8, 9], [1, 2, 5, 6, 7, 9], [1, 2, 7, 10, 10], [1, 2, 8, 9, 10], [1, 3, 4, 5, 7, 10], [1, 3, 4, 5, 8, 9], [1, 3, 4, 6, 7, 9], [1, 3, 5, 6, 7, 8], [1, 3, 6, 10, 10], [1, 3, 7, 9, 10], [1, 4, 5, 10, 10], [1, 4, 6, 9, 10], [1, 4, 7, 8, 10], [1, 5, 6, 8, 10], [1, 5, 7, 8, 9], [1, 9, 10, 10], [2, 3, 4, 5, 6, 10], [2, 3, 4, 5, 7, 9], [2, 3, 4, 6, 7, 8], [2, 3, 5, 10, 10], [2, 3, 6, 9, 10], [2, 3, 7, 8, 10], [2, 4, 5, 9, 10], [2, 4, 6, 8, 10], [2, 4, 7, 8, 9], [2, 5, 6, 7, 10], [2, 5, 6, 8, 9], [2, 8, 10, 10], [3, 4, 5, 8, 10], [3, 4, 6, 7, 10], [3, 4, 6, 8, 9], [3, 5, 6, 7, 9], [3, 7, 10, 10], [3, 8, 9, 10], [4, 5, 6, 7, 8], [4, 6, 10, 10], [4, 7, 9, 10], [5, 6, 9, 10], [5, 7, 8, 10], [6, 7, 8, 9], [10, 10, 10]]"
      },
      {
        "input": "candidates = [3, 30, 3, 9, 4, 9, 8, 5, 5, 2, 18, 6, 3, 7, 15, 6, 4], target = 49",
        "output": "[[2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 8], [2, 3, 3, 3, 4, 4, 5, 7, 9, 9], [2, 3, 3, 3, 4, 4, 5, 7, 18], [2, 3, 3, 3, 4, 4, 6, 6, 9, 9], [2, 3, 3, 3, 4, 4, 6, 6, 18], [2, 3, 3, 3, 4, 4, 6, 7, 8, 9], [2, 3, 3, 3, 4, 4, 6, 9, 15], [2, 3, 3, 3, 4, 4, 7, 8, 15], [2, 3, 3, 3, 4, 4, 30], [2, 3, 3, 3, 4, 5, 5, 6, 9, 9], [2, 3, 3, 3, 4, 5, 5, 6, 18], [2, 3, 3, 3, 4, 5, 5, 7, 8, 9], [2, 3, 3, 3, 4, 5, 5, 9, 15], [2, 3, 3, 3, 4, 5, 6, 6, 8, 9], [2, 3, 3, 3, 4, 5, 6, 8, 15], [2, 3, 3, 3, 4, 6, 6, 7, 15], [2, 3, 3, 3, 4, 7, 9, 18], [2, 3, 3, 3, 5, 5, 6, 6, 7, 9], [2, 3, 3, 3, 5, 5, 6, 7, 15], [2, 3, 3, 3, 5, 6, 9, 18], [2, 3, 3, 3, 5, 7, 8, 9, 9], [2, 3, 3, 3, 5, 7, 8, 18], [2, 3, 3, 3, 5, 9, 9, 15], [2, 3, 3, 3, 5, 15, 18], [2, 3, 3, 3, 6, 6, 8, 9, 9], [2, 3, 3, 3, 6, 6, 8, 18], [2, 3, 3, 3, 6, 8, 9, 15], [2, 3, 3, 3, 8, 30], [2, 3, 3, 4, 4, 5, 5, 6, 8, 9], [2, 3, 3, 4, 4, 5, 5, 8, 15], [2, 3, 3, 4, 4, 5, 6, 6, 7, 9], [2, 3, 3, 4, 4, 5, 6, 7, 15], [2, 3, 3, 4, 4, 6, 9, 18], [2, 3, 3, 4, 4, 7, 8, 9, 9], [2, 3, 3, 4, 4, 7, 8, 18], [2, 3, 3, 4, 4, 9, 9, 15], [2, 3, 3, 4, 4, 15, 18], [2, 3, 3, 4, 5, 5, 6, 6, 7, 8], [2, 3, 3, 4, 5, 5, 6, 6, 15], [2, 3, 3, 4, 5, 5, 9, 18], [2, 3, 3, 4, 5, 6, 8, 9, 9], [2, 3, 3, 4, 5, 6, 8, 18], [2, 3, 3, 4, 5, 8, 9, 15], [2, 3, 3, 4, 6, 6, 7, 9, 9], [2, 3, 3, 4, 6, 6, 7, 18], [2, 3, 3, 4, 6, 7, 9, 15], [2, 3, 3, 4, 7, 30], [2, 3, 3, 5, 5, 6, 7, 9, 9], [2, 3, 3, 5, 5, 6, 7, 18], [2, 3, 3, 5, 5, 7, 9, 15], [2, 3, 3, 5, 6, 6, 7, 8, 9], [2, 3, 3, 5, 6, 6, 9, 15], [2, 3, 3, 5, 6, 7, 8, 15], [2, 3, 3, 5, 6, 30], [2, 3, 3, 5, 9, 9, 18], [2, 3, 3, 6, 8, 9, 18], [2, 3, 3, 8, 9, 9, 15], [2, 3, 3, 8, 15, 18], [2, 3, 4, 4, 5, 5, 8, 9, 9], [2, 3, 4, 4, 5, 5, 8, 18], [2, 3, 4, 4, 5, 6, 7, 9, 9], [2, 3, 4, 4, 5, 6, 7, 18], [2, 3, 4, 4, 5, 7, 9, 15], [2, 3, 4, 4, 6, 6, 7, 8, 9], [2, 3, 4, 4, 6, 6, 9, 15], [2, 3, 4, 4, 6, 7, 8, 15], [2, 3, 4, 4, 6, 30], [2, 3, 4, 4, 9, 9, 18], [2, 3, 4, 5, 5, 6, 6, 9, 9], [2, 3, 4, 5, 5, 6, 6, 18], [2, 3, 4, 5, 5, 6, 7, 8, 9], [2, 3, 4, 5, 5, 6, 9, 15], [2, 3, 4, 5, 5, 7, 8, 15], [2, 3, 4, 5, 5, 30], [2, 3, 4, 5, 6, 6, 8, 15], [2, 3, 4, 5, 8, 9, 18], [2, 3, 4, 6, 7, 9, 18], [2, 3, 4, 7, 9, 9, 15], [2, 3, 4, 7, 15, 18], [2, 3, 5, 5, 6, 6, 7, 15], [2, 3, 5, 5, 7, 9, 18], [2, 3, 5, 6, 6, 9, 18], [2, 3, 5, 6, 7, 8, 9, 9], [2, 3, 5, 6, 7, 8, 18], [2, 3, 5, 6, 9, 9, 15], [2, 3, 5, 6, 15, 18], [2, 3, 5, 7, 8, 9, 15], [2, 3, 5, 9, 30], [2, 3, 6, 6, 8, 9, 15], [2, 3, 6, 8, 30], [2, 3, 8, 9, 9, 18], [2, 4, 4, 5, 5, 6, 6, 8, 9], [2, 4, 4, 5, 5, 6, 8, 15], [2, 4, 4, 5, 6, 6, 7, 15], [2, 4, 4, 5, 7, 9, 18], [2, 4, 4, 6, 6, 9, 18], [2, 4, 4, 6, 7, 8, 9, 9], [2, 4, 4, 6, 7, 8, 18], [2, 4, 4, 6, 9, 9, 15], [2, 4, 4, 6, 15, 18], [2, 4, 4, 7, 8, 9, 15], [2, 4, 4, 9, 30], [2, 4, 5, 5, 6, 9, 18], [2, 4, 5, 5, 7, 8, 9, 9], [2, 4, 5, 5, 7, 8, 18], [2, 4, 5, 5, 9, 9, 15], [2, 4, 5, 5, 15, 18], [2, 4, 5, 6, 6, 8, 9, 9], [2, 4, 5, 6, 6, 8, 18], [2, 4, 5, 6, 8, 9, 15], [2, 4, 5, 8, 30], [2, 4, 6, 6, 7, 9, 15], [2, 4, 6, 7, 30], [2, 4, 7, 9, 9, 18], [2, 5, 5, 6, 6, 7, 9, 9], [2, 5, 5, 6, 6, 7, 18], [2, 5, 5, 6, 7, 9, 15], [2, 5, 5, 7, 30], [2, 5, 6, 6, 7, 8, 15], [2, 5, 6, 6, 30], [2, 5, 6, 9, 9, 18], [2, 5, 7, 8, 9, 18], [2, 5, 9, 15, 18], [2, 6, 6, 8, 9, 18], [2, 6, 8, 9, 9, 15], [2, 6, 8, 15, 18], [2, 8, 9, 30], [3, 3, 3, 4, 4, 5, 5, 6, 7, 9], [3, 3, 3, 4, 4, 5, 5, 7, 15], [3, 3, 3, 4, 4, 5, 6, 6, 7, 8], [3, 3, 3, 4, 4, 5, 6, 6, 15], [3, 3, 3, 4, 4, 5, 9, 18], [3, 3, 3, 4, 4, 6, 8, 9, 9], [3, 3, 3, 4, 4, 6, 8, 18], [3, 3, 3, 4, 4, 8, 9, 15], [3, 3, 3, 4, 5, 5, 8, 9, 9], [3, 3, 3, 4, 5, 5, 8, 18], [3, 3, 3, 4, 5, 6, 7, 9, 9], [3, 3, 3, 4, 5, 6, 7, 18], [3, 3, 3, 4, 5, 7, 9, 15], [3, 3, 3, 4, 6, 6, 7, 8, 9], [3, 3, 3, 4, 6, 6, 9, 15], [3, 3, 3, 4, 6, 7, 8, 15], [3, 3, 3, 4, 6, 30], [3, 3, 3, 4, 9, 9, 18], [3, 3, 3, 5, 5, 6, 6, 9, 9], [3, 3, 3, 5, 5, 6, 6, 18], [3, 3, 3, 5, 5, 6, 7, 8, 9], [3, 3, 3, 5, 5, 6, 9, 15], [3, 3, 3, 5, 5, 7, 8, 15], [3, 3, 3, 5, 5, 30], [3, 3, 3, 5, 6, 6, 8, 15], [3, 3, 3, 5, 8, 9, 18], [3, 3, 3, 6, 7, 9, 18], [3, 3, 3, 7, 9, 9, 15], [3, 3, 3, 7, 15, 18], [3, 3, 4, 4, 5, 5, 7, 9, 9], [3, 3, 4, 4, 5, 5, 7, 18], [3, 3, 4, 4, 5, 6, 6, 9, 9], [3, 3, 4, 4, 5, 6, 6, 18], [3, 3, 4, 4, 5, 6, 7, 8, 9], [3, 3, 4, 4, 5, 6, 9, 15], [3, 3, 4, 4, 5, 7, 8, 15], [3, 3, 4, 4, 5, 30], [3, 3, 4, 4, 6, 6, 8, 15], [3, 3, 4, 4, 8, 9, 18], [3, 3, 4, 5, 5, 6, 6, 8, 9], [3, 3, 4, 5, 5, 6, 8, 15], [3, 3, 4, 5, 6, 6, 7, 15], [3, 3, 4, 5, 7, 9, 18], [3, 3, 4, 6, 6, 9, 18], [3, 3, 4, 6, 7, 8, 9, 9], [3, 3, 4, 6, 7, 8, 18], [3, 3, 4, 6, 9, 9, 15], [3, 3, 4, 6, 15, 18], [3, 3, 4, 7, 8, 9, 15], [3, 3, 4, 9, 30], [3, 3, 5, 5, 6, 9, 18], [3, 3, 5, 5, 7, 8, 9, 9], [3, 3, 5, 5, 7, 8, 18], [3, 3, 5, 5, 9, 9, 15], [3, 3, 5, 5, 15, 18], [3, 3, 5, 6, 6, 8, 9, 9], [3, 3, 5, 6, 6, 8, 18], [3, 3, 5, 6, 8, 9, 15], [3, 3, 5, 8, 30], [3, 3, 6, 6, 7, 9, 15], [3, 3, 6, 7, 30], [3, 3, 7, 9, 9, 18], [3, 4, 4, 5, 5, 6, 6, 7, 9], [3, 4, 4, 5, 5, 6, 7, 15], [3, 4, 4, 5, 6, 9, 18], [3, 4, 4, 5, 7, 8, 9, 9], [3, 4, 4, 5, 7, 8, 18], [3, 4, 4, 5, 9, 9, 15], [3, 4, 4, 5, 15, 18], [3, 4, 4, 6, 6, 8, 9, 9], [3, 4, 4, 6, 6, 8, 18], [3, 4, 4, 6, 8, 9, 15], [3, 4, 4, 8, 30], [3, 4, 5, 5, 6, 8, 9, 9], [3, 4, 5, 5, 6, 8, 18], [3, 4, 5, 5, 8, 9, 15], [3, 4, 5, 6, 6, 7, 9, 9], [3, 4, 5, 6, 6, 7, 18], [3, 4, 5, 6, 7, 9, 15], [3, 4, 5, 7, 30], [3, 4, 6, 6, 7, 8, 15], [3, 4, 6, 6, 30], [3, 4, 6, 9, 9, 18], [3, 4, 7, 8, 9, 18], [3, 4, 9, 15, 18], [3, 5, 5, 6, 6, 7, 8, 9], [3, 5, 5, 6, 6, 9, 15], [3, 5, 5, 6, 7, 8, 15], [3, 5, 5, 6, 30], [3, 5, 5, 9, 9, 18], [3, 5, 6, 8, 9, 18], [3, 5, 8, 9, 9, 15], [3, 5, 8, 15, 18], [3, 6, 6, 7, 9, 18], [3, 6, 7, 9, 9, 15], [3, 6, 7, 15, 18], [3, 7, 9, 30], [4, 4, 5, 5, 6, 7, 9, 9], [4, 4, 5, 5, 6, 7, 18], [4, 4, 5, 5, 7, 9, 15], [4, 4, 5, 6, 6, 7, 8, 9], [4, 4, 5, 6, 6, 9, 15], [4, 4, 5, 6, 7, 8, 15], [4, 4, 5, 6, 30], [4, 4, 5, 9, 9, 18], [4, 4, 6, 8, 9, 18], [4, 4, 8, 9, 9, 15], [4, 4, 8, 15, 18], [4, 5, 5, 6, 6, 8, 15], [4, 5, 5, 8, 9, 18], [4, 5, 6, 7, 9, 18], [4, 5, 7, 9, 9, 15], [4, 5, 7, 15, 18], [4, 6, 6, 7, 8, 9, 9], [4, 6, 6, 7, 8, 18], [4, 6, 6, 9, 9, 15], [4, 6, 6, 15, 18], [4, 6, 7, 8, 9, 15], [4, 6, 9, 30], [4, 7, 8, 30], [4, 15, 30], [5, 5, 6, 6, 9, 18], [5, 5, 6, 7, 8, 9, 9], [5, 5, 6, 7, 8, 18], [5, 5, 6, 9, 9, 15], [5, 5, 6, 15, 18], [5, 5, 7, 8, 9, 15], [5, 5, 9, 30], [5, 6, 6, 8, 9, 15], [5, 6, 8, 30], [5, 8, 9, 9, 18], [6, 6, 7, 30], [6, 7, 9, 9, 18], [7, 9, 15, 18]]"
      },
      {
        "input": "candidates = [5, 10, 15, 20, 25, 30, 35], target = 70",
        "output": "[[5, 10, 20, 35], [5, 10, 25, 30], [5, 15, 20, 30], [5, 30, 35], [10, 15, 20, 25], [10, 25, 35], [15, 20, 35], [15, 25, 30]]"
      },
      {
        "input": "candidates = [2,2,2,2,2,3,3,3,3,4,4,4,5,5,5], target = 11",
        "output": "[[2, 2, 2, 2, 3], [2, 2, 2, 5], [2, 2, 3, 4], [2, 3, 3, 3], [2, 4, 5], [3, 3, 5], [3, 4, 4]]"
      },
      {
        "input": "candidates = [10, 1, 2, 7, 6, 1, 5, 3, 4, 2, 3, 1, 5], target = 15",
        "output": "[[1, 1, 1, 2, 2, 3, 5], [1, 1, 1, 2, 3, 3, 4], [1, 1, 1, 2, 3, 7], [1, 1, 1, 2, 4, 6], [1, 1, 1, 2, 5, 5], [1, 1, 1, 2, 10], [1, 1, 1, 3, 3, 6], [1, 1, 1, 3, 4, 5], [1, 1, 1, 5, 7], [1, 1, 2, 2, 3, 6], [1, 1, 2, 2, 4, 5], [1, 1, 2, 3, 3, 5], [1, 1, 2, 4, 7], [1, 1, 2, 5, 6], [1, 1, 3, 3, 7], [1, 1, 3, 4, 6], [1, 1, 3, 5, 5], [1, 1, 3, 10], [1, 1, 6, 7], [1, 2, 2, 3, 3, 4], [1, 2, 2, 3, 7], [1, 2, 2, 4, 6], [1, 2, 2, 5, 5], [1, 2, 2, 10], [1, 2, 3, 3, 6], [1, 2, 3, 4, 5], [1, 2, 5, 7], [1, 3, 4, 7], [1, 3, 5, 6], [1, 4, 5, 5], [1, 4, 10], [2, 2, 3, 3, 5], [2, 2, 4, 7], [2, 2, 5, 6], [2, 3, 3, 7], [2, 3, 4, 6], [2, 3, 5, 5], [2, 3, 10], [2, 6, 7], [3, 3, 4, 5], [3, 5, 7], [4, 5, 6], [5, 10]]"
      },
      {
        "input": "candidates = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], target = 28",
        "output": "[[1, 3, 5, 19], [1, 3, 7, 17], [1, 3, 9, 15], [1, 3, 11, 13], [1, 5, 7, 15], [1, 5, 9, 13], [1, 7, 9, 11], [1, 27], [3, 5, 7, 13], [3, 5, 9, 11], [3, 25], [5, 23], [7, 21], [9, 19], [11, 17], [13, 15]]"
      },
      {
        "input": "candidates = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5], target = 15",
        "output": "[[1, 2, 2, 2, 3, 5], [1, 2, 2, 2, 4, 4], [1, 2, 2, 3, 3, 4], [1, 2, 2, 5, 5], [1, 2, 3, 4, 5], [1, 2, 4, 4, 4], [1, 3, 3, 3, 5], [1, 3, 3, 4, 4], [1, 4, 5, 5], [2, 2, 2, 3, 3, 3], [2, 2, 2, 4, 5], [2, 2, 3, 3, 5], [2, 2, 3, 4, 4], [2, 3, 3, 3, 4], [2, 3, 5, 5], [2, 4, 4, 5], [3, 3, 4, 5], [3, 4, 4, 4], [5, 5, 5]]"
      },
      {
        "input": "candidates = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4], target = 20",
        "output": "[[4, 4, 4, 4, 4]]"
      },
      {
        "input": "candidates = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], target = 20",
        "output": "[[1, 2, 3, 4, 10], [1, 2, 3, 5, 9], [1, 2, 3, 6, 8], [1, 2, 3, 14], [1, 2, 4, 5, 8], [1, 2, 4, 6, 7], [1, 2, 4, 13], [1, 2, 5, 12], [1, 2, 6, 11], [1, 2, 7, 10], [1, 2, 8, 9], [1, 3, 4, 5, 7], [1, 3, 4, 12], [1, 3, 5, 11], [1, 3, 6, 10], [1, 3, 7, 9], [1, 4, 5, 10], [1, 4, 6, 9], [1, 4, 7, 8], [1, 4, 15], [1, 5, 6, 8], [1, 5, 14], [1, 6, 13], [1, 7, 12], [1, 8, 11], [1, 9, 10], [2, 3, 4, 5, 6], [2, 3, 4, 11], [2, 3, 5, 10], [2, 3, 6, 9], [2, 3, 7, 8], [2, 3, 15], [2, 4, 5, 9], [2, 4, 6, 8], [2, 4, 14], [2, 5, 6, 7], [2, 5, 13], [2, 6, 12], [2, 7, 11], [2, 8, 10], [3, 4, 5, 8], [3, 4, 6, 7], [3, 4, 13], [3, 5, 12], [3, 6, 11], [3, 7, 10], [3, 8, 9], [4, 5, 11], [4, 6, 10], [4, 7, 9], [5, 6, 9], [5, 7, 8], [5, 15], [6, 14], [7, 13], [8, 12], [9, 11]]"
      },
      {
        "input": "candidates = [10, 20, 30, 40, 50], target = 60",
        "output": "[[10, 20, 30], [10, 50], [20, 40]]"
      },
      {
        "input": "candidates = [10, 1, 2, 7, 6, 1, 5, 3, 4, 8], target = 12",
        "output": "[[1, 1, 2, 3, 5], [1, 1, 2, 8], [1, 1, 3, 7], [1, 1, 4, 6], [1, 1, 10], [1, 2, 3, 6], [1, 2, 4, 5], [1, 3, 8], [1, 4, 7], [1, 5, 6], [2, 3, 7], [2, 4, 6], [2, 10], [3, 4, 5], [4, 8], [5, 7]]"
      },
      {
        "input": "candidates = [20, 15, 10, 5, 3, 7, 8, 12], target = 25",
        "output": "[[3, 5, 7, 10], [3, 7, 15], [3, 10, 12], [5, 8, 12], [5, 20], [7, 8, 10], [10, 15]]"
      },
      {
        "input": "candidates = [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22], target = 40",
        "output": "[[3, 4, 5, 6, 7, 15], [3, 4, 5, 6, 8, 14], [3, 4, 5, 6, 9, 13], [3, 4, 5, 6, 10, 12], [3, 4, 5, 6, 22], [3, 4, 5, 7, 8, 13], [3, 4, 5, 7, 9, 12], [3, 4, 5, 7, 10, 11], [3, 4, 5, 7, 21], [3, 4, 5, 8, 9, 11], [3, 4, 5, 8, 20], [3, 4, 5, 9, 19], [3, 4, 5, 10, 18], [3, 4, 5, 11, 17], [3, 4, 5, 12, 16], [3, 4, 5, 13, 15], [3, 4, 6, 7, 8, 12], [3, 4, 6, 7, 9, 11], [3, 4, 6, 7, 20], [3, 4, 6, 8, 9, 10], [3, 4, 6, 8, 19], [3, 4, 6, 9, 18], [3, 4, 6, 10, 17], [3, 4, 6, 11, 16], [3, 4, 6, 12, 15], [3, 4, 6, 13, 14], [3, 4, 7, 8, 18], [3, 4, 7, 9, 17], [3, 4, 7, 10, 16], [3, 4, 7, 11, 15], [3, 4, 7, 12, 14], [3, 4, 8, 9, 16], [3, 4, 8, 10, 15], [3, 4, 8, 11, 14], [3, 4, 8, 12, 13], [3, 4, 9, 10, 14], [3, 4, 9, 11, 13], [3, 4, 10, 11, 12], [3, 4, 11, 22], [3, 4, 12, 21], [3, 4, 13, 20], [3, 4, 14, 19], [3, 4, 15, 18], [3, 4, 16, 17], [3, 5, 6, 7, 8, 11], [3, 5, 6, 7, 9, 10], [3, 5, 6, 7, 19], [3, 5, 6, 8, 18], [3, 5, 6, 9, 17], [3, 5, 6, 10, 16], [3, 5, 6, 11, 15], [3, 5, 6, 12, 14], [3, 5, 7, 8, 17], [3, 5, 7, 9, 16], [3, 5, 7, 10, 15], [3, 5, 7, 11, 14], [3, 5, 7, 12, 13], [3, 5, 8, 9, 15], [3, 5, 8, 10, 14], [3, 5, 8, 11, 13], [3, 5, 9, 10, 13], [3, 5, 9, 11, 12], [3, 5, 10, 22], [3, 5, 11, 21], [3, 5, 12, 20], [3, 5, 13, 19], [3, 5, 14, 18], [3, 5, 15, 17], [3, 6, 7, 8, 16], [3, 6, 7, 9, 15], [3, 6, 7, 10, 14], [3, 6, 7, 11, 13], [3, 6, 8, 9, 14], [3, 6, 8, 10, 13], [3, 6, 8, 11, 12], [3, 6, 9, 10, 12], [3, 6, 9, 22], [3, 6, 10, 21], [3, 6, 11, 20], [3, 6, 12, 19], [3, 6, 13, 18], [3, 6, 14, 17], [3, 6, 15, 16], [3, 7, 8, 9, 13], [3, 7, 8, 10, 12], [3, 7, 8, 22], [3, 7, 9, 10, 11], [3, 7, 9, 21], [3, 7, 10, 20], [3, 7, 11, 19], [3, 7, 12, 18], [3, 7, 13, 17], [3, 7, 14, 16], [3, 8, 9, 20], [3, 8, 10, 19], [3, 8, 11, 18], [3, 8, 12, 17], [3, 8, 13, 16], [3, 8, 14, 15], [3, 9, 10, 18], [3, 9, 11, 17], [3, 9, 12, 16], [3, 9, 13, 15], [3, 10, 11, 16], [3, 10, 12, 15], [3, 10, 13, 14], [3, 11, 12, 14], [3, 15, 22], [3, 16, 21], [3, 17, 20], [3, 18, 19], [4, 5, 6, 7, 8, 10], [4, 5, 6, 7, 18], [4, 5, 6, 8, 17], [4, 5, 6, 9, 16], [4, 5, 6, 10, 15], [4, 5, 6, 11, 14], [4, 5, 6, 12, 13], [4, 5, 7, 8, 16], [4, 5, 7, 9, 15], [4, 5, 7, 10, 14], [4, 5, 7, 11, 13], [4, 5, 8, 9, 14], [4, 5, 8, 10, 13], [4, 5, 8, 11, 12], [4, 5, 9, 10, 12], [4, 5, 9, 22], [4, 5, 10, 21], [4, 5, 11, 20], [4, 5, 12, 19], [4, 5, 13, 18], [4, 5, 14, 17], [4, 5, 15, 16], [4, 6, 7, 8, 15], [4, 6, 7, 9, 14], [4, 6, 7, 10, 13], [4, 6, 7, 11, 12], [4, 6, 8, 9, 13], [4, 6, 8, 10, 12], [4, 6, 8, 22], [4, 6, 9, 10, 11], [4, 6, 9, 21], [4, 6, 10, 20], [4, 6, 11, 19], [4, 6, 12, 18], [4, 6, 13, 17], [4, 6, 14, 16], [4, 7, 8, 9, 12], [4, 7, 8, 10, 11], [4, 7, 8, 21], [4, 7, 9, 20], [4, 7, 10, 19], [4, 7, 11, 18], [4, 7, 12, 17], [4, 7, 13, 16], [4, 7, 14, 15], [4, 8, 9, 19], [4, 8, 10, 18], [4, 8, 11, 17], [4, 8, 12, 16], [4, 8, 13, 15], [4, 9, 10, 17], [4, 9, 11, 16], [4, 9, 12, 15], [4, 9, 13, 14], [4, 10, 11, 15], [4, 10, 12, 14], [4, 11, 12, 13], [4, 14, 22], [4, 15, 21], [4, 16, 20], [4, 17, 19], [5, 6, 7, 8, 14], [5, 6, 7, 9, 13], [5, 6, 7, 10, 12], [5, 6, 7, 22], [5, 6, 8, 9, 12], [5, 6, 8, 10, 11], [5, 6, 8, 21], [5, 6, 9, 20], [5, 6, 10, 19], [5, 6, 11, 18], [5, 6, 12, 17], [5, 6, 13, 16], [5, 6, 14, 15], [5, 7, 8, 9, 11], [5, 7, 8, 20], [5, 7, 9, 19], [5, 7, 10, 18], [5, 7, 11, 17], [5, 7, 12, 16], [5, 7, 13, 15], [5, 8, 9, 18], [5, 8, 10, 17], [5, 8, 11, 16], [5, 8, 12, 15], [5, 8, 13, 14], [5, 9, 10, 16], [5, 9, 11, 15], [5, 9, 12, 14], [5, 10, 11, 14], [5, 10, 12, 13], [5, 13, 22], [5, 14, 21], [5, 15, 20], [5, 16, 19], [5, 17, 18], [6, 7, 8, 9, 10], [6, 7, 8, 19], [6, 7, 9, 18], [6, 7, 10, 17], [6, 7, 11, 16], [6, 7, 12, 15], [6, 7, 13, 14], [6, 8, 9, 17], [6, 8, 10, 16], [6, 8, 11, 15], [6, 8, 12, 14], [6, 9, 10, 15], [6, 9, 11, 14], [6, 9, 12, 13], [6, 10, 11, 13], [6, 12, 22], [6, 13, 21], [6, 14, 20], [6, 15, 19], [6, 16, 18], [7, 8, 9, 16], [7, 8, 10, 15], [7, 8, 11, 14], [7, 8, 12, 13], [7, 9, 10, 14], [7, 9, 11, 13], [7, 10, 11, 12], [7, 11, 22], [7, 12, 21], [7, 13, 20], [7, 14, 19], [7, 15, 18], [7, 16, 17], [8, 9, 10, 13], [8, 9, 11, 12], [8, 10, 22], [8, 11, 21], [8, 12, 20], [8, 13, 19], [8, 14, 18], [8, 15, 17], [9, 10, 21], [9, 11, 20], [9, 12, 19], [9, 13, 18], [9, 14, 17], [9, 15, 16], [10, 11, 19], [10, 12, 18], [10, 13, 17], [10, 14, 16], [11, 12, 17], [11, 13, 16], [11, 14, 15], [12, 13, 15], [18, 22], [19, 21]]"
      },
      {
        "input": "candidates = [1, 3, 2, 6, 7, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1], target = 9",
        "output": "[[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 2, 3], [1, 1, 1, 2, 4], [1, 1, 1, 6], [1, 1, 3, 4], [1, 1, 7], [1, 2, 6], [2, 3, 4], [2, 7], [3, 6]]"
      },
      {
        "input": "candidates = [10,20,30,40,50,60,70,80,90], target = 100",
        "output": "[[10, 20, 30, 40], [10, 20, 70], [10, 30, 60], [10, 40, 50], [10, 90], [20, 30, 50], [20, 80], [30, 70], [40, 60]]"
      },
      {
        "input": "candidates = [10,20,30,40,50], target = 100",
        "output": "[[10, 20, 30, 40], [10, 40, 50], [20, 30, 50]]"
      },
      {
        "input": "candidates = [10, 1, 2, 7, 6, 1, 5, 3, 4], target = 10",
        "output": "[[1, 1, 2, 6], [1, 1, 3, 5], [1, 2, 3, 4], [1, 2, 7], [1, 3, 6], [1, 4, 5], [2, 3, 5], [3, 7], [4, 6], [10]]"
      },
      {
        "input": "candidates = [30, 20, 10, 5, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 30",
        "output": "[[1, 2, 3, 4, 5, 6, 9], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 15], [1, 2, 3, 4, 6, 14], [1, 2, 3, 4, 7, 13], [1, 2, 3, 4, 8, 12], [1, 2, 3, 4, 9, 11], [1, 2, 3, 4, 10, 10], [1, 2, 3, 4, 20], [1, 2, 3, 5, 6, 13], [1, 2, 3, 5, 7, 12], [1, 2, 3, 5, 8, 11], [1, 2, 3, 5, 9, 10], [1, 2, 3, 6, 7, 11], [1, 2, 3, 6, 8, 10], [1, 2, 3, 7, 8, 9], [1, 2, 3, 9, 15], [1, 2, 3, 10, 14], [1, 2, 3, 11, 13], [1, 2, 4, 5, 6, 12], [1, 2, 4, 5, 7, 11], [1, 2, 4, 5, 8, 10], [1, 2, 4, 6, 7, 10], [1, 2, 4, 6, 8, 9], [1, 2, 4, 8, 15], [1, 2, 4, 9, 14], [1, 2, 4, 10, 13], [1, 2, 4, 11, 12], [1, 2, 5, 6, 7, 9], [1, 2, 5, 7, 15], [1, 2, 5, 8, 14], [1, 2, 5, 9, 13], [1, 2, 5, 10, 12], [1, 2, 6, 7, 14], [1, 2, 6, 8, 13], [1, 2, 6, 9, 12], [1, 2, 6, 10, 11], [1, 2, 7, 8, 12], [1, 2, 7, 9, 11], [1, 2, 7, 10, 10], [1, 2, 7, 20], [1, 2, 8, 9, 10], [1, 2, 12, 15], [1, 2, 13, 14], [1, 3, 4, 5, 6, 11], [1, 3, 4, 5, 7, 10], [1, 3, 4, 5, 8, 9], [1, 3, 4, 6, 7, 9], [1, 3, 4, 7, 15], [1, 3, 4, 8, 14], [1, 3, 4, 9, 13], [1, 3, 4, 10, 12], [1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 15], [1, 3, 5, 7, 14], [1, 3, 5, 8, 13], [1, 3, 5, 9, 12], [1, 3, 5, 10, 11], [1, 3, 6, 7, 13], [1, 3, 6, 8, 12], [1, 3, 6, 9, 11], [1, 3, 6, 10, 10], [1, 3, 6, 20], [1, 3, 7, 8, 11], [1, 3, 7, 9, 10], [1, 3, 11, 15], [1, 3, 12, 14], [1, 4, 5, 6, 14], [1, 4, 5, 7, 13], [1, 4, 5, 8, 12], [1, 4, 5, 9, 11], [1, 4, 5, 10, 10], [1, 4, 5, 20], [1, 4, 6, 7, 12], [1, 4, 6, 8, 11], [1, 4, 6, 9, 10], [1, 4, 7, 8, 10], [1, 4, 10, 15], [1, 4, 11, 14], [1, 4, 12, 13], [1, 5, 6, 7, 11], [1, 5, 6, 8, 10], [1, 5, 7, 8, 9], [1, 5, 9, 15], [1, 5, 10, 14], [1, 5, 11, 13], [1, 6, 8, 15], [1, 6, 9, 14], [1, 6, 10, 13], [1, 6, 11, 12], [1, 7, 8, 14], [1, 7, 9, 13], [1, 7, 10, 12], [1, 8, 9, 12], [1, 8, 10, 11], [1, 9, 10, 10], [1, 9, 20], [1, 14, 15], [2, 3, 4, 5, 6, 10], [2, 3, 4, 5, 7, 9], [2, 3, 4, 6, 7, 8], [2, 3, 4, 6, 15], [2, 3, 4, 7, 14], [2, 3, 4, 8, 13], [2, 3, 4, 9, 12], [2, 3, 4, 10, 11], [2, 3, 5, 6, 14], [2, 3, 5, 7, 13], [2, 3, 5, 8, 12], [2, 3, 5, 9, 11], [2, 3, 5, 10, 10], [2, 3, 5, 20], [2, 3, 6, 7, 12], [2, 3, 6, 8, 11], [2, 3, 6, 9, 10], [2, 3, 7, 8, 10], [2, 3, 10, 15], [2, 3, 11, 14], [2, 3, 12, 13], [2, 4, 5, 6, 13], [2, 4, 5, 7, 12], [2, 4, 5, 8, 11], [2, 4, 5, 9, 10], [2, 4, 6, 7, 11], [2, 4, 6, 8, 10], [2, 4, 7, 8, 9], [2, 4, 9, 15], [2, 4, 10, 14], [2, 4, 11, 13], [2, 5, 6, 7, 10], [2, 5, 6, 8, 9], [2, 5, 8, 15], [2, 5, 9, 14], [2, 5, 10, 13], [2, 5, 11, 12], [2, 6, 7, 15], [2, 6, 8, 14], [2, 6, 9, 13], [2, 6, 10, 12], [2, 7, 8, 13], [2, 7, 9, 12], [2, 7, 10, 11], [2, 8, 9, 11], [2, 8, 10, 10], [2, 8, 20], [2, 13, 15], [3, 4, 5, 6, 12], [3, 4, 5, 7, 11], [3, 4, 5, 8, 10], [3, 4, 6, 7, 10], [3, 4, 6, 8, 9], [3, 4, 8, 15], [3, 4, 9, 14], [3, 4, 10, 13], [3, 4, 11, 12], [3, 5, 6, 7, 9], [3, 5, 7, 15], [3, 5, 8, 14], [3, 5, 9, 13], [3, 5, 10, 12], [3, 6, 7, 14], [3, 6, 8, 13], [3, 6, 9, 12], [3, 6, 10, 11], [3, 7, 8, 12], [3, 7, 9, 11], [3, 7, 10, 10], [3, 7, 20], [3, 8, 9, 10], [3, 12, 15], [3, 13, 14], [4, 5, 6, 7, 8], [4, 5, 6, 15], [4, 5, 7, 14], [4, 5, 8, 13], [4, 5, 9, 12], [4, 5, 10, 11], [4, 6, 7, 13], [4, 6, 8, 12], [4, 6, 9, 11], [4, 6, 10, 10], [4, 6, 20], [4, 7, 8, 11], [4, 7, 9, 10], [4, 11, 15], [4, 12, 14], [5, 6, 7, 12], [5, 6, 8, 11], [5, 6, 9, 10], [5, 7, 8, 10], [5, 10, 15], [5, 11, 14], [5, 12, 13], [6, 7, 8, 9], [6, 9, 15], [6, 10, 14], [6, 11, 13], [7, 8, 15], [7, 9, 14], [7, 10, 13], [7, 11, 12], [8, 9, 13], [8, 10, 12], [9, 10, 11], [10, 20], [30]]"
      },
      {
        "input": "candidates = [1, 3, 2, 5, 4, 7, 6, 9, 8, 10], target = 15",
        "output": "[[1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 4, 8], [1, 2, 5, 7], [1, 3, 4, 7], [1, 3, 5, 6], [1, 4, 10], [1, 5, 9], [1, 6, 8], [2, 3, 4, 6], [2, 3, 10], [2, 4, 9], [2, 5, 8], [2, 6, 7], [3, 4, 8], [3, 5, 7], [4, 5, 6], [5, 10], [6, 9], [7, 8]]"
      },
      {
        "input": "candidates = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], target = 25",
        "output": "[[5, 5, 5, 5, 5]]"
      },
      {
        "input": "candidates = [20,10,5,2,3,2,1,1], target = 15",
        "output": "[[1, 1, 3, 10], [1, 2, 2, 10], [2, 3, 10], [5, 10]]"
      },
      {
        "input": "candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 25",
        "output": "[[1, 2, 3, 4, 5, 10], [1, 2, 3, 4, 6, 9], [1, 2, 3, 4, 7, 8], [1, 2, 3, 4, 15], [1, 2, 3, 5, 6, 8], [1, 2, 3, 5, 14], [1, 2, 3, 6, 13], [1, 2, 3, 7, 12], [1, 2, 3, 8, 11], [1, 2, 3, 9, 10], [1, 2, 4, 5, 6, 7], [1, 2, 4, 5, 13], [1, 2, 4, 6, 12], [1, 2, 4, 7, 11], [1, 2, 4, 8, 10], [1, 2, 5, 6, 11], [1, 2, 5, 7, 10], [1, 2, 5, 8, 9], [1, 2, 6, 7, 9], [1, 2, 7, 15], [1, 2, 8, 14], [1, 2, 9, 13], [1, 2, 10, 12], [1, 3, 4, 5, 12], [1, 3, 4, 6, 11], [1, 3, 4, 7, 10], [1, 3, 4, 8, 9], [1, 3, 5, 6, 10], [1, 3, 5, 7, 9], [1, 3, 6, 7, 8], [1, 3, 6, 15], [1, 3, 7, 14], [1, 3, 8, 13], [1, 3, 9, 12], [1, 3, 10, 11], [1, 4, 5, 6, 9], [1, 4, 5, 7, 8], [1, 4, 5, 15], [1, 4, 6, 14], [1, 4, 7, 13], [1, 4, 8, 12], [1, 4, 9, 11], [1, 5, 6, 13], [1, 5, 7, 12], [1, 5, 8, 11], [1, 5, 9, 10], [1, 6, 7, 11], [1, 6, 8, 10], [1, 7, 8, 9], [1, 9, 15], [1, 10, 14], [1, 11, 13], [2, 3, 4, 5, 11], [2, 3, 4, 6, 10], [2, 3, 4, 7, 9], [2, 3, 5, 6, 9], [2, 3, 5, 7, 8], [2, 3, 5, 15], [2, 3, 6, 14], [2, 3, 7, 13], [2, 3, 8, 12], [2, 3, 9, 11], [2, 4, 5, 6, 8], [2, 4, 5, 14], [2, 4, 6, 13], [2, 4, 7, 12], [2, 4, 8, 11], [2, 4, 9, 10], [2, 5, 6, 12], [2, 5, 7, 11], [2, 5, 8, 10], [2, 6, 7, 10], [2, 6, 8, 9], [2, 8, 15], [2, 9, 14], [2, 10, 13], [2, 11, 12], [3, 4, 5, 6, 7], [3, 4, 5, 13], [3, 4, 6, 12], [3, 4, 7, 11], [3, 4, 8, 10], [3, 5, 6, 11], [3, 5, 7, 10], [3, 5, 8, 9], [3, 6, 7, 9], [3, 7, 15], [3, 8, 14], [3, 9, 13], [3, 10, 12], [4, 5, 6, 10], [4, 5, 7, 9], [4, 6, 7, 8], [4, 6, 15], [4, 7, 14], [4, 8, 13], [4, 9, 12], [4, 10, 11], [5, 6, 14], [5, 7, 13], [5, 8, 12], [5, 9, 11], [6, 7, 12], [6, 8, 11], [6, 9, 10], [7, 8, 10], [10, 15], [11, 14], [12, 13]]"
      },
      {
        "input": "candidates = [4, 4, 4, 4, 4, 4, 4, 4], target = 16",
        "output": "[[4, 4, 4, 4]]"
      },
      {
        "input": "candidates = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], target = 20",
        "output": "[[1, 2, 2, 3, 3, 4, 5], [1, 2, 2, 3, 3, 9], [1, 2, 2, 3, 4, 8], [1, 2, 2, 3, 5, 7], [1, 2, 2, 3, 6, 6], [1, 2, 2, 4, 4, 7], [1, 2, 2, 4, 5, 6], [1, 2, 2, 5, 10], [1, 2, 2, 6, 9], [1, 2, 2, 7, 8], [1, 2, 3, 3, 4, 7], [1, 2, 3, 3, 5, 6], [1, 2, 3, 4, 4, 6], [1, 2, 3, 4, 5, 5], [1, 2, 3, 4, 10], [1, 2, 3, 5, 9], [1, 2, 3, 6, 8], [1, 2, 3, 7, 7], [1, 2, 4, 4, 9], [1, 2, 4, 5, 8], [1, 2, 4, 6, 7], [1, 2, 5, 5, 7], [1, 2, 5, 6, 6], [1, 2, 7, 10], [1, 2, 8, 9], [1, 3, 3, 4, 4, 5], [1, 3, 3, 4, 9], [1, 3, 3, 5, 8], [1, 3, 3, 6, 7], [1, 3, 4, 4, 8], [1, 3, 4, 5, 7], [1, 3, 4, 6, 6], [1, 3, 5, 5, 6], [1, 3, 6, 10], [1, 3, 7, 9], [1, 3, 8, 8], [1, 4, 4, 5, 6], [1, 4, 5, 10], [1, 4, 6, 9], [1, 4, 7, 8], [1, 5, 5, 9], [1, 5, 6, 8], [1, 5, 7, 7], [1, 6, 6, 7], [1, 9, 10], [2, 2, 3, 3, 4, 6], [2, 2, 3, 3, 5, 5], [2, 2, 3, 3, 10], [2, 2, 3, 4, 4, 5], [2, 2, 3, 4, 9], [2, 2, 3, 5, 8], [2, 2, 3, 6, 7], [2, 2, 4, 4, 8], [2, 2, 4, 5, 7], [2, 2, 4, 6, 6], [2, 2, 5, 5, 6], [2, 2, 6, 10], [2, 2, 7, 9], [2, 2, 8, 8], [2, 3, 3, 4, 8], [2, 3, 3, 5, 7], [2, 3, 3, 6, 6], [2, 3, 4, 4, 7], [2, 3, 4, 5, 6], [2, 3, 5, 10], [2, 3, 6, 9], [2, 3, 7, 8], [2, 4, 4, 5, 5], [2, 4, 4, 10], [2, 4, 5, 9], [2, 4, 6, 8], [2, 4, 7, 7], [2, 5, 5, 8], [2, 5, 6, 7], [2, 8, 10], [2, 9, 9], [3, 3, 4, 4, 6], [3, 3, 4, 5, 5], [3, 3, 4, 10], [3, 3, 5, 9], [3, 3, 6, 8], [3, 3, 7, 7], [3, 4, 4, 9], [3, 4, 5, 8], [3, 4, 6, 7], [3, 5, 5, 7], [3, 5, 6, 6], [3, 7, 10], [3, 8, 9], [4, 4, 5, 7], [4, 4, 6, 6], [4, 5, 5, 6], [4, 6, 10], [4, 7, 9], [4, 8, 8], [5, 5, 10], [5, 6, 9], [5, 7, 8], [6, 6, 8], [6, 7, 7], [10, 10]]"
      },
      {
        "input": "candidates = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], target = 45",
        "output": "[[5, 5, 5, 5, 5, 5, 5, 5, 5]]"
      },
      {
        "input": "candidates = [1,3,2,2,4,1,1,3,3,5,7,9,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], target = 20",
        "output": "[[1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4], [1, 1, 1, 1, 1, 2, 2, 2, 2, 7], [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 1, 1, 1, 2, 2, 2, 3, 6], [1, 1, 1, 1, 1, 2, 2, 2, 4, 5], [1, 1, 1, 1, 1, 2, 2, 2, 9], [1, 1, 1, 1, 1, 2, 2, 3, 3, 5], [1, 1, 1, 1, 1, 2, 2, 3, 4, 4], [1, 1, 1, 1, 1, 2, 2, 3, 8], [1, 1, 1, 1, 1, 2, 2, 4, 7], [1, 1, 1, 1, 1, 2, 2, 5, 6], [1, 1, 1, 1, 1, 2, 3, 3, 3, 4], [1, 1, 1, 1, 1, 2, 3, 3, 7], [1, 1, 1, 1, 1, 2, 3, 4, 6], [1, 1, 1, 1, 1, 2, 3, 5, 5], [1, 1, 1, 1, 1, 2, 4, 4, 5], [1, 1, 1, 1, 1, 2, 4, 9], [1, 1, 1, 1, 1, 2, 5, 8], [1, 1, 1, 1, 1, 2, 6, 7], [1, 1, 1, 1, 1, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 3, 3, 3, 6], [1, 1, 1, 1, 1, 3, 3, 4, 5], [1, 1, 1, 1, 1, 3, 3, 9], [1, 1, 1, 1, 1, 3, 4, 4, 4], [1, 1, 1, 1, 1, 3, 4, 8], [1, 1, 1, 1, 1, 3, 5, 7], [1, 1, 1, 1, 1, 3, 6, 6], [1, 1, 1, 1, 1, 4, 4, 7], [1, 1, 1, 1, 1, 4, 5, 6], [1, 1, 1, 1, 1, 5, 5, 5], [1, 1, 1, 1, 1, 6, 9], [1, 1, 1, 1, 1, 7, 8], [1, 1, 1, 1, 2, 2, 2, 2, 3, 5], [1, 1, 1, 1, 2, 2, 2, 2, 4, 4], [1, 1, 1, 1, 2, 2, 2, 2, 8], [1, 1, 1, 1, 2, 2, 2, 3, 3, 4], [1, 1, 1, 1, 2, 2, 2, 3, 7], [1, 1, 1, 1, 2, 2, 2, 4, 6], [1, 1, 1, 1, 2, 2, 2, 5, 5], [1, 1, 1, 1, 2, 2, 3, 3, 3, 3], [1, 1, 1, 1, 2, 2, 3, 3, 6], [1, 1, 1, 1, 2, 2, 3, 4, 5], [1, 1, 1, 1, 2, 2, 3, 9], [1, 1, 1, 1, 2, 2, 4, 4, 4], [1, 1, 1, 1, 2, 2, 4, 8], [1, 1, 1, 1, 2, 2, 5, 7], [1, 1, 1, 1, 2, 2, 6, 6], [1, 1, 1, 1, 2, 3, 3, 3, 5], [1, 1, 1, 1, 2, 3, 3, 4, 4], [1, 1, 1, 1, 2, 3, 3, 8], [1, 1, 1, 1, 2, 3, 4, 7], [1, 1, 1, 1, 2, 3, 5, 6], [1, 1, 1, 1, 2, 4, 4, 6], [1, 1, 1, 1, 2, 4, 5, 5], [1, 1, 1, 1, 2, 5, 9], [1, 1, 1, 1, 2, 6, 8], [1, 1, 1, 1, 2, 7, 7], [1, 1, 1, 1, 3, 3, 3, 3, 4], [1, 1, 1, 1, 3, 3, 3, 7], [1, 1, 1, 1, 3, 3, 4, 6], [1, 1, 1, 1, 3, 3, 5, 5], [1, 1, 1, 1, 3, 4, 4, 5], [1, 1, 1, 1, 3, 4, 9], [1, 1, 1, 1, 3, 5, 8], [1, 1, 1, 1, 3, 6, 7], [1, 1, 1, 1, 4, 4, 8], [1, 1, 1, 1, 4, 5, 7], [1, 1, 1, 1, 4, 6, 6], [1, 1, 1, 1, 5, 5, 6], [1, 1, 1, 1, 7, 9], [1, 1, 1, 1, 8, 8], [1, 1, 1, 2, 2, 2, 2, 3, 3, 3], [1, 1, 1, 2, 2, 2, 2, 3, 6], [1, 1, 1, 2, 2, 2, 2, 4, 5], [1, 1, 1, 2, 2, 2, 2, 9], [1, 1, 1, 2, 2, 2, 3, 3, 5], [1, 1, 1, 2, 2, 2, 3, 4, 4], [1, 1, 1, 2, 2, 2, 3, 8], [1, 1, 1, 2, 2, 2, 4, 7], [1, 1, 1, 2, 2, 2, 5, 6], [1, 1, 1, 2, 2, 3, 3, 3, 4], [1, 1, 1, 2, 2, 3, 3, 7], [1, 1, 1, 2, 2, 3, 4, 6], [1, 1, 1, 2, 2, 3, 5, 5], [1, 1, 1, 2, 2, 4, 4, 5], [1, 1, 1, 2, 2, 4, 9], [1, 1, 1, 2, 2, 5, 8], [1, 1, 1, 2, 2, 6, 7], [1, 1, 1, 2, 3, 3, 3, 3, 3], [1, 1, 1, 2, 3, 3, 3, 6], [1, 1, 1, 2, 3, 3, 4, 5], [1, 1, 1, 2, 3, 3, 9], [1, 1, 1, 2, 3, 4, 4, 4], [1, 1, 1, 2, 3, 4, 8], [1, 1, 1, 2, 3, 5, 7], [1, 1, 1, 2, 3, 6, 6], [1, 1, 1, 2, 4, 4, 7], [1, 1, 1, 2, 4, 5, 6], [1, 1, 1, 2, 5, 5, 5], [1, 1, 1, 2, 6, 9], [1, 1, 1, 2, 7, 8], [1, 1, 1, 3, 3, 3, 3, 5], [1, 1, 1, 3, 3, 3, 4, 4], [1, 1, 1, 3, 3, 3, 8], [1, 1, 1, 3, 3, 4, 7], [1, 1, 1, 3, 3, 5, 6], [1, 1, 1, 3, 4, 4, 6], [1, 1, 1, 3, 4, 5, 5], [1, 1, 1, 3, 5, 9], [1, 1, 1, 3, 6, 8], [1, 1, 1, 3, 7, 7], [1, 1, 1, 4, 4, 4, 5], [1, 1, 1, 4, 4, 9], [1, 1, 1, 4, 5, 8], [1, 1, 1, 4, 6, 7], [1, 1, 1, 5, 5, 7], [1, 1, 1, 5, 6, 6], [1, 1, 1, 8, 9], [1, 1, 2, 2, 2, 2, 3, 3, 4], [1, 1, 2, 2, 2, 2, 3, 7], [1, 1, 2, 2, 2, 2, 4, 6], [1, 1, 2, 2, 2, 2, 5, 5], [1, 1, 2, 2, 2, 3, 3, 3, 3], [1, 1, 2, 2, 2, 3, 3, 6], [1, 1, 2, 2, 2, 3, 4, 5], [1, 1, 2, 2, 2, 3, 9], [1, 1, 2, 2, 2, 4, 4, 4], [1, 1, 2, 2, 2, 4, 8], [1, 1, 2, 2, 2, 5, 7], [1, 1, 2, 2, 2, 6, 6], [1, 1, 2, 2, 3, 3, 3, 5], [1, 1, 2, 2, 3, 3, 4, 4], [1, 1, 2, 2, 3, 3, 8], [1, 1, 2, 2, 3, 4, 7], [1, 1, 2, 2, 3, 5, 6], [1, 1, 2, 2, 4, 4, 6], [1, 1, 2, 2, 4, 5, 5], [1, 1, 2, 2, 5, 9], [1, 1, 2, 2, 6, 8], [1, 1, 2, 2, 7, 7], [1, 1, 2, 3, 3, 3, 3, 4], [1, 1, 2, 3, 3, 3, 7], [1, 1, 2, 3, 3, 4, 6], [1, 1, 2, 3, 3, 5, 5], [1, 1, 2, 3, 4, 4, 5], [1, 1, 2, 3, 4, 9], [1, 1, 2, 3, 5, 8], [1, 1, 2, 3, 6, 7], [1, 1, 2, 4, 4, 8], [1, 1, 2, 4, 5, 7], [1, 1, 2, 4, 6, 6], [1, 1, 2, 5, 5, 6], [1, 1, 2, 7, 9], [1, 1, 2, 8, 8], [1, 1, 3, 3, 3, 3, 6], [1, 1, 3, 3, 3, 4, 5], [1, 1, 3, 3, 3, 9], [1, 1, 3, 3, 4, 4, 4], [1, 1, 3, 3, 4, 8], [1, 1, 3, 3, 5, 7], [1, 1, 3, 3, 6, 6], [1, 1, 3, 4, 4, 7], [1, 1, 3, 4, 5, 6], [1, 1, 3, 5, 5, 5], [1, 1, 3, 6, 9], [1, 1, 3, 7, 8], [1, 1, 4, 4, 4, 6], [1, 1, 4, 4, 5, 5], [1, 1, 4, 5, 9], [1, 1, 4, 6, 8], [1, 1, 4, 7, 7], [1, 1, 5, 5, 8], [1, 1, 5, 6, 7], [1, 1, 9, 9], [1, 2, 2, 2, 2, 3, 3, 5], [1, 2, 2, 2, 2, 3, 4, 4], [1, 2, 2, 2, 2, 3, 8], [1, 2, 2, 2, 2, 4, 7], [1, 2, 2, 2, 2, 5, 6], [1, 2, 2, 2, 3, 3, 3, 4], [1, 2, 2, 2, 3, 3, 7], [1, 2, 2, 2, 3, 4, 6], [1, 2, 2, 2, 3, 5, 5], [1, 2, 2, 2, 4, 4, 5], [1, 2, 2, 2, 4, 9], [1, 2, 2, 2, 5, 8], [1, 2, 2, 2, 6, 7], [1, 2, 2, 3, 3, 3, 3, 3], [1, 2, 2, 3, 3, 3, 6], [1, 2, 2, 3, 3, 4, 5], [1, 2, 2, 3, 3, 9], [1, 2, 2, 3, 4, 4, 4], [1, 2, 2, 3, 4, 8], [1, 2, 2, 3, 5, 7], [1, 2, 2, 3, 6, 6], [1, 2, 2, 4, 4, 7], [1, 2, 2, 4, 5, 6], [1, 2, 2, 5, 5, 5], [1, 2, 2, 6, 9], [1, 2, 2, 7, 8], [1, 2, 3, 3, 3, 3, 5], [1, 2, 3, 3, 3, 4, 4], [1, 2, 3, 3, 3, 8], [1, 2, 3, 3, 4, 7], [1, 2, 3, 3, 5, 6], [1, 2, 3, 4, 4, 6], [1, 2, 3, 4, 5, 5], [1, 2, 3, 5, 9], [1, 2, 3, 6, 8], [1, 2, 3, 7, 7], [1, 2, 4, 4, 4, 5], [1, 2, 4, 4, 9], [1, 2, 4, 5, 8], [1, 2, 4, 6, 7], [1, 2, 5, 5, 7], [1, 2, 5, 6, 6], [1, 2, 8, 9], [1, 3, 3, 3, 3, 3, 4], [1, 3, 3, 3, 3, 7], [1, 3, 3, 3, 4, 6], [1, 3, 3, 3, 5, 5], [1, 3, 3, 4, 4, 5], [1, 3, 3, 4, 9], [1, 3, 3, 5, 8], [1, 3, 3, 6, 7], [1, 3, 4, 4, 8], [1, 3, 4, 5, 7], [1, 3, 4, 6, 6], [1, 3, 5, 5, 6], [1, 3, 7, 9], [1, 3, 8, 8], [1, 4, 4, 4, 7], [1, 4, 4, 5, 6], [1, 4, 5, 5, 5], [1, 4, 6, 9], [1, 4, 7, 8], [1, 5, 5, 9], [1, 5, 6, 8], [1, 5, 7, 7], [1, 6, 6, 7], [2, 2, 2, 2, 3, 3, 3, 3], [2, 2, 2, 2, 3, 3, 6], [2, 2, 2, 2, 3, 4, 5], [2, 2, 2, 2, 3, 9], [2, 2, 2, 2, 4, 4, 4], [2, 2, 2, 2, 4, 8], [2, 2, 2, 2, 5, 7], [2, 2, 2, 2, 6, 6], [2, 2, 2, 3, 3, 3, 5], [2, 2, 2, 3, 3, 4, 4], [2, 2, 2, 3, 3, 8], [2, 2, 2, 3, 4, 7], [2, 2, 2, 3, 5, 6], [2, 2, 2, 4, 4, 6], [2, 2, 2, 4, 5, 5], [2, 2, 2, 5, 9], [2, 2, 2, 6, 8], [2, 2, 2, 7, 7], [2, 2, 3, 3, 3, 3, 4], [2, 2, 3, 3, 3, 7], [2, 2, 3, 3, 4, 6], [2, 2, 3, 3, 5, 5], [2, 2, 3, 4, 4, 5], [2, 2, 3, 4, 9], [2, 2, 3, 5, 8], [2, 2, 3, 6, 7], [2, 2, 4, 4, 8], [2, 2, 4, 5, 7], [2, 2, 4, 6, 6], [2, 2, 5, 5, 6], [2, 2, 7, 9], [2, 2, 8, 8], [2, 3, 3, 3, 3, 6], [2, 3, 3, 3, 4, 5], [2, 3, 3, 3, 9], [2, 3, 3, 4, 4, 4], [2, 3, 3, 4, 8], [2, 3, 3, 5, 7], [2, 3, 3, 6, 6], [2, 3, 4, 4, 7], [2, 3, 4, 5, 6], [2, 3, 5, 5, 5], [2, 3, 6, 9], [2, 3, 7, 8], [2, 4, 4, 4, 6], [2, 4, 4, 5, 5], [2, 4, 5, 9], [2, 4, 6, 8], [2, 4, 7, 7], [2, 5, 5, 8], [2, 5, 6, 7], [2, 9, 9], [3, 3, 3, 3, 3, 5], [3, 3, 3, 3, 4, 4], [3, 3, 3, 3, 8], [3, 3, 3, 4, 7], [3, 3, 3, 5, 6], [3, 3, 4, 4, 6], [3, 3, 4, 5, 5], [3, 3, 5, 9], [3, 3, 6, 8], [3, 3, 7, 7], [3, 4, 4, 4, 5], [3, 4, 4, 9], [3, 4, 5, 8], [3, 4, 6, 7], [3, 5, 5, 7], [3, 5, 6, 6], [3, 8, 9], [4, 4, 4, 8], [4, 4, 5, 7], [4, 4, 6, 6], [4, 5, 5, 6], [4, 7, 9], [4, 8, 8], [5, 6, 9], [5, 7, 8], [6, 6, 8], [6, 7, 7]]"
      },
      {
        "input": "candidates = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5], target = 10",
        "output": "[[1, 2, 2, 5], [1, 2, 3, 4], [1, 3, 3, 3], [1, 4, 5], [2, 2, 3, 3], [2, 3, 5], [2, 4, 4], [3, 3, 4], [5, 5]]"
      },
      {
        "input": "candidates = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], target = 20",
        "output": "[[1, 1, 1, 2, 2, 3, 3, 7], [1, 1, 1, 2, 2, 3, 4, 6], [1, 1, 1, 2, 2, 3, 5, 5], [1, 1, 1, 2, 2, 3, 10], [1, 1, 1, 2, 2, 4, 4, 5], [1, 1, 1, 2, 2, 4, 9], [1, 1, 1, 2, 2, 5, 8], [1, 1, 1, 2, 2, 6, 7], [1, 1, 1, 2, 3, 3, 4, 5], [1, 1, 1, 2, 3, 3, 9], [1, 1, 1, 2, 3, 4, 8], [1, 1, 1, 2, 3, 5, 7], [1, 1, 1, 2, 3, 6, 6], [1, 1, 1, 2, 4, 4, 7], [1, 1, 1, 2, 4, 5, 6], [1, 1, 1, 2, 5, 10], [1, 1, 1, 2, 6, 9], [1, 1, 1, 2, 7, 8], [1, 1, 1, 3, 3, 4, 7], [1, 1, 1, 3, 3, 5, 6], [1, 1, 1, 3, 4, 4, 6], [1, 1, 1, 3, 4, 5, 5], [1, 1, 1, 3, 4, 10], [1, 1, 1, 3, 5, 9], [1, 1, 1, 3, 6, 8], [1, 1, 1, 3, 7, 7], [1, 1, 1, 4, 4, 9], [1, 1, 1, 4, 5, 8], [1, 1, 1, 4, 6, 7], [1, 1, 1, 5, 5, 7], [1, 1, 1, 5, 6, 6], [1, 1, 1, 7, 10], [1, 1, 1, 8, 9], [1, 1, 2, 2, 3, 3, 4, 4], [1, 1, 2, 2, 3, 3, 8], [1, 1, 2, 2, 3, 4, 7], [1, 1, 2, 2, 3, 5, 6], [1, 1, 2, 2, 4, 4, 6], [1, 1, 2, 2, 4, 5, 5], [1, 1, 2, 2, 4, 10], [1, 1, 2, 2, 5, 9], [1, 1, 2, 2, 6, 8], [1, 1, 2, 2, 7, 7], [1, 1, 2, 3, 3, 4, 6], [1, 1, 2, 3, 3, 5, 5], [1, 1, 2, 3, 3, 10], [1, 1, 2, 3, 4, 4, 5], [1, 1, 2, 3, 4, 9], [1, 1, 2, 3, 5, 8], [1, 1, 2, 3, 6, 7], [1, 1, 2, 4, 4, 8], [1, 1, 2, 4, 5, 7], [1, 1, 2, 4, 6, 6], [1, 1, 2, 5, 5, 6], [1, 1, 2, 6, 10], [1, 1, 2, 7, 9], [1, 1, 2, 8, 8], [1, 1, 3, 3, 4, 8], [1, 1, 3, 3, 5, 7], [1, 1, 3, 3, 6, 6], [1, 1, 3, 4, 4, 7], [1, 1, 3, 4, 5, 6], [1, 1, 3, 5, 10], [1, 1, 3, 6, 9], [1, 1, 3, 7, 8], [1, 1, 4, 4, 5, 5], [1, 1, 4, 4, 10], [1, 1, 4, 5, 9], [1, 1, 4, 6, 8], [1, 1, 4, 7, 7], [1, 1, 5, 5, 8], [1, 1, 5, 6, 7], [1, 1, 8, 10], [1, 1, 9, 9], [1, 2, 2, 3, 3, 4, 5], [1, 2, 2, 3, 3, 9], [1, 2, 2, 3, 4, 8], [1, 2, 2, 3, 5, 7], [1, 2, 2, 3, 6, 6], [1, 2, 2, 4, 4, 7], [1, 2, 2, 4, 5, 6], [1, 2, 2, 5, 10], [1, 2, 2, 6, 9], [1, 2, 2, 7, 8], [1, 2, 3, 3, 4, 7], [1, 2, 3, 3, 5, 6], [1, 2, 3, 4, 4, 6], [1, 2, 3, 4, 5, 5], [1, 2, 3, 4, 10], [1, 2, 3, 5, 9], [1, 2, 3, 6, 8], [1, 2, 3, 7, 7], [1, 2, 4, 4, 9], [1, 2, 4, 5, 8], [1, 2, 4, 6, 7], [1, 2, 5, 5, 7], [1, 2, 5, 6, 6], [1, 2, 7, 10], [1, 2, 8, 9], [1, 3, 3, 4, 4, 5], [1, 3, 3, 4, 9], [1, 3, 3, 5, 8], [1, 3, 3, 6, 7], [1, 3, 4, 4, 8], [1, 3, 4, 5, 7], [1, 3, 4, 6, 6], [1, 3, 5, 5, 6], [1, 3, 6, 10], [1, 3, 7, 9], [1, 3, 8, 8], [1, 4, 4, 5, 6], [1, 4, 5, 10], [1, 4, 6, 9], [1, 4, 7, 8], [1, 5, 5, 9], [1, 5, 6, 8], [1, 5, 7, 7], [1, 6, 6, 7], [1, 9, 10], [2, 2, 3, 3, 4, 6], [2, 2, 3, 3, 5, 5], [2, 2, 3, 3, 10], [2, 2, 3, 4, 4, 5], [2, 2, 3, 4, 9], [2, 2, 3, 5, 8], [2, 2, 3, 6, 7], [2, 2, 4, 4, 8], [2, 2, 4, 5, 7], [2, 2, 4, 6, 6], [2, 2, 5, 5, 6], [2, 2, 6, 10], [2, 2, 7, 9], [2, 2, 8, 8], [2, 3, 3, 4, 8], [2, 3, 3, 5, 7], [2, 3, 3, 6, 6], [2, 3, 4, 4, 7], [2, 3, 4, 5, 6], [2, 3, 5, 10], [2, 3, 6, 9], [2, 3, 7, 8], [2, 4, 4, 5, 5], [2, 4, 4, 10], [2, 4, 5, 9], [2, 4, 6, 8], [2, 4, 7, 7], [2, 5, 5, 8], [2, 5, 6, 7], [2, 8, 10], [2, 9, 9], [3, 3, 4, 4, 6], [3, 3, 4, 5, 5], [3, 3, 4, 10], [3, 3, 5, 9], [3, 3, 6, 8], [3, 3, 7, 7], [3, 4, 4, 9], [3, 4, 5, 8], [3, 4, 6, 7], [3, 5, 5, 7], [3, 5, 6, 6], [3, 7, 10], [3, 8, 9], [4, 4, 5, 7], [4, 4, 6, 6], [4, 5, 5, 6], [4, 6, 10], [4, 7, 9], [4, 8, 8], [5, 5, 10], [5, 6, 9], [5, 7, 8], [6, 6, 8], [6, 7, 7], [10, 10]]"
      },
      {
        "input": "candidates = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71], target = 100",
        "output": "[[2, 3, 5, 7, 11, 13, 17, 19, 23], [2, 3, 5, 7, 11, 13, 59], [2, 3, 5, 7, 11, 19, 53], [2, 3, 5, 7, 11, 29, 43], [2, 3, 5, 7, 11, 31, 41], [2, 3, 5, 7, 13, 17, 53], [2, 3, 5, 7, 13, 23, 47], [2, 3, 5, 7, 13, 29, 41], [2, 3, 5, 7, 17, 19, 47], [2, 3, 5, 7, 17, 23, 43], [2, 3, 5, 7, 17, 29, 37], [2, 3, 5, 7, 19, 23, 41], [2, 3, 5, 7, 23, 29, 31], [2, 3, 5, 11, 13, 19, 47], [2, 3, 5, 11, 13, 23, 43], [2, 3, 5, 11, 13, 29, 37], [2, 3, 5, 11, 17, 19, 43], [2, 3, 5, 11, 19, 23, 37], [2, 3, 5, 11, 19, 29, 31], [2, 3, 5, 13, 17, 19, 41], [2, 3, 5, 13, 17, 23, 37], [2, 3, 5, 13, 17, 29, 31], [2, 3, 5, 17, 19, 23, 31], [2, 3, 5, 19, 71], [2, 3, 5, 23, 67], [2, 3, 5, 29, 61], [2, 3, 5, 31, 59], [2, 3, 5, 37, 53], [2, 3, 5, 43, 47], [2, 3, 7, 11, 13, 17, 47], [2, 3, 7, 11, 13, 23, 41], [2, 3, 7, 11, 17, 19, 41], [2, 3, 7, 11, 17, 23, 37], [2, 3, 7, 11, 17, 29, 31], [2, 3, 7, 17, 19, 23, 29], [2, 3, 7, 17, 71], [2, 3, 7, 29, 59], [2, 3, 7, 41, 47], [2, 3, 11, 13, 17, 23, 31], [2, 3, 11, 13, 19, 23, 29], [2, 3, 11, 13, 71], [2, 3, 11, 17, 67], [2, 3, 11, 23, 61], [2, 3, 11, 31, 53], [2, 3, 11, 37, 47], [2, 3, 11, 41, 43], [2, 3, 13, 23, 59], [2, 3, 13, 29, 53], [2, 3, 17, 19, 59], [2, 3, 17, 31, 47], [2, 3, 17, 37, 41], [2, 3, 19, 23, 53], [2, 3, 19, 29, 47], [2, 3, 23, 29, 43], [2, 3, 23, 31, 41], [2, 5, 7, 11, 13, 19, 43], [2, 5, 7, 13, 17, 19, 37], [2, 5, 7, 13, 19, 23, 31], [2, 5, 7, 19, 67], [2, 5, 11, 13, 17, 23, 29], [2, 5, 11, 23, 59], [2, 5, 11, 29, 53], [2, 5, 13, 19, 61], [2, 5, 13, 37, 43], [2, 5, 17, 23, 53], [2, 5, 17, 29, 47], [2, 5, 19, 31, 43], [2, 5, 23, 29, 41], [2, 7, 11, 13, 17, 19, 31], [2, 7, 11, 13, 67], [2, 7, 11, 19, 61], [2, 7, 11, 37, 43], [2, 7, 13, 17, 61], [2, 7, 13, 19, 59], [2, 7, 13, 31, 47], [2, 7, 13, 37, 41], [2, 7, 17, 31, 43], [2, 7, 19, 29, 43], [2, 7, 19, 31, 41], [2, 7, 23, 31, 37], [2, 11, 13, 31, 43], [2, 11, 17, 23, 47], [2, 11, 17, 29, 41], [2, 11, 19, 31, 37], [2, 13, 17, 31, 37], [2, 13, 19, 23, 43], [2, 13, 19, 29, 37], [2, 31, 67], [2, 37, 61], [3, 5, 7, 11, 13, 61], [3, 5, 7, 11, 31, 43], [3, 5, 7, 13, 19, 53], [3, 5, 7, 13, 29, 43], [3, 5, 7, 13, 31, 41], [3, 5, 7, 17, 31, 37], [3, 5, 7, 19, 23, 43], [3, 5, 7, 19, 29, 37], [3, 5, 11, 13, 31, 37], [3, 5, 11, 17, 23, 41], [3, 5, 13, 17, 19, 43], [3, 5, 13, 19, 23, 37], [3, 5, 13, 19, 29, 31], [3, 5, 31, 61], [3, 7, 11, 13, 19, 47], [3, 7, 11, 13, 23, 43], [3, 7, 11, 13, 29, 37], [3, 7, 11, 17, 19, 43], [3, 7, 11, 19, 23, 37], [3, 7, 11, 19, 29, 31], [3, 7, 13, 17, 19, 41], [3, 7, 13, 17, 23, 37], [3, 7, 13, 17, 29, 31], [3, 7, 17, 19, 23, 31], [3, 7, 19, 71], [3, 7, 23, 67], [3, 7, 29, 61], [3, 7, 31, 59], [3, 7, 37, 53], [3, 7, 43, 47], [3, 11, 13, 17, 19, 37], [3, 11, 13, 19, 23, 31], [3, 11, 19, 67], [3, 13, 17, 67], [3, 13, 23, 61], [3, 13, 31, 53], [3, 13, 37, 47], [3, 13, 41, 43], [3, 17, 19, 61], [3, 17, 37, 43], [3, 19, 31, 47], [3, 19, 37, 41], [3, 23, 31, 43], [3, 29, 31, 37], [5, 7, 11, 13, 17, 47], [5, 7, 11, 13, 23, 41], [5, 7, 11, 17, 19, 41], [5, 7, 11, 17, 23, 37], [5, 7, 11, 17, 29, 31], [5, 7, 17, 19, 23, 29], [5, 7, 17, 71], [5, 7, 29, 59], [5, 7, 41, 47], [5, 11, 13, 17, 23, 31], [5, 11, 13, 19, 23, 29], [5, 11, 13, 71], [5, 11, 17, 67], [5, 11, 23, 61], [5, 11, 31, 53], [5, 11, 37, 47], [5, 11, 41, 43], [5, 13, 23, 59], [5, 13, 29, 53], [5, 17, 19, 59], [5, 17, 31, 47], [5, 17, 37, 41], [5, 19, 23, 53], [5, 19, 29, 47], [5, 23, 29, 43], [5, 23, 31, 41], [7, 11, 13, 17, 23, 29], [7, 11, 23, 59], [7, 11, 29, 53], [7, 13, 19, 61], [7, 13, 37, 43], [7, 17, 23, 53], [7, 17, 29, 47], [7, 19, 31, 43], [7, 23, 29, 41], [11, 13, 17, 59], [11, 13, 23, 53], [11, 13, 29, 47], [11, 17, 19, 53], [11, 17, 29, 43], [11, 17, 31, 41], [11, 19, 23, 47], [11, 19, 29, 41], [11, 23, 29, 37], [13, 17, 23, 47], [13, 17, 29, 41], [13, 19, 31, 37], [17, 19, 23, 41], [17, 23, 29, 31], [29, 71], [41, 59], [47, 53]]"
      },
      {
        "input": "candidates = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10], target = 30",
        "output": "[[1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 8], [1, 1, 1, 2, 2, 2, 3, 3, 3, 5, 7], [1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6], [1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 7], [1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6], [1, 1, 1, 2, 2, 2, 3, 3, 5, 5, 5], [1, 1, 1, 2, 2, 2, 3, 3, 5, 10], [1, 1, 1, 2, 2, 2, 3, 3, 6, 9], [1, 1, 1, 2, 2, 2, 3, 3, 7, 8], [1, 1, 1, 2, 2, 2, 3, 4, 4, 4, 6], [1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5], [1, 1, 1, 2, 2, 2, 3, 4, 4, 10], [1, 1, 1, 2, 2, 2, 3, 4, 5, 9], [1, 1, 1, 2, 2, 2, 3, 4, 6, 8], [1, 1, 1, 2, 2, 2, 3, 4, 7, 7], [1, 1, 1, 2, 2, 2, 3, 5, 5, 8], [1, 1, 1, 2, 2, 2, 3, 5, 6, 7], [1, 1, 1, 2, 2, 2, 3, 6, 6, 6], [1, 1, 1, 2, 2, 2, 3, 8, 10], [1, 1, 1, 2, 2, 2, 3, 9, 9], [1, 1, 1, 2, 2, 2, 4, 4, 4, 9], [1, 1, 1, 2, 2, 2, 4, 4, 5, 8], [1, 1, 1, 2, 2, 2, 4, 4, 6, 7], [1, 1, 1, 2, 2, 2, 4, 5, 5, 7], [1, 1, 1, 2, 2, 2, 4, 5, 6, 6], [1, 1, 1, 2, 2, 2, 4, 7, 10], [1, 1, 1, 2, 2, 2, 4, 8, 9], [1, 1, 1, 2, 2, 2, 5, 5, 5, 6], [1, 1, 1, 2, 2, 2, 5, 6, 10], [1, 1, 1, 2, 2, 2, 5, 7, 9], [1, 1, 1, 2, 2, 2, 5, 8, 8], [1, 1, 1, 2, 2, 2, 6, 6, 9], [1, 1, 1, 2, 2, 2, 6, 7, 8], [1, 1, 1, 2, 2, 2, 7, 7, 7], [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 6], [1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5], [1, 1, 1, 2, 2, 3, 3, 3, 4, 10], [1, 1, 1, 2, 2, 3, 3, 3, 5, 9], [1, 1, 1, 2, 2, 3, 3, 3, 6, 8], [1, 1, 1, 2, 2, 3, 3, 3, 7, 7], [1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5], [1, 1, 1, 2, 2, 3, 3, 4, 4, 9], [1, 1, 1, 2, 2, 3, 3, 4, 5, 8], [1, 1, 1, 2, 2, 3, 3, 4, 6, 7], [1, 1, 1, 2, 2, 3, 3, 5, 5, 7], [1, 1, 1, 2, 2, 3, 3, 5, 6, 6], [1, 1, 1, 2, 2, 3, 3, 7, 10], [1, 1, 1, 2, 2, 3, 3, 8, 9], [1, 1, 1, 2, 2, 3, 4, 4, 4, 8], [1, 1, 1, 2, 2, 3, 4, 4, 5, 7], [1, 1, 1, 2, 2, 3, 4, 4, 6, 6], [1, 1, 1, 2, 2, 3, 4, 5, 5, 6], [1, 1, 1, 2, 2, 3, 4, 6, 10], [1, 1, 1, 2, 2, 3, 4, 7, 9], [1, 1, 1, 2, 2, 3, 4, 8, 8], [1, 1, 1, 2, 2, 3, 5, 5, 10], [1, 1, 1, 2, 2, 3, 5, 6, 9], [1, 1, 1, 2, 2, 3, 5, 7, 8], [1, 1, 1, 2, 2, 3, 6, 6, 8], [1, 1, 1, 2, 2, 3, 6, 7, 7], [1, 1, 1, 2, 2, 3, 10, 10], [1, 1, 1, 2, 2, 4, 4, 4, 5, 6], [1, 1, 1, 2, 2, 4, 4, 5, 5, 5], [1, 1, 1, 2, 2, 4, 4, 5, 10], [1, 1, 1, 2, 2, 4, 4, 6, 9], [1, 1, 1, 2, 2, 4, 4, 7, 8], [1, 1, 1, 2, 2, 4, 5, 5, 9], [1, 1, 1, 2, 2, 4, 5, 6, 8], [1, 1, 1, 2, 2, 4, 5, 7, 7], [1, 1, 1, 2, 2, 4, 6, 6, 7], [1, 1, 1, 2, 2, 4, 9, 10], [1, 1, 1, 2, 2, 5, 5, 5, 8], [1, 1, 1, 2, 2, 5, 5, 6, 7], [1, 1, 1, 2, 2, 5, 6, 6, 6], [1, 1, 1, 2, 2, 5, 8, 10], [1, 1, 1, 2, 2, 5, 9, 9], [1, 1, 1, 2, 2, 6, 7, 10], [1, 1, 1, 2, 2, 6, 8, 9], [1, 1, 1, 2, 2, 7, 7, 9], [1, 1, 1, 2, 2, 7, 8, 8], [1, 1, 1, 2, 3, 3, 3, 4, 4, 8], [1, 1, 1, 2, 3, 3, 3, 4, 5, 7], [1, 1, 1, 2, 3, 3, 3, 4, 6, 6], [1, 1, 1, 2, 3, 3, 3, 5, 5, 6], [1, 1, 1, 2, 3, 3, 3, 6, 10], [1, 1, 1, 2, 3, 3, 3, 7, 9], [1, 1, 1, 2, 3, 3, 3, 8, 8], [1, 1, 1, 2, 3, 3, 4, 4, 4, 7], [1, 1, 1, 2, 3, 3, 4, 4, 5, 6], [1, 1, 1, 2, 3, 3, 4, 5, 5, 5], [1, 1, 1, 2, 3, 3, 4, 5, 10], [1, 1, 1, 2, 3, 3, 4, 6, 9], [1, 1, 1, 2, 3, 3, 4, 7, 8], [1, 1, 1, 2, 3, 3, 5, 5, 9], [1, 1, 1, 2, 3, 3, 5, 6, 8], [1, 1, 1, 2, 3, 3, 5, 7, 7], [1, 1, 1, 2, 3, 3, 6, 6, 7], [1, 1, 1, 2, 3, 3, 9, 10], [1, 1, 1, 2, 3, 4, 4, 4, 5, 5], [1, 1, 1, 2, 3, 4, 4, 4, 10], [1, 1, 1, 2, 3, 4, 4, 5, 9], [1, 1, 1, 2, 3, 4, 4, 6, 8], [1, 1, 1, 2, 3, 4, 4, 7, 7], [1, 1, 1, 2, 3, 4, 5, 5, 8], [1, 1, 1, 2, 3, 4, 5, 6, 7], [1, 1, 1, 2, 3, 4, 6, 6, 6], [1, 1, 1, 2, 3, 4, 8, 10], [1, 1, 1, 2, 3, 4, 9, 9], [1, 1, 1, 2, 3, 5, 5, 5, 7], [1, 1, 1, 2, 3, 5, 5, 6, 6], [1, 1, 1, 2, 3, 5, 7, 10], [1, 1, 1, 2, 3, 5, 8, 9], [1, 1, 1, 2, 3, 6, 6, 10], [1, 1, 1, 2, 3, 6, 7, 9], [1, 1, 1, 2, 3, 6, 8, 8], [1, 1, 1, 2, 3, 7, 7, 8], [1, 1, 1, 2, 4, 4, 4, 5, 8], [1, 1, 1, 2, 4, 4, 4, 6, 7], [1, 1, 1, 2, 4, 4, 5, 5, 7], [1, 1, 1, 2, 4, 4, 5, 6, 6], [1, 1, 1, 2, 4, 4, 7, 10], [1, 1, 1, 2, 4, 4, 8, 9], [1, 1, 1, 2, 4, 5, 5, 5, 6], [1, 1, 1, 2, 4, 5, 6, 10], [1, 1, 1, 2, 4, 5, 7, 9], [1, 1, 1, 2, 4, 5, 8, 8], [1, 1, 1, 2, 4, 6, 6, 9], [1, 1, 1, 2, 4, 6, 7, 8], [1, 1, 1, 2, 4, 7, 7, 7], [1, 1, 1, 2, 5, 5, 5, 10], [1, 1, 1, 2, 5, 5, 6, 9], [1, 1, 1, 2, 5, 5, 7, 8], [1, 1, 1, 2, 5, 6, 6, 8], [1, 1, 1, 2, 5, 6, 7, 7], [1, 1, 1, 2, 5, 10, 10], [1, 1, 1, 2, 6, 6, 6, 7], [1, 1, 1, 2, 6, 9, 10], [1, 1, 1, 2, 7, 8, 10], [1, 1, 1, 2, 7, 9, 9], [1, 1, 1, 2, 8, 8, 9], [1, 1, 1, 3, 3, 3, 4, 4, 4, 6], [1, 1, 1, 3, 3, 3, 4, 4, 5, 5], [1, 1, 1, 3, 3, 3, 4, 4, 10], [1, 1, 1, 3, 3, 3, 4, 5, 9], [1, 1, 1, 3, 3, 3, 4, 6, 8], [1, 1, 1, 3, 3, 3, 4, 7, 7], [1, 1, 1, 3, 3, 3, 5, 5, 8], [1, 1, 1, 3, 3, 3, 5, 6, 7], [1, 1, 1, 3, 3, 3, 6, 6, 6], [1, 1, 1, 3, 3, 3, 8, 10], [1, 1, 1, 3, 3, 3, 9, 9], [1, 1, 1, 3, 3, 4, 4, 4, 9], [1, 1, 1, 3, 3, 4, 4, 5, 8], [1, 1, 1, 3, 3, 4, 4, 6, 7], [1, 1, 1, 3, 3, 4, 5, 5, 7], [1, 1, 1, 3, 3, 4, 5, 6, 6], [1, 1, 1, 3, 3, 4, 7, 10], [1, 1, 1, 3, 3, 4, 8, 9], [1, 1, 1, 3, 3, 5, 5, 5, 6], [1, 1, 1, 3, 3, 5, 6, 10], [1, 1, 1, 3, 3, 5, 7, 9], [1, 1, 1, 3, 3, 5, 8, 8], [1, 1, 1, 3, 3, 6, 6, 9], [1, 1, 1, 3, 3, 6, 7, 8], [1, 1, 1, 3, 3, 7, 7, 7], [1, 1, 1, 3, 4, 4, 4, 5, 7], [1, 1, 1, 3, 4, 4, 4, 6, 6], [1, 1, 1, 3, 4, 4, 5, 5, 6], [1, 1, 1, 3, 4, 4, 6, 10], [1, 1, 1, 3, 4, 4, 7, 9], [1, 1, 1, 3, 4, 4, 8, 8], [1, 1, 1, 3, 4, 5, 5, 10], [1, 1, 1, 3, 4, 5, 6, 9], [1, 1, 1, 3, 4, 5, 7, 8], [1, 1, 1, 3, 4, 6, 6, 8], [1, 1, 1, 3, 4, 6, 7, 7], [1, 1, 1, 3, 4, 10, 10], [1, 1, 1, 3, 5, 5, 5, 9], [1, 1, 1, 3, 5, 5, 6, 8], [1, 1, 1, 3, 5, 5, 7, 7], [1, 1, 1, 3, 5, 6, 6, 7], [1, 1, 1, 3, 5, 9, 10], [1, 1, 1, 3, 6, 8, 10], [1, 1, 1, 3, 6, 9, 9], [1, 1, 1, 3, 7, 7, 10], [1, 1, 1, 3, 7, 8, 9], [1, 1, 1, 3, 8, 8, 8], [1, 1, 1, 4, 4, 4, 5, 5, 5], [1, 1, 1, 4, 4, 4, 5, 10], [1, 1, 1, 4, 4, 4, 6, 9], [1, 1, 1, 4, 4, 4, 7, 8], [1, 1, 1, 4, 4, 5, 5, 9], [1, 1, 1, 4, 4, 5, 6, 8], [1, 1, 1, 4, 4, 5, 7, 7], [1, 1, 1, 4, 4, 6, 6, 7], [1, 1, 1, 4, 4, 9, 10], [1, 1, 1, 4, 5, 5, 5, 8], [1, 1, 1, 4, 5, 5, 6, 7], [1, 1, 1, 4, 5, 6, 6, 6], [1, 1, 1, 4, 5, 8, 10], [1, 1, 1, 4, 5, 9, 9], [1, 1, 1, 4, 6, 7, 10], [1, 1, 1, 4, 6, 8, 9], [1, 1, 1, 4, 7, 7, 9], [1, 1, 1, 4, 7, 8, 8], [1, 1, 1, 5, 5, 5, 6, 6], [1, 1, 1, 5, 5, 7, 10], [1, 1, 1, 5, 5, 8, 9], [1, 1, 1, 5, 6, 6, 10], [1, 1, 1, 5, 6, 7, 9], [1, 1, 1, 5, 6, 8, 8], [1, 1, 1, 5, 7, 7, 8], [1, 1, 1, 6, 6, 6, 9], [1, 1, 1, 6, 6, 7, 8], [1, 1, 1, 6, 7, 7, 7], [1, 1, 1, 7, 10, 10], [1, 1, 1, 8, 9, 10], [1, 1, 1, 9, 9, 9], [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5], [1, 1, 2, 2, 2, 3, 3, 3, 4, 9], [1, 1, 2, 2, 2, 3, 3, 3, 5, 8], [1, 1, 2, 2, 2, 3, 3, 3, 6, 7], [1, 1, 2, 2, 2, 3, 3, 4, 4, 8], [1, 1, 2, 2, 2, 3, 3, 4, 5, 7], [1, 1, 2, 2, 2, 3, 3, 4, 6, 6], [1, 1, 2, 2, 2, 3, 3, 5, 5, 6], [1, 1, 2, 2, 2, 3, 3, 6, 10], [1, 1, 2, 2, 2, 3, 3, 7, 9], [1, 1, 2, 2, 2, 3, 3, 8, 8], [1, 1, 2, 2, 2, 3, 4, 4, 4, 7], [1, 1, 2, 2, 2, 3, 4, 4, 5, 6], [1, 1, 2, 2, 2, 3, 4, 5, 5, 5], [1, 1, 2, 2, 2, 3, 4, 5, 10], [1, 1, 2, 2, 2, 3, 4, 6, 9], [1, 1, 2, 2, 2, 3, 4, 7, 8], [1, 1, 2, 2, 2, 3, 5, 5, 9], [1, 1, 2, 2, 2, 3, 5, 6, 8], [1, 1, 2, 2, 2, 3, 5, 7, 7], [1, 1, 2, 2, 2, 3, 6, 6, 7], [1, 1, 2, 2, 2, 3, 9, 10], [1, 1, 2, 2, 2, 4, 4, 4, 5, 5], [1, 1, 2, 2, 2, 4, 4, 4, 10], [1, 1, 2, 2, 2, 4, 4, 5, 9], [1, 1, 2, 2, 2, 4, 4, 6, 8], [1, 1, 2, 2, 2, 4, 4, 7, 7], [1, 1, 2, 2, 2, 4, 5, 5, 8], [1, 1, 2, 2, 2, 4, 5, 6, 7], [1, 1, 2, 2, 2, 4, 6, 6, 6], [1, 1, 2, 2, 2, 4, 8, 10], [1, 1, 2, 2, 2, 4, 9, 9], [1, 1, 2, 2, 2, 5, 5, 5, 7], [1, 1, 2, 2, 2, 5, 5, 6, 6], [1, 1, 2, 2, 2, 5, 7, 10], [1, 1, 2, 2, 2, 5, 8, 9], [1, 1, 2, 2, 2, 6, 6, 10], [1, 1, 2, 2, 2, 6, 7, 9], [1, 1, 2, 2, 2, 6, 8, 8], [1, 1, 2, 2, 2, 7, 7, 8], [1, 1, 2, 2, 3, 3, 3, 4, 4, 7], [1, 1, 2, 2, 3, 3, 3, 4, 5, 6], [1, 1, 2, 2, 3, 3, 3, 5, 5, 5], [1, 1, 2, 2, 3, 3, 3, 5, 10], [1, 1, 2, 2, 3, 3, 3, 6, 9], [1, 1, 2, 2, 3, 3, 3, 7, 8], [1, 1, 2, 2, 3, 3, 4, 4, 4, 6], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], [1, 1, 2, 2, 3, 3, 4, 4, 10], [1, 1, 2, 2, 3, 3, 4, 5, 9], [1, 1, 2, 2, 3, 3, 4, 6, 8], [1, 1, 2, 2, 3, 3, 4, 7, 7], [1, 1, 2, 2, 3, 3, 5, 5, 8], [1, 1, 2, 2, 3, 3, 5, 6, 7], [1, 1, 2, 2, 3, 3, 6, 6, 6], [1, 1, 2, 2, 3, 3, 8, 10], [1, 1, 2, 2, 3, 3, 9, 9], [1, 1, 2, 2, 3, 4, 4, 4, 9], [1, 1, 2, 2, 3, 4, 4, 5, 8], [1, 1, 2, 2, 3, 4, 4, 6, 7], [1, 1, 2, 2, 3, 4, 5, 5, 7], [1, 1, 2, 2, 3, 4, 5, 6, 6], [1, 1, 2, 2, 3, 4, 7, 10], [1, 1, 2, 2, 3, 4, 8, 9], [1, 1, 2, 2, 3, 5, 5, 5, 6], [1, 1, 2, 2, 3, 5, 6, 10], [1, 1, 2, 2, 3, 5, 7, 9], [1, 1, 2, 2, 3, 5, 8, 8], [1, 1, 2, 2, 3, 6, 6, 9], [1, 1, 2, 2, 3, 6, 7, 8], [1, 1, 2, 2, 3, 7, 7, 7], [1, 1, 2, 2, 4, 4, 4, 5, 7], [1, 1, 2, 2, 4, 4, 4, 6, 6], [1, 1, 2, 2, 4, 4, 5, 5, 6], [1, 1, 2, 2, 4, 4, 6, 10], [1, 1, 2, 2, 4, 4, 7, 9], [1, 1, 2, 2, 4, 4, 8, 8], [1, 1, 2, 2, 4, 5, 5, 10], [1, 1, 2, 2, 4, 5, 6, 9], [1, 1, 2, 2, 4, 5, 7, 8], [1, 1, 2, 2, 4, 6, 6, 8], [1, 1, 2, 2, 4, 6, 7, 7], [1, 1, 2, 2, 4, 10, 10], [1, 1, 2, 2, 5, 5, 5, 9], [1, 1, 2, 2, 5, 5, 6, 8], [1, 1, 2, 2, 5, 5, 7, 7], [1, 1, 2, 2, 5, 6, 6, 7], [1, 1, 2, 2, 5, 9, 10], [1, 1, 2, 2, 6, 8, 10], [1, 1, 2, 2, 6, 9, 9], [1, 1, 2, 2, 7, 7, 10], [1, 1, 2, 2, 7, 8, 9], [1, 1, 2, 2, 8, 8, 8], [1, 1, 2, 3, 3, 3, 4, 4, 4, 5], [1, 1, 2, 3, 3, 3, 4, 4, 9], [1, 1, 2, 3, 3, 3, 4, 5, 8], [1, 1, 2, 3, 3, 3, 4, 6, 7], [1, 1, 2, 3, 3, 3, 5, 5, 7], [1, 1, 2, 3, 3, 3, 5, 6, 6], [1, 1, 2, 3, 3, 3, 7, 10], [1, 1, 2, 3, 3, 3, 8, 9], [1, 1, 2, 3, 3, 4, 4, 4, 8], [1, 1, 2, 3, 3, 4, 4, 5, 7], [1, 1, 2, 3, 3, 4, 4, 6, 6], [1, 1, 2, 3, 3, 4, 5, 5, 6], [1, 1, 2, 3, 3, 4, 6, 10], [1, 1, 2, 3, 3, 4, 7, 9], [1, 1, 2, 3, 3, 4, 8, 8], [1, 1, 2, 3, 3, 5, 5, 10], [1, 1, 2, 3, 3, 5, 6, 9], [1, 1, 2, 3, 3, 5, 7, 8], [1, 1, 2, 3, 3, 6, 6, 8], [1, 1, 2, 3, 3, 6, 7, 7], [1, 1, 2, 3, 3, 10, 10], [1, 1, 2, 3, 4, 4, 4, 5, 6], [1, 1, 2, 3, 4, 4, 5, 5, 5], [1, 1, 2, 3, 4, 4, 5, 10], [1, 1, 2, 3, 4, 4, 6, 9], [1, 1, 2, 3, 4, 4, 7, 8], [1, 1, 2, 3, 4, 5, 5, 9], [1, 1, 2, 3, 4, 5, 6, 8], [1, 1, 2, 3, 4, 5, 7, 7], [1, 1, 2, 3, 4, 6, 6, 7], [1, 1, 2, 3, 4, 9, 10], [1, 1, 2, 3, 5, 5, 5, 8], [1, 1, 2, 3, 5, 5, 6, 7], [1, 1, 2, 3, 5, 6, 6, 6], [1, 1, 2, 3, 5, 8, 10], [1, 1, 2, 3, 5, 9, 9], [1, 1, 2, 3, 6, 7, 10], [1, 1, 2, 3, 6, 8, 9], [1, 1, 2, 3, 7, 7, 9], [1, 1, 2, 3, 7, 8, 8], [1, 1, 2, 4, 4, 4, 5, 9], [1, 1, 2, 4, 4, 4, 6, 8], [1, 1, 2, 4, 4, 4, 7, 7], [1, 1, 2, 4, 4, 5, 5, 8], [1, 1, 2, 4, 4, 5, 6, 7], [1, 1, 2, 4, 4, 6, 6, 6], [1, 1, 2, 4, 4, 8, 10], [1, 1, 2, 4, 4, 9, 9], [1, 1, 2, 4, 5, 5, 5, 7], [1, 1, 2, 4, 5, 5, 6, 6], [1, 1, 2, 4, 5, 7, 10], [1, 1, 2, 4, 5, 8, 9], [1, 1, 2, 4, 6, 6, 10], [1, 1, 2, 4, 6, 7, 9], [1, 1, 2, 4, 6, 8, 8], [1, 1, 2, 4, 7, 7, 8], [1, 1, 2, 5, 5, 6, 10], [1, 1, 2, 5, 5, 7, 9], [1, 1, 2, 5, 5, 8, 8], [1, 1, 2, 5, 6, 6, 9], [1, 1, 2, 5, 6, 7, 8], [1, 1, 2, 5, 7, 7, 7], [1, 1, 2, 6, 6, 6, 8], [1, 1, 2, 6, 6, 7, 7], [1, 1, 2, 6, 10, 10], [1, 1, 2, 7, 9, 10], [1, 1, 2, 8, 8, 10], [1, 1, 2, 8, 9, 9], [1, 1, 3, 3, 3, 4, 4, 4, 7], [1, 1, 3, 3, 3, 4, 4, 5, 6], [1, 1, 3, 3, 3, 4, 5, 5, 5], [1, 1, 3, 3, 3, 4, 5, 10], [1, 1, 3, 3, 3, 4, 6, 9], [1, 1, 3, 3, 3, 4, 7, 8], [1, 1, 3, 3, 3, 5, 5, 9], [1, 1, 3, 3, 3, 5, 6, 8], [1, 1, 3, 3, 3, 5, 7, 7], [1, 1, 3, 3, 3, 6, 6, 7], [1, 1, 3, 3, 3, 9, 10], [1, 1, 3, 3, 4, 4, 4, 5, 5], [1, 1, 3, 3, 4, 4, 4, 10], [1, 1, 3, 3, 4, 4, 5, 9], [1, 1, 3, 3, 4, 4, 6, 8], [1, 1, 3, 3, 4, 4, 7, 7], [1, 1, 3, 3, 4, 5, 5, 8], [1, 1, 3, 3, 4, 5, 6, 7], [1, 1, 3, 3, 4, 6, 6, 6], [1, 1, 3, 3, 4, 8, 10], [1, 1, 3, 3, 4, 9, 9], [1, 1, 3, 3, 5, 5, 5, 7], [1, 1, 3, 3, 5, 5, 6, 6], [1, 1, 3, 3, 5, 7, 10], [1, 1, 3, 3, 5, 8, 9], [1, 1, 3, 3, 6, 6, 10], [1, 1, 3, 3, 6, 7, 9], [1, 1, 3, 3, 6, 8, 8], [1, 1, 3, 3, 7, 7, 8], [1, 1, 3, 4, 4, 4, 5, 8], [1, 1, 3, 4, 4, 4, 6, 7], [1, 1, 3, 4, 4, 5, 5, 7], [1, 1, 3, 4, 4, 5, 6, 6], [1, 1, 3, 4, 4, 7, 10], [1, 1, 3, 4, 4, 8, 9], [1, 1, 3, 4, 5, 5, 5, 6], [1, 1, 3, 4, 5, 6, 10], [1, 1, 3, 4, 5, 7, 9], [1, 1, 3, 4, 5, 8, 8], [1, 1, 3, 4, 6, 6, 9], [1, 1, 3, 4, 6, 7, 8], [1, 1, 3, 4, 7, 7, 7], [1, 1, 3, 5, 5, 5, 10], [1, 1, 3, 5, 5, 6, 9], [1, 1, 3, 5, 5, 7, 8], [1, 1, 3, 5, 6, 6, 8], [1, 1, 3, 5, 6, 7, 7], [1, 1, 3, 5, 10, 10], [1, 1, 3, 6, 6, 6, 7], [1, 1, 3, 6, 9, 10], [1, 1, 3, 7, 8, 10], [1, 1, 3, 7, 9, 9], [1, 1, 3, 8, 8, 9], [1, 1, 4, 4, 4, 5, 5, 6], [1, 1, 4, 4, 4, 6, 10], [1, 1, 4, 4, 4, 7, 9], [1, 1, 4, 4, 4, 8, 8], [1, 1, 4, 4, 5, 5, 10], [1, 1, 4, 4, 5, 6, 9], [1, 1, 4, 4, 5, 7, 8], [1, 1, 4, 4, 6, 6, 8], [1, 1, 4, 4, 6, 7, 7], [1, 1, 4, 4, 10, 10], [1, 1, 4, 5, 5, 5, 9], [1, 1, 4, 5, 5, 6, 8], [1, 1, 4, 5, 5, 7, 7], [1, 1, 4, 5, 6, 6, 7], [1, 1, 4, 5, 9, 10], [1, 1, 4, 6, 8, 10], [1, 1, 4, 6, 9, 9], [1, 1, 4, 7, 7, 10], [1, 1, 4, 7, 8, 9], [1, 1, 4, 8, 8, 8], [1, 1, 5, 5, 5, 6, 7], [1, 1, 5, 5, 6, 6, 6], [1, 1, 5, 5, 8, 10], [1, 1, 5, 5, 9, 9], [1, 1, 5, 6, 7, 10], [1, 1, 5, 6, 8, 9], [1, 1, 5, 7, 7, 9], [1, 1, 5, 7, 8, 8], [1, 1, 6, 6, 6, 10], [1, 1, 6, 6, 7, 9], [1, 1, 6, 6, 8, 8], [1, 1, 6, 7, 7, 8], [1, 1, 8, 10, 10], [1, 1, 9, 9, 10], [1, 2, 2, 2, 3, 3, 3, 4, 4, 6], [1, 2, 2, 2, 3, 3, 3, 4, 5, 5], [1, 2, 2, 2, 3, 3, 3, 4, 10], [1, 2, 2, 2, 3, 3, 3, 5, 9], [1, 2, 2, 2, 3, 3, 3, 6, 8], [1, 2, 2, 2, 3, 3, 3, 7, 7], [1, 2, 2, 2, 3, 3, 4, 4, 4, 5], [1, 2, 2, 2, 3, 3, 4, 4, 9], [1, 2, 2, 2, 3, 3, 4, 5, 8], [1, 2, 2, 2, 3, 3, 4, 6, 7], [1, 2, 2, 2, 3, 3, 5, 5, 7], [1, 2, 2, 2, 3, 3, 5, 6, 6], [1, 2, 2, 2, 3, 3, 7, 10], [1, 2, 2, 2, 3, 3, 8, 9], [1, 2, 2, 2, 3, 4, 4, 4, 8], [1, 2, 2, 2, 3, 4, 4, 5, 7], [1, 2, 2, 2, 3, 4, 4, 6, 6], [1, 2, 2, 2, 3, 4, 5, 5, 6], [1, 2, 2, 2, 3, 4, 6, 10], [1, 2, 2, 2, 3, 4, 7, 9], [1, 2, 2, 2, 3, 4, 8, 8], [1, 2, 2, 2, 3, 5, 5, 10], [1, 2, 2, 2, 3, 5, 6, 9], [1, 2, 2, 2, 3, 5, 7, 8], [1, 2, 2, 2, 3, 6, 6, 8], [1, 2, 2, 2, 3, 6, 7, 7], [1, 2, 2, 2, 3, 10, 10], [1, 2, 2, 2, 4, 4, 4, 5, 6], [1, 2, 2, 2, 4, 4, 5, 5, 5], [1, 2, 2, 2, 4, 4, 5, 10], [1, 2, 2, 2, 4, 4, 6, 9], [1, 2, 2, 2, 4, 4, 7, 8], [1, 2, 2, 2, 4, 5, 5, 9], [1, 2, 2, 2, 4, 5, 6, 8], [1, 2, 2, 2, 4, 5, 7, 7], [1, 2, 2, 2, 4, 6, 6, 7], [1, 2, 2, 2, 4, 9, 10], [1, 2, 2, 2, 5, 5, 5, 8], [1, 2, 2, 2, 5, 5, 6, 7], [1, 2, 2, 2, 5, 6, 6, 6], [1, 2, 2, 2, 5, 8, 10], [1, 2, 2, 2, 5, 9, 9], [1, 2, 2, 2, 6, 7, 10], [1, 2, 2, 2, 6, 8, 9], [1, 2, 2, 2, 7, 7, 9], [1, 2, 2, 2, 7, 8, 8], [1, 2, 2, 3, 3, 3, 4, 4, 8], [1, 2, 2, 3, 3, 3, 4, 5, 7], [1, 2, 2, 3, 3, 3, 4, 6, 6], [1, 2, 2, 3, 3, 3, 5, 5, 6], [1, 2, 2, 3, 3, 3, 6, 10], [1, 2, 2, 3, 3, 3, 7, 9], [1, 2, 2, 3, 3, 3, 8, 8], [1, 2, 2, 3, 3, 4, 4, 4, 7], [1, 2, 2, 3, 3, 4, 4, 5, 6], [1, 2, 2, 3, 3, 4, 5, 5, 5], [1, 2, 2, 3, 3, 4, 5, 10], [1, 2, 2, 3, 3, 4, 6, 9], [1, 2, 2, 3, 3, 4, 7, 8], [1, 2, 2, 3, 3, 5, 5, 9], [1, 2, 2, 3, 3, 5, 6, 8], [1, 2, 2, 3, 3, 5, 7, 7], [1, 2, 2, 3, 3, 6, 6, 7], [1, 2, 2, 3, 3, 9, 10], [1, 2, 2, 3, 4, 4, 4, 5, 5], [1, 2, 2, 3, 4, 4, 4, 10], [1, 2, 2, 3, 4, 4, 5, 9], [1, 2, 2, 3, 4, 4, 6, 8], [1, 2, 2, 3, 4, 4, 7, 7], [1, 2, 2, 3, 4, 5, 5, 8], [1, 2, 2, 3, 4, 5, 6, 7], [1, 2, 2, 3, 4, 6, 6, 6], [1, 2, 2, 3, 4, 8, 10], [1, 2, 2, 3, 4, 9, 9], [1, 2, 2, 3, 5, 5, 5, 7], [1, 2, 2, 3, 5, 5, 6, 6], [1, 2, 2, 3, 5, 7, 10], [1, 2, 2, 3, 5, 8, 9], [1, 2, 2, 3, 6, 6, 10], [1, 2, 2, 3, 6, 7, 9], [1, 2, 2, 3, 6, 8, 8], [1, 2, 2, 3, 7, 7, 8], [1, 2, 2, 4, 4, 4, 5, 8], [1, 2, 2, 4, 4, 4, 6, 7], [1, 2, 2, 4, 4, 5, 5, 7], [1, 2, 2, 4, 4, 5, 6, 6], [1, 2, 2, 4, 4, 7, 10], [1, 2, 2, 4, 4, 8, 9], [1, 2, 2, 4, 5, 5, 5, 6], [1, 2, 2, 4, 5, 6, 10], [1, 2, 2, 4, 5, 7, 9], [1, 2, 2, 4, 5, 8, 8], [1, 2, 2, 4, 6, 6, 9], [1, 2, 2, 4, 6, 7, 8], [1, 2, 2, 4, 7, 7, 7], [1, 2, 2, 5, 5, 5, 10], [1, 2, 2, 5, 5, 6, 9], [1, 2, 2, 5, 5, 7, 8], [1, 2, 2, 5, 6, 6, 8], [1, 2, 2, 5, 6, 7, 7], [1, 2, 2, 5, 10, 10], [1, 2, 2, 6, 6, 6, 7], [1, 2, 2, 6, 9, 10], [1, 2, 2, 7, 8, 10], [1, 2, 2, 7, 9, 9], [1, 2, 2, 8, 8, 9], [1, 2, 3, 3, 3, 4, 4, 4, 6], [1, 2, 3, 3, 3, 4, 4, 5, 5], [1, 2, 3, 3, 3, 4, 4, 10], [1, 2, 3, 3, 3, 4, 5, 9], [1, 2, 3, 3, 3, 4, 6, 8], [1, 2, 3, 3, 3, 4, 7, 7], [1, 2, 3, 3, 3, 5, 5, 8], [1, 2, 3, 3, 3, 5, 6, 7], [1, 2, 3, 3, 3, 6, 6, 6], [1, 2, 3, 3, 3, 8, 10], [1, 2, 3, 3, 3, 9, 9], [1, 2, 3, 3, 4, 4, 4, 9], [1, 2, 3, 3, 4, 4, 5, 8], [1, 2, 3, 3, 4, 4, 6, 7], [1, 2, 3, 3, 4, 5, 5, 7], [1, 2, 3, 3, 4, 5, 6, 6], [1, 2, 3, 3, 4, 7, 10], [1, 2, 3, 3, 4, 8, 9], [1, 2, 3, 3, 5, 5, 5, 6], [1, 2, 3, 3, 5, 6, 10], [1, 2, 3, 3, 5, 7, 9], [1, 2, 3, 3, 5, 8, 8], [1, 2, 3, 3, 6, 6, 9], [1, 2, 3, 3, 6, 7, 8], [1, 2, 3, 3, 7, 7, 7], [1, 2, 3, 4, 4, 4, 5, 7], [1, 2, 3, 4, 4, 4, 6, 6], [1, 2, 3, 4, 4, 5, 5, 6], [1, 2, 3, 4, 4, 6, 10], [1, 2, 3, 4, 4, 7, 9], [1, 2, 3, 4, 4, 8, 8], [1, 2, 3, 4, 5, 5, 10], [1, 2, 3, 4, 5, 6, 9], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 6, 6, 8], [1, 2, 3, 4, 6, 7, 7], [1, 2, 3, 4, 10, 10], [1, 2, 3, 5, 5, 5, 9], [1, 2, 3, 5, 5, 6, 8], [1, 2, 3, 5, 5, 7, 7], [1, 2, 3, 5, 6, 6, 7], [1, 2, 3, 5, 9, 10], [1, 2, 3, 6, 8, 10], [1, 2, 3, 6, 9, 9], [1, 2, 3, 7, 7, 10], [1, 2, 3, 7, 8, 9], [1, 2, 3, 8, 8, 8], [1, 2, 4, 4, 4, 5, 5, 5], [1, 2, 4, 4, 4, 5, 10], [1, 2, 4, 4, 4, 6, 9], [1, 2, 4, 4, 4, 7, 8], [1, 2, 4, 4, 5, 5, 9], [1, 2, 4, 4, 5, 6, 8], [1, 2, 4, 4, 5, 7, 7], [1, 2, 4, 4, 6, 6, 7], [1, 2, 4, 4, 9, 10], [1, 2, 4, 5, 5, 5, 8], [1, 2, 4, 5, 5, 6, 7], [1, 2, 4, 5, 6, 6, 6], [1, 2, 4, 5, 8, 10], [1, 2, 4, 5, 9, 9], [1, 2, 4, 6, 7, 10], [1, 2, 4, 6, 8, 9], [1, 2, 4, 7, 7, 9], [1, 2, 4, 7, 8, 8], [1, 2, 5, 5, 5, 6, 6], [1, 2, 5, 5, 7, 10], [1, 2, 5, 5, 8, 9], [1, 2, 5, 6, 6, 10], [1, 2, 5, 6, 7, 9], [1, 2, 5, 6, 8, 8], [1, 2, 5, 7, 7, 8], [1, 2, 6, 6, 6, 9], [1, 2, 6, 6, 7, 8], [1, 2, 6, 7, 7, 7], [1, 2, 7, 10, 10], [1, 2, 8, 9, 10], [1, 2, 9, 9, 9], [1, 3, 3, 3, 4, 4, 4, 8], [1, 3, 3, 3, 4, 4, 5, 7], [1, 3, 3, 3, 4, 4, 6, 6], [1, 3, 3, 3, 4, 5, 5, 6], [1, 3, 3, 3, 4, 6, 10], [1, 3, 3, 3, 4, 7, 9], [1, 3, 3, 3, 4, 8, 8], [1, 3, 3, 3, 5, 5, 10], [1, 3, 3, 3, 5, 6, 9], [1, 3, 3, 3, 5, 7, 8], [1, 3, 3, 3, 6, 6, 8], [1, 3, 3, 3, 6, 7, 7], [1, 3, 3, 3, 10, 10], [1, 3, 3, 4, 4, 4, 5, 6], [1, 3, 3, 4, 4, 5, 5, 5], [1, 3, 3, 4, 4, 5, 10], [1, 3, 3, 4, 4, 6, 9], [1, 3, 3, 4, 4, 7, 8], [1, 3, 3, 4, 5, 5, 9], [1, 3, 3, 4, 5, 6, 8], [1, 3, 3, 4, 5, 7, 7], [1, 3, 3, 4, 6, 6, 7], [1, 3, 3, 4, 9, 10], [1, 3, 3, 5, 5, 5, 8], [1, 3, 3, 5, 5, 6, 7], [1, 3, 3, 5, 6, 6, 6], [1, 3, 3, 5, 8, 10], [1, 3, 3, 5, 9, 9], [1, 3, 3, 6, 7, 10], [1, 3, 3, 6, 8, 9], [1, 3, 3, 7, 7, 9], [1, 3, 3, 7, 8, 8], [1, 3, 4, 4, 4, 5, 9], [1, 3, 4, 4, 4, 6, 8], [1, 3, 4, 4, 4, 7, 7], [1, 3, 4, 4, 5, 5, 8], [1, 3, 4, 4, 5, 6, 7], [1, 3, 4, 4, 6, 6, 6], [1, 3, 4, 4, 8, 10], [1, 3, 4, 4, 9, 9], [1, 3, 4, 5, 5, 5, 7], [1, 3, 4, 5, 5, 6, 6], [1, 3, 4, 5, 7, 10], [1, 3, 4, 5, 8, 9], [1, 3, 4, 6, 6, 10], [1, 3, 4, 6, 7, 9], [1, 3, 4, 6, 8, 8], [1, 3, 4, 7, 7, 8], [1, 3, 5, 5, 6, 10], [1, 3, 5, 5, 7, 9], [1, 3, 5, 5, 8, 8], [1, 3, 5, 6, 6, 9], [1, 3, 5, 6, 7, 8], [1, 3, 5, 7, 7, 7], [1, 3, 6, 6, 6, 8], [1, 3, 6, 6, 7, 7], [1, 3, 6, 10, 10], [1, 3, 7, 9, 10], [1, 3, 8, 8, 10], [1, 3, 8, 9, 9], [1, 4, 4, 4, 5, 5, 7], [1, 4, 4, 4, 5, 6, 6], [1, 4, 4, 4, 7, 10], [1, 4, 4, 4, 8, 9], [1, 4, 4, 5, 5, 5, 6], [1, 4, 4, 5, 6, 10], [1, 4, 4, 5, 7, 9], [1, 4, 4, 5, 8, 8], [1, 4, 4, 6, 6, 9], [1, 4, 4, 6, 7, 8], [1, 4, 4, 7, 7, 7], [1, 4, 5, 5, 5, 10], [1, 4, 5, 5, 6, 9], [1, 4, 5, 5, 7, 8], [1, 4, 5, 6, 6, 8], [1, 4, 5, 6, 7, 7], [1, 4, 5, 10, 10], [1, 4, 6, 6, 6, 7], [1, 4, 6, 9, 10], [1, 4, 7, 8, 10], [1, 4, 7, 9, 9], [1, 4, 8, 8, 9], [1, 5, 5, 5, 6, 8], [1, 5, 5, 5, 7, 7], [1, 5, 5, 6, 6, 7], [1, 5, 5, 9, 10], [1, 5, 6, 8, 10], [1, 5, 6, 9, 9], [1, 5, 7, 7, 10], [1, 5, 7, 8, 9], [1, 5, 8, 8, 8], [1, 6, 6, 7, 10], [1, 6, 6, 8, 9], [1, 6, 7, 7, 9], [1, 6, 7, 8, 8], [1, 7, 7, 7, 8], [1, 9, 10, 10], [2, 2, 2, 3, 3, 3, 4, 4, 7], [2, 2, 2, 3, 3, 3, 4, 5, 6], [2, 2, 2, 3, 3, 3, 5, 5, 5], [2, 2, 2, 3, 3, 3, 5, 10], [2, 2, 2, 3, 3, 3, 6, 9], [2, 2, 2, 3, 3, 3, 7, 8], [2, 2, 2, 3, 3, 4, 4, 4, 6], [2, 2, 2, 3, 3, 4, 4, 5, 5], [2, 2, 2, 3, 3, 4, 4, 10], [2, 2, 2, 3, 3, 4, 5, 9], [2, 2, 2, 3, 3, 4, 6, 8], [2, 2, 2, 3, 3, 4, 7, 7], [2, 2, 2, 3, 3, 5, 5, 8], [2, 2, 2, 3, 3, 5, 6, 7], [2, 2, 2, 3, 3, 6, 6, 6], [2, 2, 2, 3, 3, 8, 10], [2, 2, 2, 3, 3, 9, 9], [2, 2, 2, 3, 4, 4, 4, 9], [2, 2, 2, 3, 4, 4, 5, 8], [2, 2, 2, 3, 4, 4, 6, 7], [2, 2, 2, 3, 4, 5, 5, 7], [2, 2, 2, 3, 4, 5, 6, 6], [2, 2, 2, 3, 4, 7, 10], [2, 2, 2, 3, 4, 8, 9], [2, 2, 2, 3, 5, 5, 5, 6], [2, 2, 2, 3, 5, 6, 10], [2, 2, 2, 3, 5, 7, 9], [2, 2, 2, 3, 5, 8, 8], [2, 2, 2, 3, 6, 6, 9], [2, 2, 2, 3, 6, 7, 8], [2, 2, 2, 3, 7, 7, 7], [2, 2, 2, 4, 4, 4, 5, 7], [2, 2, 2, 4, 4, 4, 6, 6], [2, 2, 2, 4, 4, 5, 5, 6], [2, 2, 2, 4, 4, 6, 10], [2, 2, 2, 4, 4, 7, 9], [2, 2, 2, 4, 4, 8, 8], [2, 2, 2, 4, 5, 5, 10], [2, 2, 2, 4, 5, 6, 9], [2, 2, 2, 4, 5, 7, 8], [2, 2, 2, 4, 6, 6, 8], [2, 2, 2, 4, 6, 7, 7], [2, 2, 2, 4, 10, 10], [2, 2, 2, 5, 5, 5, 9], [2, 2, 2, 5, 5, 6, 8], [2, 2, 2, 5, 5, 7, 7], [2, 2, 2, 5, 6, 6, 7], [2, 2, 2, 5, 9, 10], [2, 2, 2, 6, 8, 10], [2, 2, 2, 6, 9, 9], [2, 2, 2, 7, 7, 10], [2, 2, 2, 7, 8, 9], [2, 2, 2, 8, 8, 8], [2, 2, 3, 3, 3, 4, 4, 4, 5], [2, 2, 3, 3, 3, 4, 4, 9], [2, 2, 3, 3, 3, 4, 5, 8], [2, 2, 3, 3, 3, 4, 6, 7], [2, 2, 3, 3, 3, 5, 5, 7], [2, 2, 3, 3, 3, 5, 6, 6], [2, 2, 3, 3, 3, 7, 10], [2, 2, 3, 3, 3, 8, 9], [2, 2, 3, 3, 4, 4, 4, 8], [2, 2, 3, 3, 4, 4, 5, 7], [2, 2, 3, 3, 4, 4, 6, 6], [2, 2, 3, 3, 4, 5, 5, 6], [2, 2, 3, 3, 4, 6, 10], [2, 2, 3, 3, 4, 7, 9], [2, 2, 3, 3, 4, 8, 8], [2, 2, 3, 3, 5, 5, 10], [2, 2, 3, 3, 5, 6, 9], [2, 2, 3, 3, 5, 7, 8], [2, 2, 3, 3, 6, 6, 8], [2, 2, 3, 3, 6, 7, 7], [2, 2, 3, 3, 10, 10], [2, 2, 3, 4, 4, 4, 5, 6], [2, 2, 3, 4, 4, 5, 5, 5], [2, 2, 3, 4, 4, 5, 10], [2, 2, 3, 4, 4, 6, 9], [2, 2, 3, 4, 4, 7, 8], [2, 2, 3, 4, 5, 5, 9], [2, 2, 3, 4, 5, 6, 8], [2, 2, 3, 4, 5, 7, 7], [2, 2, 3, 4, 6, 6, 7], [2, 2, 3, 4, 9, 10], [2, 2, 3, 5, 5, 5, 8], [2, 2, 3, 5, 5, 6, 7], [2, 2, 3, 5, 6, 6, 6], [2, 2, 3, 5, 8, 10], [2, 2, 3, 5, 9, 9], [2, 2, 3, 6, 7, 10], [2, 2, 3, 6, 8, 9], [2, 2, 3, 7, 7, 9], [2, 2, 3, 7, 8, 8], [2, 2, 4, 4, 4, 5, 9], [2, 2, 4, 4, 4, 6, 8], [2, 2, 4, 4, 4, 7, 7], [2, 2, 4, 4, 5, 5, 8], [2, 2, 4, 4, 5, 6, 7], [2, 2, 4, 4, 6, 6, 6], [2, 2, 4, 4, 8, 10], [2, 2, 4, 4, 9, 9], [2, 2, 4, 5, 5, 5, 7], [2, 2, 4, 5, 5, 6, 6], [2, 2, 4, 5, 7, 10], [2, 2, 4, 5, 8, 9], [2, 2, 4, 6, 6, 10], [2, 2, 4, 6, 7, 9], [2, 2, 4, 6, 8, 8], [2, 2, 4, 7, 7, 8], [2, 2, 5, 5, 6, 10], [2, 2, 5, 5, 7, 9], [2, 2, 5, 5, 8, 8], [2, 2, 5, 6, 6, 9], [2, 2, 5, 6, 7, 8], [2, 2, 5, 7, 7, 7], [2, 2, 6, 6, 6, 8], [2, 2, 6, 6, 7, 7], [2, 2, 6, 10, 10], [2, 2, 7, 9, 10], [2, 2, 8, 8, 10], [2, 2, 8, 9, 9], [2, 3, 3, 3, 4, 4, 4, 7], [2, 3, 3, 3, 4, 4, 5, 6], [2, 3, 3, 3, 4, 5, 5, 5], [2, 3, 3, 3, 4, 5, 10], [2, 3, 3, 3, 4, 6, 9], [2, 3, 3, 3, 4, 7, 8], [2, 3, 3, 3, 5, 5, 9], [2, 3, 3, 3, 5, 6, 8], [2, 3, 3, 3, 5, 7, 7], [2, 3, 3, 3, 6, 6, 7], [2, 3, 3, 3, 9, 10], [2, 3, 3, 4, 4, 4, 5, 5], [2, 3, 3, 4, 4, 4, 10], [2, 3, 3, 4, 4, 5, 9], [2, 3, 3, 4, 4, 6, 8], [2, 3, 3, 4, 4, 7, 7], [2, 3, 3, 4, 5, 5, 8], [2, 3, 3, 4, 5, 6, 7], [2, 3, 3, 4, 6, 6, 6], [2, 3, 3, 4, 8, 10], [2, 3, 3, 4, 9, 9], [2, 3, 3, 5, 5, 5, 7], [2, 3, 3, 5, 5, 6, 6], [2, 3, 3, 5, 7, 10], [2, 3, 3, 5, 8, 9], [2, 3, 3, 6, 6, 10], [2, 3, 3, 6, 7, 9], [2, 3, 3, 6, 8, 8], [2, 3, 3, 7, 7, 8], [2, 3, 4, 4, 4, 5, 8], [2, 3, 4, 4, 4, 6, 7], [2, 3, 4, 4, 5, 5, 7], [2, 3, 4, 4, 5, 6, 6], [2, 3, 4, 4, 7, 10], [2, 3, 4, 4, 8, 9], [2, 3, 4, 5, 5, 5, 6], [2, 3, 4, 5, 6, 10], [2, 3, 4, 5, 7, 9], [2, 3, 4, 5, 8, 8], [2, 3, 4, 6, 6, 9], [2, 3, 4, 6, 7, 8], [2, 3, 4, 7, 7, 7], [2, 3, 5, 5, 5, 10], [2, 3, 5, 5, 6, 9], [2, 3, 5, 5, 7, 8], [2, 3, 5, 6, 6, 8], [2, 3, 5, 6, 7, 7], [2, 3, 5, 10, 10], [2, 3, 6, 6, 6, 7], [2, 3, 6, 9, 10], [2, 3, 7, 8, 10], [2, 3, 7, 9, 9], [2, 3, 8, 8, 9], [2, 4, 4, 4, 5, 5, 6], [2, 4, 4, 4, 6, 10], [2, 4, 4, 4, 7, 9], [2, 4, 4, 4, 8, 8], [2, 4, 4, 5, 5, 10], [2, 4, 4, 5, 6, 9], [2, 4, 4, 5, 7, 8], [2, 4, 4, 6, 6, 8], [2, 4, 4, 6, 7, 7], [2, 4, 4, 10, 10], [2, 4, 5, 5, 5, 9], [2, 4, 5, 5, 6, 8], [2, 4, 5, 5, 7, 7], [2, 4, 5, 6, 6, 7], [2, 4, 5, 9, 10], [2, 4, 6, 8, 10], [2, 4, 6, 9, 9], [2, 4, 7, 7, 10], [2, 4, 7, 8, 9], [2, 4, 8, 8, 8], [2, 5, 5, 5, 6, 7], [2, 5, 5, 6, 6, 6], [2, 5, 5, 8, 10], [2, 5, 5, 9, 9], [2, 5, 6, 7, 10], [2, 5, 6, 8, 9], [2, 5, 7, 7, 9], [2, 5, 7, 8, 8], [2, 6, 6, 6, 10], [2, 6, 6, 7, 9], [2, 6, 6, 8, 8], [2, 6, 7, 7, 8], [2, 8, 10, 10], [2, 9, 9, 10], [3, 3, 3, 4, 4, 4, 9], [3, 3, 3, 4, 4, 5, 8], [3, 3, 3, 4, 4, 6, 7], [3, 3, 3, 4, 5, 5, 7], [3, 3, 3, 4, 5, 6, 6], [3, 3, 3, 4, 7, 10], [3, 3, 3, 4, 8, 9], [3, 3, 3, 5, 5, 5, 6], [3, 3, 3, 5, 6, 10], [3, 3, 3, 5, 7, 9], [3, 3, 3, 5, 8, 8], [3, 3, 3, 6, 6, 9], [3, 3, 3, 6, 7, 8], [3, 3, 3, 7, 7, 7], [3, 3, 4, 4, 4, 5, 7], [3, 3, 4, 4, 4, 6, 6], [3, 3, 4, 4, 5, 5, 6], [3, 3, 4, 4, 6, 10], [3, 3, 4, 4, 7, 9], [3, 3, 4, 4, 8, 8], [3, 3, 4, 5, 5, 10], [3, 3, 4, 5, 6, 9], [3, 3, 4, 5, 7, 8], [3, 3, 4, 6, 6, 8], [3, 3, 4, 6, 7, 7], [3, 3, 4, 10, 10], [3, 3, 5, 5, 5, 9], [3, 3, 5, 5, 6, 8], [3, 3, 5, 5, 7, 7], [3, 3, 5, 6, 6, 7], [3, 3, 5, 9, 10], [3, 3, 6, 8, 10], [3, 3, 6, 9, 9], [3, 3, 7, 7, 10], [3, 3, 7, 8, 9], [3, 3, 8, 8, 8], [3, 4, 4, 4, 5, 5, 5], [3, 4, 4, 4, 5, 10], [3, 4, 4, 4, 6, 9], [3, 4, 4, 4, 7, 8], [3, 4, 4, 5, 5, 9], [3, 4, 4, 5, 6, 8], [3, 4, 4, 5, 7, 7], [3, 4, 4, 6, 6, 7], [3, 4, 4, 9, 10], [3, 4, 5, 5, 5, 8], [3, 4, 5, 5, 6, 7], [3, 4, 5, 6, 6, 6], [3, 4, 5, 8, 10], [3, 4, 5, 9, 9], [3, 4, 6, 7, 10], [3, 4, 6, 8, 9], [3, 4, 7, 7, 9], [3, 4, 7, 8, 8], [3, 5, 5, 5, 6, 6], [3, 5, 5, 7, 10], [3, 5, 5, 8, 9], [3, 5, 6, 6, 10], [3, 5, 6, 7, 9], [3, 5, 6, 8, 8], [3, 5, 7, 7, 8], [3, 6, 6, 6, 9], [3, 6, 6, 7, 8], [3, 6, 7, 7, 7], [3, 7, 10, 10], [3, 8, 9, 10], [3, 9, 9, 9], [4, 4, 4, 5, 5, 8], [4, 4, 4, 5, 6, 7], [4, 4, 4, 6, 6, 6], [4, 4, 4, 8, 10], [4, 4, 4, 9, 9], [4, 4, 5, 5, 5, 7], [4, 4, 5, 5, 6, 6], [4, 4, 5, 7, 10], [4, 4, 5, 8, 9], [4, 4, 6, 6, 10], [4, 4, 6, 7, 9], [4, 4, 6, 8, 8], [4, 4, 7, 7, 8], [4, 5, 5, 6, 10], [4, 5, 5, 7, 9], [4, 5, 5, 8, 8], [4, 5, 6, 6, 9], [4, 5, 6, 7, 8], [4, 5, 7, 7, 7], [4, 6, 6, 6, 8], [4, 6, 6, 7, 7], [4, 6, 10, 10], [4, 7, 9, 10], [4, 8, 8, 10], [4, 8, 9, 9], [5, 5, 5, 6, 9], [5, 5, 5, 7, 8], [5, 5, 6, 6, 8], [5, 5, 6, 7, 7], [5, 5, 10, 10], [5, 6, 6, 6, 7], [5, 6, 9, 10], [5, 7, 8, 10], [5, 7, 9, 9], [5, 8, 8, 9], [6, 6, 8, 10], [6, 6, 9, 9], [6, 7, 7, 10], [6, 7, 8, 9], [6, 8, 8, 8], [7, 7, 7, 9], [7, 7, 8, 8], [10, 10, 10]]"
      },
      {
        "input": "candidates = [7,6,5,4,3,2,1,10,11,12,13,14,15,16,17,18,19,20], target = 24",
        "output": "[[1, 2, 3, 4, 14], [1, 2, 3, 5, 6, 7], [1, 2, 3, 5, 13], [1, 2, 3, 6, 12], [1, 2, 3, 7, 11], [1, 2, 3, 18], [1, 2, 4, 5, 12], [1, 2, 4, 6, 11], [1, 2, 4, 7, 10], [1, 2, 4, 17], [1, 2, 5, 6, 10], [1, 2, 5, 16], [1, 2, 6, 15], [1, 2, 7, 14], [1, 2, 10, 11], [1, 3, 4, 5, 11], [1, 3, 4, 6, 10], [1, 3, 4, 16], [1, 3, 5, 15], [1, 3, 6, 14], [1, 3, 7, 13], [1, 3, 20], [1, 4, 5, 14], [1, 4, 6, 13], [1, 4, 7, 12], [1, 4, 19], [1, 5, 6, 12], [1, 5, 7, 11], [1, 5, 18], [1, 6, 7, 10], [1, 6, 17], [1, 7, 16], [1, 10, 13], [1, 11, 12], [2, 3, 4, 5, 10], [2, 3, 4, 15], [2, 3, 5, 14], [2, 3, 6, 13], [2, 3, 7, 12], [2, 3, 19], [2, 4, 5, 6, 7], [2, 4, 5, 13], [2, 4, 6, 12], [2, 4, 7, 11], [2, 4, 18], [2, 5, 6, 11], [2, 5, 7, 10], [2, 5, 17], [2, 6, 16], [2, 7, 15], [2, 10, 12], [3, 4, 5, 12], [3, 4, 6, 11], [3, 4, 7, 10], [3, 4, 17], [3, 5, 6, 10], [3, 5, 16], [3, 6, 15], [3, 7, 14], [3, 10, 11], [4, 5, 15], [4, 6, 14], [4, 7, 13], [4, 20], [5, 6, 13], [5, 7, 12], [5, 19], [6, 7, 11], [6, 18], [7, 17], [10, 14], [11, 13]]"
      },
      {
        "input": "candidates = [10,9,8,7,6,5,4,3,2,1], target = 15",
        "output": "[[1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 4, 8], [1, 2, 5, 7], [1, 3, 4, 7], [1, 3, 5, 6], [1, 4, 10], [1, 5, 9], [1, 6, 8], [2, 3, 4, 6], [2, 3, 10], [2, 4, 9], [2, 5, 8], [2, 6, 7], [3, 4, 8], [3, 5, 7], [4, 5, 6], [5, 10], [6, 9], [7, 8]]"
      },
      {
        "input": "candidates = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], target = 30",
        "output": "[[1, 2, 3, 4, 5, 6, 9], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 15], [1, 2, 3, 4, 6, 14], [1, 2, 3, 4, 7, 13], [1, 2, 3, 4, 8, 12], [1, 2, 3, 4, 9, 11], [1, 2, 3, 4, 20], [1, 2, 3, 5, 6, 13], [1, 2, 3, 5, 7, 12], [1, 2, 3, 5, 8, 11], [1, 2, 3, 5, 9, 10], [1, 2, 3, 5, 19], [1, 2, 3, 6, 7, 11], [1, 2, 3, 6, 8, 10], [1, 2, 3, 6, 18], [1, 2, 3, 7, 8, 9], [1, 2, 3, 7, 17], [1, 2, 3, 8, 16], [1, 2, 3, 9, 15], [1, 2, 3, 10, 14], [1, 2, 3, 11, 13], [1, 2, 3, 24], [1, 2, 4, 5, 6, 12], [1, 2, 4, 5, 7, 11], [1, 2, 4, 5, 8, 10], [1, 2, 4, 5, 18], [1, 2, 4, 6, 7, 10], [1, 2, 4, 6, 8, 9], [1, 2, 4, 6, 17], [1, 2, 4, 7, 16], [1, 2, 4, 8, 15], [1, 2, 4, 9, 14], [1, 2, 4, 10, 13], [1, 2, 4, 11, 12], [1, 2, 4, 23], [1, 2, 5, 6, 7, 9], [1, 2, 5, 6, 16], [1, 2, 5, 7, 15], [1, 2, 5, 8, 14], [1, 2, 5, 9, 13], [1, 2, 5, 10, 12], [1, 2, 5, 22], [1, 2, 6, 7, 14], [1, 2, 6, 8, 13], [1, 2, 6, 9, 12], [1, 2, 6, 10, 11], [1, 2, 6, 21], [1, 2, 7, 8, 12], [1, 2, 7, 9, 11], [1, 2, 7, 20], [1, 2, 8, 9, 10], [1, 2, 8, 19], [1, 2, 9, 18], [1, 2, 10, 17], [1, 2, 11, 16], [1, 2, 12, 15], [1, 2, 13, 14], [1, 2, 27], [1, 3, 4, 5, 6, 11], [1, 3, 4, 5, 7, 10], [1, 3, 4, 5, 8, 9], [1, 3, 4, 5, 17], [1, 3, 4, 6, 7, 9], [1, 3, 4, 6, 16], [1, 3, 4, 7, 15], [1, 3, 4, 8, 14], [1, 3, 4, 9, 13], [1, 3, 4, 10, 12], [1, 3, 4, 22], [1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 15], [1, 3, 5, 7, 14], [1, 3, 5, 8, 13], [1, 3, 5, 9, 12], [1, 3, 5, 10, 11], [1, 3, 5, 21], [1, 3, 6, 7, 13], [1, 3, 6, 8, 12], [1, 3, 6, 9, 11], [1, 3, 6, 20], [1, 3, 7, 8, 11], [1, 3, 7, 9, 10], [1, 3, 7, 19], [1, 3, 8, 18], [1, 3, 9, 17], [1, 3, 10, 16], [1, 3, 11, 15], [1, 3, 12, 14], [1, 3, 26], [1, 4, 5, 6, 14], [1, 4, 5, 7, 13], [1, 4, 5, 8, 12], [1, 4, 5, 9, 11], [1, 4, 5, 20], [1, 4, 6, 7, 12], [1, 4, 6, 8, 11], [1, 4, 6, 9, 10], [1, 4, 6, 19], [1, 4, 7, 8, 10], [1, 4, 7, 18], [1, 4, 8, 17], [1, 4, 9, 16], [1, 4, 10, 15], [1, 4, 11, 14], [1, 4, 12, 13], [1, 4, 25], [1, 5, 6, 7, 11], [1, 5, 6, 8, 10], [1, 5, 6, 18], [1, 5, 7, 8, 9], [1, 5, 7, 17], [1, 5, 8, 16], [1, 5, 9, 15], [1, 5, 10, 14], [1, 5, 11, 13], [1, 5, 24], [1, 6, 7, 16], [1, 6, 8, 15], [1, 6, 9, 14], [1, 6, 10, 13], [1, 6, 11, 12], [1, 6, 23], [1, 7, 8, 14], [1, 7, 9, 13], [1, 7, 10, 12], [1, 7, 22], [1, 8, 9, 12], [1, 8, 10, 11], [1, 8, 21], [1, 9, 20], [1, 10, 19], [1, 11, 18], [1, 12, 17], [1, 13, 16], [1, 14, 15], [1, 29], [2, 3, 4, 5, 6, 10], [2, 3, 4, 5, 7, 9], [2, 3, 4, 5, 16], [2, 3, 4, 6, 7, 8], [2, 3, 4, 6, 15], [2, 3, 4, 7, 14], [2, 3, 4, 8, 13], [2, 3, 4, 9, 12], [2, 3, 4, 10, 11], [2, 3, 4, 21], [2, 3, 5, 6, 14], [2, 3, 5, 7, 13], [2, 3, 5, 8, 12], [2, 3, 5, 9, 11], [2, 3, 5, 20], [2, 3, 6, 7, 12], [2, 3, 6, 8, 11], [2, 3, 6, 9, 10], [2, 3, 6, 19], [2, 3, 7, 8, 10], [2, 3, 7, 18], [2, 3, 8, 17], [2, 3, 9, 16], [2, 3, 10, 15], [2, 3, 11, 14], [2, 3, 12, 13], [2, 3, 25], [2, 4, 5, 6, 13], [2, 4, 5, 7, 12], [2, 4, 5, 8, 11], [2, 4, 5, 9, 10], [2, 4, 5, 19], [2, 4, 6, 7, 11], [2, 4, 6, 8, 10], [2, 4, 6, 18], [2, 4, 7, 8, 9], [2, 4, 7, 17], [2, 4, 8, 16], [2, 4, 9, 15], [2, 4, 10, 14], [2, 4, 11, 13], [2, 4, 24], [2, 5, 6, 7, 10], [2, 5, 6, 8, 9], [2, 5, 6, 17], [2, 5, 7, 16], [2, 5, 8, 15], [2, 5, 9, 14], [2, 5, 10, 13], [2, 5, 11, 12], [2, 5, 23], [2, 6, 7, 15], [2, 6, 8, 14], [2, 6, 9, 13], [2, 6, 10, 12], [2, 6, 22], [2, 7, 8, 13], [2, 7, 9, 12], [2, 7, 10, 11], [2, 7, 21], [2, 8, 9, 11], [2, 8, 20], [2, 9, 19], [2, 10, 18], [2, 11, 17], [2, 12, 16], [2, 13, 15], [2, 28], [3, 4, 5, 6, 12], [3, 4, 5, 7, 11], [3, 4, 5, 8, 10], [3, 4, 5, 18], [3, 4, 6, 7, 10], [3, 4, 6, 8, 9], [3, 4, 6, 17], [3, 4, 7, 16], [3, 4, 8, 15], [3, 4, 9, 14], [3, 4, 10, 13], [3, 4, 11, 12], [3, 4, 23], [3, 5, 6, 7, 9], [3, 5, 6, 16], [3, 5, 7, 15], [3, 5, 8, 14], [3, 5, 9, 13], [3, 5, 10, 12], [3, 5, 22], [3, 6, 7, 14], [3, 6, 8, 13], [3, 6, 9, 12], [3, 6, 10, 11], [3, 6, 21], [3, 7, 8, 12], [3, 7, 9, 11], [3, 7, 20], [3, 8, 9, 10], [3, 8, 19], [3, 9, 18], [3, 10, 17], [3, 11, 16], [3, 12, 15], [3, 13, 14], [3, 27], [4, 5, 6, 7, 8], [4, 5, 6, 15], [4, 5, 7, 14], [4, 5, 8, 13], [4, 5, 9, 12], [4, 5, 10, 11], [4, 5, 21], [4, 6, 7, 13], [4, 6, 8, 12], [4, 6, 9, 11], [4, 6, 20], [4, 7, 8, 11], [4, 7, 9, 10], [4, 7, 19], [4, 8, 18], [4, 9, 17], [4, 10, 16], [4, 11, 15], [4, 12, 14], [4, 26], [5, 6, 7, 12], [5, 6, 8, 11], [5, 6, 9, 10], [5, 6, 19], [5, 7, 8, 10], [5, 7, 18], [5, 8, 17], [5, 9, 16], [5, 10, 15], [5, 11, 14], [5, 12, 13], [5, 25], [6, 7, 8, 9], [6, 7, 17], [6, 8, 16], [6, 9, 15], [6, 10, 14], [6, 11, 13], [6, 24], [7, 8, 15], [7, 9, 14], [7, 10, 13], [7, 11, 12], [7, 23], [8, 9, 13], [8, 10, 12], [8, 22], [9, 10, 11], [9, 21], [10, 20], [11, 19], [12, 18], [13, 17], [14, 16], [30]]"
      },
      {
        "input": "candidates = [2, 3, 6, 7, 2, 5, 5, 10], target = 15",
        "output": "[[2, 2, 5, 6], [2, 3, 5, 5], [2, 3, 10], [2, 6, 7], [3, 5, 7], [5, 10]]"
      }
    ]
  },
  {
    "id": 1546,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "problemDescription": "Given an array nums and an integer target, return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.\n\u00a0\nExample 1:\n\nInput: nums = [1,1,1,1,1], target = 2\nOutput: 2\nExplanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).\n\nExample 2:\n\nInput: nums = [-1,3,5,1,4,2,-9], target = 6\nOutput: 2\nExplanation: There are 3 subarrays with sum equal to 6.\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n0 <= target <= 106\n\n",
    "starterCode": "class Solution:\n    def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [5,5,5,5,5], target = 10",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5], target = 9",
        "output": "1"
      },
      {
        "input": "nums = [-1,3,5,1,4,2,-9], target = 6",
        "output": "2"
      },
      {
        "input": "nums = [5,5,5,5,5,5], target = 15",
        "output": "2"
      },
      {
        "input": "nums = [0,0,0,0,0], target = 0",
        "output": "5"
      },
      {
        "input": "nums = [1,-1,2,-2,3,-3], target = 0",
        "output": "3"
      },
      {
        "input": "nums = [1,1,1,1,1], target = 2",
        "output": "2"
      },
      {
        "input": "nums = [5,5,5,5,5], target = 15",
        "output": "1"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], target = 15",
        "output": "3"
      },
      {
        "input": "nums = [10,-5,5,-3,2,3,-1,7], target = 5",
        "output": "3"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 20",
        "output": "1"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], target = 38",
        "output": "1"
      },
      {
        "input": "nums = [-2,2,-2,2,-2,2,-2,2,-2,2], target = 0",
        "output": "5"
      },
      {
        "input": "nums = [100,-100,200,-200,300,-300,400,-400,500,-500], target = 0",
        "output": "5"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5], target = -15",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = 15",
        "output": "2"
      },
      {
        "input": "nums = [100,-25,25,-50,50,150,-150,200,-200], target = 100",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 0, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], target = 5",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, -15, 1, 2, 3, 4, 5, -10, 1, 2, 3], target = 10",
        "output": "2"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], target = 0",
        "output": "10"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], target = -15",
        "output": "2"
      },
      {
        "input": "nums = [1000, -500, 500, -300, 200, 300, -100, 700], target = 500",
        "output": "3"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], target = 9",
        "output": "5"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,10,20,30,40,50,60,70,80,90,100,10,20,30,40,50,60,70,80,90,100], target = 150",
        "output": "6"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 1",
        "output": "30"
      },
      {
        "input": "nums = [5,-2,5,-2,5,-2,5,-2,5,-2], target = 3",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], target = 1",
        "output": "10"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2,2,2], target = 6",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 1",
        "output": "1"
      },
      {
        "input": "nums = [100,-50,50,-25,25,125,-125,62,-62,31,-31], target = 50",
        "output": "2"
      },
      {
        "input": "nums = [5,1,3,7,8,2,4,6,9,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9], target = 5",
        "output": "2"
      },
      {
        "input": "nums = [10,5,5,15,10,10,5,5,20,15], target = 20",
        "output": "3"
      },
      {
        "input": "nums = [10000,-10000,10000,-10000,10000], target = 10000",
        "output": "3"
      },
      {
        "input": "nums = [3,4,-2,3,-2,5,-5,1,1,1], target = 3",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 2",
        "output": "10"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], target = 2",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 5",
        "output": "4"
      },
      {
        "input": "nums = [2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5], target = 9",
        "output": "3"
      },
      {
        "input": "nums = [10, 5, -5, 10, 15, -25, 30, -30, 35, -35, 40, -40, 45, -45, 50, -50, 55, -55, 60, -60], target = 10",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], target = 55",
        "output": "2"
      },
      {
        "input": "nums = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], target = -5",
        "output": "4"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], target = 150",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,0,1,2,3,4,5], target = 9",
        "output": "2"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], target = 1500",
        "output": "2"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 5",
        "output": "3"
      },
      {
        "input": "nums = [-10,-20,-30,-40,-50,-60,-70,-80,-90,-100], target = -30",
        "output": "2"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10], target = 0",
        "output": "10"
      },
      {
        "input": "nums = [100,-100,200,-200,300,-300,400,-400,500,-500], target = 100",
        "output": "5"
      },
      {
        "input": "nums = [1,-1,1,-1,1,-1,1,-1,1,-1], target = 0",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 1",
        "output": "20"
      },
      {
        "input": "nums = [100, -25, 25, -50, 50, -75, 75, -100, 100, -125, 125], target = 50",
        "output": "2"
      },
      {
        "input": "nums = [1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1], target = 0",
        "output": "27"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], target = 15",
        "output": "3"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3], target = 9",
        "output": "3"
      },
      {
        "input": "nums = [100, -25, 25, -25, 25, 25, -50, 25, -25, 25, 25, -50, 100, -200, 100], target = 25",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], target = 30",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5], target = 5",
        "output": "4"
      },
      {
        "input": "nums = [5, 1, 3, 7, 2, 8, 6, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10",
        "output": "5"
      },
      {
        "input": "nums = [10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10], target = 0",
        "output": "10"
      },
      {
        "input": "nums = [9,3,6,9,3,6,9,3,6,9], target = 12",
        "output": "3"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], target = 10",
        "output": "10"
      },
      {
        "input": "nums = [1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1], target = 0",
        "output": "10"
      },
      {
        "input": "nums = [1,-1,0,1,0,-1,1], target = 0",
        "output": "4"
      },
      {
        "input": "nums = [3, 2, 1, 6, 3, 3, 2, 1, 6, 3, 3, 2, 1, 6, 3], target = 9",
        "output": "4"
      },
      {
        "input": "nums = [10, -10, 20, -20, 30, -30, 40, -40, 50, -50], target = 0",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], target = 55",
        "output": "1"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2], target = 3",
        "output": "5"
      },
      {
        "input": "nums = [100,-50,50,-25,25,-10,10,5,-5,15,-15], target = 25",
        "output": "3"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, 10, 5, 0, -5, -10, 1, 2, 3, 4, 5], target = 0",
        "output": "3"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0], target = 0",
        "output": "10"
      },
      {
        "input": "nums = [1000, -500, 500, -250, 250, -125, 125, 0, 0, 0, 0, 0, 0, 0, 0], target = 250",
        "output": "2"
      },
      {
        "input": "nums = [-2, 2, 3, -3, 4, 5, -5, 4, 6, -6, 7, -7, 8, -8], target = 0",
        "output": "6"
      },
      {
        "input": "nums = [5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 6",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], target = 15",
        "output": "8"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], target = 0",
        "output": "15"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], target = 150",
        "output": "3"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = 5",
        "output": "8"
      },
      {
        "input": "nums = [10,15,20,25,30,35,40,45,50,55], target = 75",
        "output": "2"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], target = 0",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], target = 20",
        "output": "1"
      },
      {
        "input": "nums = [5, -5, 5, -5, 5, -5, 5, -5, 5, -5], target = 5",
        "output": "5"
      },
      {
        "input": "nums = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100, 110, -120, 130, -140, 150, -160, 170, -180, 190, -200], target = 100",
        "output": "1"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], target = 100",
        "output": "2"
      },
      {
        "input": "nums = [-1,0,1,-1,0,1,-1,0,1,-1], target = 0",
        "output": "6"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 2, 6, 5, 3, 5, 9, 2, 6], target = 10",
        "output": "1"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], target = 0",
        "output": "20"
      },
      {
        "input": "nums = [10000, -10000, 10000, -10000, 10000, -10000], target = 10000",
        "output": "3"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50], target = 75",
        "output": "2"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15], target = -15",
        "output": "3"
      },
      {
        "input": "nums = [10,-10,10,-10,10,-10,10,-10,10,-10], target = 0",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 15",
        "output": "3"
      },
      {
        "input": "nums = [5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -5], target = 0",
        "output": "10"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], target = 0",
        "output": "15"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], target = 100",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 15",
        "output": "3"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], target = 28",
        "output": "1"
      }
    ]
  },
  {
    "id": 240,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Matrix"
    ],
    "problemDescription": "Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\n\nIntegers in each row are sorted in ascending from left to right.\nIntegers in each column are sorted in ascending from top to bottom.\n\n\u00a0\nExample 1:\n\n\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\nOutput: true\n\nExample 2:\n\n\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\nOutput: false\n\n\u00a0\nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= n, m <= 300\n-109 <= matrix[i][j] <= 109\nAll the integers in each row are sorted in ascending order.\nAll the integers in each column are sorted in ascending order.\n-109 <= target <= 109\n\n",
    "starterCode": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "matrix = [[-5,-4,-3,-2,-1],[5,6,7,8,9],[15,16,17,18,19],[25,26,27,28,29],[35,36,37,38,39]], target = 0",
        "output": "False"
      },
      {
        "input": "matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20",
        "output": "False"
      },
      {
        "input": "matrix = [[-10,-5,-3,-1,-1],[0,1,1,2,2],[3,3,4,4,5],[6,7,8,8,9],[10,10,12,13,15]], target = 8",
        "output": "True"
      },
      {
        "input": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
        "output": "True"
      },
      {
        "input": "matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5",
        "output": "True"
      },
      {
        "input": "matrix = [[-5,-4,-3,-2,-1],[5,6,7,8,9],[10,11,12,13,14],[15,16,17,18,19],[20,21,22,23,24]], target = 0",
        "output": "False"
      },
      {
        "input": "matrix = [[-10,-8,-6,-4,-3],[-9,-7,-5,-3,-1],[-4,-2,0,2,4],[-3,1,3,5,7],[2,4,6,8,10]], target = 0",
        "output": "True"
      },
      {
        "input": "matrix = [[1,3,5,7],[2,4,6,8],[0,11,16,20],[13,14,17,18]], target = 14",
        "output": "True"
      },
      {
        "input": "matrix = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], target = 15",
        "output": "True"
      },
      {
        "input": "matrix = [[-10,-8,-6,-4,-2],[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14],[15,16,17,18,19]], target = -5",
        "output": "False"
      },
      {
        "input": "matrix = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], target = 13",
        "output": "True"
      },
      {
        "input": "matrix = [[-10,-8,-5,-3,-1],[0,2,3,5,7],[8,9,10,12,13],[15,17,18,20,21],[23,25,26,27,29]], target = 14",
        "output": "False"
      },
      {
        "input": "matrix = [[1,3,5,7,9,11,13,15,17,19],[2,4,6,8,10,12,14,16,18,20],[3,5,7,9,11,13,15,17,19,21],[4,6,8,10,12,14,16,18,20,22]], target = 100",
        "output": "False"
      },
      {
        "input": "matrix = [[1,3,5],[2,6,9],[4,11,16],[7,12,18],[8,13,19],[10,14,20],[15,17,21]], target = 17",
        "output": "True"
      },
      {
        "input": "matrix = [[1000000000,1000000001,1000000002],[1000000003,1000000004,1000000005],[1000000006,1000000007,1000000008]], target = 1000000004",
        "output": "True"
      },
      {
        "input": "matrix = [[1,10,20,30,40,50,60,70,80,90],[11,21,31,41,51,61,71,81,91,100],[22,32,42,52,62,72,82,92,102,110],[33,43,53,63,73,83,93,103,113,120],[44,54,64,74,84,94,104,114,124,130]], target = 2",
        "output": "False"
      },
      {
        "input": "matrix = [[-100,-90,-80,-70,-60,-50,-40,-30,-20,-10],[10,20,30,40,50,60,70,80,90,100],[20,30,40,50,60,70,80,90,100,110],[30,40,50,60,70,80,90,100,110,120],[40,50,60,70,80,90,100,110,120,130],[50,60,70,80,90,100,110,120,130,140],[60,70,80,90,100,110,120,130,140,150],[70,80,90,100,110,120,130,140,150,160],[80,90,100,110,120,130,140,150,160,170],[90,100,110,120,130,140,150,160,170,180]], target = 125",
        "output": "False"
      },
      {
        "input": "matrix = [[-10,-9,-8,-7,-6,-5,-4,-3,-2,-1],[0,1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18,19],[20,21,22,23,24,25,26,27,28,29],[30,31,32,33,34,35,36,37,38,39],[40,41,42,43,44,45,46,47,48,49],[50,51,52,53,54,55,56,57,58,59],[60,61,62,63,64,65,66,67,68,69],[70,71,72,73,74,75,76,77,78,79]], target = 37",
        "output": "True"
      },
      {
        "input": "matrix = [[-1,-2,-3,-4,-5],[-6,-7,-8,-9,-10],[-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20],[-21,-22,-23,-24,-25]], target = -15",
        "output": "False"
      },
      {
        "input": "matrix = [[1,3,5,7,9,11,13,15,17,19],[2,4,6,8,10,12,14,16,18,20],[3,5,7,9,11,13,15,17,19,21],[4,6,8,10,12,14,16,18,20,22],[5,7,9,11,13,15,17,19,21,23],[6,8,10,12,14,16,18,20,22,24],[7,9,11,13,15,17,19,21,23,25],[8,10,12,14,16,18,20,22,24,26],[9,11,13,15,17,19,21,23,25,27],[10,12,14,16,18,20,22,24,26,28]], target = 16",
        "output": "True"
      },
      {
        "input": "matrix = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90],[91,92,93,94,95,96,97,98,99,100]], target = 55",
        "output": "True"
      },
      {
        "input": "matrix = [[-1000000000,-900000000,-800000000,-700000000,-600000000],[-500000000,-400000000,-300000000,-200000000,-1000000000],[0,1000000000,2000000000,3000000000,4000000000],[5000000000,6000000000,7000000000,8000000000,9000000000]], target = 0",
        "output": "True"
      },
      {
        "input": "matrix = [[-100,-90,-80,-70,-60,-50],[-90,-80,-70,-60,-50,-40],[-80,-70,-60,-50,-40,-30],[-70,-60,-50,-40,-30,-20],[-60,-50,-40,-30,-20,-10],[-50,-40,-30,-20,-10,0]], target = -65",
        "output": "False"
      },
      {
        "input": "matrix = [[1,4,7,11,15,18],[2,5,8,12,19,22],[3,6,9,16,22,24],[10,13,14,17,24,26],[18,21,23,26,30,35],[20,24,27,29,33,40]], target = 27",
        "output": "True"
      },
      {
        "input": "matrix = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50]], target = 50",
        "output": "True"
      },
      {
        "input": "matrix = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50]], target = 25",
        "output": "True"
      },
      {
        "input": "matrix = [[1,3,5,7,9],[2,4,6,8,10],[11,13,15,17,19],[12,14,16,18,20],[21,23,25,27,29]], target = 25",
        "output": "True"
      },
      {
        "input": "matrix = [[-1000000000,-999999999,-999999998],[-999999997,-999999996,-999999995],[-999999994,-999999993,-999999992]], target = -999999995",
        "output": "True"
      },
      {
        "input": "matrix = [[-1000000000,-999999999,-999999998,-999999997],[-999999996,-999999995,-999999994,-999999993],[-999999992,-999999991,-999999990,-999999989],[-999999988,-999999987,-999999986,-999999985]], target = -999999993",
        "output": "True"
      },
      {
        "input": "matrix = [[1,3,5,7,9],[2,4,6,8,10],[11,13,15,17,19],[12,14,16,18,20],[21,23,25,27,29]], target = 15",
        "output": "True"
      },
      {
        "input": "matrix = [[1,4,7,11,15,19],[2,5,8,12,19,23],[3,6,9,16,22,26],[10,13,14,17,24,28],[18,21,23,26,30,34],[29,33,35,39,43,47]], target = 34",
        "output": "True"
      },
      {
        "input": "matrix = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60]], target = 33",
        "output": "True"
      },
      {
        "input": "matrix = [[1,4,7,11,15,20],[2,5,8,12,19,25],[3,6,9,16,22,30],[10,13,14,17,24,35],[18,21,23,26,30,40],[22,27,31,37,41,45]], target = 37",
        "output": "True"
      },
      {
        "input": "matrix = [[-100,-99,-98,-97,-96],[-95,-94,-93,-92,-91],[-90,-89,-88,-87,-86],[-85,-84,-83,-82,-81],[-80,-79,-78,-77,-76]], target = -89",
        "output": "True"
      },
      {
        "input": "matrix = [[-10,-9,-8,-7,-6,-5],[-4,-3,-2,-1,0,1],[2,3,4,5,6,7],[8,9,10,11,12,13],[14,15,16,17,18,19],[20,21,22,23,24,25]], target = -5",
        "output": "True"
      },
      {
        "input": "matrix = [[-10,-5,0,5,10],[-9,-4,-1,4,9],[-8,-3,1,6,11],[-7,-2,2,7,12],[-6,-1,3,8,13]], target = 13",
        "output": "True"
      },
      {
        "input": "matrix = [[1,4,7,11,15,19],[2,5,8,12,16,20],[3,6,9,13,17,21],[10,14,18,22,26,24],[18,22,26,30,34,32],[27,31,35,39,43,41]], target = 35",
        "output": "True"
      },
      {
        "input": "matrix = [[-100,-99,-98,-97,-96],[-95,-94,-93,-92,-91],[-90,-89,-88,-87,-86],[-85,-84,-83,-82,-81],[-80,-79,-78,-77,-76]], target = -93",
        "output": "True"
      },
      {
        "input": "matrix = [[5]], target = 5",
        "output": "True"
      },
      {
        "input": "matrix = [[1000000000,2000000000,3000000000,4000000000,5000000000],[1500000000,2500000000,3500000000,4500000000,5500000000],[2000000000,3000000000,4000000000,5000000000,6000000000],[2500000000,3500000000,4500000000,5500000000,6500000000],[3000000000,4000000000,5000000000,6000000000,7000000000]], target = 4500000000",
        "output": "True"
      },
      {
        "input": "matrix = [[1,3,5,7,9],[10,11,13,15,17],[18,19,20,21,22],[25,26,27,28,29],[30,31,32,33,34]], target = 25",
        "output": "True"
      },
      {
        "input": "matrix = [[1000000000]], target = 1000000000",
        "output": "True"
      },
      {
        "input": "matrix = [[1,10,20,30,40,50,60,70,80,90],[11,21,31,41,51,61,71,81,91,100],[22,32,42,52,62,72,82,92,102,110],[33,43,53,63,73,83,93,103,113,120],[44,54,64,74,84,94,104,114,124,130]], target = 114",
        "output": "True"
      },
      {
        "input": "matrix = [[-1,-2,-3,-4,-5],[-6,-7,-8,-9,-10],[-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20],[-21,-22,-23,-24,-25]], target = -13",
        "output": "False"
      },
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]], target = 10",
        "output": "False"
      },
      {
        "input": "matrix = [[1,3,5,7,9,11],[2,4,6,8,10,12],[13,15,17,19,21,23],[24,26,28,30,32,34],[35,37,39,41,43,45],[46,48,50,52,54,56]], target = 29",
        "output": "False"
      },
      {
        "input": "matrix = [[1,3,5,7,9],[2,4,6,8,10],[11,13,15,17,19],[12,14,16,18,20],[21,22,23,24,25]], target = 0",
        "output": "False"
      },
      {
        "input": "matrix = [[-10,-5,0,5,10],[-9,-4,-1,4,9],[-8,-3,1,6,11],[-7,-2,2,7,12],[-6,-1,3,8,13]], target = 14",
        "output": "False"
      },
      {
        "input": "matrix = [[-10,-8,-6,-4,-2,0],[1,3,5,7,9,11],[2,4,6,8,10,12],[3,5,7,9,11,13],[4,6,8,10,12,14],[5,7,9,11,13,15]], target = 7",
        "output": "True"
      },
      {
        "input": "matrix = [[1,3,5,7,9,11,13],[2,4,6,8,10,12,14],[3,5,7,9,11,13,15],[4,6,8,10,12,14,16],[5,7,9,11,13,15,17],[6,8,10,12,14,16,18]], target = 17",
        "output": "True"
      },
      {
        "input": "matrix = [[5,10,15,20,25,30,35,40,45,50],[6,11,16,21,26,31,36,41,46,51],[7,12,17,22,27,32,37,42,47,52],[8,13,18,23,28,33,38,43,48,53],[9,14,19,24,29,34,39,44,49,54]], target = 38",
        "output": "True"
      },
      {
        "input": "matrix = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50]], target = 37",
        "output": "True"
      },
      {
        "input": "matrix = [[-10,-5,0,5,10],[-9,-4,-1,4,9],[-8,-3,1,6,11],[-7,-2,2,7,12],[-6,-1,3,8,13]], target = -10",
        "output": "True"
      },
      {
        "input": "matrix = [[-9,-7,-5,-3,-1,1,3,5,7,9],[-8,-6,-4,-2,0,2,4,6,8,10],[-7,-5,-3,-1,1,3,5,7,9,11],[-6,-4,-2,0,2,4,6,8,10,12],[-5,-3,-1,1,3,5,7,9,11,13],[-4,-2,0,2,4,6,8,10,12,14],[-3,-1,1,3,5,7,9,11,13,15],[-2,0,2,4,6,8,10,12,14,16],[-1,1,3,5,7,9,11,13,15,17],[0,2,4,6,8,10,12,14,16,18]], target = 15",
        "output": "True"
      },
      {
        "input": "matrix = [[1,4,7,11,15,20],[2,5,8,12,19,25],[3,6,9,16,22,30],[10,13,14,17,24,35],[18,21,23,26,30,40],[27,32,33,36,39,45]], target = 23",
        "output": "True"
      },
      {
        "input": "matrix = [[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]], target = 1",
        "output": "True"
      },
      {
        "input": "matrix = [[1,3,5,7,9],[2,4,6,8,10],[3,5,7,9,11],[4,6,8,10,12],[5,7,9,11,13]], target = 7",
        "output": "True"
      },
      {
        "input": "matrix = [[-10,-9,-8,-7,-6],[-5,-4,-3,-2,-1],[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14]], target = -3",
        "output": "True"
      },
      {
        "input": "matrix = [[1,3,5,7,9],[2,4,6,8,10],[11,13,15,17,19],[12,14,16,18,20],[21,22,23,24,25]], target = 13",
        "output": "True"
      },
      {
        "input": "matrix = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], target = 26",
        "output": "False"
      },
      {
        "input": "matrix = [[3,6,9,12,15],[6,9,12,15,18],[9,12,15,18,21],[12,15,18,21,24],[15,18,21,24,27]], target = 13",
        "output": "False"
      },
      {
        "input": "matrix = [[1,3,5,7,9,11,13,15,17,19],[2,4,6,8,10,12,14,16,18,20],[21,23,25,27,29,31,33,35,37,39],[22,24,26,28,30,32,34,36,38,40],[41,43,45,47,49,51,53,55,57,59],[42,44,46,48,50,52,54,56,58,60],[61,63,65,67,69,71,73,75,77,79],[62,64,66,68,70,72,74,76,78,80],[81,83,85,87,89,91,93,95,97,99],[82,84,86,88,90,92,94,96,98,100]], target = 64",
        "output": "True"
      },
      {
        "input": "matrix = [[-10,-9,-8,-7,-6],[-5,-4,-3,-2,-1],[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14]], target = -5",
        "output": "True"
      },
      {
        "input": "matrix = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]], target = 5",
        "output": "True"
      },
      {
        "input": "matrix = [[1,2,3,4,5,6,7,8,9,10]], target = 5",
        "output": "True"
      },
      {
        "input": "matrix = [[-10,-9,-8,-7,-6],[-5,-4,-3,-2,-1],[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14]], target = 7",
        "output": "True"
      },
      {
        "input": "matrix = [[-10,-5,-1,3,7,9],[0,0,1,4,6,8],[1,2,2,5,8,9],[2,3,4,6,9,10],[5,6,7,8,10,11],[6,7,8,10,11,12]], target = 13",
        "output": "False"
      },
      {
        "input": "matrix = [[-10,-9,-8,-7,-6,-5,-4],[-3,-2,-1,0,1,2,3],[4,5,6,7,8,9,10],[11,12,13,14,15,16,17],[18,19,20,21,22,23,24]], target = -5",
        "output": "True"
      },
      {
        "input": "matrix = [[-1,3,5,7,9,11,13,15],[2,4,6,8,10,12,14,16],[17,19,21,23,25,27,29,31],[33,35,37,39,41,43,45,47],[49,51,53,55,57,59,61,63]], target = 30",
        "output": "False"
      },
      {
        "input": "matrix = [[1,3,5,7,9,11,13],[2,4,6,8,10,12,14],[15,17,19,21,23,25,27],[29,31,33,35,37,39,41],[43,45,47,49,51,53,55]], target = 30",
        "output": "False"
      },
      {
        "input": "matrix = [[1,4,7,11,15,19],[2,5,8,12,19,23],[3,6,9,16,22,25],[10,13,14,17,24,26],[18,21,23,26,30,35],[27,32,33,34,36,37]], target = 14",
        "output": "True"
      },
      {
        "input": "matrix = [[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29],[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30],[3,5,7,9,11,13,15,17,19,21,23,25,27,29,31],[4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]], target = 17",
        "output": "True"
      },
      {
        "input": "matrix = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40]], target = 25",
        "output": "True"
      },
      {
        "input": "matrix = [[-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1]], target = -1",
        "output": "True"
      },
      {
        "input": "matrix = [[5]], target = 10",
        "output": "False"
      },
      {
        "input": "matrix = [[-1000000000,-900000000,-800000000],[-700000000,-600000000,-500000000],[-400000000,-300000000,-200000000],[-100000000,0,100000000],[200000000,300000000,400000000],[500000000,600000000,700000000],[800000000,900000000,1000000000]], target = -500000000",
        "output": "True"
      },
      {
        "input": "matrix = [[-10,-5,0,5,10,15],[1,6,11,16,21,26],[2,7,12,17,22,27],[3,8,13,18,23,28],[4,9,14,19,24,29],[5,10,15,20,25,30]], target = 3",
        "output": "True"
      },
      {
        "input": "matrix = [[1]], target = 1",
        "output": "True"
      },
      {
        "input": "matrix = [[-100,-99,-98,-97,-96],[-95,-94,-93,-92,-91],[-90,-89,-88,-87,-86],[-85,-84,-83,-82,-81],[-80,-79,-78,-77,-76]], target = -90",
        "output": "True"
      },
      {
        "input": "matrix = [[-1000000000,-500000000,-100000000,-50000000,-10000000],[-5000000,-2500000,-1000000,-500000,-100000],[-50000,-25000,-10000,-5000,-1000],[-500,-250,-100,-50,-10],[-5,-2,-1,-1,0]], target = -2500",
        "output": "False"
      },
      {
        "input": "matrix = [[1,10,19,28,37,46],[2,11,20,29,38,47],[3,12,21,30,39,48],[4,13,22,31,40,49],[5,14,23,32,41,50],[6,15,24,33,42,51]], target = 100",
        "output": "False"
      },
      {
        "input": "matrix = [[-9,-8,-7,-6,-5,-4,-3,-2,-1,0],[0,1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10,11],[3,4,5,6,7,8,9,10,11,12],[4,5,6,7,8,9,10,11,12,13],[5,6,7,8,9,10,11,12,13,14],[6,7,8,9,10,11,12,13,14,15],[7,8,9,10,11,12,13,14,15,16],[8,9,10,11,12,13,14,15,16,17]], target = 7",
        "output": "True"
      },
      {
        "input": "matrix = [[1,3,5,7,9],[2,4,6,8,10],[11,13,15,17,19],[12,14,16,18,20],[21,22,23,24,25]], target = 25",
        "output": "True"
      },
      {
        "input": "matrix = [[1,10,20,30],[2,11,21,31],[3,12,22,32],[4,13,23,33],[5,14,24,34]], target = 15",
        "output": "False"
      },
      {
        "input": "matrix = [[1,5,9,13,17,21,25,29,33,37],[2,6,10,14,18,22,26,30,34,38],[3,7,11,15,19,23,27,31,35,39],[4,8,12,16,20,24,28,32,36,40]], target = 38",
        "output": "True"
      },
      {
        "input": "matrix = [[1]], target = 0",
        "output": "False"
      },
      {
        "input": "matrix = [[1,10,20,30,40],[2,12,22,32,42],[3,13,23,33,43],[4,14,24,34,44],[5,15,25,35,45]], target = 28",
        "output": "False"
      },
      {
        "input": "matrix = [[-1,0,1],[0,1,2],[1,2,3]], target = 0",
        "output": "True"
      },
      {
        "input": "matrix = [[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]], target = 2",
        "output": "False"
      },
      {
        "input": "matrix = [[10,20,30,40,50],[60,70,80,90,100],[110,120,130,140,150],[160,170,180,190,200],[210,220,230,240,250]], target = 155",
        "output": "False"
      },
      {
        "input": "matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 31",
        "output": "False"
      },
      {
        "input": "matrix = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]], target = 55",
        "output": "True"
      },
      {
        "input": "matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 1",
        "output": "True"
      },
      {
        "input": "matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 30",
        "output": "True"
      },
      {
        "input": "matrix = [[100,101,102,103,104,105],[106,107,108,109,110,111],[112,113,114,115,116,117],[118,119,120,121,122,123],[124,125,126,127,128,129],[130,131,132,133,134,135]], target = 122",
        "output": "True"
      }
    ]
  },
  {
    "id": 2662,
    "difficulty": "Medium",
    "tags": [
      "Graph",
      "Array",
      "Shortest Path",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an array start where start = [startX, startY] represents your initial position (startX, startY) in a 2D space. You are also given the array target where target = [targetX, targetY] represents your target position (targetX, targetY).\nThe cost of going from a position (x1, y1) to any other position in the space (x2, y2) is |x2 - x1| + |y2 - y1|.\nThere are also some special roads. You are given a 2D array specialRoads where specialRoads[i] = [x1i, y1i, x2i, y2i, costi] indicates that the ith special road goes in one direction from (x1i, y1i) to (x2i, y2i) with a cost equal to costi. You can use each special road any number of times.\nReturn the minimum cost required to go from (startX, startY) to (targetX, targetY).\n\u00a0\nExample 1:\n\nInput: start = [1,1], target = [4,5], specialRoads = [[1,2,3,3,2],[3,4,4,5,1]]\nOutput: 5\nExplanation:\n\n(1,1) to (1,2) with a cost of |1 - 1| + |2 - 1| = 1.\n(1,2) to (3,3). Use specialRoads[0] with the cost 2.\n(3,3) to (3,4) with a cost of |3 - 3| + |4 - 3| = 1.\n(3,4) to (4,5). Use specialRoads[1] with the cost 1.\n\nSo the total cost is 1 + 2 + 1 + 1 = 5.\n\nExample 2:\n\nInput: start = [3,2], target = [5,7], specialRoads = [[5,7,3,2,1],[3,2,3,4,4],[3,3,5,5,5],[3,4,5,6,6]]\nOutput: 7\nExplanation:\nIt is optimal not to use any special edges and go directly from the starting to the ending position with a cost |5 - 3| + |7 - 2| = 7.\nNote that the specialRoads[0] is directed from (5,7) to (3,2).\n\nExample 3:\n\nInput: start = [1,1], target = [10,4], specialRoads = [[4,2,1,1,3],[1,2,7,4,4],[10,3,6,1,2],[6,1,1,2,3]]\nOutput: 8\nExplanation:\n\n(1,1) to (1,2) with a cost of |1 - 1| + |2 - 1| = 1.\n(1,2) to (7,4). Use specialRoads[1] with the cost 4.\n(7,4) to (10,4) with a cost of |10 - 7| + |4 - 4| = 3.\n\n\n\u00a0\nConstraints:\n\nstart.length == target.length == 2\n1 <= startX <= targetX <= 105\n1 <= startY <= targetY <= 105\n1 <= specialRoads.length <= 200\nspecialRoads[i].length == 5\nstartX <= x1i, x2i <= targetX\nstartY <= y1i, y2i <= targetY\n1 <= costi <= 105\n\n",
    "starterCode": "class Solution:\n    def minimumCost(self, start: List[int], target: List[int], specialRoads: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "start = [3,2], target = [5,7], specialRoads = [[5,7,3,2,1],[3,2,3,4,4],[3,3,5,5,5],[3,4,5,6,6]]",
        "output": "7"
      },
      {
        "input": "start = [1,1], target = [4,5], specialRoads = [[1,2,3,3,2],[3,4,4,5,1]]",
        "output": "5"
      },
      {
        "input": "start = [1,1], target = [10,4], specialRoads = [[4,2,1,1,3],[1,2,7,4,4],[10,3,6,1,2],[6,1,1,2,3]]",
        "output": "8"
      },
      {
        "input": "start = [1,1], target = [100,100], specialRoads = [[10,10,20,20,10],[20,20,30,30,15],[30,30,40,40,20],[40,40,50,50,25],[50,50,60,60,30],[60,60,70,70,35],[70,70,80,80,40],[80,80,90,90,45],[90,90,100,100,50]]",
        "output": "183"
      },
      {
        "input": "start = [1,1], target = [200,200], specialRoads = [[10,10,30,30,15],[30,30,50,50,20],[50,50,70,70,25],[70,70,90,90,30],[90,90,110,110,35],[110,110,130,130,40],[130,130,150,150,45],[150,150,170,170,50],[170,170,190,190,55],[190,190,200,200,60],[10,50,30,70,20],[30,70,50,90,25],[50,90,70,110,30],[70,110,90,130,35],[90,130,110,150,40],[110,150,130,170,45],[130,170,150,190,50],[150,190,170,200,55]]",
        "output": "323"
      },
      {
        "input": "start = [1,1], target = [20,20], specialRoads = [[2,2,3,3,1],[3,3,4,4,1],[4,4,5,5,1],[5,5,6,6,1],[6,6,7,7,1],[7,7,8,8,1],[8,8,9,9,1],[9,9,10,10,1],[10,10,11,11,1],[11,11,12,12,1],[12,12,13,13,1],[13,13,14,14,1],[14,14,15,15,1],[15,15,16,16,1],[16,16,17,17,1],[17,17,18,18,1],[18,18,19,19,1],[19,19,20,20,1]]",
        "output": "20"
      },
      {
        "input": "start = [5, 5], target = [20, 20], specialRoads = [[5, 5, 10, 10, 5], [10, 10, 15, 15, 3], [15, 15, 20, 20, 2], [10, 15, 15, 20, 4]]",
        "output": "10"
      },
      {
        "input": "start = [1,1], target = [100,100], specialRoads = [[1,2,3,4,2],[5,6,7,8,3],[9,10,11,12,4],[13,14,15,16,5],[17,18,19,20,6]]",
        "output": "195"
      },
      {
        "input": "start = [1,1], target = [100,100], specialRoads = [[1,1,25,25,50],[25,25,50,50,100],[50,50,75,75,150],[75,75,100,100,200],[1,1,50,50,150],[50,50,100,100,250],[100,100,75,75,200],[75,75,50,50,150],[50,50,25,25,100]]",
        "output": "198"
      },
      {
        "input": "start = [10,10], target = [100,100], specialRoads = [[10,10,20,20,30],[20,20,30,30,35],[30,30,40,40,40],[40,40,50,50,45],[50,50,60,60,50],[60,60,70,70,55],[70,70,80,80,60],[80,80,90,90,65],[90,90,100,100,70]]",
        "output": "180"
      },
      {
        "input": "start = [1,1], target = [15,15], specialRoads = [[1,1,5,5,8],[5,5,10,10,10],[10,10,15,15,12],[1,5,5,10,15],[5,10,10,15,20]]",
        "output": "28"
      },
      {
        "input": "start = [1,1], target = [20,20], specialRoads = [[2,2,18,18,10],[3,3,17,17,10],[4,4,16,16,10],[5,5,15,15,10],[6,6,14,14,10],[7,7,13,13,10],[8,8,12,12,10],[9,9,11,11,10],[10,10,10,10,10],[11,11,9,9,10],[12,12,8,8,10],[13,13,7,7,10],[14,14,6,6,10],[15,15,5,5,10],[16,16,4,4,10],[17,17,3,3,10],[18,18,2,2,10]]",
        "output": "16"
      },
      {
        "input": "start = [10,10], target = [50,50], specialRoads = [[15,15,25,25,10],[25,25,35,35,20],[35,35,45,45,30],[45,45,55,55,40],[15,25,25,35,5],[25,35,35,45,15],[35,45,45,55,25],[15,35,35,45,35],[25,45,45,55,45],[15,45,45,55,55],[10,25,25,35,5],[25,35,35,45,15],[35,45,45,55,25],[15,45,45,55,35],[25,55,55,65,45],[35,55,55,65,55],[45,55,55,65,65],[15,55,55,65,75],[25,55,55,65,85],[10,50,50,50,10],[20,50,50,50,20],[30,50,50,50,30],[40,50,50,50,40],[50,50,50,50,50],[60,50,50,50,60],[70,50,50,50,70]]",
        "output": "50"
      },
      {
        "input": "start = [10,10], target = [30,30], specialRoads = [[15,15,20,20,10],[20,20,25,25,5],[25,25,30,30,2],[12,12,18,18,8],[18,18,24,24,6],[24,24,29,29,4]]",
        "output": "22"
      },
      {
        "input": "start = [5,5], target = [95,95], specialRoads = [[10,10,20,20,10],[20,20,30,30,20],[30,30,40,40,30],[40,40,50,50,40],[50,50,60,60,50],[60,60,70,70,60],[70,70,80,80,70],[80,80,90,90,80],[90,90,100,100,90],[100,100,110,110,100],[110,110,120,120,110],[120,120,130,130,120],[130,130,140,140,130],[140,140,150,150,140],[150,150,160,160,150],[160,160,170,170,160],[170,170,180,180,170],[180,180,190,190,180],[190,190,200,200,190],[200,200,210,210,200],[210,210,220,220,210],[220,220,230,230,220],[230,230,240,240,230],[240,240,250,250,240],[250,250,260,260,250],[260,260,270,270,260],[270,270,280,280,270],[280,280,290,290,280],[290,290,300,300,290],[300,300,310,310,300],[310,310,320,320,310],[320,320,330,330,320],[330,330,340,340,330],[340,340,350,350,340],[350,350,360,360,350],[360,360,370,370,360],[370,370,380,380,370],[380,380,390,390,380],[390,390,400,400,390],[400,400,410,410,400],[410,410,420,420,410],[420,420,430,430,420],[430,430,440,440,430],[440,440,450,450,440],[450,450,460,460,450],[460,460,470,470,460],[470,470,480,480,470],[480,480,490,490,480],[490,490,500,500,490],[500,500,510,510,500],[510,510,520,520,510],[520,520,530,530,520],[530,530,540,540,530],[540,540,550,550,540],[550,550,560,560,550],[560,560,570,570,560],[570,570,580,580,570],[580,580,590,590,580],[590,590,600,600,590],[600,600,610,610,600],[610,610,620,620,610],[620,620,630,630,620],[630,630,640,640,630],[640,640,650,650,640],[650,650,660,660,650],[660,660,670,670,660],[670,670,680,680,670],[680,680,690,690,680],[690,690,700,700,690],[700,700,710,710,700],[710,710,720,720,710],[720,720,730,730,720],[730,730,740,740,730],[740,740,750,750,740],[750,750,760,760,750],[760,760,770,770,760],[770,770,780,780,770],[780,780,790,790,780],[790,790,800,800,790],[800,800,810,810,800],[810,810,820,820,810],[820,820,830,830,820],[830,830,840,840,830],[840,840,850,850,840],[850,850,860,860,850],[860,860,870,870,860],[870,870,880,880,870],[880,880,890,890,880],[890,890,900,900,890],[900,900,910,910,900],[910,910,920,920,910],[920,920,930,930,920],[930,930,940,940,930],[940,940,950,950,940]]",
        "output": "170"
      },
      {
        "input": "start = [1,1], target = [200,200], specialRoads = [[10,10,30,30,20],[50,50,70,70,30],[90,90,110,110,40],[130,130,150,150,50],[170,170,190,190,60]]",
        "output": "368"
      },
      {
        "input": "start = [2,2], target = [20,20], specialRoads = [[2,2,6,6,5],[6,6,10,10,7],[10,10,14,14,6],[14,14,18,18,8],[18,18,20,20,9]]",
        "output": "30"
      },
      {
        "input": "start = [1,1], target = [10,10], specialRoads = [[2,2,3,3,1],[3,3,4,4,2],[4,4,5,5,3],[5,5,6,6,4],[6,6,7,7,5],[7,7,8,8,6],[8,8,9,9,7],[9,9,10,10,8]]",
        "output": "17"
      },
      {
        "input": "start = [10, 10], target = [50, 50], specialRoads = [[10, 10, 20, 20, 15], [20, 20, 30, 30, 10], [30, 30, 40, 40, 5], [40, 40, 50, 50, 3], [20, 30, 30, 40, 2], [30, 40, 40, 50, 1]]",
        "output": "33"
      },
      {
        "input": "start = [10,10], target = [150,150], specialRoads = [[20,20,40,40,10],[40,40,60,60,15],[60,60,80,80,20],[80,80,100,100,25],[100,100,120,120,30],[120,120,140,140,35],[140,140,160,160,40],[160,160,180,180,45],[180,180,200,200,50],[20,60,40,80,20],[40,80,60,100,25],[60,100,80,120,30],[80,120,100,140,35],[100,140,120,160,40],[120,160,140,180,45],[140,180,160,200,50]]",
        "output": "175"
      },
      {
        "input": "start = [10, 10], target = [90, 90], specialRoads = [[10, 10, 20, 20, 15], [20, 20, 30, 30, 10], [30, 30, 40, 40, 5], [40, 40, 50, 50, 3], [50, 50, 60, 60, 15], [60, 60, 70, 70, 10], [70, 70, 80, 80, 5], [80, 80, 90, 90, 3], [20, 30, 30, 40, 2], [30, 40, 40, 50, 1], [40, 50, 50, 60, 2], [50, 60, 60, 70, 1], [60, 70, 70, 80, 2], [70, 80, 80, 90, 1]]",
        "output": "44"
      },
      {
        "input": "start = [1,1], target = [12,12], specialRoads = [[1,1,3,3,4],[3,3,6,6,5],[6,6,9,9,6],[9,9,12,12,7],[1,6,6,11,8],[6,11,11,16,9],[11,16,16,21,10]]",
        "output": "20"
      },
      {
        "input": "start = [50, 50], target = [100, 100], specialRoads = [[50, 50, 60, 60, 5], [60, 60, 70, 70, 5], [70, 70, 80, 80, 5], [80, 80, 90, 90, 5], [90, 90, 100, 100, 5], [50, 60, 70, 80, 10], [60, 70, 80, 90, 10], [70, 80, 90, 100, 10]]",
        "output": "25"
      },
      {
        "input": "start = [1,1], target = [50,50], specialRoads = [[1,2,3,3,1],[3,4,4,5,1],[5,6,6,7,1],[7,8,8,9,1],[9,10,10,11,1],[11,12,12,13,1],[13,14,14,15,1],[15,16,16,17,1],[17,18,18,19,1],[19,20,20,21,1],[21,22,22,23,1],[23,24,24,25,1],[25,26,26,27,1],[27,28,28,29,1],[29,30,30,31,1],[31,32,32,33,1],[33,34,34,35,1],[35,36,36,37,1],[37,38,38,39,1],[39,40,40,41,1],[41,42,42,43,1],[43,44,44,45,1],[45,46,46,47,1],[47,48,48,49,1],[49,50,50,51,1]]",
        "output": "73"
      },
      {
        "input": "start = [1, 1], target = [10, 10], specialRoads = [[1, 1, 5, 5, 10], [5, 5, 10, 10, 10], [1, 5, 5, 10, 10], [5, 1, 10, 5, 10], [1, 1, 10, 10, 30]]",
        "output": "18"
      },
      {
        "input": "start = [5,5], target = [50,50], specialRoads = [[5,5,20,20,10],[20,20,30,30,5],[30,30,40,40,12],[40,40,50,50,7],[5,50,25,25,18]]",
        "output": "34"
      },
      {
        "input": "start = [1,1], target = [15,15], specialRoads = [[1,1,4,4,5],[5,5,8,8,6],[9,9,12,12,7],[13,13,15,15,8]]",
        "output": "27"
      },
      {
        "input": "start = [5,5], target = [20,20], specialRoads = [[6,6,10,10,15],[10,10,15,15,10],[15,15,20,20,5],[5,5,10,10,20],[10,10,12,12,1],[12,12,15,15,5]]",
        "output": "21"
      },
      {
        "input": "start = [1,1], target = [10,10], specialRoads = [[1,2,3,4,5],[4,5,6,7,6],[7,8,9,10,7],[1,5,3,9,8],[5,6,8,10,9],[2,6,4,10,10]]",
        "output": "18"
      },
      {
        "input": "start = [1, 1], target = [100, 1], specialRoads = [[10, 1, 20, 1, 5], [20, 1, 30, 1, 5], [30, 1, 40, 1, 5], [40, 1, 50, 1, 5], [50, 1, 60, 1, 5], [60, 1, 70, 1, 5], [70, 1, 80, 1, 5], [80, 1, 90, 1, 5], [90, 1, 100, 1, 5]]",
        "output": "54"
      },
      {
        "input": "start = [10,10], target = [100,100], specialRoads = [[10,10,20,20,50],[20,20,30,30,55],[30,30,40,40,60],[40,40,50,50,65],[50,50,60,60,70],[60,60,70,70,75],[70,70,80,80,80],[80,80,90,90,85],[90,90,100,100,90]]",
        "output": "180"
      },
      {
        "input": "start = [1,1], target = [100,100], specialRoads = [[10,10,20,20,50],[20,20,30,30,40],[30,30,40,40,30],[40,40,50,50,20],[50,50,60,60,10],[60,60,70,70,15],[70,70,80,80,25],[80,80,90,90,35],[90,90,100,100,45]]",
        "output": "183"
      },
      {
        "input": "start = [1,1], target = [50,50], specialRoads = [[1,1,10,10,10],[10,10,20,20,20],[20,20,30,30,30],[30,30,40,40,40],[40,40,50,50,50],[50,50,45,45,60],[45,45,40,40,70],[40,40,35,35,80],[35,35,30,30,90],[30,30,25,25,100],[25,25,20,20,110],[20,20,15,15,120],[15,15,10,10,130],[10,10,1,1,140]]",
        "output": "90"
      },
      {
        "input": "start = [1,1], target = [50,50], specialRoads = [[2,2,3,3,1],[3,3,4,4,2],[4,4,5,5,3],[5,5,6,6,4],[6,6,7,7,5],[7,7,8,8,6],[8,8,9,9,7],[9,9,10,10,8],[10,10,11,11,9],[11,11,12,12,10],[12,12,13,13,11],[13,13,14,14,12],[14,14,15,15,13],[15,15,16,16,14],[16,16,17,17,15],[17,17,18,18,16],[18,18,19,19,17],[19,19,20,20,18],[20,20,21,21,19],[21,21,22,22,20],[22,22,23,23,21],[23,23,24,24,22],[24,24,25,25,23],[25,25,26,26,24],[26,26,27,27,25],[27,27,28,28,26],[28,28,29,29,27],[29,29,30,30,28],[30,30,31,31,29],[31,31,32,32,30],[32,32,33,33,31],[33,33,34,34,32],[34,34,35,35,33],[35,35,36,36,34],[36,36,37,37,35],[37,37,38,38,36],[38,38,39,39,37],[39,39,40,40,38],[40,40,41,41,39],[41,41,42,42,40],[42,42,43,43,41],[43,43,44,44,42],[44,44,45,45,43],[45,45,46,46,44],[46,46,47,47,45],[47,47,48,48,46],[48,48,49,49,47],[49,49,50,50,48]]",
        "output": "97"
      },
      {
        "input": "start = [10,10], target = [100,100], specialRoads = [[15,15,20,20,5],[20,20,25,25,5],[25,25,30,30,5],[30,30,35,35,5],[35,35,40,40,5],[40,40,45,45,5],[45,45,50,50,5],[50,50,55,55,5],[55,55,60,60,5],[60,60,65,65,5],[65,65,70,70,5],[70,70,75,75,5],[75,75,80,80,5],[80,80,85,85,5],[85,85,90,90,5],[90,90,95,95,5],[95,95,100,100,5],[10,30,20,40,10],[20,40,30,50,10],[30,50,40,60,10],[40,60,50,70,10],[50,70,60,80,10],[60,80,70,90,10],[70,90,80,100,10]]",
        "output": "95"
      },
      {
        "input": "start = [1,1], target = [15,15], specialRoads = [[1,2,2,3,1],[2,3,3,4,1],[3,4,4,5,1],[4,5,5,6,1],[5,6,6,7,1],[6,7,7,8,1],[7,8,8,9,1],[8,9,9,10,1],[9,10,10,11,1],[10,11,11,12,1],[11,12,12,13,1],[12,13,13,14,1],[13,14,14,15,1]]",
        "output": "15"
      },
      {
        "input": "start = [1,1], target = [100,100], specialRoads = [[1,1,50,50,50],[50,50,75,75,40],[75,75,100,100,60],[1,1,75,75,100],[50,50,100,100,150]]",
        "output": "140"
      },
      {
        "input": "start = [5,5], target = [95,95], specialRoads = [[10,10,20,20,15],[20,20,30,30,20],[30,30,40,40,25],[40,40,50,50,30],[50,50,60,60,35],[60,60,70,70,40],[70,70,80,80,45],[80,80,90,90,50],[90,90,100,100,55],[10,30,20,40,10],[20,40,30,50,15],[30,50,40,60,20],[40,60,50,70,25],[50,70,60,80,30],[60,80,70,90,35],[70,90,80,100,40],[80,100,90,95,45],[90,95,100,95,50]]",
        "output": "165"
      },
      {
        "input": "start = [50, 50], target = [100, 100], specialRoads = [[50, 50, 60, 60, 10], [60, 60, 70, 70, 10], [70, 70, 80, 80, 10], [80, 80, 90, 90, 10], [90, 90, 100, 100, 10], [60, 60, 70, 70, 5], [70, 70, 80, 80, 5], [80, 80, 90, 90, 5], [90, 90, 100, 100, 5], [70, 70, 80, 80, 2], [80, 80, 90, 90, 2], [90, 90, 100, 100, 2]]",
        "output": "21"
      },
      {
        "input": "start = [5,5], target = [50,50], specialRoads = [[5,5,15,15,20],[15,15,25,25,25],[25,25,35,35,30],[35,35,45,45,35],[45,45,50,50,40],[5,15,15,25,50],[15,25,25,35,55],[25,35,35,45,60],[35,45,45,50,65]]",
        "output": "90"
      },
      {
        "input": "start = [10,10], target = [100,100], specialRoads = [[10,20,30,40,15],[30,50,60,70,20],[60,80,90,100,25]]",
        "output": "100"
      },
      {
        "input": "start = [1,1], target = [100,100], specialRoads = [[2,2,50,50,100],[50,50,75,75,150],[75,75,100,100,50],[50,50,100,100,200],[75,75,25,25,50],[25,25,1,1,10]]",
        "output": "198"
      },
      {
        "input": "start = [10,10], target = [10,30], specialRoads = [[10,11,10,15,5],[10,16,10,20,4],[10,21,10,25,3],[10,26,10,30,2]]",
        "output": "17"
      },
      {
        "input": "start = [10, 10], target = [50, 50], specialRoads = [[15, 15, 20, 20, 5], [25, 25, 30, 30, 5], [35, 35, 40, 40, 5], [45, 45, 50, 50, 5], [5, 5, 10, 10, 5], [10, 10, 15, 15, 5], [15, 15, 10, 10, 5], [20, 20, 15, 15, 5], [25, 25, 20, 20, 5], [30, 30, 25, 25, 5], [35, 35, 30, 30, 5], [40, 40, 35, 35, 5], [45, 45, 40, 40, 5]]",
        "output": "55"
      },
      {
        "input": "start = [1, 1], target = [100000, 100000], specialRoads = [[1, 1, 100000, 100000, 50000], [50000, 50000, 75000, 75000, 10000]]",
        "output": "50000"
      },
      {
        "input": "start = [10,10], target = [50,50], specialRoads = [[10,20,30,40,25],[30,50,40,60,30],[40,60,50,70,35],[50,70,60,80,40],[60,80,70,90,45]]",
        "output": "65"
      },
      {
        "input": "start = [1, 1], target = [100, 100], specialRoads = [[10, 10, 20, 20, 15], [20, 20, 30, 30, 25], [50, 50, 70, 70, 45], [70, 70, 90, 90, 55], [90, 90, 100, 100, 5]]",
        "output": "178"
      },
      {
        "input": "start = [3,3], target = [30,30], specialRoads = [[3,3,9,9,15],[9,9,15,15,20],[15,15,21,21,25],[21,21,27,27,30],[27,27,30,30,35],[3,9,9,15,40],[9,15,15,21,45],[15,21,21,27,50],[21,27,27,30,55]]",
        "output": "54"
      },
      {
        "input": "start = [5, 5], target = [150, 150], specialRoads = [[10, 10, 15, 15, 10], [15, 15, 20, 20, 12], [20, 20, 25, 25, 14], [25, 25, 30, 30, 16], [30, 30, 35, 35, 18], [35, 35, 40, 40, 20], [40, 40, 45, 45, 22], [45, 45, 50, 50, 24], [50, 50, 55, 55, 26], [55, 55, 60, 60, 28], [60, 60, 65, 65, 30], [65, 65, 70, 70, 32], [70, 70, 75, 75, 34], [75, 75, 80, 80, 36], [80, 80, 85, 85, 38], [85, 85, 90, 90, 40], [90, 90, 95, 95, 42], [95, 95, 100, 100, 44], [100, 100, 105, 105, 46], [105, 105, 110, 110, 48], [110, 110, 115, 115, 50], [115, 115, 120, 120, 52], [120, 120, 125, 125, 54], [125, 125, 130, 130, 56], [130, 130, 135, 135, 58], [135, 135, 140, 140, 60], [140, 140, 145, 145, 62], [145, 145, 150, 150, 64]]",
        "output": "290"
      },
      {
        "input": "start = [5,5], target = [30,5], specialRoads = [[6,5,10,5,5],[11,5,15,5,4],[16,5,20,5,3],[21,5,25,5,2],[26,5,30,5,1]]",
        "output": "19"
      },
      {
        "input": "start = [10,10], target = [50,50], specialRoads = [[10,10,20,20,20],[20,20,30,30,30],[30,30,40,40,40],[40,40,50,50,50],[50,50,40,40,60],[40,40,30,30,70],[30,30,20,20,80],[20,20,10,10,90]]",
        "output": "80"
      },
      {
        "input": "start = [5,5], target = [200,200], specialRoads = [[10,10,20,20,5],[20,20,30,30,5],[30,30,40,40,5],[40,40,50,50,5],[50,50,60,60,5],[60,60,70,70,5],[70,70,80,80,5],[80,80,90,90,5],[90,90,100,100,5],[100,100,110,110,5],[110,110,120,120,5],[120,120,130,130,5],[130,130,140,140,5],[140,140,150,150,5],[150,150,160,160,5],[160,160,170,170,5],[170,170,180,180,5],[180,180,190,190,5],[190,190,200,200,5],[1,1,200,200,1000]]",
        "output": "105"
      },
      {
        "input": "start = [5,5], target = [50,50], specialRoads = [[5,5,10,10,10],[10,10,15,15,10],[15,15,20,20,10],[20,20,25,25,10],[25,25,30,30,10],[30,30,35,35,10],[35,35,40,40,10],[40,40,45,45,10],[45,45,50,50,10]]",
        "output": "90"
      },
      {
        "input": "start = [5,5], target = [25,25], specialRoads = [[5,5,10,10,10],[10,10,15,15,15],[15,15,20,20,20],[20,20,25,25,25]]",
        "output": "40"
      }
    ]
  },
  {
    "id": 3205,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Greedy",
      "Array",
      "Dynamic Programming",
      "Monotonic Stack"
    ],
    "problemDescription": "Given an array nums, you have to get the maximum score starting from index 0 and hopping until you reach the last element of the array.\nIn each hop, you can jump from index i to an index j > i, and you get a score of (j - i) * nums[j].\nReturn the maximum score you can get.\n\u00a0\nExample 1:\n\nInput: nums = [1,5,8]\nOutput: 16\nExplanation:\nThere are two possible ways to reach the last element:\n\n0 -> 1 -> 2 with a score of\u00a0(1 - 0) * 5 + (2 - 1) * 8 = 13.\n0 -> 2 with a score of\u00a0(2 - 0) * 8 =\u00a016.\n\n\nExample 2:\n\nInput: nums = [4,5,2,8,9,1,3]\nOutput: 42\nExplanation:\nWe can do the hopping 0 -> 4 -> 6 with a score of\u00a0(4 - 0) * 9 + (6 - 4) * 3 = 42.\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 103\n1 <= nums[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def maxScore(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "nums = [3,4,5,6,7]",
        "output": "28"
      },
      {
        "input": "nums = [1,100,1,1,1,1,100]",
        "output": "600"
      },
      {
        "input": "nums = [3,2,1,6,5,4,7,8,9]",
        "output": "72"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "9"
      },
      {
        "input": "nums = [4,5,2,8,9,1,3]",
        "output": "42"
      },
      {
        "input": "nums = [1,100,1,100,1,100]",
        "output": "500"
      },
      {
        "input": "nums = [3,2,1,4,5]",
        "output": "20"
      },
      {
        "input": "nums = [1,5,8]",
        "output": "16"
      },
      {
        "input": "nums = [5,6,7,8,9,10]",
        "output": "50"
      },
      {
        "input": "nums = [2,3,4,5,6]",
        "output": "24"
      },
      {
        "input": "nums = [10,20,30,40,50]",
        "output": "200"
      },
      {
        "input": "nums = [2,3,1,4,5]",
        "output": "20"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "45"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "90"
      },
      {
        "input": "nums = [1, 3, 6, 7, 5, 8, 2, 9]",
        "output": "63"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "9000"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "190"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "90"
      },
      {
        "input": "nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]",
        "output": "490"
      },
      {
        "input": "nums = [5,1,5,1,5,1,5,1,5,1]",
        "output": "41"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "420"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "36"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "105"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "105"
      },
      {
        "input": "nums = [1, 10, 1, 10, 1, 10, 1]",
        "output": "51"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "19"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]",
        "output": "1711"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "741"
      },
      {
        "input": "nums = [25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "300"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "135"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "62"
      },
      {
        "input": "nums = [1,3,5,2,4,6,3,5,7,4,6,8,5,7,9]",
        "output": "126"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "135"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50]",
        "output": "450"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,11,12,13,14,15]",
        "output": "210"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0,9,8,7,6,5,4,3,2,1]",
        "output": "126"
      },
      {
        "input": "nums = [100,50,25,12,6,3,1]",
        "output": "97"
      },
      {
        "input": "nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]",
        "output": "150"
      },
      {
        "input": "nums = [100000,100000,100000,100000,100000,100000,100000]",
        "output": "600000"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "210"
      },
      {
        "input": "nums = [10,1,20,2,30,3,40,4,50,5,60,6,70,7,80,8,90,9,100]",
        "output": "1800"
      },
      {
        "input": "nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10]",
        "output": "90"
      },
      {
        "input": "nums = [59, 57, 55, 53, 51, 49, 47, 45, 43, 41, 39, 37, 35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]",
        "output": "841"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 100000]",
        "output": "900000"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "2700"
      },
      {
        "input": "nums = [5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "100"
      },
      {
        "input": "nums = [1000,500,250,125,63,32,16,8,4,2,1]",
        "output": "1001"
      },
      {
        "input": "nums = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100000]",
        "output": "7000000"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "180"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19]",
        "output": "171"
      },
      {
        "input": "nums = [100,200,300,400,500,1,2,3,4,5,6,7,8,9,10]",
        "output": "2100"
      },
      {
        "input": "nums = [100, 150, 200, 250, 300, 350, 400, 450, 500]",
        "output": "4000"
      },
      {
        "input": "nums = [100000, 1, 1, 1, 1, 1, 100000]",
        "output": "600000"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,10]",
        "output": "90"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]",
        "output": "90"
      },
      {
        "input": "nums = [100000,90000,80000,70000,60000,50000,40000,30000,20000,10000]",
        "output": "450000"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "380"
      },
      {
        "input": "nums = [2, 1, 2, 3, 2, 1, 2, 3, 2, 1]",
        "output": "24"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "450"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,10,9,8,7,6,5]",
        "output": "125"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "870"
      },
      {
        "input": "nums = [100000, 50000, 25000, 12500, 6250, 3125, 1562, 781, 390, 195, 97, 48, 24, 12, 6, 3, 1, 0, 0, 1]",
        "output": "99997"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1]",
        "output": "25"
      },
      {
        "input": "nums = [1,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1]",
        "output": "93"
      },
      {
        "input": "nums = [30,20,10,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "2100"
      },
      {
        "input": "nums = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]",
        "output": "600"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "171"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "435"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "600"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100]",
        "output": "900"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500]",
        "output": "21000"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 1]",
        "output": "2751"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "210"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 15, 14, 13, 12, 11, 20, 19, 18, 17, 16, 25, 24, 23, 22, 21, 30, 29, 28, 27, 26]",
        "output": "860"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,10]",
        "output": "90"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,100000]",
        "output": "1400000"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "output": "261"
      },
      {
        "input": "nums = [10, 1, 10, 1, 10, 1, 10, 1, 10, 1]",
        "output": "81"
      },
      {
        "input": "nums = [100,200,150,300,100,250,350,400]",
        "output": "2800"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]",
        "output": "760"
      },
      {
        "input": "nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]",
        "output": "110"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "290"
      },
      {
        "input": "nums = [5,15,10,20,25,10,30,35,5,45,50]",
        "output": "500"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6]",
        "output": "70"
      },
      {
        "input": "nums = [10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]",
        "output": "100"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "2100"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "380"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 1]",
        "output": "1851"
      },
      {
        "input": "nums = [100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000, 1]",
        "output": "800001"
      },
      {
        "input": "nums = [1, 3, 2, 6, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "210"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "1900"
      },
      {
        "input": "nums = [10000, 5000, 7500, 2500, 6000, 8000, 3000, 9000, 10000]",
        "output": "80000"
      },
      {
        "input": "nums = [1,10,1,10,1,10,1,10,1,10]",
        "output": "90"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 6, 7, 8, 9, 10]",
        "output": "90"
      },
      {
        "input": "nums = [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]",
        "output": "92"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000]",
        "output": "500000"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45]",
        "output": "405"
      },
      {
        "input": "nums = [5,1,5,1,5,1,5,1,5,1,5]",
        "output": "50"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "900"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]",
        "output": "1000"
      },
      {
        "input": "nums = [98765,43210,56789,12345,67890,23456,34567,45678,56789,67890,78901,89012,90123,12345,23456,34567,45678,56789,67890,78901]",
        "output": "1633783"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "9000"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "2100"
      },
      {
        "input": "nums = [1,100,1,100,1,100,1]",
        "output": "501"
      }
    ]
  },
  {
    "id": 152,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "Given an integer array nums, find a subarray that has the largest product, and return the product.\nThe test cases are generated so that the answer will fit in a 32-bit integer.\n\u00a0\nExample 1:\n\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n\nExample 2:\n\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 2 * 104\n-10 <= nums[i] <= 10\nThe product of any subarray of nums is guaranteed to fit in a 32-bit integer.\n\n",
    "starterCode": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [2,-5,-2,-4,3]",
        "output": "24"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [-2,3,-4]",
        "output": "24"
      },
      {
        "input": "nums = [10,-20,0,5,1]",
        "output": "10"
      },
      {
        "input": "nums = [3,-1,4]",
        "output": "4"
      },
      {
        "input": "nums = [-1,-2,-3,0]",
        "output": "6"
      },
      {
        "input": "nums = [0,2]",
        "output": "2"
      },
      {
        "input": "nums = [-1,2,-3,4,-5,6,-7,8,-9,10]",
        "output": "3628800"
      },
      {
        "input": "nums = [2,3,-2,4]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,-1,4]",
        "output": "4"
      },
      {
        "input": "nums = [0,2,0]",
        "output": "2"
      },
      {
        "input": "nums = [-1,-2,-3,-4]",
        "output": "24"
      },
      {
        "input": "nums = [-1]",
        "output": "-1"
      },
      {
        "input": "nums = [-2,0,-1]",
        "output": "0"
      },
      {
        "input": "nums = [-2,3,-4,5,7,-8,2,3]",
        "output": "20160"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "120"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "3628800"
      },
      {
        "input": "nums = [0,2,3,-2,4,-1,5]",
        "output": "240"
      },
      {
        "input": "nums = [-10,0,10,20,30,-40,50,60,-70,80]",
        "output": "4032000000000"
      },
      {
        "input": "nums = [-1,0,-1,0,-1,0,-1,0,-1,0]",
        "output": "0"
      },
      {
        "input": "nums = [2,3,-2,4,-1,5,6]",
        "output": "1440"
      },
      {
        "input": "nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]",
        "output": "1"
      },
      {
        "input": "nums = [10,-10,20,-20,30,-30,40,-40,50]",
        "output": "2880000000000"
      },
      {
        "input": "nums = [1,-1,1,-1,1,-1,1,-1]",
        "output": "1"
      },
      {
        "input": "nums = [-2,-3,7,-4,0,5,-8,3,6]",
        "output": "84"
      },
      {
        "input": "nums = [5,0,5,-1,0,5,-1,0,5,-1]",
        "output": "5"
      },
      {
        "input": "nums = [0, 2, -3, 4, -5, 6]",
        "output": "720"
      },
      {
        "input": "nums = [0,2,-3,4,-5,6]",
        "output": "720"
      },
      {
        "input": "nums = [2, 3, 0, -1, 4, 5, 0, -2, 3, 0]",
        "output": "20"
      },
      {
        "input": "nums = [2,3,0,-1,-2,4,0,5,6,0,-7,8,-9]",
        "output": "504"
      },
      {
        "input": "nums = [1,0,-1,0,1,-1,0,1,0]",
        "output": "1"
      },
      {
        "input": "nums = [5,6,-3,4,0,2,3,-2,4]",
        "output": "30"
      },
      {
        "input": "nums = [10, -10, 10, -10, 10, -10]",
        "output": "100000"
      },
      {
        "input": "nums = [5, 6, -3, 4, 0, -1, 2, -5]",
        "output": "30"
      },
      {
        "input": "nums = [0,2,3,-2,4,-1,5,6]",
        "output": "1440"
      },
      {
        "input": "nums = [2,-5,3,1,-4,2]",
        "output": "240"
      },
      {
        "input": "nums = [5,3,-1,2,0,-6,-2,0,5,3,-1,2,0,-6,-2]",
        "output": "15"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [-2,-3,0,-2,-40,0,-10]",
        "output": "80"
      },
      {
        "input": "nums = [0,2,-3,4,-1,2,1,-5,4]",
        "output": "160"
      },
      {
        "input": "nums = [10,-2,-3,5,-10,0,9,6]",
        "output": "300"
      },
      {
        "input": "nums = [100,-100,50,-50,25,-25,10,-10,5,-5]",
        "output": "7812500000000"
      },
      {
        "input": "nums = [-2,0,-1,0,1,2,-3]",
        "output": "2"
      },
      {
        "input": "nums = [5,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
        "output": "1814400"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5]",
        "output": "2880"
      },
      {
        "input": "nums = [-1,-2,0,1,-3,4,-5,6,-7,8,-9,10]",
        "output": "1814400"
      },
      {
        "input": "nums = [1, 0, -1, 0, 1, 0, -1, 0, 1]",
        "output": "1"
      },
      {
        "input": "nums = [10,-10,10,-10,10,-10,10]",
        "output": "100000"
      },
      {
        "input": "nums = [-10,0,0,0,0,0,0,0,0,-10]",
        "output": "0"
      },
      {
        "input": "nums = [-10, 0, 10, 0, -10, 0, 10, 0, -10, 0]",
        "output": "10"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "3628800"
      },
      {
        "input": "nums = [1,0,1,0,1,0,1,0,1,0]",
        "output": "1"
      },
      {
        "input": "nums = [-3,-1,0,2,4,-2,0,-1]",
        "output": "8"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "3628800"
      },
      {
        "input": "nums = [3,-1,4,1,5,-9,2,6,5,3,5]",
        "output": "486000"
      },
      {
        "input": "nums = [5,3,-2,5,-1,5,-1,0,5]",
        "output": "750"
      },
      {
        "input": "nums = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]",
        "output": "1"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]",
        "output": "1814400"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]",
        "output": "120"
      },
      {
        "input": "nums = [-10,0,5,2,-3,-2,4,5,0,-1,2]",
        "output": "1200"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "0"
      },
      {
        "input": "nums = [1,-2,3,-4,5,-6,7,-8,9,-10]",
        "output": "1814400"
      },
      {
        "input": "nums = [3,-1,4,1,5,-9,2,6,-5,3,5]",
        "output": "162000"
      },
      {
        "input": "nums = [0,2,-3,4,-1,0,5,-2]",
        "output": "24"
      },
      {
        "input": "nums = [2, -5, -2, -4, 3]",
        "output": "24"
      },
      {
        "input": "nums = [-10, 9, -10, 10, -1, -100]",
        "output": "900000"
      },
      {
        "input": "nums = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]",
        "output": "3628800"
      },
      {
        "input": "nums = [3,-1,4,-1,5,-9,2,6,-5,3,5]",
        "output": "486000"
      },
      {
        "input": "nums = [1,0,-1,0,-2,0,1,0,-1,0,-2,0]",
        "output": "1"
      },
      {
        "input": "nums = [-1,-1,-1,-1,-1,-1,-1,-1]",
        "output": "1"
      },
      {
        "input": "nums = [100,-100,100,-100,100,-100,100,-100,100,-100]",
        "output": "1000000000000000000"
      },
      {
        "input": "nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]",
        "output": "3628800"
      },
      {
        "input": "nums = [10, -10, 0, 10, -10, 0, 10]",
        "output": "10"
      },
      {
        "input": "nums = [1,-2,3,-4,5,-6,7,-8,9]",
        "output": "362880"
      },
      {
        "input": "nums = [0,2,-3,-4,5,0,1]",
        "output": "120"
      },
      {
        "input": "nums = [1,-1,1,-1,1,-1,1,-1,1,-1]",
        "output": "1"
      },
      {
        "input": "nums = [-10,-10,-10,-10,-10]",
        "output": "10000"
      },
      {
        "input": "nums = [-2,3,-4,5,-6,7,-8,9,-10,11]",
        "output": "19958400"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "nums = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1]",
        "output": "3628800"
      },
      {
        "input": "nums = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,-4,-5,-6,7,8,9,10,-11]",
        "output": "39916800"
      },
      {
        "input": "nums = [10,-10,10,-10,10]",
        "output": "100000"
      },
      {
        "input": "nums = [5, -3, 1, -2, 0, 4, -2, 3, -1]",
        "output": "30"
      },
      {
        "input": "nums = [10,-10,10,-10,10,-10]",
        "output": "100000"
      },
      {
        "input": "nums = [-10, -20, 0, -5, -7, 0, 2, -1]",
        "output": "200"
      },
      {
        "input": "nums = [1,2,3,0,-1,-2,-3,-4,5,6]",
        "output": "720"
      },
      {
        "input": "nums = [1,2,3,0,-1,-2,-3,0,4,5,6,0,-7,-8,-9,0,10,11,12]",
        "output": "1320"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5, -6, 7, -8]",
        "output": "40320"
      },
      {
        "input": "nums = [10,-10,10,-10,10,-10,10,-10]",
        "output": "100000000"
      },
      {
        "input": "nums = [2,0,1,0,2,3,-2,4,-1,5]",
        "output": "240"
      }
    ]
  },
  {
    "id": 439,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Recursion",
      "String"
    ],
    "problemDescription": "Given a string expression representing arbitrarily nested ternary expressions, evaluate the expression, and return the result of it.\nYou can always assume that the given expression is valid and only contains digits, '?', ':', 'T', and 'F' where 'T' is true and 'F' is false. All the numbers in the expression are one-digit numbers (i.e., in the range [0, 9]).\nThe conditional expressions group right-to-left (as usual in most languages), and the result of the expression will always evaluate to either a digit, 'T' or 'F'.\n\u00a0\nExample 1:\n\nInput: expression = \"T?2:3\"\nOutput: \"2\"\nExplanation: If true, then result is 2; otherwise result is 3.\n\nExample 2:\n\nInput: expression = \"F?1:T?4:5\"\nOutput: \"4\"\nExplanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n\"(F ? 1 : (T ? 4 : 5))\" --> \"(F ? 1 : 4)\" --> \"4\"\nor \"(F ? 1 : (T ? 4 : 5))\" --> \"(T ? 4 : 5)\" --> \"4\"\n\nExample 3:\n\nInput: expression = \"T?T?F:5:3\"\nOutput: \"F\"\nExplanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n\"(T ? (T ? F : 5) : 3)\" --> \"(T ? F : 3)\" --> \"F\"\n\"(T ? (T ? F : 5) : 3)\" --> \"(T ? F : 5)\" --> \"F\"\n\n\u00a0\nConstraints:\n\n5 <= expression.length <= 104\nexpression consists of digits, 'T', 'F', '?', and ':'.\nIt is guaranteed that expression is a valid ternary expression and that each number is a one-digit number.\n\n",
    "starterCode": "class Solution:\n    def parseTernary(self, expression: str) -> str:\n        ",
    "testCases": [
      {
        "input": "expression = \"T?T?F:5:3\"",
        "output": "F"
      },
      {
        "input": "expression = \"T?F?T?F?T?F?T?F?1:2:3:4:5:6:7:8:9\"",
        "output": "8"
      },
      {
        "input": "expression = \"F?F?F:2:3?4:5\"",
        "output": "5"
      },
      {
        "input": "expression = \"F?T?F?T?F?9:8:7:6:5\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"F?T?2:3:F?1:0\"",
        "output": "0"
      },
      {
        "input": "expression = \"T?T?T?T?T?9:8:7:6:5:4\"",
        "output": "9"
      },
      {
        "input": "expression = \"F?F?F:5:T\"",
        "output": "T"
      },
      {
        "input": "expression = \"T?4:5?6:7\"",
        "output": "4"
      },
      {
        "input": "expression = \"T?T?T?T?F?1:2:3:4\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"F?F?F?F?F?0:1:2:3:4:5\"",
        "output": "5"
      },
      {
        "input": "expression = \"F?9:T?8:T?7:6\"",
        "output": "8"
      },
      {
        "input": "expression = \"T?T?T?T?T?T?T?T?T?T:T:T:T:T:T:T:T:T:T:T\"",
        "output": "T"
      },
      {
        "input": "expression = \"F?F?F:F?F:F\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"T?F?T?F?T?1:2:3:4:5\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?T?T?T?T?1:2:3:4:5:6\"",
        "output": "1"
      },
      {
        "input": "expression = \"F?F?F?F?F?F?F?F?F?9:8:7:6:5:4:3:2:1:0\"",
        "output": "0"
      },
      {
        "input": "expression = \"F?F?F?F?T?9:8:7:6\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"F?F?T?F?T?9:8:7:6\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"F?F?5:9:T?F:9\"",
        "output": "F"
      },
      {
        "input": "expression = \"T?1:2?3:4\"",
        "output": "1"
      },
      {
        "input": "expression = \"T?T?T?T?T?T?T?T?1:2:3:4:5:6:7:8:9\"",
        "output": "1"
      },
      {
        "input": "expression = \"F?T?F?T?F?T?F?T?9:8:7:6:5:4:3:2:1\"",
        "output": "1"
      },
      {
        "input": "expression = \"F?F?F?F?F?F?F?F?9:8:7:6:5:4:3:2:1\"",
        "output": "1"
      },
      {
        "input": "expression = \"T?T?T?T?T?T?T?T?T?1:0:0:0:0:0:0:0:0:0\"",
        "output": "1"
      },
      {
        "input": "expression = \"F?T?F?T?F?T?F?T?F?T?F?9:8:7:6:5:4:3:2:1:0\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?F?F:T?F:T\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?F?T?9:8:7:6?5:4\"",
        "output": "7"
      },
      {
        "input": "expression = \"T?T?F:F?T?F:T?F?T:F\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?F?T?F?T?F?T?F?T?F?T?0:1:2:3:4:5:6:7:8:9\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"F?F?F?F?F?9:8:7:6:5:4\"",
        "output": "4"
      },
      {
        "input": "expression = \"T?T?F?T?F?1:2:3:4\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?2:3\"",
        "output": "2"
      },
      {
        "input": "expression = \"F?F?F?F:1:2:3?4:5?6:7\"",
        "output": "7"
      },
      {
        "input": "expression = \"F?1:T?4:5\"",
        "output": "4"
      },
      {
        "input": "expression = \"F?F?T:T?F?T:F?T?F:T\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?9:8:7:6:5:4:3:2:1:0\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?T?F?T?F?T?F?T?F?T?F?T?F?T?F?1:2:3:4:5:6:7:8:9\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?9:8:7:6:5:4:3:2:1:0\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?F?T?T?F?T?T?F?T?T?F?T?T?F?T?T?F?T?T?F?T?T?F?T?T?F?T?T?F?T?T?F?T?T?F?T?T?F?1:2\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?1:2\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?1:2\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"F?F?F?F?F?F?F?F?F?F?9:8:7:6:5:4:3:2:1:0\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"T?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?T?T?T?1:2:3:4:5:6:7:8:9\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?9:8:7:6:5:4:3:2:1:0\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?1:2\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?1:2\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?F?T?T?F?T?T?F?T?T?F?T?T?F?T?T?F?T?T?F?T?1:2:3:4:5:6:7:8:9\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?T?T?T?T?T?T?T?T?T?1:2:3:4:5:6:7:8:9:0\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?9:8:7:6:5:4:3:2:1:0\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?1:2\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?T?F?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?1:2\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?1:2:3:4:5:6:7:8:9\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?T?T?T?T?T?T?T?T?0:1:2:3:4:5:6:7:8:9\"",
        "output": "0"
      },
      {
        "input": "expression = \"F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?9:8:7:6:5:4:3:2:1:0\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?T?F?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?9:8:7:6:5:4:3:2:1:0\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?1:2\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?T?F?1:2\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "expression = \"T?F?F?1:2:T?3:4:F?5:6\"",
        "output": "3"
      },
      {
        "input": "expression = \"T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?T?1:2\"",
        "output": "Error: pop from empty list"
      }
    ]
  },
  {
    "id": 1485,
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Hash Table",
      "Binary Tree"
    ],
    "problemDescription": "A binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null.\nReturn a deep copy of the tree.\nThe tree is represented in the same input/output way as normal binary trees where each node is represented as a pair of [val, random_index] where:\n\nval: an integer representing Node.val\nrandom_index: the index of the node (in the input) where the random pointer points to, or null if it does not point to any node.\n\nYou will be given the tree in class Node and you should return the cloned tree in class NodeCopy. NodeCopy class is just a clone of Node class with the same attributes and constructors.\n\u00a0\nExample 1:\n\n\nInput: root = [[1,null],null,[4,3],[7,0]]\nOutput: [[1,null],null,[4,3],[7,0]]\nExplanation: The original binary tree is [1,null,4,7].\nThe random pointer of node one is null, so it is represented as [1, null].\nThe random pointer of node 4 is node 7, so it is represented as [4, 3] where 3 is the index of node 7 in the array representing the tree.\nThe random pointer of node 7 is node 1, so it is represented as [7, 0] where 0 is the index of node 1 in the array representing the tree.\n\nExample 2:\n\n\nInput: root = [[1,4],null,[1,0],null,[1,5],[1,5]]\nOutput: [[1,4],null,[1,0],null,[1,5],[1,5]]\nExplanation: The random pointer of a node can be the node itself.\n\nExample 3:\n\n\nInput: root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]\nOutput: [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 1000].\n1 <= Node.val <= 106\n\n",
    "starterCode": "# Definition for Node.\n# class Node:\n#     def __init__(self, val=0, left=None, right=None, random=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n#         self.random = random\n\nclass Solution:\n    def copyRandomBinaryTree(self, root: 'Optional[Node]') -> 'Optional[NodeCopy]':\n        ",
    "testCases": [
      {
        "input": "root",
        "output": "Error: Solution.copyRandomBinaryTree() missing 1 required positional argument: 'root'"
      },
      {
        "input": "root = [[1,3],[2,5],[3,2],[4,8],[5,7],[6,null],[7,5],[8,null],[9,1],[10,6]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,1],[2,2],[3,3]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,null,[2,null,[3,null,[4,null,[5,null,null]]]]],[3,null,null],[4,null,[5,null,null]]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,2],[2,3],[3,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "{\"root\": [[5,null,null]]}",
        "output": "Error: Solution.copyRandomBinaryTree() missing 1 required positional argument: 'root'"
      },
      {
        "input": "{\"root\": [[1,null],null,[4,3],[7,0]]}",
        "output": "Error: Solution.copyRandomBinaryTree() missing 1 required positional argument: 'root'"
      },
      {
        "input": "{\"root\": [[2,1],[3,null],[1,null]]}",
        "output": "Error: Solution.copyRandomBinaryTree() missing 1 required positional argument: 'root'"
      },
      {
        "input": "root = [[5,null],[6,null],[7,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,2],[2,3],[3,4],[4,5],[5,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[2,1],[3,null],null,[4,null],null,null,[5,2]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "{\"root\": [[1,4],null,[1,0],null,[1,5],[1,5]]}",
        "output": "Error: Solution.copyRandomBinaryTree() missing 1 required positional argument: 'root'"
      },
      {
        "input": "root = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[5,null],null,[6,2],[7,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,null,null,null],[2,null,null,null],[3,null,null,null],[4,null,null,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,null],null,[4,3],[7,0]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[5,null],[3,1],null,[2,0],null,[1,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[8,null],[9,0]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[6,3],[7,4],[8,5],[9,6],[10,7],[11,8],[12,9],[13,10],[14,11],[15,12],[16,13],[17,14],[18,15],[19,16],[20,17]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[3,1],[3,0],[3,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[5,null,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[8,2],[9,3],[10,1],[11,null],[12,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,1],[1,1],[1,1]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,null],[2,null],[3,null],[4,null],[5,null],[6,null],[7,null],[8,null],[9,null],[10,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,0]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[8,1],[9,null],[10,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[5,null,null,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "{\"root\": [[3,2],[1,2],[4,null],[2,null]]}",
        "output": "Error: Solution.copyRandomBinaryTree() missing 1 required positional argument: 'root'"
      },
      {
        "input": "root = [[2,2],[2,2],[2,null],[2,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[5,null,null,2,3,null,1]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,null,[2,null,[3,null,[4,null,null]]]],null,null]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[8,null],null,[9,0],null,[10,null],null,[11,2]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[10,null],[6,5],[12,null],[8,3],[11,null],[3,0],null,[7,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,1]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,1],[2,2],[3,0],[4,null],[5,4],[6,2],[7,5]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[8,1],[3,null],[10,null],null,[1,null],null,[14,7],null,[13,null],null,[7,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,0],[2,0],[3,0]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[3,null,0,4,0,null,2,null,null,1,null,5]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,4],null,[1,0],null,[1,5],[1,5]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "{\"root\": []}",
        "output": "Error: Solution.copyRandomBinaryTree() missing 1 required positional argument: 'root'"
      },
      {
        "input": "{\"root\": [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]}",
        "output": "Error: Solution.copyRandomBinaryTree() missing 1 required positional argument: 'root'"
      },
      {
        "input": "root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[7,4],null,[3,2],[6,0]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = []",
        "output": "None"
      },
      {
        "input": "root = [[1,null,null,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[5,null],null,[3,null],null,[9,2]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[2,2],[3,4],[4,null],[5,null],[6,2]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[5,null],null,[6,null],null,[7,0]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[5,3],[3,2],[4,null],[2,4],[3,0],[4,null],[5,null]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,null,[2,null,[3,null,[4,null,[5,0]]]]]",
        "output": "Error: Solution.copyRandomBinaryTree() missing 1 required positional argument: 'root'"
      },
      {
        "input": "root = [[5,null],null,[3,null],null,[2,null],null,[4,2]]",
        "output": "Error: unhashable type: 'list'"
      },
      {
        "input": "root = [[1,0],[2,2],[3,null],[4,0]]",
        "output": "Error: unhashable type: 'list'"
      }
    ]
  },
  {
    "id": 2400,
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "problemDescription": "You are given two positive integers startPos and endPos. Initially, you are standing at position startPos on an infinite number line. With one step, you can move either one position to the left, or one position to the right.\nGiven a positive integer k, return the number of different ways to reach the position endPos starting from startPos, such that you perform exactly k steps. Since the answer may be very large, return it modulo 109 + 7.\nTwo ways are considered different if the order of the steps made is not exactly the same.\nNote that the number line includes negative integers.\n\u00a0\nExample 1:\n\nInput: startPos = 1, endPos = 2, k = 3\nOutput: 3\nExplanation: We can reach position 2 from 1 in exactly 3 steps in three ways:\n- 1 -> 2 -> 3 -> 2.\n- 1 -> 2 -> 1 -> 2.\n- 1 -> 0 -> 1 -> 2.\nIt can be proven that no other way is possible, so we return 3.\nExample 2:\n\nInput: startPos = 2, endPos = 5, k = 10\nOutput: 0\nExplanation: It is impossible to reach position 5 from position 2 in exactly 10 steps.\n\n\u00a0\nConstraints:\n\n1 <= startPos, endPos, k <= 1000\n\n",
    "starterCode": "class Solution:\n    def numberOfWays(self, startPos: int, endPos: int, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "startPos = 1, endPos = 2, k = 3",
        "output": "3"
      },
      {
        "input": "startPos = 5, endPos = 5, k = 0",
        "output": "1"
      },
      {
        "input": "startPos = 0, endPos = 0, k = 2",
        "output": "2"
      },
      {
        "input": "startPos = 10, endPos = 1, k = 15",
        "output": "455"
      },
      {
        "input": "startPos = 5, endPos = 5, k = 10",
        "output": "252"
      },
      {
        "input": "startPos = 10, endPos = 1, k = 9",
        "output": "1"
      },
      {
        "input": "startPos = 0, endPos = 0, k = 0",
        "output": "1"
      },
      {
        "input": "startPos = 2, endPos = 5, k = 10",
        "output": "0"
      },
      {
        "input": "startPos = 1, endPos = 2, k = 100",
        "output": "0"
      },
      {
        "input": "startPos = 1000, endPos = 995, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 100, endPos = 50, k = 150",
        "output": "713790273"
      },
      {
        "input": "startPos = 750, endPos = 250, k = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 450, k = 100",
        "output": "244856590"
      },
      {
        "input": "startPos = 0, endPos = 500, k = 501",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 300, endPos = 700, k = 999",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 0, endPos = -500, k = 501",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = -5, endPos = -10, k = 7",
        "output": "7"
      },
      {
        "input": "startPos = 0, endPos = 1000, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 501, k = 1001",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 0, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 100, endPos = 100, k = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 999, endPos = 1, k = 1998",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 1, endPos = 1000, k = 999",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = -500, endPos = 500, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 1, endPos = 1000, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 2, endPos = 1, k = 4",
        "output": "0"
      },
      {
        "input": "startPos = 10, endPos = -10, k = 20",
        "output": "1"
      },
      {
        "input": "startPos = 500, endPos = 400, k = 100",
        "output": "1"
      },
      {
        "input": "startPos = -50, endPos = 50, k = 100",
        "output": "1"
      },
      {
        "input": "startPos = 5, endPos = 5, k = 1",
        "output": "0"
      },
      {
        "input": "startPos = 1000, endPos = 990, k = 20",
        "output": "15504"
      },
      {
        "input": "startPos = -1, endPos = 1, k = 2",
        "output": "1"
      },
      {
        "input": "startPos = 100, endPos = 50, k = 200",
        "output": "489348363"
      },
      {
        "input": "startPos = 1, endPos = 1, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 0, endPos = 1000, k = 2000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 999, endPos = 1000, k = 999",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = -1, endPos = -500, k = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = -10, endPos = 10, k = 20",
        "output": "1"
      },
      {
        "input": "startPos = 500, endPos = 500, k = 501",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 1000, endPos = 500, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 499, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 501, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 500, k = 999",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 0, endPos = 1, k = 3",
        "output": "3"
      },
      {
        "input": "startPos = 1, endPos = 2, k = 1001",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 999, endPos = 1, k = 999",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 1, endPos = -1, k = 2",
        "output": "1"
      },
      {
        "input": "startPos = 500, endPos = 500, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 1000, endPos = 0, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 1000, endPos = 1, k = 999",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 5, endPos = 15, k = 12",
        "output": "12"
      },
      {
        "input": "startPos = -100, endPos = -200, k = 300",
        "output": "236868103"
      },
      {
        "input": "startPos = 1, endPos = 2, k = 5",
        "output": "10"
      },
      {
        "input": "startPos = -500, endPos = -1, k = 501",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 400, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 0, endPos = -500, k = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 1, endPos = 999, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 600, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 100, endPos = 100, k = 200",
        "output": "407336795"
      },
      {
        "input": "startPos = -1000, endPos = -1000, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = -100, endPos = 100, k = 200",
        "output": "1"
      },
      {
        "input": "startPos = 500, endPos = 400, k = 199",
        "output": "0"
      },
      {
        "input": "startPos = 3, endPos = 3, k = 6",
        "output": "20"
      },
      {
        "input": "startPos = 500, endPos = 499, k = 1001",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 250, endPos = 250, k = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 200, endPos = 300, k = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 1000, endPos = 1, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 100, endPos = -100, k = 200",
        "output": "1"
      },
      {
        "input": "startPos = 0, endPos = 500, k = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 500, k = 1001",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 100, endPos = 100, k = 1",
        "output": "0"
      },
      {
        "input": "startPos = -5, endPos = 5, k = 10",
        "output": "1"
      },
      {
        "input": "startPos = 500, endPos = 505, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 0, endPos = -10, k = 20",
        "output": "15504"
      },
      {
        "input": "startPos = 500, endPos = 600, k = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 499, k = 999",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 750, endPos = 250, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 300, endPos = 200, k = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 1000, k = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 500, k = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 999, endPos = 1, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 0, endPos = 500, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 50, endPos = 50, k = 50",
        "output": "605552882"
      },
      {
        "input": "startPos = 1000, endPos = 1000, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 1, endPos = 0, k = 3",
        "output": "3"
      },
      {
        "input": "startPos = 100, endPos = 200, k = 150",
        "output": "297103639"
      },
      {
        "input": "startPos = 1000, endPos = 1000, k = 999",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 999, endPos = 1000, k = 1999",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 500, endPos = 495, k = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "startPos = 1, endPos = -1, k = 4",
        "output": "4"
      },
      {
        "input": "startPos = 3, endPos = -2, k = 10",
        "output": "0"
      }
    ]
  },
  {
    "id": 1329,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Matrix",
      "Sorting"
    ],
    "problemDescription": "A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].\nGiven an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.\n\u00a0\nExample 1:\n\n\nInput: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\nOutput: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]\n\nExample 2:\n\nInput: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]\nOutput: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]\n\n\u00a0\nConstraints:\n\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 100\n1 <= mat[i][j] <= 100\n\n",
    "starterCode": "class Solution:\n    def diagonalSort(self, mat: List[List[int]]) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "mat = [[1]]",
        "output": "[[1]]"
      },
      {
        "input": "mat = [[37,47,1,44],[20,3,2,90],[96,50,4,24]]",
        "output": "[[3, 2, 1, 44], [20, 4, 24, 90], [96, 50, 37, 47]]"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
        "output": "[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]"
      },
      {
        "input": "mat = [[1,1,1,1],[1,1,1,1],[1,1,1,1]]",
        "output": "[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]"
      },
      {
        "input": "mat = [[30,29,28,27,26,25],[24,23,22,21,20,19],[18,17,16,15,14,13],[12,11,10,9,8,7],[6,5,4,3,2,1]]",
        "output": "[[2, 1, 7, 13, 19, 25], [3, 9, 8, 14, 20, 26], [4, 10, 16, 15, 21, 27], [5, 11, 17, 23, 22, 28], [6, 12, 18, 24, 30, 29]]"
      },
      {
        "input": "mat = [[30,29,19,53,22],[47,27,45,54,30],[28,42,23,45,52],[40,11,52,33,46],[15,50,46,32,48]]",
        "output": "[[23, 29, 19, 30, 22], [32, 27, 45, 52, 53], [11, 42, 30, 45, 54], [40, 28, 47, 33, 46], [15, 50, 46, 52, 48]]"
      },
      {
        "input": "mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]",
        "output": "[[5, 17, 4, 1, 52, 7], [11, 11, 25, 45, 8, 69], [14, 23, 25, 44, 58, 15], [22, 27, 31, 36, 50, 66], [84, 28, 75, 33, 55, 68]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8]]",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8]]"
      },
      {
        "input": "mat = [[9,8,7],[6,5,4],[3,2,1]]",
        "output": "[[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
      },
      {
        "input": "mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]",
        "output": "[[1, 1, 1, 1], [1, 2, 2, 2], [1, 2, 3, 3]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
      },
      {
        "input": "mat = [[10,9,8,7],[6,5,4,3],[2,1,0,-1]]",
        "output": "[[0, -1, 3, 7], [1, 5, 4, 8], [2, 6, 10, 9]]"
      },
      {
        "input": "mat = [[100,99,98],[97,96,95],[94,93,92]]",
        "output": "[[92, 95, 98], [93, 96, 99], [94, 97, 100]]"
      },
      {
        "input": "mat = [[10,9,8,7],[6,5,4,3],[2,1,1,1]]",
        "output": "[[1, 1, 3, 7], [1, 5, 4, 8], [2, 6, 10, 9]]"
      },
      {
        "input": "mat = [[37,71],[58,62]]",
        "output": "[[37, 71], [58, 62]]"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
        "output": "[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]"
      },
      {
        "input": "mat = [[1,10,3,7,5],[6,2,8,4,1],[11,13,12,15,14],[17,16,19,18,20]]",
        "output": "[[1, 8, 3, 1, 5], [6, 2, 10, 4, 7], [11, 13, 12, 15, 14], [17, 16, 19, 18, 20]]"
      },
      {
        "input": "mat = [[100,99,98,97,96,95,94,93,92,91],[90,89,88,87,86,85,84,83,82,81],[80,79,78,77,76,75,74,73,72,71],[70,69,68,67,66,65,64,63,62,61],[60,59,58,57,56,55,54,53,52,51],[50,49,48,47,46,45,44,43,42,41],[40,39,38,37,36,35,34,33,32,31],[30,29,28,27,26,25,24,23,22,21],[20,19,18,17,16,15,14,13,12,11],[10,9,8,7,6,5,4,3,2,1]]",
        "output": "[[1, 11, 21, 31, 41, 51, 61, 71, 81, 91], [2, 12, 22, 32, 42, 52, 62, 72, 82, 92], [3, 13, 23, 33, 43, 53, 63, 73, 83, 93], [4, 14, 24, 34, 44, 54, 64, 74, 84, 94], [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], [6, 16, 26, 36, 46, 56, 66, 76, 86, 96], [7, 17, 27, 37, 47, 57, 67, 77, 87, 97], [8, 18, 28, 38, 48, 58, 68, 78, 88, 98], [9, 19, 29, 39, 49, 59, 69, 79, 89, 99], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]"
      },
      {
        "input": "mat = [[99,98,97,96,95],[94,93,92,91,90],[89,88,87,86,85],[84,83,82,81,80],[79,78,77,76,75]]",
        "output": "[[75, 80, 85, 90, 95], [76, 81, 86, 91, 96], [77, 82, 87, 92, 97], [78, 83, 88, 93, 98], [79, 84, 89, 94, 99]]"
      },
      {
        "input": "mat = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,11,13,15,2,4,6,8,10,12,14],[2,4,6,8,10,12,14,1,3,5,7,9,11,13,15],[3,5,7,9,11,13,15,2,4,6,8,10,12,14,1],[4,6,8,10,12,14,1,2,3,5,7,9,11,13,15],[5,7,9,11,13,15,2,3,4,6,8,10,12,14,1],[6,8,10,12,14,1,2,3,4,5,7,9,11,13,15]]",
        "output": "[[1, 1, 2, 2, 1, 3, 2, 4, 1, 5, 1, 3, 2, 1, 15], [2, 2, 2, 3, 3, 4, 6, 5, 7, 6, 8, 4, 12, 13, 14], [1, 3, 3, 3, 4, 4, 5, 6, 7, 7, 6, 10, 10, 12, 14], [2, 1, 6, 5, 4, 5, 6, 5, 7, 8, 8, 9, 11, 11, 15], [3, 5, 4, 9, 8, 7, 9, 7, 8, 9, 8, 10, 9, 14, 13], [4, 6, 8, 7, 12, 11, 10, 12, 11, 9, 10, 9, 11, 12, 15], [5, 7, 9, 11, 10, 15, 14, 13, 12, 11, 10, 11, 12, 14, 13], [6, 8, 10, 12, 14, 13, 15, 14, 13, 15, 14, 13, 15, 13, 15]]"
      },
      {
        "input": "mat = [[1,9,3,7,5],[6,2,8,4,10],[11,13,12,15,14],[17,16,19,18,20]]",
        "output": "[[1, 8, 3, 7, 5], [6, 2, 9, 4, 10], [11, 13, 12, 15, 14], [17, 16, 19, 18, 20]]"
      },
      {
        "input": "mat = [[15, 25, 35, 45, 55], [14, 24, 34, 44, 54], [13, 23, 33, 43, 53], [12, 22, 32, 42, 52], [11, 21, 31, 41, 51]]",
        "output": "[[15, 25, 35, 45, 55], [14, 24, 34, 44, 54], [13, 23, 33, 43, 53], [12, 22, 32, 42, 52], [11, 21, 31, 41, 51]]"
      },
      {
        "input": "mat = [[8, 5, 2, 7], [9, 6, 3, 4], [1, 0, 5, 8], [2, 1, 6, 3]]",
        "output": "[[3, 3, 2, 7], [0, 5, 5, 4], [1, 6, 6, 8], [2, 1, 9, 8]]"
      },
      {
        "input": "mat = [[10,9,8,7,6,5,4,3,2,1],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40]]",
        "output": "[[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40]]"
      },
      {
        "input": "mat = [[99,98,97,96,95,94,93,92,91,90],[89,88,87,86,85,84,83,82,81,80],[79,78,77,76,75,74,73,72,71,70],[69,68,67,66,65,64,63,62,61,60],[59,58,57,56,55,54,53,52,51,50],[49,48,47,46,45,44,43,42,41,40],[39,38,37,36,35,34,33,32,31,30],[29,28,27,26,25,24,23,22,21,20],[19,18,17,16,15,14,13,12,11,10],[9,8,7,6,5,4,3,2,1,0]]",
        "output": "[[0, 10, 20, 30, 40, 50, 60, 70, 80, 90], [1, 11, 21, 31, 41, 51, 61, 71, 81, 91], [2, 12, 22, 32, 42, 52, 62, 72, 82, 92], [3, 13, 23, 33, 43, 53, 63, 73, 83, 93], [4, 14, 24, 34, 44, 54, 64, 74, 84, 94], [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], [6, 16, 26, 36, 46, 56, 66, 76, 86, 96], [7, 17, 27, 37, 47, 57, 67, 77, 87, 97], [8, 18, 28, 38, 48, 58, 68, 78, 88, 98], [9, 19, 29, 39, 49, 59, 69, 79, 89, 99]]"
      },
      {
        "input": "mat = [[50, 30, 10, 90], [80, 60, 40, 20], [70, 50, 30, 10], [60, 40, 20, 80], [50, 30, 10, 70], [40, 20, 80, 60], [30, 10, 70, 50]]",
        "output": "[[30, 10, 10, 90], [20, 50, 30, 20], [10, 50, 60, 40], [30, 40, 70, 80], [20, 50, 60, 80], [10, 50, 60, 70], [30, 40, 70, 80]]"
      },
      {
        "input": "mat = [[9, 7, 5, 3, 1], [10, 8, 6, 4, 2], [11, 9, 7, 5, 3], [12, 10, 8, 6, 4], [13, 11, 9, 7, 5]]",
        "output": "[[5, 4, 3, 2, 1], [7, 6, 5, 4, 3], [9, 8, 7, 6, 5], [11, 10, 9, 8, 7], [13, 12, 11, 10, 9]]"
      },
      {
        "input": "mat = [[1, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]",
        "output": "[[1, 4, 5, 6, 7, 10], [2, 3, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
      },
      {
        "input": "mat = [[1, 3, 5, 7, 9], [10, 8, 6, 4, 2], [11, 13, 15, 17, 19], [20, 18, 16, 14, 12]]",
        "output": "[[1, 3, 4, 2, 9], [10, 8, 6, 5, 7], [11, 13, 14, 12, 19], [20, 18, 16, 15, 17]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60]]",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60]]"
      },
      {
        "input": "mat = [[100,99,98,97,96,95,94,93,92,91],[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]]",
        "output": "[[2, 3, 4, 5, 6, 7, 8, 9, 10, 91], [1, 13, 14, 15, 16, 17, 18, 19, 20, 92], [11, 12, 24, 25, 26, 27, 28, 29, 30, 93], [21, 22, 23, 100, 99, 98, 97, 96, 95, 94]]"
      },
      {
        "input": "mat = [[50,40,30,20,10],[55,45,35,25,15],[60,50,40,30,20],[65,55,45,35,25],[70,60,50,40,30]]",
        "output": "[[30, 25, 20, 15, 10], [40, 35, 30, 25, 20], [50, 45, 40, 35, 30], [60, 55, 50, 45, 40], [70, 65, 60, 55, 50]]"
      },
      {
        "input": "mat = [[1,9,2,8,3,7,4,6,5],[2,8,3,7,4,6,5,9,1],[3,7,4,6,5,9,1,2,8],[4,6,5,9,1,2,8,3,7],[5,9,1,2,8,3,7,4,6]]",
        "output": "[[1, 1, 2, 4, 1, 2, 4, 1, 5], [2, 4, 3, 2, 4, 3, 5, 8, 6], [1, 2, 8, 3, 5, 8, 3, 7, 9], [4, 3, 5, 8, 6, 7, 8, 6, 7], [5, 9, 6, 7, 9, 9, 7, 9, 6]]"
      },
      {
        "input": "mat = [[9,8,7,6,5,4,3,2,1],[10,9,8,7,6,5,4,3,2],[11,10,9,8,7,6,5,4,3],[12,11,10,9,8,7,6,5,4],[13,12,11,10,9,8,7,6,5]]",
        "output": "[[9, 8, 7, 6, 5, 4, 3, 2, 1], [10, 9, 8, 7, 6, 5, 4, 3, 2], [11, 10, 9, 8, 7, 6, 5, 4, 3], [12, 11, 10, 9, 8, 7, 6, 5, 4], [13, 12, 11, 10, 9, 8, 7, 6, 5]]"
      },
      {
        "input": "mat = [[5,4,3,2,1],[9,8,7,6,5],[13,12,11,10,9],[17,16,15,14,13],[21,20,19,18,17]]",
        "output": "[[5, 4, 3, 2, 1], [9, 8, 7, 6, 5], [13, 12, 11, 10, 9], [17, 16, 15, 14, 13], [21, 20, 19, 18, 17]]"
      },
      {
        "input": "mat = [[10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10]]",
        "output": "[[10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10]]"
      },
      {
        "input": "mat = [[25,24,23,22,21,20],[19,18,17,16,15,14],[13,12,11,10,9,8],[7,6,5,4,3,2],[1,2,3,4,5,6]]",
        "output": "[[4, 3, 2, 8, 14, 20], [4, 5, 6, 9, 15, 21], [3, 5, 11, 10, 16, 22], [2, 6, 12, 18, 17, 23], [1, 7, 13, 19, 25, 24]]"
      },
      {
        "input": "mat = [[50,51,52,53,54,55,56,57,58,59,60],[49,48,47,46,45,44,43,42,41,40,39],[38,37,36,35,34,33,32,31,30,29,28],[27,26,25,24,23,22,21,20,19,18,17],[16,15,14,13,12,11,10,9,8,7,6],[5,4,3,2,1,60,59,58,57,56,55]]",
        "output": "[[12, 11, 10, 9, 8, 7, 6, 17, 28, 39, 60], [1, 24, 23, 22, 21, 20, 19, 18, 29, 40, 59], [2, 13, 36, 35, 34, 33, 32, 31, 30, 41, 58], [3, 14, 25, 48, 47, 46, 45, 44, 43, 42, 57], [4, 15, 26, 37, 50, 51, 52, 53, 54, 55, 56], [5, 16, 27, 38, 49, 60, 59, 58, 57, 56, 55]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8],[9,10]]",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]"
      },
      {
        "input": "mat = [[1,3,5,7,9],[2,4,6,8,10],[11,13,15,17,19],[12,14,16,18,20]]",
        "output": "[[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [11, 13, 15, 17, 19], [12, 14, 16, 18, 20]]"
      },
      {
        "input": "mat = [[9, 1, 4, 7, 3, 8], [6, 5, 2, 9, 1, 4], [3, 8, 5, 2, 9, 1], [8, 3, 9, 1, 4, 7], [1, 4, 7, 3, 8, 6]]",
        "output": "[[1, 1, 4, 1, 3, 8], [3, 5, 2, 7, 1, 4], [3, 6, 5, 2, 9, 7], [4, 3, 8, 8, 4, 9], [1, 8, 7, 9, 9, 6]]"
      },
      {
        "input": "mat = [[10,9,8,7,6,5,4],[3,2,1,10,9,8,7],[4,3,2,1,10,9,8],[5,4,3,2,1,10,9],[6,5,4,3,2,1,10]]",
        "output": "[[2, 1, 8, 7, 6, 5, 4], [3, 2, 1, 10, 9, 8, 7], [4, 3, 2, 1, 10, 9, 8], [5, 4, 3, 2, 1, 10, 9], [6, 5, 4, 3, 10, 9, 10]]"
      },
      {
        "input": "mat = [[50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],[67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],[84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]]",
        "output": "[[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 64, 65, 66], [3, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 63, 82, 83], [2, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 62, 81, 100], [1, 20, 39, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 80, 99], [18, 19, 38, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 98], [35, 36, 37, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97]]"
      },
      {
        "input": "mat = [[14, 13], [12, 11], [10, 9], [8, 7], [6, 5], [4, 3], [2, 1]]",
        "output": "[[11, 13], [9, 14], [7, 12], [5, 10], [3, 8], [1, 6], [2, 4]]"
      },
      {
        "input": "mat = [[97,96,95,94,93,92,91,90],[89,88,87,86,85,84,83,82],[81,80,79,78,77,76,75,74],[73,72,71,70,69,68,67,66],[65,64,63,62,61,60,59,58],[57,56,55,54,53,52,51,50],[49,48,47,46,45,44,43,42],[41,40,39,38,37,36,35,34],[33,32,31,30,29,28,27,26],[25,24,23,22,21,20,19,18],[17,16,15,14,13,12,11,10],[9,8,7,6,5,4,3,2],[1,2,3,4,5,6,7,8]]",
        "output": "[[34, 42, 50, 58, 66, 74, 82, 90], [26, 43, 51, 59, 67, 75, 83, 91], [18, 35, 52, 60, 68, 76, 84, 92], [10, 27, 44, 61, 69, 77, 85, 93], [2, 19, 36, 53, 70, 78, 86, 94], [3, 11, 28, 45, 62, 79, 87, 95], [4, 8, 20, 37, 54, 71, 88, 96], [5, 7, 12, 29, 46, 63, 80, 97], [5, 6, 13, 21, 38, 55, 72, 89], [4, 6, 14, 22, 30, 47, 64, 81], [3, 7, 15, 23, 31, 39, 56, 73], [2, 8, 16, 24, 32, 40, 48, 65], [1, 9, 17, 25, 33, 41, 49, 57]]"
      },
      {
        "input": "mat = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]"
      },
      {
        "input": "mat = [[100,99,98,97,96],[95,94,93,92,91],[90,89,88,87,86],[85,84,83,82,81],[80,79,78,77,76]]",
        "output": "[[76, 81, 86, 91, 96], [77, 82, 87, 92, 97], [78, 83, 88, 93, 98], [79, 84, 89, 94, 99], [80, 85, 90, 95, 100]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45]]",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24, 25, 26, 27], [28, 29, 30, 31, 32, 33, 34, 35, 36], [37, 38, 39, 40, 41, 42, 43, 44, 45]]"
      },
      {
        "input": "mat = [[1, 3, 5, 7, 9, 11], [2, 4, 6, 8, 10, 12], [3, 5, 7, 9, 11, 13], [4, 6, 8, 10, 12, 14], [5, 7, 9, 11, 13, 15], [6, 8, 10, 12, 14, 16]]",
        "output": "[[1, 3, 5, 7, 9, 11], [2, 4, 6, 8, 10, 12], [3, 5, 7, 9, 11, 13], [4, 6, 8, 10, 12, 14], [5, 7, 9, 11, 13, 15], [6, 8, 10, 12, 14, 16]]"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25], [26, 27, 28, 29, 30]]",
        "output": "[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25], [26, 27, 28, 29, 30]]"
      },
      {
        "input": "mat = [[1,10,20,30,40,50,60,70,80,90],[1,10,20,30,40,50,60,70,80,90],[1,10,20,30,40,50,60,70,80,90],[1,10,20,30,40,50,60,70,80,90],[1,10,20,30,40,50,60,70,80,90]]",
        "output": "[[1, 10, 20, 30, 40, 50, 60, 70, 80, 90], [1, 10, 20, 30, 40, 50, 60, 70, 80, 90], [1, 10, 20, 30, 40, 50, 60, 70, 80, 90], [1, 10, 20, 30, 40, 50, 60, 70, 80, 90], [1, 10, 20, 30, 40, 50, 60, 70, 80, 90]]"
      },
      {
        "input": "mat = [[5,10,15,20,25],[30,35,40,45,50],[55,60,65,70,75],[80,85,90,95,100],[105,110,115,120,125]]",
        "output": "[[5, 10, 15, 20, 25], [30, 35, 40, 45, 50], [55, 60, 65, 70, 75], [80, 85, 90, 95, 100], [105, 110, 115, 120, 125]]"
      },
      {
        "input": "mat = [[5, 20, 30, 40, 50], [15, 10, 35, 45, 55], [20, 25, 5, 50, 60], [25, 35, 45, 15, 65]]",
        "output": "[[5, 20, 30, 40, 50], [15, 5, 35, 45, 55], [20, 25, 10, 50, 60], [25, 35, 45, 15, 65]]"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35]]",
        "output": "[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25], [26, 27, 28, 29, 30], [31, 32, 33, 34, 35]]"
      },
      {
        "input": "mat = [[5,5,5,5,5,5],[5,5,5,5,5,5],[5,5,5,5,5,5],[5,5,5,5,5,5],[5,5,5,5,5,5],[5,5,5,5,5,5]]",
        "output": "[[5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5]]"
      },
      {
        "input": "mat = [[99,98,97,96,95,94,93,92,91],[90,89,88,87,86,85,84,83,82],[81,80,79,78,77,76,75,74,73],[72,71,70,69,68,67,66,65,64],[63,62,61,60,59,58,57,56,55],[54,53,52,51,50,49,48,47,46],[45,44,43,42,41,40,39,38,37],[36,35,34,33,32,31,30,29,28],[27,26,25,24,23,22,21,20,19],[18,17,16,15,14,13,12,11,10],[9,8,7,6,5,4,3,2,1]]",
        "output": "[[19, 28, 37, 46, 55, 64, 73, 82, 91], [10, 29, 38, 47, 56, 65, 74, 83, 92], [1, 20, 39, 48, 57, 66, 75, 84, 93], [2, 11, 30, 49, 58, 67, 76, 85, 94], [3, 12, 21, 40, 59, 68, 77, 86, 95], [4, 13, 22, 31, 50, 69, 78, 87, 96], [5, 14, 23, 32, 41, 60, 79, 88, 97], [6, 15, 24, 33, 42, 51, 70, 89, 98], [7, 16, 25, 34, 43, 52, 61, 80, 99], [8, 17, 26, 35, 44, 53, 62, 71, 90], [9, 18, 27, 36, 45, 54, 63, 72, 81]]"
      },
      {
        "input": "mat = [[99, 22, 33, 11, 44], [55, 66, 77, 88, 99], [10, 20, 30, 40, 50], [60, 70, 80, 90, 100], [15, 25, 35, 45, 55]]",
        "output": "[[30, 22, 33, 11, 44], [20, 55, 40, 50, 99], [10, 45, 66, 77, 88], [25, 35, 55, 90, 100], [15, 60, 70, 80, 99]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11],[12,13,14,15,16,17,18,19,20,21,22],[23,24,25,26,27,28,29,30,31,32,33],[34,35,36,37,38,39,40,41,42,43,44],[45,46,47,48,49,50,51,52,53,54,55]]",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55]]"
      },
      {
        "input": "mat = [[100,99,98,97,96,95],[94,93,92,91,90,89],[88,87,86,85,84,83],[82,81,80,79,78,77],[76,75,74,73,72,71]]",
        "output": "[[72, 71, 77, 83, 89, 95], [73, 79, 78, 84, 90, 96], [74, 80, 86, 85, 91, 97], [75, 81, 87, 93, 92, 98], [76, 82, 88, 94, 100, 99]]"
      },
      {
        "input": "mat = [[4, 3, 2, 1], [5, 9, 8, 7], [6, 10, 11, 12], [7, 6, 5, 4], [8, 7, 6, 5]]",
        "output": "[[4, 3, 2, 1], [5, 4, 8, 7], [6, 5, 9, 12], [7, 6, 5, 11], [8, 7, 6, 10]]"
      },
      {
        "input": "mat = [[9,7,8,6,5,4],[3,2,1,10,11,12],[15,14,13,18,17,16],[19,20,21,22,23,24],[25,26,27,28,29,30]]",
        "output": "[[2, 1, 8, 6, 5, 4], [3, 9, 7, 10, 11, 12], [15, 14, 13, 18, 17, 16], [19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30]]"
      },
      {
        "input": "mat = [[9, 7, 5, 3, 1], [8, 6, 4, 2, 0], [7, 5, 3, 1, 9], [6, 4, 2, 0, 8], [5, 3, 1, 9, 7]]",
        "output": "[[0, 1, 2, 0, 1], [2, 3, 4, 5, 3], [1, 5, 6, 7, 9], [3, 4, 8, 7, 8], [5, 6, 7, 9, 9]]"
      },
      {
        "input": "mat = [[45,12,23,34,45,56,67,78,89,90],[9,8,7,6,5,4,3,2,1,0],[11,22,33,44,55,66,77,88,99,100],[5,15,25,35,45,55,65,75,85,95]]",
        "output": "[[8, 7, 6, 5, 4, 3, 2, 1, 0, 90], [9, 33, 12, 23, 34, 45, 56, 67, 78, 89], [11, 22, 35, 44, 55, 65, 75, 85, 95, 100], [5, 15, 25, 45, 45, 55, 66, 77, 88, 99]]"
      },
      {
        "input": "mat = [[50, 24, 78, 42, 31], [63, 83, 92, 22, 58], [30, 50, 14, 32, 59], [97, 35, 88, 64, 50]]",
        "output": "[[14, 24, 22, 42, 31], [50, 50, 32, 59, 58], [30, 63, 64, 50, 78], [97, 35, 88, 83, 92]]"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1], [2, 3, 4, 5, 6, 7], [7, 6, 5, 4, 3, 2], [3, 4, 5, 6, 7, 8], [8, 7, 6, 5, 4, 3]]",
        "output": "[[1, 2, 2, 2, 1, 6], [3, 3, 3, 3, 4, 5], [2, 4, 4, 4, 3, 7], [4, 5, 5, 4, 5, 6], [3, 6, 5, 6, 5, 8], [8, 7, 7, 6, 6, 7]]"
      },
      {
        "input": "mat = [[95,85,65,25,55,75,35,45,15],[10,90,80,70,60,50,40,30,20],[5,15,25,35,45,55,65,75,85]]",
        "output": "[[25, 35, 45, 25, 50, 40, 30, 20, 15], [10, 90, 80, 65, 55, 55, 75, 35, 45], [5, 15, 95, 85, 70, 60, 65, 75, 85]]"
      },
      {
        "input": "mat = [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55], [20, 30, 40, 50, 60], [25, 35, 45, 55, 65]]",
        "output": "[[10, 20, 30, 40, 50], [15, 25, 35, 45, 55], [20, 30, 40, 50, 60], [25, 35, 45, 55, 65]]"
      },
      {
        "input": "mat = [[7,7,7,7,7,7,7,7,7,7],[7,1,7,1,7,1,7,1,7,1],[7,7,2,2,2,2,2,2,2,2],[7,1,2,3,3,3,3,3,3,3],[7,1,2,3,4,4,4,4,4,4],[7,1,2,3,4,5,5,5,5,5],[7,1,2,3,4,5,6,6,6,6]]",
        "output": "[[1, 2, 1, 2, 1, 2, 1, 2, 1, 7], [2, 2, 3, 2, 3, 2, 3, 2, 7, 7], [1, 3, 3, 4, 3, 4, 3, 4, 3, 7], [1, 2, 4, 4, 5, 4, 5, 4, 7, 7], [1, 2, 3, 5, 5, 6, 5, 6, 5, 7], [1, 2, 3, 4, 7, 6, 7, 6, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]"
      },
      {
        "input": "mat = [[9,7,11,8,5,4],[12,14,10,3,13,15],[6,2,16,17,18,19],[20,21,22,23,24,25]]",
        "output": "[[9, 7, 3, 8, 5, 4], [2, 14, 10, 11, 13, 15], [6, 12, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25]]"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5, 6, 7, 8], [8, 7, 6, 5, 4, 3, 2, 1], [1, 3, 5, 7, 9, 11, 13, 15], [15, 13, 11, 9, 7, 5, 3, 1]]",
        "output": "[[1, 2, 3, 3, 1, 2, 1, 8], [3, 5, 6, 5, 4, 3, 6, 7], [1, 8, 7, 7, 5, 4, 5, 15], [15, 13, 11, 9, 7, 9, 11, 13]]"
      },
      {
        "input": "mat = [[100, 99, 98, 97, 96], [95, 94, 93, 92, 91], [90, 89, 88, 87, 86], [85, 84, 83, 82, 81], [80, 79, 78, 77, 76]]",
        "output": "[[76, 81, 86, 91, 96], [77, 82, 87, 92, 97], [78, 83, 88, 93, 98], [79, 84, 89, 94, 99], [80, 85, 90, 95, 100]]"
      },
      {
        "input": "mat = [[7, 17, 12, 5, 10, 9, 3], [14, 2, 11, 16, 13, 18, 8], [15, 4, 6, 1, 19, 12, 17], [10, 3, 15, 7, 2, 14, 6], [5, 9, 1, 18, 17, 13, 4]]",
        "output": "[[2, 1, 4, 5, 10, 8, 3], [4, 6, 2, 12, 6, 17, 9], [1, 14, 7, 11, 14, 12, 18], [9, 3, 15, 7, 13, 16, 13], [5, 10, 15, 18, 17, 17, 19]]"
      },
      {
        "input": "mat = [[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13], [20, 19, 18, 17]]",
        "output": "[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13], [20, 19, 18, 17]]"
      },
      {
        "input": "mat = [[3,3,3,3,3,3,3,3,3,3,3,3],[3,2,2,2,2,2,2,2,2,2,2,3],[3,2,1,1,1,1,1,1,1,1,2,3],[3,2,1,1,1,1,1,1,1,2,3,3],[3,2,1,1,1,1,1,1,2,3,3,3],[3,2,1,1,1,1,1,2,3,3,3,3],[3,2,1,1,1,1,2,3,3,3,3,3],[3,2,1,1,1,2,3,3,3,3,3,3],[3,2,1,1,2,3,3,3,3,3,3,3],[3,2,1,2,3,3,3,3,3,3,3,3],[3,2,2,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3,3,3]]",
        "output": "[[1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3], [1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3], [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3], [1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3], [1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3], [2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3], [2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]"
      },
      {
        "input": "mat = [[100, 99, 98, 97, 96, 95], [94, 93, 92, 91, 90, 89], [88, 87, 86, 85, 84, 83], [82, 81, 80, 79, 78, 77], [76, 75, 74, 73, 72, 71]]",
        "output": "[[72, 71, 77, 83, 89, 95], [73, 79, 78, 84, 90, 96], [74, 80, 86, 85, 91, 97], [75, 81, 87, 93, 92, 98], [76, 82, 88, 94, 100, 99]]"
      },
      {
        "input": "mat = [[5,12,11,10,9],[8,4,3,2,1],[9,8,7,6,5],[10,9,8,7,6],[11,10,9,8,7],[12,11,10,9,8]]",
        "output": "[[4, 3, 2, 1, 9], [8, 5, 6, 5, 10], [9, 8, 7, 6, 11], [10, 9, 8, 7, 12], [11, 10, 9, 8, 7], [12, 11, 10, 9, 8]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7],[7,6,5,4,3,2,1],[2,3,4,5,6,7,8],[8,7,6,5,4,3,2]]",
        "output": "[[1, 2, 3, 2, 2, 1, 7], [3, 4, 4, 3, 3, 5, 6], [2, 6, 5, 5, 4, 4, 8], [8, 7, 7, 6, 5, 6, 7]]"
      },
      {
        "input": "mat = [[4,3,2,1],[8,7,6,5],[12,11,10,9],[16,15,14,13]]",
        "output": "[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]"
      },
      {
        "input": "mat = [[33, 22, 11, 44, 55], [66, 77, 88, 99, 100], [1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]",
        "output": "[[3, 4, 5, 44, 55], [2, 9, 10, 11, 100], [1, 8, 15, 22, 99], [6, 7, 14, 33, 88], [11, 12, 13, 20, 77], [16, 17, 18, 19, 66]]"
      },
      {
        "input": "mat = [[5, 20, 15, 80, 75], [45, 10, 55, 60, 15], [12, 65, 35, 90, 100], [10, 25, 40, 50, 65], [5, 15, 25, 35, 45]]",
        "output": "[[5, 20, 15, 15, 75], [35, 10, 55, 60, 80], [12, 40, 35, 65, 100], [10, 25, 45, 45, 90], [5, 15, 25, 65, 50]]"
      }
    ]
  },
  {
    "id": 2491,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting"
    ],
    "problemDescription": "You are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. Divide the players into n / 2 teams of size 2 such that the total skill of each team is equal.\nThe chemistry of a team is equal to the product of the skills of the players on that team.\nReturn the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.\n\u00a0\nExample 1:\n\nInput: skill = [3,2,5,1,3,4]\nOutput: 22\nExplanation: \nDivide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.\nThe sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22.\n\nExample 2:\n\nInput: skill = [3,4]\nOutput: 12\nExplanation: \nThe two players form a team with a total skill of 7.\nThe chemistry of the team is 3 * 4 = 12.\n\nExample 3:\n\nInput: skill = [1,1,2,3]\nOutput: -1\nExplanation: \nThere is no way to divide the players into teams such that the total skill of each team is equal.\n\n\u00a0\nConstraints:\n\n2 <= skill.length <= 105\nskill.length is even.\n1 <= skill[i] <= 1000\n\n",
    "starterCode": "class Solution:\n    def dividePlayers(self, skill: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "skill = [1,1000,1,1000,1,1000,1,1000]",
        "output": "4000"
      },
      {
        "input": "skill = [1,1,2,2,3,3,4,4]",
        "output": "20"
      },
      {
        "input": "skill = [1,1,2,3]",
        "output": "-1"
      },
      {
        "input": "skill = [1,2,3,4,5,6,7,8]",
        "output": "60"
      },
      {
        "input": "skill = [5,5,5,5,5,5]",
        "output": "75"
      },
      {
        "input": "skill = [15,15,15,15,15,15,15,15]",
        "output": "900"
      },
      {
        "input": "skill = [3,4]",
        "output": "12"
      },
      {
        "input": "skill = [2,3,3,2,2,3]",
        "output": "18"
      },
      {
        "input": "skill = [4,4,4,4]",
        "output": "32"
      },
      {
        "input": "skill = [3,2,5,1,3,4]",
        "output": "22"
      },
      {
        "input": "skill = [10,10,10,10]",
        "output": "200"
      },
      {
        "input": "skill = [1000,1000,1,1,2,2]",
        "output": "-1"
      },
      {
        "input": "skill = [1,2,3,4,5,6]",
        "output": "28"
      },
      {
        "input": "skill = [1,2,3,3,2,1]",
        "output": "10"
      },
      {
        "input": "skill = [1000,1,1000,1,1000,1,1000,1]",
        "output": "4000"
      },
      {
        "input": "skill = [10,20,30,40,50,60]",
        "output": "2800"
      },
      {
        "input": "skill = [500,500,500,500,500,500,500,500]",
        "output": "1000000"
      },
      {
        "input": "skill = [1,3,5,7,9,11]",
        "output": "73"
      },
      {
        "input": "skill = [1000,1,999,2,500,501]",
        "output": "253498"
      },
      {
        "input": "skill = [500,500,1,999,2,998,3,997]",
        "output": "255986"
      },
      {
        "input": "skill = [1,2,3,6,4,5]",
        "output": "28"
      },
      {
        "input": "skill = [250,750,500,500,750,250,500,500]",
        "output": "875000"
      },
      {
        "input": "skill = [1,1,1,1,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "skill = [1, 1000, 500, 500, 250, 750, 100, 900]",
        "output": "-1"
      },
      {
        "input": "skill = [100, 100, 200, 200, 300, 300, 400, 400, 500, 500]",
        "output": "350000"
      },
      {
        "input": "skill = [1,999,2,998,3,997,4,996,5,995,6,994,7,993,8,992,9,991,10,990]",
        "output": "54615"
      },
      {
        "input": "skill = [1,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "182"
      },
      {
        "input": "skill = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "18200"
      },
      {
        "input": "skill = [1,999,3,997,5,995,7,993,9,991,11,989,13,987,15,985]",
        "output": "63320"
      },
      {
        "input": "skill = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]",
        "output": "512"
      },
      {
        "input": "skill = [200, 300, 200, 300, 200, 300, 200, 300]",
        "output": "240000"
      },
      {
        "input": "skill = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]",
        "output": "728"
      },
      {
        "input": "skill = [333, 667, 333, 667, 333, 667, 333, 667, 333, 667, 333, 667, 333, 667, 333, 667]",
        "output": "1776888"
      },
      {
        "input": "skill = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "skill = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]",
        "output": "252"
      },
      {
        "input": "skill = [1, 1000, 2, 999, 3, 998, 4, 997, 5, 996]",
        "output": "14960"
      },
      {
        "input": "skill = [999, 1, 998, 2, 997, 3, 996, 4, 995, 5, 994, 6]",
        "output": "20909"
      },
      {
        "input": "skill = [10, 1, 5, 15, 7, 3, 9, 11]",
        "output": "-1"
      },
      {
        "input": "skill = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "11000"
      },
      {
        "input": "skill = [7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]",
        "output": "1512"
      },
      {
        "input": "skill = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]",
        "output": "40800"
      },
      {
        "input": "skill = [6,6,6,6,6,6,6,6,6,6,6,6]",
        "output": "216"
      },
      {
        "input": "skill = [2,8,3,7,4,6,5,5]",
        "output": "86"
      },
      {
        "input": "skill = [333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348]",
        "output": "927352"
      },
      {
        "input": "skill = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "182"
      },
      {
        "input": "skill = [23,42,31,57,5,19,6,49,12,35,29,10,50,40,21,33]",
        "output": "-1"
      },
      {
        "input": "skill = [10, 20, 30, 40, 50, 60, 70, 80]",
        "output": "6000"
      },
      {
        "input": "skill = [10,20,30,40,50,60,10,20,30,40,50,60]",
        "output": "5600"
      },
      {
        "input": "skill = [1000,1,1000,1,1000,1,1000,1,1000,1]",
        "output": "5000"
      },
      {
        "input": "skill = [8,1,8,1,8,1,8,1]",
        "output": "32"
      },
      {
        "input": "skill = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 100, 200]",
        "output": "-1"
      },
      {
        "input": "skill = [250, 250, 500, 500, 750, 750, 1000, 1000]",
        "output": "1250000"
      },
      {
        "input": "skill = [300,700,200,800,100,900,400,600,500,500]",
        "output": "950000"
      },
      {
        "input": "skill = [500,500,500,500,500,500,500,500,500,500]",
        "output": "1250000"
      },
      {
        "input": "skill = [2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]",
        "output": "200"
      },
      {
        "input": "skill = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "441"
      },
      {
        "input": "skill = [50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50]",
        "output": "20000"
      },
      {
        "input": "skill = [1000,1,1000,1,1000,1,1000,1,1000,1,1000,1]",
        "output": "6000"
      },
      {
        "input": "skill = [123, 321, 213, 312, 132, 231, 213, 132]",
        "output": "-1"
      },
      {
        "input": "skill = [6,3,9,2,8,4,5,7,1,10,11,12,13,14,15,16]",
        "output": "408"
      },
      {
        "input": "skill = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]",
        "output": "3080"
      },
      {
        "input": "skill = [8, 6, 4, 2, 10, 12, 14, 16, 18, 20]",
        "output": "440"
      },
      {
        "input": "skill = [1,1000,2,999,3,998,4,997]",
        "output": "9980"
      },
      {
        "input": "skill = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6]",
        "output": "84"
      },
      {
        "input": "skill = [10,20,30,40,50,60,70,80,90,100,110,120]",
        "output": "18200"
      },
      {
        "input": "skill = [5,6,7,8,9,10,1,2,3,4]",
        "output": "110"
      },
      {
        "input": "skill = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6]",
        "output": "84"
      },
      {
        "input": "skill = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "770"
      },
      {
        "input": "skill = [500,500,500,500,500,500,500,500,500,500,500,500]",
        "output": "1500000"
      },
      {
        "input": "skill = [499, 501, 498, 502, 497, 503, 496, 504]",
        "output": "999970"
      },
      {
        "input": "skill = [1, 3, 2, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16]",
        "output": "408"
      },
      {
        "input": "skill = [999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1]",
        "output": "5994"
      },
      {
        "input": "skill = [999,1,999,1,999,1,999,1,999,1,999,1,999,1,999,1]",
        "output": "7992"
      },
      {
        "input": "skill = [5,1,4,3,2,6]",
        "output": "28"
      },
      {
        "input": "skill = [333,333,333,333,334,334,334,334]",
        "output": "444888"
      },
      {
        "input": "skill = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "770"
      },
      {
        "input": "skill = [250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250]",
        "output": "500000"
      },
      {
        "input": "skill = [10,10,10,10,10,10,10,10]",
        "output": "400"
      },
      {
        "input": "skill = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "510"
      },
      {
        "input": "skill = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "77000"
      },
      {
        "input": "skill = [10,20,30,40,50,60,70,80,90,100]",
        "output": "11000"
      },
      {
        "input": "skill = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "408"
      },
      {
        "input": "skill = [8,8,8,8,8,8,8,8,8,8,8,8]",
        "output": "384"
      },
      {
        "input": "skill = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "335"
      },
      {
        "input": "skill = [999,1,999,1,999,1,999,1,999,1,999,1,999,1,999,1,999,1,999,1,999,1,999,1,999,1,999,1,999,1]",
        "output": "14985"
      },
      {
        "input": "skill = [999,1,998,2,997,3,996,4,995,5,994,6,993,7,992,8,991,9,990,10]",
        "output": "54615"
      },
      {
        "input": "skill = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "150"
      },
      {
        "input": "skill = [250,250,250,250,250,250,250,250,250,250,250,250]",
        "output": "375000"
      },
      {
        "input": "skill = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]",
        "output": "280"
      },
      {
        "input": "skill = [1,999,2,998,3,997,4,996,5,995]",
        "output": "14945"
      },
      {
        "input": "skill = [100,200,300,400,100,200,300,400,500,600,500,600]",
        "output": "560000"
      },
      {
        "input": "skill = [10,9,8,7,6,5,4,3,2,1]",
        "output": "110"
      },
      {
        "input": "skill = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "490"
      },
      {
        "input": "skill = [500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500]",
        "output": "2000000"
      },
      {
        "input": "skill = [15,16,15,16,17,17,18,18,19,19,20,20]",
        "output": "1820"
      },
      {
        "input": "skill = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1]",
        "output": "600"
      },
      {
        "input": "skill = [100, 200, 300, 400, 500, 600, 700, 800]",
        "output": "600000"
      },
      {
        "input": "skill = [999, 1, 999, 1, 999, 1, 999, 1]",
        "output": "3996"
      },
      {
        "input": "skill = [1,2,3,4,5,6,7,8,9,10]",
        "output": "110"
      },
      {
        "input": "skill = [600,400,600,400,600,400,600,400,600,400,600,400]",
        "output": "1440000"
      },
      {
        "input": "skill = [1, 1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000]",
        "output": "5000"
      },
      {
        "input": "skill = [5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "150"
      },
      {
        "input": "skill = [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]",
        "output": "288"
      },
      {
        "input": "skill = [1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000, 1]",
        "output": "8000"
      },
      {
        "input": "skill = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "220"
      },
      {
        "input": "skill = [1,1,1,1,1,1,1,1,1,1]",
        "output": "5"
      },
      {
        "input": "skill = [1,9,1,9,1,9,1,9]",
        "output": "36"
      },
      {
        "input": "skill = [300, 700, 200, 800, 400, 600, 100, 900, 500, 500, 400, 600]",
        "output": "1190000"
      },
      {
        "input": "skill = [1,3,5,7,9,11,13,15,17,19]",
        "output": "335"
      },
      {
        "input": "skill = [150, 250, 150, 250, 150, 250, 150, 250, 150, 250]",
        "output": "187500"
      },
      {
        "input": "skill = [10,20,30,40,50,60,70,80,90,100,10,20,30,40,50,60,70,80,90,100]",
        "output": "22000"
      },
      {
        "input": "skill = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "200"
      },
      {
        "input": "skill = [1000, 1, 999, 2, 998, 3, 997, 4]",
        "output": "9980"
      },
      {
        "input": "skill = [8,1,5,3,4,7,2,6,9,10,12,11]",
        "output": "182"
      },
      {
        "input": "skill = [10,1,10,1,10,1,10,1]",
        "output": "40"
      },
      {
        "input": "skill = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "125"
      },
      {
        "input": "skill = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160]",
        "output": "40800"
      },
      {
        "input": "skill = [5,5,5,5,5,5,5,5]",
        "output": "100"
      },
      {
        "input": "skill = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "20000"
      },
      {
        "input": "skill = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4]",
        "output": "40"
      },
      {
        "input": "skill = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127]",
        "output": "-1"
      },
      {
        "input": "skill = [250,750,250,750,250,750,250,750,250,750,250,750,250,750,250,750]",
        "output": "1500000"
      }
    ]
  },
  {
    "id": 638,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Memoization",
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bitmask"
    ],
    "problemDescription": "In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\nYou are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.\nYou are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer.\nReturn the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.\n\u00a0\nExample 1:\n\nInput: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]\nOutput: 14\nExplanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. \nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B. \nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\n\nExample 2:\n\nInput: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]\nOutput: 11\nExplanation: The price of A is $2, and $3 for B, $4 for C. \nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \nYou cannot add more items, though only $9 for 2A ,2B and 1C.\n\n\u00a0\nConstraints:\n\nn == price.length == needs.length\n1 <= n <= 6\n0 <= price[i], needs[i] <= 10\n1 <= special.length <= 100\nspecial[i].length == n + 1\n0 <= special[i][j] <= 50\nThe input is generated that at least one of special[i][j] is non-zero for 0 <= j <= n - 1.\n\n",
    "starterCode": "class Solution:\n    def shoppingOffers(self, price: List[int], special: List[List[int]], needs: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "price = [10,10,10], special = [[3,1,0,10],[1,2,1,15]], needs = [2,2,1]",
        "output": "25"
      },
      {
        "input": "price = [4,10,1,1,1], special = [[1,1,1,1,1,7]], needs = [4,10,1,1,1]",
        "output": "109"
      },
      {
        "input": "price = [6,5,7,11,6], special = [[1,0,0,0,1,4],[0,0,1,0,0,5]], needs = [0,0,1,0,0]",
        "output": "5"
      },
      {
        "input": "price = [10,10,10], special = [[3,3,3,15]], needs = [9,9,9]",
        "output": "45"
      },
      {
        "input": "price = [5,5], special = [[1,0,5],[0,1,5]], needs = [10,10]",
        "output": "100"
      },
      {
        "input": "price = [1,2,3], special = [[2,2,2,3]], needs = [1,1,1]",
        "output": "6"
      },
      {
        "input": "price = [5,4,3,2,1], special = [[1,1,1,1,1,10],[0,1,0,1,0,8]], needs = [1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]",
        "output": "14"
      },
      {
        "input": "price = [1,2,3,4,5,6], special = [[1,1,1,1,1,1,10],[2,2,2,2,2,2,15]], needs = [1,2,3,4,5,6]",
        "output": "80"
      },
      {
        "input": "price = [4,10,1], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]",
        "output": "15"
      },
      {
        "input": "price = [1,2,3], special = [[1,1,0,3],[2,2,1,10]], needs = [2,2,1]",
        "output": "9"
      },
      {
        "input": "price = [5,5], special = [[2,2,9]], needs = [1,1]",
        "output": "10"
      },
      {
        "input": "price = [1,2,3,4,5,6], special = [[1,1,1,1,1,1,10]], needs = [5,5,5,5,5,5]",
        "output": "50"
      },
      {
        "input": "price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]",
        "output": "11"
      },
      {
        "input": "price = [5,4,3,2,1], special = [[1,1,1,1,1,6],[2,2,2,2,2,11]], needs = [3,3,3,3,3]",
        "output": "17"
      },
      {
        "input": "price = [5,4,2,7], special = [[1,0,0,0,1],[0,1,0,1,2],[0,0,1,0,3]], needs = [0,2,3,1]",
        "output": "12"
      },
      {
        "input": "price = [1,2], special = [[0,1,1],[1,0,2],[1,1,3]], needs = [1,1]",
        "output": "2"
      },
      {
        "input": "price = [1,2,3], special = [[1,1,1,3]], needs = [2,2,2]",
        "output": "6"
      },
      {
        "input": "price = [1,1,1,1,1,1], special = [[1,1,1,1,1,1,0]], needs = [0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "price = [1,2,3,4], special = [[1,1,1,0,5],[2,2,2,1,15]], needs = [2,2,2,1]",
        "output": "14"
      },
      {
        "input": "price = [10, 20, 30, 40, 50, 60], special = [[1, 0, 1, 0, 1, 0, 90], [0, 1, 0, 1, 0, 1, 80], [1, 1, 1, 1, 1, 1, 200]], needs = [2, 2, 2, 2, 2, 2]",
        "output": "340"
      },
      {
        "input": "price = [8,6,4,2], special = [[2,0,1,0,12],[0,3,0,1,15],[1,1,1,1,10]], needs = [4,6,3,2]",
        "output": "56"
      },
      {
        "input": "price = [3,5,7,9,11,13], special = [[1,2,3,0,0,0,30],[0,0,0,1,1,1,25],[2,2,2,2,2,2,60]], needs = [4,5,6,3,4,5]",
        "output": "167"
      },
      {
        "input": "price = [1,3,5,7,9], special = [[2,1,1,0,0,15],[1,1,2,0,0,12],[0,0,0,2,1,10],[1,1,0,1,1,18],[3,0,0,0,0,5]], needs = [4,5,6,3,4]",
        "output": "85"
      },
      {
        "input": "price = [5,7,3,4,2], special = [[3,1,2,0,0,12],[1,2,1,1,0,15],[0,0,1,2,2,10]], needs = [5,4,3,2,1]",
        "output": "45"
      },
      {
        "input": "price = [5,10,15,20,25], special = [[1,2,1,0,0,35],[0,1,0,2,1,40],[1,1,1,1,1,50]], needs = [2,4,2,3,2]",
        "output": "125"
      },
      {
        "input": "price = [1, 1, 1, 1, 1, 1], special = [[1, 1, 1, 1, 1, 0, 4], [0, 0, 0, 0, 0, 1, 1]], needs = [5, 5, 5, 5, 5, 5]",
        "output": "25"
      },
      {
        "input": "price = [2,4,6,8,10], special = [[1,1,1,1,1,25],[2,2,2,2,2,40],[3,0,0,0,0,30]], needs = [6,6,6,6,6]",
        "output": "120"
      },
      {
        "input": "price = [1,1,1,1,1,1], special = [[1,0,0,0,0,0,1],[0,1,0,0,0,0,1],[0,0,1,0,0,0,1],[0,0,0,1,0,0,1],[0,0,0,0,1,0,1],[0,0,0,0,0,1,1]], needs = [6,6,6,6,6,6]",
        "output": "36"
      },
      {
        "input": "price = [1,1,1,1,1,1], special = [[1,1,1,1,1,1,5],[2,2,2,2,2,2,10],[1,0,0,0,0,0,1],[0,1,0,0,0,0,1],[0,0,1,0,0,0,1],[0,0,0,1,0,0,1],[0,0,0,0,1,0,1],[0,0,0,0,0,1,1]], needs = [6,6,6,6,6,6]",
        "output": "30"
      },
      {
        "input": "price = [2,4,6,8], special = [[2,2,0,0,15],[1,1,2,2,20],[0,0,3,3,25]], needs = [6,6,6,6]",
        "output": "78"
      },
      {
        "input": "price = [2,3,5,7], special = [[1,1,0,1,12],[2,0,1,0,10],[0,2,1,1,18]], needs = [3,3,2,3]",
        "output": "46"
      },
      {
        "input": "price = [3,5,7,9,11], special = [[1,0,1,0,1,15],[2,2,1,0,0,20],[0,0,2,2,0,18]], needs = [2,2,3,1,2]",
        "output": "56"
      },
      {
        "input": "price = [5,10,15,20,25], special = [[1,0,0,0,0,5],[0,1,0,0,0,10],[0,0,1,0,0,15],[0,0,0,1,0,20],[0,0,0,0,1,25],[2,2,1,1,0,40],[1,2,2,2,2,80]], needs = [3,4,2,1,1]",
        "output": "105"
      },
      {
        "input": "price = [9,8,7,6,5,4], special = [[2,2,2,2,2,2,40],[1,1,1,1,1,1,20],[3,3,3,3,3,3,60],[1,2,3,4,5,6,100]], needs = [5,4,3,2,1,0]",
        "output": "115"
      },
      {
        "input": "price = [1,1,1,1,1,1], special = [[1,1,1,1,1,0,5],[2,2,2,2,2,2,10],[1,0,1,0,1,0,7]], needs = [6,6,6,6,6,6]",
        "output": "30"
      },
      {
        "input": "price = [7, 5, 3, 1, 2, 4], special = [[1, 1, 0, 0, 0, 0, 12], [0, 1, 1, 0, 0, 0, 15], [0, 0, 1, 1, 1, 1, 20], [1, 0, 1, 0, 1, 0, 18]], needs = [6, 5, 4, 3, 2, 1]",
        "output": "90"
      },
      {
        "input": "price = [9, 5, 1, 8, 6], special = [[1, 0, 2, 1, 0, 13], [2, 2, 0, 0, 1, 20], [0, 1, 1, 1, 0, 12]], needs = [5, 4, 7, 3, 2]",
        "output": "74"
      },
      {
        "input": "price = [1,1,1,1,1,1], special = [[2,2,2,2,2,2,10],[1,0,1,0,1,0,5],[0,1,0,1,0,1,5]], needs = [5,5,5,5,5,5]",
        "output": "26"
      },
      {
        "input": "price = [10,20,30,40,50,60], special = [[1,0,0,0,0,0,10],[0,1,0,0,0,0,20],[0,0,1,0,0,0,30],[0,0,0,1,0,0,40],[0,0,0,0,1,0,50],[0,0,0,0,0,1,60],[3,2,1,1,1,1,150]], needs = [3,3,3,3,3,3]",
        "output": "530"
      },
      {
        "input": "price = [1,2,3,4,5], special = [[2,2,2,2,2,20],[1,1,1,1,1,10],[3,3,3,3,3,30],[0,0,0,0,1,5],[0,0,0,1,0,4],[0,0,1,0,0,3],[0,1,0,0,0,2]], needs = [3,4,2,1,0]",
        "output": "21"
      },
      {
        "input": "price = [2,2,2,2,2,2], special = [[2,2,2,2,2,2,10],[1,1,1,1,1,1,5],[0,0,0,0,0,0,0]], needs = [5,5,5,5,5,5]",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "price = [1,1,1,1,1,1], special = [[1,1,1,1,1,1,6],[2,2,2,2,2,2,12],[3,3,3,3,3,3,18]], needs = [6,6,6,6,6,6]",
        "output": "36"
      },
      {
        "input": "price = [1,3,5,7,9,11], special = [[2,1,0,0,0,0,5],[0,0,2,1,0,0,8],[0,0,0,0,2,1,10],[1,1,1,1,1,1,15]], needs = [10,10,10,10,10,10]",
        "output": "150"
      },
      {
        "input": "price = [2,3,4,5,6,7], special = [[1,1,1,1,1,0,20],[2,2,2,2,2,1,40],[0,0,0,0,0,5,30]], needs = [2,3,4,5,6,5]",
        "output": "118"
      },
      {
        "input": "price = [2,3,5,7,11], special = [[1,1,1,1,1,15],[2,0,0,1,1,20],[0,2,2,0,0,25],[1,0,0,0,0,5]], needs = [4,5,6,7,8]",
        "output": "138"
      },
      {
        "input": "price = [1,2,3,4,5,6], special = [[1,0,1,0,1,0,10],[0,1,0,1,0,1,11],[1,1,1,1,1,1,15]], needs = [4,4,4,4,4,4]",
        "output": "60"
      },
      {
        "input": "price = [7,6,5,4,3,2], special = [[2,1,1,1,0,0,12],[1,2,1,0,1,0,13],[1,1,2,0,0,1,14],[1,0,1,2,1,1,15]], needs = [4,5,6,3,2,1]",
        "output": "63"
      },
      {
        "input": "price = [3,5,7,9,11], special = [[1,1,1,1,0,25],[0,1,1,1,1,30],[1,0,0,0,1,15],[1,2,1,0,2,45]], needs = [2,3,4,5,3]",
        "output": "121"
      },
      {
        "input": "price = [5,7,3,11], special = [[2,1,0,0,15],[1,1,1,0,12],[0,0,1,1,7]], needs = [4,5,3,2]",
        "output": "67"
      },
      {
        "input": "price = [10,20,30,40,50,60], special = [[1,1,1,1,1,1,150],[2,0,1,1,0,1,120],[0,2,0,2,0,2,180]], needs = [5,4,3,2,1,0]",
        "output": "350"
      },
      {
        "input": "price = [1,1,1,1,1,1,1,1,1], special = [[1,1,1,1,1,1,1,1,0,8],[2,2,2,2,2,2,2,2,0,14],[3,3,3,3,3,3,3,3,0,18]], needs = [9,9,9,9,9,9,9,9,9]",
        "output": "63"
      },
      {
        "input": "price = [3,6,5,4,3,2,1], special = [[1,1,1,1,1,1,1,15],[2,2,2,2,2,2,2,25],[3,3,3,3,3,3,3,30]], needs = [1,2,3,4,5,6,7]",
        "output": "71"
      },
      {
        "input": "price = [5, 3, 2, 6, 7], special = [[2, 1, 1, 0, 0, 15], [0, 3, 0, 1, 1, 18], [1, 2, 3, 0, 0, 20]], needs = [3, 6, 5, 2, 2]",
        "output": "61"
      },
      {
        "input": "price = [4,4,4,4,4,4], special = [[1,1,1,1,1,1,20],[2,2,2,2,2,2,40],[3,3,3,3,3,3,60],[4,4,4,4,4,4,80]], needs = [12,12,12,12,12,12]",
        "output": "240"
      },
      {
        "input": "price = [4,8,1,2,9,3], special = [[2,4,1,0,2,1,10],[1,0,0,0,1,0,7],[0,0,3,1,0,0,5],[0,0,0,0,0,2,2]], needs = [5,8,2,2,9,4]",
        "output": "69"
      },
      {
        "input": "price = [3,6,9,12,15,18], special = [[1,1,1,1,1,1,10],[2,2,2,2,2,2,20],[0,3,0,3,0,3,30]], needs = [3,6,9,12,15,18]",
        "output": "425"
      },
      {
        "input": "price = [1,3,5,7,9], special = [[1,1,1,1,1,10],[2,2,2,2,2,20],[3,3,3,3,3,30]], needs = [4,4,4,4,4]",
        "output": "40"
      },
      {
        "input": "price = [5,7,9,11,13], special = [[2,0,1,0,0,22],[1,2,0,1,1,30],[0,0,3,0,2,40]], needs = [3,4,3,2,1]",
        "output": "92"
      },
      {
        "input": "price = [2, 4, 6, 8, 10, 12], special = [[1, 1, 1, 1, 1, 1, 30], [2, 2, 2, 2, 2, 2, 50], [0, 0, 1, 0, 0, 0, 6]], needs = [1, 2, 3, 4, 5, 6]",
        "output": "170"
      },
      {
        "input": "price = [5,5,5,5,5,5], special = [[1,1,1,1,1,0,25],[2,2,2,2,2,0,45],[3,3,3,3,3,0,60]], needs = [5,5,5,5,5]",
        "output": "105"
      },
      {
        "input": "price = [2,4,6,8,10,12], special = [[1,0,0,0,0,0,2],[0,1,0,0,0,0,4],[0,0,1,0,0,0,6],[0,0,0,1,0,0,8],[0,0,0,0,1,0,10],[0,0,0,0,0,1,12],[3,0,0,0,0,0,5],[0,3,0,0,0,0,12],[0,0,3,0,0,0,18],[0,0,0,3,0,0,24],[0,0,0,0,3,0,30],[0,0,0,0,0,3,36]], needs = [5,5,5,5,5,5]",
        "output": "209"
      },
      {
        "input": "price = [1,1,1,1,1,1], special = [[1,1,1,1,1,1,5],[2,2,2,2,2,2,10],[3,3,3,3,3,3,15]], needs = [6,6,6,6,6,6]",
        "output": "30"
      },
      {
        "input": "price = [5,5,5,5,5,5], special = [[3,3,3,3,3,3,15],[2,2,2,2,2,2,10],[1,1,1,1,1,1,5]], needs = [10,10,10,10,10,10]",
        "output": "50"
      },
      {
        "input": "price = [3,5,7], special = [[1,0,2,10],[0,2,1,12],[3,1,1,20]], needs = [5,4,4]",
        "output": "46"
      },
      {
        "input": "price = [1,3,5,7,9,11], special = [[1,2,3,4,5,6,50],[2,3,4,5,6,7,90],[3,4,5,6,7,8,120]], needs = [10,12,14,16,18,20]",
        "output": "198"
      },
      {
        "input": "price = [2,3,4,5,6], special = [[1,1,1,0,0,6],[0,2,2,1,1,10],[2,0,0,2,1,14]], needs = [3,4,5,3,2]",
        "output": "35"
      },
      {
        "input": "price = [1,2,3,4,5,6], special = [[1,1,1,1,1,1,25],[3,3,3,3,3,3,75],[2,0,0,0,0,0,20],[0,2,0,0,0,0,22]], needs = [5,5,5,5,5,5]",
        "output": "105"
      },
      {
        "input": "price = [10,9,8,7,6,5,4,3,2,1], special = [[1,1,1,1,1,1,1,1,1,1,50],[2,2,2,2,2,2,2,2,2,2,90]], needs = [10,10,10,10,10,10,10,10,10,10]",
        "output": "450"
      },
      {
        "input": "price = [10,20,30,40,50,60], special = [[2,0,0,0,0,0,20],[0,2,0,0,0,0,40],[0,0,2,0,0,0,60],[1,1,1,1,1,1,200],[3,3,3,3,3,3,500]], needs = [3,3,3,3,3,3]",
        "output": "500"
      },
      {
        "input": "price = [7,5,3,1], special = [[1,1,1,1,15],[0,2,2,0,15],[2,0,0,2,15]], needs = [5,5,5,5]",
        "output": "75"
      },
      {
        "input": "price = [15, 10, 5, 3, 8], special = [[2, 1, 1, 0, 1, 35], [1, 2, 0, 1, 0, 30], [0, 0, 1, 1, 1, 25]], needs = [4, 5, 6, 3, 7]",
        "output": "169"
      },
      {
        "input": "price = [6,3,7,2,9], special = [[1,0,0,0,0,3],[0,1,0,0,0,2],[0,0,1,0,0,4],[0,0,0,1,0,1],[0,0,0,0,1,5],[2,1,1,1,1,20]], needs = [6,6,6,6,6]",
        "output": "90"
      },
      {
        "input": "price = [4,8,12,16,20,24,28], special = [[1,1,1,0,0,0,0,40],[0,0,0,1,1,1,0,40],[0,0,0,0,0,0,1,28],[2,2,2,0,0,0,0,60],[1,2,3,1,2,3,1,100]], needs = [10,10,10,10,10,10,10]",
        "output": "764"
      },
      {
        "input": "price = [1,2,3,4,5,6], special = [[1,1,0,0,0,0,6],[0,1,1,0,0,0,8],[0,0,1,1,0,0,10],[0,0,0,1,1,0,12],[0,0,0,0,1,1,14],[1,0,1,0,1,0,20]], needs = [3,3,3,3,3,3]",
        "output": "63"
      },
      {
        "input": "price = [3,5,7,9,11,13], special = [[1,1,1,0,0,0,20],[2,2,2,1,1,1,40],[3,3,3,2,2,2,60]], needs = [9,8,7,6,5,4]",
        "output": "175"
      },
      {
        "input": "price = [1,2,3,4,5,6,7], special = [[1,1,1,1,1,1,0,14],[2,2,2,2,2,2,0,26],[3,3,3,3,3,3,0,38]], needs = [7,7,7,7,7,7,7]",
        "output": "139"
      },
      {
        "input": "price = [1,2,3,4,5,6,7,8,9,10], special = [[1,1,1,1,1,1,1,1,1,0,20],[2,2,2,2,2,2,2,2,2,0,30],[1,2,3,4,5,6,7,8,9,0,45]], needs = [2,4,6,8,10,12,14,16,18,20]",
        "output": "357"
      },
      {
        "input": "price = [2,3,4,5,6], special = [[1,0,1,1,0,12],[0,2,0,0,1,15],[1,2,1,0,2,30],[2,1,0,2,1,40]], needs = [4,3,2,5,2]",
        "output": "62"
      },
      {
        "input": "price = [3,6,9,12,15,18], special = [[1,1,1,0,0,0,30],[0,0,0,1,1,1,30],[2,2,2,0,0,0,50],[0,0,0,2,2,2,50],[1,0,0,1,0,0,20],[0,1,0,0,1,0,20],[0,0,1,0,0,1,20],[3,3,3,3,3,3,150]], needs = [6,6,6,6,6,6]",
        "output": "258"
      },
      {
        "input": "price = [3, 2, 5, 7, 1, 4], special = [[2, 1, 1, 0, 0, 1, 10], [0, 2, 0, 1, 1, 0, 12], [1, 0, 1, 1, 0, 1, 14]], needs = [3, 4, 6, 5, 3, 2]",
        "output": "81"
      },
      {
        "input": "price = [8,6,7,3,5], special = [[2,2,0,1,1,16],[0,2,2,0,1,18],[1,1,0,0,0,9],[0,0,0,2,2,15],[1,0,1,1,0,13]], needs = [8,6,7,3,5]",
        "output": "123"
      },
      {
        "input": "price = [10,20,30,40,50,60], special = [[1,1,1,1,1,1,220],[2,2,2,2,2,2,400],[3,3,3,3,3,3,550]], needs = [1,2,3,4,5,6]",
        "output": "910"
      },
      {
        "input": "price = [5,7,3,2,6], special = [[2,3,1,0,0,15],[1,1,2,0,1,10],[0,0,0,3,3,20]], needs = [3,6,2,1,4]",
        "output": "70"
      },
      {
        "input": "price = [2,4,6,8,10,12], special = [[1,1,1,1,1,1,20],[2,2,2,2,2,2,35],[1,2,3,4,5,6,60],[0,0,0,0,0,0,0]], needs = [5,4,3,2,1,0]",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "price = [1,1,1,1,1,1], special = [[1,1,1,1,1,1,5],[2,2,2,2,2,2,10],[1,0,0,0,0,0,1],[0,1,0,0,0,0,1],[0,0,1,0,0,0,1],[0,0,0,1,0,0,1],[0,0,0,0,1,0,1],[0,0,0,0,0,1,1]], needs = [5,5,5,5,5,5]",
        "output": "25"
      },
      {
        "input": "price = [2,3,4,5,6], special = [[1,1,0,0,0,10],[0,0,1,1,0,12],[1,0,1,0,1,15],[0,1,0,1,1,17]], needs = [5,5,5,5,5]",
        "output": "100"
      },
      {
        "input": "price = [3,6,7,8,9,10], special = [[3,3,3,3,3,3,100],[1,2,1,2,1,2,60],[2,1,2,1,2,1,70]], needs = [6,6,6,6,6,6]",
        "output": "200"
      },
      {
        "input": "price = [1,1,1,1,1,1], special = [[1,1,1,1,1,1,6],[2,2,2,2,2,2,10],[3,3,3,3,3,3,12]], needs = [6,6,6,6,6,6]",
        "output": "24"
      },
      {
        "input": "price = [5,10,15,20,25], special = [[1,2,0,1,0,20],[0,1,2,1,1,25],[3,1,3,0,2,35]], needs = [4,5,6,7,8]",
        "output": "295"
      },
      {
        "input": "price = [5,5,5,5,5,5], special = [[1,1,1,1,1,1,25],[2,2,2,2,2,2,50],[3,3,3,3,3,3,75]], needs = [6,6,6,6,6,6]",
        "output": "150"
      },
      {
        "input": "price = [5,10,15,20,25,30], special = [[1,2,3,4,5,6,55],[2,3,4,5,6,7,95],[3,4,5,6,7,8,135]], needs = [6,12,18,24,30,36]",
        "output": "885"
      }
    ]
  },
  {
    "id": 1529,
    "difficulty": "Medium",
    "tags": [
      "Greedy",
      "String"
    ],
    "problemDescription": "You are given a 0-indexed binary string target of length n. You have another binary string s of length n that is initially set to all zeros. You want to make s equal to target.\nIn one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. Flip means changing '0' to '1' and '1' to '0'.\nReturn the minimum number of operations needed to make s equal to target.\n\u00a0\nExample 1:\n\nInput: target = \"10111\"\nOutput: 3\nExplanation: Initially, s = \"00000\".\nChoose index i = 2: \"00000\" -> \"00111\"\nChoose index i = 0: \"00111\" -> \"11000\"\nChoose index i = 1: \"11000\" -> \"10111\"\nWe need at least 3 flip operations to form target.\n\nExample 2:\n\nInput: target = \"101\"\nOutput: 3\nExplanation: Initially, s = \"000\".\nChoose index i = 0: \"000\" -> \"111\"\nChoose index i = 1: \"111\" -> \"100\"\nChoose index i = 2: \"100\" -> \"101\"\nWe need at least 3 flip operations to form target.\n\nExample 3:\n\nInput: target = \"00000\"\nOutput: 0\nExplanation: We do not need any operations since the initial s already equals target.\n\n\u00a0\nConstraints:\n\nn == target.length\n1 <= n <= 105\ntarget[i] is either '0' or '1'.\n\n",
    "starterCode": "class Solution:\n    def minFlips(self, target: str) -> int:\n        ",
    "testCases": [
      {
        "input": "target = \"00000\"",
        "output": "0"
      },
      {
        "input": "target = \"00110\"",
        "output": "2"
      },
      {
        "input": "target = \"1100110011\"",
        "output": "5"
      },
      {
        "input": "target = \"000111000111\"",
        "output": "3"
      },
      {
        "input": "target = \"001100\"",
        "output": "2"
      },
      {
        "input": "target = \"10001\"",
        "output": "3"
      },
      {
        "input": "target = \"010101010101010101\"",
        "output": "17"
      },
      {
        "input": "target = \"001001001\"",
        "output": "5"
      },
      {
        "input": "target = \"1111111111\"",
        "output": "1"
      },
      {
        "input": "target = \"0000000000\"",
        "output": "0"
      },
      {
        "input": "target = \"01010\"",
        "output": "4"
      },
      {
        "input": "target = \"101\"",
        "output": "3"
      },
      {
        "input": "target = \"11001100\"",
        "output": "4"
      },
      {
        "input": "target = \"10010\"",
        "output": "4"
      },
      {
        "input": "target = \"11001\"",
        "output": "3"
      },
      {
        "input": "target = \"10111\"",
        "output": "3"
      },
      {
        "input": "target = \"001100110011\"",
        "output": "5"
      },
      {
        "input": "target = \"111100001111\"",
        "output": "3"
      },
      {
        "input": "target = \"11111\"",
        "output": "1"
      },
      {
        "input": "target = \"1001010\"",
        "output": "6"
      },
      {
        "input": "target = \"010101\"",
        "output": "5"
      },
      {
        "input": "target = \"1001001\"",
        "output": "5"
      },
      {
        "input": "target = \"0101010101\"",
        "output": "9"
      },
      {
        "input": "target = \"110011\"",
        "output": "3"
      },
      {
        "input": "target = \"111000111\"",
        "output": "3"
      },
      {
        "input": "target = \"10101010101010101010\"",
        "output": "20"
      },
      {
        "input": "target = \"000011110000111100001111\"",
        "output": "5"
      },
      {
        "input": "target = \"011010101010101010101010\"",
        "output": "22"
      },
      {
        "input": "target = \"10101010101010101010101010101010\"",
        "output": "32"
      },
      {
        "input": "target = \"110011001100110\"",
        "output": "8"
      },
      {
        "input": "target = \"000000000000000000000000000000000000000000000000\"",
        "output": "0"
      },
      {
        "input": "target = \"10001000100010001000\"",
        "output": "10"
      },
      {
        "input": "target = \"101010101010101010101010101010101010101010101010\"",
        "output": "48"
      },
      {
        "input": "target = \"000111000111000\"",
        "output": "4"
      },
      {
        "input": "target = \"1001001001\"",
        "output": "7"
      },
      {
        "input": "target = \"1111111111111111111111111111111111111111111111111111111111111111\"",
        "output": "1"
      },
      {
        "input": "target = \"01010101010101010101\"",
        "output": "19"
      },
      {
        "input": "target = \"1001001001001001001001001001001001001001\"",
        "output": "27"
      },
      {
        "input": "target = \"1010101010101010101010101010\"",
        "output": "28"
      },
      {
        "input": "target = \"00000111110000011111\"",
        "output": "3"
      },
      {
        "input": "target = \"0000000000111111111100000000001111111111\"",
        "output": "3"
      },
      {
        "input": "target = \"11111111111111111111111111\"",
        "output": "1"
      },
      {
        "input": "target = \"1010101010101010101010101010101010101010101010101010\"",
        "output": "52"
      },
      {
        "input": "target = \"000000000000000000000001\"",
        "output": "1"
      },
      {
        "input": "target = \"1100110011001100110011001100\"",
        "output": "14"
      },
      {
        "input": "target = \"00000000000000000000000000000000000000000000000000000000000000000\"",
        "output": "0"
      },
      {
        "input": "target = \"00000000000000000000000000\"",
        "output": "0"
      },
      {
        "input": "target = \"00110011001100110011\"",
        "output": "9"
      },
      {
        "input": "target = \"1111111111111111111111111111\"",
        "output": "1"
      },
      {
        "input": "target = \"11111111111111111110\"",
        "output": "2"
      },
      {
        "input": "target = \"11000000000000000001\"",
        "output": "3"
      },
      {
        "input": "target = \"111111111111111111111111111111111111111111111111\"",
        "output": "1"
      },
      {
        "input": "target = \"101010101010101010101010101010101010\"",
        "output": "36"
      },
      {
        "input": "target = \"0101010101010101010101010101\"",
        "output": "27"
      },
      {
        "input": "target = \"110110110110110110110110110110\"",
        "output": "20"
      },
      {
        "input": "target = \"111100001111000011110000\"",
        "output": "6"
      },
      {
        "input": "target = \"000111000111000111000111\"",
        "output": "7"
      },
      {
        "input": "target = \"100110011001100110011001\"",
        "output": "13"
      },
      {
        "input": "target = \"01010101010101010101010101010101010101\"",
        "output": "37"
      },
      {
        "input": "target = \"000000000000000000000000000000000000\"",
        "output": "0"
      },
      {
        "input": "target = \"10010010010010010010010010010010010010010010010010\"",
        "output": "34"
      },
      {
        "input": "target = \"1001001001001001001001001001001001001001001001001\"",
        "output": "33"
      },
      {
        "input": "target = \"01100110011001100110\"",
        "output": "10"
      },
      {
        "input": "target = \"11110000111100001111\"",
        "output": "5"
      },
      {
        "input": "target = \"111000111000111000111000\"",
        "output": "8"
      },
      {
        "input": "target = \"11111000001111100000111110000011111000001111100000\"",
        "output": "10"
      },
      {
        "input": "target = \"00000000000000000000000000000000000000000000000000\"",
        "output": "0"
      },
      {
        "input": "target = \"10101010101010101010101010\"",
        "output": "26"
      },
      {
        "input": "target = \"11001100110011001100110011\"",
        "output": "13"
      },
      {
        "input": "target = \"00110011001100110011001100110011001100110011001100\"",
        "output": "24"
      },
      {
        "input": "target = \"0111111111111111111111111111\"",
        "output": "1"
      },
      {
        "input": "target = \"01010101010101010101010101\"",
        "output": "25"
      },
      {
        "input": "target = \"11111000000000000000\"",
        "output": "2"
      },
      {
        "input": "target = \"1000000000000000000000000000\"",
        "output": "2"
      },
      {
        "input": "target = \"11111111111111111111111111111111111111111111\"",
        "output": "1"
      },
      {
        "input": "target = \"00000111110000011111000001111100000111110000011111\"",
        "output": "9"
      },
      {
        "input": "target = \"01001001001001001001001001001001\"",
        "output": "21"
      },
      {
        "input": "target = \"11111000001111100000\"",
        "output": "4"
      },
      {
        "input": "target = \"00000000000000000001\"",
        "output": "1"
      },
      {
        "input": "target = \"11011011011011011011\"",
        "output": "13"
      },
      {
        "input": "target = \"001001001001001001001001\"",
        "output": "15"
      },
      {
        "input": "target = \"11001100110011001100110011001100110011001100110011\"",
        "output": "25"
      },
      {
        "input": "target = \"001100110011001100110011001100110011001100110011\"",
        "output": "23"
      },
      {
        "input": "target = \"11001100110011001100110011001100\"",
        "output": "16"
      },
      {
        "input": "target = \"1001001001001001001001001001\"",
        "output": "19"
      },
      {
        "input": "target = \"00001111000011110000\"",
        "output": "4"
      },
      {
        "input": "target = \"111000111000111000111000111000111000111000111000111000111000111000\"",
        "output": "22"
      },
      {
        "input": "target = \"111111111111111111111111111111111111\"",
        "output": "1"
      },
      {
        "input": "target = \"0101010101010101010101010101010101010101010101010101\"",
        "output": "51"
      },
      {
        "input": "target = \"00000000000000000000000000000000000000000000\"",
        "output": "0"
      },
      {
        "input": "target = \"01110111011101110111\"",
        "output": "9"
      },
      {
        "input": "target = \"0110110110\"",
        "output": "6"
      },
      {
        "input": "target = \"00000111111111111111\"",
        "output": "1"
      },
      {
        "input": "target = \"000111000111000111\"",
        "output": "5"
      },
      {
        "input": "target = \"000011110000\"",
        "output": "2"
      },
      {
        "input": "target = \"11111111111111111111111111111111111111111111111110\"",
        "output": "2"
      },
      {
        "input": "target = \"01001001001001001001\"",
        "output": "13"
      },
      {
        "input": "target = \"111111111111111111111110\"",
        "output": "2"
      },
      {
        "input": "target = \"101010101010101010\"",
        "output": "18"
      },
      {
        "input": "target = \"100101010101010101010101\"",
        "output": "23"
      },
      {
        "input": "target = \"00000000001111111111000000000011111111110000000000\"",
        "output": "4"
      },
      {
        "input": "target = \"010101010101010101010101010101\"",
        "output": "29"
      },
      {
        "input": "target = \"0101010101010101010101010101010101\"",
        "output": "33"
      },
      {
        "input": "target = \"000000000000000000000000000000\"",
        "output": "0"
      },
      {
        "input": "target = \"01010101010101010101010101010101010101010101010101\"",
        "output": "49"
      },
      {
        "input": "target = \"0011001100110011001100110011\"",
        "output": "13"
      },
      {
        "input": "target = \"11001100110011001100\"",
        "output": "10"
      },
      {
        "input": "target = \"00001111111111110000\"",
        "output": "2"
      },
      {
        "input": "target = \"01001001001001001001001001001001001001001001001001\"",
        "output": "33"
      },
      {
        "input": "target = \"00000000001111111111\"",
        "output": "1"
      },
      {
        "input": "target = \"01001001001001001001001001001001001001001001\"",
        "output": "29"
      },
      {
        "input": "target = \"01010101010101010101010101010101\"",
        "output": "31"
      },
      {
        "input": "target = \"0000000000000000000000000000\"",
        "output": "0"
      },
      {
        "input": "target = \"11111111110000000000\"",
        "output": "2"
      },
      {
        "input": "target = \"110011001100110011\"",
        "output": "9"
      },
      {
        "input": "target = \"10010010010010010010\"",
        "output": "14"
      },
      {
        "input": "target = \"11111111111111111111\"",
        "output": "1"
      }
    ]
  },
  {
    "id": 2560,
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "problemDescription": "There are several consecutive houses along a street, each of which has some money inside. There is also a robber, who wants to steal money from the homes, but he refuses to steal from adjacent homes.\nThe capability of the robber is the maximum amount of money he steals from one house of all the houses he robbed.\nYou are given an integer array nums representing how much money is stashed in each house. More formally, the ith house from the left has nums[i] dollars.\nYou are also given an integer k, representing the minimum number of houses the robber will steal from. It is always possible to steal at least k houses.\nReturn the minimum capability of the robber out of all the possible ways to steal at least k houses.\n\u00a0\nExample 1:\n\nInput: nums = [2,3,5,9], k = 2\nOutput: 5\nExplanation: \nThere are three ways to rob at least 2 houses:\n- Rob the houses at indices 0 and 2. Capability is max(nums[0], nums[2]) = 5.\n- Rob the houses at indices 0 and 3. Capability is max(nums[0], nums[3]) = 9.\n- Rob the houses at indices 1 and 3. Capability is max(nums[1], nums[3]) = 9.\nTherefore, we return min(5, 9, 9) = 5.\n\nExample 2:\n\nInput: nums = [2,7,9,3,1], k = 2\nOutput: 2\nExplanation: There are 7 ways to rob the houses. The way which leads to minimum capability is to rob the house at index 0 and 4. Return max(nums[0], nums[4]) = 2.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n1 <= k <= (nums.length + 1)/2\n\n",
    "starterCode": "class Solution:\n    def minCapability(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,2,3,4,5], k = 3",
        "output": "5"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], k = 5",
        "output": "9"
      },
      {
        "input": "nums = [10,1,1,10,1,1,10], k = 3",
        "output": "10"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 4",
        "output": "5"
      },
      {
        "input": "nums = [10,20,30,40,50], k = 1",
        "output": "10"
      },
      {
        "input": "nums = [5,3,1,1,2,3], k = 2",
        "output": "2"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 5",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 3",
        "output": "5"
      },
      {
        "input": "nums = [2,7,9,3,1], k = 2",
        "output": "2"
      },
      {
        "input": "nums = [2,3,5,9], k = 2",
        "output": "5"
      },
      {
        "input": "nums = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3], k = 4",
        "output": "2"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], k = 15",
        "output": "10"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 5",
        "output": "9"
      },
      {
        "input": "nums = [10,5,15,20,25,30,35,40], k = 4",
        "output": "35"
      },
      {
        "input": "nums = [2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [50,100,150,200,250,300,350,400,450,500], k = 3",
        "output": "250"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "9"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 50",
        "output": "2"
      },
      {
        "input": "nums = [3,6,1,8,5,2,9,4,7,10], k = 4",
        "output": "4"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], k = 10",
        "output": "37"
      },
      {
        "input": "nums = [10, 5, 20, 25, 15, 30, 35, 40, 45, 50], k = 8",
        "output": "51"
      },
      {
        "input": "nums = [3, 5, 7, 2, 9, 1, 10, 8, 6, 4], k = 3",
        "output": "3"
      },
      {
        "input": "nums = [10, 2, 8, 4, 7, 3, 9, 5, 6, 1], k = 4",
        "output": "4"
      },
      {
        "input": "nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100], k = 3",
        "output": "1"
      },
      {
        "input": "nums = [10, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31], k = 6",
        "output": "29"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97], k = 10",
        "output": "67"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 6",
        "output": "11"
      },
      {
        "input": "nums = [1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [100,10,1,100,10,1,100,10,1,100], k = 4",
        "output": "100"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], k = 8",
        "output": "29"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [10, 1, 1, 10, 1, 1, 10, 1, 1, 10], k = 5",
        "output": "10"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000,1000000000], k = 2",
        "output": "1000000000"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10], k = 3",
        "output": "50"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50], k = 4",
        "output": "35"
      },
      {
        "input": "nums = [1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [8, 12, 15, 20, 25, 30, 35, 40, 45, 50, 55], k = 7",
        "output": "56"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], k = 10",
        "output": "38"
      },
      {
        "input": "nums = [8, 7, 6, 5, 4, 3, 2, 1], k = 3",
        "output": "5"
      },
      {
        "input": "nums = [1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 7",
        "output": "13"
      },
      {
        "input": "nums = [3, 5, 10, 2, 8, 14, 1, 11, 7, 6], k = 5",
        "output": "10"
      },
      {
        "input": "nums = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55], k = 5",
        "output": "50"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 5",
        "output": "900"
      },
      {
        "input": "nums = [8, 6, 7, 5, 3, 0, 9], k = 3",
        "output": "6"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], k = 15",
        "output": "3"
      },
      {
        "input": "nums = [3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10], k = 4",
        "output": "3"
      },
      {
        "input": "nums = [8, 3, 9, 2, 7, 4, 6, 1, 5, 10], k = 4",
        "output": "4"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 7",
        "output": "10"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 5",
        "output": "90"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], k = 6",
        "output": "22"
      },
      {
        "input": "nums = [1, 3, 1, 1, 2, 1, 5, 1, 4, 1], k = 4",
        "output": "1"
      },
      {
        "input": "nums = [2, 3, 7, 8, 4, 5, 6, 9], k = 3",
        "output": "6"
      },
      {
        "input": "nums = [10,2,9,4,7,3,8,5,6,1], k = 3",
        "output": "3"
      },
      {
        "input": "nums = [1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3], k = 8",
        "output": "3"
      },
      {
        "input": "nums = [9,2,5,7,1,3,8,6,4,10], k = 5",
        "output": "9"
      },
      {
        "input": "nums = [23,45,12,34,56,78,89,67,45,23,4,6,8,10,12,14,16,18,20,22], k = 6",
        "output": "20"
      },
      {
        "input": "nums = [7, 10, 4, 3, 20, 15], k = 3",
        "output": "15"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], k = 5",
        "output": "17"
      },
      {
        "input": "nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80], k = 10",
        "output": "98"
      },
      {
        "input": "nums = [2,1,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 3",
        "output": "500"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [3, 6, 2, 8, 7, 2, 5, 9, 4, 10], k = 4",
        "output": "4"
      },
      {
        "input": "nums = [3, 6, 7, 12, 14, 11, 14, 13, 15, 10, 11, 13], k = 4",
        "output": "11"
      },
      {
        "input": "nums = [1000000000,500000000,1000000000,500000000,1000000000,500000000,1000000000], k = 3",
        "output": "500000000"
      },
      {
        "input": "nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [100, 200, 300, 10, 20, 30, 400, 500, 600, 1000], k = 5",
        "output": "600"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], k = 7",
        "output": "26"
      },
      {
        "input": "nums = [1,3,2,5,7,6,4,8,9,10], k = 5",
        "output": "9"
      },
      {
        "input": "nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [5,3,5,3,5,3,5,3,5,3], k = 4",
        "output": "3"
      },
      {
        "input": "nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [100, 1, 200, 2, 300, 3, 400, 4, 500, 5], k = 3",
        "output": "3"
      },
      {
        "input": "nums = [9, 4, 1, 7, 3, 8, 5, 2, 6, 0], k = 4",
        "output": "3"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k = 6",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 5",
        "output": "9"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], k = 3",
        "output": "50"
      },
      {
        "input": "nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [1, 3, 1, 5, 1, 7, 1, 9], k = 4",
        "output": "1"
      },
      {
        "input": "nums = [5, 9, 7, 1, 3, 8, 6, 4, 2, 10, 1, 11, 13, 12, 14, 15, 16, 17, 18, 19], k = 6",
        "output": "7"
      },
      {
        "input": "nums = [9, 1, 5, 3, 7, 11, 15, 13, 17, 19], k = 4",
        "output": "13"
      },
      {
        "input": "nums = [15, 20, 10, 5, 1, 25, 30, 40, 50, 60], k = 5",
        "output": "50"
      },
      {
        "input": "nums = [1000000000,1,1000000000,1,1000000000,1,1000000000,1], k = 4",
        "output": "1"
      },
      {
        "input": "nums = [15,10,20,30,40,50,60,70,80,90,100], k = 5",
        "output": "80"
      },
      {
        "input": "nums = [1, 2, 100, 3, 4, 100, 5, 6, 100, 7, 8, 100, 9, 10, 100], k = 5",
        "output": "9"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 6",
        "output": "11"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10",
        "output": "19"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6], k = 5",
        "output": "5"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], k = 7",
        "output": "10"
      },
      {
        "input": "nums = [50, 10, 25, 60, 20, 30, 70, 5, 80, 1], k = 6",
        "output": "81"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 7",
        "output": "5"
      },
      {
        "input": "nums = [1,3,2,5,7,8,6,9,4,10], k = 3",
        "output": "4"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 5",
        "output": "17"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], k = 3",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 6",
        "output": "11"
      },
      {
        "input": "nums = [1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [10, 20, 10, 30, 10, 40, 10, 50, 10, 60], k = 3",
        "output": "10"
      },
      {
        "input": "nums = [50, 1, 51, 2, 52, 3, 53, 4, 54, 5, 55, 6, 56, 7, 57, 8, 58, 9, 59, 10], k = 5",
        "output": "5"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6], k = 5",
        "output": "5"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10], k = 4",
        "output": "70"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 7",
        "output": "5"
      },
      {
        "input": "nums = [8, 2, 4, 1, 6, 5, 3, 7, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 6",
        "output": "11"
      }
    ]
  },
  {
    "id": 1963,
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Greedy",
      "Two Pointers",
      "String"
    ],
    "problemDescription": "You are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.\nA string is called balanced if and only if:\n\nIt is the empty string, or\nIt can be written as AB, where both A and B are balanced strings, or\nIt can be written as [C], where C is a balanced string.\n\nYou may swap the brackets at any two indices any number of times.\nReturn the minimum number of swaps to make s balanced.\n\u00a0\nExample 1:\n\nInput: s = \"][][\"\nOutput: 1\nExplanation: You can make the string balanced by swapping index 0 with index 3.\nThe resulting string is \"[[]]\".\n\nExample 2:\n\nInput: s = \"]]][[[\"\nOutput: 2\nExplanation: You can do the following to make the string balanced:\n- Swap index 0 with index 4. s = \"[]][][\".\n- Swap index 1 with index 5. s = \"[[][]]\".\nThe resulting string is \"[[][]]\".\n\nExample 3:\n\nInput: s = \"[]\"\nOutput: 0\nExplanation: The string is already balanced.\n\n\u00a0\nConstraints:\n\nn == s.length\n2 <= n <= 106\nn is even.\ns[i] is either '[' or ']'.\nThe number of opening brackets '[' equals n / 2, and the number of closing brackets ']' equals n / 2.\n\n",
    "starterCode": "class Solution:\n    def minSwaps(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"[]][[]\"",
        "output": "1"
      },
      {
        "input": "s = \"[[[[]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]][[[]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"][][\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[][[\"",
        "output": "2"
      },
      {
        "input": "s = \"]]]][[[[\"",
        "output": "2"
      },
      {
        "input": "s = \"][[]][\"",
        "output": "1"
      },
      {
        "input": "s = \"[][][][]\"",
        "output": "0"
      },
      {
        "input": "s = \"[[[]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"[[[]]][[]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]][[][][\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[\"",
        "output": "2"
      },
      {
        "input": "s = \"[][]\"",
        "output": "0"
      },
      {
        "input": "s = \"[]\"",
        "output": "0"
      },
      {
        "input": "s = \"]][[\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[[]]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]][[[]\"",
        "output": "1"
      },
      {
        "input": "s = \"[[]][]\"",
        "output": "0"
      },
      {
        "input": "s = \"][[][]\"",
        "output": "1"
      },
      {
        "input": "s = \"[[[][]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]]]][[[[[[[]]]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]][[[[[[]]]]][[[]]]][[][[[[[]]]]]]]][[[[[]]]][[]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]]]][[[[[][][]]]]]][[[[[][][]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"[[[[[[]]]]]]][[[[[[[]]]]]]][[[[[[[]]]]]]][[[[[[[]]]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"][]]]][[[[[]][[]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]][[[[[[[[[[]]]]]]]]][[[[[[[]]]]]]][[[[[[[]]]]]]][[[[[[[]]]]]]][[[[[[[]]]]]]][[[[[[[]]]]]]][[[[[[[]]]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]][[[]]]]][[[[[]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[][[[[[]]]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[][][][]]]]]]][[[[[[[[[][][][]]]]]]][[[[[[[[[][][][]]]]]]]\"",
        "output": "4"
      },
      {
        "input": "s = \"]]][[[[]]]][[[[[]]]]][[[[]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[][]]][[[[[[[]]]]]][][][[]][[\"",
        "output": "2"
      },
      {
        "input": "s = \"]][[[]]][][[[[[[[[]]]]]][][[\"",
        "output": "2"
      },
      {
        "input": "s = \"]]][[[[[[[]]]]]]][[[[[]]]]]][[[[]]]]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]]]][[[[[[]]][]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]][[]][[]][[]][[]][[]][[]][[]][[]][[]][[]][[]][[]][[]][[]][[\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[[[]]]]]]]]]]]]]]][[[[[[[[[]]]]]]]]]]]]][[[[[[[[[]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"[[[[]]]]][[[[[]]]]][[[[[]]]]][[[[[]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]][[[]]][][[[]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]]]]]]]][[[[[[[[[[\"",
        "output": "5"
      },
      {
        "input": "s = \"[[][]]]][[[][][[]][][[]][[]]\"",
        "output": "1"
      },
      {
        "input": "s = \"[[]][[]][[]][[]][[]][[]][[]][[]][[]][[]][[]][[]][[]][[]][[]][[]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]][[[][]]][[[[]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]][[[][]]][[[[[[[]]]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[][]][[[\"",
        "output": "2"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[][]]]]]]]]][[[[[[[[[][]]]]]]]]][[[[[[[[[][]]]]]]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"[[[[]]]]][[[[]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"[[[[[[]]]]]]][[[[[]]]]][[[[[]]]]][[[[[]]]]][[[[[]]]]][[[[[]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[[[]]]]]]]]]]]]]]][[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]][[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]][[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]][[[[[[[]]]]]]][[[[[]]]]]][[[[[]]]]]]][[[[[]]]]][[[[[]]]]][[[[[]]]]]]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[[[[[]]]]]]][[[[[]]]]]][[[[[]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"[[[]]]]]][[[[]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]][[[[[[[][]]]]]]][[[[[][]]]]][[[[[][]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]][[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]][[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]][[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]][[]]][[[[][[\"",
        "output": "3"
      },
      {
        "input": "s = \"]]][[]][[[]][[[]][[[]][[[]][[[]][[[]][[[]][[[]][[]]]]]]]]]]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]][[][][][[][]][[]][[\"",
        "output": "2"
      },
      {
        "input": "s = \"]]][[[[]][]][][[][]][][[[]][]][][[[]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"[][][][][][][][][][][][][][][][][][][][][][][][]\"",
        "output": "0"
      },
      {
        "input": "s = \"]][[[]][[]][[[]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"[[[[[[[[]]]]]]]][[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]]]]][[[[[[\"",
        "output": "3"
      },
      {
        "input": "s = \"]]]][[[[[][]]][]][[[[[]]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]][[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]]]][[[[[]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[[[]]]]][[[[[[]]]]]]][[[[\"",
        "output": "3"
      },
      {
        "input": "s = \"]]]]][[[[[]]]][[\"",
        "output": "2"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[][][]][[]][]]]]]]][[[[[[[[[][][]][[]][]]]]]]][[[[[[[[[][][]][[]][]]]]]]][[[[[[[[[][]]]]]]]]]\"",
        "output": "3"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[][][]]]]]]][[[[[[[[[][][]]]]]]][[[[[[[[[][][]]]]]]][[[[[[[[[][]]]]]]]]]\"",
        "output": "4"
      },
      {
        "input": "s = \"]][[[[[[[]]]]]]][[[[[]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[]][[[[]]]][]]]]][][[[[]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[[]]][][[[]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[[[]]]]][[[[\"",
        "output": "3"
      },
      {
        "input": "s = \"]][[[[[][]]]]]][[[[[][]]]]]][[[[[][]]]]][[\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[[]]]]]]][[[[[[[]]]]]]]]][[[[[[[]]]]]]]]][[[[[[[]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[[[]]]]]]]]]]]]]]][[[[[[[[[]]]]]]]]]]]]][[[[[[[[[]]]]]]]]][[[[[[[[[]]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]][[[[[[[]]]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[]][][[[]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]][[[][]]][[\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]][[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]][[[[[]]]]]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]][[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]][[[[[[[[[[]]]]]]]]][[[[[[[[[[[]]]]]]]]]][[[[[[[[[[[]]]]]]]]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[[[[]]]]]]][[[[[[[]]]]]]]]][[[[[[[]]]]]]]]][[[[[[[]]]]]]]]][[[[[[[]]]]]]]]][[[[[[[]]]]]]]]][[[[[[[]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]][[[]]][][[\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[]][[]]]]][[[[[]][[]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[[[[[]]]]]]][[[]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[]]][[[]]]]][[[[[]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[][]][[[[[[[]]]]]][]\"",
        "output": "1"
      },
      {
        "input": "s = \"]][[]][[\"\"",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]]]][[[[[[]]]]][[[[]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]][[[[[][]]]]]][[[[[[[]]]]]][[[[[]]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]][[[[[][]]]]]][[[[]]]][[][[[[]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]][[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]][[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]][[[[[[]]]][]][[[[]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[][][]][[]][]]]][][[[[[[[[][][]][[]][]]]][][[[[[[[[][][]][[]][]]]][][[[[[[[[][]]]]]]]]]\"",
        "output": "6"
      },
      {
        "input": "s = \"]]][[[[[[[]]]]]]][[[[[]]]]]][[[[[]]]]]]][[[[[]]]]]]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[]]]][[[[\"",
        "output": "2"
      },
      {
        "input": "s = \"]]]][][][[[[\"",
        "output": "2"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]][[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]][[[[[[]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]][[[[[[]]]]]][[[]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[[[]]]]]]]]]]]]]]][[[[[[[[[]]]]]]]]]]]]][[[[[[[[[]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]][[[[[[]]]]][[[]]]][[][[[]]]][[[]]]][[[]]]][[[]]]][[]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]][[[[[][]]]]]][[\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[[[]]]]]]]]]]]]]]][[[[[[[[[]]]]]]]]]]]]][[[[[[[[[]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]][[[[[[[[[]]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]][[[[[]]]]][[[[[]]]]][[[[[]]]]][[[[[]]]]][[[[[]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]][[[[[[[][]]]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]][[[]][[[]][]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[[[[[][][]]]]]]][[[[[][][]]]]][[[[[][][]]]]]\"",
        "output": "0"
      },
      {
        "input": "s = \"]]][[[[[[[]]]]][[[[[[]]]]]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[[[[[[[[]]]]]]]]]]]]][[[[[[[]]]]]]]",
        "output": "Error: Solution.minSwaps() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"]]][[[[]][]]\"",
        "output": "1"
      },
      {
        "input": "s = \"]]][[[[[[[]]]]]]]]][[[[[[[[[]]]]]]]]]\"",
        "output": "0"
      }
    ]
  },
  {
    "id": 2743,
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "problemDescription": "You are given a string s consisting only of lowercase English letters. We call a substring special if it contains no character which has occurred at least twice (in other words, it does not contain a repeating character). Your task is to count the number of special substrings. For example, in the string \"pop\", the substring \"po\" is a special substring, however, \"pop\" is not special (since 'p' has occurred twice).\nReturn the number of special substrings.\nA substring is a contiguous sequence of characters within a string. For example, \"abc\" is a substring of \"abcd\", but \"acd\" is not.\n\u00a0\nExample 1:\n\nInput: s = \"abcd\"\nOutput: 10\nExplanation: Since each character occurs once, every substring is a special substring. We have 4 substrings of length one, 3 of length two, 2 of length three, and 1 substring of length four. So overall there are 4 + 3 + 2 + 1 = 10 special substrings.\n\nExample 2:\n\nInput: s = \"ooo\"\nOutput: 3\nExplanation: Any substring with a length of at least two contains a repeating character. So we have to count the number of substrings of length one, which is 3.\n\nExample 3:\n\nInput: s = \"abab\"\nOutput: 7\nExplanation: Special substrings are as follows (sorted by their start positions):\nSpecial substrings of length 1: \"a\", \"b\", \"a\", \"b\"\nSpecial substrings of length 2: \"ab\", \"ba\", \"ab\"\nAnd it can be shown that there are no special substrings with a length of at least three. So the answer would be 4 + 3 = 7.\n\u00a0\nConstraints:\n\n1 <= s.length <= 105\ns consists of lowercase English letters\n\n",
    "starterCode": "class Solution:\n    def numberOfSpecialSubstrings(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"zzzzzzzzz\"",
        "output": "9"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "351"
      },
      {
        "input": "s = \"abacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacb\"",
        "output": "200"
      },
      {
        "input": "s = \"pp\"",
        "output": "2"
      },
      {
        "input": "s = \"pqpqs\"",
        "output": "10"
      },
      {
        "input": "s = \"a\"",
        "output": "1"
      },
      {
        "input": "s = \"abab\"",
        "output": "7"
      },
      {
        "input": "s = \"abcabcabc\"",
        "output": "24"
      },
      {
        "input": "s = \"p\"",
        "output": "1"
      },
      {
        "input": "s = \"pqpqrp\"",
        "output": "13"
      },
      {
        "input": "s = \"xyzxyzxyz\"",
        "output": "24"
      },
      {
        "input": "s = \"zzzzzzzzzz\"",
        "output": "10"
      },
      {
        "input": "s = \"ooo\"",
        "output": "3"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "53"
      },
      {
        "input": "s = \"abcd\"",
        "output": "10"
      },
      {
        "input": "s = \"hello\"",
        "output": "9"
      },
      {
        "input": "s = \"aabbcc\"",
        "output": "8"
      },
      {
        "input": "s = \"unique\"",
        "output": "19"
      },
      {
        "input": "s = \"pppppp\"",
        "output": "6"
      },
      {
        "input": "s = \"abacaba\"",
        "output": "15"
      },
      {
        "input": "s = \"abcdefg\"",
        "output": "28"
      },
      {
        "input": "s = \"abcdabcdeabcdabcdeabcdabcde\"",
        "output": "113"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "150"
      },
      {
        "input": "s = \"abcdefghijkabcdefghijkabcdefghijkabcdefghijk\"",
        "output": "429"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghijabcdefghij\"",
        "output": "355"
      },
      {
        "input": "s = \"aabbccddeeffaabbccddeeffaabbccddeeff\"",
        "output": "53"
      },
      {
        "input": "s = \"aabbaaabbbaaaabbbaabbbaaaabaaabaaaabbaaababbaaabaaabababaa\"",
        "output": "84"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "1053"
      },
      {
        "input": "s = \"abacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabad\"",
        "output": "258"
      },
      {
        "input": "s = \"abacabadabacabadabacabadabacabadabacabadabacabadabacaba\"",
        "output": "135"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbazyxwvutabcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbazyxwvutabcdefghijklmnopqrstuvwxyzzyxwvut\"",
        "output": "2413"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "618"
      },
      {
        "input": "s = \"abbaabbaabbaabbaabbaabba\"",
        "output": "36"
      },
      {
        "input": "s = \"abcababcababcababcababcababcababcababcababcababcababcababc\"",
        "output": "149"
      },
      {
        "input": "s = \"abcdeffedcbaabcdeffedcbaabcdeffedcbaabcdeffedcbaabcdeffedcba\"",
        "output": "210"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "195"
      },
      {
        "input": "s = \"abcdefghijkabcdeghijklmnopqrstuvwxyzabcdeghijklmnopqrstuvwxyz\"",
        "output": "1066"
      },
      {
        "input": "s = \"abababababababababababababababababababababababababababababababab\"",
        "output": "127"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyzzyxwvut\"",
        "output": "730"
      },
      {
        "input": "s = \"abababababababababababababababab\"",
        "output": "63"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbazyxwvutabcdefghijklmnopqrstuvwxyzzyxwvut\"",
        "output": "1396"
      },
      {
        "input": "s = \"aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabb\"",
        "output": "95"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "177"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "159"
      },
      {
        "input": "s = \"aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab\"",
        "output": "112"
      },
      {
        "input": "s = \"mnopqrstuvwxyzabcdefghijkl\"",
        "output": "351"
      },
      {
        "input": "s = \"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde\"",
        "output": "215"
      },
      {
        "input": "s = \"aaaaabbbbbcccccdddddeeeee\"",
        "output": "29"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\"",
        "output": "87"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "141"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "420"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd\"",
        "output": "43"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "702"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzz\"",
        "output": "79"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "330"
      },
      {
        "input": "s = \"abcdabcdeabcdabcdeabcde\"",
        "output": "97"
      },
      {
        "input": "s = \"abababababababababababababababababababababab\"",
        "output": "87"
      },
      {
        "input": "s = \"abcdefggfedcba\"",
        "output": "56"
      },
      {
        "input": "s = \"abcdefedcbafedcba\"",
        "output": "77"
      },
      {
        "input": "s = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\"",
        "output": "319"
      },
      {
        "input": "s = \"abcdeffedcba\"",
        "output": "42"
      },
      {
        "input": "s = \"thisproblemisreallyhardbutinteresting\"",
        "output": "215"
      },
      {
        "input": "s = \"uniquecharactersetuniquecharactersetuniquecharacterset\"",
        "output": "275"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzzzyyxxwwvvuuttssrrqqppllmnkkjjiihhggeeddbbccaa\"",
        "output": "150"
      },
      {
        "input": "s = \"aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabb\"",
        "output": "71"
      },
      {
        "input": "s = \"anagramsofanagramsofanagramsofanagramsofanagramsof\"",
        "output": "217"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "1404"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzabcdefghij\"",
        "output": "142"
      },
      {
        "input": "s = \"xyzzzzxyzzzzxyzzzz\"",
        "output": "31"
      },
      {
        "input": "s = \"abababababababababababababababababababababababababababababa\"",
        "output": "117"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "168"
      },
      {
        "input": "s = \"aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabb\"",
        "output": "227"
      },
      {
        "input": "s = \"ababababababababababababababababababababab\"",
        "output": "83"
      },
      {
        "input": "s = \"abacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabad\"",
        "output": "218"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "56"
      },
      {
        "input": "s = \"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde\"",
        "output": "240"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcbaedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "842"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "1703"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzabcdefghijklmnopqrstuvwxyz\"",
        "output": "453"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "70"
      },
      {
        "input": "s = \"aabacbadbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbac\"",
        "output": "191"
      },
      {
        "input": "s = \"abacabadabacabadabacabadabacabadabacabad\"",
        "output": "98"
      },
      {
        "input": "s = \"aaaaabbbbbccccdddddeeeeefffff\"",
        "output": "34"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzuniquecharacterset\"",
        "output": "162"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "54"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "123"
      },
      {
        "input": "s = \"banana\"",
        "output": "12"
      },
      {
        "input": "s = \"aabbccddeeffaabbccddeeffaabbccddeeffaabbccddeeffaabbccddeeff\"",
        "output": "89"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzqqwweerrttyyuuiiooppaassddffgg\"",
        "output": "122"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbccccccccccaaaaaaaaaabbbbbbbbbbcccccccccc\"",
        "output": "65"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzzzzzzzzzzzz\"",
        "output": "89"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "186"
      },
      {
        "input": "s = \"abacabadabacabadabacabadabacabadabacabadabacabadabacabad\"",
        "output": "138"
      },
      {
        "input": "s = \"abacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabad\"",
        "output": "158"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "77"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbazyxwvut\"",
        "output": "884"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "250"
      },
      {
        "input": "s = \"abacabadabacabadabacabadabacabadabacabadabacabad\"",
        "output": "118"
      },
      {
        "input": "s = \"mnopqrspqronmlkjihgfedcbazyxwvuttsrqponmlkjihgfedcba\"",
        "output": "591"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "351"
      },
      {
        "input": "s = \"thequickbrownfoxjumpsoverthelazydog\"",
        "output": "271"
      },
      {
        "input": "s = \"abacabadabacabadabacabad\"",
        "output": "58"
      },
      {
        "input": "s = \"ababababababababababababababababababababababababababababababababababababababab\"",
        "output": "155"
      },
      {
        "input": "s = \"aaaabbbbccccaaaabbbbccccaaaabbbbccccaaaabbbbccccaaaabbbbcccc\"",
        "output": "74"
      },
      {
        "input": "s = \"aaaaaabbbaaaaabbbbccccccaaaaaabbbaaaaabbbbcccccc\"",
        "output": "57"
      },
      {
        "input": "s = \"abcdefghijkllkjihgfedcba\"",
        "output": "156"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbccccccccccaaaaaaaaaabbbbbbbbbbccccccccccaaaaaaaaaabbbbbbbbbbcccccccccc\"",
        "output": "98"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzabcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "804"
      },
      {
        "input": "s = \"longestsubstringwithoutrepeatingcharacters\"",
        "output": "215"
      },
      {
        "input": "s = \"aabbaabbccddeeffaabbccddeeff\"",
        "output": "41"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzmnopqrstuvwxyz\"",
        "output": "195"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm\"",
        "output": "1027"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "53"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzzzzzzzzz\"",
        "output": "86"
      },
      {
        "input": "s = \"racecar\"",
        "output": "19"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "234"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcbaedcbazyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyzzyxwvut\"",
        "output": "1221"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmnbvcxzlkjhgfdsapoiuytrewq\"",
        "output": "701"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "1027"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefg\"",
        "output": "371"
      },
      {
        "input": "s = \"pneumonoultramicroscopicsilicovolcanoconiosis\"",
        "output": "194"
      },
      {
        "input": "s = \"abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef\"",
        "output": "381"
      },
      {
        "input": "s = \"abcdeabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "227"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "429"
      },
      {
        "input": "s = \"abacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacaba\"",
        "output": "180"
      },
      {
        "input": "s = \"aabbaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "83"
      },
      {
        "input": "s = \"mississippi\"",
        "output": "20"
      },
      {
        "input": "s = \"hellohellohellohello\"",
        "output": "51"
      },
      {
        "input": "s = \"abcdefagfedcba\"",
        "output": "66"
      },
      {
        "input": "s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\"",
        "output": "339"
      },
      {
        "input": "s = \"abcdcbaabcdcbaabcdcba\"",
        "output": "57"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "50"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbazyxwvutabc\"",
        "output": "911"
      }
    ]
  },
  {
    "id": 2135,
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "problemDescription": "You are given two 0-indexed arrays of strings startWords and targetWords. Each string consists of lowercase English letters only.\nFor each string in targetWords, check if it is possible to choose a string from startWords and perform a conversion operation on it to be equal to that from targetWords.\nThe conversion operation is described in the following two steps:\n\nAppend any lowercase letter that is not present in the string to its end.\n\n\t\nFor example, if the string is \"abc\", the letters 'd', 'e', or 'y' can be added to it, but not 'a'. If 'd' is added, the resulting string will be \"abcd\".\n\n\nRearrange the letters of the new string in any arbitrary order.\n\t\nFor example, \"abcd\" can be rearranged to \"acbd\", \"bacd\", \"cbda\", and so on. Note that it can also be rearranged to \"abcd\" itself.\n\n\n\nReturn the number of strings in targetWords that can be obtained by performing the operations on any string of startWords.\nNote that you will only be verifying if the string in targetWords can be obtained from a string in startWords by performing the operations. The strings in startWords do not actually change during this process.\n\u00a0\nExample 1:\n\nInput: startWords = [\"ant\",\"act\",\"tack\"], targetWords = [\"tack\",\"act\",\"acti\"]\nOutput: 2\nExplanation:\n- In order to form targetWords[0] = \"tack\", we use startWords[1] = \"act\", append 'k' to it, and rearrange \"actk\" to \"tack\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"act\".\n  Note that \"act\" does exist in startWords, but we must append one letter to the string before rearranging it.\n- In order to form targetWords[2] = \"acti\", we use startWords[1] = \"act\", append 'i' to it, and rearrange \"acti\" to \"acti\" itself.\n\nExample 2:\n\nInput: startWords = [\"ab\",\"a\"], targetWords = [\"abc\",\"abcd\"]\nOutput: 1\nExplanation:\n- In order to form targetWords[0] = \"abc\", we use startWords[0] = \"ab\", add 'c' to it, and rearrange it to \"abc\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"abcd\".\n\n\u00a0\nConstraints:\n\n1 <= startWords.length, targetWords.length <= 5 * 104\n1 <= startWords[i].length, targetWords[j].length <= 26\nEach string of startWords and targetWords consists of lowercase English letters only.\nNo letter occurs more than once in any string of startWords or targetWords.\n\n",
    "starterCode": "class Solution:\n    def wordCount(self, startWords: List[str], targetWords: List[str]) -> int:\n        ",
    "testCases": [
      {
        "input": "startWords = [\"ant\",\"act\",\"tack\"], targetWords = [\"tack\",\"act\",\"acti\"]",
        "output": "2"
      },
      {
        "input": "startWords = [\"ab\",\"a\"], targetWords = [\"abc\",\"abcd\"]",
        "output": "1"
      },
      {
        "input": "startWords = [\"pqrst\",\"vwxyz\",\"abcdef\"], targetWords = [\"qrstuvw\",\"vwxyzab\",\"abcdefg\",\"pqrstuv\",\"mnopqr\"]",
        "output": "1"
      },
      {
        "input": "startWords = [\"abcdefghijklmnopqrstuvwxyz\"[2:-2]], targetWords = [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyza\", \"abcdefghijklmnopqrstuvwxyzab\"]",
        "output": "Error: Solution.wordCount() missing 1 required positional argument: 'startWords'"
      },
      {
        "input": "startWords = [\"python\",\"java\",\"c\"], targetWords = [\"pythonx\",\"javaz\",\"cb\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"abcdexyz\",\"mnopqr\",\"stuv\"], targetWords = [\"abcdexyzw\",\"mnopqrs\",\"stuvq\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"python\",\"java\",\"csharp\"], targetWords = [\"pythonic\",\"javacoffee\",\"csharptool\",\"pythonjava\",\"javacsharp\"]",
        "output": "0"
      },
      {
        "input": "startWords = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\"], targetWords = [\"abcd\",\"abce\",\"abcf\",\"abck\",\"abcm\"]",
        "output": "5"
      },
      {
        "input": "startWords = [\"python\", \"java\", \"c++\"], targetWords = [\"pythona\", \"javab\", \"c++c\", \"pythonb\", \"javac\", \"c++d\"]",
        "output": "Error: negative shift count"
      },
      {
        "input": "startWords = [\"xyz\",\"uvw\",\"rst\"], targetWords = [\"xyza\",\"uvwq\",\"rstv\",\"rstw\"]",
        "output": "4"
      },
      {
        "input": "startWords = [\"abcdefghijklmnopqrstuvwxyz\"[:i] for i in range(1, 26)], targetWords = [\"abcdefghijklmnopqrstuvwxyz\"[:i+1] for i in range(1, 26)]",
        "output": "Error: Solution.wordCount() missing 2 required positional arguments: 'startWords' and 'targetWords'"
      },
      {
        "input": "startWords = [\"abcd\",\"bcde\",\"cdef\"], targetWords = [\"abcde\",\"bcdefg\",\"abcdef\",\"bcd\"]",
        "output": "1"
      },
      {
        "input": "startWords = [\"a\",\"bc\",\"def\",\"ghij\",\"klmno\"], targetWords = [\"ab\",\"bcd\",\"cdef\",\"defgh\",\"efghij\",\"fghijk\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"abcde\",\"fghij\",\"klmno\"], targetWords = [\"bcdef\",\"ghijk\",\"klmnoa\",\"mnopqr\",\"stuvwx\"]",
        "output": "1"
      },
      {
        "input": "startWords = [\"hello\", \"world\", \"abc\"], targetWords = [\"helloa\", \"worldb\", \"abcd\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"mnopqr\",\"stuvwx\",\"yzabcd\"], targetWords = [\"mnopqrs\",\"stuvwxy\",\"yzabcde\",\"mnopqrst\",\"stuvwxyz\",\"yzabcdef\",\"mnopqrstuv\",\"stuvwxyzab\",\"yzabcdefg\",\"mnopqrstu\",\"stuvwxyzabc\",\"yzabcdefg\",\"mnopqrstuvw\",\"stuvwxyzabcd\",\"yzabcdefgh\",\"mnopqrstuvwx\",\"stuvwxyzabcde\",\"yzabcdefgij\",\"mnopqrstuvwxy\",\"stuvwxyzabcdef\",\"yzabcdefgijk\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"xyz\",\"uvw\",\"qrst\"], targetWords = [\"xyza\",\"uvwxy\",\"qrstuv\",\"qrstuvw\",\"uvwq\"]",
        "output": "2"
      },
      {
        "input": "startWords = [\"mnopqr\",\"stuvwx\",\"yzabcd\",\"efghij\",\"klmno\"], targetWords = [\"mnopqrs\",\"stuvwxy\",\"yzabcdx\",\"efghijk\",\"klmnop\",\"abcdefgh\"]",
        "output": "5"
      },
      {
        "input": "startWords = [\"abc\",\"def\",\"ghi\"], targetWords = [\"abcd\",\"abcf\",\"defg\",\"ghij\"]",
        "output": "4"
      },
      {
        "input": "targetWords",
        "output": "Error: Solution.wordCount() missing 2 required positional arguments: 'startWords' and 'targetWords'"
      },
      {
        "input": "startWords = [\"abc\",\"def\",\"ghi\"], targetWords = [\"abcd\",\"efg\",\"hij\",\"defg\",\"ghik\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"xyz\",\"mnop\",\"qrst\"], targetWords = [\"xyzw\",\"mnopq\",\"qrstuvw\"]",
        "output": "2"
      },
      {
        "input": "startWords = [\"a\",\"b\",\"c\",\"d\"], targetWords = [\"ab\",\"bc\",\"cd\",\"da\",\"abc\",\"bcd\",\"cda\",\"dab\"]",
        "output": "4"
      },
      {
        "input": "startWords = [\"abcdefghijklmnopqrstuvwxyz\"[1:-1]], targetWords = [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyza\"]",
        "output": "Error: Solution.wordCount() missing 1 required positional argument: 'startWords'"
      },
      {
        "input": "startWords = [\"abcdefghij\",\"klmnopqr\",\"stuvwxyz\"], targetWords = [\"abcdefghijk\",\"klmnopqrs\",\"stuvwxyzab\",\"abcdefghijl\",\"klmnopqrt\",\"stuvwxyzabc\",\"abcdefghijm\",\"klmnopqru\",\"stuvwxyzabcd\",\"abcdefghijn\",\"klmnopqrv\",\"stuvwxyzabcde\",\"abcdefghijo\",\"klmnopqrw\",\"stuvwxyzabcdef\",\"abcdefghijp\",\"klmnopqrx\",\"stuvwxyzabcdefg\",\"abcdefghirq\",\"klmnopqry\",\"stuvwxyzabcdefgh\",\"abcdefghirs\",\"klmnopqrz\",\"stuvwxyzabcdefghi\",\"abcdefghirt\",\"klmnopqs\",\"stuvwxyzabcdefghij\",\"abcdefghiru\",\"klmnopqt\",\"stuvwxyzabcdefghijk\",\"abcdefghirv\",\"klmnopqu\",\"stuvwxyzabcdefghijl\",\"abcdefghirw\",\"klmnopqv\",\"stuvwxyzabcdefghijm\",\"abcdefghirx\",\"klmnopqw\",\"stuvwxyzabcdefghijn\",\"abcdefghiry\",\"klmnopqx\",\"stuvwxyzabcdefghijo\",\"abcdefghirz\",\"klmnopqy\",\"stuvwxyzabcdefghijp\",\"klmnopqz\",\"stuvwxyzabcdefghirq\"]",
        "output": "14"
      },
      {
        "input": "startWords = [\"quick\",\"brown\",\"fox\"], targetWords = [\"quicks\",\"brownf\",\"foxj\",\"quickm\",\"brownx\"]",
        "output": "5"
      },
      {
        "input": "startWords = [\"a\",\"b\",\"c\"], targetWords = [\"ab\",\"bc\",\"ca\",\"abc\",\"abcd\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"abc\",\"def\",\"ghi\"], targetWords = [\"abcd\",\"efg\",\"ghij\"]",
        "output": "2"
      },
      {
        "input": "startWords = [\"zebra\",\"dog\",\"cat\"], targetWords = [\"zebrao\",\"doge\",\"taco\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], targetWords = [\"ab\", \"bc\", \"cd\", \"de\", \"ef\", \"fg\", \"gh\", \"ha\"]",
        "output": "8"
      },
      {
        "input": "startWords = [\"abcdefgh\",\"ijklmnop\",\"qrstuvwxyz\"], targetWords = [\"abcdefghi\",\"ijklmnopq\",\"qrstuvwxyzx\",\"abcdefghjkl\",\"ijklmnopqr\"]",
        "output": "2"
      },
      {
        "input": "startWords = [\"xyz\",\"abc\",\"uvw\",\"def\",\"ghi\"], targetWords = [\"xyzab\",\"uvwxy\",\"defgh\",\"abcdef\",\"mnopq\"]",
        "output": "0"
      },
      {
        "input": "startWords = [\"pqr\",\"stu\",\"vwx\"], targetWords = [\"pqrs\",\"stuv\",\"vwxy\",\"pqrst\",\"stuvw\",\"vwxys\",\"mnopq\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"quick\",\"brown\",\"fox\"], targetWords = [\"quickly\",\"brownly\",\"foxes\",\"quickbrown\",\"brownfox\"]",
        "output": "0"
      },
      {
        "input": "startWords = [\"a\",\"b\",\"c\",\"d\"], targetWords = [\"ab\",\"bc\",\"cd\",\"abc\",\"abcd\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"aabbcc\",\"ddeeff\",\"gghhii\"], targetWords = [\"aabbccx\",\"ddeeffx\",\"gghhia\",\"ddeeffg\",\"gghhiih\"]",
        "output": "2"
      },
      {
        "input": "startWords = [\"abcdef\",\"ghijkl\",\"mnopqr\",\"stuvwx\"], targetWords = [\"abcdefg\",\"ghijklm\",\"mnopqrs\",\"stuvwxz\",\"abcdefghijklmnopqrstuvwxyza\",\"ghijklmnopqrstuvwxyz\",\"mnopqrstuvwxyzabc\",\"stuvwxyzmnopqr\"]",
        "output": "4"
      },
      {
        "input": "startWords = [\"abc\",\"de\",\"fgh\",\"xyz\"], targetWords = [\"abcd\",\"def\",\"efg\",\"xyzz\"]",
        "output": "2"
      },
      {
        "input": "startWords = [\"jump\",\"over\",\"lazy\"], targetWords = [\"jumpo\",\"overj\",\"lazyr\",\"jumpr\",\"overv\"]",
        "output": "4"
      },
      {
        "input": "startWords = [\"mnop\",\"qrst\",\"uvwx\"], targetWords = [\"mnopq\",\"qrstu\",\"vwxyz\",\"mnopqr\",\"qrstuv\"]",
        "output": "2"
      },
      {
        "input": "startWords = [\"abcd\", \"efgh\", \"ijkl\"], targetWords = [\"abcde\", \"efghi\", \"ijklm\", \"abcdx\", \"efghy\", \"ijklz\"]",
        "output": "6"
      },
      {
        "input": "startWords",
        "output": "Error: Solution.wordCount() missing 2 required positional arguments: 'startWords' and 'targetWords'"
      },
      {
        "input": "startWords = [\"hello\",\"world\",\"abc\"], targetWords = [\"helloz\",\"worldy\",\"abcd\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"mnop\",\"qrst\",\"uvwx\"], targetWords = [\"mnopq\",\"qrstuv\",\"uvwxy\",\"mnopqr\",\"qrstuvw\",\"uvwxzy\",\"mnopqrst\",\"qrstuvwx\",\"uvwxyza\",\"mnopqrstuvwxyz\"]",
        "output": "2"
      },
      {
        "input": "startWords = [\"programming\",\"is\",\"fun\"], targetWords = [\"programmings\",\"isis\",\"funny\",\"programmingis\",\"isfun\"]",
        "output": "0"
      },
      {
        "input": "startWords = [\"jump\",\"over\",\"lazy\"], targetWords = [\"jumped\",\"overly\",\"lazily\",\"jumpover\",\"overlazy\"]",
        "output": "0"
      },
      {
        "input": "startWords = [\"programming\"[i:] for i in range(len(\"programming\"))], targetWords = [\"programming\"[i:] + chr(ord('a') + i % 26) for i in range(len(\"programming\"))]",
        "output": "Error: Solution.wordCount() missing 2 required positional arguments: 'startWords' and 'targetWords'"
      },
      {
        "input": "startWords = [\"abcdefghij\"], targetWords = [\"abcdefghijk\",\"abcdefghijl\",\"abcdefghijm\",\"abcdefghijn\",\"abcdefghijo\",\"abcdefghijp\",\"abcdefghijq\",\"abcdefghijr\",\"abcdefghjis\",\"abcdefghijt\",\"abcdefghiju\",\"abcdefghijv\",\"abcdefghijw\",\"abcdefghijx\",\"abcdefghijy\",\"abcdefghijz\"]",
        "output": "16"
      },
      {
        "input": "startWords = [\"abc\", \"bcd\", \"efg\"], targetWords = [\"abcd\", \"bcde\", \"efgh\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"zebra\",\"panda\",\"giraffe\"], targetWords = [\"zebrac\",\"pandaf\",\"giraffeb\",\"zebrad\",\"pandaq\"]",
        "output": "5"
      },
      {
        "input": "startWords = [\"jump\",\"over\",\"lazy\"], targetWords = [\"jumper\",\"overt\",\"lazier\"]",
        "output": "1"
      },
      {
        "input": "startWords = [\"a\",\"b\",\"c\"], targetWords = [\"ab\",\"bc\",\"ca\",\"abc\",\"abcd\",\"abcde\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"xyz\",\"wxy\",\"uvw\"], targetWords = [\"xyza\",\"wxyb\",\"uvwz\",\"uvwxy\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"abcdefgh\",\"ijklmnop\",\"qrstuvwxyz\",\"abcxyz\",\"uvwxy\"], targetWords = [\"abcdefghi\",\"ijklmnopq\",\"qrstuvwxyzx\",\"abcxyzw\",\"uvwxyza\",\"mnopqrstu\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"abcd\",\"efgh\",\"ijkl\"], targetWords = [\"abcde\",\"efghi\",\"jklmn\",\"abcd\"]",
        "output": "2"
      },
      {
        "input": "startWords = [\"abcd\",\"efgh\",\"ijkl\"], targetWords = [\"abcde\",\"efghi\",\"ijklm\",\"mnop\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"xyz\",\"uvw\",\"rst\"], targetWords = [\"xyza\",\"uvwq\",\"rstu\",\"rstuv\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"abc\",\"def\",\"ghi\"], targetWords = [\"abcd\",\"defg\",\"ghij\",\"hijk\",\"mnop\",\"qrst\",\"uvw\",\"xyz\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"quick\",\"brown\",\"fox\"], targetWords = [\"quickly\",\"brownie\",\"foxy\",\"quicklybrown\",\"brownief\",\"quickbrown\",\"quickfox\",\"brownfox\"]",
        "output": "1"
      },
      {
        "input": "startWords = [\"abcdefghijklmnopqrstuvwxyz\"], targetWords = [\"abcdefghijklmnopqrstuvwxyza\",\"abcdefghijklmnopqrstuvwxyzb\"]",
        "output": "0"
      },
      {
        "input": "startWords = [\"quick\",\"brown\",\"fox\"], targetWords = [\"quickly\",\"brownish\",\"foxy\"]",
        "output": "1"
      },
      {
        "input": "startWords = [\"apple\",\"banana\",\"cherry\"], targetWords = [\"appleb\",\"bananac\",\"cherryd\",\"applef\",\"bananag\"]",
        "output": "4"
      },
      {
        "input": "startWords = [\"abcd\",\"efgh\",\"ijkl\"], targetWords = [\"abcde\",\"efghi\",\"ijklm\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"one\",\"two\",\"three\"], targetWords = [\"onet\",\"twot\",\"threet\",\"oneto\",\"twoto\",\"threeto\",\"onetwo\",\"twotwo\",\"threetwo\",\"onetwothree\",\"twotwothree\",\"threetwothree\",\"onetwofour\",\"twotwofour\",\"threetwofour\"]",
        "output": "1"
      },
      {
        "input": "startWords = [\"abcd\",\"efgh\",\"ijkl\"], targetWords = [\"abcde\",\"efghi\",\"ijklm\",\"mnopq\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"hello\",\"world\"], targetWords = [\"hellow\",\"worlds\",\"dlrow\"]",
        "output": "2"
      },
      {
        "input": "startWords = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], targetWords = [\"ab\",\"bc\",\"cd\",\"de\",\"ef\",\"fg\",\"gh\",\"hi\",\"ij\",\"jk\",\"kl\",\"lm\",\"mn\",\"no\",\"op\",\"pq\",\"qr\",\"rs\",\"st\",\"tu\",\"uv\",\"vw\",\"wx\",\"xy\",\"yz\",\"za\"]",
        "output": "26"
      },
      {
        "input": "startWords = [\"zyxwvutsrqponmlkjihgfedcba\"], targetWords = [\"zyxwvutsrqponmlkjihgfedcbaz\",\"zyxwvutsrqponmlkjihgfedcbay\",\"zyxwvutsrqponmlkjihgfedcbax\",\"zyxwvutsrqponmlkjihgfedcbaw\"]",
        "output": "0"
      },
      {
        "input": "startWords = [\"pqr\",\"stu\",\"vwx\",\"yz\",\"abc\"], targetWords = [\"pqrs\",\"stuv\",\"vwxy\",\"yzab\",\"uvwxy\",\"mnopq\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"abcd\",\"efgh\",\"ijkl\",\"mnop\"], targetWords = [\"abcde\",\"efghi\",\"ijklm\",\"nopqr\"]",
        "output": "3"
      },
      {
        "input": "startWords = [\"hello\",\"world\"], targetWords = [\"ehllo\",\"dlrow\",\"owrld\",\"helloa\",\"worldb\"]",
        "output": "2"
      },
      {
        "input": "startWords = [\"a\",\"b\",\"c\",\"d\"], targetWords = [\"ab\",\"bc\",\"cd\",\"de\",\"ef\",\"fg\",\"gh\",\"hi\",\"ij\",\"jk\",\"kl\",\"lm\",\"mn\",\"no\",\"op\",\"pq\",\"qr\",\"rs\",\"st\",\"tu\",\"uv\",\"vw\",\"wx\",\"xy\",\"yz\",\"za\"]",
        "output": "5"
      },
      {
        "input": "startWords = [\"mnopq\",\"rstuv\",\"wxyz\"], targetWords = [\"mnopqr\",\"rstuvw\",\"wxyza\",\"mnopqs\",\"rstuvx\",\"wxyzab\",\"mnopqt\",\"rstuvy\",\"wxyzac\",\"mnopqu\",\"rstuvz\",\"wxyzad\",\"mnopqv\",\"rstuvw\",\"wxyzae\"]",
        "output": "11"
      },
      {
        "input": "startWords = [\"abcdefghijklmnopqrstuvwxyz\"], targetWords = [\"abcdefghijklmnopqrstuvwxyza\",\"abcdefghijklmnopqrstuvwxyzb\",\"abcdefghijklmnopqrstuvwxyzc\"]",
        "output": "0"
      },
      {
        "input": "startWords = [\"abcdefghijklmnopqrstuvwxyz\"], targetWords = [\"abcdefghijklmnopqrstuvwxyza\",\"abcdefghijklmnopqrstuvwxyzb\",\"abcdefghijklmnopqrstuvwxyzc\",\"abcdefghijklmnopqrstuvwxyzd\",\"abcdefghijklmnopqrstuvwxyze\",\"abcdefghijklmnopqrstuvwxyzf\",\"abcdefghijklmnopqrstuvwxy zg\",\"abcdefghijklmnopqrstuvwxyzh\",\"abcdefghijklmnopqrstuvwxyzi\",\"abcdefghijklmnopqrstuvwxyzj\",\"abcdefghijklmnopqrstuvwxyzk\",\"abcdefghijklmnopqrstuvwxyzl\",\"abcdefghijklmnopqrstuvwxyzm\",\"abcdefghijklmnopqrstuvwxyzn\",\"abcdefghijklmnopqrstuvwxyzo\",\"abcdefghijklmnopqrstuvwxyzp\",\"abcdefghijklmnopqrstuvwxyzq\",\"abcdefghijklmnopqrstuvwxyza\",\"abcdefghijklmnopqrstuvwxyzz\"]",
        "output": "Error: negative shift count"
      },
      {
        "input": "startWords = [\"a\",\"b\",\"c\",\"d\"], targetWords = [\"ab\",\"bc\",\"cd\",\"da\"]",
        "output": "4"
      }
    ]
  }
]